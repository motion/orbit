import * as React from 'react';
import { SizedSurfaceProps } from '../SizedSurface';
export declare type ButtonProps = SizedSurfaceProps & React.HTMLAttributes<HTMLButtonElement> & {
    acceptsHovered?: boolean;
};
export declare const Button: React.ForwardRefExoticComponent<React.HTMLAttributes<any> & import("@mcro/css/_/cssPropertySet").OriginalCSSPropertySetStrict & {
    borderLeftRadius?: number;
    borderRightRadius?: number;
    borderBottomRadius?: number;
    borderTopRadius?: number;
} & {
    hover?: boolean;
    hoverStyle?: any;
    active?: boolean;
    activeStyle?: any;
    ellipse?: boolean;
    borderRadius?: number;
    after?: React.ReactNode;
    background?: any;
    badge?: React.ReactNode;
    badgeProps?: Object;
    children?: React.ReactNode;
    name?: string;
    chromeless?: boolean;
    circular?: boolean;
    className?: string;
    clickable?: boolean;
    dim?: boolean;
    elementProps?: Object;
    elevation?: number;
    forwardRef?: React.Ref<any>;
    glint?: boolean;
    glow?: boolean;
    glowProps?: Object;
    height?: number;
    highlight?: boolean;
    hovered?: boolean;
    icon?: React.ReactNode;
    iconAfter?: boolean;
    iconColor?: any;
    iconProps?: Object;
    iconSize?: number;
    inline?: boolean;
    noInnerElement?: boolean;
    onClick?: any;
    size?: number;
    sizeIcon?: number;
    spaced?: boolean;
    stretch?: boolean;
    tagName?: string;
    theme?: import("@mcro/css").ThemeObject;
    tooltip?: string;
    tooltipProps?: import("..").PopoverProps;
    width?: string | number;
    alpha?: number;
    alphaHover?: number;
    dimmed?: boolean;
    disabled?: boolean;
    placeholderColor?: any;
    highlightBackground?: any;
    highlightColor?: any;
    style?: Object;
    ignoreSegment?: boolean;
    sizeLineHeight?: number | boolean;
    type?: string;
    themeSelect?: import("@mcro/gloss").ThemeSelect;
    iconPad?: number;
} & {
    flex?: any;
    circular?: boolean;
    sizeHeight?: number | boolean;
    sizeFont?: number | boolean;
    sizePadding?: number | boolean;
    sizeMargin?: number | boolean;
    sizeRadius?: number | boolean;
    sizeIcon?: number | boolean;
    height?: number;
    inline?: boolean;
} & React.HTMLAttributes<HTMLButtonElement> & {
    acceptsHovered?: boolean;
} & React.RefAttributes<{}>>;
//# sourceMappingURL=Button.d.ts.map