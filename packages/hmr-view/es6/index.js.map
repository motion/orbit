{"version":3,"sources":["../src/index.js"],"names":["proxyReactComponents","viewProxies","reloaded","reloadedInstances","lastHotReload","Date","now","filename","components","imports","locals","React","module","hot","accept","Error","wrapWithProxy","ReactClass","uid","isInFunction","displayName","path","push","instances","update","setTimeout","forEach","hotReload","instance","onWillReload","forceUpdate","onReload","window","view","get","__react_path","setInterval","length","console","log","join","Black","emit"],"mappings":";;;;;;;;kBAmBwBA,oB;;AAnBxB;;;;AACA;;;;;;AAEA,IAAIC,cAAc,EAAlB;AACA,IAAIC,WAAW,EAAf;AACA,IAAIC,oBAAoB,CAAxB;AACA,IAAIC,gBAAgBC,KAAKC,GAAL,EAApB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACe,SAASN,oBAAT,OAKZ;AAAA,MAJDO,QAIC,QAJDA,QAIC;AAAA,MAHDC,UAGC,QAHDA,UAGC;AAAA,MAFDC,OAEC,QAFDA,OAEC;AAAA,MADDC,MACC,QADDA,MACC;;AAAA,gCACeD,OADf;AAAA,MACME,KADN;;AAAA,+BAEgBD,MAFhB;AAAA,MAEME,MAFN;;AAAA,gCAGiBF,MAHjB;AAAA,MAGQG,GAHR,eAGQA,GAHR;;AAKD,MAAI,CAACA,GAAD,IAAQ,OAAOA,IAAIC,MAAX,KAAsB,UAAlC,EAA8C;AAC5C,UAAM,IAAIC,KAAJ,CACJ,8HADI,CAAN;AAGD;;AAED,SAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,GAAnC,EAAwC;AAC7C;AACA;AAF6C,0BAGDV,WAAWU,GAAX,CAHC;AAAA,QAGrCC,YAHqC,mBAGrCA,YAHqC;AAAA,gDAGvBC,WAHuB;AAAA,QAGvBA,WAHuB,yCAGTF,GAHS;;AAI7C,QAAMG,OAAOd,WAAW,GAAX,GAAiBW,GAA9B;;AAEA,QAAIC,YAAJ,EAAkB;AAChB,aAAOF,UAAP;AACD;;AAED,QAAIL,UAAUA,OAAOC,GAAjB,IAAwBD,OAAOC,GAAP,CAAWC,MAAvC,EAA+C;AAC7CF,aAAOC,GAAP,CAAWC,MAAX,CAAkB,GAAlB,EAAuB,YAAM,CAAE,CAA/B,EAD6C,CACZ;AAClC;;AAED;AACA,QAAIb,YAAYoB,IAAZ,CAAJ,EAAuB;AACrBnB,eAASoB,IAAT,CAAcF,WAAd;AACA,UAAMG,YAAYtB,YAAYoB,IAAZ,EAAkBG,MAAlB,CAAyBP,UAAzB,CAAlB;AACAQ,iBAAW,YAAM;AACfF,kBAAUG,OAAV,CAAkB,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAC7C,cAAIA,SAASC,YAAb,EAA2B;AACzBD,qBAASC,YAAT,CAAsBjB,MAAtB;AACD;AACD,8CAAgBgB,QAAhB;AACA,cAAIA,SAASE,WAAb,EAA0B;AACxBF,qBAASE,WAAT;AACD;AACD,cAAIF,SAASG,QAAb,EAAuB;AACrBH,qBAASG,QAAT,CAAkBnB,MAAlB;AACD;AACDT;AACD,SAZD;AAaAC,wBAAgBC,KAAKC,GAAL,EAAhB;AACA0B,eAAO5B,aAAP,GAAuBA,aAAvB;AACD,OAhBD;AAiBD,KApBD,MAoBO;AACLH,kBAAYoB,IAAZ,IAAoB,0BAAYJ,UAAZ,CAApB;AACD;;AAED,QAAMgB,OAAOhC,YAAYoB,IAAZ,EAAkBa,GAAlB,EAAb;;AAEAD,SAAKE,YAAL,GAAoBd,IAApB;;AAEA,WAAOpB,YAAYoB,IAAZ,EAAkBa,GAAlB,EAAP;AACD,GA5CD;AA6CD;;AAEDE,YAAY,YAAM;AAChB,MAAIlC,SAASmC,MAAb,EAAqB;AACnBC,YAAQC,GAAR,YAAqBrC,SAASsC,IAAT,CAAc,IAAd,CAArB,UAA6CrC,iBAA7C;AACA,QAAI6B,OAAOS,KAAX,EAAkB;AAChBT,aAAOS,KAAP,CAAaR,IAAb,CAAkBS,IAAlB,CAAuB,KAAvB;AACD;AACDxC,eAAW,EAAX;AACAC,wBAAoB,CAApB;AACD;AACF,CATD,EASG,IATH","file":"index.js","sourcesContent":["import createProxy from './proxyClass'\nimport deepForceUpdate from 'react-deep-force-update'\n\nlet viewProxies = {}\nlet reloaded = []\nlet reloadedInstances = 0\nlet lastHotReload = Date.now()\n\n// so you can hmr your hmr bro\n// if (module && module.hot && module.hot.accept) {\n//   module.hot.accept('.', () => {\n//     viewProxies = module.hot.data.viewProxies || {}\n//   })\n//   module.hot.dispose(data => {\n//     data.viewProxies = viewProxies\n//   })\n// }\n\n// wraps each file\nexport default function proxyReactComponents({\n  filename,\n  components,\n  imports,\n  locals,\n}) {\n  const [React] = imports\n  const [module] = locals\n  const [{ hot }] = locals\n\n  if (!hot || typeof hot.accept !== 'function') {\n    throw new Error(\n      'locals[0] does not appear to be a `module` object with Hot Module replacement API enabled. You should disable @mcro/view-hmr',\n    )\n  }\n\n  return function wrapWithProxy(ReactClass, uid) {\n    // this code is wrapped around and run at runtime\n    // for every file that looks like it has a react class\n    const { isInFunction, displayName = uid } = components[uid]\n    const path = filename + '$' + uid\n\n    if (isInFunction) {\n      return ReactClass\n    }\n\n    if (module && module.hot && module.hot.accept) {\n      module.hot.accept('.', () => {}) // to make it a fast hmr\n    }\n\n    // if existing proxy\n    if (viewProxies[path]) {\n      reloaded.push(displayName)\n      const instances = viewProxies[path].update(ReactClass)\n      setTimeout(() => {\n        instances.forEach(function hotReload(instance) {\n          if (instance.onWillReload) {\n            instance.onWillReload(module)\n          }\n          deepForceUpdate(instance)\n          if (instance.forceUpdate) {\n            instance.forceUpdate()\n          }\n          if (instance.onReload) {\n            instance.onReload(module)\n          }\n          reloadedInstances++\n        })\n        lastHotReload = Date.now()\n        window.lastHotReload = lastHotReload\n      })\n    } else {\n      viewProxies[path] = createProxy(ReactClass)\n    }\n\n    const view = viewProxies[path].get()\n\n    view.__react_path = path\n\n    return viewProxies[path].get()\n  }\n}\n\nsetInterval(() => {\n  if (reloaded.length) {\n    console.log(`[HMR] ${reloaded.join(', ')}, ${reloadedInstances} instances`)\n    if (window.Black) {\n      window.Black.view.emit('hmr')\n    }\n    reloaded = []\n    reloadedInstances = 0\n  }\n}, 1000)\n"]}