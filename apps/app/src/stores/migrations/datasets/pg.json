[{"title":"12 August 1995: It Works","text":"These emails are from the day we got Viaweb working.  I think\nwe demoed it to potential investors a few days later.\nFrom rtm@uun.org Sat Aug 12 13:49:39 1995\nTo: pg@garage.uun.org\nSubject: score: 2I have clisp installed, and it has a (shell \"...\") command.The sink works now.From rtm@eecs.harvard.edu Sat Aug 12 16:26:39 1995\nTo: pg@eecs.harvard.edu\nSubject: clispIt loads now. It's running (gen-site)... I think I'll get some coffee.From pg@das.harvard.edu Sat Aug 12 23:25:29 1995\nTo: gino@webgen.com, jlw@webgen.com\nSubject: it works!\nCc: pg, rtmAbout an hour ago we got the generator working remotely.  That\nis, you can now run the generator at our site from Netscape,\nwherever you happen to be.--> If you were a catalog company, yesterday there were about five\nplaces that could generate a web catalog for you.  Now anyone\nwith a modem and a copy of Netscape can do it.To use the program, all you have to do is go to a certain URL\nat www.webgen.com.  This page has a form you can type commands\ninto to run the generator.  When it has finished, you can inspect\nyour changed catalog by going to its URL.We now have to do a lot of polishing: the program is very slow\nand not especially user-friendly.  But it is a real, working system,\nand it already generates the best catalogs on the Web.We are thinking of having the service go online for real around\nthe beginning of September.  Between now and then we might like\nto use you as a guinea-pig, Gino.  Actually, we should have\nJulian generate a catalog of his own, too.Yow!  -- pg"},{"title":"6,631,372","text":"March 2006, rev August 2009A couple days ago I found to my surprise that I'd been granted a\npatent.\nIt issued in 2003, but no one told me.  I wouldn't know about it\nnow except that a few months ago, while visiting Yahoo, I happened\nto run into a Big Cheese I knew from working there in the late\nnineties.  He brought up something called Revenue Loop, which Viaweb\nhad been working on when they bought us.The idea is basically that you sort search results not in order of\ntextual \"relevance\" (as search engines did then) nor in order of\nhow much advertisers bid (as Overture did) but in order of the bid\ntimes the number of transactions.  Ordinarily you'd do this for\nshopping searches, though in fact one of the features of our scheme\nis that it automatically detects which searches are shopping searches.If you just order the results in order of bids, you can make the\nsearch results useless, because the first results could be dominated\nby lame sites that had bid the most.  But if you order results by\nbid multiplied by transactions, far from selling out, you're getting\na better measure of relevance.  What could be a better sign that\nsomeone was satisfied with a search result than going to the site\nand buying something?And, of course, this algorithm automatically maximizes the revenue\nof the search engine.Everyone is focused on this type of approach now, but few were in\n1998.  In 1998 it was all about selling banner ads.  We didn't know\nthat, so we were pretty excited when we figured out what seemed to\nus the optimal way of doing shopping searches.When Yahoo was thinking of buying us, we had a meeting with Jerry\nYang in New York.  For him, I now realize, this was supposed to be\none of those meetings when you check out a company you've pretty\nmuch decided to buy, just to make sure they're ok guys.  We weren't\nexpected to do more than chat and seem smart and reasonable.  He\nmust have been dismayed when I jumped up to the whiteboard and\nlaunched into a presentation of our exciting new technology.I was just as dismayed when he didn't seem to care at all about it.\nAt the time I thought, \"boy, is this guy poker-faced.  We present\nto him what has to be the optimal way of sorting product search\nresults, and he's not even curious.\"  I didn't realize till much later\nwhy he didn't care.  In 1998, advertisers were overpaying enormously\nfor ads on web sites.\nIn 1998, if advertisers paid the maximum that traffic was worth to\nthem, Yahoo's revenues would have decreased.Things are different now, of course.  Now this sort of thing is all\nthe rage.  So when I ran into the Yahoo exec I knew from the old\ndays in the Yahoo cafeteria a few months ago, the first thing he\nremembered was not (fortunately) all the fights I had with him, but\nRevenue Loop.\"Well,\" I said, \"I think we actually applied for a patent on it.\nI'm not sure what happened to the application after I left.\"\"Really?  That would be an important patent.\"So someone investigated, and sure enough, that patent application\nhad continued in the pipeline for several years after, and finally\nissued in 2003.The main thing that struck me on reading it, actually, is that\nlawyers at some point messed up my nice clear writing.  Some clever\nperson with a spell checker reduced one section to Zen-like incomprehensibility:\nAlso, common spelling errors will tend to get fixed. For example,\nif users searching for \"compact disc player\" end up spending\nconsiderable money at sites offering compact disc players, then\nthose pages will have a higher relevance for that search phrase,\neven though the phrase \"compact disc player\" is not present on\nthose pages.\n(That \"compat disc player\" wasn't a typo, guys.)For the fine prose of the original, see the provisional application\nof February 1998, back when we were still Viaweb and couldn't afford\nto pay lawyers to turn every \"a lot of\" into \"considerable.\""},{"title":"A Firefox in IE's Henhouse","text":"By Steve Hamm, Business Week Online, 17 Sep 2004.Though the Mozilla Web browser's share is still small,\nit's winning converts wary of security holes in Microsoft's\ndominant productWhen was the last time you heard about the browser wars? Well, they're back. The reason: For the first time in more than seven years, Microsoft is losing Web browser market share. And it's not just a blip. According to Web analytics company WebSideStory, Microsoft's share of browser users who visited top e-commerce and corporate sites shrank from 95.6% in June to 93.7% in September. And people using browsers made by the Mozilla open-source software group grew from 3.5% to 5.2%.Programmers at the Mozilla Foundation hope to increase that momentum with the release this fall of their new browser's consumer-ready version, called Firefox 1.0. It's superfast and suffers few of the security problems that have plagued Microsoft's Internet Explorer in recent months. \"There's a window of opportunity for Mozilla to gain significant market share,\" says Stacey Quandt, analyst with tech consultant Robert Frances Group in Stamford, Conn."},{"title":"A Fundraising Survival Guide","text":"August 2008Raising money is the second hardest part of starting a startup.\nThe hardest part is making something people want: most startups\nthat die, die because they didn't do that.  But the second biggest\ncause of death is probably the difficulty of raising money.\nFundraising is brutal.One reason it's so brutal is simply the brutality of markets.  People\nwho've spent most of their lives in schools or big companies may\nnot have been exposed to that.  Professors and bosses usually feel\nsome sense of responsibility toward you; if you make a valiant\neffort and fail, they'll cut you a break.  Markets are less forgiving.\nCustomers don't care how hard you worked, only whether you solved\ntheir problems.Investors evaluate startups the way customers evaluate products,\nnot the way bosses evaluate employees.  If you're making a valiant\neffort and failing, maybe they'll invest in your next startup, but\nnot this one.But raising money from investors is harder than selling to\ncustomers, because there are so few of them.  There's\nnothing like an efficient market.  You're unlikely to have more\nthan 10 who are interested; it's difficult to talk to more.  So the\nrandomness of any one investor's behavior can really affect you.Problem number 3: investors are very random.  All investors, including\nus, are by ordinary standards incompetent.  We constantly have to\nmake decisions about things we don't understand, and more often\nthan not we're wrong.And yet a lot is at stake.  The amounts invested by different types\nof investors vary from five thousand dollars to fifty million, but\nthe amount usually seems large for whatever type of investor it is.\nInvestment decisions are big decisions.That combination—making big decisions about things they don't\nunderstand—tends to make investors very skittish.  VCs are notorious\nfor leading founders on.  Some of the more unscrupulous do it\ndeliberately.  But even the most well-intentioned investors can\nbehave in a way that would seem crazy in everyday life.  One day\nthey're full of enthusiasm and seem ready to write you a check on\nthe spot; the next they won't return your phone calls.  They're not\nplaying games with you.  They just can't make up their minds.\n[1]If that weren't bad enough, these wildly fluctuating nodes are all\nlinked together.  Startup investors all know one another, and (though\nthey hate to admit it) the biggest factor in their opinion of you\nis the opinion of other investors.\n[2]\nTalk about a recipe for\nan unstable system.  You get the opposite of the damping that the\nfear/greed balance usually produces in markets.  No one is interested\nin a startup that's a \"bargain\" because everyone else hates it.So the inefficient market you get because there are so few players\nis exacerbated by the fact that they act less than independently.\nThe result is a system like some kind of primitive, multi-celled\nsea creature, where you irritate one extremity and the whole thing\ncontracts violently.Y Combinator is working to fix this.  We're trying to increase the\nnumber of investors just as we're increasing the number of startups.\nWe hope that as the number of both increases we'll get something\nmore like an efficient market.  As t approaches infinity, Demo Day\napproaches an auction.Unfortunately, t is still very far from infinity.  What does a\nstartup do now, in the imperfect world we currently inhabit? The\nmost important thing is not to let fundraising get you down.  Startups\nlive or die on morale.  If you let the difficulty of raising money\ndestroy your morale, it will become a self-fulfilling prophecy.Bootstrapping (= Consulting)Some would-be founders may by now be thinking, why deal with investors\nat all?  If raising money is so painful, why do it?One answer to that is obvious: because you need money to live on.\nIt's a fine idea in principle to finance your startup with its own\nrevenues, but you can't create instant customers.  Whatever you\nmake, you have to sell a certain amount to break even.  It will\ntake time to grow your sales to that point, and it's hard to predict,\ntill you try, how long it will take.We could not have bootstrapped Viaweb, for example.  We charged\nquite a lot for our software—about $140 per user per month—but\nit was at least a year before our revenues would have covered even\nour paltry costs.  We didn't have enough saved to live on for a\nyear.If you factor out the \"bootstrapped\" companies that were actually\nfunded by their founders through savings or a day job, the remainder\neither (a) got really lucky, which is hard to do on demand, or (b)\nbegan life as consulting companies and gradually transformed\nthemselves into product companies.Consulting is the only option you can count on.  But consulting is\nfar from free money.  It's not as painful as raising money from\ninvestors, perhaps, but the pain is spread over a longer period.\nYears, probably.  And for many types of startup, that delay could\nbe fatal.  If you're working on something so unusual that no one\nelse is likely to think of it, you can take your time.  Joshua\nSchachter gradually built Delicious on the side while working on\nWall Street.  He got away with it because no one else realized it\nwas a good idea.  But if you were building something as obviously\nnecessary as online store software at about the same time as Viaweb,\nand you were working on it on the side while spending most of your\ntime on client work, you were not in a good position.Bootstrapping sounds great in principle, but this apparently verdant\nterritory is one from which few startups emerge alive.  The mere\nfact that bootstrapped startups tend to be famous on that account\nshould set off alarm bells.  If it worked so well, it would be the\nnorm.\n[3]Bootstrapping may get easier, because starting a company is getting\ncheaper.  But I don't think we'll ever reach the point where most\nstartups can do without outside funding.  Technology tends to\nget dramatically cheaper, but living expenses don't.The upshot is, you can choose your pain: either the short, sharp\npain of raising money, or the chronic ache of consulting.  For a\ngiven total amount of pain, raising money is the better choice,\nbecause new technology is usually more valuable now than later.But although for most startups raising money will be the lesser\nevil, it's still a pretty big evil—so big that it can easily kill\nyou.  Not merely in the obvious sense that if you fail to raise\nmoney you might have to shut the company down, but because the\nprocess of raising money itself can kill you.To survive it you need a set of techniques mostly\northogonal to the ones used in convincing investors, just as mountain\nclimbers need to know survival techniques that are mostly orthogonal\nto those used in physically getting up and down mountains.1. Have low expectations.The reason raising money destroys so many startups' morale is not\nsimply that it's hard, but that it's so much harder than they\nexpected.  What kills you is the disappointment.  And the lower\nyour expectations, the harder it is to be disappointed.Startup founders tend to be optimistic.  This can work well in\ntechnology, at least some of the time, but it's the wrong way to\napproach raising money.  Better to assume investors will always let\nyou down.  Acquirers too, while we're at it.  At YC one of our\nsecondary mantras is \"Deals fall through.\"  No matter what deal\nyou have going on, assume it will fall through.  The predictive\npower of this simple rule is amazing.There will be a tendency, as a deal progresses, to start to believe\nit will happen, and then to depend on it happening.  You must resist\nthis.  Tie yourself to the mast.  This is what kills you.  Deals\ndo not have a trajectory like most other human interactions, where\nshared plans solidify linearly over time.  Deals often fall through\nat the last moment.  Often the other party doesn't really think\nabout what they want till the last moment.  So you can't use your\neveryday intuitions about shared plans as a guide.  When it comes\nto deals, you have to consciously turn them off and become\npathologically cynical.This is harder to do than it sounds.  It's very flattering when\neminent investors seem interested in funding you.  It's easy to\nstart to believe that raising money will be quick and straightforward.\nBut it hardly ever is.2. Keep working on your startup.It sounds obvious to say that you should keep working on your startup\nwhile raising money.  Actually this is hard to do.  Most startups\ndon't manage to.Raising money has a mysterious capacity to suck up all your attention.\nEven if you only have one meeting a day with investors, somehow\nthat one meeting will burn up your whole day.  It costs not just\nthe time of the actual meeting, but the time getting there and back,\nand the time preparing for it beforehand and thinking about it\nafterward.The best way to survive the distraction of meeting with investors\nis probably to partition the company: to pick one founder to deal\nwith investors while the others keep the company going.  This works\nbetter when a startup has 3 founders than 2, and better when the\nleader of the company is not also the lead developer.  In the best\ncase, the company keeps moving forward at about half speed.That's the best case, though.  More often than not the company comes\nto a standstill while raising money.  And that is dangerous for so\nmany reasons.  Raising money always takes longer than you expect.\nWhat seems like it's going to be a 2 week interruption turns into\na 4 month interruption.  That can be very demoralizing.  And worse\nstill, it can make you less attractive to investors.  They want to\ninvest in companies that are dynamic.  A company that hasn't done\nanything new in 4 months doesn't seem dynamic, so they start to\nlose interest.  Investors rarely grasp this, but much of what\nthey're responding to when they lose interest in a startup is the\ndamage done by their own indecision.The solution: put the startup first.  Fit meetings with investors\ninto the spare moments in your development schedule, rather than\ndoing development in the spare moments between meetings with\ninvestors.  If you keep the company moving forward—releasing new\nfeatures, increasing traffic, doing deals, getting written\nabout—those investor meetings are more likely to be productive.  Not just\nbecause your startup will seem more alive, but also because it will\nbe better for your own morale, which is one of the main ways investors\njudge you.3. Be conservative.As conditions get worse, the optimal strategy becomes more conservative.\nWhen things go well you can take risks; when things are bad you\nwant to play it safe.I advise approaching fundraising as if it were always going badly.\nThe reason is that between your ability to delude yourself and the\nwildly unstable nature of the system you're dealing with, things\nprobably either already are or could easily become much worse than\nthey seem.What I tell most startups we fund is that if someone reputable\noffers you funding on reasonable terms, take it.  There have been\nstartups that ignored this advice and got away with it—startups\nthat ignored a good offer in the hope of getting a better one, and\nactually did.  But in the same position I'd give the same advice\nagain.  Who knows how many bullets were in the gun they were playing\nRussian roulette with?Corollary: if an investor seems interested, don't just let them\nsit. You can't assume someone interested in investing will stay\ninterested.  In fact, you can't even tell (they can't even tell)\nif they're really interested till you try to convert that interest\ninto money.  So if you have hot prospect, either close them now or\nwrite them off.  And unless you already have enough funding, that\nreduces to: close them now.Startups don't win by getting great funding rounds, but by making\ngreat products.  So finish raising money and get\nback to work.4. Be flexible.There are two questions VCs ask that you shouldn't answer: \"Who\nelse are you talking to?\" and \"How much are you trying to raise?\"VCs don't expect you to answer the first question. They ask it just\nin case.\n[4]\nThey do seem to expect an answer to the second.  But\nI don't think you should just tell them a number.  Not as a way to\nplay games with them, but because you shouldn't have a fixed\namount you need to raise.The custom of a startup needing a fixed amount of funding is an\nobsolete one left over from the days when startups were more\nexpensive.  A company that needed to build a factory or hire 50\npeople obviously needed to raise a certain minimum amount.  But few\ntechnology startups are in that position today.We advise startups to tell investors there are several different\nroutes they could take depending on how much they raised.  As little\nas $50k could pay for food and rent for the founders for a year.\nA couple hundred thousand would let them get office space and hire\nsome smart people they know from school.  A couple million would\nlet them really blow this thing out.  The message (and not just the\nmessage, but the fact) should be: we're going to succeed no matter\nwhat.  Raising more money just lets us do it faster.If you're raising an angel round, the size of the round can even\nchange on the fly.  In fact, it's just as well to make the round\nsmall initially, then expand as needed, rather than trying to raise\na large round and risk losing the investors you already have if you\ncan't raise the full amount.  You may even want to do a \"rolling\nclose,\" where the round has no predetermined size, but instead you\nsell stock to investors one at a time as they say yes.  That helps\nbreak deadlocks, because you can start as soon as the first one\nis ready to buy.\n[5]5. Be independent.A startup with a couple founders in their early twenties can have\nexpenses so low that they could be profitable on\nas little as $2000 per month.  That's negligible as corporate\nrevenues go, but the effect on your morale and your bargaining\nposition is anything but.  At YC we use the phrase \"ramen profitable\"\nto describe the situation where you're making just enough to pay\nyour living expenses.  Once you cross into ramen profitable,\neverything changes.  You may still need investment to make it big,\nbut you don't need it this month.You can't plan when you start a startup how long\nit will take to become profitable.  But if you find yourself in a\nposition where a little more effort expended on sales would carry\nyou over the threshold of ramen profitable, do it.Investors like it when you're ramen profitable.  It shows you've\nthought about making money, instead of just working on amusing\ntechnical problems; it shows you have the discipline to keep your\nexpenses low; but above all, it means you don't need them.There is nothing investors like more than a startup that seems like\nit's going to succeed even without them.  Investors like it when\nthey can help a startup, but they don't like startups that would\ndie without that help.At YC we spend a lot of time trying to predict how the startups we've\nfunded will do, because we're trying to learn how to pick winners.\nWe've now watched the trajectories of so many startups that we're\ngetting better at predicting them.  And when we're talking\nabout startups we think are likely to succeed, what we find ourselves\nsaying is things like \"Oh, those guys can take care of themselves.\nThey'll be fine.\" Not \"those guys are really smart\" or\n\"those guys are working on a great idea.\"\n[6]\nWhen we predict good outcomes for startups, the qualities\nthat come up in the supporting arguments are toughness, adaptability,\ndetermination.  Which means to the extent we're correct, those are\nthe qualities you need to win.Investors know this, at least unconsciously.   The reason they like\nit when you don't need them is not simply that they like what they\ncan't have, but because that quality is what makes founders succeed.Sam Altman\nhas it.  You could parachute him into an island full of\ncannibals and come back in 5 years and he'd be the king.  If you're\nSam Altman, you don't have to be profitable to convey to investors\nthat you'll succeed with or without them.  (He wasn't, and he did.)\nNot everyone has Sam's deal-making ability.  I myself don't.  But\nif you don't, you can let the numbers speak for you.6. Don't take rejection personally.Getting rejected by investors can make you start to doubt yourself.\nAfter all, they're more experienced than you.  If they think your\nstartup is lame, aren't they probably right?Maybe, maybe not.  The way to handle rejection is with precision.\nYou shouldn't simply ignore rejection.  It might mean something.\nBut you shouldn't automatically get demoralized either.To understand what rejection means, you have to understand first\nof all how common it is.  Statistically, the average VC is a rejection\nmachine.  David Hornik, a partner at August, told me:\nThe numbers for me ended up being something like 500 to 800 plans\nreceived and read, somewhere between 50 and 100 initial 1 hour\nmeetings held, about 20 companies that I got interested in, about\n5 that I got serious about and did a bunch of work, 1 to 2 deals\ndone in a year.  So the odds are against you.  You\nmay be a great entrepreneur, working on interesting stuff, etc.\nbut it is still incredibly unlikely that you get funded.\nThis is less true with angels, but VCs reject practically everyone.\nThe structure of their business means a partner does at most 2 new\ninvestments a year, no matter how many good startups approach him.In addition to the odds being terrible, the average investor is,\nas I mentioned, a pretty bad judge of startups.  It's harder to\njudge startups than most other things, because great startup ideas\ntend to seem wrong. A good startup idea has to be not just good but\nnovel.  And to be both good and novel, an idea probably has to seem\nbad to most people, or someone would already be doing it and it\nwouldn't be novel.That makes judging startups harder than most other things one judges.\nYou have to be an intellectual contrarian to be a good startup\ninvestor.  That's a problem for VCs, most of whom are not particularly\nimaginative.  VCs are mostly money guys, not people who make things.\n[7]\nAngels are better at appreciating novel ideas, because most\nwere founders themselves.So when you get a rejection, use the data that's in it, and not what's\nnot.  If an investor gives you specific reasons for not investing,\nlook at your startup and ask if they're right.  If they're real\nproblems, fix them.  But don't just take their word for it.  You're\nsupposed to be the domain expert; you have to decide.Though a rejection doesn't necessarily tell you anything about your\nstartup, it does suggest your pitch could be improved.  Figure out\nwhat's not working and change it.  Don't just think \"investors are\nstupid.\"  Often they are, but figure out precisely where you lose\nthem.Don't let rejections pile up as a depressing, undifferentiated heap.\nSort them and analyze them, and then instead of thinking \"no one\nlikes us,\" you'll know precisely how big a problem you have, and\nwhat to do about it.7. Be able to downshift into consulting (if appropriate).Consulting, as I mentioned, is a dangerous way to finance a startup.\nBut it's better than dying.  It's a bit like anaerobic respiration:\nnot the optimum solution for the long term, but it can save you\nfrom an immediate threat.  If you're having trouble raising money\nfrom investors at all, it could save you to be able to shift\ntoward consulting.This works better for some startups than others.  It wouldn't have\nbeen a natural fit for, say, Google, but if your company was making\nsoftware for building web sites, you could degrade fairly gracefully\ninto consulting by building sites for clients with it.So long as you were careful not to get sucked permanently into\nconsulting, this could even have advantages.  You'd understand your\nusers well if you were using the software for them.  Plus as a\nconsulting company you might be able to get big-name users using\nyour software that you wouldn't have gotten as a product company.At Viaweb we were forced to operate like a consulting company\ninitially, because we were so desperate for users that we'd offer\nto build merchants' sites for them if they'd sign up.\nBut we never charged for such work, because we didn't want them to\nstart treating us like actual consultants, and calling us every\ntime they wanted something changed on their site.  We knew we had\nto stay a product company, because only\nthat scales.8. Avoid inexperienced investors.Though novice investors seem unthreatening they can be the most\ndangerous sort, because they're so nervous.  Especially in\nproportion to the amount they invest.  Raising $20,000 from a first-time\nangel investor can be as much work as raising $2 million from\na VC fund.Their lawyers are generally inexperienced too.  But while the\ninvestors can admit they don't know what they're doing, their lawyers\ncan't.  One YC startup negotiated terms for a tiny round with\nan angel, only to receive a 70-page agreement from his lawyer.  And\nsince the lawyer could never admit, in front of his client, that\nhe'd screwed up, he instead had to insist on retaining all the\ndraconian terms in it, so the deal fell through.Of course, someone has to take money from novice investors, or there\nwould never be any experienced ones.  But if you do, either (a)\ndrive the process yourself, including supplying the\npaperwork, or\n(b) use them only to fill up a larger round led by someone else.9. Know where you stand.The most dangerous thing about investors is their indecisiveness.\nThe worst case scenario is the long no, the no that comes after\nmonths of meetings.  Rejections from investors are like design\nflaws: inevitable, but much less costly if you discover them early.So while you're talking to investors, constantly look for signs of\nwhere you stand.  How likely are they to offer you a term sheet?\nWhat do they have to be convinced of first?  You shouldn't necessarily\nalways be asking these questions outright—that could get\nannoying—but you should always be collecting data about them.Investors tend to resist committing except to the extent you push\nthem to.  It's in their interest to collect the maximum amount of\ninformation while making the minimum number of decisions.  The best\nway to force them to act is, of course, competing investors.  But\nyou can also apply some force by focusing the discussion:\nby asking what specific questions they need answered to make\nup their minds, and then answering them.  If you get through several\nobstacles and they keep raising new ones, assume that ultimately\nthey're going to flake.You have to be disciplined when collecting data about investors'\nintentions.  Otherwise their desire to lead you on will combine\nwith your own desire to be led on to produce completely inaccurate\nimpressions.Use the data to weight your strategy.\nYou'll probably be talking to several investors.  Focus on the ones\nthat are most likely to say yes.  The value of a potential investor\nis a combination of how good it would be if they said yes, and how\nlikely they are to say it.  Put the most weight on the second factor.\nPartly because the most important quality in an investor is simply\ninvesting.  But also because, as I mentioned, the biggest factor\nin investors' opinion of you is other investors' opinion of you.\nIf you're talking to several investors and you manage to get one\nover the threshold of saying yes, it will make the others much more\ninterested.  So you're not sacrificing the lukewarm investors if\nyou focus on the hot ones; convincing the hot investors is the best\nway to convince the lukewarm ones.FutureI'm hopeful things won't always be so awkward. I hope that as startups\nget cheaper and the number of investors increases, raising money\nwill become, if not easy, at least straightforward.In the meantime, the brokenness of the funding process offers a big\nopportunity.  Most investors have no idea how dangerous they are.\nThey'd be surprised to hear that raising money from them is something\nthat has to be treated as a threat to a company's survival.  They\njust think they need a little more information to make up their\nminds.  They don't get that there are 10 other investors who also\nwant a little more information, and that the process of talking to\nthem all can bring a startup to a standstill for months.Because investors don't understand the cost of dealing with them,\nthey don't realize how much room there is for a potential competitor\nto undercut them.  I know from my own experience how much faster\ninvestors could decide, because we've brought our own time down to\n20 minutes (5 minutes of reading an application plus a 10 minute\ninterview plus 5 minutes of discussion).  If you were investing\nmore money you'd want to take longer, of course.  But if we can\ndecide in 20 minutes, should it take anyone longer than a couple\ndays?Opportunities like this don't sit unexploited forever, even in an\nindustry as conservative as venture capital.  So\neither existing investors will start to make up their minds faster,\nor new investors will emerge who do.In the meantime founders have to treat raising money as a dangerous\nprocess.  Fortunately, I can fix the biggest danger right here.\nThe biggest danger is surprise.  It's that startups will underestimate\nthe difficulty of raising money—that they'll cruise through all\nthe initial steps, but when they turn to raising money they'll find\nit surprisingly hard, get demoralized, and give up. So I'm telling\nyou in advance: raising money is hard.Notes[1]\nWhen investors can't make up their minds, they sometimes\ndescribe it as if it were a property of the startup.  \"You're too\nearly for us,\" they sometimes say.  But which of them, if they were\ntaken back in a time machine to the hour Google was founded, wouldn't\noffer to invest at any valuation the founders chose?  An hour old\nis not too early if it's the right startup.  What \"you're too early\"\nreally means is \"we can't figure out yet whether you'll succeed.\"[2]\nInvestors influence one another both directly and indirectly.\nThey influence one another directly through the \"buzz\" that surrounds\na hot startup.  But they also influence one another indirectly\nthrough the founders.  When a lot of investors are interested in\nyou, it increases your confidence in a way that makes you much more\nattractive to investors.No VC will admit they're influenced by buzz.  Some genuinely aren't.\nBut there are few who can say they're not influenced by confidence.[3]\nOne VC who read this essay wrote:\"We try to avoid companies that got bootstrapped with consulting.\nIt creates very bad behaviors/instincts that are hard to erase\nfrom a company's culture.\"[4]\nThe optimal way to answer the first question is to say that\nit would be improper to name names, while simultaneously implying\nthat you're talking to a bunch of other VCs who are all about to\ngive you term sheets.  If you're the sort of person who understands\nhow to do that, go ahead.  If not, don't even try.  Nothing annoys\nVCs more than clumsy efforts to manipulate them.[5]\nThe disadvantage of expanding a round on the fly is that the\nvaluation is fixed at the start, so if you get a sudden rush of\ninterest, you may have to decide between turning some investors\naway and selling more of the company than you meant to.  That's a\ngood problem to have, however.[6]\nI wouldn't say that intelligence doesn't matter in startups.\nWe're only comparing YC startups, who've already made it over a\ncertain threshold.[7]\nBut not all are.  Though most VCs are suits at heart,\nthe most successful ones tend not to be.  Oddly enough,\nthe best VCs tend to be the least VC-like.Thanks to Trevor Blackwell, David Hornik, Jessica Livingston,\nRobert Morris, and Fred Wilson for reading drafts of this."},{"title":"A Local Revolution?","text":"April 2009Recently I realized I'd been holding two ideas in my head that would explode if combined.The first is that startups may represent a new economic phase, on the scale of the Industrial Revolution. I'm not sure of this, but there seems a decent chance it's true.  People are dramatically more\nproductive as founders or early employees of startups—imagine how much less Larry and Sergey would have achieved if they'd gone to work for a big company—and that scale of improvement can change social customs.The second idea is that startups are a type of business that flourishes in certain places that specialize in it—that Silicon Valley specializes in startups in the same way Los Angeles specializes in movies, or New York in finance. [1]What if both are true?  What if startups are both a new economic phase and also a type of business that only flourishes in certain centers?If so, this revolution is going to be particularly revolutionary. All previous revolutions have spread.  Agriculture, cities, and industrialization all spread widely. If startups end up being like the movie business, with just a handful of centers and one dominant one, that's going to have novel consequences.There are already signs that startups may not spread particularly well.  The spread of startups seems to be proceeding slower than the spread of the Industrial Revolution, despite the fact that communication is so much faster now.Within a few decades of the founding of Boulton & Watt there were steam engines scattered over northern Europe and North America.  Industrialization didn't spread much beyond those regions for a while. It only spread to places where there was a strong middle class—countries where a private citizen could make a fortune without having it confiscated. Otherwise it wasn't worth investing in factories.  But in a country with a strong middle class it was easy for industrial techniques to take root.  An individual mine or factory owner could decide to install a steam engine, and within a few years he could probably find someone local to make him one.  So steam engines spread fast.  And they spread widely, because the locations of mines and factories were determined by features like rivers, harbors, and sources of raw materials.\n[2]Startups don't seem to spread so well, partly because they're more a social than a technical phenomenon, and partly because they're not tied to geography.  An individual European manufacturer could import industrial techniques and they'd work fine.  This doesn't seem to work so well with startups: you need a community of expertise, as you do in the movie business.  [3]\nPlus there aren't the same forces driving startups to spread.  Once railroads or electric power grids were invented, every region had to have them.  An area without railroads or power was a rich potential market.  But this isn't true with startups.  There's no need for a Microsoft of France or Google of Germany.Governments may decide they want to encourage startups locally, but government policy can't call them into being the way a genuine need could.How will this all play out?  If I had to predict now, I'd say that startups will spread, but very slowly, because their spread will be driven not by government policies (which won't work) or by market need (which doesn't exist) but, to the extent that it happens at all, by the same random factors that have caused startup culture to spread thus far.  And such random factors will increasingly be outweighed by the pull of existing startup hubs.Silicon Valley is where it is because William Shockley wanted to move back to Palo Alto, where he grew up, and the experts he lured west to work with him liked it so much they stayed.  Seattle owes much of its position as a tech center to the same cause: Gates and Allen wanted to move home.  Otherwise Albuquerque might have Seattle's place in the rankings.  Boston is a tech center because it's the intellectual capital of the US and probably the world.  And if Battery Ventures hadn't turned down Facebook, Boston would be significantly bigger now on the startup radar screen.But of course it's not a coincidence that Facebook got funded in the Valley and not Boston.  There are more and bolder investors in Silicon Valley than in Boston, and even undergrads know it.Boston's case illustrates the difficulty you'd have establishing a new startup hub this late in the game.  If you wanted to create a startup hub by reproducing the way existing ones happened, the\nway to do it would be to establish a first-rate research university in a place so nice that rich people wanted to live there.  Then the town would be hospitable to both groups you need: both founders and investors.  That's the combination that yielded Silicon Valley.  But Silicon Valley didn't have Silicon Valley to compete with.  If you tried now to create a startup hub by planting a great university in a nice place, it would have a harder time getting started, because many of the best startups it produced would be sucked away to existing startup hubs.Recently I suggested a potential shortcut:\npay startups to move.  Once you had enough good startups in one place, it would create a self-sustaining chain reaction.  Founders would start to move there without being paid, because that was where their peers were, and investors would appear too, because that was where the deals were.In practice I doubt any government would have the balls to try this, or the brains to do it right.  I didn't mean it as a practical suggestion, but more as an exploration of the lower bound of what it would take to create a startup hub deliberately.The most likely scenario is (1) that no government will successfully establish a startup hub, and (2) that the spread of startup culture will thus be driven by the random factors that have driven it so far, but (3) that these factors will be increasingly outweighed by the pull of existing startup hubs.  Result: this revolution, if it is one, will be unusually localized.Notes[1]\nThere are two very different types of startup: one kind that evolves naturally, and one kind that's called into being to \"commercialize\" a scientific discovery.  Most computer/software startups are now the first type, and most pharmaceutical startups the second.  When I talk about startups in this essay, I mean type I startups.  There is no difficulty making type II startups spread: all you have to do is fund medical research labs; commercializing whatever new discoveries the boffins throw off is as straightforward as building a new airport.  Type II startups neither require nor produce startup culture. But that means having type II startups won't get you type I startups.  Philadelphia is a case in point: lots of type II startups, but hardly any type I.Incidentally, Google may appear to be an instance of a type II startup, but it wasn't.  Google is not pagerank commercialized.  They could have used another algorithm and everything would have turned out the same.  What made Google Google is that they cared about doing search well at a critical point in the evolution of the web.[2]\nWatt didn't invent the steam engine.  His critical invention was a refinement that made steam engines dramatically more efficient: the separate condenser.  But that oversimplifies his role.  He had such a different attitude to the problem and approached it with such energy that he transformed the field.  Perhaps the most accurate way to put it would be to say that Watt reinvented the steam engine.[3]\nThe biggest counterexample here is Skype.  If you're doing\nsomething that would get shut down in the US, it becomes an\nadvantage to be located elsewhere.  That's why Kazaa took\nthe place of Napster.  And the expertise and connections the\nfounders gained from running Kazaa helped ensure the success\nof Skype.Thanks to Patrick Collison, Jessica Livingston, and Fred Wilson for reading drafts of this."},{"title":"ANSI Common Lisp","text":"ANSI Common Lisp combines an introduction to Lisp programming, and a\nconvenient, up-to-date reference manual for ANSI Common Lisp.\nBeginners will find that its careful explanations and interesting\nexamples make Lisp programming easy to learn.  Professional programmers\nwill appreciate its thorough, practical approach.Prentice Hall, 1995, 432 pages, paperback.  ISBN 0133708756.Buy at SoftPro (friends of\nmine and very reliable)\nor Amazon.\nAn up-to-date reference manual for ANSI Common Lisp.\nAn in-depth look at object-oriented programming.  Explains the\nCommon Lisp Object System (CLOS), and also shows how to write your own\nobject-oriented language.\nOver 20 substantial examples, including programs for ray-tracing,\ntext generation, pattern-matching, logical inference, generating HTML,\nsorting and searching, file I/O, compression, and date arithmetic.\nSpecial attention to critical concepts,\nincluding prefix syntax, code\nvs. data, recursion, functional programming, types, implicit pointers,\ndynamic allocation, closures, macros, class precedence, and generic\nfunctions vs.  message-passing.\nA complete guide to optimization.\nThe clearest and most thorough explanation of macros in any\nintroductory book.\nExamples that illustrate Lisp programming styles, including rapid\nprototyping, bottom-up programming, object-oriented programming, and\nembedded languages.\nAn appendix on debugging, with examples of common errors.\n\"A straightforward and well-written tutorial and reference to\nelementary and intermediate ANSI Common Lisp. It's more than just an\nintroductory book-- because of its extensive reference section, it may\nbe, for most readers, a useful alternative to Steele.\"- Richard Fateman, University of California at Berkeley\"This book would be ideal for a classroom text.  It is the only book\nup-to-date with respect to the ANSI standard.\"- John Foderaro, Franz Inc.\"Paul Graham has done it again.  His first book, On Lisp, provided an\nexcellent description of some of the advanced features of Lisp while\nthe present one provides a completely thorough introduction to the\nlanguage, including such topics as tuning a program for speed.\"- Thomas Cheatham, Harvard University\"The final chapter is brilliant.  It simultaneously explains some of\nthe key ideas behind object-oriented programming and takes the reader\nthrough several versions of an object-oriented system, each more\nsophisticated than the previous.\"- David Touretzky, Carnegie-Mellon University\"Graham's well-known text On Lisp set a new standard for books on\nadvanced Lisp programming. With ANSI Common Lisp he has provided the\nideal introductory text--a compact tutorial and a complete reference\non the latest standard.  This book would be excellent either for a\nstandalone Lisp or functional programming course or for courses on AI,\ncompilers, or object-oriented programming that use Lisp.  I will\ncertainly be using it in my courses, and my students will be happy\nthat they no longer have to buy both a Lisp text and Steele's\nreference.  I would also recommend it highly to programmers wishing to\nmove into the Lisp language.  The style is intelligent and lively, the\nexamples are interesting and well-chosen, and the standard of\nexplanation is impeccable.\"- Stuart Russell, University of California at Berkeley\"The book's clear and engaging format explains complicated constructs simply.\nThis format makes ANSI Common Lisp accessible to a general audience--even\nthose who have never programmed before.\"- Amazon.Com"},{"title":"A New Venture Animal","text":"March 2008, rev May 2013(This essay grew out of something I wrote for myself to figure\nout what we do.  Even though Y Combinator is now 3 years old, we're still\ntrying to understand its implications.)I was annoyed recently to read a description of Y Combinator that\nsaid \"Y Combinator does seed funding for startups.\"  What was\nespecially annoying about it was that I wrote it.  This doesn't\nreally convey what we do.  And the reason it's inaccurate is that,\nparadoxically, funding very early stage startups is not mainly about\nfunding.Saying YC does seed funding for startups is a description in terms\nof earlier models.  It's like calling a car a horseless carriage.When you scale animals you can't just keep everything in proportion.\nFor example, volume grows as the cube of linear dimension, but\nsurface area only as the square.  So as animals get bigger they\nhave trouble radiating heat.  That's why mice and rabbits are furry\nand elephants and hippos aren't.  You can't make a mouse by scaling\ndown an elephant.YC represents a new, smaller kind of animal—so much smaller\nthat all the rules are different.Before us, most companies in the startup funding business were\nventure capital funds.  VCs generally fund later stage companies\nthan we do.  And they supply so much money that, even though the\nother things they do may be very valuable, it's not that inaccurate\nto regard VCs as sources of money.  Good VCs are \"smart money,\" but\nthey're still money.All good investors supply a combination of money and help.  But\nthese scale differently, just as volume and surface area do.  Late\nstage investors supply huge amounts of money and\ncomparatively little help: when a company about to go public gets\na mezzanine round of $50 million, the deal tends to be almost\nentirely about money.  As you move earlier in the venture\nfunding process, the ratio of help to money increases, because\nearlier stage companies have different needs.  Early stage companies\nneed less money because they're smaller and cheaper to run, but\nthey need more help because life is so precarious for them.  So\nwhen VCs do a series A round for, say, $2 million, they generally\nexpect to offer a significant amount of help along with the money.Y Combinator occupies the earliest end of the spectrum.  We're at\nleast one and generally two steps before VC funding.  (Though some\nstartups go straight from YC to VC, the most common trajectory is\nto do an angel round first.)  And what happens at Y Combinator is\nas different from what happens in a series A round as a series A\nround is from a mezzanine financing.At our end, money is almost a negligible factor.  The startup usually\nconsists of just the founders. Their living expenses are the\ncompany's main expense, and since most founders are under 30, their\nliving expenses are low.  But at this early stage companies need a\nlot of help.  Practically every question is still unanswered.  Some\ncompanies we've funded have been working on their software for a\nyear or more, but others haven't decided what to work on, or even\nwho the founders should be.When PR people and journalists recount the histories of startups\nafter they've become big, they always underestimate how uncertain\nthings were at first.  They're not being deliberately misleading.\nWhen you look at a company like Google, it's hard to imagine they\ncould once have been small and helpless.  Sure, at one point they\nwere a just a couple guys in a garage—but even then their\ngreatness was assured, and all they had to do was roll forward along\nthe railroad tracks of destiny.Far from it.  A lot of startups with just as promising beginnings\nend up failing.  Google has such momentum now that it would be hard\nfor anyone to stop them.  But all it would have taken in the beginning\nwould have been for two Google employees to focus on the wrong\nthings for six months, and the company could have died.We know, because we've been there, just how vulnerable startups are\nin the earliest phases.  Curiously enough, that's why founders tend\nto get so rich from them.  Reward is always proportionate to risk,\nand very early stage startups are insanely risky.What we really do at Y Combinator is get startups launched straight.\nOne of many metaphors you could use for YC is a steam catapult on\nan aircraft carrier.  We get startups airborne.  Barely airborne,\nbut enough that they can accelerate fast.When you're launching planes they have to be set up properly or\nyou're just launching projectiles.  They have to be pointed straight\ndown the deck; the wings have to be trimmed properly; the engines\nhave to be at full power; the pilot has to be ready.  These are the\nkind of problems we deal with.  After we fund startups we work\nclosely with them for three months—so closely in fact that\nwe insist they move to where we are.  And what we do in those three\nmonths is make sure everything is set up for launch.  If there are\ntensions between cofounders we help sort them out.  We get all the\npaperwork set up properly so there are no nasty surprises later.\nIf the founders aren't sure what to focus on first, we try to figure\nthat out.  If there is some obstacle right in front of them, we\neither try to remove it, or shift the startup sideways.  The goal\nis to get every distraction out of the way so the founders can use\nthat time to build (or finish building) something impressive.  And\nthen near the end of the three months we push the button on the\nsteam catapult in the form of Demo Day, where the current group of\nstartups present to pretty much every investor in Silicon Valley.Launching companies isn't identical with launching products.  Though\nwe do spend a lot of time on launch strategies for products, there\nare some things that take too long to build for a startup to launch\nthem before raising their next round of funding.  Several of the\nmost promising startups we've funded haven't launched their products\nyet, but are definitely launched as companies.In the earliest stage, startups not only have more questions to\nanswer, but they tend to be different kinds of questions.  In later\nstage startups the questions are about deals, or hiring, or\norganization.  In the earliest phase they tend to be about technology\nand design.  What do you make?  That's the first problem to solve.\nThat's why our motto is \"Make something people want.\"  This is\nalways a good thing for companies to do, but it's even more important\nearly on, because it sets the bounds for every other question.  Who\nyou hire, how much money you raise, how you market yourself—they\nall depend on what you're making.Because the early problems are so much about technology and design,\nyou probably need to be hackers to do what we do.  While some VCs\nhave technical backgrounds, I don't know any who still write code.\nTheir expertise is mostly in business—as it should be, because\nthat's the kind of expertise you need in the phase between series\nA and (if you're lucky) IPO.We're so different from VCs that we're really a different kind of\nanimal.  Can we claim founders are better off as a result of this\nnew type of venture firm?  I'm pretty sure the answer is yes, because\nYC is an improved version of what happened to our startup, and our\ncase was not atypical.  We started Viaweb with $10,000 in seed money\nfrom our friend Julian.  He was a lawyer and arranged all our\npaperwork, so we could just code.  We spent three months building\na version 1, which we then presented to investors to raise more\nmoney.  Sounds familiar, doesn't it?  But YC improves on that\nsignificantly.  Julian knew a lot about law and business, but his\nadvice ended there; he was not a startup guy.  So we made some basic\nmistakes early on.  And when we presented to investors, we presented\nto only 2, because that was all we knew.  If we'd had our later\nselves to encourage and advise us, and Demo Day to present at, we\nwould have been in much better shape.  We probably could have raised\nmoney at 3 to 5 times the valuation we did.If we take 7% of a company we fund, the founders only have to do\n7.5% better in their next round of funding\nto end up net ahead.  We certainly manage that.So who is our 7% coming out of?  If the founders end up net ahead\nit's not coming out of them.  So is it coming out of later stage\ninvestors?  Well, they do end up paying more.  But I think they pay\nmore because the company is actually more valuable.  And later stage\ninvestors have no problem with that.  The returns of a VC fund\ndepend on the quality of the companies they invest in, not how\ncheaply they can buy stock in them.If what we do is useful, why wasn't anyone doing it before?  There\nare two answers to that.  One is that people were doing it before,\njust haphazardly on a smaller scale.  Before us, seed funding came\nprimarily from individual angel investors.  Larry and Sergey, for\nexample, got their seed funding from Andy Bechtolsheim, one of the\nfounders of Sun.  And because he was a startup guy he probably gave\nthem useful advice.  But raising money from angel investors is a\nhit or miss thing.  It's a sideline for most of them, so they only\ndo a handful of deals a year and they don't spend a lot of time on\nthe startups they invest in.  And they're hard to reach, because\nthey don't want random startups pestering them with business plans.\nThe Google guys were lucky because they knew someone who knew\nBechtolsheim.  It generally takes a personal introduction with\nangels.The other reason no one was doing quite what we do is that till\nrecently it was a lot more expensive to start a startup.  You'll\nnotice we haven't funded any biotech startups.  That's still\nexpensive.  But advancing technology has made web startups so cheap\nthat you really can get a company airborne for $15,000.  If you\nunderstand how to operate a steam catapult, at least.So in effect what's happened is that a new ecological niche has\nopened up, and Y Combinator is the new kind of animal that has moved\ninto it.  We're not a replacement for venture capital funds.  We\noccupy a new, adjacent niche.  And conditions in our niche are\nreally quite different.  It's not just that the problems we face\nare different; the whole structure of the business is different.\nVCs are playing a zero-sum game.  They're all competing for a slice\nof a fixed amount of \"deal flow,\" and that explains a lot of their\nbehavior.  Whereas our m.o. is to create new deal flow, by encouraging\nhackers who would have gotten jobs to start their own startups\ninstead.  We compete more with employers than VCs.It's not surprising something like this would happen.  Most fields\nbecome more specialized—more articulated—as they develop,\nand startups are certainly an area in which there has been a lot\nof development over the past couple decades.  The venture business\nin its present form is only about forty years old.  It stands to\nreason it would evolve.And it's natural that the new niche would at first be described,\neven by its inhabitants, in terms of the old one.  But really Y\nCombinator is not in the startup funding business.  Really we're\nmore of a small, furry steam catapult.Thanks to Trevor Blackwell, Jessica Livingston, and Robert Morris\nfor reading drafts of this.\nComment on this essay."},{"title":"A Plan for Spam","text":"August 2002(This article describes the spam-filtering techniques\nused in the spamproof web-based mail reader we\nbuilt to exercise Arc. An\nimproved algorithm is described in Better\nBayesian Filtering.)I think it's possible to stop spam, and that\ncontent-based filters are the way to do it.\nThe Achilles heel of the spammers is their message.\nThey can circumvent any other barrier you set up.  They have so far, at\nleast.  But they have to deliver their message, whatever it\nis.  If we can write software that recognizes their messages,\nthere is no way they can get around that._ _ _To the recipient, spam is easily recognizable.  If you hired\nsomeone to read your mail and discard the spam, they would\nhave little trouble doing it.  How much do we have\nto do, short of AI, to automate this process?I think we will be able to solve the problem with fairly\nsimple algorithms.  In fact, I've found that you can filter\npresent-day spam acceptably well using nothing more than a\nBayesian combination of the spam probabilities of individual\nwords.  Using a slightly tweaked (as described below) Bayesian\nfilter, we now miss less than 5 per 1000 spams, with 0 false positives.The statistical approach is not usually the first one people\ntry when they write spam filters.  Most hackers' first instinct is\nto try to write software that recognizes individual properties of\nspam.  You look at spams\nand you think, the gall of these guys to try sending me mail\nthat begins \"Dear Friend\" or has a subject line that's all\nuppercase and ends in eight exclamation points.  I can filter\nout that stuff with about one line of code.And so you do,\nand in the beginning it works.  A few simple rules will take\na big bite out of your incoming spam.  Merely looking\nfor the word \"click\" will catch 79.7% of the\nemails in my spam corpus, with only 1.2% false positives.I spent about six months writing software that looked for\nindividual spam features before I tried the statistical\napproach.  What I found was that recognizing that last few\npercent of spams got very hard, and that as I\nmade the filters stricter I got more false positives.False positives are innocent emails that get mistakenly\nidentified as spams.\nFor most users,\nmissing legitimate email is\nan order of magnitude worse than receiving spam, so a\nfilter that yields false positives is like an acne cure\nthat carries a risk of death to the patient.The more spam a user gets, the less\nlikely he'll be to notice one innocent mail sitting in his\nspam folder.  And strangely enough, the better your spam filters get,\nthe more dangerous false positives become, because when the\nfilters are really good, users will be more likely to\nignore everything they catch.I don't know why I avoided trying the statistical approach\nfor so long.  I think it was because I got addicted to\ntrying to identify spam features myself, as if I were playing\nsome kind of competitive game with the spammers.  (Nonhackers\ndon't often realize this, but most hackers are very competitive.)\nWhen I did try statistical analysis, I\nfound immediately that it was much cleverer than I had been.\nIt discovered, of course, that terms like \"virtumundo\" and\n\"teens\" were good indicators of spam.  But it also\ndiscovered that \"per\" and \"FL\" and \"ff0000\" are good\nindicators of spam.  In fact, \"ff0000\" (html for bright red)\nturns out to be as good an indicator of spam as any\npornographic term._ _ _Here's a sketch of how I do statistical filtering.  I start\nwith one corpus of spam and one of nonspam mail.  At the\nmoment each one has about 4000 messages in it.  I scan\nthe entire text, including headers and embedded html\nand javascript, of each message in each corpus.\nI currently consider alphanumeric characters,\ndashes, apostrophes, and dollar signs to be part of tokens,\nand everything else to be a token separator.  (There is\nprobably room for improvement here.)  I ignore tokens that\nare all digits, and I also ignore html comments, not even\nconsidering them as token separators.I count the number\nof times each token (ignoring case, currently) occurs in\neach corpus.  At this stage I end up with two large hash\ntables, one for each corpus, mapping tokens to number\nof occurrences.Next I create a third hash table, this time mapping\neach token to the probability that an email containing it is a spam,\nwhich I calculate as follows [1]:\n(let ((g (* 2 (or (gethash word good) 0)))\n(b (or (gethash word bad) 0)))\n(unless (< (+ g b) 5)\n(max .01\n(min .99 (float (/ (min 1 (/ b nbad))\n(+ (min 1 (/ g ngood))\n(min 1 (/ b nbad)))))))))\nwhere word is the token whose probability we're\ncalculating, good and bad are the hash tables\nI created in the first step, and ngood and nbad\nare the number of nonspam and spam messages respectively.I explained this as code to show a couple of important details.\nI want to bias the probabilities slightly to avoid false\npositives, and by trial and error I've found that a good\nway to do it is to double all the numbers in good.\nThis helps to distinguish between words that occasionally\ndo occur in legitimate email and words that almost never do.\nI only consider words that occur more than five times in\ntotal (actually, because of the doubling, occurring three\ntimes in nonspam mail would be enough).  And then there is\nthe question of what probability to assign to words that\noccur in one corpus but not the other.  Again by trial and\nerror I chose .01 and .99.  There may be room for tuning\nhere, but as the corpus grows such tuning will happen\nautomatically anyway.The especially observant will notice that while I consider\neach corpus to be a single long stream of text for purposes\nof counting occurrences, I use the number of emails in\neach, rather than their combined length, as the divisor\nin calculating spam probabilities.  This adds another\nslight bias to protect against false positives.When new mail arrives, it is scanned into tokens, and\nthe most interesting fifteen tokens, where interesting is\nmeasured by how far their spam probability is from a\nneutral .5, are used to calculate the probability that\nthe mail is spam.  If probs\nis a list of the fifteen individual probabilities, you\ncalculate the\ncombined probability thus:\n(let ((prod (apply #'* probs)))\n(/ prod (+ prod (apply #'* (mapcar #'(lambda (x)\n(- 1 x))\nprobs)))))\nOne question that arises in\npractice is what probability to assign to a word you've\nnever seen, i.e. one that doesn't occur in the hash table\nof word probabilities.  I've found, again by trial and\nerror, that .4 is a good number to use.  If you've never\nseen a word before, it is probably fairly innocent; spam\nwords tend to be all too familiar.There are examples of this algorithm being applied to\nactual emails in an appendix at the end.I treat mail as spam if the algorithm above gives it a\nprobability of more than .9 of being spam.  But in practice\nit would not matter much where I put this threshold, because\nfew probabilities end up in the middle of the range._ _ _One great advantage of the statistical approach is that you\ndon't have to read so many spams.  Over the past six months,\nI've read literally thousands of spams, and it is really\nkind of demoralizing.  Norbert Wiener said if you compete\nwith slaves you become a slave, and there is something\nsimilarly degrading about competing with spammers.   To\nrecognize individual spam features you have to try to get\ninto the mind of the spammer, and frankly I want to spend\nas little time inside the minds of spammers as possible.But the real advantage of the Bayesian approach, of course,\nis that you know what\nyou're measuring.  Feature-recognizing filters like\nSpamAssassin assign a spam \"score\" to email.  The Bayesian\napproach assigns an actual probability.  The problem with\na \"score\" is that no one knows what it means.  The user\ndoesn't know what it means, but worse still, neither does\nthe developer of the filter.  How many points should an\nemail get for having the word \"sex\" in it?  A probability\ncan of course be mistaken, but there is little ambiguity\nabout what it means, or how evidence should be combined\nto calculate it.  Based on my corpus, \"sex\" indicates\na .97 probability of the containing email being a spam,\nwhereas \"sexy\" indicates .99 probability.\nAnd Bayes' Rule, equally unambiguous, says that an email\ncontaining both words would, in the (unlikely)\nabsence of any other evidence, have a 99.97% chance of\nbeing a spam.Because it is measuring probabilities, the Bayesian approach\nconsiders all the evidence in the email, both good and bad.\nWords that occur disproportionately rarely\nin spam (like \"though\" or \"tonight\" or \"apparently\")\ncontribute as much to decreasing the probability as\nbad words like \"unsubscribe\" and \"opt-in\" do to\nincreasing it.  So an otherwise innocent email that happens\nto include the word \"sex\" is not going to get tagged as spam.Ideally, of course, the probabilities should be calculated\nindividually for each user.  I get a lot of email containing\nthe word \"Lisp\", and (so far) no spam that does.  So a word\nlike that is effectively a kind of password for sending\nmail to me.  In my earlier spam-filtering software, the user\ncould set up a list of such words and mail containing\nthem would automatically get past the filters.  On my\nlist I put words like \"Lisp\" and also my zipcode, so\nthat (otherwise rather spammy-sounding) receipts from\nonline orders would get through.  I thought I was being\nvery clever, but I found that the Bayesian filter did the\nsame thing for me, and moreover discovered of a lot of words I\nhadn't thought of.When I said at the start that our filters let through less than\n5 spams per 1000 with 0 false positives, I'm talking about\nfiltering my mail based on a corpus of my mail.  But these\nnumbers are not misleading, because that is the approach I'm\nadvocating: filter each user's mail based on the spam and\nnonspam mail he receives.  Essentially, each user should\nhave two delete buttons, ordinary delete and delete-as-spam.\nAnything deleted as spam goes into the spam corpus,\nand everything else goes into the nonspam corpus.You could start\nusers with a seed filter, but ultimately each user should have\nhis own per-word probabilities based on the actual mail he\nreceives.  This (a) makes the filters more effective, (b) lets\neach user decide their own precise definition of spam,\nand (c) perhaps best of all makes it hard for spammers\nto tune mails to get through the filters.  If a lot of the\nbrain of the filter is in the individual databases, then\nmerely tuning spams to get through the seed filters\nwon't guarantee anything about how well they'll get through\nindividual users' varying and much more trained filters.Content-based spam filtering is often combined with a whitelist,\na list of senders whose mail can be accepted with no filtering.\nOne easy way to build such a\nwhitelist is to keep a list of every address the user has\never sent mail to.  If a mail reader has a delete-as-spam\nbutton then you could also add the from address\nof every email the user has deleted as ordinary trash.I'm an advocate of whitelists, but more as a way to save\ncomputation than as a way to improve filtering.  I used to think that\nwhitelists would make filtering easier, because you'd\nonly have to filter email from people you'd never heard\nfrom, and someone sending you mail for the first time is\nconstrained by convention in what they can say to you.\nSomeone you already know might send you an email talking about sex,\nbut someone sending you mail for the first time would not\nbe likely to.  The problem is, people can have more than one\nemail address, so a new from-address doesn't guarantee that\nthe sender is writing to you for the first time.\nIt is not unusual\nfor an old friend (especially if he is a hacker) to suddenly\nsend you an email with a new from-address, so you can't\nrisk false positives by filtering mail from unknown\naddresses especially stringently.In a sense, though, my filters do themselves embody a kind\nof whitelist (and blacklist) because they are based on\nentire messages, including the headers.  So to that\nextent they \"know\" the email addresses of trusted senders\nand even the routes by which mail gets from them to me.\nAnd they know the same about spam, including the server\nnames, mailer versions, and protocols._ _ _If I thought that I could keep up current rates of spam\nfiltering, I would consider this problem solved.  But it\ndoesn't mean much to be able to filter out most present-day\nspam, because spam evolves.\nIndeed, most\nantispam techniques so far have been like pesticides that\ndo nothing more than create a new, resistant strain of bugs.I'm more hopeful about Bayesian filters, because they evolve\nwith the spam.  So as spammers start using \"c0ck\"\ninstead of \"cock\" to evade simple-minded spam filters\nbased on individual words, Bayesian filters automatically\nnotice.  Indeed, \"c0ck\" is far more damning evidence than\n\"cock\", and Bayesian filters know precisely how much more.Still, anyone who proposes a plan for spam filtering has to\nbe able to answer the question: if the spammers knew\nexactly what you were doing,\nhow well could they get past you?  For example, I think that if\nchecksum-based spam filtering becomes a serious obstacle,\nthe spammers will just\nswitch to mad-lib techniques for generating message bodies.To beat Bayesian filters, it would not be enough for spammers\nto make their emails unique or to stop using individual\nnaughty words.  They'd have to make their mails indistinguishable\nfrom your ordinary mail.  And this I think would severely\nconstrain them.  Spam is mostly sales\npitches, so unless your regular mail is all sales pitches,\nspams will inevitably have a different character.  And\nthe spammers would also, of course, have to change (and keep\nchanging) their whole infrastructure, because otherwise\nthe headers would look as bad to the Bayesian filters as ever,\nno matter what they did to the message body.  I don't know\nenough about the infrastructure that spammers use to know\nhow hard it would be to make the headers look innocent, but\nmy guess is that it would be even harder than making the\nmessage look innocent.Assuming they could solve the problem of the headers,\nthe spam of the future will probably look something like\nthis:\nHey there.  Thought you should check out the following:\nhttp://www.27meg.com/foo\nbecause that is about as much sales pitch as content-based\nfiltering will leave the spammer room to make.  (Indeed, it\nwill be hard even to get this past filters, because if everything\nelse in the email is neutral, the spam probability will hinge on\nthe url, and it will take some effort to make that look neutral.)Spammers range from businesses running so-called\nopt-in lists who don't even try to conceal their identities,\nto guys who hijack mail servers to send out spams promoting\nporn sites.  If we use filtering to whittle their\noptions down to mails like the one above, that should\npretty much put the spammers on the \"legitimate\" end of\nthe spectrum out of business; they feel obliged\nby various state laws to include boilerplate about why\ntheir spam is not spam, and how to cancel your\n\"subscription,\"  and that kind of text is easy to\nrecognize.(I used to think it was naive to believe that stricter laws\nwould decrease spam.  Now I think that while stricter laws\nmay not decrease the amount of spam that spammers send,\nthey can certainly help filters to decrease the amount of\nspam that recipients actually see.)All along the spectrum, if you restrict the sales pitches spammers\ncan make, you will inevitably tend to put them out of\nbusiness.  That word business is an important one to\nremember.  The spammers are businessmen.  They send spam because\nit works.  It works because although the response rate\nis abominably low (at best 15 per million, vs 3000 per\nmillion for a catalog mailing), the cost, to them, is\npractically nothing.  The cost is enormous for the recipients,\nabout 5 man-weeks for each million recipients who spend\na second to delete the spam, but the spammer\ndoesn't have to pay that.Sending spam does cost the spammer something, though. [2]\nSo the lower we can get the\nresponse rate-- whether by filtering, or by using filters to force\nspammers to dilute their pitches-- the fewer businesses will find it\nworth their while to send spam.The reason the spammers use the kinds of\nsales\npitches that they do is to increase response rates.\nThis is possibly even more disgusting\nthan getting inside the mind of a spammer,\nbut let's take a quick look inside the mind of someone\nwho responds to a spam.  This person is either\nastonishingly credulous or deeply in denial about their\nsexual interests.  In either case, repulsive or\nidiotic as the spam seems to us, it is exciting\nto them.  The spammers wouldn't say these things if they\ndidn't sound exciting.  And \"thought you\nshould check out the following\" is just not going to\nhave nearly the pull with the spam recipient as\nthe kinds of things that spammers say now.\nResult: if it can't contain exciting sales pitches,\nspam becomes less effective as a marketing vehicle,\nand fewer businesses want to use it.That is the big win in the end.  I started writing spam\nfiltering software because I didn't want have to look at\nthe stuff anymore.\nBut if we get good enough at filtering\nout spam, it will stop working, and the spammers\nwill actually stop sending it._ _ _Of all the approaches to fighting spam, from software to laws,\nI believe Bayesian filtering will be the single most\neffective.  But I also\nthink that the more different kinds of antispam efforts\nwe undertake, the better, because any measure that\nconstrains spammers will tend to make filtering easier.\nAnd even within the world of content-based filtering, I think\nit will be a good thing if there are many different kinds\nof software being used simultaneously.  The more different\nfilters there are, the harder it will be for\nspammers to tune spams to get through them.Appendix: Examples of FilteringHere is an example of a spam that arrived while I was writing\nthis article.  The fifteen most interesting words in this spam are:\nqvp0045\nindira\nmx-05\nintimail\n$7500\nfreeyankeedom\ncdo\nbluefoxmedia\njpg\nunsecured\nplatinum\n3d0\nqves\n7c5\n7c266675\nThe words are a mix of stuff from the headers and from the\nmessage body, which is typical of spam.  Also typical of spam\nis that every one of these words has a spam probability,\nin my database, of .99.  In fact there are more than fifteen words\nwith probabilities of .99, and these are just the first\nfifteen seen.Unfortunately that makes this email a boring example of\nthe use of Bayes' Rule.  To see an interesting variety of\nprobabilities we have to look at this actually quite\natypical spam.The fifteen most interesting words in this spam, with their probabilities,\nare:\nmadam           0.99\npromotion       0.99\nrepublic        0.99\nshortest        0.047225013\nmandatory       0.047225013\nstandardization 0.07347802\nsorry           0.08221981\nsupported       0.09019077\npeople's        0.09019077\nenter           0.9075001\nquality         0.8921298\norganization    0.12454646\ninvestment      0.8568143\nvery            0.14758544\nvaluable        0.82347786\nThis time the evidence is a mix of good and bad.  A word like\n\"shortest\" is almost as much evidence for innocence as a\nword like \"madam\" or \"promotion\" is for guilt.  But still the\ncase for guilt is stronger.  If you combine these numbers\naccording to Bayes' Rule, the resulting probability is .9027.\"Madam\" is obviously from spams beginning\n\"Dear Sir or Madam.\"  They're not very common, but the\nword \"madam\" never occurs in my legitimate email, and\nit's all about the ratio.\"Republic\" scores high because\nit often shows up in Nigerian scam emails, and also occurs once\nor twice in spams referring to Korea and South Africa.\nYou might say that it's\nan accident that it thus helps identify this spam.  But I've\nfound when examining spam probabilities that there are\na lot of these accidents, and they have an uncanny tendency to\npush things in the right direction rather than the wrong one.\nIn this case, it is not entirely a coincidence that the word\n\"Republic\" occurs in Nigerian scam emails and this spam.\nThere is a whole class of dubious business propositions involving\nless developed countries, and these in turn are more likely\nto have names that specify explicitly (because they aren't) that they\nare republics.[3]On the other hand, \"enter\" is a genuine miss.  It occurs\nmostly in unsubscribe instructions, but here is used in a\ncompletely innocent way.  Fortunately the statistical approach is\nfairly robust, and can tolerate quite a lot of misses\nbefore the results start to be thrown off.For comparison,\nhere is an example of that rare bird, a spam that\ngets through the filters.  Why?  Because by sheer chance it happens\nto be loaded with words that occur in my actual email:\nperl       0.01\npython     0.01\ntcl        0.01\nscripting  0.01\nmorris     0.01\ngraham     0.01491078\nguarantee  0.9762507\ncgi        0.9734398\npaul       0.027040077\nquite      0.030676773\npop3       0.042199217\nvarious    0.06080265\nprices     0.9359873\nmanaged    0.06451222\ndifficult  0.071706355\nThere are a couple pieces of good news here.  First, this mail\nprobably wouldn't get through the filters of someone who didn't\nhappen to specialize in programming languages and have a good\nfriend called Morris.  For the average user, all the top five words here\nwould be neutral and would not contribute to the spam probability.Second, I think filtering based on word pairs\n(see below) might well\ncatch this one:  \"cost effective\", \"setup fee\", \"money back\" -- pretty\nincriminating stuff.  And of course if they continued to spam me\n(or a network I was part of), \"Hostex\" itself would be\nrecognized as  a spam term.Finally, here is an innocent email.\nIts  fifteen most interesting words are as follows:\ncontinuation  0.01\ndescribe      0.01\ncontinuations 0.01\nexample       0.033600237\nprogramming   0.05214485\ni'm           0.055427782\nexamples      0.07972858\ncolor         0.9189189\nlocalhost     0.09883721\nhi            0.116539136\ncalifornia    0.84421706\nsame          0.15981844\nspot          0.1654587\nus-ascii      0.16804294\nwhat          0.19212411\nMost of the words here indicate the mail is an innocent one.\nThere are two bad smelling words,  \"color\"\n(spammers love colored fonts) and \"California\"\n(which occurs in testimonials and also in menus in\nforms), but they are not enough to outweigh obviously\ninnocent words like \"continuation\" and \"example\".It's interesting that \"describe\" rates as so thoroughly\ninnocent.  It hasn't occurred in a\nsingle one of my 4000 spams.  The data turns out to be\nfull of such surprises.  One of the things you learn\nwhen you analyze spam texts is how\nnarrow a subset of the language spammers operate in.  It's\nthat fact, together with the equally characteristic vocabulary\nof any individual user's mail, that makes Bayesian filtering\na good bet.Appendix: More IdeasOne idea that I haven't tried yet is to filter based on\nword pairs, or even triples, rather than individual words.\nThis should yield a much sharper estimate of the probability.\nFor example, in my current database, the word \"offers\"\nhas a probability of .96.  If you based the probabilities\non word pairs, you'd end up with \"special offers\"\nand \"valuable offers\" having probabilities of .99\nand, say, \"approach offers\" (as in \"this approach offers\")\nhaving a probability of .1 or less.The reason I haven't done this is that filtering based on\nindividual words already works so well.  But it does\nmean that there is room to tighten the filters if spam\ngets harder to detect.\n(Curiously, a filter based on word pairs would be\nin effect a Markov-chaining text generator running\nin reverse.)Specific spam features (e.g. not seeing the recipient's\naddress in the to: field) do of course have value in\nrecognizing spam.  They can be considered in this\nalgorithm by treating them as virtual words.  I'll probably\ndo this in future versions, at least for a handful of the\nmost egregious spam indicators. Feature-recognizing\nspam filters are right in many details; what they lack\nis an overall discipline for combining evidence.Recognizing nonspam features may be more important than\nrecognizing spam features.  False positives are such a\nworry that they demand extraordinary measures.  I will\nprobably in future versions add a second level of testing\ndesigned specifically to avoid false positives.  If a\nmail triggers this second level of filters it will be accepted\neven if its spam probability is above the threshold.I don't expect this second level of filtering to be Bayesian.\nIt will inevitably\nbe not only ad hoc, but based on guesses, because the number of\nfalse positives will not tend to be large enough to notice patterns.\n(It is just as well, anyway, if a backup system doesn't rely on the same\ntechnology as the primary system.)Another thing I may try in the future is to focus extra attention\non specific parts of the email.  For example, about 95% of current\nspam includes the url of a site they want\nyou to visit.  (The remaining 5% want you to call a phone number,\nreply by email or to a US mail address, or in a few\ncases to buy a certain stock.)   The url is in such cases\npractically enough by itself to determine whether the email\nis spam.Domain names differ from the rest of the text in\na (non-German) email in that they often consist of several\nwords stuck together.  Though computationally expensive\nin the general case, it might be worth trying to\ndecompose them.  If a filter has never seen the\ntoken \"xxxporn\" before it will have an individual spam\nprobability of .4, whereas \"xxx\" and \"porn\" individually\nhave probabilities (in my corpus) of .9889 and .99\nrespectively, and a combined probability of .9998.I expect decomposing domain names to become more\nimportant as spammers are gradually forced to stop using\nincriminating words in the text of their messages.  (A url\nwith an ip address is of course an extremely incriminating sign,\nexcept in the mail of a few sysadmins.)It might be a good idea to have a cooperatively maintained\nlist of urls promoted by spammers.  We'd need a trust metric\nof the type studied by Raph Levien to prevent malicious\nor incompetent submissions, but if we had such a thing it\nwould provide a boost to any filtering software.   It would\nalso be a convenient basis for boycotts.Another way to test dubious urls would be to send out a\ncrawler to look at the site before the user looked at the\nemail mentioning it.  You could use a Bayesian filter to\nrate the site just as you would an email, and whatever\nwas found on the site could be included in calculating\nthe probability of the email being a spam.  A url that led\nto a redirect would of course be especially suspicious.One cooperative project that I think really would be a good\nidea would be to accumulate a giant corpus of spam.  A large,\nclean corpus is the key to making Bayesian filtering work\nwell.  Bayesian filters could actually use the corpus as\ninput.  But such a corpus would be useful for other kinds\nof filters too, because it could be used to test them.Creating such a corpus poses some technical problems.  We'd\nneed trust metrics to prevent malicious or incompetent\nsubmissions, of course.  We'd also need ways of erasing\npersonal information (not just to-addresses and ccs, but\nalso e.g. the arguments to unsubscribe urls, which often\nencode the to-address) from mails in the corpus.  If anyone\nwants to take on this project, it would be a good thing for\nthe world.Appendix: Defining SpamI think there is a rough\nconsensus on what spam is, but it would be useful to have\nan explicit definition.  We'll need to do this if we want to establish\na central corpus of spam, or even to compare spam filtering\nrates meaningfully.To start with, spam is not unsolicited commercial email.\nIf someone in my neighborhood heard that I was looking for an old\nRaleigh three-speed in good condition, and sent me an email\noffering to sell me one, I'd be delighted, and yet this\nemail would be both commercial and unsolicited.  The\ndefining feature of spam (in fact, its raison d'etre)\nis not that it is unsolicited, but that it is automated.It is merely incidental, too, that spam is usually commercial.\nIf someone started sending mass email to support some political\ncause, for example, it would be just as much spam as email\npromoting a porn site.I propose we define spam as unsolicited automated email.\nThis definition thus includes some email\nthat many legal definitions of spam don't.  Legal definitions\nof spam, influenced presumably by lobbyists, tend to exclude\nmail sent by companies that have an \"existing relationship\" with\nthe recipient.  But buying something from a company, for\nexample, does not imply that you have solicited\nongoing email from them.\nIf I order something from an online\nstore, and they then send me a stream of spam, it's still\nspam.Companies sending spam often give you a way to \"unsubscribe,\"\nor ask you to go to their site and change your \"account\npreferences\" if you want to stop getting spam.  This is\nnot enough to stop the mail from being spam.  Not opting out\nis not the same as opting in.  Unless the\nrecipient explicitly checked a clearly labelled box (whose\ndefault was no) asking to receive the email, then it is spam.In some business relationships, you do implicitly solicit\ncertain kinds of mail.   When you order online, I think you\nimplicitly solicit a receipt, and notification when the\norder ships.\nI don't mind when Verisign sends me mail warning that\na domain name is about to expire (at least, if they are the\nactual\nregistrar for it).  But when Verisign sends me\nemail offering a FREE Guide to Building My\nE-Commerce Web Site, that's spam.Notes:[1] The examples in this article are translated\ninto Common Lisp for, believe it or not, greater accessibility.\nThe application described here is one that we wrote in order to\ntest a new Lisp dialect called Arc that is\nnot yet released.[2] Currently the lowest rate seems to be about $200 to send a million spams.\nThat's very cheap, 1/50th of a cent per spam.\nBut filtering out 95%\nof spam, for example, would increase the spammers' cost to reach\na given audience by a factor of 20.  Few can have\nmargins big enough to absorb that.[3] As a rule of thumb, the more qualifiers there are before the\nname of a country, the more corrupt the rulers.  A\ncountry called The Socialist People's Democratic Republic\nof X is probably the last place in the world you'd want to live.Thanks to Sarah Harlin for reading drafts of this; Daniel Giffin (who is\nalso writing the production Arc interpreter) for several good ideas about\nfiltering and for creating our mail infrastructure; Robert Morris,\nTrevor Blackwell and Erann Gat for many discussions about spam; Raph\nLevien for advice about trust metrics;  and Chip Coldwell\nand Sam Steingold for advice about statistics.More Info:"},{"title":"A Reply to Ezra Klein","text":"January 2016I thought perhaps it would be worthwhile to reply to\nwhat\nEzra Klein\nwrote about Economic Inequality. It's an\nimportant topic, and his seemed to be among the most thoughtful of\nthe responses.This is my best shot at a complete list of his points. As far as I\ncan tell, all 9 seem to be mistaken, in the sense of either being\nfalse or not affecting my argument.  But decide for yourself.1. He says I think startups are responsible for most economic\ninequality in the US. I don't think that. He thinks I do because\nI said \"startups are almost entirely a product of [the] period\"\nsince about 1980.  I don't see how saying startups are limited\nto some period implies I think they're responsible for most\nof the growth in inequality during it.\n[1]What I do think is that startups are responsible for a significant\nfraction of economic inequality. Anyone who wants to can see that\nfor themselves by looking at the Forbes 400.\n[2](I also think, though Ezra didn't talk about this, that startups\nwill be responsible for more inequality if other ways of getting\nrich are closed off.)2. He says the number of startups has been declining. In support\nof this he includes a graph with a line going down.  But though the\ngraph has the word \"startups\" on it, it is not a graph of the number\nof startups, but of all new businesses.As I've explained many times, startups are a tiny\nfraction of businesses. Most businesses are barber shops, gas\nstations, restaurants, and so on.  What his graph shows is that\nfewer of these are being started.  If you want to see the trend in\nstartups, one way to see it is by looking at the\ntrend in VC deals.Any graph of VC deals will show the trend has\nnot been downward. And most such graphs understate the\ngrowth in startups, because in the last 10 years the traditional VC\nseries A round has become a later stage investment.3. He says there is no observable relationship between startup\nformation and inequality.  The Economist\ndisagrees, saying founders and early employees of\nstartups \"represent the most significant concentration of business\nwealth in the world.\"Again, anyone can see this for themselves by looking at the Forbes\n400.4. He says it's not people who get rich from startups that are the\nproblem, but people who get rich from finance. It is the latter\n\"that this conversation is really about.\"But that is my point: that the public conversation\nabout this topic is way too sloppy, and that we should\nfocus not on crude statistical measures like economic inequality\nbut on the specific underlying components.  If you're angry that\npeople are making so much money in finance, then attack that,\nnot economic inequality.  Imagine how much more alarmed those who benefit from\nthe carried interest loophole would be if public attention were\nfocused specifically on that, rather than the harmlessly broad\ntarget of economic inequality.Though indeed Ezra is mistaken when he says the conversation is\nreally about finance.  Many of the most influential people who have\nwritten about the topic recently have been talking about economic\ninequality overall, not merely that caused by finance.  Piketty\nfor example clearly thinks great variation in wealth is in itself a problem.5. He says I'm attacking a strawman when I say that ending economic\ninequality would mean ending startups.  Other people have tried to\nclaim that too, so I replaced that sentence with:\nEliminating great variations in wealth would mean eliminating\nstartups.\nThis is not backpedalling, incidentally; this is a stronger claim\nthan I had in the original.  The median household net worth in the US is about 80k. It is common\nfor the stock of a successful startup founder to be worth a hundred\ntimes that, and not unheard of for it to be worth ten thousand times\nthat.The goals of eliminating great wealth disparities in your country\nand having startups in your country are fundamentally incompatible.\nIt might be possible to cram together these two very differently\nshaped jigsaw puzzle pieces, but it would require hacks as messy\nas have ever been tried in the history of taxation, and even then\nit probably wouldn't work.6. He says that Sweden has more startups than the US despite having\nlower economic inequality.  Though the article he links to is about\nnew businesses generally,\nnot startups, it is true that Sweden has a lot of actual startups per\ncapita. That means they're willing to tolerate great variations in\nwealth, which seems the smart choice.People trying to use Sweden as a counterexample seem to be implying\nthat I think economic inequality is a prerequisite for startups.\nActually the prerequisite is not high current economic inequality\nbut the willingness to tolerate it in the future.  7. He seems to disagree with my claim that the growth of technology\nwill cause increasing economic inequality.\nHis argument is that since governments have figured\nout how to deal with increasing variation in productivity in the\npast, they will in the future. But (a) governments have in fact\nmade some truly disastrous decisions in this department in the past,\nand (b) when something grows exponentially, the past is not much\nuse as a guide.Plus, as I explained in The Refragmentation,\nwe got a free pass for\na big chunk of the 20th century because a unique combination of\ncircumstances suppressed the effects of increasing variation in\nproductivity.Ezra says the Silicon Valley elite pay higher taxes now than in the\n18th century and yet still invent things.  But this doesn't support\nthe idea that no degree of inequality is inevitable: the fortunes\nof the Silicon Valley elite represent enormous wealth disparities.\n[3]8.  He says I think modest changes to the tax code will derail\ntechnical progress. But I don't think that.  Larry Page's Google\nstock is worth billions of dollars.  It would take way more than\nmodest changes in the tax code to change that fact.  If you made\nthose kinds of changes, it would decrease the number of\nstartups in your country—and break God knows what else.9. He says I am being pessimistic.  But I don't think it's pessimistic\nto think growth in technology will increase economic\ninequality, precisely for the reasons I gave in the essay.  Economic\ninequality per se doesn't seem nearly as much of a problem as\nadjacent ones like poverty or the conversion of money into political\npower.  If we had a society with no poverty and perfect social\nmobility, and economic inequality didn't translate into social or\npolitical inequality, would it be that bad if there was also great\nvariation in wealth?  It might still bother some people, but I'd\ntake that over what any country has now.\n[4]That's the sort of society I think we should work toward.  And\nthat's why I don't think we should focus on economic inequality per\nse, but the real underlying problems like poverty and lack of social\nmobility.Decreasing poverty is not identical with decreasing economic\ninequality.  Some measures for decreasing\npoverty could well increase economic inequality. For example, if\nyou gave every child in America the same quality of education\nBill Gates had, that would surely decrease poverty.\n[5]\nBut you\nwould then create a lot of new Bill Gateses as well.  These kids\nwouldn't all stop short at middle class.  The more ambitious ones\nwould shoot right out the other side.That would be a great problem to have, you say?  I think so too.Notes[1]\nThis is so puzzling that I wonder if he didn't simply misread\nwhat I wrote—that he read the statement that startups were a\nproduct of this period as if I'd written that the period (in the\nsense of the trends therein) was a product of startups.[2]\nIncidentally, the numbers in the Forbes 400 are nonsense.\nBut it will do for a test like whether people are getting rich from\nstartups or not.[3]\nAs anyone who\nhas studied the history of taxation knows, there is a big difference\nbetween saying that tax rates were higher and that people paid more\nin taxes.[4]\nBy definition perfect social mobility would seem unfair to\nanyone with a mistakenly high opinion of their abilities.  Indeed,\nI suspect this phenomenon is already a factor in people's opinions\nabout economic inequality even with the imperfect social mobility\nwe have now.[5]\nI know Bill Gates had many other advantages besides his\neducation. I'm not saying this would level the playing field\ncompletely, just that it would help.Thanks to Sam Altman and Jessica Livingston for reading\ndrafts of this."},{"title":"A Reply to Russell Okung","text":"January 2016Recently I tried something I usually avoid and replied to Ezra Klein's criticisms of\nEconomic Inequality.  It was a strange\nsort of writing, easier than writing an essay but also less\ninteresting.  But I'll give it another shot. A lot of people\nare talking about\nRussell\nOkung's response to what I wrote, so I'll try\nreplying to that.1. He says I say economic inequality is \"a good thing.\"  I didn't\nsay that.  What I said is that it has multiple causes, some bad\n(lack of social mobility) and some good (Larry and Sergey starting\nGoogle).If you attack economic inequality, you're indiscriminately attacking\nboth the good and bad causes.  So instead attack specific bad causes.\nTo fix lack of social mobility, for example, attack that specifically.\nThen you not only avoid throwing out the babies with the bathwater,\nbut you'll also be more likely to actually fix the problem, because\nyou'll focus on all the contributing factors, including those which\nare only peripherally economic.2. He says \"economic inequality isn't the symptom; it's the virus\nthat attacks.\"  I'm guessing from the sentences that follow that\nwhat he means by \"economic inequality\" is some combination of poverty\nand lack of social mobility.  And those are certainly bad, but that\nis not what the term \"economic inequality\" means.  It means the\nvariation\nbetween different quantiles' wealth or income.So you could for example have no poverty and perfect social mobility,\nand still have great economic inequality.If he thinks what \"economic inequality\" means is poverty and lack\nof social mobility, it's not surprising he was upset enough\nto write a reply to my essay.  In fact I suspect much if not most\nof the angry reaction to it was a result of people not understanding\nwhat the term \"economic inequality\" means.Just so we're clear about this, I didn't say that poverty and lack\nof social mobility are harmless, or inevitable. In fact I said the\nopposite.3. He says I believe \"that anyone who works hard can move up\neconomically regardless of his or her social circumstances.\"  Not\nonly do I not believe that, I said so explicitly in the essay.  I\ncalled out lack of social mobility as one of the worst problems\ncontributing to economic inequality, and talked about how I had\npersonally seen the effects of it in the relative scarcity of\nsuccessful startup founders who grew up poor.Those three seem to be his only points specifically about what I\nwrote.  The rest of what he says is about social mobility and startups\ngenerally.  I agree with almost all of it.The only potentially dubious point is that we need silicon valleys\nto be scattered instead of in one place.  I've\nwritten about this\nquestion before.  There are advantages to concentration; it may\nnot be optimal to scatter startups too much; but I wouldn't pick a\nfight over the question.Having gone through this exercise, the thing that strikes me most\nis that so many people think Russell's views are different from\nmine.  As far as I can tell, we don't disagree about anything.I suspect what's going on here is that a lot of people start from\n\"rich guy says economic inequality is not bad\" and then expand that\nin their heads into whatever they think such an essay would say,\nand for them that is what I wrote.There is a way to protect against this phenomenon.  Quote the specific passages you\ndisagree with.  This forces you to calibrate your mental model of\nwhat someone said with what they actually said.  In my (sadly\nextensive) experience, the two are often wildly divergent."},{"title":"A Student's Guide to Startups","text":"October 2006(This essay is derived from a talk at MIT.)Till recently graduating seniors had two choices: get a job or go\nto grad school.  I think there will increasingly be a third option:\nto start your own startup.  But how common will that be?I'm sure the default will always be to get a job, but starting a\nstartup could well become as popular as grad school.  In the late\n90s my professor friends used to complain that they couldn't get\ngrad students, because all the undergrads were going to work for\nstartups.  I wouldn't be surprised if that situation returns, but\nwith one difference: this time they'll be starting their own\ninstead of going to work for other people's.The most ambitious students will at this point be asking: Why wait\ntill you graduate?  Why not start a startup while you're in college?\nIn fact, why go to college at all?  Why not start a startup instead?A year and a half ago I gave a talk\nwhere I said that the average age of the founders of\nYahoo, Google, and Microsoft was 24, and that if grad students could\nstart startups, why not undergrads?  I'm glad I phrased that as a\nquestion, because now I can pretend it wasn't merely a rhetorical\none.  At the time I couldn't imagine why there should be any lower\nlimit for the age of startup founders.  Graduation is a bureaucratic\nchange, not a biological one.  And certainly there are undergrads\nas competent technically as most grad students.  So why shouldn't\nundergrads be able to start startups as well as grad students?I now realize that something does change at graduation: you lose a\nhuge excuse for failing.  Regardless of how complex your life is,\nyou'll find that everyone else, including your family and friends,\nwill discard all the low bits and regard you as having a single\noccupation at any given time.  If you're in college and have a\nsummer job writing software, you still read as a student.  Whereas\nif you graduate and get a job programming, you'll be instantly\nregarded by everyone as a programmer.The problem with starting a startup while you're still in school\nis that there's a built-in escape hatch.  If you start a startup\nin the summer between your junior and senior year, it reads to\neveryone as a summer job.\nSo if it goes nowhere, big deal; you return to school in the\nfall with all the other seniors; no one regards you as a failure,\nbecause your occupation is student, and you didn't fail at that.\nWhereas if you start a startup just one year later, after you\ngraduate, as long as you're not accepted to grad school in the fall\nthe startup reads to everyone as your occupation.  You're\nnow a startup founder, so you have to do well at that.For nearly everyone, the opinion of one's peers is the most powerful\nmotivator of all—more powerful even than the nominal goal of most\nstartup founders, getting rich.\n[1]\nAbout a month into each funding\ncycle we have an event called Prototype Day where each startup\npresents to the others what they've got so far.  You might think\nthey wouldn't need any more motivation.  They're working on their\ncool new idea; they have funding for the immediate future; and\nthey're playing a game with only two outcomes: wealth or failure.\nYou'd think that would be motivation enough.  And yet the prospect\nof a demo pushes most of them into a\nrush of activity.Even if you start a startup explicitly to get rich, the money you\nmight get seems pretty theoretical most of the time.  What drives\nyou day to day is not wanting to look bad.You probably can't change that.  Even if you could, I don't think\nyou'd want to; someone who really, truly doesn't care what his peers\nthink of him is probably a psychopath.  So the best you can do is\nconsider this force like a wind, and set up your boat accordingly.\nIf you know your peers are going to push you in some direction,\nchoose good peers, and position yourself so they push you in a\ndirection you like.Graduation changes the prevailing winds, and those make a difference.\nStarting a startup is so hard\nthat it's a close call even for the ones that succeed.  However\nhigh a startup may be flying now, it probably has a few leaves stuck\nin the landing gear from those trees it barely cleared at the end\nof the runway.  In such a close game, the smallest increase in the\nforces against you can be enough to flick you over the edge into\nfailure.When we first started Y Combinator\nwe encouraged people to start\nstartups while they were still in college.  That's partly because\nY Combinator began as a kind of summer program.  We've kept the\nprogram shape—all of us having dinner together once a week turns\nout to be a good idea—but we've decided now\nthat the party line should be to tell people to wait till they\ngraduate.Does that mean you can't start a startup in college?  Not at all.\nSam Altman, the co-founder of Loopt,\nhad just finished his sophomore year when we funded them, and Loopt\nis probably the most promising of all the startups we've funded so\nfar.  But Sam Altman is a very unusual guy.  Within about three\nminutes of meeting him, I remember thinking \"Ah, so this is what\nBill Gates must have been like when he was 19.\"If it can work to start a startup during college, why do\nwe tell people not to?  For the same reason that the probably\napocryphal violinist, whenever he was asked to judge someone's\nplaying, would always say they didn't have enough talent to make\nit as a pro.  Succeeding as a musician takes determination as well\nas talent, so this answer works out to be the right advice for\neveryone.  The ones who are uncertain believe it and give up, and\nthe ones who are sufficiently determined think \"screw that, I'll\nsucceed anyway.\"So our official policy now is only to fund undergrads we can't talk\nout of it.  And frankly, if you're not certain, you should wait.\nIt's not as if all the opportunities to start companies are going\nto be gone if you don't do it now.  Maybe the window will close on\nsome idea you're working on, but that won't be the last idea you'll\nhave.  For every idea that times out, new ones become feasible.\nHistorically the opportunities to start startups have only increased\nwith time.In that case, you might ask, why not wait longer?  Why not go work\nfor a while, or go to grad school, and then start a startup?  And\nindeed, that might be a good idea.  If I had to pick the sweet spot\nfor startup founders, based on who we're most excited to see\napplications from, I'd say it's probably the mid-twenties.  Why?\nWhat advantages does someone in their mid-twenties have over someone\nwho's 21?  And why isn't it older?  What can 25 year olds do that\n32 year olds can't?  Those turn out to be questions worth examining.PlusIf you start a startup soon after college, you'll be a young founder\nby present standards, so you should know what the relative advantages\nof young founders are.  They're not what you might think.  As a\nyoung founder your strengths are: stamina, poverty, rootlessness,\ncolleagues, and ignorance.The importance of stamina shouldn't be surprising.  If you've heard\nanything about startups you've probably heard about the long hours.\nAs far as I can tell these are universal.  I can't think of any\nsuccessful startups whose founders worked 9 to 5.  And it's\nparticularly necessary for younger founders to work long hours\nbecause they're probably not as efficient as they'll be later.Your second advantage, poverty, might not sound like an advantage,\nbut it is a huge one.  Poverty implies you can live cheaply,\nand this is critically important for startups.  Nearly every startup\nthat fails, fails by running out of money.  It's a little misleading\nto put it this way, because there's usually some other underlying\ncause.  But regardless of the source of your problems, a low burn\nrate gives you more opportunity to recover from them.  And since\nmost startups make all kinds of mistakes at first, room to recover\nfrom mistakes is a valuable thing to have.Most startups end up doing something different than they planned.\nThe way the successful ones find something that works is by trying\nthings that don't.  So the worst thing you can do in a startup is\nto have a rigid, pre-ordained plan and then start spending a lot\nof money to implement it.  Better to operate cheaply and give your\nideas time to evolve.Recent grads can live on practically nothing, and this gives you\nan edge over older founders, because the main cost in software\nstartups is people.  The guys with kids and mortgages are at a\nreal disadvantage.  This is one reason I'd bet on the 25 year old\nover the 32 year old.  The 32 year old probably is a better programmer,\nbut probably also has a much more expensive life.  Whereas a 25\nyear old has some work experience (more on that later) but can live\nas cheaply as an undergrad.Robert Morris and I were 29 and 30 respectively when we started\nViaweb, but fortunately we still lived like 23 year olds.  We both had\nroughly zero assets.  I would have loved to have a mortgage,\nsince that would have meant I had a house.  But in retrospect\nhaving nothing turned out to be convenient. I wasn't tied down and\nI was used to living cheaply.Even more important than living cheaply, though, is thinking cheaply.\nOne reason the Apple II was so popular was that it was cheap.  The\ncomputer itself was cheap, and it used cheap, off-the-shelf peripherals\nlike a cassette tape recorder for data storage and a TV as a monitor.\nAnd you know why?  Because Woz designed this computer for himself,\nand he couldn't afford anything more.We benefitted from the same phenomenon.  Our prices were\ndaringly low for the time.  The top level of service was\n$300 a month, which was an order of magnitude below the norm.  In\nretrospect this was a smart move, but we didn't do it because we\nwere smart.  $300 a month seemed like a lot of money to us.  Like\nApple, we created something inexpensive, and therefore popular,\nsimply because we were poor.A lot of startups have that form: someone comes along and makes\nsomething for a tenth or a hundredth of what it used to cost, and\nthe existing players can't follow because they don't even want to\nthink about a world in which that's possible.  Traditional long\ndistance carriers, for example, didn't even want to think about\nVoIP.  (It was coming, all the same.)  Being poor helps in this\ngame, because your own personal bias points in the same direction\ntechnology evolves in.The advantages of rootlessness are similar to those of poverty.\nWhen you're young you're more mobile—not just because you don't\nhave a house or much stuff, but also because you're less likely to\nhave serious relationships.  This turns out to be important, because\na lot of startups involve someone moving.The founders of Kiko, for example, are now en route to the Bay Area\nto start their next startup.  It's a better place for what they\nwant to do.  And it was easy for them to decide to go, because\nneither as far as I know has a serious girlfriend, and everything\nthey own will fit in one car—or more precisely, will either fit\nin one car or is crappy enough that they don't mind leaving it\nbehind.They at least were in Boston.  What if they'd been in Nebraska,\nlike Evan Williams was at their age?   Someone wrote recently that\nthe drawback of Y Combinator was that you had to move to participate.\nIt couldn't be any other way. The kind of conversations we have\nwith founders, we have to have in person.  We fund a dozen startups\nat a time, and we can't be in a dozen places at once.  But even if\nwe could somehow magically save people from moving, we wouldn't.\nWe wouldn't be doing founders a favor by letting them stay in\nNebraska.  Places that aren't\nstartup hubs are toxic to startups.\nYou can tell that from indirect evidence.  You can tell how hard\nit must be to start a startup in Houston or Chicago or Miami from\nthe microscopically small number, per capita, that succeed\nthere.  I don't know exactly what's suppressing all the startups in these\ntowns—probably a hundred subtle little things—but something\nmust be.\n[2]Maybe this will change.  Maybe the increasing cheapness of startups\nwill mean they'll be able to survive anywhere, instead of only in\nthe most hospitable environments.  Maybe 37signals is the pattern\nfor the future.  But maybe not.  Historically there have always\nbeen certain towns that were centers for certain industries, and\nif you weren't in one of them you were at a disadvantage.  So my\nguess is that 37signals is an anomaly.  We're looking at a pattern\nmuch older than \"Web 2.0\" here.Perhaps the reason more startups per capita happen in the Bay Area\nthan Miami is simply that there are more founder-type people there.\nSuccessful startups are almost never started by one person.  Usually\nthey begin with a conversation in which someone mentions that\nsomething would be a good idea for a company, and his friend says,\n\"Yeah, that is a good idea, let's try it.\"  If you're missing that\nsecond person who says \"let's try it,\" the startup never happens.\nAnd that is another area where undergrads have an edge.  They're\nsurrounded by people willing to say that.  At a good college you're\nconcentrated together with a lot of other ambitious and technically\nminded people—probably more concentrated than you'll ever be\nagain.  If your nucleus spits out a neutron, there's a good chance\nit will hit another nucleus.The number one question people ask us at Y Combinator is: Where can\nI find a co-founder?  That's the biggest problem for someone starting\na startup at 30.  When they were in school they knew a lot of good\nco-founders, but by 30 they've either lost touch with them or these\npeople are tied down by jobs they don't want to leave.Viaweb was an anomaly in this respect too.  Though we were comparatively\nold, we weren't tied down by impressive jobs.  I was trying to be\nan artist, which is not very constraining, and Robert, though 29,\nwas still in grad school due to a little interruption in his academic\ncareer back in 1988.  So arguably the Worm made Viaweb possible.\nOtherwise Robert would have been a junior professor at that age,\nand he wouldn't have had time to work on crazy speculative projects\nwith me.Most of the questions people ask Y Combinator we have some kind of\nanswer for, but not the co-founder question.  There is no good\nanswer.  Co-founders really should be people you already know.  And\nby far the best place to meet them is school. You have a large\nsample of smart people; you get to compare how they all perform on\nidentical tasks; and everyone's life is pretty fluid.  A lot of\nstartups grow out of schools for this reason.  Google, Yahoo, and\nMicrosoft, among others, were all founded by people who met in\nschool.  (In Microsoft's case, it was high school.)Many students feel they should wait and get a little more experience\nbefore they start a company.  All other things being equal, they\nshould.  But all other things are not quite as equal as they look.\nMost students don't realize how rich they are in the scarcest\ningredient in startups, co-founders.  If you wait too long, you may\nfind that your friends are now involved in some project they don't\nwant to abandon.  The better they are, the more likely this is to\nhappen.One way to mitigate this problem might be to actively plan your\nstartup while you're getting those n years of experience.  Sure,\ngo off and get jobs or go to grad school or whatever, but get\ntogether regularly to scheme, so the idea of starting a startup\nstays alive in everyone's brain.  I don't know if this works, but\nit can't hurt to try.It would be helpful just to realize what an advantage you have as\nstudents.  Some of your classmates are probably going to be successful\nstartup founders; at a great technical university, that is a near\ncertainty.  So which ones?  If I were you I'd look for the people\nwho are not just smart, but incurable\nbuilders.\nLook\nfor the people who keep starting projects, and finish at least some\nof them.  That's what we look for.  Above all else, above academic\ncredentials and even the idea you apply with, we look for people\nwho build things.The other place co-founders meet is at work.  Fewer do than at\nschool, but there are things you can do to improve the odds.  The\nmost important, obviously, is to work somewhere that has a lot of\nsmart, young people.  Another is to work for a company located in\na startup hub.  It will be easier to talk a co-worker into quitting\nwith you in a place where startups are happening all around you.You might also want to look at the employment agreement you sign\nwhen you get hired.  Most will say that any ideas you think of while\nyou're employed by the company belong to them.  In practice it's\nhard for anyone to prove what ideas you had when, so the line gets\ndrawn at code.  If you're going to start a startup, don't write any\nof the code while you're still employed.  Or at least discard any\ncode you wrote while still employed and start over.  It's not so\nmuch that your employer will find out and sue you.  It won't come\nto that; investors or acquirers or (if you're so lucky) underwriters\nwill nail you first.  Between t = 0 and when you buy that yacht,\nsomeone is going to ask if any of your code legally belongs\nto anyone else, and you need to be able to say no.\n[3]The most overreaching employee agreement I've seen so far is Amazon's.\nIn addition to the usual clauses about owning your ideas, you also\ncan't be a founder of a startup that has another founder who worked\nat Amazon—even if you didn't know them or even work there at the\nsame time. I suspect they'd have a hard time enforcing this, but\nit's a bad sign they even try.  There are plenty of other places\nto work; you may as well choose one that keeps more of your options\nopen.Speaking of cool places to work, there is of course Google.  But I\nnotice something slightly frightening about Google: zero startups\ncome out of there.  In that respect it's a black hole.  People seem\nto like working at Google too much to leave.  So if you hope to start\na startup one day, the evidence so far suggests you shouldn't work\nthere.I realize this seems odd advice.  If they make your life so good\nthat you don't want to leave, why not work there?  Because, in\neffect, you're probably getting a local maximum.  You need a certain\nactivation energy to start a startup.  So an employer who's fairly\npleasant to work for can lull you into staying indefinitely, even\nif it would be a net win for you to leave.\n[4]The best place to work, if you want to start a startup, is probably\na startup.  In addition to being the right sort of experience, one\nway or another it will be over quickly.  You'll either end up rich,\nin which case problem solved, or the startup will get bought, in\nwhich case it it will start to suck to work there and it will be\neasy to leave, or most likely, the thing will blow up and you'll\nbe free again.Your final advantage, ignorance, may not sound very useful.  I\ndeliberately used a controversial word for it; you might equally\ncall it innocence.  But it seems to be a powerful force.  My Y\nCombinator co-founder Jessica Livingston is just about to publish\na book of interviews\nwith startup founders, and I noticed a remarkable pattern in them.\nOne after another said that if they'd known how hard it would be,\nthey would have been too intimidated to start.Ignorance can be useful when it's a counterweight to other forms\nof stupidity.  It's useful in starting startups because you're\ncapable of more than you realize.  Starting startups is harder than\nyou expect, but you're also capable of more than you expect, so\nthey balance out.Most people look at a company like Apple and think, how could I\never make such a thing?  Apple is an institution, and I'm just a\nperson.  But every institution was at one point just a handful of\npeople in a room deciding to start something.  Institutions are\nmade up, and made up by people no different from you.I'm not saying everyone could start a startup.  I'm sure most people\ncouldn't; I don't know much about the population at large.  When\nyou get to groups I know well, like hackers, I can say more precisely.\nAt the top schools, I'd guess as many as a quarter of the CS majors\ncould make it as startup founders if they wanted.That \"if they wanted\" is an important qualification—so important\nthat it's almost cheating to append it like that—because once you\nget over a certain threshold of intelligence, which most CS majors\nat top schools are past, the deciding factor in whether you succeed\nas a founder is how much you want to.  You don't have to be that\nsmart.  If you're not a genius, just start a startup in some unsexy\nfield where you'll have less competition, like software for human\nresources departments.  I picked that example at random, but I feel\nsafe in predicting that whatever they have now, it wouldn't take\ngenius to do better.   There are a lot of people out there working\non boring stuff who are desperately in need of better software, so\nhowever short you think you fall of Larry and Sergey, you can ratchet\ndown the coolness of the idea far enough to compensate.As well as preventing you from being intimidated, ignorance can\nsometimes help you discover new ideas.  Steve Wozniak\nput this very strongly:\nAll the best things that I did at Apple came from (a) not having\nmoney and (b) not having done it before, ever. Every single thing\nthat we came out with that was really great, I'd never once done\nthat thing in my life.\nWhen you know nothing, you have to reinvent stuff for yourself, and\nif you're smart your reinventions may be better than what preceded\nthem.  This is especially true in fields where the rules change.\nAll our ideas about software were developed in a time when processors\nwere slow, and memories and disks were tiny.  Who knows what obsolete\nassumptions are embedded in the conventional wisdom?  And the way\nthese assumptions are going to get fixed is not by explicitly\ndeallocating them, but by something more akin to garbage collection.\nSomeone ignorant but smart will come along and reinvent everything,\nand in the process simply fail to reproduce certain existing ideas.MinusSo much for the advantages of young founders.  What about the\ndisadvantages? I'm going to start with what goes wrong and try to\ntrace it back to the root causes.What goes wrong with young founders is that they build stuff that\nlooks like class projects.  It was only recently that we figured\nthis out ourselves.  We noticed a lot of similarities between the\nstartups that seemed to be falling behind, but we couldn't figure\nout how to put it into words.  Then finally we realized what it\nwas: they were building class projects.But what does that really mean?  What's wrong with class projects?\nWhat's the difference between a class project and a real startup?\nIf we could answer that question it would be useful not just to\nwould-be startup founders but to students in general, because we'd\nbe a long way toward explaining the mystery of the so-called real\nworld.There seem to be two big things missing in class projects: (1) an\niterative definition of a real problem and (2) intensity.The first is probably unavoidable.  Class projects will inevitably\nsolve fake problems.  For one thing, real problems are rare and\nvaluable.  If a professor wanted to have students solve real problems,\nhe'd face the same paradox as someone trying to give an example of\nwhatever \"paradigm\" might succeed the Standard Model of physics.\nThere may well be something that does, but if you could think of\nan example you'd be entitled to the Nobel Prize.  Similarly, good\nnew problems are not to be had for the asking.In technology the difficulty is compounded by the fact that real\nstartups tend to discover the problem they're solving by a process\nof evolution.  Someone has an idea for something; they build it;\nand in doing so (and probably only by doing so) they realize\nthe problem they should be solving is another one.  Even if the\nprofessor let you change your project description on the fly, there\nisn't time enough to do that in a college class, or a market to\nsupply evolutionary pressures.  So class\nprojects are mostly about implementation, which is the least\nof your problems in a startup.It's not just that in a startup you work on the idea as well as\nimplementation.  The very implementation is different.  Its main\npurpose is to refine the idea.  Often the only value of most of the\nstuff you build in the first six months is that it proves your\ninitial idea was mistaken.  And that's extremely valuable.  If\nyou're free of a misconception that everyone else still shares,\nyou're in a powerful position.  But you're not thinking that way\nabout a class project.  Proving your initial plan was mistaken would\njust get you a bad grade.  Instead of building stuff to throw away,\nyou tend to want every line of code to go toward that final goal\nof showing you did a lot of work.That leads to our second difference: the way class projects are\nmeasured.  Professors will tend to judge you by the distance between\nthe starting point and where you are now.  If someone has achieved\na lot, they should get a good grade.  But customers will judge you\nfrom the other direction: the distance remaining between where you\nare now and the features they need.  The market doesn't give a shit\nhow hard you worked.  Users just want your software to do what they\nneed, and you get a zero otherwise.  That is one of the most\ndistinctive differences between school and the real world: there\nis no reward for putting in a good effort.  In fact, the whole\nconcept of a \"good effort\" is a fake idea adults invented to encourage\nkids.  It is not found in nature.Such lies seem to be helpful to kids.  But unfortunately when you\ngraduate they don't give you a list of all the lies they told you\nduring your education.  You have to get them beaten out of you by\ncontact with the real world.  And this is why so many jobs want\nwork experience.  I couldn't understand that when I was in college.\nI knew how to program.  In fact, I could tell I knew how to program\nbetter than most people doing it for a living.  So what was this\nmysterious \"work experience\" and why did I need it?Now I know what it is, and part of the confusion is grammatical.\nDescribing it as \"work experience\" implies it's like experience\noperating a certain kind of machine, or using a certain programming\nlanguage.  But really what work experience refers to is not some\nspecific expertise, but the elimination of certain habits left over\nfrom childhood.One of the defining qualities of kids is that they flake.  When\nyou're a kid and you face some hard test, you can cry and say \"I\ncan't\" and they won't make you do it.  Of course, no one can make\nyou do anything in the grownup world either.  What they do instead\nis fire you.  And when motivated by that\nyou find you can do a lot more than you realized.  So one of the\nthings employers expect from someone with \"work experience\" is the\nelimination of the flake reflex—the ability to get things done,\nwith no excuses.The other thing you get from work experience is an understanding\nof what work is, and in particular, how intrinsically horrible it\nis.  Fundamentally the equation is a brutal one: you have to spend\nmost of your waking hours doing stuff someone else wants, or starve.\nThere are a few places where the work is so interesting that this\nis concealed, because what other people want done happens to coincide\nwith what you want to work on.  But you only have to imagine what\nwould happen if they diverged to see the underlying reality.It's not so much that adults lie to kids about this as never explain\nit.  They never explain what the deal is with money.  You know from\nan early age that you'll have some sort of job, because everyone\nasks what you're going to \"be\" when you grow up. What they\ndon't tell you is that as a kid you're sitting on the shoulders of\nsomeone else who's treading water, and that starting working means\nyou get thrown into the water on your own, and have to start treading\nwater yourself or sink.  \"Being\" something is incidental; the\nimmediate problem is not to drown.The relationship between work and money tends to dawn on you only\ngradually.  At least it did for me.  One's first thought tends to\nbe simply \"This sucks.  I'm in debt. Plus I have to get up on monday\nand go to work.\"  Gradually you realize that these two things are\nas tightly connected as only a market can make them.So the most important advantage 24 year old founders have over 20\nyear old founders is that they know what they're trying to avoid.\nTo the average undergrad the idea of getting rich translates into\nbuying Ferraris, or being admired.  To someone who has learned from\nexperience about the relationship between money and work, it\ntranslates to something way more important: it means you get to opt\nout of the brutal equation that governs the lives of 99.9% of people.\nGetting rich means you can stop treading water.Someone who gets this will work much harder at making a startup\nsucceed—with the proverbial energy of a drowning man, in fact.\nBut understanding the relationship between money and work also\nchanges the way you work.  You don't get money just for working,\nbut for doing things other people want.  Someone who's figured that\nout will automatically focus more on the user.  And that cures the\nother half of the class-project syndrome.  After you've been working\nfor a while, you yourself tend to measure what you've done the same\nway the market does.Of course, you don't have to spend years working to learn this\nstuff.  If you're sufficiently perceptive you can grasp these things\nwhile you're still in school.  Sam Altman did.  He must have, because\nLoopt is no class project.  And as his example suggests, this can\nbe valuable knowledge.  At a minimum, if you get this stuff, you\nalready have most of what you gain from the \"work experience\"\nemployers consider so desirable.  But of course if you really get\nit, you can use this information in a way that's more valuable to\nyou than that.NowSo suppose you think you might start a startup at some point, either\nwhen you graduate or a few years after.  What should you do now?\nFor both jobs and grad school, there are ways to prepare while\nyou're in college.  If you want to get a job when you graduate, you\nshould get summer jobs at places you'd like to work.  If you want\nto go to grad school, it will help to work on research projects as\nan undergrad.  What's the equivalent for startups?  How do you keep\nyour options maximally open?One thing you can do while you're still in school is to learn how\nstartups work.  Unfortunately that's not easy.  Few if any colleges\nhave classes about startups.  There may be business school classes\non entrepreneurship, as they call it over there, but these are\nlikely to be a waste of time.  Business schools like to talk about\nstartups, but philosophically they're at the opposite end of the\nspectrum.  Most books on startups also seem to be useless.  I've\nlooked at a few and none get it right.  Books in most fields are\nwritten by people who know the subject from experience, but for\nstartups there's a unique problem:  by definition the founders of\nsuccessful startups don't need to write books to make money. As a\nresult most books on the subject end up being written by people who\ndon't understand it.So I'd be skeptical of classes and books.  The way to learn about\nstartups is by watching them in action, preferably by working at\none.  How do you do that as an undergrad?  Probably by sneaking in\nthrough the back door. Just hang around a lot and gradually start\ndoing things for them.  Most startups are (or should be) very\ncautious about hiring.  Every hire increases the burn rate, and bad\nhires early on are hard to recover from.  However, startups usually\nhave a fairly informal atmosphere, and there's always a lot that\nneeds to be done.  If you just start doing stuff for them, many\nwill be too busy to shoo you away.  You can thus gradually work\nyour way into their confidence, and maybe turn it into an official\njob later, or not, whichever you prefer.  This won't work for all\nstartups, but it would work for most I've known.Number two, make the most of the great advantage of school: the\nwealth of co-founders.  Look at the people around you and ask\nyourself which you'd like to work with.  When you apply that test,\nyou may find you get surprising results.  You may find you'd prefer\nthe quiet guy you've mostly ignored to someone who seems impressive\nbut has an attitude to match.  I'm not suggesting you suck up to\npeople you don't really like because you think one day they'll be\nsuccessful.  Exactly the opposite, in fact: you should only start\na startup with someone you like, because a startup will put your\nfriendship through a stress test.  I'm just saying you should think\nabout who you really admire and hang out with them, instead of\nwhoever circumstances throw you together with.Another thing you can do is learn skills that will be useful to you\nin a startup.  These may be different from the skills you'd learn\nto get a job.  For example, thinking about getting a job will make\nyou want to learn programming languages you think employers want,\nlike Java and C++.  Whereas if you start a startup, you get to pick\nthe language, so you have to think about which will actually let\nyou get the most done.  If you use that test you might end up\nlearning Ruby or Python instead.\nBut the most important skill for a startup founder isn't a programming\ntechnique.  It's a knack for understanding users and figuring out\nhow to give them what they want.  I know I repeat this, but that's\nbecause it's so important.  And it's a skill you can learn, though\nperhaps habit might be a better word.  Get into the habit of thinking\nof software as having users.  What do those users want?  What would\nmake them say wow?This is particularly valuable for undergrads, because the concept\nof users is missing from most college programming classes.  The way\nyou get taught programming in college would be like teaching writing\nas grammar, without mentioning that its purpose is to communicate\nsomething to an audience.  Fortunately an audience for software is\nnow only an http request away.  So in addition to the programming\nyou do for your classes, why not build some kind of website people\nwill find useful?  At the very least it will teach you how to write\nsoftware with users.  In the best case, it might not just be\npreparation for a startup, but the startup itself, like it was for\nYahoo and Google.Notes[1]\nEven the desire to protect one's children seems weaker, judging\nfrom things people have historically done to their kids\nrather than risk their community's disapproval.  (I assume we still\ndo things that will be regarded in the future as barbaric, but\nhistorical abuses are easier for us to see.)[2]\nWorrying that Y Combinator makes founders move for 3 months\nalso suggests one underestimates how hard it is to start a startup.\nYou're going to have to put up with much greater inconveniences than\nthat.[3]\nMost employee agreements\nsay that any idea relating to the company's present or potential\nfuture business belongs to them.  Often as not the second clause could\ninclude any possible startup, and anyone doing due diligence for an\ninvestor or acquirer will assume the worst.To be safe either (a) don't use code written while you\nwere still employed in your previous job, or (b) get your employer to\nrenounce, in writing, any claim to the code you write for your side\nproject.  Many will consent to (b) rather than\nlose a prized employee.  The downside is that you'll have to tell them\nexactly what your project does.[4]\nGeshke and Warnock only founded Adobe because Xerox ignored\nthem.  If Xerox had used what they built, they would probably\nnever have left PARC.Thanks to Jessica Livingston and Robert Morris for reading\ndrafts of this, and to Jeff Arnold and the SIPB for inviting me to\nspeak.\nComment on this essay."},{"title":"A Unified Theory of VC Suckage","text":"March 2005A couple months ago I got an email from a recruiter asking if I was\ninterested in being a \"technologist in residence\" at a new venture\ncapital fund.  I think the idea was to play Karl Rove to the VCs'\nGeorge Bush.I considered it for about four seconds.  Work for a VC fund?  Ick.One of my most vivid memories from our startup is going to visit\nGreylock, the famous Boston VCs. They were the most arrogant\npeople I've met in my life.  And I've met a lot of arrogant people.\n[1]I'm not alone in feeling this way, of course.  Even a VC friend of\nmine dislikes VCs.  \"Assholes,\" he says.But lately I've been learning more about how the VC world works,\nand a few days ago it hit me that there's a reason VCs are the way\nthey are.  It's not so much that the business attracts jerks, or\neven that the power they wield corrupts them.  The real problem is\nthe way they're paid.The problem with VC funds is that they're funds.  Like the\nmanagers of mutual funds or hedge funds, VCs get paid a percentage\nof the money they manage: about 2% a year in management fees,\nplus a percentage of the gains.  So they want\nthe fund to be huge-- hundreds of millions of dollars, if possible.\nBut that means each partner ends up being responsible for investing\na lot of money.  And since one person can only manage so many deals,\neach deal has to be for multiple millions of dollars.This turns out to explain nearly all the characteristics of VCs\nthat founders hate.It explains why VCs take so agonizingly long to make up their minds,\nand why their due diligence feels like a body cavity search. [2]\nWith so much at stake, they have to be paranoid.It explains why they steal your ideas.  Every founder knows that\nVCs will tell your secrets to your competitors if they end up\ninvesting in them.  It's not unheard of for VCs to meet you when\nthey have no intention of funding you, just to pick your brain for\na competitor.  This prospect makes naive founders clumsily secretive.\nExperienced founders treat it as a cost of doing business.  Either\nway it sucks.  But again, the only reason VCs are so sneaky is the\ngiant deals they do.  With so much at stake, they have to be devious.It explains why VCs tend to interfere in the companies they invest\nin.  They want to be on your board not just so that they can advise\nyou, but so that they can watch you.  Often they even install a new\nCEO.  Yes, he may have extensive business experience.  But he's\nalso their man: these newly installed CEOs always play something\nof the role of a political commissar in a Red Army unit.  With\nso much at stake, VCs can't resist micromanaging you.The huge investments themselves are something founders would dislike,\nif they realized how damaging they can be.  VCs don't invest $x\nmillion because that's the amount you need, but because that's the\namount the structure of their business requires them to invest.\nLike steroids, these sudden huge investments can do more harm than\ngood.  Google survived enormous VC funding because it could\nlegitimately absorb large amounts of money.  They had to buy a lot\nof servers and a lot of bandwidth to crawl the whole Web.  Less\nfortunate startups just end up hiring armies of people to sit around\nhaving meetings.In principle you could take a huge VC investment, put it in treasury\nbills, and continue to operate frugally.  You just try it.And of course giant investments mean giant valuations.  They have\nto, or there's not enough stock left to keep the founders interested.\nYou might think a high valuation is a great thing.  Many founders\ndo.  But you can't eat paper.  You can't benefit from a high valuation\nunless you can somehow achieve what those in the business\ncall a \"liquidity event,\" and the higher\nyour valuation, the narrower your options for doing that.  Many a\nfounder would be happy to sell his company for $15 million, but VCs\nwho've just invested at a pre-money valuation of $8 million won't\nhear of that.  You're rolling the dice again, whether you like it\nor not.Back in 1997, one of our competitors raised $20 million in a single\nround of VC funding.  This was at the time more than the valuation\nof our entire company.  Was I worried?  Not at all: I was delighted.\nIt was like watching a car you're chasing turn down a street that\nyou know has no outlet.Their smartest move at that point would have been to take every\npenny of the $20 million and use it to buy us.  We would have sold.\nTheir investors would have been furious of course.  But I think the\nmain reason they never considered this was that they never imagined\nwe could be had so cheap.  They probably assumed we were on the\nsame VC gravy train they were.In fact we only spent about $2 million in our entire existence.\nAnd that gave us flexibility.  We could sell ourselves to Yahoo for\n$50 million, and everyone was delighted.  If our competitor had\ndone that, the last round of investors would presumably have lost\nmoney.  I assume they could have vetoed such a deal.  But no one\nthose days was paying a lot more than Yahoo.  So unless their\nfounders could pull off an IPO (which would be difficult with Yahoo\nas a competitor), they had no choice but to ride the thing down.The puffed-up companies that went public during the Bubble didn't\ndo it just because they were pulled into it by unscrupulous investment\nbankers.  Most were pushed just as hard from the other side by VCs\nwho'd invested at high valuations, leaving an IPO as the only way\nout.  The only people dumber were retail investors.  So it was\nliterally IPO or bust.  Or rather, IPO then bust, or just bust.Add up all the evidence of VCs' behavior, and the resulting personality\nis not attractive.  In fact, it's the classic villain: alternately\ncowardly, greedy, sneaky, and overbearing.I used to take it for granted that VCs were like this. Complaining\nthat VCs were jerks used to seem as naive to me as complaining that\nusers didn't read the reference manual.  Of course VCs were jerks.\nHow could it be otherwise?But I realize now that they're not intrinsically jerks.  VCs are\nlike car salesmen or bureaucrats: the nature of their work\nturns them into jerks.I've met a few VCs I like.  Mike Moritz seems a good guy.  He even\nhas a sense of humor, which is almost unheard of among VCs.  From\nwhat I've read about John Doerr, he sounds like a good guy too,\nalmost a hacker.  But they work for the very best VC funds.  And\nmy theory explains why they'd tend to be different: just as the\nvery most popular kids don't have to persecute\nnerds, the very best\nVCs don't have to act like VCs.  They get the pick of all the best\ndeals.  So they don't have to be so paranoid and sneaky, and they\ncan choose those rare companies, like Google, that will actually\nbenefit from the giant sums they're compelled to invest.VCs often complain that in their business there's too much money\nchasing too few deals.  Few realize that this also describes a flaw\nin the way funding works at the level of individual firms.Perhaps this was the sort of strategic insight I was supposed to\ncome up with as a \"technologist in residence.\"  If so, the good\nnews is that they're getting it for free.  The bad news is it\nmeans that if you're not one of the very top funds, you're\ncondemned to be the bad guys.Notes[1] After Greylock booted founder Philip Greenspun out of ArsDigita,\nhe wrote a hilarious but also very informative\nessay about it.\n[2] Since most VCs aren't tech guys, the technology side of their\ndue diligence tends to be like a body cavity search by someone with\na faulty knowledge of human anatomy.  After a while we were quite\nsore from VCs attempting to probe our nonexistent database orifice.No, we don't use Oracle.  We just store the data in files.  Our\nsecret is to use an OS that doesn't lose our data.  Which OS?\nFreeBSD.  Why do you use that instead of Windows NT?  Because it's\nbetter and it doesn't cost anything.  What, you're using a\nfreeware OS?How many times that conversation was repeated.\nThen when we got to Yahoo, we found they used FreeBSD and stored\ntheir data in files too."},{"title":"A Version 1.0","text":"October 2004\nAs E. B. White said, \"good writing is rewriting.\"  I didn't\nrealize this when I was in school.  In writing, as in math and\nscience, they only show you the finished product.\nYou don't see all the false starts.  This gives students a\nmisleading view of how things get made.Part of the reason it happens is that writers don't want\npeople to see their mistakes.  But I'm willing to let people\nsee an early draft if it will show how much you have\nto rewrite to beat an essay into shape.Below is the oldest version I can find of\nThe Age of the Essay\n(probably the second or third day), with\ntext that ultimately survived in\nred and text that later\ngot deleted in gray.\nThere seem to be several categories of cuts: things I got wrong,\nthings that seem like bragging, flames,\ndigressions, stretches of awkward prose, and unnecessary words.I discarded more from the beginning.  That's\nnot surprising; it takes a while to hit your stride.  There\nare more digressions at the start, because I'm not sure where\nI'm heading.The amount of cutting is about average.  I probably write\nthree to four words for every one that appears in the final\nversion of an essay.(Before anyone gets mad at me for opinions expressed here, remember\nthat anything you see here that's not in the final version is obviously\nsomething I chose not to publish, often because I disagree\nwith it.)\nRecently a friend said that what he liked about\nmy essays was that they weren't written the way\nwe'd been taught to write essays in school.  You\nremember: topic sentence, introductory paragraph,\nsupporting paragraphs, conclusion.  It hadn't\noccurred to me till then that those horrible things\nwe had to write in school were even connected to\nwhat I was doing now.  But sure enough, I thought,\nthey did call them \"essays,\" didn't they?Well, they're not.  Those things you have to write\nin school are not only not essays, they're one of the\nmost pointless of all the pointless hoops you have\nto jump through in school.  And I worry that they\nnot only teach students the wrong things about writing,\nbut put them off writing entirely.So I'm going to give the other side of the story: what\nan essay really is, and how you write one.  Or at least,\nhow I write one.  Students be forewarned: if you actually write\nthe kind of essay I describe, you'll probably get bad\ngrades.  But knowing how it's really done should\nat least help you to understand the feeling of futility\nyou have when you're writing the things they tell you to.\nThe most obvious difference between real essays and\nthe things one has to write in school is that real\nessays are not exclusively about English literature.\nIt's a fine thing for schools to\nteach students how to\nwrite.  But for some bizarre reason (actually, a very specific bizarre\nreason that I'll explain in a moment),\nthe teaching of\nwriting has gotten mixed together with the study\nof literature.  And so all over the country, students are\nwriting not about how a baseball team with a small budget\nmight compete with the Yankees, or the role of color in\nfashion, or what constitutes a good dessert, but about\nsymbolism in Dickens.With obvious\nresults.  Only a few people really\ncare about\nsymbolism in Dickens.  The teacher doesn't.\nThe students don't.  Most of the people who've had to write PhD\ndisserations about Dickens don't.  And certainly\nDickens himself would be more interested in an essay\nabout color or baseball.How did things get this way?  To answer that we have to go back\nalmost a thousand years.  Between about 500 and 1000, life was\nnot very good in Europe.  The term \"dark ages\" is presently\nout of fashion as too judgemental (the period wasn't dark;\nit was just different), but if this label didn't already\nexist, it would seem an inspired metaphor.  What little\noriginal thought there was took place in lulls between\nconstant wars and had something of the character of\nthe thoughts of parents with a new baby.\nThe most amusing thing written during this\nperiod, Liudprand of Cremona's Embassy to Constantinople, is,\nI suspect, mostly inadvertantly so.Around 1000 Europe began to catch its breath.\nAnd once they\nhad the luxury of curiosity, one of the first things they discovered\nwas what we call \"the classics.\"\nImagine if we were visited\nby aliens.  If they could even get here they'd presumably know a\nfew things we don't.  Immediately Alien Studies would become\nthe most dynamic field of scholarship: instead of painstakingly\ndiscovering things for ourselves, we could simply suck up\neverything they'd discovered.  So it was in Europe in 1200.\nWhen classical texts began to circulate in Europe, they contained\nnot just new answers, but new questions.  (If anyone proved\na theorem in christian Europe before 1200, for example, there\nis no record of it.)For a couple centuries, some of the most important work\nbeing done was intellectual archaelogy.  Those were also\nthe centuries during which schools were first established.\nAnd since reading ancient texts was the essence of what\nscholars did then, it became the basis of the curriculum.By 1700, someone who wanted to learn about\nphysics didn't need to start by mastering Greek in order to read Aristotle.  But schools\nchange slower than scholarship: the study of\nancient texts\nhad such prestige that it remained the backbone of\neducation\nuntil the late 19th century.  By then it was merely a tradition.\nIt did serve some purposes: reading a foreign language was difficult,\nand thus taught discipline, or at least, kept students busy;\nit introduced students to\ncultures quite different from their own; and its very uselessness\nmade it function (like white gloves) as a social bulwark.\nBut it certainly wasn't\ntrue, and hadn't been true for centuries, that students were\nserving apprenticeships in the hottest area of scholarship.Classical scholarship had also changed.  In the early era, philology\nactually mattered.  The texts that filtered into Europe were\nall corrupted to some degree by the errors of translators and\ncopyists.  Scholars had to figure out what Aristotle said\nbefore they could figure out what he meant.  But by the modern\nera such questions were answered as well as they were ever\ngoing to be.  And so the study of ancient texts became less\nabout ancientness and more about texts.The time was then ripe for the question: if the study of\nancient texts is a valid field for scholarship, why not modern\ntexts?  The answer, of course, is that the raison d'etre\nof classical scholarship was a kind of intellectual archaelogy that\ndoes not need to be done in the case of contemporary authors.\nBut for obvious reasons no one wanted to give that answer.\nThe archaeological work being mostly done, it implied that\nthe people studying the classics were, if not wasting their\ntime, at least working on problems of minor importance.And so began the study of modern literature. There was some\ninitial resistance, but it didn't last long.\nThe limiting\nreagent in the growth of university departments is what\nparents will let undergraduates study.  If parents will let\ntheir children major in x, the rest follows straightforwardly.\nThere will be jobs teaching x, and professors to fill them.\nThe professors will establish scholarly journals and publish\none another's papers.  Universities with x departments will\nsubscribe to the journals.  Graduate students who want jobs\nas professors of x will write dissertations about it.  It may\ntake a good long while for the more prestigious universities\nto cave in and establish departments in cheesier xes,  but\nat the other end of the scale there are so many universities\ncompeting to attract students that the mere establishment of\na discipline requires little more than the desire to do it.High schools imitate universities.\nAnd so once university\nEnglish departments were established in the late nineteenth century,\nthe 'riting component of the 3 Rs\nwas morphed into English.\nWith the bizarre consequence that high school students now\nhad to write about English literature-- to write, without\neven realizing it, imitations of whatever\nEnglish professors had been publishing in their journals a\nfew decades before.   It's no wonder if this seems to the\nstudent a pointless exercise, because we're now three steps\nremoved from real work: the students are imitating English\nprofessors, who are imitating classical scholars, who are\nmerely the inheritors of a tradition growing out of what\nwas, 700 years ago, fascinating and urgently needed work.Perhaps high schools should drop English and just teach writing.\nThe valuable part of English classes is learning to write, and\nthat could be taught better by itself.  Students learn better\nwhen they're interested in what they're doing, and it's hard\nto imagine a topic less interesting than symbolism in Dickens.\nMost of the people who write about that sort of thing professionally\nare not really interested in it.  (Though indeed, it's been a\nwhile since they were writing about symbolism; now they're\nwriting about gender.)I have no illusions about how eagerly this suggestion will\nbe adopted.  Public schools probably couldn't stop teaching\nEnglish even if they wanted to; they're probably required to by\nlaw.  But here's a related suggestion that goes with the grain\ninstead of against it: that universities establish a\nwriting major.  Many of the students who now major in English\nwould major in writing if they could, and most would\nbe better off.It will be argued that it is a good thing for students to be\nexposed to their literary heritage.  Certainly.  But is that\nmore important than that they learn to write well?  And are\nEnglish classes even the place to do it?  After all,\nthe average public high school student gets zero exposure to\nhis artistic heritage.  No disaster results.\nThe people who are interested in art learn about it for\nthemselves, and those who aren't don't.  I find that American\nadults are no better or worse informed about literature than\nart, despite the fact that they spent years studying literature\nin high school and no time at all studying art.  Which presumably\nmeans that what they're taught in school is rounding error\ncompared to what they pick up on their own.Indeed, English classes may even be harmful.  In my case they\nwere effectively aversion therapy.  Want to make someone dislike\na book?  Force him to read it and write an essay about it.\nAnd make the topic so intellectually bogus that you\ncould not, if asked, explain why one ought to write about it.\nI love to read more than anything, but by the end of high school\nI never read the books we were assigned.  I was so disgusted with\nwhat we were doing that it became a point of honor\nwith me to write nonsense at least as good at the other students'\nwithout having more than glanced over the book to learn the names\nof the characters and a few random events in it.I hoped this might be fixed in college, but I found the same\nproblem there.  It was not the teachers.  It was English.\nWe were supposed to read novels and write essays about them.\nAbout what, and why?  That no one seemed to be able to explain.\nEventually by trial and error I found that what the teacher\nwanted us to do was pretend that the story had really taken\nplace, and to analyze based on what the characters said and did (the\nsubtler clues, the better) what their motives must have been.\nOne got extra credit for motives having to do with class,\nas I suspect one must now for those involving gender and\nsexuality.  I learned how to churn out such stuff well enough\nto get an A, but I never took another English class.And the books we did these disgusting things to, like those\nwe mishandled in high school, I find still have black marks\nagainst them in my mind.  The one saving grace was that\nEnglish courses tend to favor pompous, dull writers like\nHenry James, who deserve black marks against their names anyway.\nOne of the principles the IRS uses in deciding whether to\nallow deductions is that, if something is fun, it isn't work.\nFields that are intellectually unsure of themselves rely on\na similar principle.  Reading P.G. Wodehouse or Evelyn Waugh or\nRaymond Chandler is too obviously pleasing to seem like\nserious work, as reading Shakespeare would have been before\nEnglish evolved enough to make it an effort to understand him. [sh]\nAnd so good writers (just you wait and see who's still in\nprint in 300 years) are less likely to have readers turned\nagainst them by clumsy, self-appointed tour guides.The other big difference between a real essay and the\nthings\nthey make you write in school is that a real essay doesn't\ntake a position and then defend it.  That principle,\nlike the idea that we ought to be writing about literature,\nturns out to be another intellectual hangover of long\nforgotten origins.  It's often mistakenly believed that\nmedieval universities were mostly seminaries.  In fact they\nwere more law schools.  And at least in our tradition\nlawyers are advocates: they are\ntrained to be able to\ntake\neither side of an argument and make as good a case for it\nas they can. Whether or not this is a good idea (in the case of prosecutors,\nit probably isn't), it tended to pervade\nthe atmosphere of\nearly universities.  After the lecture the most common form\nof discussion was the disputation.  This idea\nis at least\nnominally preserved in our present-day thesis defense-- indeed,\nin the very word thesis.  Most people treat the words\nthesis\nand dissertation as interchangeable, but originally, at least,\na thesis was a position one took and the dissertation was\nthe argument by which one defended it.I'm not complaining that we blur these two words together.\nAs far as I'm concerned, the sooner we lose the original\nsense of the word thesis, the better.  For many, perhaps most,\ngraduate students, it is stuffing a square peg into a round\nhole to try to recast one's work as a single thesis.  And\nas for the disputation, that seems clearly a net lose.\nArguing two sides of a case may be a necessary evil in a\nlegal dispute, but it's not the best way to get at the truth,\nas I think lawyers would be the first to admit.\nAnd yet this principle is built into the very structure of\nthe essays\nthey teach you to write in high school.  The topic\nsentence is your thesis, chosen in advance, the supporting\nparagraphs the blows you strike in the conflict, and the\nconclusion--- uh, what it the conclusion?  I was never sure\nabout that in high school.  If your thesis was well expressed,\nwhat need was there to restate it?  In theory it seemed that\nthe conclusion of a really good essay ought not to need to\nsay any more than QED.\nBut when you understand the origins\nof this sort of \"essay\", you can see where the\nconclusion comes from.  It's the concluding remarks to the\njury.What other alternative is there?  To answer that\nwe have to\nreach back into history again, though this time not so far.\nTo Michel de Montaigne, inventor of the essay.\nHe was\ndoing something quite different from what a\nlawyer does,\nand\nthe difference is embodied in the name.  Essayer is the French\nverb meaning \"to try\" (the cousin of our word assay),\nand an \"essai\" is an effort.\nAn essay is something you\nwrite in order\nto figure something out.Figure out what?  You don't know yet.  And so you can't begin with a\nthesis, because you don't have one, and may never have\none.  An essay doesn't begin with a statement, but with a\nquestion.  In a real essay, you don't take a position and\ndefend it.  You see a door that's ajar, and you open it and\nwalk in to see what's inside.If all you want to do is figure things out, why do you need\nto write anything, though?  Why not just sit and think?  Well,\nthere precisely is Montaigne's great discovery.  Expressing\nideas helps to form them.  Indeed, helps is far too weak a\nword.  90%\nof what ends up in my essays was stuff\nI only\nthought of when I sat down to write them.  That's why I\nwrite them.So there's another difference between essays and\nthe things\nyou have to write in school.   In school\nyou are, in theory,\nexplaining yourself to someone else.  In the best case---if\nyou're really organized---you're just writing it down.\nIn a real essay you're writing for yourself.  You're\nthinking out loud.But not quite.  Just as inviting people over forces you to\nclean up your apartment, writing something that you know\nother people will read forces you to think well.  So it\ndoes matter to have an audience.  The things I've written\njust for myself are no good.  Indeed, they're bad in\na particular way:\nthey tend to peter out.  When I run into\ndifficulties, I notice that I\ntend to conclude with a few vague\nquestions and then drift off to get a cup of tea.This seems a common problem.\nIt's practically the standard\nending in blog entries--- with the addition of a \"heh\" or an\nemoticon, prompted by the all too accurate sense that\nsomething is missing.And indeed, a lot of\npublished essays peter out in this\nsame way.\nParticularly the sort written by the staff writers of newsmagazines.  Outside writers tend to supply\neditorials of the defend-a-position variety, which\nmake a beeline toward a rousing (and\nforeordained) conclusion.   But the staff writers feel\nobliged to write something more\nbalanced, which in\npractice ends up meaning blurry.\nSince they're\nwriting for a popular magazine, they start with the\nmost radioactively controversial questions, from which\n(because they're writing for a popular magazine)\nthey then proceed to recoil from\nin terror.\nGay marriage, for or\nagainst?  This group says one thing.  That group says\nanother.  One thing is certain: the question is a\ncomplex one.  (But don't get mad at us.  We didn't\ndraw any conclusions.)Questions aren't enough.  An essay has to come up with answers.\nThey don't always, of course.  Sometimes you start with a\npromising question and get nowhere.  But those you don't\npublish.  Those are like experiments that get inconclusive\nresults.   Something you publish ought to tell the reader\nsomething he didn't already know.But what you tell him doesn't matter, so long as\nit's interesting.  I'm sometimes accused of meandering.\nIn defend-a-position writing that would be a flaw.\nThere you're not concerned with truth.  You already\nknow where you're going, and you want to go straight there,\nblustering through obstacles, and hand-waving\nyour way across swampy ground.  But that's not what\nyou're trying to do in an essay.  An essay is supposed to\nbe a search for truth.  It would be suspicious if it didn't\nmeander.The Meander is a river in Asia Minor (aka\nTurkey).\nAs you might expect, it winds all over the place.\nBut does it\ndo this out of frivolity?   Quite the opposite.\nLike all rivers, it's rigorously following the laws of physics.\nThe path it has discovered,\nwinding as it is, represents\nthe most economical route to the sea.The river's algorithm is simple.  At each step, flow down.\nFor the essayist this translates to: flow interesting.\nOf all the places to go next, choose\nwhichever seems\nmost interesting.I'm pushing this metaphor a bit.  An essayist\ncan't have\nquite as little foresight as a river.  In fact what you do\n(or what I do) is somewhere between a river and a roman\nroad-builder.  I have a general idea of the direction\nI want to go in, and\nI choose the next topic with that in mind.  This essay is\nabout writing, so I do occasionally yank it back in that\ndirection, but it is not all the sort of essay I\nthought I was going to write about writing.Note too that hill-climbing (which is what this algorithm is\ncalled) can get you in trouble.\nSometimes, just\nlike a river,\nyou\nrun up against a blank wall.  What\nI do then is just\nwhat the river does: backtrack.\nAt one point in this essay\nI found that after following a certain thread I ran out\nof ideas.  I had to go back n\nparagraphs and start over\nin another direction.  For illustrative purposes I've left\nthe abandoned branch as a footnote.\nErr on the side of the river.  An essay is not a reference\nwork.  It's not something you read looking for a specific\nanswer, and feel cheated if you don't find it.  I'd much\nrather read an essay that went off in an unexpected but\ninteresting direction than one that plodded dutifully along\na prescribed course.So what's interesting?  For me, interesting means surprise.\nDesign, as Matz\nhas said, should follow the principle of\nleast surprise.\nA button that looks like it will make a\nmachine stop should make it stop, not speed up.  Essays\nshould do the opposite.  Essays should aim for maximum\nsurprise.I was afraid of flying for a long time and could only travel\nvicariously.  When friends came back from faraway places,\nit wasn't just out of politeness that I asked them about\ntheir trip.\nI really wanted to know.  And I found that\nthe best way to get information out of them was to ask\nwhat surprised them.  How was the place different from what\nthey expected?  This is an extremely useful question.\nYou can ask it of even\nthe most unobservant people, and it will\nextract information they didn't even know they were\nrecording. Indeed, you can ask it in real time.  Now when I go somewhere\nnew, I make a note of what surprises me about it.  Sometimes I\neven make a conscious effort to visualize the place beforehand,\nso I'll have a detailed image to diff with reality.\nSurprises are facts\nyou didn't already\nknow.\nBut they're\nmore than that.  They're facts\nthat contradict things you\nthought you knew.  And so they're the most valuable sort of\nfact you can get.  They're like a food that's not merely\nhealthy, but counteracts the unhealthy effects of things\nyou've already eaten.How do you find surprises?  Well, therein lies half\nthe work of essay writing.  (The other half is expressing\nyourself well.)   You can at least\nuse yourself as a\nproxy for the reader.  You should only write about things\nyou've thought about a lot.  And anything you come across\nthat surprises you, who've thought about the topic a lot,\nwill probably surprise most readers.For example, in a recent essay I pointed out that because\nyou can only judge computer programmers by working with\nthem, no one knows in programming who the heroes should\nbe.\ncertainly\ndidn't realize this when I started writing\nthe\nessay, and even now I find it kind of weird.  That's\nwhat you're looking for.So if you want to write essays, you need two ingredients:\nyou need\na few topics that you think about a lot, and you\nneed some ability to ferret out the unexpected.What should you think about?  My guess is that it\ndoesn't matter.  Almost everything is\ninteresting if you get deeply\nenough into it.  The one possible exception\nare\nthings\nlike working in fast food, which\nhave deliberately had all\nthe variation sucked out of them.\nIn retrospect, was there\nanything interesting about working in Baskin-Robbins?\nWell, it was interesting to notice\nhow important color was\nto the customers.  Kids a certain age would point into\nthe case and say that they wanted yellow.  Did they want\nFrench Vanilla or Lemon?  They would just look at you\nblankly.  They wanted yellow.  And then there was the\nmystery of why the perennial favorite Pralines n' Cream\nwas so appealing. I'm inclined now to\nthink it was the salt.\nAnd the mystery of why Passion Fruit tasted so disgusting.\nPeople would order it because of the name, and were always\ndisappointed.  It should have been called In-sink-erator\nFruit.\nAnd there was\nthe difference in the way fathers and\nmothers bought ice cream for their kids.\nFathers tended to\nadopt the attitude of\nbenevolent kings bestowing largesse,\nand mothers that of\nharried bureaucrats,\ngiving in to\npressure against their better judgement.\nSo, yes, there does seem to be material, even in\nfast food.What about the other half, ferreting out the unexpected?\nThat may require some natural ability.  I've noticed for\na long time that I'm pathologically observant.  ....[That was as far as I'd gotten at the time.]Notes[sh] In Shakespeare's own time, serious writing meant theological\ndiscourses, not the bawdy plays acted over on the other\nside of the river among the bear gardens and whorehouses.The other extreme, the work that seems formidable from the moment\nit's created (indeed, is deliberately intended to be)\nis represented by Milton.  Like the Aeneid, Paradise Lost is a\nrock imitating a butterfly that happened to get fossilized.\nEven Samuel Johnson seems to have balked at this, on the one\nhand paying Milton the compliment of an extensive biography,\nand on the other writing of Paradise Lost that \"none who read it\never wished it longer.\""},{"title":"A Way to Detect Bias","text":"October 2015This will come as a surprise to a lot of people, but in some cases\nit's possible to detect bias in a selection process without knowing\nanything about the applicant pool.  Which is exciting because among\nother things it means third parties can use this technique to detect\nbias whether those doing the selecting want them to or not.You can use this technique whenever (a) you have at least\na random sample of the applicants that were selected, (b) their\nsubsequent performance is measured, and (c) the groups of\napplicants you're comparing have roughly equal distribution of ability.How does it work?  Think about what it means to be biased.  What\nit means for a selection process to be biased against applicants\nof type x is that it's harder for them to make it through.  Which\nmeans applicants of type x have to be better to get selected than\napplicants not of type x.\n[1]\nWhich means applicants of type x\nwho do make it through the selection process will outperform other\nsuccessful applicants.  And if the performance of all the successful\napplicants is measured, you'll know if they do.Of course, the test you use to measure performance must be a valid\none.  And in particular it must not be invalidated by the bias you're\ntrying to measure.\nBut there are some domains where performance can be measured, and\nin those detecting bias is straightforward. Want to know if the\nselection process was biased against some type of applicant?  Check\nwhether they outperform the others.  This is not just a heuristic\nfor detecting bias.  It's what bias means.For example, many suspect that venture capital firms are biased\nagainst female founders. This would be easy to detect: among their\nportfolio companies, do startups with female founders outperform\nthose without?  A couple months ago, one VC firm (almost certainly\nunintentionally) published a study showing bias of this type. First\nRound Capital found that among its portfolio companies, startups\nwith female founders outperformed\nthose without by 63%.\n[2]The reason I began by saying that this technique would come as a\nsurprise to many people is that we so rarely see analyses of this\ntype.  I'm sure it will come as a surprise to First Round that they\nperformed one. I doubt anyone there realized that by limiting their\nsample to their own portfolio, they were producing a study not of\nstartup trends but of their own biases when selecting companies.\nIf they'd understood the implications of the numbers they were\npublishing, they wouldn't have presented them the way they did.I predict we'll see this technique used more in the future.  The\ninformation needed to conduct such studies is increasingly available.\nData about who applies for things is usually closely guarded by the\norganizations selecting them, but nowadays data about who gets\nselected is often publicly available to anyone who takes the trouble\nto aggregate it.Notes[1]\nThis technique wouldn't work if the selection process looked\nfor different things from different types of applicants—for\nexample, if an employer hired men based on their ability but women\nbased on their appearance.[2]\nAs Paul Buchheit points out, First Round excluded their most\nsuccessful investment, Uber, from the study.  And while it\nmakes sense to exclude outliers from some types of studies,\nstudies of returns from startup investing, which is all about\nhitting outliers, are not one of them.Thanks to Sam Altman, Jessica Livingston, and Geoff Ralston for reading\ndrafts of this."},{"title":"A Word to the Resourceful","text":"January 2012A year ago I noticed a pattern in the least successful startups\nwe'd funded: they all seemed hard to talk to.  It felt as if there\nwas some kind of wall between us.  I could never quite tell if they\nunderstood what I was saying.This caught my attention because earlier we'd noticed a pattern\namong the most successful startups, and it seemed to hinge on a\ndifferent quality.  We found the startups that did best were the\nones with the sort of founders about whom we'd say \"they can take\ncare of themselves.\"  The startups that do best are fire-and-forget\nin the sense that all you have to do is give them a lead, and they'll\nclose it, whatever type of lead it is.  When they're raising money,\nfor example, you can do the initial intros knowing that if you\nwanted to you could stop thinking about it at that point.  You won't\nhave to babysit the round to make sure it happens.  That type of\nfounder is going to come back with the money; the only question is\nhow much on what terms.It seemed odd that the outliers at the two ends of the spectrum\ncould be detected by what appeared to be unrelated tests.  You'd\nexpect that if the founders at one end were distinguished by the\npresence of quality x, at the other end they'd be distinguished by\nlack of x.  Was there some kind of inverse relation between\nresourcefulness and being hard to talk to?It turns out there is, and the key to the mystery is the old adage\n\"a word to the wise is sufficient.\"   Because this phrase is not\nonly overused, but overused in an indirect way (by prepending the\nsubject to some advice), most people who've heard it don't know\nwhat it means.  What it means is that if someone is wise, all you\nhave to do is say one word to them, and they'll understand immediately.\nYou don't have to explain in detail; they'll chase down all the\nimplications.In much the same way that all you have to do is give the right sort\nof founder a one line intro to a VC, and he'll chase down the money.\nThat's the connection.  Understanding all the implications—even the\ninconvenient implications—of what someone tells you is a subset of\nresourcefulness.  It's conversational resourcefulness.Like real world resourcefulness, conversational resourcefulness\noften means doing things you don't want to.  Chasing down all the\nimplications of what's said to you can sometimes lead to uncomfortable\nconclusions.  The best word to describe the failure to do so is\nprobably \"denial,\" though that seems a bit too narrow.  A better\nway to describe the situation would be to say that the unsuccessful\nfounders had the sort of conservatism that comes from weakness.\nThey traversed idea space as gingerly as a very old person\ntraverses the physical world.\n[1]The unsuccessful founders weren't stupid.  Intellectually they\nwere as capable as\nthe successful founders of following all the implications of what\none said to them.  They just weren't eager to.So being hard to talk to was not what was killing the\nunsuccessful startups.  It\nwas a sign of an underlying lack of resourcefulness.  That's what\nwas killing them.  As well as\nfailing to chase down the implications of what was said to them,\nthe unsuccessful founders would also fail to chase down funding,\nand users, and sources of new ideas.  But the most immediate evidence\nI had that something was amiss was that I couldn't talk to them.Notes[1]\nA YC partner wrote:My feeling with the bad groups is that coming into office hours,\nthey've already decided what they're going to do and everything I\nsay is being put through an internal process in their heads, which\neither desperately tries to munge what I've said into something\nthat conforms with their decision or just outright dismisses it and\ncreates a rationalization for doing so. They may not even be conscious\nof this process but that's what I think is happening when you say\nsomething to bad groups and they have that glazed over look. I don't\nthink it's confusion or lack of understanding per se, it's this\ninternal process at work.With the good groups, you can tell that everything you say is being\nlooked at with fresh eyes and even if it's dismissed, it's because\nof some logical reason e.g. \"we already tried that\" or \"from speaking\nto our users that isn't what they'd like,\" etc. Those groups never\nhave that glazed over look.Thanks to Sam Altman, Patrick Collison, Aaron Iba, Jessica Livingston,\nRobert Morris, Harj Taggar, and Garry Tan for reading drafts of\nthis."},{"title":"Accumulator Generator","text":"Revenge of the Nerds yielded a\ncollection of canonical solutions to the same problem in\na number of languages.The problem: Write a function foo that takes a number n and returns a\nfunction that takes a number i, and returns n incremented by i.Note: (a) that's number, not integer, (b) that's incremented by, not\nplus.\nC++                   template\nstruct Acc {\nAcc(T n)\n: n(n) {}\ntemplate\nAcc(const Acc& u)\n: n(u.n) {}\ntemplate\nT operator()(U i) {\nreturn n += i;\n}\nT n;\n};\ntemplate\nAcc foo(T n)\n{\nreturn Acc(n);\n}\nDylan                 define function foo (n)\nmethod (i) n := n + i end;\nend function;\nE                     def foo (var n) :any {\ndef inc (i) :any { n += i }\n}\nErlang                foop(N)->\nreceive\n{P,I}-> S =N+I, P!S, foop(S)\nend.\nfoo(N)->\nP=spawn(foo,foop,[N]),\nfun(I)->\nP!{self(),I},\nreceive V->V end\nend.\nHaskell               import IOExts\nfoo n = do\nr  do\nmodifyIORef r (+i)\nreadIORef r)\nJavascript            function foo (n) {\nreturn function (i) {\nreturn n += i } }\nLisp: Arc             (def foo (n) [++ n _])\nLisp: Common Lisp     (defun foo (n)\n(lambda (i) (incf n i)))\nLisp: Goo             (df foo (n) (op incf n _))\nLisp: Scheme          (define (foo n)\n(lambda (i)\n(set! n (+ n i))\nn))\nLua                   function foo(n)\nreturn function (i)\nn = n + i\nreturn n\nend\nend\nMaple                 foo := proc(n)\nlocal s;\ns := n;\nproc(i) s := s + i\nend\nend\nMathematica           foo = Module[{s=#},s+=# &] &\nMozart                fun {Foo N}\nA = {NewCell N}\nin\nfun {$ B} C D in\n{Exchange A C D}\nif {IsInt C}\nandthen {IsFloat B}\nthen\nD = {IntToFloat C}+B\nelseif {IsFloat C}\nandthen {IsInt B}\nthen\nD = C+{IntToFloat B}\nelse D = C+B end\n{Access A}\nend\nend\nNewtonScript          foo := func (n)\nfunc (i)\nn := n + i ;\nPerl 5                sub foo {\nmy ($n) = @_;\nsub {$n += shift}\n}\nPython                class foo:\ndef __init__(self, n):\nself.n = n\ndef __call__(self, i):\nself.n += i\nreturn self.n\nRebol                 foo: func [ n ]\n[ func [ i ] [ n: n + i ] ]\nRuby                  def foo (n)\nlambda {|i| n += i } end\nSmalltalk             foo: n\n|s|\ns := n.\n^[:i| s := s + i. ]\nVBScript              Class acc\nPrivate n\nPublic Default Function inc(i)\nn = n + i\ninc = n\nEnd Function\nEnd Class\nFunction foo(n)\nDim bar\nSet bar = New acc\nbar(n)\nSet foo = bar\nEnd Function\nSome languages are not represented here, either because you\ncan't write this program in them (short of Greenspun's Tenth Rule)\nor because no one has yet sent me the code for that language.\nPlease don't send may any new submissions for the time being; I\ndon't have time to look at them.Credits: C++, Brendan Corfman and Daniel Cowgill;\nDylan, Neel Krishnaswami; E, Darius Bacon;\nErlang, Heinz Eriksson; Goo, Jonathan Bachrach; Haskell, Malcolm Wallace\nand Tom Pledger;\nJavascript, Anton van Straaten;  Lua, Chris Laurel; Maple, Stefan Vorkoetter;\nMathematica, Kovas Boguta;\nMozart, Kari Pahula; NewtonScript, Sean Luke;\nPerl, Dan Giffin and Trevor Blackwell; Python, Jeremy Hylton;\nRebol, Andreas Bolka;\nRuby, Stephan Schmidt;\nSmalltalk, Trevor Blackwell; VBScript, Stefan Holm."},{"title":"After Credentials","text":"December 2008A few months ago I read a New York Times article on South\nKorean cram schools that said\nAdmission to the right university can make or break an ambitious\nyoung South Korean.\nA parent added:\n\"In our country, college entrance exams determine 70 to 80 percent\nof a person's future.\"\nIt was striking how old fashioned this sounded.  And\nyet when I was in high school it wouldn't have seemed too far off\nas a description of the US.  Which means things must have been\nchanging here.The course of people's lives in the US now seems to be determined\nless by credentials and more by performance than it was 25 years\nago.  Where you go to college still matters, but not like it used\nto.What happened?_____Judging people by their academic credentials was in its time an\nadvance.  The practice seems to have begun in China, where starting\nin 587 candidates for the imperial civil service had to take an\nexam on classical literature.  [1] It was also a test of wealth,\nbecause the knowledge it tested was so specialized that passing\nrequired years of expensive training.  But though wealth was a\nnecessary condition for passing, it was not a sufficient one.  By\nthe standards of the rest of the world in 587, the Chinese system\nwas very enlightened.  Europeans didn't introduce formal civil\nservice exams till the nineteenth century, and even then they seem\nto have been influenced by the Chinese example.Before credentials, government positions were obtained mainly by\nfamily influence, if not outright bribery.   It was a great step\nforward to judge people by their performance on a test.  But by no\nmeans a perfect solution.  When you judge people that way, you tend\nto get cram schools—which they did in Ming China and nineteenth\ncentury England just as much as in present day South Korea.What cram schools are, in effect, is leaks in a seal.  The use of\ncredentials\nwas an attempt to seal off the direct transmission of power between\ngenerations, and cram schools represent that power finding holes\nin the seal.  Cram schools turn wealth in one generation into\ncredentials in the next.It's hard to beat this phenomenon, because the schools adjust to suit\nwhatever the tests measure.  When the tests are narrow and\npredictable, you get cram schools on the classic model, like those\nthat prepared candidates for Sandhurst (the British West Point) or\nthe classes American students take now to improve their SAT scores.\nBut as the tests get broader, the schools do too.  Preparing a\ncandidate for the Chinese imperial civil service exams took years,\nas prep school does today.  But the raison d'etre of all these\ninstitutions has been the same: to beat the system.  [2]_____History suggests that, all other things being equal, a society\nprospers in proportion to its ability to prevent parents from\ninfluencing their children's success directly.  It's a fine thing\nfor parents to help their children indirectly—for example,\nby helping them to become smarter or more disciplined, which then\nmakes them more successful.  The problem comes when parents use\ndirect methods: when they are able to use their own wealth or power\nas a substitute for their children's qualities.Parents will tend to do this when they can.  Parents will die for\ntheir kids, so it's not surprising to find they'll also push their\nscruples to the limits for them.  Especially if other parents are\ndoing it.Sealing off this force has a double advantage.  Not only does a\nsociety get \"the best man for the job,\" but\nparents' ambitions are diverted from direct methods to indirect\nones—to actually trying to raise their kids well.But we should expect it to be very hard to contain parents' efforts\nto obtain an unfair advantage for their kids.  We're dealing with\none of the most powerful forces in human nature.  We shouldn't expect\nnaive solutions to work, any more than we'd expect naive solutions\nfor keeping heroin out of a prison to work._____The obvious way to solve the problem is to make credentials better.\nIf the tests a society uses are currently hackable, we can study\nthe way people beat them and try to plug the holes.  You can use\nthe cram schools to show you where most of the holes are.  They\nalso tell you when you're succeeding in fixing them: when cram\nschools become less popular.A more general solution\nwould be to push for increased transparency, especially at critical\nsocial bottlenecks like college admissions.  In the US this process\nstill shows many outward signs of corruption.  For example, legacy\nadmissions.  The official story is that legacy status doesn't carry\nmuch weight, because all it does is break ties: applicants are\nbucketed by ability, and legacy status is only used to decide between\nthe applicants in the bucket that straddles the cutoff.  But what\nthis means is that a university can make legacy status have as much\nor as little weight as they want, by adjusting the size of the\nbucket that straddles the cutoff.By gradually chipping away at the abuse of credentials, you could\nprobably make them more airtight.  But what a long fight it would\nbe.  Especially when the institutions administering the tests don't\nreally want them to be airtight._____Fortunately there's a better way to prevent the direct transmission\nof power between generations.  Instead of trying to make credentials\nharder to hack, we can also make them matter less.Let's think about what credentials are for.  What they are,\nfunctionally, is a way of predicting performance.  If you could\nmeasure actual performance, you wouldn't need them.So why did they even evolve?  Why haven't we just been measuring\nactual performance?  Think about where credentialism first appeared:\nin selecting candidates for large organizations.  Individual\nperformance is hard to measure in large organizations, and the\nharder performance is to measure, the more important it is\nto predict it.  If an organization could immediately and cheaply\nmeasure the performance of recruits, they wouldn't need to examine\ntheir credentials.  They could take everyone and keep just the good\nones.Large organizations can't do this.  But a bunch of small organizations\nin a market can come close.  A market takes every organization and\nkeeps just the good ones.  As organizations get smaller, this\napproaches taking every person and keeping just the good ones.  So\nall other things being equal, a society consisting of more, smaller\norganizations will care less about credentials._____That's what's been happening in the US.  That's why those quotes\nfrom Korea sound so old fashioned.  They're talking about an economy\nlike America's a few decades ago, dominated by a few big companies.\nThe route for the ambitious in that sort of environment is to join\none and climb to the top.  Credentials matter a lot then.  In the\nculture of a large organization, an elite pedigree becomes a self-fulfilling\nprophecy.This doesn't work in small companies.  Even if your colleagues were\nimpressed by your credentials, they'd soon be parted from you if\nyour performance didn't match, because the company would go out of\nbusiness and the people would be dispersed.In a world of small companies, performance is all anyone cares\nabout.  People hiring for a startup don't care whether you've even\ngraduated from college, let alone which one.  All they care about\nis what you can do.  Which is in fact all that should matter, even\nin a large organization.  The reason credentials have such prestige\nis that for so long the large organizations\nin a society tended to be the most powerful.  But in the US at least\nthey don't have the monopoly on power they once did, precisely\nbecause they can't measure (and thus reward) individual performance.\nWhy spend twenty years climbing the corporate ladder when you can\nget rewarded directly by the market?I realize I see a more exaggerated version of the change than most\nother people.  As a partner at an early stage venture funding firm,\nI'm like a jumpmaster shoving people out of the old world of\ncredentials and into the new one of performance.  I'm an agent of\nthe change I'm seeing.  But I don't think I'm imagining it.  It was\nnot so easy 25 years ago for an ambitious person to choose to be\njudged directly by the market.  You had to go through bosses, and\nthey were influenced by where you'd been to college._____What made it possible for small organizations to succeed in America?\nI'm still not entirely sure.  Startups are certainly a large part\nof it.  Small organizations can develop new ideas faster than large\nones, and new ideas are increasingly valuable.But I don't think startups account for all the shift from credentials\nto measurement.  My friend Julian Weber told me that when he went\nto work for a New York law firm in the 1950s they paid associates\nfar less than firms do today.  Law firms then made no pretense of\npaying people according to the value of the work they'd done.  Pay\nwas based on seniority.  The younger employees were paying their\ndues.  They'd be rewarded later.The same principle prevailed at industrial companies.  When my\nfather was working at Westinghouse in the 1970s, he had people\nworking for him who made more than he did, because they'd been there\nlonger.Now companies increasingly have to pay employees market price for\nthe work they do.   One reason is that employees no longer trust\ncompanies to deliver\ndeferred rewards: why work to accumulate\ndeferred rewards at a company that might go bankrupt, or be taken\nover and have all its implicit obligations wiped out?  The other\nis that some companies broke ranks and started to pay young employees\nlarge amounts.  This was particularly true in consulting, law, and\nfinance, where it led to the phenomenon of yuppies.  The word is\nrarely used today because it's no longer surprising to see a 25\nyear old with money, but in 1985 the sight of a 25 year old\nprofessional able to afford a new BMW was so novel that it\ncalled forth a new word.The classic yuppie worked for a small organization.  He didn't work\nfor General Widget, but for the law firm that handled General\nWidget's acquisitions or the investment bank that floated their\nbond issues.Startups and yuppies entered the American conceptual vocabulary\nroughly simultaneously in the late 1970s and early 1980s.  I don't\nthink there was a causal connection.  Startups happened because\ntechnology started to change so fast that big companies could no\nlonger keep a lid on the smaller ones.  I don't think the rise of\nyuppies was inspired by it; it seems more as if there was a change\nin the social conventions (and perhaps the laws) governing the way\nbig companies worked.  But the two phenomena rapidly fused to produce\na principle that now seems obvious: paying energetic young people\nmarket rates, and getting correspondingly high performance from\nthem.At about the same time the US economy rocketed out of the doldrums\nthat had afflicted it for most of the 1970s.  Was there a connection?\nI don't know enough to say, but it felt like it at the time.  There\nwas a lot of energy released._____Countries worried about their competitiveness are right to be\nconcerned about the number of startups started within them.  But\nthey would do even better to examine the underlying principle.  Do\nthey let energetic young people get paid market rate for the work\nthey do?  The young are the test, because when people aren't rewarded\naccording to performance, they're invariably rewarded according to\nseniority instead.All it takes is a few beachheads in your economy that pay for\nperformance.  Measurement spreads like heat.  If one part of a\nsociety is better at measurement than others, it tends to push the\nothers to do better.  If people who are young but smart and driven\ncan make more by starting their own companies than by working for\nexisting ones, the existing companies are forced to pay more to\nkeep them.  So market rates gradually permeate every organization,\neven the government.  [3]The measurement of performance will tend to push even the organizations\nissuing credentials into line.  When we were kids I used to annoy\nmy sister by ordering her to do things I knew she was about to do\nanyway.  As credentials are superseded by performance, a similar\nrole is the best former gatekeepers can hope for.  Once credential\ngranting institutions are no longer in the self-fullfilling prophecy\nbusiness, they'll have to work harder to predict the future._____Credentials are a step beyond bribery and influence.  But they're\nnot the final step.  There's an even better way to block the\ntransmission of power between generations: to encourage the trend\ntoward an economy made of more, smaller units.  Then you can measure\nwhat credentials merely predict.No one likes the transmission of power between generations—not\nthe left or the right.  But the market forces favored by the right\nturn out to be a better way of preventing it than the credentials\nthe left are forced to fall back on.The era of credentials began to end when the power of large\norganizations peaked\nin the late twentieth century.  Now we seem\nto be entering a new era based on measurement.  The reason the new\nmodel has advanced so rapidly is that it works so much better.  It\nshows no sign of slowing.Notes[1] Miyazaki, Ichisada\n(Conrad Schirokauer trans.), China's Examination Hell: The Civil\nService Examinations of Imperial China, Yale University Press,\n1981.Scribes in ancient Egypt took exams, but they were more the type\nof proficiency test any apprentice might have to pass.[2] When I say the\nraison d'etre of prep schools is to get kids into better colleges,\nI mean this in the narrowest sense.  I'm not saying that's all prep\nschools do, just that if they had zero effect on college admissions\nthere would be far less demand for them.[3] Progressive tax\nrates will tend to damp this effect, however, by decreasing the\ndifference between good and bad measurers.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and David\nSloo for reading drafts of this."},{"title":"After the Ladder","text":"August 2005Thirty years ago, one was supposed to work one's way up the corporate\nladder.  That's less the rule now.  Our generation wants to get\npaid up front.  Instead of developing a product for some big company\nin the expectation of getting job security in return, we develop\nthe product ourselves, in a startup, and sell it to the big company.\nAt the very least we want options.Among other things, this shift has created the appearance of a rapid\nincrease in economic inequality.  But really the two cases are not\nas different as they look in economic statistics.Economic statistics are misleading because they ignore the value\nof safe jobs.  An easy job from which one can't be fired is worth\nmoney; exchanging the two is one of the commonest forms of\ncorruption.  A sinecure is, in effect, an annuity.  Except sinecures\ndon't appear in economic statistics.  If they did, it would be clear\nthat in practice socialist countries have nontrivial disparities\nof wealth, because they usually have a class of powerful bureaucrats\nwho are paid mostly by seniority and can never be fired.While not a sinecure, a position on the corporate ladder was genuinely\nvaluable, because big companies tried not to fire people, and\npromoted from within based largely on seniority.  A position on the\ncorporate ladder had a value analogous to the \"goodwill\" that is a\nvery real element in the valuation of companies.  It meant one could\nexpect future high paying jobs.One of main causes of the decay of the corporate ladder is the trend\nfor takeovers that began in the 1980s.  Why waste your time climbing\na ladder that might disappear before you reach the top?And, by no coincidence, the corporate ladder was one of the reasons\nthe early corporate raiders were so successful.  It's not only\neconomic statistics that ignore the value of safe jobs.  Corporate\nbalance sheets do too.  One reason it was profitable to carve up 1980s\ncompanies and sell them for parts was that they hadn't formally\nacknowledged their implicit debt to employees who had done good\nwork and expected to be rewarded with high-paying executive jobs\nwhen their time came.In the movie Wall Street, Gordon Gekko\nridicules a company overloaded with vice presidents.  But the company\nmay not be as corrupt as it seems; those VPs' cushy jobs were\nprobably payment for work done earlier.I like the new model better.  For one thing, it seems a bad plan\nto treat jobs as rewards.  Plenty of good engineers got made into\nbad managers that way.  And the old system meant people had to deal\nwith a lot more corporate politics, in order to protect the work\nthey'd invested in a position on the ladder.The big disadvantage of the new system is that it involves more risk.  If you develop ideas in a startup instead\nof within a big company, any number of random factors could sink\nyou before you can finish.  But maybe the older generation would\nlaugh at me for saying that the way we do things is riskier.  After\nall, projects within big companies were always getting cancelled\nas a result of arbitrary decisions from higher up.  My father's\nentire industry (breeder reactors) disappeared that way.For better or worse, the idea of the corporate ladder is probably\ngone for good.  The new model seems more liquid, and more efficient.\nBut it is less of a change, financially, than one might think.  Our\nfathers weren't that stupid."},{"title":"An Alternative Theory of Unions","text":"May 2007People who worry about the increasing gap between rich and poor\ngenerally look back on the mid twentieth century as a golden age.\nIn those days we had a large number of high-paying union manufacturing\njobs that boosted the median income.  I wouldn't quite call the\nhigh-paying union job a myth, but I think people who dwell on it\nare reading too much into it.Oddly enough, it was working with startups that made me realize\nwhere the high-paying union job came from.  In a rapidly growing\nmarket, you don't worry too much about efficiency.  It's more\nimportant to grow fast.  If there's some mundane problem getting\nin your way, and there's a simple solution that's somewhat expensive,\njust take it and get on with more important things.  EBay didn't\nwin by paying less for servers than their competitors.Difficult though it may be to imagine now, manufacturing was a\ngrowth industry in the mid twentieth century.  This was an era when\nsmall firms making everything from cars to candy were getting\nconsolidated into a new kind of corporation with national reach and\nhuge economies of scale.  You had to grow fast or die.  Workers\nwere for these companies what servers are for an Internet startup.\nA reliable supply was more important than low cost.If you looked in the head of a 1950s auto executive, the attitude\nmust have been: sure, give 'em whatever they ask for, so long as\nthe new model isn't delayed.In other words, those workers were not paid what their work was\nworth.  Circumstances being what they were, companies would have\nbeen stupid to insist on paying them so little.If you want a less controversial example of this phenomenon, ask\nanyone who worked as a consultant building web sites during the\nInternet Bubble.  In the late nineties you could get paid huge sums\nof money for building the most trivial things.  And yet does anyone\nwho was there have any expectation those days will ever return?  I\ndoubt it.  Surely everyone realizes that was just a temporary\naberration.The era of labor unions seems to have been the same kind of aberration,\njust spread\nover a longer period, and mixed together with a lot of ideology\nthat prevents people from viewing it with as cold an eye as they\nwould something like consulting during the Bubble.Basically, unions were just Razorfish.People who think the labor movement was the creation of heroic union\norganizers have a problem to explain: why are unions shrinking now?\nThe best they can do is fall back on the default explanation of\npeople living in fallen civilizations.  Our ancestors were giants.\nThe workers of the early twentieth century must have had a moral\ncourage that's lacking today.In fact there's a simpler explanation.  The early twentieth century\nwas just a fast-growing startup overpaying for infrastructure.  And\nwe in the present are not a fallen people, who have abandoned\nwhatever mysterious high-minded principles produced the high-paying\nunion job.  We simply live in a time when the fast-growing companies\noverspend on different things."},{"title":"An Interview by a Seventh Grader","text":"June 2010(A seventh grader sent me these interview questions for a school project.)1. What are some qualifications of a computer programmer?Programmers tell computers what to do—not in a human language\nlike English but in special unambiguous languages called programming\nlanguages.  Commands written in a programming language are called\ncode.  Programmers should be able to translate their ideas about\nwhat a program should do into code that's reliable, efficient, and\neasy to change later.  The best programmers are the ones who are\nnot only good at translating ideas into code, but who have the best\nideas.2. What is the best part of being a computer programmer?  The worst?\nThe most challenging?For me the best part is building things.  Although programs aren't\nphysical, when you write a good program you get the same feeling\nof achievement you'd get from making something like a piece of\npottery or a house (depending on how big the program is).For me the worst thing about programming is dealing with external\nconstraints.  You don't usually have complete freedom when writing\na program.  Usually your boss (or your customer) tells you what\nyour program has do to, and it has to cooperate with other programs\nto do it.  Often things you're told to do, and the programs your\nprogram has to cooperate with, are confusing or stupid.  So you\ndon't get to do things the way you'd like to.What's most challenging about being a programmer depends on how\ngood you are.  For bad programmers, like bad cooks, the mere mechanics\nof programming are challenging. Whereas good programmers, like good\ncooks, can make whatever they choose, so for them the big challenge\nis deciding what to make.3. What's the salary range in this career?The range is very wide, because some programmers start their own\ncompanies and if these companies succeed they can make a lot.  The\nlowest paid programmers seem to make around $35,000 a year.  The\nrichest programmers, like Larry Page and Sergey Brin, the founders\nof Google, become billionaires.4. What is a typical day in the life of a computer programmer?This varies so much that there's no one answer.  Programmers who\nwork for bureaucratic organizations like governments or big companies\nmay spend nearly all their time in meetings or responding to email,\nand hardly any time actually writing code.  Whereas programmers who\nwork for startup companies or on research projects spend many hours\na day programming.Interruptions are very bad for programming, so people who spend a\nlot of time programming often do it at times when they'll be left\nalone, like late at night or early in the morning.5. What is some advice you would give to young computer programmers?Programming is something you learn by doing.  So don't be passive.\nDon't wait for classes to teach you how to program.  The way you\nlearn is by starting projects of your own.(This is true for most fields, actually, not just programming.)6. Is it easy to find a job as a computer programmer?If you're good it's always easy to find programming jobs.  Even\nwhen the economy is bad there is a shortage of good programmers.7. What was your most exciting project?Probably the program I wrote in my last year of college that could\nunderstand some sentences in English.  It was not impressive by\npresent day standards, but it was more sophisticated than most of\nthe programs we were writing in our classes in those days.8. What skills do you think young programmers need for the job?Mostly they need the same skills programmers of any age need.  If\nthere is one mistake that young programmers tend to to make, it's\nthat they tend to over-engineer things.  They get carried away with\ntheir own cleverness and build things that are overcomplicated.  So\na truly precocious young programmer would be one who'd learned not\nto do that.9. What improvement does computer programming give for human life?Computers are so widespread now that there is practically no aspect\nof life that isn't affected by programming.10. What is the future direction of computer programming?Technological change is always hard to predict, but programming\nseems to be changing from a kind of work in which you build everything\nyourself to one in which you plug together programs written by other\npeople.  So it is becoming more important to know what other programs\nyou can use as building blocks and how to stick them together, and\nless important to know how to build basic \"plumbing\" yourself.11. Would life be a lot worse without computer programming?  How much?\nWhy?One way to answer that question is to look at what things were like\nbefore computers were widespread: in, say, 1950.  There were a lot\nof things you couldn't do then you can do now.  Some are obvious,\nlike make cell phone calls.  Others are more subtle: aircraft today\nare more efficient because the calculations for their designs are\ndone with computers instead of manually, and we have drugs today\nthat we couldn't have had in 1950 because programs were needed to\ndiscover them."},{"title":"Another SBL Story","text":"(I received this mail from a small ISP.\nThe sender asked me to omit his name for fear of retribution.)I manage a small ISP that for years utilized Spamhaus's SBL list.\nWe have been in the ISP business since 1995 and thanks to this we\nmanaged to buy our IP netblock when they could be purchased, not\nleased like now.We recently leased IPs off of our network to opt-in marketers.\nLater we found out these guys were some of the biggest spammers on\nthe planet.  (They were represented by a third party concealing\ntheir identity until the mailings started.)The IP addresses they were operating from were removed from our\nnetwork, swip'd to them and were routing though big name global\nnetwork providers.  As soon as we started receiving UCE complaints\nwe began recovering the IPs back to our network.  One of the clients\nmanaged to delay our attempts for a couple of months due to a poorly\nwritten lease arrangement and an old AUP policy.  We could stop\nspammers inside our network but not when the IPs were hosted on\nsomeone else's network.  At long last we did manage to get the\nlessee off the IP range and recover the IPs but the damage was done.Now we have been labeled by Spamhaus as a \"spam support service\"\nthough according to their own definitions this label does not apply.\nWe won't even talk about the incorrect, borderline slander that was\nposted by Spamhaus regarding our company in its SBL entry.  We have\nbeen blacklisted for what we have been led to believe is a six month\nperiod and are losing customers daily.Spamhaus Spam Support Service Definition:\nServices providing 'bullet-proof' hosting for spam service purposes,\nserving 'spamware' sites, or knowingly providing services for spam\nservice purposes.\nWe did not provide any hosting services, we served no sites at all\n(spamware or otherwise), and we did not \"knowingly\" provide service\nfor spam service purposes.In reality when we found these guys were providing spam services,\nwe alerted Spamhaus to the range it was coming from and reclaimed\nthe IPs as quickly as possible.  Barring any legal matters.  What\nwe got from Spamhaus in response to this was an upgraded blacklist\nentry that encompassed our entire netblock.  All 16k IPs, not just\nthe couple hundred the spam was coming from.  Their response, \"When\nan ISP contacts us about a spam source we just go ahead and blacklist\nall of the IPs the ISP owns/leases.\"According to their De-listing policy:\nIPs are removed\nimmediately from the SBL upon receipt of notification from the IP\nowner (Internet Service Provider) that the spamming activity has\nbeen terminated.\nRIGHT!Our ISP is celebrating 10 years in business serving our local market.\nWe have never allowed spam from our network and will not.  We have\nadopted Spamhaus's AUP in good faith as it covers any issues and\nISP could find itself dealing with.  We alerted Spamhaus to this\nand a few other things and basically what we got back from them was\nthis: we believe that for the right money the owner of the IPs would\nlease them out again, but if you keep yourself clean for 6 months\nwe will release the block on your IPs.Now it gets even better.  After reclaiming all of our IPs back from\ntheir swip'd locations we took steps to lease IPs from our upstream\nso that Spamhaus could continue to block our IPs and our legitimate\nuser mail could be delivered without blacklisting by Spamhaus.  This\nworked great for about 3 weeks.  Until we found that Spamhaus had\nblocked our upstream provider's IPs in relation to our blocked IPs.\nOnce again, no spam has ever come from our servers, save occasional\nusers with Virus/Trojan infected machines.  So why did Spamhaus\nblock these IPs?  We don't know.So we made arrangements to send our mail to a relay server, a closed\nrelay server that only allows mail for relay from our mail server.\nNow the mail server that was allowing us to relay through them is\nblocked also.So we continue to lose clients who have been with us for 10 years\nbecause one man has decided, in his opinion, that we are a spam\nsupport service."},{"title":"Apple's Mistake","text":"November 2009I don't think Apple realizes how badly the App Store approval process\nis broken.  Or rather, I don't think they realize how much it matters\nthat it's broken.The way Apple runs the App Store has harmed their reputation with\nprogrammers more than anything else they've ever done.\nTheir reputation with programmers used to be great.\nIt used to be the most common complaint you heard\nabout Apple was that their fans admired them too uncritically.\nThe App Store has changed that.  Now a lot of programmers\nhave started to see Apple as evil.How much of the goodwill Apple once had with programmers have they\nlost over the App Store?  A third?  Half?  And that's just so far.\nThe App Store is an ongoing karma leak.* * *How did Apple get into this mess?  Their fundamental problem is\nthat they don't understand software.They treat iPhone apps the way they treat the music they sell through\niTunes.  Apple is the channel; they own the user; if you want to\nreach users, you do it on their terms. The record labels agreed,\nreluctantly.  But this model doesn't work for software.  It doesn't\nwork for an intermediary to own the user.  The software business\nlearned that in the early 1980s, when companies like VisiCorp showed\nthat although the words \"software\" and \"publisher\" fit together,\nthe underlying concepts don't.  Software isn't like music or books.\nIt's too complicated for a third party to act as an intermediary\nbetween developer and user.   And yet that's what Apple is trying\nto be with the App Store: a software publisher.  And a particularly\noverreaching one at that, with fussy tastes and a rigidly enforced\nhouse style.If software publishing didn't work in 1980, it works even less now\nthat software development has evolved from a small number of big\nreleases to a constant stream of small ones.  But Apple doesn't\nunderstand that either.  Their model of product development derives\nfrom hardware.  They work on something till they think it's finished,\nthen they release it.  You have to do that with hardware, but because\nsoftware is so easy to change, its design can benefit from evolution.\nThe standard way to develop applications now is to launch fast and\niterate.  Which means it's a disaster to have long, random delays\neach time you release a new version.Apparently Apple's attitude is that developers should be more careful\nwhen they submit a new version to the App Store.  They would say\nthat.  But powerful as they are, they're not powerful enough to\nturn back the evolution of technology.  Programmers don't use\nlaunch-fast-and-iterate out of laziness.  They use it because it\nyields the best results.  By obstructing that process, Apple is\nmaking them do bad work, and programmers hate that as much as Apple\nwould.How would Apple like it if when they discovered a serious bug in\nOS X, instead of releasing a software update immediately, they had\nto submit their code to an intermediary who sat on it for a month\nand then rejected it because it contained an icon they didn't like?By breaking software development, Apple gets the opposite of what\nthey intended: the version of an app currently available in the App\nStore tends to be an old and buggy one.  One developer told me:\nAs a result of their process, the App Store is full of half-baked\napplications. I make a new version almost every day that I release\nto beta users. The version on the App Store feels old and crappy.\nI'm sure that a lot of developers feel this way: One emotion is\n\"I'm not really proud about what's in the App Store\", and it's\ncombined with the emotion \"Really, it's Apple's fault.\"\nAnother wrote:\nI believe that they think their approval process helps users by\nensuring quality.  In reality, bugs like ours get through all the\ntime and then it can take 4-8 weeks to get that bug fix approved,\nleaving users to think that iPhone apps sometimes just don't work.\nWorse for Apple, these apps work just fine on other platforms\nthat have immediate approval processes.\nActually I suppose Apple has a third misconception: that all the\ncomplaints about App Store approvals are not a serious problem.\nThey must hear developers complaining.  But partners and suppliers\nare always complaining.  It would be a bad sign if they weren't;\nit would mean you were being too easy on them.  Meanwhile the iPhone\nis selling better than ever.  So why do they need to fix anything?They get away with maltreating developers, in the short term, because\nthey make such great hardware.  I just bought a new 27\" iMac a\ncouple days ago.  It's fabulous.  The screen's too shiny, and the\ndisk is surprisingly loud, but it's so beautiful that you can't\nmake yourself care.So I bought it, but I bought it, for the first time, with misgivings.\nI felt the way I'd feel buying something made in a country with a\nbad human rights record.  That was new.  In the past when I bought\nthings from Apple it was an unalloyed pleasure.  Oh boy!  They make\nsuch great stuff.  This time it felt like a Faustian bargain.  They\nmake such great stuff, but they're such assholes.  Do I really want\nto support this company?* * *Should Apple care what people like me think?  What difference does\nit make if they alienate a small minority of their users?There are a couple reasons they should care.  One is that these\nusers are the people they want as employees.  If your company seems\nevil, the best programmers won't work for you.  That hurt Microsoft\na lot starting in the 90s.  Programmers started to feel sheepish\nabout working there.  It seemed like selling out.  When people from\nMicrosoft were talking to other programmers and they mentioned where\nthey worked, there were a lot of self-deprecating jokes about having\ngone over to the dark side.  But the real problem for Microsoft\nwasn't the embarrassment of the people they hired.  It was the\npeople they never got.  And you know who got them?  Google and\nApple.  If Microsoft was the Empire, they were the Rebel Alliance.\nAnd it's largely because they got more of the best people that\nGoogle and Apple are doing so much better than Microsoft today.Why are programmers so fussy about their employers' morals?  Partly\nbecause they can afford to be.  The best programmers can work\nwherever they want.  They don't have to work for a company they\nhave qualms about.But the other reason programmers are fussy, I think, is that evil\nbegets stupidity.  An organization that wins by exercising power\nstarts to lose the ability to win by doing better work.  And it's\nnot fun for a smart person to work in a place where the best ideas\naren't the ones that win.  I think the reason Google embraced \"Don't\nbe evil\" so eagerly was not so much to impress the outside world\nas to inoculate themselves against arrogance.\n[1]That has worked for Google so far.  They've become more\nbureaucratic, but otherwise they seem to have held true to their\noriginal principles. With Apple that seems less the case.  When you\nlook at the famous\n1984 ad\nnow, it's easier to imagine Apple as the\ndictator on the screen than the woman with the hammer.\n[2]\nIn fact, if you read the dictator's speech it sounds uncannily like a\nprophecy of the App Store.\nWe have triumphed over the unprincipled dissemination of facts.We have created, for the first time in all history, a garden of\npure ideology, where each worker may bloom secure from the pests\nof contradictory and confusing truths.\nThe other reason Apple should care what programmers think of them\nis that when you sell a platform, developers make or break you.  If\nanyone should know this, Apple should.  VisiCalc made the Apple II.And programmers build applications for the platforms they use.  Most\napplications—most startups, probably—grow out of personal projects.\nApple itself did.  Apple made microcomputers because that's what\nSteve Wozniak wanted for himself.  He couldn't have afforded a\nminicomputer.\n[3]\nMicrosoft likewise started out making interpreters\nfor little microcomputers because\nBill Gates and Paul Allen were interested in using them.  It's a\nrare startup that doesn't build something the founders use.The main reason there are so many iPhone apps is that so many programmers\nhave iPhones.  They may know, because they read it in an article,\nthat Blackberry has such and such market share.  But in practice\nit's as if RIM didn't exist. If they're going to build something,\nthey want to be able to use it themselves, and that means building\nan iPhone app.So programmers continue to develop iPhone apps, even though Apple\ncontinues to maltreat them.  They're like someone stuck in an abusive\nrelationship.  They're so attracted to the iPhone that they can't\nleave.  But they're looking for a way out.  One wrote:\nWhile I did enjoy developing for the iPhone, the control they\nplace on the App Store does not give me the drive to develop\napplications as I would like. In fact I don't intend to make any\nmore iPhone applications unless absolutely necessary.\n[4]\nCan anything break this cycle?  No device I've seen so far could.\nPalm and RIM haven't a hope.  The only credible contender is Android.\nBut Android is an orphan; Google doesn't really care about it, not\nthe way Apple cares about the iPhone.  Apple cares about the iPhone\nthe way Google cares about search.* * *Is the future of handheld devices one locked down by Apple?  It's\na worrying prospect.  It would be a bummer to have another grim\nmonoculture like we had in the 1990s.  In 1995, writing software\nfor end users was effectively identical with writing Windows\napplications.  Our horror at that prospect was the single biggest\nthing that drove us to start building web apps.At least we know now what it would take to break Apple's lock.\nYou'd have to get iPhones out of programmers' hands.  If programmers\nused some other device for mobile web access, they'd start to develop\napps for that instead.How could you make a device programmers liked better than the iPhone?\nIt's unlikely you could make something better designed.  Apple\nleaves no room there.  So this alternative device probably couldn't\nwin on general appeal.  It would have to win by virtue of some\nappeal it had to programmers specifically.One way to appeal to programmers is with software.  If you\ncould think of an application programmers had to have, but that\nwould be impossible in the circumscribed world of the iPhone,\nyou could presumably get them to switch.That would definitely happen if programmers started to use handhelds\nas development machines—if handhelds displaced laptops the\nway laptops displaced desktops.  You need more control of a development\nmachine than Apple will let you have over an iPhone.Could anyone make a device that you'd carry around in your pocket\nlike a phone, and yet would also work as a development machine?\nIt's hard to imagine what it would look like.  But I've learned\nnever to say never about technology.  A phone-sized device that\nwould work as a development machine is no more miraculous by present\nstandards than the iPhone itself would have seemed by the standards\nof 1995.My current development machine is a MacBook Air, which I use with\nan external monitor and keyboard in my office, and by itself when\ntraveling.  If there was a version half the size I'd prefer it.\nThat still wouldn't be small enough to carry around everywhere like\na phone, but we're within a factor of 4 or so.  Surely that gap is\nbridgeable.  In fact, let's make it an\nRFS. Wanted:\nWoman with hammer.Notes[1]\nWhen Google adopted \"Don't be evil,\" they were still so small\nthat no one would have expected them to be, yet.[2]\nThe dictator in the 1984 ad isn't Microsoft, incidentally;\nit's IBM.  IBM seemed a lot more frightening in those days, but\nthey were friendlier to developers than Apple is now.[3]\nHe couldn't even afford a monitor.  That's why the Apple\nI used a TV as a monitor.[4]\nSeveral people I talked to mentioned how much they liked the\niPhone SDK.  The problem is not Apple's products but their policies.\nFortunately policies are software; Apple can change them instantly\nif they want to.  Handy that, isn't it?Thanks to Sam Altman, Trevor Blackwell, Ross Boucher,\nJames Bracy, Gabor Cselle,\nPatrick Collison, Jason Freedman, John Gruber, Joe Hewitt, Jessica Livingston,\nRobert Morris, Teng Siong Ong, Nikhil Pandit, Savraj Singh, and Jared Tame for reading drafts of this."},{"title":"Arc FAQ","text":"Where do I get it?Arclanguage.org.Why do you need to design a new language?It would be surprising if we didn't still need to design more languages.\nThat would amount to saying that programming language design is now\na solved problem, and that the final, perfect language has now been\ndesigned. It does not seem that way to me-- not by a long shot.\nThe number of still open questions makes my head spin.Why is it called Arc?The name is a reference to bottom-up programming.\nThis means customizing the language to suit your application,\nyielding a program shaped like an arch, rather than a lintel.\nSince brevity is another aim, we lopped off the h.Why did you keep car and cdr?Because we couldn't think of any better alternatives.\nIt would have been misleading to use first and rest or head and\ntail, because conses are fundamentally pairs; lists are one thing\nyou can build with them, but not the only thing.There's no conventional name in English for the first and second\nhalves of a pair.  If you have to make up names, car and cdr\nare pretty good choices, because they're short and the same length\nand naturally composable (e.g. cadr).Is Arc object-oriented?The phrase \"object-oriented\" means a lot of things.  Half\nare obvious, and the other half are mistakes.We believe Lisp should let you define new types that\nare treated just like the built-in types-- just as it lets you define\nnew functions that are treated just like the built-in functions.\nWe don't believe that every program should\nconsist of defining new types.\nWhy not use some other delimiter than parentheses?We tried various\npossibilities.  Square and curly brackets lose because they are less directional\nthan parens (left and right differ in fewer pixels);  < and > lose because\nthey don't wrap around enough to enclose expressions longer than tokens.Won't allowing <new possibility> confuse people reading code?E.g.  (a i) could be a function call or an array reference.If you make a language terser, you necessarily have\nmore possibilities for what an expression\nmight mean.  For example, because functions are a\ndata type in Lisp, someone new to Lisp might complain\nthat he can't tell whether a parameter x is a function\nor an integer.  This is an inevitable consequence of\nmaking a language more powerful.  It is up to the\nprogrammer (as it always is) to avoid using the\nlanguage in a way that confuses readers.Why not build Arc on top of Java/Parrot/.NET?We're trying to make something for the long\nterm in Arc, something that will be useful to people in, say, 100 years.  (If that\nsounds crazy, remember that we're already up to\n50.)\nSo (a) we're not in a hurry to save effort; when\nyou're trying to make something that will last 100 years,\nthere is plenty of time to work on it, and (b) we don't\nwant to adhere to anything that isn't timeless, lest the\nwhole project curl up like a bimetallic strip."},{"title":"Arc Lessons","text":"We want Arc to be good for writing programs, and\none way to ensure that is to start writing programs while the language is\nstill malleable.  In the process we've learned a few lessons.Shorter names are a big win.Shorter operator names sounds like a pretty superficial feature.\nMaybe so, but it has a noticeable effect on code.  Shorter names mean\nyou don't have to break lines so often, which in turn means that you\ncan see more of your program at once.  It feels significantly better\nto program in Arc.The biggest win is in the names of operators that tend to be outermost\nin nested expressions, like do (progn),  map (mapcar), and fn (lambda).\nThose are the ones that send your code shooting toward the right\nmargin.It's worth spending time to come up with good, short names\nfor commonly used operators.\nI have a couple principles.  One is that\nyou only need to remember what a name means, not guess what\nit means on first sight.  And the more often something is\nused, the less mnemonic it needs to be.  Examples: +, -, *,\n/, which are truly arbitrary.Replacing setf with = has turned out to make code significantly\neasier to read, not just because = is shorter, but also because\nthe odd shape of = makes it clear that an assignment is no ordinary\nfunction call.Using + to concatenate sequences is a lose.This kind of overloading is just a pun.  I found that it actually made\nprograms harder to read, not easier, because I kept thinking I was\nlooking at math code when I wasn't.As several people have pointed out, concatenation isn't addition.\nIt's not commutative, for example.  Ok, you were right; we're tossing it.In general, overloading is complicated question.My guess is that it's no coincidence that people\nalways use a few operators in examples of overloading,\njust as it's no coincidence they always use\nfibonacci in examples of the dangers of naive recursive\nalgorithms.  It may be there are only a few operators\nyou tend to want to overload, and that that's because\nthere is something special about them, not because\noverloading in general is the right idea.I consider this not merely an open question, but one that\nprobably hasn't even been properly formulated yet.  My\nintuition is that we'd be missing the real question,\nwhatever it is, if we considered it a matter of\n\"supports overloading\" being an item on a checklist.Perhaps it should be subsumed in the more general\nquestion, how should you define a new type?Implicit local variables conflict with macros.In previous Lisps if you wanted to create\na local variable you had to do it explicitly with a let.  In Arc we were\nplanning to let users declare local variables implicitly, just by assigning\nvalues to them.   This turns out not to work, and the problem comes from\nan unforeseen quarter: macros.If you're going to declare local variables implicitly, you have to decide\nwhat the scope of the new variable will be.  We decided we would\nmake new variables local to blocks: a local variable created implicitly\nby assignment would have a scope that extended to the nearest\nenclosing do (Arc's progn).Technically it can be made to work.  We wrote a hideously complicated\ninterpreter that allowed local variables to be declared this way.  The\nugliness of this code worried me: ugly things are generally a\nbad idea.  But we tried to keep this feature in the hope it would make\nprograms shorter.What convinced us to toss it was not a technical problem but a social\none.  In a language with implicit local variables and macros, you're\nalways tripping over unexpected lexical contours.  You don't want\nto create new lexical contours without announcing it.  But a lot of\nmacros that don't look like blocks in the call expand into blocks.\nSo we provided a second block operator, called justdo, which was\nlike do but didn't create a new lexical contour (i.e. it is Common Lisp\nprogn), and this is what you were supposed to use in macroexpansions.The trouble was, I kept forgetting and using do instead.  And I was\nthereby writing utilities with the worst sort of bug: the kind that might not\nshow up for years, and only then in someone else's code.It seemed to us a bad idea to have a feature so fragile\nthat its own implementors couldn't use it properly.  So no more implicit\nlocal variables.This problem is not limited to Lisp.  Macros and implicit local variables\njust don't seem to work well together.  Meaning that any\nlanguage that already has implicit local variables will run into trouble\nif they try to add macros.Assoc-lists turn out to be useful.Arc has a kind of data structure called a db.  We don't specify anything about\nits implementation; but you can think of it as a hash-table.  We expected dbs\nto replace most assoc-lists.  They do replace some, but assoc-lists\nturn out to have a property that is very useful in recursive programs: you can\ncons stuff onto them nondestructively.  We end up using assoc-lists a lot."},{"title":"Arc at 3 Weeks","text":"November 2001\n1.  Preliminaries:- Arc isn't finished.- Suggestions are invited.- Don't be too shocked (you may get used to it).\nArc was the youngest language presented at LL1.  It's about\nthree weeks old.  Most languages probably look pretty bad\nat that age, but I wanted to show Arc to people early on\nto get their opinions.A few of the ideas in Arc will seem\nshocking, especially to compiler writers.  So bear with us.\nSome of these ideas will seem less shocking with time.\nOthers may actually suck, and we'll redo those.\n2. Lisp- A language with dialects.- No new Lisp since mid 80s (and not new then).- Languages different now:\nUnix won,\nbig libraries,\nactive development.- No onions in the varnish.\nLisp is an unusual language because it has dialects.  Lisp\ndepends on a small, definite, core of operators, and any language\nthat has these operators is a dialect of Lisp-- not just\nas a social custom, but in the formal sense that if you\nhave the core operators you can define all the rest.  If\nyou design a language that has car, cdr, cons, quote, eq,\ncond, and a notation for functions made of conses, then you've\ndesigned a dialect of Lisp, even if you didn't mean to.It's about time for a new dialect of Lisp.  The two leading\ndialects, Common Lisp and Scheme, have not been substantially\nchanged since the 1980s. What a language is has changed\nsince then.  In 1985, a programming language was just a spec.\nNow, thanks to Perl, it means not just (and maybe not even) a spec,\nbut also a good free implementation, huge libraries, and\nconstant updates.Another thing has changed since 1985: Unix won.  So there is a lot\nmore agreement now about what you can expect from the OS.\nCommon Lisp and Scheme date from a time when languages had to\nbe OS-neutral.  A programming language couldn't have a concept\nof a socket, for example; what if the underlying OS didn't\nhave sockets?  That has changed.  Now a\nlanguage that won't let you open a socket seems almost\nperversely inconvenient.If you just made a Lisp that could talk to the OS and\nhad powerful string libraries, I think it would more than\nhold its own.\nWe're hoping to do more than that though.  The aim with Arc\nis not to update Common Lisp or Scheme.\nIn Arc we're going to try to go back to the origins of Lisp,\nin McCarthy's 1960 paper, and rebuild the language from\nthe bottom.In The Periodic Table, Primo Levi tells a story that\nhappened when he was working in a varnish factory.  He\nwas a chemist, and he was fascinated by the fact that\nthe varnish recipe included\na raw onion.  What could it be for?  No one knew; it was just\npart of the recipe.  So he investigated, and eventually\ndiscovered that they had started throwing the onion in years\nago to test the temperature of the varnish: if it was\nhot enough, the onion would fry.We're going to try not to include any onions in Arc.  Everything\nis open to question.  For example, in Arc, lambda is called fn.\nThis idea appalled me at first, but it seemed\nlike fn would be shorter and at least as expressive.  What if I\nwas just used to lambda?  So, with a queasy sense of duty,\nI decided to try it.  And after a few\ndays I actually liked fn better.  Now it seems clear to me\nthat lambda is an onion: Alonzo Church himself wouldn't have\nused it if he had to write out the word lambda each time.\n3. A Language for Good Programmers- Target user: opposite of Java.- Programmable programming language.- By default, allow.- The language I wish someone would make for me.- Brevity (what you like about abstraction)\nJava was, as\nGosling says in the first Java white paper, designed for\naverage programmers.\nIt's a perfectly legitimate goal to design a language for\naverage programmers.  (Or for that matter for small children,\nlike Logo.)  But it is also a legitimate, and very different,\ngoal to design a language for good programmers.Languages designed for average programmers have to put safety first.\nExpert programmers, on the other hand, care only about power,\nand are going to be annoyed with any language that gets in their\nway in the name of safety.  You see this difference\nin any tool, from cars to dishwashers.I don't know if anyone has consciously designed a language\nfor good programmers before.  There have been several languages\nthat were in effect designed for good programmers, because\ngood programmers designed them for their own use.  C, Lisp, and\nSmalltalk all came about this way.In some ways it makes the problem easier when you can assume the\nuser is a good programmer.  Language designers often find\nthemselves worrying about the mess users might make if they\nwere allowed to do such-and-such.  Once you assume the user\nis a good programmer, you automatically have the answer to\nany such question: let the user do whatever he wants.Lisp has always been way down that end of the continuum.\nJohn Foderaro called\nit \"the programmable programming language\",\nbecause there is so much the programmer can change.  Arc\naims to maximize this aspect of Lisp.  Instead of assuming\nthat we know what's good for the programmer to be allowed to\nget his hands on, we assume that the programmer will want to\ndo things we never even imagined, and so will need to be able to\nget his hands on everything.Another thing good programmers like is brevity, and that is\nArc's other main goal.  You often hear that programming\nlanguages are good because they provide abstraction.\nI think what we really like is\nnot abstraction per se but brevity.  A way of expressing\nprograms that was more abstract, but made your programs\nlonger, would not be very enticing.  (This is not just a\nhypothetical example.  It happens in Prolog.)By brevity I don't mean that programs should require\nfewer characters. That counts for something, but it is\nmore important to require fewer tokens.Perl is an inspiring example of brevity.  Larry Wall\nbroke all the rules, and in the process discovered some\ngood ideas.  Perl may be a kludge, but it makes your programs\nshort, and you have to respect that.In Arc we\nhope to make programs as short or shorter, but at the\nsame time to build the language up in a transparent way\nfrom clearly understood foundations.\nWe're not doing this (just) out of fastidiousness.  You have\nto build the language up transparently if you want\nusers to be able to customize it.  The chaotic semantics\nof Perl would make it very hard to add macros.\n4.  Other Principles- Do what programmers actually (secretly) want.- How code looks matters: short names, no swearing- Polymorphism: (+ \"foo\" \"bar\") -> \"foobar\"- Specially suited for Web apps.- Perl lesson: pronouns.\nWe have a couple other design goals for Arc.  We try to\nkeep in mind that languages are for programmers, and so\nshould do what programmers want.  What programmers actually\nwant may not be the same thing as what language designers\nconsider to be good design.  In such cases the language\ndesigners should toss their principles and listen to\nthe programmers.You don't want to be like a modernist architect who\ndesigns a chair that is all right angles to conform to\nsome preconceived idea of good design.  All you're doing\nthen is solving the wrong problem.  Chairs (except for\na few that are explicitly designed as sculpture) are\nfor people to sit in.I was asking a friend of mine, who is just about the best\nprogrammer you could hope to meet, about creating new\nlocal variables.  With some hesitation he admitted that\nhe disliked the traditional Lisp let, because it\nintroduced a new level of indentation as well.  He was\nhesitant because he knew, in principle,\nthat let was the \"right\" thing.  At this point, you have\nto ask, \"right for who?\" because I don't think there are\nany programmers substantially smarter than this guy.\nIf he wants to do something a certain way, that's the\nbest test you'll get of what is good design-- better,\ncertainly, than any abstract principle.Another thing programmers are reluctant to admit, but\nwhich almost all feel fairly strongly, is that it matters\nhow code looks.  Well, it does matter, a lot.  We are\ngoing to try hard not only to make Arc beautiful, but to\nlet you change the way the language looks if your idea\nof beauty is different.Software designers usually fall into either the short-name\nschool or the long-name school.  Unix and C favor short\nnames.  Common Lisp and Smalltalk are in the opposite camp.\nThe argument for long names is that they are more descriptive,\nand so make it easier for programmers, especially beginners,\nto remember what the underlying operators do.  The argument\nagainst long names is that they clutter up your program.\nHere again we are saved by our axiom that the user is a\ngood programmer.  We assume the user doesn't need operators\nto be called multiple-value-bind or invoke-restart-interactively\nto remember what they do.On the other hand, we're also going to try\nnot to make the language look like a cartoon\ncharacter swearing.  Have you ever noticed that when you\nfill out some kind of Web form you tend to use all lowercase?\nOrdinary lowercase letters are less work to type than\ncharacters like #&%$.  (Dan Giffin recently observed that\nif you measure Perl programs by the number of keys you\nhave to press, they don't seem so short.)  And\nlowercase letters are easier to read as well.\nYou have to hit a kind of mental shift key to read\nsymbols.  As far as we can we're going to make Arc a\nsmoothly lowercase language.Another thing many good programmers have in common is\nincipient carpal tunnel syndrome, so a language that's\neasy to type should be a win for them.Arc is quite polymorphic.  The + function both adds numbers\nand concatentates strings.  Having a separate operator for\neach is equivalent to having one operator, plus a\ntype declaration.  Having a single operator for both is\nequivalent to letting the programmer omit the declaration.Every language should be designed together with a big\napplication written in it, so the designers can see whether\nthe language works.  C, for example, was sharpened on\nthe systems programming projects that culminated in Unix.\nWe're going to use Arc to write a\nplatform for Web-based applications.  The two will\nbe tightly integrated, like C and Unix.  We hope to make\nArc the ideal language for writing Web-based apps--\nthe language we wish we'd had when we were\nwriting Viaweb.  This means that\nArc will have to be good at manipulating strings, which\nhas not in the past been a big concern for Lisp.One of the ways Perl makes programs shorter is to use\na lot of pronouns.  Lisp programmers have always done this\nto some extent with macros like aif, but it has generally been\nconsidered a slightly dubious trick, and has not as far\nas I know made it into any of the major Lisp dialects.\nIn Arc we use a lot of pronouns.  They make programs shorter,\nand having them gives more control to the programmer.\n(If a language lets things be implicit, the programmer\nalways has the option of being explicit, but if the\nlanguages requires everything to be explicit, the\nprogrammer can't make things implicit.)\n5. Syntax- CL/Scheme: s-expressions only.\ndisadvantage: long-winded\n- Dylan/Python: s-expressions hidden underneath.\ndisadvantage: macros unnatural\n- Arc: syntax as abbreviation.\ndisadvantage: no syntax yet\nArc is going to have syntax.  The Lisp world has agonized\nabout this question for a long time.  Since the beginning\nin fact, as several people pointed out at LL1.  McCarthy\nintended the original Lisp to have syntax, but\nprogrammers preferred using raw s-expressions, so no\none ever got around to implementing it.The argument for syntax has usually been that it would\nmake Lisp more accessible to a \"mainstream\" audience.\nThe designers of Dylan, which was intended to be Lisp for the\nmasses, dutifully stuck a syntax onto the later versions.  I\ndidn't get the impression that they, personally, preferred\nwriting programs in the new syntax.  That is dangerous territory.By deciding to make Arc a language for good programmers,\nwe get an answer to that side of the question at least.\nWe don't have to dumb down the language to make it\naccessible to anyone.\nHowever, there is another advantage of syntax: it can make\nprograms shorter.  And that is a genuine win.So the answer (or an answer), I think, to the long\npondered question of syntax for Lisp is: yes, have syntax,\nbut only as abbreviation.  Arc will have syntax, but it\nwill translate in a clearly defined (and in fact, redefinable)\nway into underlying s-expressions.  Nearly all the syntax will\nbe optional, and moreover optional at the level of\nindividual operators.As much as we can, we will make whatever we use to define\nsyntax accessible to the programmer, so that you can\ncustomize the syntax however you like.  Lisp is widely\nconsidered to be the best substrate for domain-specific\nlittle languages, and programmable syntax should help make it even better.The disadvantage of this approach is that we have no examples\nof syntax to show anyone yet.  We have some ideas about it,\nbut we are still working on the underlying s-expression\nlanguage.  Some things are fairly predictable, like\ninfix math.  But we want to get the most bang for the buck\nfor desirable characters like [ and ], so we will probably\nwait to see what the most common idioms are before we\ndecide what to abbreviate.Here are a couple ideas:x.y and x:y for\n(x y) and (x 'y) respectively.[+ _ 1] for (fn (x) (+ x 1))We also plan to let programmers omit\nparentheses where no ambiguity would result, and show\nstructure by indentation instead of parentheses.  I find\nthat I spontaneously do both these things when writing\nLisp by hand on whiteboards or the backs of envelopes.\n6. Arc Core- eval, car, cdr, cons, quote- cond split into cond + do (progn)\nCL:  (cond ((a x) (princ \"!\") (b x))\n((c x) (d x))\n(t (e x)))\nArc: (cond (a x) (do (pr \"!\") (b x))\n(c x) (d x)\n(e x))\n- Usually use  if, which binds it: (if (a x) (car it))\nThe core of Arc is much the same as the core of\nMcCarthy's original 1960 Lisp.  The operators eval,\ncar, cdr, cons, and quote work the same when applied\nto symbols and lists (the only data types in the 1960 paper),\nexcept that car and cdr generate errors when applied to nil.The one operator we changed is cond.  McCarthy,\nwho wanted to keep his axioms to a minimum, buried\nprogn within cond.  That worked for his examples, but\nfor programming in general you soon find you need a\nprogn separate from the implicit progn of cond.Having an implicit progn in cond means every cond\nclause has to have an extra pair of parentheses.\nMcCarthy said later that he thought he had gotten cond wrong,\nthat it used too many parentheses, and this may be\nwhat he meant.  Arc's cond doesn't have an implicit\nprogn, and so you don't need the parentheses around\neach clause.  We also omitted the t in the default\nclause, which seemed to be an onion.  The example\nin the slide shows the same code in Common Lisp and\nin Arc.  (Arc's do is Common Lisp progn, and pr is\nCommon Lisp princ.)In Arc, cond is a low-level operator, used mainly in\nmacroexpansions.  Most of the time programmers use\nif, which is exactly the same, except that within a\nsuccessful then-expression, the variable it will be\nbound to the result of the test-expression.\n7. Assignment (Scope)- Lexical scope, single namespace.- = is setf (no set or setq).- Can create local vars by assignment.\n> (do (= x 5)\n(cons x 'a))\n(5 . A)\n\n- Any sequence of code is a block.- Easy to write a non-scope block.\nArc has lexical scope and a single namespace like Scheme.\nA variable whose value is a function is no different from any\nother.  The evaluation rule is simply to evaluate the whole\nexpression from left to right, and then apply the value of\nthe first element to the values of the rest.The assignment operator is =.  I was dubious about this,\nbut decided to try it and see if I got used to it.  It\nturns out to work well, even in prefix.  Stripes stand\nout, which is why they get used on\nwarning signs and poisonous animals.Here is a big difference between Arc and previous Lisps:\nlocal variables can be created implicitly by assigning\nthem a value.  If you do an assignment to a variable that\ndoesn't already exist, you thereby create a lexical\nvariable that lasts for the rest of the block.  (Yes,\nwe know this will make the code hard to compile, but\nwe're going to try.)  A block is a do, or any implicit\ndo in one of Arc's predefined operators.It's easy to write a progn-like operator that doesn't\nhave an effect on scopes: just write a function that takes\nany number of arguments and returns the last.  Arc has\na function, currently called justdo, that does this, but it is\nintended for use only in macros where you have to\nevaluate expressions sequentially without having them\nunexpectedly be in a new lexical contour.\n8. Functions and Macros- lambda is fn: (fn (x) (cons x 'a))- rfn (a macro) instead of labels.\n(rfn len (x)\n(if (no x)\n0\n(+ 1 (len (cdr x)))))\n- Macros separate 1st class objs.\n(macro (test . body)\n`(if ,test (do ,.body)))\n- To get local macros, just bind.\nLike any Lisp, Arc has first-class functions.  There is a\nfn operator, like Scheme's lambda, that returns a new\nfunction.  Arc has no labels or letrec.  For defining\nrecursive functions there is a macro called rfn, which\nis like fn except that it takes an additional\nfirst argument to use as its own name.\nThe example above is a recursive function that finds\nthe length of a list.Using rfn instead of labels makes it more convenient to\ndefine individual recursive functions and less convenient\nto define several mutually-recursive functions, but the\nformer is by far the more common case.(The name rfn was suggested by Dorai Sitaram.)Arc macros are also first class objects.\nThey are, as in Common Lisp, simply functions that return\nexpressions.  Arc doesn't have the hygienic macros of\nScheme or Dylan.  Or rather it doesn't require you to use\nthem; something like that may be supplied as a library,\nbut programmers can also have access to raw macroexpansion.This is another case where our axiom that the user is\na good programmer simplifies\nmatters.  As an expert, the user will not be\nthrown by the prospect of variable capture (indeed will\noften do it deliberately), but will definitely not like\na macro mechanism that takes away some of the power of\ndefmacro.Because macros are first-class objects, there is no need\nfor Common Lisp's macrolet.  You can give a macro local\nscope with let, just as you would give a value to any\nother variable.Making macros first-class objects may wreak havoc with\ncompilation.  We're hoping that between inference and\ndeclarations that it will be possible to get fast code when\nit's needed.Macros are going to be a focus in Arc, because\nwe think they're one of the\nbiggest wins in Lisp.  As well as traditional expression-based\nmacros, Arc may have macros driven by code-walkers\nlooking at multiple expressions.  This may interact with Arc's\nprogrammable syntax in useful ways.\n9. Binding- with like CL let:\n> (with (x 'a y 'b)\n(list x y))\n(A B)\n- let for single variable case:\n> (let x 'a\n(cons x 5))\n(A . 5)\n- both macros on function call\nArc has a macro for introducing new variable bindings\ncalled with.  It's like the let of Common Lisp and\nScheme, except that it uses fewer parentheses.In my Scheme and Common Lisp code, most lets introduce\none variable.  So in Arc we use the name let for this\nmore common case.Both with and let are the obvious macros on function\napplication.  For example,  (let x 3 (foo x)) expands into\n((fn (x) (foo x)) 3).Whenever possible, operators like these that can be\nimplemented in Arc will be officially defined by a\npiece of Arc source code.  They need not be implemented\nthis way, or described this way in tutorials, but if\na programming languge is good, source code should\nmake the best spec.\n10. Iteration- CL do is hard to read.  Solve the common cases.- Arc's 4 basic iterators:\n> (for (= i 0) (< i 10) (++ i)\n(pr i))\n0123456789\nNIL\n> (to i 10 (pr i))\n0123456789\nNIL\n> (each x '(a b c) (pr x))\nABC\nNIL\n> (let i 0\n(while (< (++ i) 10) (pr i)))\n123456789\nNIL\n- Like with and  let, macros on function calls\nForms for iteration are another open question in the Lisp\ncommunity.  The traditional Lisp do is general but too hard\nto read.  If do was a natural way to express iterations, I\nwould by now be used to it, but when I see a do\nI have to stop and decode it, and when I write one I have\nto stop and figure out how to express the iteration I want.\nIn other words, do feels like object code.Our take on iteration is that there are a handful of common\ncases.  If you support those directly, you'll catch nearly\nall the interations people actually write.  If anyone misses\ndo enough, they can always write it as a macro.Arc has four iteration operators: for, which is like C's\nfor except that bindings created by the initialization\nforms are local variables in the loop body; to, which is\nlike Common Lisp's dotimes but without the form for a\nreturn value; each, which is like Common Lisp's dolist,\nbut works for any compound data object (lists, strings,\nvectors, etc), and again has no return value form,\nand while, which evaluates its body while a test expression\nreturns true.All of these iteration operators are defined (though not\nnecessarily implemented) as the obvious macros on\nrecursive function application.\n11. Iteration Captures- while captures it:\n(while (read) (pr it))\n- All capture keep and sum:\n> (each x '(\"al\" \"bob\" \"joe\")\n(if (> (len x) 2) (keep x)))\n(\"bob\" \"joe\")\n> (to x 5\n(sum x)\n(pr x))\n01234\n10\n(Can't use both.)\nLike if, while leaves the variable it bound to the value\nreturned by the test expression.In addition, all the iteration operators leave keep and\nsum bound within the body to functions that accumulate values.\nCalling keep accumulates a list of values and\ncalling sum accumulates a sum.  You can call either one\nwherever in the loop you want, and as often as you want,\nbut you can't call both in the same loop.  If you do\ncall keep or sum, the iteration expression will return the\naccumulated value, otherwise it will return nil.We may generalize accumulation to allow any function to be\napplied to the accumulated value, and maybe write keep\nand sum as macros on this.\n12.  Data Types\nSymbol\nNumber (same as CL)\nCons\nCharacter\nString\nArray\nClass, Obj\nDB (hash/alist)\nFunction\nMacro\nLikely more\nHere is a quick list of the data types so far.  They're\nabout what you'd expect.  We're very likely to add\nmore once we get to dealing with things like threads and\nexceptions.\n13. Compounds = Functions on Indices\n> (\"hello\" 2)\n> (map \"carpet\" '(3 4 1 2))\n(\\p \\e \\a \\r)\nCL:   (aref a 5)\nC:    a[5]\nArc:  (a 5)\nAny compound data object (meaning one with several separately\naddressable parts) behaves like a function on indices.\nSo for example to get the third element of a list you\n\"call\" the list with 2 as an argument.  This makes programs\nshorter and saves us having separate access functions for\neach data type.You can literally use compound data objects anywhere you\ncould use a function, including as the first argument to\nmap (like Common Lisp's mapcar, but works on any sequence).\n14. Strings Work Like Lists\n> (car \"abc\")\n> (cons \\a \"bc\")\n\"abc\"\nContagion as with ints and floats\n> (+ \"abc\" '(d e))\n(\\a \\b \\c D E)\nShould we allow nonchars in strings?\nThis one is a bit of a radical idea, but we thought we\nwould try it and see how it works.  In Arc, strings work\nlike lists: the car of a string is a character, and the\ncdr is another string with the same characters except\nthe first.We've found recursion on lists to be a very useful technique,\nand so maybe it will be equally good for processing strings.This could be terribly inefficient, of course, and we plan\nto let the programmer declare when he wants to that he\ndoesn't need to do this to some strings and they should be\nrepresented as simple contiguous chunks of memory (i.e.\nunboxed).This raises an interesting possibility.  When strings are\nin effect lists, why not let the programmer insert arbitrary\nobjects into them?  It could be useful to insert some\nobject that had its own pr method, for example.  So far\nstrings can only contain characters, but we'll see.When you combine strings with lists, you get something\nlike floating point contagion.  Strings are a specific\nkind of list, like integers are a specific kind of\nreal number, and when you combine you get a result of\nthe more general type.\n15. Classes and ObjectsSingle inheritance (may change)\n(= pt (class nil 'x 0 'y 0))\n(type pt (x 0) (y 0))\n(= p1 (new pt))\n> (p1 'x)\n> (++ (p1 'x))\nWe look on object-oriented programming as a type of\nabstraction that is often useful, rather than an end in itself.\nThe real test of\na feature is whether it will actually make your source\ncode shorter and simpler. To start with at least\nArc has a minimal object system that lets you do the\nthings we know people need to do.Classes are first-class objects that you can create\nwith the class operator.  It takes a parent object (or\nnil) followed by a list of field names alternating with\ndefault values.  Field names can be anything, not just\nsymbols.  There is also type macro that expands into a\ncall to class, for the common case of a named class\nwith no parent and field names that are symbols; the syntax\nis very like Common Lisp's defstruct.There is only single inheritance so far.  It would not\nbe difficult to have multiple inheritance, but a poll\nof eminent hacker friends indicated that none of them\nfound it super useful.You can make an instance of a class by calling new on\nthe class.  You refer to fields in instances (or\nclasses, if you want to) the same way you refer to\npart of any compound data structure, by calling\nthe object as a function on indices, in this case\nfield names.\n16. Overloading- Anything can be an obj field name.- Overload by using a fn as a name.\n(= pt (class nil\n'x 0\n'y 0\npr my-pr))\n- Means dispatch on first arg.- (Not great for  cons, so\nmaybe a way to declare pivotal arg of\na function.)\nYou can overload a function by giving an object a field\nwhose name is that function (the actual function).\nWhen an expression is evaluated, if the first argument\nis an instance (or class) with a field whose\nname is that function, the value stored in that field\n(which must also be a function) is called on the same\narguments instead.In the example on the slide, pt is a class that\nget printed differently.  When pr is called on a\nchild of pt, my-pr (whatever that is) gets invoked\ninstead.This plan for overloading amounts to dispatching on\nthe first argument.  That doesn't work well with\ncons, for example, where the pivotal argument is\nreally the second one.  It could be that cons is\nan anomaly (its arguments are in that order for\nvisual reasons, and that must be rare).  If\nit isn't, we may add some way of saying which is\nthe pivotal argument in a function.\n17. DBs are hashes/alists\n(newdb eq 'x 'a 'y 'b)\n(db x 'a y 'b)\n> (each x (db x 1 y 2)\n(pr x)\n(keep key))\n(X Y)\nLookup failure returns *fail*\nArc has a kind of data repository called a db that you can\nthink of as a hash table, though the internal\nrepresentation is unspecified (in some cases the\ncompiler might choose to make it be an alist).(This idea was suggested by Erann Gat.)The keys of a db can be any kind of object, like field\nnames in an instance.  However, you can add and remove entries whenever\nyou like, and you can also specify the function you want to\ndefine equality for keys.You can create a db by calling either newdb, or the shorter\ndb which assumes that lookup equality test is eq, and the\nkeys are symbols.When you're doing a lookup, what do you do when you don't\nfind anything?  The traditional Lisp answer (as in e.g. assoc)\nwould be to return nil, but in that case how do you\ndistinguish between not finding anything and finding nil?\nArc's answer is to have a global variable *fail* that is\nused by lookup functions that don't find any matches.\nIt's bound to nil by default, which is the right thing nearly\nall the time; when it isn't, you can wrap the\nlookup in a let that binds *fail* to a gensym.\n18. Parameter ListsParms are symbols or (opt | get | ds ...)\n(def foo (x (ds (i j)) (get m n) (opt q 'a) . z)\n(list x i j m n q z))\n> (foo 1 '(red green) (db m 'a n 'b) 'hel 'lo)\n(1 RED GREEN A B HEL (LO))\n(Syntax will help here.)\n> (let (ds (x y)) '(a b)\n(list x y))\n(A B)\nArc allows three things in parameter lists besides ordinary\nsymbols: (opt var default) which indicates an optional\nparameter whose value defaults to default; (ds pattern)\nwhich matches a pattern of variables\nagainst an incoming list, like Common Lisp destructuring-bind;\nand (get vars) which picks one or more variables out of\nan incoming db or instance with corresponding keys.We're expecting get parameters to play the role that keyword\nparameters do in Common Lisp, and we hope to compile calls\ninto similar code (i.e. not actually create the dbs).Arc also supports rest parameters, which occur after a dot\nin the parameter list and are assigned all the remaining\nvalues in the call.Because we got rid of the extra non-variable tokens that\nget included in Common Lisp parameter lists, we can define\nlet and with as the obvious macros on function calls.\nSo for example we get the equivalent of Common Lisp's\ndestructuring-bind for free: just use a ds form as a\nparameter to let or with.  Using a get form to\ndestructure on instances will also be convenient.\n19. Speed- Moon: hard to tell what's expensive.- SICP: programs \"for people to read\"- Profiler should tell, not language.- Especially for server-based apps.\nDavid Moon once told me that Lisp makes it hard for\nprogrammers to tell what's expensive.\nThat sounds like a problem.\nAt the same time, Abelson and Sussman say (and I\nagree) that \"programs must be written\nfor people to read, and only incidentally for\nmachines to execute.\"How are we to reconcile these two ideas?  I agree that,\nmost of all, a language must be a good tool for\nthinking in.  That's what made Lisp good in the first place.\nAnd yet, like anyone, I like fast code.\nI think the way out is to take the burden of showing\nwhat's expensive off the language.  Instead of trying\nto make the language suggest what's expensive, just\nmake the language convenient for expressing ideas, and\nhave a profiler to show what's expensive.The Scheme language sneakily increased the scope of the\nlanguage designer's powers.  From very early, maybe from\nthe begining, the Scheme spec said that conforming\nimplementations must do tail call elimination.  The\nfirst time I read this, I thought \"wait, can you require\nthis in a spec?\"  Arc will see this increase, and raise\nit by some standards for profiling.The way to get fast code in Arc will be to profile it\nand then add declarations that improve efficiency where\nneeded.  As in Common Lisp, declarations will be\noptimization advice to the compiler; they should not\naffect the meaning of the program.Arc is intended for server-based applications,\nand profiling is especially good there because you can\nprofile your program's actual behavior.  You don't\nhave to rely on test suites; you can watch actual users."},{"title":"Arc's Out","text":"29 January 2008We're releasing a version of Arc today, along with a site about it\nat arclanguage.org.  This site\nwill seem very familiar to users of Hacker News.  It's mostly\nthe same code, with a few colors and messages changed.Arc is still a work in progress.  We've done little more than take\na snapshot of the code and put it online.  I spent a few days\ncleaning up inconsistencies, but it's still in the semi-finished\nstate most software is, full of hacks and note-to-self comments\nabout fixing them.Why release it now?  Because, as I suddenly realized a couple months\nago, it's good enough.  Even in this unfinished state, I'd rather\nuse Arc than Scheme or Common Lisp for writing most programs.  And\nI am a fairly representative Lisp hacker, with years of experience\nusing both.  So while Arc is not the perfect Lisp, it seems to be\nbetter for at least some kinds of programming than either of the\nleading alternatives.I worry about releasing it, because I don't want there to be forces\npushing the language to stop changing.  Once you release something\nand people start to build stuff on top of it, you start to feel you\nshouldn't change things.  So we're giving notice in advance that\nwe're going to keep acting as if we were the only users.  We'll\nchange stuff without thinking about what it might break, and we\nwon't even keep track of the changes.I realize that sounds harsh, but there's a lot at stake.  I went\nto a talk last summer by Guido van Rossum about Python, and he\nseemed to have spent most of the preceding year switching from one\nrepresentation of characters to another.  I never want to blow a\nyear dealing with characters.  Why did Guido have to?  Because he\nhad to think about compatibility.  But though it seems benevolent\nto worry about breaking existing code, ultimately there's a cost:\nit means you spend a year dealing with character sets instead of\nmaking the language more powerful.Which is why, incidentally, Arc\nonly supports Ascii.\nMzScheme,\nwhich the current version of Arc compiles to, has some more advanced\nplan for dealing with characters.  But it would probably have taken\nme a couple days to figure out how to interact with it, and I don't\nwant to spend even one day dealing with character sets.  Character\nsets are a black hole.  I realize that supporting only Ascii is\nuninternational to a point that's almost offensive, like calling\nBeijing Peking, or Roma Rome (hmm, wait a minute).  But the kind\nof people who would be offended by that wouldn't like Arc anyway.Arc embodies a similarly unPC attitude to HTML.  The predefined\nlibraries just do everything with tables.  Why?  Because Arc is\ntuned for exploratory programming, and the W3C-approved way of doing\nthings represents the opposite spirit.There's a similar opposition between the use of lists to represent\nthings and the use of \"objects\" with named, typed fields.  I went\nthrough a stage, after I'd been programming in Lisp for 2 or 3\nyears, where I thought the old way of using lists to represent\neverything was just a hack.  If you needed to represent points,\nsurely it was better to declare a proper structure with x and y\nfields than to use a list of two numbers.  Lists could contain\nanything.  They might even have varying numbers of elements.I was wrong.  Those are the advantages of using lists to\nrepresent points.Over the years my appreciation for lists has increased.  In exploratory\nprogramming, the fact that it's unclear what a list represents is\nan advantage, because you yourself are unclear about what type of\nprogram you're trying to write.  The most important thing is not\nto constrain the evolution of your ideas.  So the less you commit\nyourself in writing to what your data structures represent, the\nbetter.Tables are the lists of html.  The W3C doesn't like you to use\ntables to do more than display tabular data because then it's unclear\nwhat a table cell means.  But this sort of ambiguity is not always\nan error.  It might be an accurate reflection of the programmer's\nstate of mind.  In exploratory programming, the programmer is by\ndefinition unsure what the program represents.Of course, \"exploratory programming\" is just a euphemism for \"quick\nand dirty\" programming.  And that phrase is almost redundant: quick\nalmost always seems to imply dirty.  One is always a bit sheepish\nabout writing quick and dirty programs.  And yet some, if not most,\nof the best programs began that way.  And some, if not most, of the\nmost spectacular failures in software have been perpetrated by\npeople trying to do the opposite.So experience suggests we should embrace dirtiness.  Or at least\nsome forms of it; in other ways, the best quick-and-dirty programs\nare usually quite clean.  Which kind of dirtiness is bad and which\nis good?  The best kind of quick and dirty programs seem to be ones\nthat are mathematically elegant, but missing features-- and\nparticularly features that are inessential but deemed necessary for\npropriety.  Good cleanness is a response to constraints imposed by\nthe problem.  Bad cleanness is a response to constraints imposed\nfrom outside-- by regulations, or the expectations of powerful\norganizations.I think these two types of cleanness are not merely separate, but\nin opposition to one another.  \"The rules,\" whatever they are, are\nusually determined by politics; you can only obey them at the expense\nof mathematical elegance.  And vice versa.Arc tries to be a language that's dirty in the right ways.  It tries\nnot to forbid things, for example.  Anywhere I found myself asking\n\"should I allow people to...?\" I tried always to say yes.  This is\nnot the sort of language that tries to save programmers from\nthemselves.The kind of dirtiness Arc seeks to avoid is verbose, repetitive\nsource code.  The way you avoid that is not by forbidding programmers\nto write it, but by making it easy to write code that's compact.\nOne of the things I did while I was writing Arc was to comb through\napplications asking: what can I do to the language to make this\nshorter?  Not in characters or lines of course, but in tokens.  In\na sense, Arc is an accumulation of years of tricks for making\nprograms shorter.  Sounds rather unambitious, but that is in fact\nthe purpose of high-level languages: they make programs shorter.Being dirty in the right ways means being wanton, but sleek.  I\ndon't know if Arc can honestly be described in such enticing terms\nyet, but that's the goal.  For now, best to say it's a quick and\ndirty language for writing quick and dirty programs."},{"title":"Are Software Patents Evil?","text":"March 2006(This essay is derived from a talk at Google.)A few weeks ago I found to my surprise that I'd been granted four patents.\nThis was all the more surprising\nbecause I'd only applied for three.  The patents aren't mine, of\ncourse.  They were assigned to Viaweb, and became Yahoo's when they\nbought us.  But the news set me thinking about the question of\nsoftware patents generally.Patents are a hard problem.  I've had to advise most of the startups\nwe've funded about them, and despite years of experience I'm still\nnot always sure I'm giving the right advice.One thing I do feel pretty certain of is that if you're against\nsoftware patents, you're against patents in general.  Gradually our\nmachines consist more and more of software.  Things that used to\nbe done with levers and cams and gears are now done with loops and\ntrees and closures.  There's nothing special about physical embodiments\nof control systems that should make them patentable, and the software\nequivalent not.Unfortunately, patent law is inconsistent on this point.  Patent\nlaw in most countries says that algorithms aren't patentable.  This\nrule is left over from a time when \"algorithm\" meant something like\nthe Sieve of Eratosthenes.  In 1800, people could not see as readily\nas we can that a great many patents on mechanical objects were\nreally patents on the algorithms they embodied.Patent lawyers still have to pretend that's what they're doing when\nthey patent algorithms.  You must not use the word \"algorithm\" in\nthe title of a patent application, just as you must not use the\nword \"essays\" in the title of a book.  If you want to patent an\nalgorithm, you have to frame it as a computer system executing that algorithm.\nThen it's mechanical; phew.  The default euphemism for algorithm\nis \"system and method.\"  Try a patent search for that phrase and\nsee how many results you get.Since software patents are no different from hardware patents,\npeople who say \"software patents are evil\" are saying simply \"patents\nare evil.\"  So why do so many people complain about software patents\nspecifically?I think the problem is more with the patent office than the concept\nof software patents.  Whenever software meets government, bad things\nhappen, because software changes fast and government changes slow.\nThe patent office has been overwhelmed by both the volume and the\nnovelty of applications for software patents, and as a result they've\nmade a lot of mistakes.The most common is to grant patents that shouldn't be granted.  To\nbe patentable, an invention has to be more than new.  It also has\nto be non-obvious.  And this, especially, is where the USPTO has\nbeen dropping the ball. Slashdot has an icon that expresses the\nproblem vividly: a knife and fork with the words \"patent pending\"\nsuperimposed.The scary thing is, this is the only icon they have for\npatent stories.  Slashdot readers now take it for granted that a\nstory about a patent will be about a bogus patent.\nThat's how bad the problem has become.The problem with Amazon's notorious one-click patent, for example,\nis not that it's a software patent, but that it's obvious.  Any\nonline store that kept people's shipping addresses would have\nimplemented this.  The reason Amazon did it first was not that they\nwere especially smart, but because they were one of the earliest\nsites with enough clout to force customers to log in before they\ncould buy something.\n[1]We, as hackers, know the USPTO is letting people patent the knives\nand forks of our world.  The problem is, the USPTO are not hackers.\nThey're probably good at judging new inventions for casting steel\nor grinding lenses, but they don't understand software yet.At this point an optimist would be tempted to add \"but they will\neventually.\"  Unfortunately that might not be true.  The problem\nwith software patents is an instance of a more general one: the\npatent office takes a while to understand new technology.  If so,\nthis problem will only get worse, because the rate of technological\nchange seems to be increasing.  In thirty years, the patent office\nmay understand the sort of things we now patent as software, but\nthere will be other new types of inventions they understand even\nless.Applying for a patent is a negotiation.  You generally apply for a\nbroader patent than you think you'll be granted, and the examiners\nreply by throwing out some of your claims and granting others.  So\nI don't really blame Amazon for applying for the one-click patent.\nThe big mistake was the patent office's, for not insisting on\nsomething narrower, with real technical content.  By granting such\nan over-broad patent, the USPTO in effect slept with Amazon on the\nfirst date.  Was Amazon supposed to say no?Where Amazon went over to the dark side was not in applying for the\npatent, but in enforcing it.  A lot of companies (Microsoft, for\nexample) have been granted large numbers of preposterously over-broad\npatents,  but they keep them mainly for defensive purposes.  Like\nnuclear weapons, the main role of big companies' patent portfolios\nis to threaten anyone who attacks them with a counter-suit.  Amazon's\nsuit against Barnes & Noble was thus the equivalent of a nuclear\nfirst strike.That suit probably hurt Amazon more than it helped them.  Barnes &\nNoble was a lame site; Amazon would have crushed them anyway.  To\nattack a rival they could have ignored, Amazon put a lasting black\nmark on their own reputation.  Even now I think if you asked hackers\nto free-associate about Amazon, the one-click patent would turn up\nin the first ten topics.Google clearly doesn't feel that merely holding patents is evil.\nThey've applied for a lot of them.  Are they hypocrites?  Are patents\nevil?There are really two variants of that question, and people answering\nit often aren't clear in their own minds which they're answering.\nThere's a narrow variant: is it bad, given the current legal system,\nto apply for patents? and also a broader one: is it bad that the\ncurrent legal system allows patents?These are separate questions.  For example, in preindustrial societies\nlike medieval Europe, when someone attacked you, you didn't call\nthe police.  There were no police.  When attacked, you were supposed\nto fight back, and there were conventions about how to do it.  Was\nthis wrong?  That's two questions: was it wrong to take justice\ninto your own hands, and was it wrong that you had to?  We tend to\nsay yes to the second, but no to the first.  If no one else will\ndefend you, you have to defend yourself.\n[2]The situation with patents is similar.  Business is a kind of\nritualized warfare.  Indeed, it evolved from actual warfare: most\nearly traders switched on the fly from merchants to pirates depending\non how strong you seemed.  In business there are certain rules\ndescribing how companies may and may not compete with one another,\nand someone deciding that they're going to play by their own rules\nis missing the point.  Saying \"I'm not going to apply for patents\njust because everyone else does\" is not like saying \"I'm not going\nto lie just because everyone else does.\"  It's more like saying\n\"I'm not going to use TCP/IP just because everyone else does.\" Oh\nyes you are.A closer comparison might be someone seeing a hockey game for the\nfirst time, realizing with shock that the players were deliberately\nbumping into one another, and deciding that one would on no account\nbe so rude when playing hockey oneself.Hockey allows checking.  It's part of the game.  If your team refuses\nto do it, you simply lose.  So it is in business.  Under the present\nrules, patents are part of the game.What does that mean in practice?  We tell the startups we fund not\nto worry about infringing patents, because startups rarely get sued\nfor patent infringement.  There are only two reasons someone might\nsue you: for money, or to prevent you from competing with them.\nStartups are too poor to be worth suing for money. And in practice\nthey don't seem to get sued much by competitors, either.  They don't\nget sued by other startups because (a) patent suits are an expensive\ndistraction, and (b) since the other startups are as young as they\nare, their patents probably haven't issued yet.\n[3]\nNor do startups,\nat least in the software business, seem to get sued much by established\ncompetitors.  Despite all the patents Microsoft holds, I don't know\nof an instance where they sued a startup for patent infringement.\nCompanies like Microsoft and Oracle don't win by winning lawsuits.\nThat's too uncertain.  They win by locking competitors out of their\nsales channels.  If you do manage to threaten them, they're more\nlikely to buy you than sue you.When you read of big companies filing patent suits against smaller\nones, it's usually a big company on the way down, grasping at\nstraws.  For example, Unisys's attempts to enforce their patent on\nLZW compression.  When you see a big company threatening patent\nsuits, sell.  When a company starts fighting over IP, it's a sign\nthey've lost the real battle, for users.A company that sues competitors for patent infringement is like\na defender who has been beaten so thoroughly that he turns to plead\nwith the referee.  You don't do that if you can still reach the\nball, even if you genuinely believe you've been fouled.  So a company\nthreatening patent suits is a company in trouble.When we were working on Viaweb, a bigger company in the e-commerce\nbusiness was granted a patent on online ordering, or something like\nthat.  I got a call from a VP there asking if we'd like to license\nit.  I replied that I thought the patent was completely bogus, and\nwould never hold up in court.  \"Ok,\" he replied.  \"So, are you guys\nhiring?\"If your startup grows big enough, however, you'll start to get sued,\nno matter what you do.  If you go public, for example, you'll be\nsued by multiple patent trolls who hope you'll pay them off to go\naway.  More on them later.In other words, no one will sue you for patent infringement till\nyou have money, and once you have money, people will sue you whether\nthey have grounds to or not.  So I advise fatalism.  Don't waste\nyour time worrying about patent infringement.  You're probably\nviolating a patent every time you tie your shoelaces.  At the start,\nat least, just worry about making something great and getting lots\nof users.  If you grow to the point where anyone considers you worth\nattacking, you're doing well.We do advise the companies we fund to apply for patents, but not\nso they can sue competitors.  Successful startups either get bought\nor grow into big companies.  If a startup wants to grow into a big\ncompany, they should apply for patents to build up the patent\nportfolio they'll need to maintain an armed truce with other big\ncompanies.  If they want to get bought, they should apply for patents\nbecause patents are part of the mating dance with acquirers.Most startups that succeed do it by getting bought, and most acquirers\ncare about patents.  Startup acquisitions are usually a build-vs-buy\ndecision for the acquirer.  Should we buy this little startup or\nbuild our own?  And two things, especially, make them decide not\nto build their own: if you already have a large and rapidly growing\nuser base, and if you have a fairly solid patent application on\ncritical parts of your software.There's a third reason big companies should prefer buying to building:\nthat if they built their own, they'd screw it up.  But few big\ncompanies are smart enough yet to admit this to themselves.  It's\nusually the acquirer's engineers who are asked how hard it would\nbe for the company to build their own, and they overestimate their\nabilities.\n[4]\nA patent seems to change the balance.  It gives the\nacquirer an excuse to admit they couldn't copy what you're doing.\nIt may also help them to grasp what's special about your technology.Frankly, it surprises me how small a role patents play in the\nsoftware business.  It's kind of ironic, considering all the dire\nthings experts say about software patents stifling innovation, but\nwhen one looks closely at the software business, the most striking\nthing is how little patents seem to matter.In other fields, companies regularly sue competitors for patent\ninfringement.  For example, the airport baggage scanning business\nwas for many years a cozy duopoly shared between two companies,\nInVision and L-3.  In 2002 a startup called Reveal appeared, with\nnew technology that let them build scanners a third the size.  They\nwere sued for patent infringement before they'd even released a\nproduct.You rarely hear that kind of story in our world.  The one example\nI've found is, embarrassingly enough, Yahoo, which filed a patent\nsuit against a gaming startup called Xfire in 2005.  Xfire doesn't\nseem to be a very big deal, and it's hard to say why Yahoo felt\nthreatened.  Xfire's VP of engineering had worked at Yahoo on similar\nstuff-- in fact, he was listed as an inventor on the patent Yahoo\nsued over-- so perhaps there was something personal about it.  My\nguess is that someone at Yahoo goofed.  At any rate they didn't\npursue the suit very vigorously.Why do patents play so small a role in software?  I can think of\nthree possible reasons.One is that software is so complicated that patents by themselves\nare not worth very much.  I may be maligning other fields here, but\nit seems that in most types of engineering you can hand the details\nof some new technique to a group of medium-high quality people and\nget the desired result.  For example, if someone develops a new\nprocess for smelting ore that gets a better yield, and you assemble\na team of qualified experts and tell them about it, they'll be able\nto get the same yield.  This doesn't seem to work in software.\nSoftware is so subtle and unpredictable that \"qualified experts\"\ndon't get you very far.That's why we rarely hear phrases like \"qualified expert\" in the\nsoftware business.  What that level of ability can get you is, say,\nto make your software compatible with some other piece of software--\nin eight months, at enormous cost.  To do anything harder you need\nindividual brilliance.  If you assemble a team of qualified experts\nand tell them to make a new web-based email program, they'll get\ntheir asses kicked by a team of inspired nineteen year olds.Experts can implement, but they can't design.\nOr rather, expertise in implementation is the only kind most people,\nincluding the experts themselves, can measure.\n[5]But design is a definite skill.  It's not just an airy intangible.\nThings always seem intangible when you don't understand them.\nElectricity seemed an airy intangible to most people in 1800.  Who\nknew there was so much to know about it?  So it is with design.\nSome people are good at it and some people are bad at it, and there's\nsomething very tangible they're good or bad at.The reason design counts so much in software is probably that there\nare fewer constraints than on physical things.  Building physical\nthings is expensive and dangerous.  The space of possible choices\nis smaller; you tend to have to work as part of a larger group; and\nyou're subject to a lot of regulations.  You don't have any of that\nif you and a couple friends decide to create a new web-based\napplication.Because there's so much scope for design in software, a successful\napplication tends to be way more than the sum of its patents.  What\nprotects little companies from being copied by bigger competitors\nis not just their patents, but the thousand little things the big\ncompany will get wrong if they try.The second reason patents don't count for much in our world is that\nstartups rarely attack big companies head-on, the way Reveal did.\nIn the software business, startups beat established companies by\ntranscending them.  Startups don't build desktop word processing\nprograms to compete with Microsoft Word.\n[6]\nThey build Writely.\nIf this paradigm is crowded, just wait for the next one; they run\npretty frequently on this route.Fortunately for startups, big companies are extremely good at denial.\nIf you take the trouble to attack them from an oblique angle, they'll\nmeet you half-way and maneuver to keep you in their blind spot.  To\nsue a startup would mean admitting it was dangerous, and that often\nmeans seeing something the big company doesn't want to see.  IBM\nused to sue its mainframe competitors regularly, but they didn't\nbother much about the microcomputer industry because they didn't\nwant to see the threat it posed.  Companies building web based apps\nare similarly protected from Microsoft, which even now doesn't want\nto imagine a world in which Windows is irrelevant.The third reason patents don't seem to matter very much in software\nis public opinion-- or rather, hacker opinion.  In a recent interview,\nSteve Ballmer coyly left open the possibility of attacking Linux\non patent grounds.  But I doubt Microsoft would ever be so stupid.\nThey'd face the mother of all boycotts.  And not just from the\ntechnical community in general; a lot of their own people would\nrebel.Good hackers care a lot about matters of principle, and they are\nhighly mobile.  If a company starts misbehaving, smart people won't\nwork there.  For some reason this seems to be more true in software\nthan other businesses.  I don't think it's because hackers have\nintrinsically higher principles so much as that their skills are\neasily transferrable.  Perhaps we can split the difference and say\nthat mobility gives hackers the luxury of being principled.Google's \"don't be evil\" policy may for this reason be the most\nvaluable thing they've discovered.  It's very constraining in some\nways.  If Google does do something evil, they get doubly whacked\nfor it: once for whatever they did, and again for hypocrisy.  But\nI think it's worth it.  It helps them to hire the best people, and\nit's better, even from a purely selfish point of view, to be\nconstrained by principles than by stupidity.(I wish someone would get this point across to the present\nadministration.)I'm not sure what the proportions are of the preceding three\ningredients, but the custom among the big companies seems to be not\nto sue the small ones, and the startups are mostly too busy and too\npoor to sue one another.  So despite the huge number of software\npatents there's not a lot of suing going on.  With one exception:\npatent trolls.Patent trolls are companies consisting mainly of lawyers whose whole\nbusiness is to accumulate patents and threaten to sue companies who\nactually make things.  Patent trolls, it seems safe to say, are\nevil.  I feel a bit stupid saying that, because when you're saying\nsomething that Richard Stallman and Bill Gates would both agree\nwith, you must be perilously close to tautologies.The CEO of Forgent, one of the most notorious patent trolls, says\nthat what his company does is \"the American way.\" Actually that's\nnot true. The American way is to make money by creating wealth, not by suing people.\n[7]\nWhat companies like Forgent do is actually the proto-industrial\nway.  In the period just before the industrial revolution, some of\nthe greatest fortunes in countries like England and France were\nmade by courtiers who extracted some lucrative right from the crown--\nlike the right to collect taxes on the import of silk-- and then\nused this to squeeze money from the merchants in that business.  So\nwhen people compare patent trolls to the mafia, they're more right\nthan they know, because the mafia too are not merely bad, but bad\nspecifically in the sense of being an obsolete business model.Patent trolls seem to have caught big companies by surprise.  In\nthe last couple years they've extracted hundreds of millions of\ndollars from them.  Patent trolls are hard to fight precisely because\nthey create nothing.  Big companies are safe from being sued by\nother big companies because they can threaten a counter-suit.  But\nbecause patent trolls don't make anything, there's nothing they can\nbe sued for.  I predict this loophole will get closed fairly quickly,\nat least by legal standards.  It's clearly an abuse of the system,\nand the victims are powerful.\n[8]But evil as patent trolls are, I don't think they hamper innovation\nmuch.  They don't sue till a startup has made money, and by that\npoint the innovation that generated it has already happened.  I\ncan't think of a startup that avoided working on some problem because\nof patent trolls.So much for hockey as the game is played now.  What about the more\ntheoretical question of whether hockey would be a better game without\nchecking?  Do patents encourage or discourage innovation?This is a very hard question to answer in the general case.  People\nwrite whole books on the topic.  One of my main hobbies is the\nhistory of technology, and even though I've studied the subject for\nyears, it would take me several weeks of research to be able to say\nwhether patents have in general been a net win.One thing I can say is that 99.9% of the people who express opinions\non the subject do it not based on such research, but out of a kind\nof religious conviction.  At least, that's the polite way of putting\nit; the colloquial version involves speech coming out of organs not\ndesigned for that purpose.Whether they encourage innovation or not, patents were at least\nintended to.  You don't get a patent for nothing.  In return for\nthe exclusive right to use an idea, you have to publish it,\nand it was largely to encourage such openness that patents were\nestablished.Before patents, people protected ideas by keeping them secret.  With\npatents, central governments said, in effect, if you tell everyone\nyour idea, we'll protect it for you.  There is a parallel here to\nthe rise of civil order, which happened at roughly the same time.\nBefore central governments were powerful enough to enforce order,\nrich people had private armies.  As governments got more powerful,\nthey gradually compelled magnates to cede most responsibility for\nprotecting them.  (Magnates still have bodyguards, but no longer\nto protect them from other magnates.)Patents, like police, are involved in many abuses.  But in both\ncases the default is something worse. The choice is not \"patents\nor freedom?\" any more than it is \"police or freedom?\" The actual\nquestions are respectively \"patents or secrecy?\" and \"police or\ngangs?\"As with gangs, we have some idea what secrecy would be like, because\nthat's how things used to be.  The economy of medieval Europe was\ndivided up into little tribes, each jealously guarding their\nprivileges and secrets.  In Shakespeare's time, \"mystery\" was\nsynonymous with \"craft.\"   Even today we can see an echo of the\nsecrecy of medieval guilds, in the now pointless secrecy of the\nMasons.The most memorable example of medieval industrial secrecy is probably\nVenice, which forbade glassblowers to leave the city, and sent\nassassins after those who tried.  We might like to think we wouldn't\ngo so far, but the movie industry has already tried to pass laws\nprescribing three year prison terms just for putting movies on\npublic networks.  Want to try a frightening thought experiment? If\nthe movie industry could have any law they wanted, where would they\nstop?  Short of the death penalty, one assumes, but how close would\nthey get?Even worse than the spectacular abuses might be the overall decrease\nin efficiency that would accompany increased secrecy.  As anyone\nwho has dealt with organizations that operate on a \"need to know\"\nbasis can attest, dividing information up into little cells is\nterribly inefficient.  The flaw in the \"need to know\" principle is\nthat you don't know who needs to know something.  An idea\nfrom one area might spark a great discovery in another.  But the\ndiscoverer doesn't know he needs to know it.If secrecy were the only protection for ideas, companies wouldn't\njust have to be secretive with other companies; they'd have to be\nsecretive internally.  This would encourage what is already the\nworst trait of big companies.I'm not saying secrecy would be worse than patents, just that we\ncouldn't discard patents for free.  Businesses would become more\nsecretive to compensate, and in some fields this might get ugly.\nNor am I defending the current patent system.  There is clearly a\nlot that's broken about it.   But the breakage seems to affect\nsoftware less than most other fields.In the software business I know from experience whether patents\nencourage or discourage innovation, and the answer is the type that\npeople who like to argue about public policy least like to hear:\nthey don't affect innovation much, one way or the other.  Most\ninnovation in the software business happens in startups, and startups\nshould simply ignore other companies' patents.  At least, that's\nwhat we advise, and we bet money on that advice.The only real role of patents, for most startups, is as an element\nof the mating dance with acquirers.  There patents do help a little.\nAnd so they do encourage innovation indirectly, in that they give\nmore power to startups, which is where, pound for pound, the most\ninnovation happens.  But even in the mating dance, patents are of\nsecondary importance.  It matters more to make something great and\nget a lot of users.Notes[1]\nYou have to be careful here, because a great discovery often\nseems obvious in retrospect.  One-click ordering, however, is not\nsuch a discovery.[2]\n\"Turn the other cheek\" skirts the issue; the critical question\nis not how to deal with slaps, but sword thrusts.[3]\nApplying for a patent is now very slow, but it might actually\nbe bad if that got fixed.  At the moment the time it takes to get\na patent is conveniently just longer than the time it takes a startup\nto succeed or fail.[4]\nInstead of the canonical \"could you build this?\" maybe the corp\ndev guys should be asking \"will you build this?\" or even \"why haven't\nyou already built this?\"[5]\nDesign ability is so hard to measure that you can't even trust\nthe design world's internal standards.  You can't assume that someone\nwith a degree in design is any good at design, or that an eminent\ndesigner is any better than his peers.  If that worked, any company\ncould build products as good as Apple's just by hiring\nsufficiently qualified designers.[6]\nIf anyone wanted to try, we'd be interested to hear from them.\nI suspect it's one of those things that's not as hard as everyone\nassumes.[7]\nPatent trolls can't even claim, like speculators, that they\n\"create\" liquidity.[8]\nIf big companies don't want to wait for the government to take\naction, there is a way to fight back themselves.  For a long time\nI thought there wasn't, because there was nothing to grab onto.\nBut there is one resource patent trolls need: lawyers.  Big technology\ncompanies between them generate a lot of legal business.  If they\nagreed among themselves never to do business with any firm employing\nanyone who had worked for a patent troll, either as an employee or\nas outside counsel, they could probably starve the trolls of the\nlawyers they need.Thanks to Dan Bloomberg, Paul Buchheit, Sarah Harlin,\nJessica Livingston, and Peter Norvig\nfor reading drafts of this, to Joel Lehrer and Peter Eng for answering\nmy questions about patents, and to Ankur Pansari for inviting me\nto speak."},{"title":"Be Good","text":"April 2008(This essay is derived from a talk at the 2008 Startup School.)About a month after we started Y Combinator we came up with the\nphrase that became our motto: Make something people want.  We've\nlearned a lot since then, but if I were choosing now that's still\nthe one I'd pick.Another thing we tell founders is not to worry too much about the\nbusiness model, at least at first.  Not because making money is\nunimportant, but because it's so much easier than building something\ngreat.A couple weeks ago I realized that if you put those two ideas\ntogether, you get something surprising.  Make something people want.\nDon't worry too much about making money.  What you've got is a\ndescription of a charity.When you get an unexpected result like this, it could either be a\nbug or a new discovery.  Either businesses aren't supposed to be\nlike charities, and we've proven by reductio ad absurdum that one\nor both of the principles we began with is false.  Or we have a new\nidea.I suspect it's the latter, because as soon as this thought occurred\nto me, a whole bunch of other things fell into place.ExamplesFor example, Craigslist.  It's not a charity, but they run it like\none.  And they're astoundingly successful.  When you scan down the\nlist of most popular web sites, the number of employees at Craigslist\nlooks like a misprint. Their revenues aren't as high as they could\nbe, but most startups would be happy to trade places with them.In Patrick O'Brian's novels, his captains always try to get upwind\nof their opponents.  If you're upwind, you decide when and if to\nengage the other ship.  Craigslist is effectively upwind of enormous\nrevenues.  They'd face some challenges if they wanted to make more,\nbut not the sort you face when you're tacking upwind, trying to\nforce a crappy product on ambivalent users by spending ten times\nas much on sales as on development.  [1]I'm not saying startups should aim to end up like Craigslist.\nThey're a product of unusual circumstances.  But they're a good\nmodel for the early phases.Google looked a lot like a charity in the beginning. They didn't\nhave ads for over a year.  At year 1, Google was indistinguishable\nfrom a nonprofit.  If a nonprofit or government organization had\nstarted a project to index the web, Google at year 1 is the limit\nof what they'd have produced.Back when I was working on spam filters I thought it would be a\ngood idea to have a web-based email service with good spam filtering.\nI wasn't thinking of it as a company.  I just wanted to keep people\nfrom getting spammed.  But as I thought more about this project, I\nrealized it would probably have to be a company.  It would cost\nsomething to run, and it would be a pain to fund with grants and\ndonations.That was a surprising realization.  Companies often claim to be\nbenevolent, but it was surprising to realize there were purely\nbenevolent projects that had to be embodied as companies to work.I didn't want to start another company, so I didn't do it.  But if\nsomeone had, they'd probably be quite rich now.  There was a window\nof about two years when spam was increasing rapidly but all the big\nemail services had terrible filters.  If someone had launched a\nnew, spam-free mail service, users would have flocked to it.Notice the pattern here?  From either direction we get to the same\nspot.  If you start from successful startups, you find they often\nbehaved like nonprofits.  And if you start from ideas for nonprofits,\nyou find they'd often make good startups.PowerHow wide is this territory?  Would all good nonprofits be good\ncompanies?  Possibly not.  What makes Google so valuable is that\ntheir users have money.  If you make people with money love you,\nyou can probably get some of it.  But could you also base a successful\nstartup on behaving like a nonprofit to people who don't have money?\nCould you, for example, grow a successful startup out of curing an\nunfashionable but deadly disease like malaria?I'm not sure, but I suspect that if you pushed this idea, you'd be\nsurprised how far it would go.  For example, people who apply to Y\nCombinator don't generally have much money, and yet we can profit\nby helping them, because with our help they could make money.  Maybe\nthe situation is similar with malaria.  Maybe an organization that\nhelped lift its weight off a country could benefit from the resulting\ngrowth.I'm not proposing this is a serious idea.  I don't know anything\nabout malaria.  But I've been kicking ideas around long enough to\nknow when I come across a powerful one.One way to guess how far an idea extends is to ask yourself at what\npoint you'd bet against it.  The thought of betting against benevolence\nis alarming in the same way as saying that something is technically\nimpossible.  You're just asking to be made a fool of, because these\nare such powerful forces.  [2]For example, initially I thought maybe this principle only applied\nto Internet startups.  Obviously it worked for Google, but what\nabout Microsoft?  Surely Microsoft isn't benevolent?  But when I\nthink back to the beginning, they were.  Compared to IBM they were\nlike Robin Hood.  When IBM introduced the PC, they thought they\nwere going to make money selling hardware at high prices.  But by\ngaining control of the PC standard, Microsoft opened up the market\nto any manufacturer.  Hardware prices plummeted, and lots of people\ngot to have computers who couldn't otherwise have afforded them.\nIt's the sort of thing you'd expect Google to do.Microsoft isn't so benevolent now.  Now when one thinks of what\nMicrosoft does to users, all the verbs that come to mind begin with\nF.  [3] And yet it doesn't seem to pay.\nTheir stock price has been flat for years.  Back when they were\nRobin Hood, their stock price rose like Google's.  Could there be\na connection?You can see how there would be.  When you're small, you can't bully\ncustomers, so you have to charm them.  Whereas when you're big you\ncan maltreat them at will, and you tend to, because it's easier\nthan satisfying them.  You grow big by being nice, but you can stay\nbig by being mean.You get away with it till the underlying conditions change, and\nthen all your victims escape.  So \"Don't be evil\" may be the most\nvaluable thing Paul Buchheit made for Google, because it may turn\nout to be an elixir of corporate youth.  I'm sure they find it\nconstraining, but think how valuable it will be if it saves them\nfrom lapsing into the fatal laziness that afflicted Microsoft and\nIBM.The curious thing is, this elixir is freely available to any other\ncompany.  Anyone can adopt \"Don't be evil.\"  The catch is that\npeople will hold you to it.  So I don't think you're going to see\nrecord labels or tobacco companies using this discovery.MoraleThere's a lot of external evidence that benevolence works.  But how\ndoes it work?  One advantage of investing in a large number of\nstartups is that you get a lot of data about how they work.  From\nwhat we've seen, being good seems to help startups in three ways:\nit improves their morale, it makes other people want to help them,\nand above all, it helps them be decisive.Morale is tremendously important to a startup—so important\nthat morale alone is almost enough to determine success.  Startups\nare often described as emotional roller-coasters. One minute you're\ngoing to take over the world, and the next you're doomed.  The\nproblem with feeling you're doomed is not just that it makes you\nunhappy, but that it makes you stop working.  So the downhills\nof the roller-coaster are more of a self fulfilling prophecy than\nthe uphills.  If feeling you're going to succeed makes you work\nharder, that probably improves your chances of succeeding, but if\nfeeling you're going to fail makes you stop working, that practically\nguarantees you'll fail.Here's where benevolence comes in.  If you feel you're really helping\npeople, you'll keep working even when it seems like your startup\nis doomed.  Most of us have some amount of natural benevolence.\nThe mere fact that someone needs you makes you want to help them.\nSo if you start the kind of startup where users come back each day,\nyou've basically built yourself a giant tamagotchi.  You've made\nsomething you need to take care of.Blogger is a famous example of a startup that went through really\nlow lows and survived.  At one point they ran out of money and\neveryone left. Evan Williams came in to work the next day, and there\nwas no one but him.  What kept him going?  Partly that users needed\nhim.  He was hosting thousands of people's blogs. He couldn't just\nlet the site die.There are many advantages of launching quickly, but the most important\nmay be that once you have users, the tamagotchi effect kicks in.\nOnce you have users to take care of, you're forced to figure out\nwhat will make them happy, and that's actually very valuable\ninformation.The added confidence that comes from trying to help people can\nalso help you with investors. One of the founders of\nChatterous told\nme recently that he and his cofounder had decided that this service\nwas something the world needed, so they were going to keep working\non it no matter what, even if they had to move back to Canada and live\nin their parents' basements.Once they realized this, they stopped caring so much what investors thought\nabout them.  They still met with them, but they weren't going to\ndie if they didn't get their money.  And you know what?  The investors\ngot a lot more interested.  They could sense that the Chatterouses\nwere going to do this startup with or without them.If you're really committed and your startup is cheap to run, you\nbecome very hard to kill.  And practically all startups, even the\nmost successful, come close to death at some point.  So if doing\ngood for people gives you a sense of mission that makes you harder\nto kill, that alone more than compensates for whatever you lose by\nnot choosing a more selfish project.HelpAnother advantage of being good is that it makes other people want\nto help you.  This too seems to be an inborn trait in humans.One of the startups we've funded, Octopart, is currently locked in\na classic battle of good versus evil.  They're a search site for\nindustrial components.  A lot of people need to search for components,\nand before Octopart there was no good way to do it.  That, it turned\nout, was no coincidence.Octopart built the right way to search for components.  Users like\nit and they've been growing rapidly.  And yet for most of Octopart's\nlife, the biggest distributor, Digi-Key, has been trying to force\nthem take their prices off the site.  Octopart is sending them\ncustomers for free, and yet Digi-Key is trying to make that traffic\nstop.  Why?  Because their current business model depends on\novercharging people who have incomplete information about prices.\nThey don't want search to work.The Octoparts are the nicest guys in the world.  They dropped out\nof the PhD program in physics at Berkeley to do this.  They just\nwanted to fix a problem they encountered in their research.  Imagine\nhow much time you could save the world's engineers if they could\ndo searches online.  So when I hear that a big, evil company is\ntrying to stop them in order to keep search broken, it makes me\nreally want to help them. It makes me spend more time on the Octoparts\nthan I do with most of the other startups we've funded.  It just\nmade me spend several minutes telling you how great they are.  Why?\nBecause they're good guys and they're trying to help the world.If you're benevolent, people will rally around you: investors,\ncustomers, other companies, and potential employees.  In the long\nterm the most important may be the potential employees.  I think\neveryone knows now that\ngood hackers are much better than mediocre\nones.  If you can attract the best hackers to work for you, as\nGoogle has, you have a big advantage.  And the very best hackers\ntend to be idealistic.  They're not desperate for a job.  They can\nwork wherever they want.  So most want to work on things that will\nmake the world better.CompassBut the most important advantage of being good is that it acts as\na compass.  One of the hardest parts of doing a startup is that you\nhave so many choices.  There are just two or three of you, and a\nthousand things you could do. How do you decide?Here's the answer: Do whatever's best for your users.  You can hold\nonto this like a rope in a hurricane, and it will save you if\nanything can.  Follow it and it will take you through everything\nyou need to do.It's even the answer to questions that seem unrelated, like how to\nconvince investors to give you money.  If you're a good salesman,\nyou could try to just talk them into it.  But the more reliable\nroute is to convince them through your users: if you make something\nusers love enough to tell their friends, you grow exponentially,\nand that will convince any investor.Being good is a particularly useful strategy for making decisions\nin complex situations because it's stateless.  It's like telling\nthe truth.  The trouble with lying is that you have to remember\neverything you've said in the past to make sure you don't contradict\nyourself.  If you tell the truth you don't have to remember anything,\nand that's a really useful property in domains where things happen\nfast.For example, Y Combinator has now invested in 80 startups, 57 of\nwhich are still alive.  (The rest have died or merged or been\nacquired.)  When you're trying to advise 57 startups, it turns out\nyou have to have a stateless algorithm.  You can't have ulterior\nmotives when you have 57 things going on at once, because you can't\nremember them.  So our rule is just to do whatever's best for the\nfounders.  Not because we're particularly benevolent, but because\nit's the only algorithm that works on that scale.When you write something telling people to be good, you seem to be\nclaiming to be good yourself.  So I want to say explicitly that I\nam not a particularly good person.  When I was a kid I was firmly\nin the camp of bad.  The way adults used the word good, it seemed\nto be synonymous with quiet, so I grew up very suspicious of it.You know how there are some people whose names come up in conversation\nand everyone says \"He's such a great guy?\"  People never say\nthat about me.  The best I get is \"he means well.\"  I am not claiming\nto be good.  At best I speak good as a second language.So I'm not suggesting you be good in the usual sanctimonious way.\nI'm suggesting it because it works.  It will work not just as a\nstatement of \"values,\" but as a guide to strategy,\nand even a design spec for software.  Don't just not be evil.  Be\ngood.Notes[1] Fifty years ago\nit would have seemed shocking for a public company not to pay\ndividends.  Now many tech companies don't.  The markets seem to\nhave figured out how to value potential dividends.  Maybe that isn't\nthe last step in this evolution.  Maybe markets will eventually get\ncomfortable with potential earnings. (VCs already are, and at least\nsome of them consistently make money.)I realize this sounds like the stuff one used to hear about the\n\"new economy\" during the Bubble.  Believe me, I was not drinking\nthat kool-aid at the time.  But I'm convinced there were some\ngood\nideas buried in Bubble thinking.  For example, it's ok to focus on\ngrowth instead of profits—but only if the growth is genuine.\nYou can't be buying users; that's a pyramid scheme.   But a company\nwith rapid, genuine growth is valuable, and eventually markets learn\nhow to value valuable things.[2] The idea of starting\na company with benevolent aims is currently undervalued, because\nthe kind of people who currently make that their explicit goal don't\nusually do a very good job.It's one of the standard career paths of trustafarians to start\nsome vaguely benevolent business.  The problem with most of them\nis that they either have a bogus political agenda or are feebly\nexecuted.  The trustafarians' ancestors didn't get rich by preserving\ntheir traditional culture; maybe people in Bolivia don't want to\neither.  And starting an organic farm, though it's at least\nstraightforwardly benevolent, doesn't help people on the scale that\nGoogle does.Most explicitly benevolent projects don't hold themselves sufficiently\naccountable.  They act as if having good intentions were enough to\nguarantee good effects.[3] Users dislike their\nnew operating system so much that they're starting petitions to\nsave the old one.  And the old one was nothing special.  The hackers\nwithin Microsoft must know in their hearts that if the company\nreally cared about users they'd just advise them to switch to OSX.Thanks to Trevor Blackwell, Paul Buchheit, Jessica Livingston,\nand Robert Morris for reading drafts of this."},{"title":"Beating the Averages","text":"April 2001, rev. April 2003(This article is derived from a talk given at the 2001 Franz\nDeveloper Symposium.)\nIn the summer of 1995, my friend Robert Morris and I\nstarted a startup called\nViaweb.\nOur plan was to write\nsoftware that would let end users build online stores.\nWhat was novel about this software, at the time, was\nthat it ran on our server, using ordinary Web pages\nas the interface.A lot of people could have been having this idea at the\nsame time, of course, but as far as I know, Viaweb was\nthe first Web-based application.  It seemed such\na novel idea to us that we named the company after it:\nViaweb, because our software worked via the Web,\ninstead of running on your desktop computer.Another unusual thing about this software was that it\nwas written primarily in a programming language called\nLisp. It was one of the first big end-user\napplications to be written in Lisp, which up till then\nhad been used mostly in universities and research labs. [1]The Secret WeaponEric Raymond has written an essay called \"How to Become a Hacker,\"\nand in it, among other things, he tells would-be hackers what\nlanguages they should learn.  He suggests starting with Python and\nJava, because they are easy to learn.  The serious hacker will also\nwant to learn C, in order to hack Unix, and Perl for system\nadministration and cgi scripts.  Finally, the truly serious hacker\nshould consider learning Lisp:\nLisp is worth learning for the profound enlightenment experience\nyou will have when you finally get it; that experience will make\nyou a better programmer for the rest of your days, even if you\nnever actually use Lisp itself a lot.\nThis is the same argument you tend to hear for learning Latin.  It\nwon't get you a job, except perhaps as a classics professor, but\nit will improve your mind, and make you a better writer in languages\nyou do want to use, like English.But wait a minute.  This metaphor doesn't stretch that far.  The\nreason Latin won't get you a job is that no one speaks it.  If you\nwrite in Latin, no one can understand you.  But Lisp is a computer\nlanguage, and computers speak whatever language you, the programmer,\ntell them to.So if Lisp makes you a better programmer, like he says, why wouldn't\nyou want to use it? If a painter were offered a brush that would\nmake him a better painter, it seems to me that he would want to\nuse it in all his paintings, wouldn't he? I'm not trying to make\nfun of Eric Raymond here.  On the whole, his advice is good.  What\nhe says about Lisp is pretty much the conventional wisdom.  But\nthere is a contradiction in the conventional wisdom:  Lisp will\nmake you a better programmer, and yet you won't use it.Why not?  Programming languages are just tools, after all.  If Lisp\nreally does yield better programs, you should use it.  And if it\ndoesn't, then who needs it?This is not just a theoretical question.  Software is a very\ncompetitive business, prone to natural monopolies.  A company that\ngets software written faster and better will, all other things\nbeing equal, put its competitors out of business.  And when you're\nstarting a startup, you feel this very keenly.  Startups tend to\nbe an all or nothing proposition.  You either get rich, or you get\nnothing.  In a startup, if you bet on the wrong technology, your\ncompetitors will crush you.Robert and I both knew Lisp well, and we couldn't see any reason\nnot to trust our instincts and go with Lisp.  We knew that everyone\nelse was writing their software in C++ or Perl.  But we also knew\nthat that didn't mean anything.  If you chose technology that way,\nyou'd be running Windows.  When you choose technology, you have to\nignore what other people are doing, and consider only what will\nwork the best.This is especially true in a startup.  In a big company, you can\ndo what all the other big companies are doing.  But a startup can't\ndo what all the other startups do.  I don't think a lot of people\nrealize this, even in startups.The average big company grows at about ten percent a year.  So if\nyou're running a big company and you do everything the way the\naverage big company does it, you can expect to do as well as the\naverage big company-- that is, to grow about ten percent a year.The same thing will happen if you're running a startup, of course.\nIf you do everything the way the average startup does it, you should\nexpect average performance.  The problem here is, average performance\nmeans that you'll go out of business.  The survival rate for startups\nis way less than fifty percent.  So if you're running a startup,\nyou had better be doing something odd.  If not, you're in trouble.Back in 1995, we knew something that I don't think our competitors\nunderstood, and few understand even now:  when you're writing\nsoftware that only has to run on your own servers, you can use\nany language you want.  When you're writing desktop software,\nthere's a strong bias toward writing applications in the same\nlanguage as the operating system.  Ten years ago, writing applications\nmeant writing applications in C.  But with Web-based software,\nespecially when you have the source code of both the language and\nthe operating system, you can use whatever language you want.This new freedom is a double-edged sword, however.  Now that you\ncan use any language, you have to think about which one to use.\nCompanies that try to pretend nothing has changed risk finding that\ntheir competitors do not.If you can use any language, which do you use?  We chose Lisp.\nFor one thing, it was obvious that rapid development would be\nimportant in this market.  We were all starting from scratch, so\na company that could get new features done before its competitors\nwould have a big advantage.  We knew Lisp was a really good language\nfor writing software quickly, and server-based applications magnify\nthe effect of rapid development, because you can release software\nthe minute it's done.If other companies didn't want to use Lisp, so much the better.\nIt might give us a technological edge, and we needed all the help\nwe could get.  When we started Viaweb, we had no experience in\nbusiness.  We didn't know anything about marketing, or hiring\npeople, or raising money, or getting customers.  Neither of us had\never even had what you would call a real job.  The only thing we\nwere good at was writing software.  We hoped that would save us.\nAny advantage we could get in the software department, we would\ntake.So you could say that using Lisp was an experiment.  Our hypothesis\nwas that if we wrote our software in Lisp, we'd be able to get\nfeatures done faster than our competitors, and also to do things\nin our software that they couldn't do.  And because Lisp was so\nhigh-level, we wouldn't need a big development team, so our costs\nwould be lower.  If this were so, we could offer a better product\nfor less money, and still make a profit.  We would end up getting\nall the users, and our competitors would get none, and eventually\ngo out of business.  That was what we hoped would happen, anyway.What were the results of this experiment?  Somewhat surprisingly,\nit worked.  We eventually had many competitors, on the order of\ntwenty to thirty of them, but none of their software could compete\nwith ours.  We had a wysiwyg online store builder that ran on the\nserver and yet felt like a desktop application.  Our competitors\nhad cgi scripts.  And we were always far ahead of them in features.\nSometimes, in desperation, competitors would try to introduce\nfeatures that we didn't have.  But with Lisp our development cycle\nwas so fast that we could sometimes duplicate a new feature within\na day or two of a competitor announcing it in a press release.  By\nthe time journalists covering the press release got round to calling\nus, we would have the new feature too.It must have seemed to our competitors that we had some kind of\nsecret weapon-- that we were decoding their Enigma traffic or\nsomething.  In fact we did have a secret weapon, but it was simpler\nthan they realized.  No one was leaking news of their features to\nus.   We were just able to develop software faster than anyone\nthought possible.When I was about nine I happened to get hold of a copy of The Day\nof the Jackal, by Frederick Forsyth.  The main character is an\nassassin who is hired to kill the president of France.  The assassin\nhas to get past the police to get up to an apartment that overlooks\nthe president's route.  He walks right by them, dressed up as an\nold man on crutches, and they never suspect him.Our secret weapon was similar.  We wrote our software in a weird\nAI language, with a bizarre syntax full of parentheses.  For years\nit had annoyed me to hear Lisp described that way.  But now it\nworked to our advantage.  In business, there is nothing more valuable\nthan a technical advantage your competitors don't understand.  In\nbusiness, as in war, surprise is worth as much as force.And so, I'm a little embarrassed to say, I never said anything\npublicly about Lisp while we were working on Viaweb.  We never\nmentioned it to the press, and if you searched for Lisp on our Web\nsite, all you'd find were the titles of two books in my bio.  This\nwas no accident.  A startup should give its competitors as little\ninformation as possible.  If they didn't know what language our\nsoftware was written in, or didn't care, I wanted to keep it that\nway.[2]The people who understood our technology best were the customers.\nThey didn't care what language Viaweb was written in either, but\nthey noticed that it worked really well.  It let them build great\nlooking online stores literally in minutes.  And so, by word of\nmouth mostly, we got more and more users.  By the end of 1996 we\nhad about 70 stores online.  At the end of 1997 we had 500.  Six\nmonths later, when Yahoo bought us, we had 1070 users.  Today, as\nYahoo Store, this software continues to dominate its market.  It's\none of the more profitable pieces of Yahoo, and the stores built\nwith it are the foundation of Yahoo Shopping.  I left Yahoo in\n1999, so I don't know exactly how many users they have now, but\nthe last I heard there were about 20,000.\nThe Blub ParadoxWhat's so great about Lisp?  And if Lisp is so great, why doesn't\neveryone use it?  These sound like rhetorical questions, but actually\nthey have straightforward answers.  Lisp is so great not because\nof some magic quality visible only to devotees, but because it is\nsimply the most powerful language available.  And the reason everyone\ndoesn't use it is that programming languages are not merely\ntechnologies, but habits of mind as well, and nothing changes\nslower.  Of course, both these answers need explaining.I'll begin with a shockingly controversial statement:  programming\nlanguages vary in power.Few would dispute, at least, that high level languages are more\npowerful than machine language.  Most programmers today would agree\nthat you do not, ordinarily, want to program in machine language.\nInstead, you should program in a high-level language, and have a\ncompiler translate it into machine language for you.  This idea is\neven built into the hardware now: since the 1980s, instruction sets\nhave been designed for compilers rather than human programmers.Everyone knows it's a mistake to write your whole program by hand\nin machine language.  What's less often understood is that there\nis a more general principle here: that if you have a choice of\nseveral languages, it is, all other things being equal, a mistake\nto program in anything but the most powerful one. [3]There are many exceptions to this rule.  If you're writing a program\nthat has to work very closely with a program written in a certain\nlanguage, it might be a good idea to write the new program in the\nsame language.  If you're writing a program that only has to do\nsomething very simple, like number crunching or bit manipulation,\nyou may as well use a less abstract language, especially since it\nmay be slightly faster.  And if you're writing a short, throwaway\nprogram, you may be better off just using whatever language has\nthe best library functions for the task.  But in general, for\napplication software, you want to be using the most powerful\n(reasonably efficient) language you can get, and using anything\nelse is a mistake, of exactly the same kind, though possibly in a\nlesser degree, as programming in machine language.You can see that machine language is very low level.  But, at least\nas a kind of social convention, high-level languages are often all\ntreated as equivalent.  They're not.  Technically the term \"high-level\nlanguage\" doesn't mean anything very definite.  There's no dividing\nline with machine languages on one side and all the high-level\nlanguages on the other.  Languages fall along a continuum [4] of\nabstractness, from the most powerful all the way down to machine\nlanguages, which themselves vary in power.Consider Cobol.  Cobol is a high-level language, in the sense that\nit gets compiled into machine language.  Would anyone seriously\nargue that Cobol is equivalent in power to, say, Python?  It's\nprobably closer to machine language than Python.Or how about Perl 4?  Between Perl 4 and Perl 5, lexical closures\ngot added to the language.  Most Perl hackers would agree that Perl\n5 is more powerful than Perl 4.  But once you've admitted that,\nyou've admitted that one high level language can be more powerful\nthan another.  And it follows inexorably that, except in special\ncases, you ought to use the most powerful you can get.This idea is rarely followed to its conclusion, though.  After a\ncertain age, programmers rarely switch languages voluntarily.\nWhatever language people happen to be used to, they tend to consider\njust good enough.Programmers get very attached to their favorite languages, and I\ndon't want to hurt anyone's feelings, so to explain this point I'm\ngoing to use a hypothetical language called Blub.  Blub falls right\nin the middle of the abstractness continuum.  It is not the most\npowerful language, but it is more powerful than Cobol or machine\nlanguage.And in fact, our hypothetical Blub programmer wouldn't use either\nof them.  Of course he wouldn't program in machine language.  That's\nwhat compilers are for.  And as for Cobol, he doesn't know how\nanyone can get anything done with it.  It doesn't even have x (Blub\nfeature of your choice).As long as our hypothetical Blub programmer is looking down the\npower continuum, he knows he's looking down.  Languages less powerful\nthan Blub are obviously less powerful, because they're missing some\nfeature he's used to.  But when our hypothetical Blub programmer\nlooks in the other direction, up the power continuum, he doesn't\nrealize he's looking up.  What he sees are merely weird languages.\nHe probably considers them about equivalent in power to Blub, but\nwith all this other hairy stuff thrown in as well.  Blub is good\nenough for him, because he thinks in Blub.When we switch to the point of view of a programmer using any of\nthe languages higher up the power continuum, however, we find that\nhe in turn looks down upon Blub.  How can you get anything done in\nBlub? It doesn't even have y.By induction, the only programmers in a position to see all the\ndifferences in power between the various languages are those who\nunderstand the most powerful one.  (This is probably what Eric\nRaymond meant about Lisp making you a better programmer.) You can't\ntrust the opinions of the others, because of the Blub paradox:\nthey're satisfied with whatever language they happen to use, because\nit dictates the way they think about programs.I know this from my own experience, as a high school kid writing\nprograms in Basic.  That language didn't even support recursion.\nIt's hard to imagine writing programs without using recursion, but\nI didn't miss it at the time.  I thought in Basic.  And I was a\nwhiz at it.  Master of all I surveyed.The five languages that Eric Raymond recommends to hackers fall at\nvarious points on the power continuum.  Where they fall relative\nto one another is a sensitive topic.  What I will say is that I\nthink Lisp is at the top.  And to support this claim I'll tell you\nabout one of the things I find missing when I look at the other\nfour languages.  How can you get anything done in them, I think,\nwithout macros? [5]Many languages have something called a macro.  But Lisp macros are\nunique.  And believe it or not, what they do is related to the\nparentheses.  The designers of Lisp didn't put all those parentheses\nin the language just to be different.  To the Blub programmer, Lisp\ncode looks weird.  But those parentheses are there for a reason.\nThey are the outward evidence of a fundamental difference between\nLisp and other languages.Lisp code is made out of Lisp data objects.  And not in the trivial\nsense that the source files contain characters, and strings are\none of the data types supported by the language.  Lisp code, after\nit's read by the parser, is made of data structures that you can\ntraverse.If you understand how compilers work, what's really going on is\nnot so much that Lisp has a strange syntax as that Lisp has no\nsyntax.  You write programs in the parse trees that get generated\nwithin the compiler when other languages are parsed.  But these\nparse trees are fully accessible to your programs.  You can write\nprograms that manipulate them.  In Lisp, these programs are called\nmacros.  They are programs that write programs.Programs that write programs?  When would you ever want to do that?\nNot very often, if you think in Cobol.  All the time, if you think\nin Lisp.  It would be convenient here if I could give an example\nof a powerful macro, and say there! how about that?  But if I did,\nit would just look like gibberish to someone who didn't know Lisp;\nthere isn't room here to explain everything you'd need to know to\nunderstand what it meant.  In\nAnsi Common Lisp I tried to move\nthings along as fast as I could, and even so I didn't get to macros\nuntil page 160.But I think I can give a kind of argument that might be convincing.\nThe source code of the Viaweb editor was probably about 20-25%\nmacros.  Macros are harder to write than ordinary Lisp functions,\nand it's considered to be bad style to use them when they're not\nnecessary.  So every macro in that code is there because it has to\nbe.  What that means is that at least 20-25% of the code in this\nprogram is doing things that you can't easily do in any other\nlanguage.  However skeptical the Blub programmer might be about my\nclaims for the mysterious powers of Lisp, this ought to make him\ncurious.  We weren't writing this code for our own amusement.  We\nwere a tiny startup, programming as hard as we could in order to\nput technical barriers between us and our competitors.A suspicious person might begin to wonder if there was some\ncorrelation here.  A big chunk of our code was doing things that\nare very hard to do in other languages.  The resulting software\ndid things our competitors' software couldn't do.  Maybe there was\nsome kind of connection.  I encourage you to follow that thread.\nThere may be more to that old man hobbling along on his crutches\nthan meets the eye.Aikido for StartupsBut I don't expect to convince anyone\n(over 25)\nto go out and learn\nLisp.  The purpose of this article is not to change anyone's mind,\nbut to reassure people already interested in using Lisp-- people\nwho know that Lisp is a powerful language, but worry because it\nisn't widely used.  In a competitive situation, that's an advantage.\nLisp's power is multiplied by the fact that your competitors don't\nget it.If you think of using Lisp in a startup, you shouldn't worry that\nit isn't widely understood.  You should hope that it stays that\nway. And it's likely to.  It's the nature of programming languages\nto make most people satisfied with whatever they currently use.\nComputer hardware changes so much faster than personal habits that\nprogramming practice is usually ten to twenty years behind the\nprocessor.  At places like MIT they were writing programs in\nhigh-level languages in the early 1960s, but many companies continued\nto write code in machine language well into the 1980s.  I bet a\nlot of people continued to write machine language until the processor,\nlike a bartender eager to close up and go home, finally kicked them\nout by switching to a risc instruction set.Ordinarily technology changes fast.  But programming languages are\ndifferent: programming languages are not just technology, but what\nprogrammers think in.  They're half technology and half religion.[6]\nAnd so the median language, meaning whatever language the median\nprogrammer uses, moves as slow as an iceberg.  Garbage collection,\nintroduced by Lisp in about 1960, is now widely considered to be\na good thing.  Runtime typing, ditto, is growing in popularity.\nLexical closures, introduced by Lisp in the early 1970s, are now,\njust barely, on the radar screen.  Macros, introduced by Lisp in the\nmid 1960s, are still terra incognita.Obviously, the median language has enormous momentum.  I'm not\nproposing that you can fight this powerful force.  What I'm proposing\nis exactly the opposite: that, like a practitioner of Aikido, you\ncan use it against your opponents.If you work for a big company, this may not be easy.  You will have\na hard time convincing the pointy-haired boss to let you build\nthings in Lisp, when he has just read in the paper that some other\nlanguage is poised, like Ada was twenty years ago, to take over\nthe world.  But if you work for a startup that doesn't have\npointy-haired bosses yet, you can, like we did, turn the Blub\nparadox to your advantage:  you can use technology that your\ncompetitors, glued immovably to the median language, will never be\nable to match.If you ever do find yourself working for a startup, here's a handy\ntip for evaluating competitors.  Read their job listings.  Everything\nelse on their site may be stock photos or the prose equivalent,\nbut the job listings have to be specific about what they want, or\nthey'll get the wrong candidates.During the years we worked on Viaweb I read a lot of job descriptions.\nA new competitor seemed to emerge out of the woodwork every month\nor so.  The first thing I would do, after checking to see if they\nhad a live online demo, was look at their job listings.  After a\ncouple years of this I could tell which companies to worry about\nand which not to.  The more of an IT flavor the job descriptions\nhad, the less dangerous the company was.  The safest kind were the\nones that wanted Oracle experience.  You never had to worry about\nthose.  You were also safe if they said they wanted C++ or Java\ndevelopers.  If they wanted Perl or Python programmers, that would\nbe a bit frightening-- that's starting to sound like a company\nwhere the technical side, at least, is run by real hackers.  If I\nhad ever seen a job posting looking for Lisp hackers, I would have\nbeen really worried.Notes[1] Viaweb at first had two parts: the editor, written in Lisp,\nwhich people used to build their sites, and the ordering system,\nwritten in C, which handled orders.  The first version was mostly\nLisp, because the ordering system was small.  Later we added two\nmore modules, an image generator written in C, and a back-office\nmanager written mostly in Perl.In January 2003, Yahoo released a new version of the editor\nwritten in C++ and Perl.  It's hard to say whether the program is no\nlonger written in Lisp, though, because to translate this program\ninto C++ they literally had to write a Lisp interpreter: the source\nfiles of all the page-generating templates are still, as far as I\nknow,  Lisp code.  (See Greenspun's Tenth Rule.)[2] Robert Morris says that I didn't need to be secretive, because\neven if our competitors had known we were using Lisp, they wouldn't\nhave understood why:  \"If they were that smart they'd already be\nprogramming in Lisp.\"[3] All languages are equally powerful in the sense of being Turing\nequivalent, but that's not the sense of the word programmers care\nabout. (No one wants to program a Turing machine.)  The kind of\npower programmers care about may not be formally definable, but\none way to explain it would be to say that it refers to features\nyou could only get in the less powerful language by writing an\ninterpreter for the more powerful language in it. If language A\nhas an operator for removing spaces from strings and language B\ndoesn't, that probably doesn't make A more powerful, because you\ncan probably write a subroutine to do it in B.  But if A supports,\nsay, recursion, and B doesn't, that's not likely to be something\nyou can fix by writing library functions.[4] Note to nerds: or possibly a lattice, narrowing toward the top;\nit's not the shape that matters here but the idea that there is at\nleast a partial order.[5] It is a bit misleading to treat macros as a separate feature.\nIn practice their usefulness is greatly enhanced by other Lisp\nfeatures like lexical closures and rest parameters.[6] As a result, comparisons of programming languages either take\nthe form of religious wars or undergraduate textbooks so determinedly\nneutral that they're really works of anthropology.  People who\nvalue their peace, or want tenure, avoid the topic.  But the question\nis only half a religious one; there is something there worth\nstudying, especially if you want to design new languages."},{"title":"Before the Startup","text":"October 2014(This essay is derived from a guest lecture in Sam Altman's startup class at\nStanford.  It's intended for college students, but much of it is\napplicable to potential founders at other ages.)One of the advantages of having kids is that when you have to give\nadvice, you can ask yourself \"what would I tell my own kids?\"  My\nkids are little, but I can imagine what I'd tell them about startups\nif they were in college, and that's what I'm going to tell you.Startups are very counterintuitive.  I'm not sure why.  Maybe it's\njust because knowledge about them hasn't permeated our culture yet.\nBut whatever the reason, starting a startup is a task where you\ncan't always trust your instincts.It's like skiing in that way.  When you first try skiing and you\nwant to slow down, your instinct is to lean back.  But if you lean\nback on skis you fly down the hill out of control.  So part of\nlearning to ski is learning to suppress that impulse.  Eventually\nyou get new habits, but at first it takes a conscious effort.  At\nfirst there's a list of things you're trying to remember as you\nstart down the hill.Startups are as unnatural as skiing, so there's a similar list for\nstartups. Here I'm going to give you the first part of it—the things\nto remember if you want to prepare yourself to start a startup.CounterintuitiveThe first item on it is the fact I already mentioned: that startups\nare so weird that if you trust your instincts, you'll make a lot\nof mistakes.  If you know nothing more than this, you may at least\npause before making them.When I was running Y Combinator I used to joke that our function\nwas to tell founders things they would ignore.  It's really true.\nBatch after batch, the YC partners warn founders about mistakes\nthey're about to make, and the founders ignore them, and then come\nback a year later and say \"I wish we'd listened.\"Why do the founders ignore the partners' advice?  Well, that's the\nthing about counterintuitive ideas: they contradict your intuitions.\nThey seem wrong.  So of course your first impulse is to disregard\nthem.  And in fact my joking description is not merely the curse\nof Y Combinator but part of its raison d'etre. If founders' instincts\nalready gave them the right answers, they wouldn't need us.  You\nonly need other people to give you advice that surprises you. That's\nwhy there are a lot of ski instructors and not many running\ninstructors.\n[1]You can, however, trust your instincts about people.  And in fact\none of the most common mistakes young founders make is not to\ndo that enough.  They get involved with people who seem impressive,\nbut about whom they feel some misgivings personally.  Later when\nthings blow up they say \"I knew there was something off about him,\nbut I ignored it because he seemed so impressive.\"If you're thinking about getting involved with someone—as a\ncofounder, an employee, an investor, or an acquirer—and you\nhave misgivings about them, trust your gut.  If someone seems\nslippery, or bogus, or a jerk, don't ignore it.This is one case where it pays to be self-indulgent. Work with\npeople you genuinely like, and you've known long enough to be sure.ExpertiseThe second counterintuitive point is that it's not that important\nto know a lot about startups.  The way to succeed in a startup is\nnot to be an expert on startups, but to be an expert on your users\nand the problem you're solving for them.\nMark Zuckerberg didn't succeed because he was an expert on startups.\nHe succeeded despite being a complete noob at startups, because he\nunderstood his users really well.If you don't know anything about, say, how to raise an angel round,\ndon't feel bad on that account.  That sort of thing you can learn\nwhen you need to, and forget after you've done it.In fact, I worry it's not merely unnecessary to learn in great\ndetail about the mechanics of startups, but possibly somewhat\ndangerous.  If I met an undergrad who knew all about convertible\nnotes and employee agreements and (God forbid) class FF stock, I\nwouldn't think \"here is someone who is way ahead of their peers.\"\nIt would set off alarms.  Because another of the characteristic\nmistakes of young founders is to go through the motions of starting\na startup.  They make up some plausible-sounding idea, raise money\nat a good valuation, rent a cool office, hire a bunch of people.\nFrom the outside that seems like what startups do.  But the next\nstep after rent a cool office and hire a bunch of people is: gradually\nrealize how completely fucked they are, because while imitating all\nthe outward forms of a startup they have neglected the one thing\nthat's actually essential: making something people want.GameWe saw this happen so often that we made up a name for it: playing\nhouse.  Eventually I realized why it was happening.  The reason\nyoung founders go through the motions of starting a startup is\nbecause that's what they've been trained to do for their whole lives\nup to that point.  Think about what you have to do to get into\ncollege, for example.  Extracurricular activities, check.  Even in\ncollege classes most of the work is as artificial as running laps.I'm not attacking the educational system for being this way. There\nwill always be a certain amount of fakeness in the work you do when\nyou're being taught something, and if you measure their performance\nit's inevitable that people will exploit the difference to the point\nwhere much of what you're measuring is artifacts of the fakeness.I confess I did it myself in college. I found that in a lot of\nclasses there might only be 20 or 30 ideas that were the right shape\nto make good exam questions.  The way I studied for exams in these\nclasses was not (except incidentally) to master the material taught\nin the class, but to make a list of potential exam questions and\nwork out the answers in advance. When I walked into the final, the\nmain thing I'd be feeling was curiosity about which of my questions\nwould turn up on the exam.  It was like a game.It's not surprising that after being trained for their whole lives\nto play such games, young founders' first impulse on starting a\nstartup is to try to figure out the tricks for winning at this new\ngame. Since fundraising appears to be the measure of success for\nstartups (another classic noob mistake), they always want to know what the\ntricks are for convincing investors.  We tell them the best way to\nconvince investors is to make a startup\nthat's actually doing well, meaning growing fast, and then simply\ntell investors so.  Then they want to know what the tricks are for\ngrowing fast.  And we have to tell them the best way to do that is\nsimply to make something people want.So many of the conversations YC partners have with young founders\nbegin with the founder asking \"How do we...\" and the partner replying\n\"Just...\"Why do the founders always make things so complicated?  The reason,\nI realized, is that they're looking for the trick.So this is the third counterintuitive thing to remember about\nstartups: starting a startup is where gaming the system stops\nworking.  Gaming the system may continue to work if you go to work\nfor a big company. Depending on how broken the company is, you can\nsucceed by sucking up to the right people, giving the impression\nof productivity, and so on.\n[2]\nBut that doesn't work with startups.\nThere is no boss to trick, only users, and all users care about is\nwhether your product does what they want. Startups are as impersonal\nas physics.  You have to make something people want, and you prosper\nonly to the extent you do.The dangerous thing is, faking does work to some degree on investors.\nIf you're super good at sounding like you know what you're talking\nabout, you can fool investors for at least one and perhaps even two\nrounds of funding.  But it's not in your interest to.  The company\nis ultimately doomed.  All you're doing is wasting your own time\nriding it down.So stop looking for the trick. There are tricks in startups, as\nthere are in any domain, but they are an order of magnitude less\nimportant than solving the real problem. A founder who knows nothing\nabout fundraising but has made something users love will have an\neasier time raising money than one who knows every trick in the\nbook but has a flat usage graph. And more importantly, the founder\nwho has made something users love is the one who will go on to\nsucceed after raising the money.Though in a sense it's bad news in that you're deprived of one of\nyour most powerful weapons, I think it's exciting that gaming the\nsystem stops working when you start a startup.  It's exciting that\nthere even exist parts of the world where you win by doing good\nwork.  Imagine how depressing the world would be if it were all\nlike school and big companies, where you either have to spend a lot\nof time on bullshit things or lose to people who do.\n[3]\nI would\nhave been delighted if I'd realized in college that there were parts\nof the real world where gaming the system mattered less than others,\nand a few where it hardly mattered at all.  But there are, and this\nvariation is one of the most important things to consider when\nyou're thinking about your future.  How do you win in each type of\nwork, and what would you like to win by doing?\n[4]All-ConsumingThat brings us to our fourth counterintuitive point: startups are\nall-consuming.  If you start a startup, it will take over your life\nto a degree you cannot imagine.  And if your startup succeeds, it\nwill take over your life for a long time: for several years at the\nvery least, maybe for a decade, maybe for the rest of your working\nlife.  So there is a real opportunity cost here.Larry Page may seem to have an enviable life, but there are aspects\nof it that are unenviable.  Basically at 25 he started running as\nfast as he could and it must seem to him that he hasn't stopped to\ncatch his breath since.  Every day new shit happens in the Google\nempire that only the CEO can deal with, and he, as CEO, has to deal\nwith it.  If he goes on vacation for even a week, a whole week's\nbacklog of shit accumulates.  And he has to bear this uncomplainingly,\npartly because as the company's daddy he can never show fear or\nweakness, and partly because billionaires get less than zero sympathy\nif they talk about having difficult lives.  Which has the strange\nside effect that the difficulty of being a successful startup founder\nis concealed from almost everyone except those who've done it.Y Combinator has now funded several companies that can be called\nbig successes, and in every single case the founders say the same\nthing.  It never gets any easier.  The nature of the problems change.\nYou're worrying about construction delays at your London office\ninstead of the broken air conditioner in your studio apartment.\nBut the total volume of worry never decreases; if anything it\nincreases.Starting a successful startup is similar to having kids in that\nit's like a button you push that changes your life irrevocably.\nAnd while it's truly wonderful having kids, there are a lot of\nthings that are easier to do before you have them than after.  Many\nof which will make you a better parent when you do have kids. And\nsince you can delay pushing the button for a while, most people in\nrich countries do.Yet when it comes to startups, a lot of people seem to think they're\nsupposed to start them while they're still in college.  Are you\ncrazy?  And what are the universities thinking?  They go out of\ntheir way to ensure their students are well supplied with contraceptives,\nand yet they're setting up entrepreneurship programs and startup\nincubators left and right.To be fair, the universities have their hand forced here.  A lot\nof incoming students are interested in startups.  Universities are,\nat least de facto, expected to prepare them for their careers.  So\nstudents who want to start startups hope universities can teach\nthem about startups.  And whether universities can do this or not,\nthere's some pressure to claim they can, lest they lose applicants\nto other universities that do.Can universities teach students about startups?  Yes and no.  They\ncan teach students about startups, but as I explained before, this\nis not what you need to know.  What you need to learn about are the\nneeds of your own users, and you can't do that until you actually\nstart the company.\n[5]\nSo starting a startup is intrinsically\nsomething you can only really learn by doing it.  And it's impossible\nto do that in college, for the reason I just explained: startups\ntake over your life.  You can't start a startup for real as a\nstudent, because if you start a startup for real you're not a student\nanymore. You may be nominally a student for a bit, but you won't even\nbe that for long.\n[6]Given this dichotomy, which of the two paths should you take?  Be\na real student and not start a startup, or start a real startup and\nnot be a student?  I can answer that one for you. Do not start a\nstartup in college.  How to start a startup is just a subset of a\nbigger problem you're trying to solve: how to have a good life.\nAnd though starting a startup can be part of a good life for a lot\nof ambitious people, age 20 is not the optimal time to do it.\nStarting a startup is like a brutally fast depth-first search.  Most\npeople should still be searching breadth-first at 20.You can do things in your early 20s that you can't do as well before\nor after, like plunge deeply into projects on a whim and travel\nsuper cheaply with no sense of a deadline.  For unambitious people,\nthis sort of thing is the dreaded \"failure to launch,\" but for the\nambitious ones it can be an incomparably valuable sort of exploration.\nIf you start a startup at 20 and you're sufficiently successful,\nyou'll never get to do it.\n[7]Mark Zuckerberg will never get to bum around a foreign country.  He\ncan do other things most people can't, like charter jets to fly him\nto foreign countries. But success has taken a lot of the serendipity\nout of his life. Facebook is running him as much as he's running\nFacebook. And while it can be very cool to be in the grip of a\nproject you consider your life's work, there are advantages to\nserendipity too, especially early in life.  Among other things it\ngives you more options to choose your life's work from.There's not even a tradeoff here. You're not sacrificing anything\nif you forgo starting a startup at 20, because you're more likely\nto succeed if you wait.  In the unlikely case that you're 20 and\none of your side projects takes off like Facebook did, you'll face\na choice of running with it or not, and it may be reasonable to run\nwith it.  But the usual way startups take off is for the founders\nto make them take off, and it's gratuitously\nstupid to do that at 20.TryShould you do it at any age?  I realize I've made startups sound\npretty hard.  If I haven't, let me try again: starting a startup\nis really hard.  What if it's too hard?  How can you tell if you're\nup to this challenge?The answer is the fifth counterintuitive point: you can't tell. Your\nlife so far may have given you some idea what your prospects might\nbe if you tried to become a mathematician, or a professional football\nplayer.  But unless you've had a very strange life you haven't done\nmuch that was like being a startup founder.\nStarting a startup will change you a lot.  So what you're trying\nto estimate is not just what you are, but what you could grow into,\nand who can do that?For the past 9 years it was my job to predict whether people would\nhave what it took to start successful startups.  It was easy to\ntell how smart they were, and most people reading this will be over\nthat threshold.  The hard part was predicting how tough and ambitious they would become.  There\nmay be no one who has more experience at trying to predict that,\nso I can tell you how much an expert can know about it, and the\nanswer is: not much.  I learned to keep a completely open mind about\nwhich of the startups in each batch would turn out to be the stars.The founders sometimes think they know. Some arrive feeling sure\nthey will ace Y Combinator as they've aced every one of the (few,\nartificial, easy) tests they've faced in life so far.  Others arrive\nwondering how they got in and hoping YC doesn't discover whatever\nmistake caused it to accept them.  But there is little correlation\nbetween founders' initial attitudes and how well their companies\ndo.I've read that the same is true in the military—that the\nswaggering recruits are no more likely to turn out to be really\ntough than the quiet ones. And probably for the same reason: that\nthe tests involved are so different from the ones in their previous\nlives.If you're absolutely terrified of starting a startup, you probably\nshouldn't do it.  But if you're merely unsure whether you're up to\nit, the only way to find out is to try.  Just not now.IdeasSo if you want to start a startup one day, what should you do in\ncollege?  There are only two things you need initially: an idea and\ncofounders.  And the m.o. for getting both is the same.  Which leads\nto our sixth and last counterintuitive point: that the way to get\nstartup ideas is not to try to think of startup ideas.I've written a whole essay on this,\nso I won't repeat it all here.  But the short version is that if\nyou make a conscious effort to think of startup ideas, the ideas\nyou come up with will not merely be bad, but bad and plausible-sounding,\nmeaning you'll waste a lot of time on them before realizing they're\nbad.The way to come up with good startup ideas is to take a step back.\nInstead of making a conscious effort to think of startup ideas,\nturn your mind into the type that startup ideas form in without any\nconscious effort.  In fact, so unconsciously that you don't even\nrealize at first that they're startup ideas.This is not only possible, it's how Apple, Yahoo, Google, and\nFacebook all got started.  None of these companies were even meant\nto be companies at first.  They were all just side projects.  The\nbest startups almost have to start as side projects, because great\nideas tend to be such outliers that your conscious mind would reject\nthem as ideas for companies.Ok, so how do you turn your mind into the type that startup ideas\nform in unconsciously?  (1) Learn a lot about things that matter,\nthen (2) work on problems that interest you (3) with people you\nlike and respect.  The third part, incidentally, is how you get\ncofounders at the same time as the idea.The first time I wrote that paragraph, instead of \"learn a lot about\nthings that matter,\" I wrote \"become good at some technology.\" But\nthat prescription, though sufficient, is too narrow.  What was\nspecial about Brian Chesky and Joe Gebbia was not that they were\nexperts in technology.  They were good at design, and perhaps even\nmore importantly, they were good at organizing groups and making\nprojects happen.  So you don't have to work on technology per se,\nso long as you work on problems demanding enough to stretch you.What kind of problems are those?  That is very hard to answer in\nthe general case.  History is full of examples of young people who\nwere working on important problems that no\none else at the time thought were important, and in particular\nthat their parents didn't think were important.  On the other hand,\nhistory is even fuller of examples of parents who thought their\nkids were wasting their time and who were right.  So how do you\nknow when you're working on real stuff?\n[8]I know how I know.  Real problems are interesting, and I am\nself-indulgent in the sense that I always want to work on interesting\nthings, even if no one else cares about them (in fact, especially\nif no one else cares about them), and find it very hard to make\nmyself work on boring things, even if they're supposed to be\nimportant.My life is full of case after case where I worked on something just\nbecause it seemed interesting, and it turned out later to be useful\nin some worldly way.  Y\nCombinator itself was something I only did because it seemed\ninteresting. So I seem to have some sort of internal compass that\nhelps me out.  But I don't know what other people have in their\nheads. Maybe if I think more about this I can come up with heuristics\nfor recognizing genuinely interesting problems, but for the moment\nthe best I can offer is the hopelessly question-begging advice that\nif you have a taste for genuinely interesting problems, indulging\nit energetically is the best way to prepare yourself for a startup.\nAnd indeed, probably also the best way to live.\n[9]But although I can't explain in the general case what counts as an\ninteresting problem, I can tell you about a large subset of them.\nIf you think of technology as something that's spreading like a\nsort of fractal stain, every moving point on the edge represents\nan interesting problem.  So one guaranteed way to turn your mind\ninto the type that has good startup ideas is to get yourself to the\nleading edge of some technology—to cause yourself, as Paul\nBuchheit put it, to \"live in the future.\" When you reach that point,\nideas that will seem to other people uncannily prescient will seem\nobvious to you.  You may not realize they're startup ideas, but\nyou'll know they're something that ought to exist.For example, back at Harvard in the mid 90s a fellow grad student\nof my friends Robert and Trevor wrote his own voice over IP software.\nHe didn't mean it to be a startup, and he never tried to turn it\ninto one.  He just wanted to talk to his girlfriend in Taiwan without\npaying for long distance calls, and since he was an expert on\nnetworks it seemed obvious to him that the way to do it was turn\nthe sound into packets and ship it over the Internet. He never did\nany more with his software than talk to his girlfriend, but this\nis exactly the way the best startups get started.So strangely enough the optimal thing to do in college if you want\nto be a successful startup founder is not some sort of new, vocational\nversion of college focused on \"entrepreneurship.\" It's the classic\nversion of college as education for its own sake. If you want to\nstart a startup after college, what you should do in college is\nlearn powerful things.  And if you have genuine intellectual\ncuriosity, that's what you'll naturally tend to do if you just\nfollow your own inclinations.\n[10]The component of entrepreneurship that really matters is domain\nexpertise.  The way to become Larry Page was to become an expert\non search. And the way to become an expert on search was to be\ndriven by genuine curiosity, not some ulterior motive.At its best, starting a startup is merely an ulterior motive for\ncuriosity.  And you'll do it best if you introduce the ulterior\nmotive toward the end of the process.So here is the ultimate advice for young would-be startup founders,\nboiled down to two words: just learn.Notes[1]\nSome founders listen more than others, and this tends to be a\npredictor of success. One of the things I\nremember about the Airbnbs during YC is how intently they listened.[2]\nIn fact, this is one of the reasons startups are possible.  If\nbig companies weren't plagued by internal inefficiencies, they'd\nbe proportionately more effective, leaving less room for startups.[3]\nIn a startup you have to spend a lot of time on schleps, but this sort of work is merely\nunglamorous, not bogus.[4]\nWhat should you do if your true calling is gaming the system?\nManagement consulting.[5]\nThe company may not be incorporated, but if you start to get\nsignificant numbers of users, you've started it, whether you realize\nit yet or not.[6]\nIt shouldn't be that surprising that colleges can't teach\nstudents how to be good startup founders, because they can't teach\nthem how to be good employees either.The way universities \"teach\" students how to be employees is to\nhand off the task to companies via internship programs.  But you\ncouldn't do the equivalent thing for startups, because by definition\nif the students did well they would never come back.[7]\nCharles Darwin was 22 when he received an invitation to travel\naboard the HMS Beagle as a naturalist.  It was only because he was\notherwise unoccupied, to a degree that alarmed his family, that he\ncould accept it. And yet if he hadn't we probably would not know\nhis name.[8]\nParents can sometimes be especially conservative in this\ndepartment.  There are some whose definition of important problems\nincludes only those on the critical path to med school.[9]\nI did manage to think of a heuristic for detecting whether you\nhave a taste for interesting ideas: whether you find known boring\nideas intolerable.  Could you endure studying literary theory, or\nworking in middle management at a large company?[10]\nIn fact, if your goal is to start a startup, you can stick\neven more closely to the ideal of a liberal education than past\ngenerations have. Back when students focused mainly on getting a\njob after college, they thought at least a little about how the\ncourses they took might look to an employer.  And perhaps even\nworse, they might shy away from taking a difficult class lest they\nget a low grade, which would harm their all-important GPA.  Good\nnews: users don't care what your GPA\nwas.  And I've never heard of investors caring either.  Y Combinator\ncertainly never asks what classes you took in college or what grades\nyou got in them.Thanks to Sam Altman, Paul Buchheit, John Collison, Patrick\nCollison, Jessica Livingston, Robert Morris, Geoff Ralston, and\nFred Wilson for reading drafts of this."},{"title":"Being Popular","text":"May 2001(This article was written as a kind of business plan for a\nnew language.\nSo it is missing (because it takes for granted) the most important\nfeature of a good programming language: very powerful abstractions.)A friend of mine once told an eminent operating systems\nexpert that he wanted to design a really good\nprogramming language.  The expert told him that it would be a\nwaste of time, that programming languages don't become popular\nor unpopular based on their merits, and so no matter how\ngood his language was, no one would use it.  At least, that\nwas what had happened to the language he had designed.What does make a language popular?  Do popular\nlanguages deserve their popularity?  Is it worth trying to\ndefine a good programming language?  How would you do it?I think the answers to these questions can be found by looking\nat hackers, and learning what they want.  Programming\nlanguages are for hackers, and a programming language\nis good as a programming language (rather than, say, an\nexercise in denotational semantics or compiler design)\nif and only if hackers like it.1 The Mechanics of PopularityIt's true, certainly, that most people don't choose programming\nlanguages simply based on their merits.  Most programmers are told\nwhat language to use by someone else.  And yet I think the effect\nof such external factors on the popularity of programming languages\nis not as great as it's sometimes thought to be. I think a bigger\nproblem is that a hacker's idea of a good programming language is\nnot the same as most language designers'.Between the two, the hacker's opinion is the one that matters.\nProgramming languages are not theorems. They're tools, designed\nfor people, and they have to be designed to suit human strengths\nand weaknesses as much as shoes have to be designed for human feet.\nIf a shoe pinches when you put it on, it's a bad shoe, however\nelegant it may be as a piece of sculpture.It may be that the majority of programmers can't tell a good language\nfrom a bad one. But that's no different with any other tool. It\ndoesn't mean that it's a waste of time to try designing a good\nlanguage. Expert hackers\ncan tell a good language when they see\none, and they'll use it. Expert hackers are a tiny minority,\nadmittedly, but that tiny minority write all the good software,\nand their influence is such that the rest of the programmers will\ntend to use whatever language they use. Often, indeed, it is not\nmerely influence but command: often the expert hackers are the very\npeople who, as their bosses or faculty advisors, tell the other\nprogrammers what language to use.The opinion of expert hackers is not the only force that determines\nthe relative popularity of programming languages-- legacy software\n(Cobol) and hype (Ada, Java) also play a role-- but I think it is\nthe most powerful force over the long term. Given an initial critical\nmass and enough time, a programming language probably becomes about\nas popular as it deserves to be. And popularity further separates\ngood languages from bad ones, because feedback from real live users\nalways leads to improvements. Look at how much any popular language\nhas changed during its life. Perl and Fortran are extreme cases,\nbut even Lisp has changed a lot. Lisp 1.5 didn't have macros, for\nexample; these evolved later, after hackers at MIT had spent a\ncouple years using Lisp to write real programs. [1]So whether or not a language has to be good to be popular, I think\na language has to be popular to be good. And it has to stay popular\nto stay good. The state of the art in programming languages doesn't\nstand still. And yet the Lisps we have today are still pretty much\nwhat they had at MIT in the mid-1980s, because that's the last time\nLisp had a sufficiently large and demanding user base.Of course, hackers have to know about a language before they can\nuse it. How are they to hear? From other hackers. But there has to\nbe some initial group of hackers using the language for others even\nto hear about it. I wonder how large this group has to be; how many\nusers make a critical mass? Off the top of my head, I'd say twenty.\nIf a language had twenty separate users, meaning twenty users who\ndecided on their own to use it, I'd consider it to be real.Getting there can't be easy. I would not be surprised if it is\nharder to get from zero to twenty than from twenty to a thousand.\nThe best way to get those initial twenty users is probably to use\na trojan horse: to give people an application they want, which\nhappens to be written in the new language.2 External FactorsLet's start by acknowledging one external factor that does affect\nthe popularity of a programming language. To become popular, a\nprogramming language has to be the scripting language of a popular\nsystem. Fortran and Cobol were the scripting languages of early\nIBM mainframes. C was the scripting language of Unix, and so, later,\nwas Perl. Tcl is the scripting language of Tk. Java and Javascript\nare intended to be the scripting languages of web browsers.Lisp is not a massively popular language because it is not the\nscripting language of a massively popular system. What popularity\nit retains dates back to the 1960s and 1970s, when it was the\nscripting language of MIT. A lot of the great programmers of the\nday were associated with MIT at some point. And in the early 1970s,\nbefore C, MIT's dialect of Lisp, called MacLisp, was one of the\nonly programming languages a serious hacker would want to use.Today Lisp is the scripting language of two moderately popular\nsystems, Emacs and Autocad, and for that reason I suspect that most\nof the Lisp programming done today is done in Emacs Lisp or AutoLisp.Programming languages don't exist in isolation. To hack is a\ntransitive verb-- hackers are usually hacking something-- and in\npractice languages are judged relative to whatever they're used to\nhack. So if you want to design a popular language, you either have\nto supply more than a language, or you have to design your language\nto replace the scripting language of some existing system.Common Lisp is unpopular partly because it's an orphan. It did\noriginally come with a system to hack: the Lisp Machine. But Lisp\nMachines (along with parallel computers) were steamrollered by the\nincreasing power of general purpose processors in the 1980s. Common\nLisp might have remained popular if it had been a good scripting\nlanguage for Unix. It is, alas, an atrociously bad one.One way to describe this situation is to say that a language isn't\njudged on its own merits. Another view is that a programming language\nreally isn't a programming language unless it's also the scripting\nlanguage of something. This only seems unfair if it comes as a\nsurprise. I think it's no more unfair than expecting a programming\nlanguage to have, say, an implementation. It's just part of what\na programming language is.A programming language does need a good implementation, of course,\nand this must be free. Companies will pay for software, but individual\nhackers won't, and it's the hackers you need to attract.A language also needs to have a book about it. The book should be\nthin, well-written, and full of good examples. K&R is the ideal\nhere. At the moment I'd almost say that a language has to have a\nbook published by O'Reilly. That's becoming the test of mattering\nto hackers.There should be online documentation as well. In fact, the book\ncan start as online documentation. But I don't think that physical\nbooks are outmoded yet. Their format is convenient, and the de\nfacto censorship imposed by publishers is a useful if imperfect\nfilter. Bookstores are one of the most important places for learning\nabout new languages.3 BrevityGiven that you can supply the three things any language needs-- a\nfree implementation, a book, and something to hack-- how do you\nmake a language that hackers will like?One thing hackers like is brevity. Hackers are lazy, in the same\nway that mathematicians and modernist architects are lazy: they\nhate anything extraneous. It would not be far from the truth to\nsay that a hacker about to write a program decides what language\nto use, at least subconsciously, based on the total number of\ncharacters he'll have to type. If this isn't precisely how hackers\nthink, a language designer would do well to act as if it were.It is a mistake to try to baby the user with long-winded expressions\nthat are meant to resemble English. Cobol is notorious for this\nflaw. A hacker would consider being asked to writeadd x to y giving zinstead ofz = x+yas something between an insult to his intelligence and a sin against\nGod.It has sometimes been said that Lisp should use first and rest\ninstead of car and cdr, because it would make programs easier to\nread. Maybe for the first couple hours. But a hacker can learn\nquickly enough that car means the first element of a list and cdr\nmeans the rest. Using first and rest means 50% more typing. And\nthey are also different lengths, meaning that the arguments won't\nline up when they're called, as car and cdr often are, in successive\nlines. I've found that it matters a lot how code lines up on the\npage. I can barely read Lisp code when it is set in a variable-width\nfont, and friends say this is true for other languages too.Brevity is one place where strongly typed languages lose. All other\nthings being equal, no one wants to begin a program with a bunch\nof declarations. Anything that can be implicit, should be.The individual tokens should be short as well. Perl and Common Lisp\noccupy opposite poles on this question. Perl programs can be almost\ncryptically dense, while the names of built-in Common Lisp operators\nare comically long. The designers of Common Lisp probably expected\nusers to have text editors that would type these long names for\nthem. But the cost of a long name is not just the cost of typing\nit. There is also the cost of reading it, and the cost of the space\nit takes up on your screen.4 HackabilityThere is one thing more important than brevity to a hacker: being\nable to do what you want. In the history of programming languages\na surprising amount of effort has gone into preventing programmers\nfrom doing things considered to be improper. This is a dangerously\npresumptuous plan. How can the language designer know what the\nprogrammer is going to need to do? I think language designers would\ndo better to consider their target user to be a genius who will\nneed to do things they never anticipated, rather than a bumbler\nwho needs to be protected from himself. The bumbler will shoot\nhimself in the foot anyway. You may save him from referring to\nvariables in another package, but you can't save him from writing\na badly designed program to solve the wrong problem, and taking\nforever to do it.Good programmers often want to do dangerous and unsavory things.\nBy unsavory I mean things that go behind whatever semantic facade\nthe language is trying to present: getting hold of the internal\nrepresentation of some high-level abstraction, for example. Hackers\nlike to hack, and hacking means getting inside things and second\nguessing the original designer.Let yourself be second guessed. When you make any tool, people use\nit in ways you didn't intend, and this is especially true of a\nhighly articulated tool like a programming language. Many a hacker\nwill want to tweak your semantic model in a way that you never\nimagined. I say, let them; give the programmer access to as much\ninternal stuff as you can without endangering runtime systems like\nthe garbage collector.In Common Lisp I have often wanted to iterate through the fields\nof a struct-- to comb out references to a deleted object, for example,\nor find fields that are uninitialized. I know the structs are just\nvectors underneath. And yet I can't write a general purpose function\nthat I can call on any struct. I can only access the fields by\nname, because that's what a struct is supposed to mean.A hacker may only want to subvert the intended model of things once\nor twice in a big program. But what a difference it makes to be\nable to. And it may be more than a question of just solving a\nproblem. There is a kind of pleasure here too. Hackers share the\nsurgeon's secret pleasure in poking about in gross innards, the\nteenager's secret pleasure in popping zits. [2] For boys, at least,\ncertain kinds of horrors are fascinating. Maxim magazine publishes\nan annual volume of photographs, containing a mix of pin-ups and\ngrisly accidents. They know their audience.Historically, Lisp has been good at letting hackers have their way.\nThe political correctness of Common Lisp is an aberration. Early\nLisps let you get your hands on everything. A good deal of that\nspirit is, fortunately, preserved in macros. What a wonderful thing,\nto be able to make arbitrary transformations on the source code.Classic macros are a real hacker's tool-- simple, powerful, and\ndangerous. It's so easy to understand what they do: you call a\nfunction on the macro's arguments, and whatever it returns gets\ninserted in place of the macro call. Hygienic macros embody the\nopposite principle. They try to protect you from understanding what\nthey're doing. I have never heard hygienic macros explained in one\nsentence. And they are a classic example of the dangers of deciding\nwhat programmers are allowed to want. Hygienic macros are intended\nto protect me from variable capture, among other things, but variable\ncapture is exactly what I want in some macros.A really good language should be both clean and dirty: cleanly\ndesigned, with a small core of well understood and highly orthogonal\noperators, but dirty in the sense that it lets hackers have their\nway with it. C is like this. So were the early Lisps. A real hacker's\nlanguage will always have a slightly raffish character.A good programming language should have features that make the kind\nof people who use the phrase \"software engineering\" shake their\nheads disapprovingly. At the other end of the continuum are languages\nlike Ada and Pascal, models of propriety that are good for teaching\nand not much else.5 Throwaway ProgramsTo be attractive to hackers, a language must be good for writing\nthe kinds of programs they want to write. And that means, perhaps\nsurprisingly, that it has to be good for writing throwaway programs.A throwaway program is a program you write quickly for some limited\ntask: a program to automate some system administration task, or\ngenerate test data for a simulation, or convert data from one format\nto another. The surprising thing about throwaway programs is that,\nlike the \"temporary\" buildings built at so many American universities\nduring World War II, they often don't get thrown away. Many evolve\ninto real programs, with real features and real users.I have a hunch that the best big programs begin life this way,\nrather than being designed big from the start, like the Hoover Dam.\nIt's terrifying to build something big from scratch. When people\ntake on a project that's too big, they become overwhelmed. The\nproject either gets bogged down, or the result is sterile and\nwooden: a shopping mall rather than a real downtown, Brasilia rather\nthan Rome, Ada rather than C.Another way to get a big program is to start with a throwaway\nprogram and keep improving it. This approach is less daunting, and\nthe design of the program benefits from evolution. I think, if one\nlooked, that this would turn out to be the way most big programs\nwere developed. And those that did evolve this way are probably\nstill written in whatever language they were first written in,\nbecause it's rare for a program to be ported, except for political\nreasons. And so, paradoxically, if you want to make a language that\nis used for big systems, you have to make it good for writing\nthrowaway programs, because that's where big systems come from.Perl is a striking example of this idea. It was not only designed\nfor writing throwaway programs, but was pretty much a throwaway\nprogram itself. Perl began life as a collection of utilities for\ngenerating reports, and only evolved into a programming language\nas the throwaway programs people wrote in it grew larger. It was\nnot until Perl 5 (if then) that the language was suitable for\nwriting serious programs, and yet it was already massively popular.What makes a language good for throwaway programs? To start with,\nit must be readily available. A throwaway program is something that\nyou expect to write in an hour. So the language probably must\nalready be installed on the computer you're using. It can't be\nsomething you have to install before you use it. It has to be there.\nC was there because it came with the operating system. Perl was\nthere because it was originally a tool for system administrators,\nand yours had already installed it.Being available means more than being installed, though. An\ninteractive language, with a command-line interface, is more\navailable than one that you have to compile and run separately. A\npopular programming language should be interactive, and start up\nfast.Another thing you want in a throwaway program is brevity. Brevity\nis always attractive to hackers, and never more so than in a program\nthey expect to turn out in an hour.6 LibrariesOf course the ultimate in brevity is to have the program already\nwritten for you, and merely to call it. And this brings us to what\nI think will be an increasingly important feature of programming\nlanguages: library functions. Perl wins because it has large\nlibraries for manipulating strings. This class of library functions\nare especially important for throwaway programs, which are often\noriginally written for converting or extracting data.  Many Perl\nprograms probably begin as just a couple library calls stuck\ntogether.I think a lot of the advances that happen in programming languages\nin the next fifty years will have to do with library functions. I\nthink future programming languages will have libraries that are as\ncarefully designed as the core language. Programming language design\nwill not be about whether to make your language strongly or weakly\ntyped, or object oriented, or functional, or whatever, but about\nhow to design great libraries. The kind of language designers who\nlike to think about how to design type systems may shudder at this.\nIt's almost like writing applications! Too bad. Languages are for\nprogrammers, and libraries are what programmers need.It's hard to design good libraries. It's not simply a matter of\nwriting a lot of code. Once the libraries get too big, it can\nsometimes take longer to find the function you need than to write\nthe code yourself. Libraries need to be designed using a small set\nof orthogonal operators, just like the core language. It ought to\nbe possible for the programmer to guess what library call will do\nwhat he needs.Libraries are one place Common Lisp falls short. There are only\nrudimentary libraries for manipulating strings, and almost none\nfor talking to the operating system. For historical reasons, Common\nLisp tries to pretend that the OS doesn't exist. And because you\ncan't talk to the OS, you're unlikely to be able to write a serious\nprogram using only the built-in operators in Common Lisp. You have\nto use some implementation-specific hacks as well, and in practice\nthese tend not to give you everything you want. Hackers would think\na lot more highly of Lisp if Common Lisp had powerful string\nlibraries and good OS support.7 SyntaxCould a language with Lisp's syntax, or more precisely, lack of\nsyntax, ever become popular? I don't know the answer to this\nquestion. I do think that syntax is not the main reason Lisp isn't\ncurrently popular. Common Lisp has worse problems than unfamiliar\nsyntax. I know several programmers who are comfortable with prefix\nsyntax and yet use Perl by default, because it has powerful string\nlibraries and can talk to the os.There are two possible problems with prefix notation: that it is\nunfamiliar to programmers, and that it is not dense enough. The\nconventional wisdom in the Lisp world is that the first problem is\nthe real one. I'm not so sure. Yes, prefix notation makes ordinary\nprogrammers panic. But I don't think ordinary programmers' opinions\nmatter. Languages become popular or unpopular based on what expert\nhackers think of them, and I think expert hackers might be able to\ndeal with prefix notation. Perl syntax can be pretty incomprehensible,\nbut that has not stood in the way of Perl's popularity. If anything\nit may have helped foster a Perl cult.A more serious problem is the diffuseness of prefix notation. For\nexpert hackers, that really is a problem. No one wants to write\n(aref a x y) when they could write a[x,y].In this particular case there is a way to finesse our way out of\nthe problem. If we treat data structures as if they were functions\non indexes, we could write (a x y) instead, which is even shorter\nthan the Perl form. Similar tricks may shorten other types of\nexpressions.We can get rid of (or make optional) a lot of parentheses by making\nindentation significant. That's how programmers read code anyway:\nwhen indentation says one thing and delimiters say another, we go\nby the indentation. Treating indentation as significant would\neliminate this common source of bugs as well as making programs\nshorter.Sometimes infix syntax is easier to read. This is especially true\nfor math expressions. I've used Lisp my whole programming life and\nI still don't find prefix math expressions natural. And yet it is\nconvenient, especially when you're generating code, to have operators\nthat take any number of arguments. So if we do have infix syntax,\nit should probably be implemented as some kind of read-macro.I don't think we should be religiously opposed to introducing syntax\ninto Lisp, as long as it translates in a well-understood way into\nunderlying s-expressions. There is already a good deal of syntax\nin Lisp. It's not necessarily bad to introduce more, as long as no\none is forced to use it. In Common Lisp, some delimiters are reserved\nfor the language, suggesting that at least some of the designers\nintended to have more syntax in the future.One of the most egregiously unlispy pieces of syntax in Common Lisp\noccurs in format strings; format is a language in its own right,\nand that language is not Lisp. If there were a plan for introducing\nmore syntax into Lisp, format specifiers might be able to be included\nin it. It would be a good thing if macros could generate format\nspecifiers the way they generate any other kind of code.An eminent Lisp hacker told me that his copy of CLTL falls open to\nthe section format. Mine too. This probably indicates room for\nimprovement. It may also mean that programs do a lot of I/O.8 EfficiencyA good language, as everyone knows, should generate fast code. But\nin practice I don't think fast code comes primarily from things\nyou do in the design of the language. As Knuth pointed out long\nago, speed only matters in certain critical bottlenecks.  And as\nmany programmers have observed since, one is very often mistaken\nabout where these bottlenecks are.So, in practice, the way to get fast code is to have a very good\nprofiler, rather than by, say, making the language strongly typed.\nYou don't need to know the type of every argument in every call in\nthe program. You do need to be able to declare the types of arguments\nin the bottlenecks. And even more, you need to be able to find out\nwhere the bottlenecks are.One complaint people have had with Lisp is that it's hard to tell\nwhat's expensive. This might be true. It might also be inevitable,\nif you want to have a very abstract language. And in any case I\nthink good profiling would go a long way toward fixing the problem:\nyou'd soon learn what was expensive.Part of the problem here is social. Language designers like to\nwrite fast compilers. That's how they measure their skill. They\nthink of the profiler as an add-on, at best. But in practice a good\nprofiler may do more to improve the speed of actual programs written\nin the language than a compiler that generates fast code. Here,\nagain, language designers are somewhat out of touch with their\nusers. They do a really good job of solving slightly the wrong\nproblem.It might be a good idea to have an active profiler-- to push\nperformance data to the programmer instead of waiting for him to\ncome asking for it. For example, the editor could display bottlenecks\nin red when the programmer edits the source code. Another approach\nwould be to somehow represent what's happening in running programs.\nThis would be an especially big win in server-based applications,\nwhere you have lots of running programs to look at. An active\nprofiler could show graphically what's happening in memory as a\nprogram's running, or even make sounds that tell what's happening.Sound is a good cue to problems. In one place I worked, we had a\nbig board of dials showing what was happening to our web servers.\nThe hands were moved by little servomotors that made a slight noise\nwhen they turned. I couldn't see the board from my desk, but I\nfound that I could tell immediately, by the sound, when there was\na problem with a server.It might even be possible to write a profiler that would automatically\ndetect inefficient algorithms. I would not be surprised if certain\npatterns of memory access turned out to be sure signs of bad\nalgorithms. If there were a little guy running around inside the\ncomputer executing our programs, he would probably have as long\nand plaintive a tale to tell about his job as a federal government\nemployee. I often have a feeling that I'm sending the processor on\na lot of wild goose chases, but I've never had a good way to look\nat what it's doing.A number of Lisps now compile into byte code, which is then executed\nby an interpreter. This is usually done to make the implementation\neasier to port, but it could be a useful language feature. It might\nbe a good idea to make the byte code an official part of the\nlanguage, and to allow programmers to use inline byte code in\nbottlenecks. Then such optimizations would be portable too.The nature of speed, as perceived by the end-user, may be changing.\nWith the rise of server-based applications, more and more programs\nmay turn out to be i/o-bound. It will be worth making i/o fast.\nThe language can help with straightforward measures like simple,\nfast, formatted output functions, and also with deep structural\nchanges like caching and persistent objects.Users are interested in response time. But another kind of efficiency\nwill be increasingly important: the number of simultaneous users\nyou can support per processor. Many of the interesting applications\nwritten in the near future will be server-based, and the number of\nusers per server is the critical question for anyone hosting such\napplications. In the capital cost of a business offering a server-based\napplication, this is the divisor.For years, efficiency hasn't mattered much in most end-user\napplications. Developers have been able to assume that each user\nwould have an increasingly powerful processor sitting on their\ndesk. And by Parkinson's Law, software has expanded to use the\nresources available. That will change with server-based applications.\nIn that world, the hardware and software will be supplied together.\nFor companies that offer server-based applications, it will make\na very big difference to the bottom line how many users they can\nsupport per server.In some applications, the processor will be the limiting factor,\nand execution speed will be the most important thing to optimize.\nBut often memory will be the limit; the number of simultaneous\nusers will be determined by the amount of memory you need for each\nuser's data. The language can help here too. Good support for\nthreads will enable all the users to share a single heap. It may\nalso help to have persistent objects and/or language level support\nfor lazy loading.9 TimeThe last ingredient a popular language needs is time. No one wants\nto write programs in a language that might go away, as so many\nprogramming languages do. So most hackers will tend to wait until\na language has been around for a couple years before even considering\nusing it.Inventors of wonderful new things are often surprised to discover\nthis, but you need time to get any message through to people. A\nfriend of mine rarely does anything the first time someone asks\nhim. He knows that people sometimes ask for things that they turn\nout not to want. To avoid wasting his time, he waits till the third\nor fourth time he's asked to do something; by then, whoever's asking\nhim may be fairly annoyed, but at least they probably really do\nwant whatever they're asking for.Most people have learned to do a similar sort of filtering on new\nthings they hear about. They don't even start paying attention\nuntil they've heard about something ten times. They're perfectly\njustified: the majority of hot new whatevers do turn out to be a\nwaste of time, and eventually go away. By delaying learning VRML,\nI avoided having to learn it at all.So anyone who invents something new has to expect to keep repeating\ntheir message for years before people will start to get it. We\nwrote what was, as far as I know, the first web-server based\napplication, and it took us years to get it through to people that\nit didn't have to be downloaded. It wasn't that they were stupid.\nThey just had us tuned out.The good news is, simple repetition solves the problem. All you\nhave to do is keep telling your story, and eventually people will\nstart to hear. It's not when people notice you're there that they\npay attention; it's when they notice you're still there.It's just as well that it usually takes a while to gain momentum.\nMost technologies evolve a good deal even after they're first\nlaunched-- programming languages especially. Nothing could be better,\nfor a new techology, than a few years of being used only by a small\nnumber of early adopters. Early adopters are sophisticated and\ndemanding, and quickly flush out whatever flaws remain in your\ntechnology. When you only have a few users you can be in close\ncontact with all of them. And early adopters are forgiving when\nyou improve your system, even if this causes some breakage.There are two ways new technology gets introduced: the organic\ngrowth method, and the big bang method. The organic growth method\nis exemplified by the classic seat-of-the-pants underfunded garage\nstartup. A couple guys, working in obscurity, develop some new\ntechnology. They launch it with no marketing and initially have\nonly a few (fanatically devoted) users. They continue to improve\nthe technology, and meanwhile their user base grows by word of\nmouth. Before they know it, they're big.The other approach, the big bang method, is exemplified by the\nVC-backed, heavily marketed startup. They rush to develop a product,\nlaunch it with great publicity, and immediately (they hope) have\na large user base.Generally, the garage guys envy the big bang guys. The big bang\nguys are smooth and confident and respected by the VCs. They can\nafford the best of everything, and the PR campaign surrounding the\nlaunch has the side effect of making them celebrities. The organic\ngrowth guys, sitting in their garage, feel poor and unloved. And\nyet I think they are often mistaken to feel sorry for themselves.\nOrganic growth seems to yield better technology and richer founders\nthan the big bang method. If you look at the dominant technologies\ntoday, you'll find that most of them grew organically.This pattern doesn't only apply to companies. You see it in sponsored\nresearch too. Multics and Common Lisp were big-bang projects, and\nUnix and MacLisp were organic growth projects.10 Redesign\"The best writing is rewriting,\" wrote E. B. White.  Every good\nwriter knows this, and it's true for software too. The most important\npart of design is redesign. Programming languages, especially,\ndon't get redesigned enough.To write good software you must simultaneously keep two opposing\nideas in your head. You need the young hacker's naive faith in\nhis abilities, and at the same time the veteran's skepticism. You\nhave to be able to think\nhow hard can it be? with one half of\nyour brain while thinking\nit will never work with the other.The trick is to realize that there's no real contradiction here.\nYou want to be optimistic and skeptical about two different things.\nYou have to be optimistic about the possibility of solving the\nproblem, but skeptical about the value of whatever solution you've\ngot so far.People who do good work often think that whatever they're working\non is no good. Others see what they've done and are full of wonder,\nbut the creator is full of worry. This pattern is no coincidence:\nit is the worry that made the work good.If you can keep hope and worry balanced, they will drive a project\nforward the same way your two legs drive a bicycle forward. In the\nfirst phase of the two-cycle innovation engine, you work furiously\non some problem, inspired by your confidence that you'll be able\nto solve it. In the second phase, you look at what you've done in\nthe cold light of morning, and see all its flaws very clearly. But\nas long as your critical spirit doesn't outweigh your hope, you'll\nbe able to look at your admittedly incomplete system, and think,\nhow hard can it be to get the rest of the way?, thereby continuing\nthe cycle.It's tricky to keep the two forces balanced. In young hackers,\noptimism predominates. They produce something, are convinced it's\ngreat, and never improve it. In old hackers, skepticism predominates,\nand they won't even dare to take on ambitious projects.Anything you can do to keep the redesign cycle going is good. Prose\ncan be rewritten over and over until you're happy with it. But\nsoftware, as a rule, doesn't get redesigned enough. Prose has\nreaders, but software has users. If a writer rewrites an essay,\npeople who read the old version are unlikely to complain that their\nthoughts have been broken by some newly introduced incompatibility.Users are a double-edged sword. They can help you improve your\nlanguage, but they can also deter you from improving it. So choose\nyour users carefully, and be slow to grow their number. Having\nusers is like optimization: the wise course is to delay it. Also,\nas a general rule, you can at any given time get away with changing\nmore than you think. Introducing change is like pulling off a\nbandage: the pain is a memory almost as soon as you feel it.Everyone knows that it's not a good idea to have a language designed\nby a committee. Committees yield bad design. But I think the worst\ndanger of committees is that they interfere with redesign. It is\nso much work to introduce changes that no one wants to bother.\nWhatever a committee decides tends to stay that way, even if most\nof the members don't like it.Even a committee of two gets in the way of redesign. This happens\nparticularly in the interfaces between pieces of software written\nby two different people. To change the interface both have to agree\nto change it at once. And so interfaces tend not to change at all,\nwhich is a problem because they tend to be one of the most ad hoc\nparts of any system.One solution here might be to design systems so that interfaces\nare horizontal instead of vertical-- so that modules are always\nvertically stacked strata of abstraction. Then the interface will\ntend to be owned by one of them. The lower of two levels will either\nbe a language in which the upper is written, in which case the\nlower level will own the interface, or it will be a slave, in which\ncase the interface can be dictated by the upper level.11 LispWhat all this implies is that there is hope for a new Lisp.  There\nis hope for any language that gives hackers what they want, including\nLisp. I think we may have made a mistake in thinking that hackers\nare turned off by Lisp's strangeness. This comforting illusion may\nhave prevented us from seeing the real problem with Lisp, or at\nleast Common Lisp, which is that it sucks for doing what hackers\nwant to do. A hacker's language needs powerful libraries and\nsomething to hack. Common Lisp has neither. A hacker's language is\nterse and hackable. Common Lisp is not.The good news is, it's not Lisp that sucks, but Common Lisp. If we\ncan develop a new Lisp that is a real hacker's language, I think\nhackers will use it. They will use whatever language does the job.\nAll we have to do is make sure this new Lisp does some important\njob better than other languages.History offers some encouragement. Over time, successive new\nprogramming languages have taken more and more features from Lisp.\nThere is no longer much left to copy before the language you've\nmade is Lisp. The latest hot language, Python, is a watered-down\nLisp with infix syntax and no macros. A new Lisp would be a natural\nstep in this progression.I sometimes think that it would be a good marketing trick to call\nit an improved version of Python. That sounds hipper than Lisp. To\nmany people, Lisp is a slow AI language with a lot of parentheses.\nFritz Kunze's official biography carefully avoids mentioning the\nL-word.  But my guess is that we shouldn't be afraid to call the\nnew Lisp Lisp. Lisp still has a lot of latent respect among the\nvery best hackers-- the ones who took 6.001 and understood it, for\nexample. And those are the users you need to win.In \"How to Become a Hacker,\" Eric Raymond describes Lisp as something\nlike Latin or Greek-- a language you should learn as an intellectual\nexercise, even though you won't actually use it:\nLisp is worth learning for the profound enlightenment experience\nyou will have when you finally get it; that experience will make\nyou a better programmer for the rest of your days, even if you\nnever actually use Lisp itself a lot.\nIf I didn't know Lisp, reading this would set me asking questions.\nA language that would make me a better programmer, if it means\nanything at all, means a language that would be better for programming.\nAnd that is in fact the implication of what Eric is saying.As long as that idea is still floating around, I think hackers will\nbe receptive enough to a new Lisp, even if it is called Lisp. But\nthis Lisp must be a hacker's language, like the classic Lisps of\nthe 1970s. It must be terse, simple, and hackable. And it must have\npowerful libraries for doing what hackers want to do now.In the matter of libraries I think there is room to beat languages\nlike Perl and Python at their own game. A lot of the new applications\nthat will need to be written in the coming years will be\nserver-based\napplications. There's no reason a new Lisp shouldn't have string\nlibraries as good as Perl, and if this new Lisp also had powerful\nlibraries for server-based applications, it could be very popular.\nReal hackers won't turn up their noses at a new tool that will let\nthem solve hard problems with a few library calls. Remember, hackers\nare lazy.It could be an even bigger win to have core language support for\nserver-based applications. For example, explicit support for programs\nwith multiple users, or data ownership at the level of type tags.Server-based applications also give us the answer to the question\nof what this new Lisp will be used to hack. It would not hurt to\nmake Lisp better as a scripting language for Unix. (It would be\nhard to make it worse.) But I think there are areas where existing\nlanguages would be easier to beat. I think it might be better to\nfollow the model of Tcl, and supply the Lisp together with a complete\nsystem for supporting server-based applications. Lisp is a natural\nfit for server-based applications. Lexical closures provide a way\nto get the effect of subroutines when the ui is just a series of\nweb pages. S-expressions map nicely onto html, and macros are good\nat generating it. There need to be better tools for writing\nserver-based applications, and there needs to be a new Lisp, and\nthe two would work very well together.12 The Dream LanguageBy way of summary, let's try describing the hacker's dream language.\nThe dream language is\nbeautiful, clean, and terse. It has an\ninteractive toplevel that starts up fast. You can write programs\nto solve common problems with very little code.  Nearly all the\ncode in any program you write is code that's specific to your\napplication. Everything else has been done for you.The syntax of the language is brief to a fault. You never have to\ntype an unnecessary character, or even to use the shift key much.Using big abstractions you can write the first version of a program\nvery quickly. Later, when you want to optimize, there's a really\ngood profiler that tells you where to focus your attention. You\ncan make inner loops blindingly fast, even writing inline byte code\nif you need to.There are lots of good examples to learn from, and the language is\nintuitive enough that you can learn how to use it from examples in\na couple minutes. You don't need to look in the manual much. The\nmanual is thin, and has few warnings and qualifications.The language has a small core, and powerful, highly orthogonal\nlibraries that are as carefully designed as the core language. The\nlibraries all work well together; everything in the language fits\ntogether like the parts in a fine camera. Nothing is deprecated,\nor retained for compatibility. The source code of all the libraries\nis readily available. It's easy to talk to the operating system\nand to applications written in other languages.The language is built in layers. The higher-level abstractions are\nbuilt in a very transparent way out of lower-level abstractions,\nwhich you can get hold of if you want.Nothing is hidden from you that doesn't absolutely have to be. The\nlanguage offers abstractions only as a way of saving you work,\nrather than as a way of telling you what to do. In fact, the language\nencourages you to be an equal participant in its design. You can\nchange everything about it, including even its syntax, and anything\nyou write has, as much as possible, the same status as what comes\npredefined.Notes[1]  Macros very close to the modern idea were proposed by Timothy\nHart in 1964, two years after Lisp 1.5 was released. What was\nmissing, initially, were ways to avoid variable capture and multiple\nevaluation; Hart's examples are subject to both.[2]  In When the Air Hits Your Brain, neurosurgeon Frank Vertosick\nrecounts a conversation in which his chief resident, Gary, talks\nabout the difference between surgeons and internists (\"fleas\"):\nGary and I ordered a large pizza and found an open booth. The\nchief lit a cigarette. \"Look at those goddamn fleas, jabbering\nabout some disease they'll see once in their lifetimes. That's\nthe trouble with fleas, they only like the bizarre stuff. They\nhate their bread and butter cases. That's the difference between\nus and the fucking fleas. See, we love big juicy lumbar disc\nherniations, but they hate hypertension....\"\nIt's hard to think of a lumbar disc herniation as juicy (except\nliterally). And yet I think I know what they mean. I've often had\na juicy bug to track down. Someone who's not a programmer would\nfind it hard to imagine that there could be pleasure in a bug.\nSurely it's better if everything just works. In one way, it is.\nAnd yet there is undeniably a grim satisfaction in hunting down\ncertain sorts of bugs."},{"title":"Bertrand Russell: The Value of Philosophy","text":"Chapter XV of The Problems of PhilosophyHaving now come to the end of our brief and very incomplete review of the problems of philosophy, it will be well to consider, in conclusion, what is the value of philosophy and why it ought to be studied. It is the more necessary to consider this question, in view of the fact that many men, under the influence of science or of practical affairs, are inclined to doubt whether philosophy is anything better than innocent but useless trifling, hair-splitting distinctions, and controversies on matters concerning which knowledge is impossible.This view of philosophy appears to result, partly from a wrong conception of the ends of life, partly from a wrong conception of the kind of goods which philosophy strives to achieve. Physical science, through the medium of inventions, is useful to innumerable people who are wholly ignorant of it; thus the study of physical science is to be recommended, not only, or primarily, because of the effect on the student, but rather because of the effect on mankind in general. Thus utility does not belong to philosophy. If the study of philosophy has any value at all for others than students of philosophy, it must be only indirectly, through its effects upon the lives of those who study it. It is in these effects, therefore, if anywhere, that the value of philosophy must be primarily sought.But further, if we are not to fail in our endeavour to determine the value of philosophy, we must first free our minds from the prejudices of what are wrongly called 'practical' men. The 'practical' man, as this word is often used, is one who recognizes only material needs, who realizes that men must have food for the body, but is oblivious of the necessity of providing food for the mind. If all men were well off, if poverty and disease had been reduced to their lowest possible point, there would still remain much to be done to produce a valuable society; and even in the existing world the goods of the mind are at least as important as the goods of the body. It is exclusively among the goods of the mind that the value of philosophy is to be found; and only those who are not indifferent to these goods can be persuaded that the study of philosophy is not a waste of time.Philosophy, like all other studies, aims primarily at knowledge. The knowledge it aims at is the kind of knowledge which gives unity and system to the body of the sciences, and the kind which results from a critical examination of the grounds of our convictions, prejudices, and beliefs. But it cannot be maintained that philosophy has had any very great measure of success in its attempts to provide definite answers to its questions. If you ask a mathematician, a mineralogist, a historian, or any other man of learning, what definite body of truths has been ascertained by his science, his answer will last as long as you are willing to listen. But if you put the same question to a philosopher, he will, if he is candid, have to confess that his study has not achieved positive results such as have been achieved by other sciences. It is true that this is partly accounted for by the fact that, as soon as definite knowledge concerning any subject becomes possible, this subject ceases to be called philosophy, and becomes a separate science. The whole study of the heavens, which now belongs to astronomy, was once included in philosophy; Newton's great work was called 'the mathematical principles of natural philosophy'. Similarly, the study of the human mind, which was a part of philosophy, has now been separated from philosophy and has become the science of psychology. Thus, to a great extent, the uncertainty of philosophy is more apparent than real: those questions which are already capable of definite answers are placed in the sciences, while those only to which, at present, no definite answer can be given, remain to form the residue which is called philosophy.This is, however, only a part of the truth concerning the uncertainty of philosophy. There are many questions—and among them those that are of the profoundest interest to our spiritual life—which, so far as we can see, must remain insoluble to the human intellect unless its powers become of quite a different order from what they are now. Has the universe any unity of plan or purpose, or is it a fortuitous concourse of atoms? Is consciousness a permanent part of the universe, giving hope of indefinite growth in wisdom, or is it a transitory accident on a small planet on which life must ultimately become impossible? Are good and evil of importance to the universe or only to man? Such questions are asked by philosophy, and variously answered by various philosophers. But it would seem that, whether answers be otherwise discoverable or not, the answers suggested by philosophy are none of them demonstrably true. Yet, however slight may be the hope of discovering an answer, it is part of the business of philosophy to continue the consideration of such questions, to make us aware of their importance, to examine all the approaches to them, and to keep alive that speculative interest in the universe which is apt to be killed by confining ourselves to definitely ascertainable knowledge.Many philosophers, it is true, have held that philosophy could establish the truth of certain answers to such fundamental questions. They have supposed that what is of most importance in religious beliefs could be proved by strict demonstration to be true. In order to judge of such attempts, it is necessary to take a survey of human knowledge, and to form an opinion as to its methods and its limitations. On such a subject it would be unwise to pronounce dogmatically; but if the investigations of our previous chapters have not led us astray, we shall be compelled to renounce the hope of finding philosophical proofs of religious beliefs. We cannot, therefore, include as part of the value of philosophy any definite set of answers to such questions. Hence, once more, the value of philosophy must not depend upon any supposed body of definitely ascertainable knowledge to be acquired by those who study it.The value of philosophy is, in fact, to be sought largely in its very uncertainty. The man who has no tincture of philosophy goes through life imprisoned in the prejudices derived from common sense, from the habitual beliefs of his age or his nation, and from convictions which have grown up in his mind without the co-operation or consent of his deliberate reason. To such a man the world tends to become definite, finite, obvious; common objects rouse no questions, and unfamiliar possibilities are contemptuously rejected. As soon as we begin to philosophize, on the contrary, we find, as we saw in our opening chapters, that even the most everyday things lead to problems to which only very incomplete answers can be given. Philosophy, though unable to tell us with certainty what is the true answer to the doubts which it raises, is able to suggest many possibilities which enlarge our thoughts and free them from the tyranny of custom. Thus, while diminishing our feeling of certainty as to what things are, it greatly increases our knowledge as to what they may be; it removes the somewhat arrogant dogmatism of those who have never travelled into the region of liberating doubt, and it keeps alive our sense of wonder by showing familiar things in an unfamiliar aspect.Apart from its utility in showing unsuspected possibilities, philosophy has a value—perhaps its chief value—through the greatness of the objects which it contemplates, and the freedom from narrow and personal aims resulting from this contemplation. The life of the instinctive man is shut up within the circle of his private interests: family and friends may be included, but the outer world is not regarded except as it may help or hinder what comes within the circle of instinctive wishes. In such a life there is something feverish and confined, in comparison with which the philosophic life is calm and free. The private world of instinctive interests is a small one, set in the midst of a great and powerful world which must, sooner or later, lay our private world in ruins. Unless we can so enlarge our interests as to include the whole outer world, we remain like a garrison in a beleagured fortress, knowing that the enemy prevents escape and that ultimate surrender is inevitable. In such a life there is no peace, but a constant strife between the insistence of desire and the powerlessness of will. In one way or another, if our life is to be great and free, we must escape this prison and this strife.One way of escape is by philosophic contemplation. Philosophic contemplation does not, in its widest survey, divide the universe into two hostile camps—friends and foes, helpful and hostile, good and bad—it views the whole impartially. Philosophic contemplation, when it is unalloyed, does not aim at proving that the rest of the universe is akin to man. All acquisition of knowledge is an enlargement of the Self, but this enlargement is best attained when it is not directly sought. It is obtained when the desire for knowledge is alone operative, by a study which does not wish in advance that its objects should have this or that character, but adapts the Self to the characters which it finds in its objects. This enlargement of Self is not obtained when, taking the Self as it is, we try to show that the world is so similar to this Self that knowledge of it is possible without any admission of what seems alien. The desire to prove this is a form of self-assertion and, like all self-assertion, it is an obstacle to the growth of Self which it desires, and of which the Self knows that it is capable. Self-assertion, in philosophic speculation as elsewhere, views the world as a means to its own ends; thus it makes the world of less account than Self, and the Self sets bounds to the greatness of its goods. In contemplation, on the contrary, we start from the not-Self, and through its greatness the boundaries of Self are enlarged; through the infinity of the universe the mind which contemplates it achieves some share in infinity.For this reason greatness of soul is not fostered by those philosophies which assimilate the universe to Man. Knowledge is a form of union of Self and not-Self; like all union, it is impaired by dominion, and therefore by any attempt to force the universe into conformity with what we find in ourselves. There is a widespread philosophical tendency towards the view which tells us that Man is the measure of all things, that truth is man-made, that space and time and the world of universals are properties of the mind, and that, if there be anything not created by the mind, it is unknowable and of no account for us. This view, if our previous discussions were correct, is untrue; but in addition to being untrue, it has the effect of robbing philosophic contemplation of all that gives it value, since it fetters contemplation to Self. What it calls knowledge is not a union with the not-Self, but a set of prejudices, habits, and desires, making an impenetrable veil between us and the world beyond. The man who finds pleasure in such a theory of knowledge is like the man who never leaves the domestic circle for fear his word might not be law.The true philosophic contemplation, on the contrary, finds its satisfaction in every enlargement of the not-Self, in everything that magnifies the objects contemplated, and thereby the subject contemplating. Everything, in contemplation, that is personal or private, everything that depends upon habit, self-interest, or desire, distorts the object, and hence impairs the union which the intellect seeks. By thus making a barrier between subject and object, such personal and private things become a prison to the intellect. The free intellect will see as God might see, without a here and now, without hopes and fears, without the trammels of customary beliefs and traditional prejudices, calmly, dispassionately, in the sole and exclusive desire of knowledge—knowledge as impersonal, as purely contemplative, as it is possible for man to attain. Hence also the free intellect will value more the abstract and universal knowledge into which the accidents of private history do not enter, than the knowledge brought by the senses, and dependent, as such knowledge must be, upon an exclusive and personal point of view and a body whose sense-organs distort as much as they reveal.The mind which has become accustomed to the freedom and impartiality of philosophic contemplation will preserve something of the same freedom and impartiality in the world of action and emotion. It will view its purposes and desires as parts of the whole, with the absence of insistence that results from seeing them as infinitesimal fragments in a world of which all the rest is unaffected by any one man's deeds. The impartiality which, in contemplation, is the unalloyed desire for truth, is the very same quality of mind which, in action, is justice, and in emotion is that universal love which can be given to all, and not only to those who are judged useful or admirable. Thus contemplation enlarges not only the objects of our thoughts, but also the objects of our actions and our affections: it makes us citizens of the universe, not only of one walled city at war with all the rest. In this citizenship of the universe consists man's true freedom, and his liberation from the thraldom of narrow hopes and fears.Thus, to sum up our discussion of the value of philosophy; Philosophy is to be studied, not for the sake of any definite answers to its questions since no definite answers can, as a rule, be known to be true, but rather for the sake of the questions themselves; because these questions enlarge our conception of what is possible, enrich our intellectual imagination and diminish the dogmatic assurance which closes the mind against speculation; but above all because, through the greatness of the universe which philosophy contemplates, the mind also is rendered great, and becomes capable of that union with the universe which constitutes its highest good."},{"title":"Better Bayesian Filtering","text":"January 2003(This article was given as a talk at the 2003 Spam Conference.\nIt describes the work I've done to improve the performance of\nthe algorithm described in A Plan for Spam,\nand what I plan to do in the future.)The first discovery I'd like to present here is an algorithm for\nlazy evaluation of research papers.  Just\nwrite whatever you want and don't cite any previous work, and\nindignant readers will send you references to all the papers you\nshould have cited.   I discovered this algorithm\nafter ``A Plan for Spam'' [1] was on Slashdot.Spam filtering is a subset of text classification,\nwhich is a well established field, but the first papers about\nBayesian\nspam filtering per se seem to have been two\ngiven at the same conference in 1998,\none by Pantel and Lin [2],\nand another by a group from\nMicrosoft Research [3].When I heard about this work I was a bit surprised.  If\npeople had been onto Bayesian filtering four years ago,\nwhy wasn't everyone using it?\nWhen I read the papers I found out why.  Pantel and Lin's filter was the\nmore effective of the two, but it\nonly caught 92% of spam, with 1.16% false positives.When I tried writing a Bayesian spam filter,\nit caught 99.5% of spam with less than .03% false\npositives [4].\nIt's always alarming when two people\ntrying the same experiment get widely divergent results.\nIt's especially alarming here because those two sets of numbers\nmight yield opposite conclusions.\nDifferent users have different requirements, but I think for\nmany people a filtering rate of 92% with 1.16% false positives means\nthat filtering is not an acceptable solution, whereas\n99.5% with less than .03% false positives means that it is.So why did we get such different numbers?\nI haven't tried to reproduce Pantel and Lin's results, but\nfrom reading the paper I see five things that probably account\nfor the difference.One is simply that they trained their filter on very little\ndata: 160 spam and 466 nonspam mails.\nFilter performance should still be climbing with data\nsets that small.  So their numbers may not even be an accurate\nmeasure of the performance of their algorithm, let alone of\nBayesian spam filtering in general.But I think the most important difference is probably\nthat they ignored message headers.  To anyone who has worked\non spam filters, this will seem a perverse decision.\nAnd yet in the very first filters I tried writing, I ignored the\nheaders too.  Why?  Because I wanted to keep the problem neat.\nI didn't know much about mail headers then, and they seemed to me\nfull of random stuff.  There is a lesson here for filter\nwriters: don't ignore data.  You'd think this lesson would\nbe too obvious to mention, but I've had to learn it several times.Third, Pantel and Lin stemmed the tokens, meaning they reduced e.g. both\n``mailing'' and ``mailed'' to the root ``mail''.   They may\nhave felt they were forced to do this by the small size\nof their corpus, but if so this is a kind of premature\noptimization.Fourth, they calculated probabilities differently.\nThey used all the tokens, whereas I only\nuse the 15 most significant.  If you use all the tokens\nyou'll tend to miss longer spams, the type where someone tells you their life\nstory up to the point where they got rich from some multilevel\nmarketing scheme.  And such an algorithm\nwould be easy for spammers to spoof: just add a big\nchunk of random text to counterbalance the spam terms.Finally, they didn't bias against false positives.\nI think\nany spam filtering algorithm ought to have a convenient\nknob you can twist to decrease the\nfalse positive rate at the expense of the filtering rate.\nI do this by counting the occurrences\nof tokens in the nonspam corpus double.\nI don't think it's a good idea to treat spam filtering as\na straight text classification problem.  You can use\ntext classification techniques, but solutions can and should\nreflect the fact that the text is email, and spam\nin particular.  Email is not just text; it has structure.\nSpam filtering is not just classification, because\nfalse positives are so much worse than false negatives\nthat you should treat them as a different kind of error.\nAnd the source of error is not just random variation, but\na live human spammer working actively to defeat your filter.TokensAnother project I heard about\nafter the Slashdot article was Bill Yerazunis'\nCRM114 [5].\nThis is the counterexample to the design principle I\njust mentioned.  It's a straight text classifier,\nbut such a stunningly effective one that it manages to filter\nspam almost perfectly without even knowing that's\nwhat it's doing.Once I understood how CRM114 worked, it seemed\ninevitable that I would eventually have to move from filtering based\non single words to an approach like this.  But first, I thought,\nI'll see how far I can get with single words.  And the answer is,\nsurprisingly far.Mostly I've been working on smarter tokenization.  On\ncurrent spam, I've been able to achieve filtering rates that\napproach CRM114's.  These techniques are mostly orthogonal to Bill's;\nan optimal solution might incorporate both.``A Plan for Spam'' uses a very simple\ndefinition of a token.  Letters, digits, dashes, apostrophes,\nand dollar signs are constituent characters, and everything\nelse is a token separator.  I also ignored case.Now I have a more complicated definition of a token:\nCase is preserved. Exclamation points are constituent characters. Periods and commas are constituents if they occur\nbetween two digits.  This lets me get ip addresses\nand prices intact. A price range like $20-25 yields two tokens,\n$20 and $25. Tokens that occur within the\nTo, From, Subject, and Return-Path lines, or within urls,\nget marked accordingly.  E.g. ``foo'' in the Subject line\nbecomes ``Subject*foo''.  (The asterisk could\nbe any character you don't allow as a constituent.)\nSuch measures increase the filter's vocabulary, which\nmakes it more discriminating.  For example, in the current\nfilter, ``free'' in the Subject line\nhas a spam probability of 98%, whereas the same token\nin the body has a spam probability of only 65%.Here are some of the current probabilities [6]:Subject*FREE      0.9999\nfree!!            0.9999\nTo*free           0.9998\nSubject*free      0.9782\nfree!             0.9199\nFree              0.9198\nUrl*free          0.9091\nFREE              0.8747\nFrom*free         0.7636\nfree              0.6546\nIn the Plan for Spam filter, all these tokens would have had the\nsame probability, .7602.  That filter recognized about 23,000\ntokens.  The current one recognizes about 187,000.The disadvantage of having a larger universe of tokens\nis that there is more\nchance of misses.\nSpreading your corpus out over more tokens\nhas the same effect as making it smaller.\nIf you consider exclamation points as\nconstituents, for example, then you could end up\nnot having a spam probability for free with seven exclamation\npoints, even though you know that free with just two\nexclamation points has a probability of 99.99%.One solution to this is what I call degeneration.  If you\ncan't find an exact match for a token,\ntreat it as if it were a less specific\nversion.  I consider terminal exclamation\npoints, uppercase letters, and occurring in one of the\nfive marked contexts as making a token more specific.\nFor example, if I don't find a probability for\n``Subject*free!'', I look for probabilities for\n``Subject*free'', ``free!'', and ``free'', and take whichever one\nis farthest from .5.Here are the alternatives [7]\nconsidered if the filter sees ``FREE!!!'' in the\nSubject line and doesn't have a probability for it.Subject*Free!!!\nSubject*free!!!\nSubject*FREE!\nSubject*Free!\nSubject*free!\nSubject*FREE\nSubject*Free\nSubject*free\nFREE!!!\nFree!!!\nfree!!!\nFREE!\nFree!\nfree!\nFREE\nFree\nfree\nIf you do this, be sure to consider versions with initial\ncaps as well as all uppercase and all lowercase.  Spams\ntend to have more sentences in imperative mood, and in\nthose the first word is a verb.  So verbs with initial caps\nhave higher spam probabilities than they would in all\nlowercase.  In my filter, the spam probability of ``Act''\nis 98% and for ``act'' only 62%.If you increase your filter's vocabulary, you can end up\ncounting the same word multiple times, according to your old\ndefinition of ``same''.\nLogically, they're not the\nsame token anymore.  But if this still bothers you, let\nme add from experience that the words you seem to be\ncounting multiple times tend to be exactly the ones you'd\nwant to.Another effect of a larger vocabulary is that when you\nlook at an incoming mail you find more interesting tokens,\nmeaning those with probabilities far from .5.  I use the\n15 most interesting to decide if mail is spam.\nBut you can run into a problem when you use a fixed number\nlike this.  If you find a lot of maximally interesting tokens,\nthe result can end up being decided by whatever random factor\ndetermines the ordering of equally interesting tokens.\nOne way to deal with this is to treat some\nas more interesting than others.For example, the\ntoken ``dalco'' occurs 3 times in my spam corpus and never\nin my legitimate corpus.  The token ``Url*optmails''\n(meaning ``optmails'' within a url) occurs 1223 times.\nAnd yet, as I used to calculate probabilities for tokens,\nboth would have the same spam probability, the threshold of .99.That doesn't feel right.  There are theoretical\narguments for giving these two tokens substantially different\nprobabilities (Pantel and Lin do), but I haven't tried that yet.\nIt does seem at least that if we find more than 15 tokens\nthat only occur in one corpus or the other, we ought to\ngive priority to the ones that occur a lot.  So now\nthere are two threshold values.  For tokens that occur only\nin the spam corpus, the probability is .9999 if they\noccur more than 10 times and .9998 otherwise.  Ditto\nat the other end of the scale for tokens found\nonly in the legitimate corpus.I may later scale token probabilities substantially,\nbut this tiny amount of scaling at least ensures that\ntokens get sorted the right way.Another possibility would be to consider not\njust 15 tokens, but all the tokens over a certain\nthreshold of interestingness.  Steven Hauser does this\nin his statistical spam filter [8].\nIf you use a threshold, make it very high, or\nspammers could spoof you by packing messages with\nmore innocent words.Finally, what should one do\nabout html?  I've tried the whole spectrum of options, from\nignoring it to parsing it all.  Ignoring html is a bad idea,\nbecause it's full of useful spam signs.  But if you parse\nit all, your filter might degenerate into a mere html\nrecognizer.  The most effective approach\nseems to be the middle course, to notice some tokens but not\nothers.  I look at a, img, and font tags, and ignore the\nrest.  Links and images you should certainly look at, because\nthey contain urls.I could probably be smarter about dealing with html, but I\ndon't think it's worth putting a lot of time into this.\nSpams full of html are easy to filter.  The smarter\nspammers already avoid it.  So\nperformance in the future should not depend much on how\nyou deal with html.PerformanceBetween December 10 2002 and January 10 2003 I got about\n1750 spams.\nOf these, 4 got through.  That's a filtering\nrate of about 99.75%.Two of the four spams I missed got through because they\nhappened to use words that occur often in my legitimate\nemail.The third was one of those that exploit\nan insecure cgi script to send mail to third parties.\nThey're hard to filter based just\non the content because the headers are innocent and\nthey're careful about the words they use.  Even so I can\nusually catch them.  This one squeaked by with a\nprobability of .88, just under the threshold of .9.Of course, looking at multiple token sequences\nwould catch it easily.  ``Below is the result of\nyour feedback form'' is an instant giveaway.The fourth spam was what I call\na spam-of-the-future, because this is what I expect spam to\nevolve into: some completely neutral\ntext followed by a url.  In this case it was was from\nsomeone saying they had finally finished their homepage\nand would I go look at it.  (The page was of course an\nad for a porn site.)If the spammers are careful about the headers and use a\nfresh url, there is nothing in spam-of-the-future for filters\nto notice.  We can of course counter by sending a\ncrawler to look at the page.  But that might not be necessary.\nThe response rate for spam-of-the-future must\nbe low, or everyone would be doing it.\nIf it's low enough,\nit won't pay for spammers to send it, and we won't\nhave to work too hard on filtering it.Now for the really shocking news: during that same one-month\nperiod I got three false positives.In a way it's\na relief to get some false positives.  When I wrote ``A Plan\nfor Spam'' I hadn't had any, and I didn't know what they'd\nbe like.  Now that I've had a few, I'm relieved to find\nthey're not as bad as I feared.\nFalse positives yielded by statistical\nfilters turn out to be mails that sound a lot like spam, and\nthese tend to be the ones you would least mind missing [9].Two of the false positives were newsletters\nfrom companies I've bought things from.  I never\nasked to receive them, so arguably they\nwere spams, but I count them as false positives because\nI hadn't been deleting them as spams before.  The reason\nthe filters caught them was that both companies in\nJanuary switched to commercial email senders\ninstead of sending the mails from their own servers,\nand both the headers and the bodies became much spammier.The third false positive was a bad one, though.  It was\nfrom someone in Egypt and written in all uppercase.  This was\na direct result of making tokens case sensitive; the Plan\nfor Spam filter wouldn't have caught it.It's hard to say what the overall false positive rate is,\nbecause we're up in the noise, statistically.\nAnyone who has worked on filters (at least, effective filters) will\nbe aware of this problem.\nWith some emails it's\nhard to say whether they're spam or not, and these are\nthe ones you end up looking at when you get filters\nreally tight.  For example, so far the filter has\ncaught two emails that were sent to my address because\nof a typo, and one sent to me in the belief that I was\nsomeone else.  Arguably, these are neither my spam\nnor my nonspam mail.Another false positive was from a vice president at Virtumundo.\nI wrote to them pretending to be a customer,\nand since the reply came back through Virtumundo's\nmail servers it had the most incriminating\nheaders imaginable.  Arguably this isn't a real false\npositive either, but a sort of Heisenberg uncertainty\neffect: I only got it because I was writing about spam\nfiltering.Not counting these, I've had a total of five false positives\nso far, out of about 7740 legitimate emails, a rate of .06%.\nThe other two were a notice that something I bought\nwas back-ordered, and a party reminder from Evite.I don't think this number can be trusted, partly\nbecause the sample is so small, and partly because\nI think I can fix the filter not to catch\nsome of these.False positives seem to me a different kind of error from\nfalse negatives.\nFiltering rate is a measure of performance.  False\npositives I consider more like bugs.  I approach improving the\nfiltering rate as optimization, and decreasing false\npositives as debugging.So these five false positives are my bug list.  For example,\nthe mail from Egypt got nailed because the uppercase text\nmade it look to the filter like a Nigerian spam.\nThis really is kind of a bug.  As with\nhtml, the email being all uppercase is really conceptually one\nfeature, not one for each word.  I need to handle case in a\nmore sophisticated way.So what to make of this .06%?  Not much, I think.  You could\ntreat it as an upper bound, bearing in mind the small sample size.\nBut at this stage it is more a measure of the bugs\nin my implementation than some intrinsic false positive rate\nof Bayesian filtering.FutureWhat next?  Filtering is an optimization problem,\nand the key to optimization is profiling.  Don't\ntry to guess where your code is slow, because you'll\nguess wrong.  Look at where your code is slow,\nand fix that.  In filtering, this translates to:\nlook at the spams you miss, and figure out what you\ncould have done to catch them.For example, spammers are now working aggressively to\nevade filters, and one of the things they're doing is\nbreaking up and misspelling words to prevent filters from\nrecognizing them.  But working on this is not my first\npriority, because I still have no trouble catching these\nspams [10].There are two kinds of spams I currently do\nhave trouble with.\nOne is the type that pretends to be an email from\na woman inviting you to go chat with her or see her profile on a dating\nsite.  These get through because they're the one type of\nsales pitch you can make without using sales talk.  They use\nthe same vocabulary as ordinary email.The other kind of spams I have trouble filtering are those\nfrom companies in e.g. Bulgaria offering contract programming\nservices.   These get through because I'm a programmer too, and\nthe spams are full of the same words as my real mail.I'll probably focus on the personal ad type first.  I think if\nI look closer I'll be able to find statistical differences\nbetween these and my real mail.  The style of writing is\ncertainly different, though it may take multiword filtering\nto catch that.\nAlso, I notice they tend to repeat the url,\nand someone including a url in a legitimate mail wouldn't do that [11].The outsourcing type are going to be hard to catch.  Even if\nyou sent a crawler to the site, you wouldn't find a smoking\nstatistical gun.\nMaybe the only answer is a central list of\ndomains advertised in spams [12].  But there can't be that\nmany of this type of mail.  If the only\nspams left were unsolicited offers of contract programming\nservices from Bulgaria, we could all probably move on to\nworking on something else.Will statistical filtering actually get us to that point?\nI don't know.  Right now, for me personally, spam is\nnot a problem.  But spammers haven't yet made a serious\neffort to spoof statistical filters.  What will happen when they do?I'm not optimistic about filters that work at the\nnetwork level [13].\nWhen there is a static obstacle worth getting past, spammers\nare pretty efficient at getting past it.  There\nis already a company called Assurance Systems that will\nrun your mail through Spamassassin and tell you whether\nit will get filtered out.Network-level filters won't be completely useless.\nThey may be enough to kill all the \"opt-in\"\nspam, meaning spam from companies like Virtumundo and\nEqualamail who claim that they're really running opt-in lists.\nYou can filter those based just on the headers, no\nmatter what they say in the body.  But anyone willing to\nfalsify headers or use open relays, presumably including\nmost porn spammers, should be able to get some message past\nnetwork-level filters if they want to.  (By no means the\nmessage they'd like to send though, which is something.)The kind of filters I'm optimistic about are ones that\ncalculate probabilities based on each individual user's mail.\nThese can be much more effective, not only in\navoiding false positives, but in filtering too: for example,\nfinding the recipient's email address base-64 encoded anywhere in\na message is a very good spam indicator.But the real advantage of individual filters is that they'll all be\ndifferent.  If everyone's filters have different probabilities,\nit will make the spammers' optimization loop, what programmers\nwould call their edit-compile-test cycle, appallingly slow.\nInstead of just tweaking a spam till it gets through a copy of\nsome filter they have on their desktop, they'll have to do a\ntest mailing for each tweak.  It would be like programming in\na language without an interactive toplevel,\nand I wouldn't wish that\non anyone.Notes[1]\nPaul Graham.  ``A Plan for Spam.'' August 2002.\nhttp://paulgraham.com/spam.html.Probabilities in this algorithm are\ncalculated using a degenerate case of Bayes' Rule.  There are\ntwo simplifying assumptions: that the probabilities\nof features (i.e. words) are independent, and that we know\nnothing about the prior probability of an email being\nspam.The first assumption is widespread in text classification.\nAlgorithms that use it are called ``naive Bayesian.''The second assumption I made because the proportion of spam in\nmy incoming mail fluctuated so much from day to day (indeed,\nfrom hour to hour) that the overall prior ratio seemed\nworthless as a predictor.  If you assume that P(spam) and\nP(nonspam) are both .5, they cancel out and you can\nremove them from the formula.If you were doing Bayesian filtering in a situation where\nthe ratio of spam to nonspam was consistently very high or\n(especially) very low, you could probably improve filter\nperformance by incorporating prior probabilities.  To do\nthis right you'd have to track ratios by time of day, because\nspam and legitimate mail volume both have distinct daily\npatterns.[2]\nPatrick Pantel and Dekang Lin. ``SpamCop-- A Spam\nClassification & Organization Program.''  Proceedings of AAAI-98\nWorkshop on Learning for Text Categorization.[3]\nMehran Sahami, Susan Dumais, David Heckerman and Eric Horvitz.\n``A Bayesian Approach to Filtering Junk E-Mail.'' Proceedings of AAAI-98\nWorkshop on Learning for Text Categorization.[4] At the time I had zero false positives out of about 4,000\nlegitimate emails.  If the next legitimate email was\na false positive, this would give us .03%.  These false positive\nrates are untrustworthy, as I explain later. I quote\na number here only to emphasize that whatever the false positive rate\nis, it is less than 1.16%.\n[5] Bill Yerazunis. ``Sparse Binary Polynomial Hash Message\nFiltering and The CRM114 Discriminator.''  Proceedings of 2003\nSpam Conference.[6] In ``A Plan for Spam'' I used thresholds of .99 and .01.\nIt seems justifiable to use thresholds proportionate to the\nsize of the corpora.  Since I now have on the order of 10,000 of each\ntype of mail, I use .9999 and .0001.[7] There is a flaw here I should probably fix.  Currently,\nwhen ``Subject*foo'' degenerates to just ``foo'', what that means is\nyou're getting the stats for occurrences of ``foo'' in\nthe body or header lines other than those I mark.\nWhat I should do is keep track of statistics for ``foo''\noverall as well as specific versions, and degenerate from\n``Subject*foo'' not to ``foo'' but to ``Anywhere*foo''.  Ditto for\ncase: I should degenerate from uppercase to any-case, not\nlowercase.It would probably be a win to do this with prices\ntoo, e.g. to degenerate from ``$129.99'' to ``$--9.99'', ``$--.99'',\nand ``$--''.You could also degenerate from words to their stems,\nbut this would probably only improve filtering rates early on\nwhen you had small corpora.[8] Steven Hauser.  ``Statistical Spam Filter Works for Me.''\nhttp://www.sofbot.com.[9] False positives are not all equal, and we should remember\nthis when comparing techniques for stopping spam.\nWhereas many of the false positives caused by filters\nwill be near-spams that you wouldn't mind missing,\nfalse positives caused by blacklists, for example, will be just\nmail from people who chose the wrong ISP.  In both\ncases you catch mail that's near spam, but for blacklists nearness\nis physical, and for filters it's textual.\n[10] If spammers get good enough at obscuring tokens\nfor this to be a problem, we can respond by simply removing\nwhitespace, periods, commas, etc.  and using a dictionary to\npick the words out of the resulting sequence.\nAnd of course finding words this way that weren't visible in\nthe original text would in itself be evidence of spam.Picking out the words won't be trivial.  It will require\nmore than just reconstructing word boundaries; spammers\nboth add (``xHot nPorn cSite'') and omit (``P#rn'') letters.\nVision research may be useful here, since human vision is\nthe limit that such tricks will approach.[11]\nIn general, spams are more repetitive than regular email.\nThey want to pound that message home.  I currently don't\nallow duplicates in the top 15 tokens, because\nyou could get a false positive if the sender happens to use\nsome bad word multiple times. (In my current filter, ``dick'' has\na spam probabilty of .9999, but it's also a name.)\nIt seems we should at least notice duplication though,\nso I may try allowing up to two of each token, as Brian Burton does in\nSpamProbe.[12]  This is what approaches like Brightmail's will\ndegenerate into once spammers are pushed into using mad-lib\ntechniques to generate everything else in the message.[13]\nIt's sometimes argued that we should be working on filtering\nat the network level, because it is more efficient.  What people\nusually mean when they say this is: we currently filter at the\nnetwork level, and we don't want to start over from scratch.\nBut you can't dictate the problem to fit your solution.Historically, scarce-resource arguments have been the losing\nside in debates about software design.\nPeople only tend to use them to justify choices\n(inaction in particular) made for other reasons.Thanks to Sarah Harlin, Trevor Blackwell, and\nDan Giffin for reading drafts of this paper, and to Dan again\nfor most of the infrastructure that this filter runs on.Related:"},{"title":"Bio","text":"Paul Graham is a programmer, writer, and investor.\nIn 1995, he and Robert Morris started Viaweb, the first software\nas a service company.  Viaweb was acquired by\nYahoo in 1998,\nwhere it became Yahoo Store.  In 2001 he started publishing\nessays on paulgraham.com,\nwhich in 2015 got 34 million page views.\nIn 2005 he and\nJessica Livingston, Robert Morris, and Trevor Blackwell\nstarted Y Combinator, the first of a new type of startup\nincubator.  Since 2005 Y Combinator has funded over 1000 startups,\nincluding Dropbox, Airbnb, Stripe, and Reddit.Paul\nis the author of\nOn Lisp (Prentice Hall,\n1993),\nANSI Common Lisp\n(Prentice Hall, 1995), and\nHackers &\nPainters (O'Reilly, 2004).\nHe has an AB from Cornell and a\nPhD in Computer Science from Harvard, and studied painting\nat RISD and the Accademia di Belle Arti in Florence.\nPhoto by Dave Thomas, released under the\nAttribution Creative Commons license.\nClick for full-size version."},{"title":"Black Swan Farming","text":"September 2012I've done several types of work over the years but I don't know\nanother as counterintuitive as startup investing.The two most important things to understand about startup investing,\nas a business, are (1) that effectively all the returns are\nconcentrated in a few big winners, and (2) that the best ideas look\ninitially like bad ideas.The first rule I knew intellectually, but didn't really grasp till\nit happened to us.  The total value of the companies we've funded\nis around 10 billion, give or take a few.  But just two companies,\nDropbox and Airbnb, account for about three quarters of it.In startups, the big winners are big to a degree that violates our\nexpectations about variation.  I don't know whether these expectations\nare innate or learned, but whatever the cause, we are just not\nprepared for the 1000x variation in outcomes that one finds in\nstartup investing.That yields all sorts of strange consequences.  For example, in\npurely financial terms, there is probably at most one company in\neach YC batch that will have a significant effect on our returns,\nand the rest are just a cost of doing business.\n[1]\nI haven't\nreally assimilated that fact, partly because it's so counterintuitive,\nand partly because we're not doing this just for financial reasons;\nYC would be a pretty lonely place if we only had one company per\nbatch.  And yet it's true.To succeed in a domain that violates your intuitions, you need to\nbe able to turn them off the way a pilot does when flying through\nclouds.\n[2]\nYou need to do what you know intellectually to be\nright, even though it feels wrong.It's a constant battle for us.  It's hard to make ourselves take\nenough risks. When you interview a startup and think \"they seem\nlikely to succeed,\" it's hard not to fund them.  And yet, financially\nat least, there is only one kind of success: they're either going\nto be one of the really big winners or not, and if not it doesn't\nmatter whether you fund them, because even if they succeed the\neffect on your returns will be insignificant.  In the same day of\ninterviews you might meet some smart 19 year olds who aren't even\nsure what they want to work on. Their chances of succeeding seem\nsmall.  But again, it's not their chances of succeeding that matter\nbut their chances of succeeding really big.  The probability that\nany group will succeed really big is microscopically small, but the\nprobability that those 19 year olds will might be higher than that\nof the other, safer group.The probability that a startup will make it big is not simply a\nconstant fraction of the probability that they will succeed at all.\nIf it were, you could fund everyone who seemed likely to succeed\nat all, and you'd get that fraction of big hits.  Unfortunately\npicking winners is harder than that.  You have to ignore the elephant\nin front of you, the likelihood they'll succeed, and focus instead\non the separate and almost invisibly intangible question of whether\nthey'll succeed really big.HarderThat's made harder by the fact that the best startup ideas seem at\nfirst like bad ideas.  I've written about this before: if a good\nidea were obviously good, someone else would already have done it.\nSo the most successful founders tend to work on ideas that few\nbeside them realize are good.  Which is not that far from a description\nof insanity, till you reach the point where you see results.The first time Peter Thiel spoke at YC he drew a Venn diagram that\nillustrates the situation perfectly.  He drew two intersecting\ncircles, one labelled \"seems like a bad idea\" and the other \"is a\ngood idea.\"  The intersection is the sweet spot for startups.This concept is a simple one and yet seeing it as a Venn diagram\nis illuminating.  It reminds you that there is an intersection—that\nthere are good ideas that seem bad.  It also reminds you that the\nvast majority of ideas that seem bad are bad.The fact that the best ideas seem like bad ideas makes it even\nharder to recognize the big winners.  It means the probability of\na startup making it really big is not merely not a constant fraction\nof the probability that it will succeed, but that the startups with\na high probability of the former will seem to have a disproportionately\nlow probability of the latter.History tends to get rewritten by big successes, so that in retrospect\nit seems obvious they were going to make it big.  For that reason\none of my most valuable memories is how lame Facebook sounded to\nme when I first heard about it.  A site for college students to\nwaste time?  It seemed the perfect bad idea: a site (1) for a niche\nmarket (2) with no money (3) to do something that didn't matter.One could have described Microsoft and Apple in exactly the same\nterms.\n[3]Harder StillWait, it gets worse.  You not only have to solve this hard problem,\nbut you have to do it with no indication of whether you're succeeding.\nWhen you pick a big winner, you won't know it for two years.Meanwhile, the one thing you can measure is dangerously\nmisleading.  The one thing we can track precisely is how well the\nstartups in each batch do at fundraising after Demo Day.  But we\nknow that's the wrong metric.  There's no correlation between the\npercentage of startups that raise money and the metric that does\nmatter financially, whether that batch of startups contains a big\nwinner or not.Except an inverse one.  That's the scary thing: fundraising is not\nmerely a useless metric, but positively misleading.  We're in a\nbusiness where we need to pick unpromising-looking outliers, and\nthe huge scale of the successes means we can afford to spread our\nnet very widely.  The big winners could generate 10,000x returns.\nThat means for each big winner we could pick a thousand companies\nthat returned nothing and still end up 10x ahead.If we ever got to the point where 100% of the startups we funded\nwere able to raise money after Demo Day, it would almost certainly\nmean we were being too conservative.\n[4]It takes a conscious effort not to do that too.  After 15 cycles\nof preparing startups for investors and then watching how they do,\nI can now look at a group we're interviewing through Demo Day\ninvestors' eyes.  But those are the wrong eyes to look through!We can afford to take at least 10x as much risk as Demo Day investors.\nAnd since risk is usually proportionate to reward, if you can afford\nto take more risk you should.  What would it mean to take 10x more\nrisk than Demo Day investors?  We'd have to be willing to fund 10x\nmore startups than they would.  Which means that even if we're\ngenerous to ourselves and assume that YC can on average triple a\nstartup's expected value, we'd be taking the right amount of risk\nif only 30% of the startups were able to raise significant funding\nafter Demo Day.I don't know what fraction of them currently raise more after Demo\nDay.  I deliberately avoid calculating that number, because if you\nstart measuring something you start optimizing it, and I know it's\nthe wrong thing to optimize.\n[5]\nBut the percentage is certainly\nway over 30%.  And frankly the thought of a 30% success rate at\nfundraising makes my stomach clench.  A Demo Day where only 30% of\nthe startups were fundable would be a shambles.  Everyone would\nagree that YC had jumped the shark. We ourselves would feel that\nYC had jumped the shark.  And yet we'd all be wrong.For better or worse that's never going to be more than a thought\nexperiment.  We could never stand it.  How about that for\ncounterintuitive?  I can lay out what I know to be the right thing\nto do, and still not do it.  I can make up all sorts of plausible\njustifications.  It would hurt YC's brand (at least among the\ninnumerate) if we invested in huge numbers of risky startups that\nflamed out.  It might dilute the value of the alumni network.\nPerhaps most convincingly, it would be demoralizing for us to be\nup to our chins in failure all the time.  But I know the real reason\nwe're so conservative is that we just haven't assimilated the fact\nof 1000x variation in returns.We'll probably never be able to bring ourselves to take risks\nproportionate to the returns in this business.  The best we can\nhope for is that when we interview a group and find ourselves\nthinking \"they seem like good founders, but what are investors going\nto think of this crazy idea?\" we'll continue to be able to say \"who\ncares what investors think?\"  That's what we thought about Airbnb,\nand if we want to fund more Airbnbs we have to stay good at thinking\nit.Notes[1]\nI'm not saying that the big winners are all that matters, just\nthat they're all that matters financially for investors.  Since\nwe're not doing YC mainly for financial reasons, the big winners\naren't all that matters to us.  We're delighted to have funded\nReddit, for example. Even though we made comparatively little from\nit, Reddit has had a big effect on the world, and it introduced us\nto Steve Huffman and Alexis Ohanian, both of whom have become good\nfriends.Nor do we push founders to try to become one of the big winners if\nthey don't want to. We didn't \"swing for the fences\" in our own\nstartup (Viaweb, which was acquired for $50 million), and it would\nfeel pretty bogus to press founders to do something we didn't do.\nOur rule is that it's up to the founders.  Some want to take over\nthe world, and some just want that first few million.  But we invest\nin so many companies that we don't have to sweat any one outcome.\nIn fact, we don't have to sweat whether startups have exits at all.\nThe biggest exits are the only ones that matter financially, and\nthose are guaranteed in the sense that if a company becomes big\nenough, a market for its shares will inevitably arise.  Since the\nremaining outcomes don't have a significant effect on returns, it's\ncool with us if the founders want to sell early for a small amount,\nor grow slowly and never sell (i.e. become a so-called lifestyle\nbusiness), or even shut the company down.  We're sometimes disappointed\nwhen a startup we had high hopes for doesn't do well, but this\ndisappointment is mostly the ordinary variety that anyone feels\nwhen that happens.[2]\nWithout visual cues (e.g. the horizon) you can't distinguish\nbetween gravity and acceleration.  Which means if you're flying\nthrough clouds you can't tell what the attitude of\nthe aircraft is.  You could feel like you're flying straight and\nlevel while in fact you're descending in a spiral.  The solution\nis to ignore what your body is telling you and listen only to your\ninstruments.  But it turns out to be very hard to ignore what your\nbody is telling you.  Every pilot knows about this\nproblem and yet\nit is still a leading cause of accidents.[3]\nNot all big hits follow this pattern though. The reason Google\nseemed a bad idea was that there were already lots of search engines\nand there didn't seem to be room for another.[4]\nA startup's success at fundraising is a function of two things:\nwhat they're selling and how good they are at selling it.  And while\nwe can teach startups a lot about how to appeal to investors, even\nthe most convincing pitch can't sell an idea that investors don't\nlike.  I was genuinely worried that Airbnb, for example, would not\nbe able to raise money after Demo Day.  I couldn't convince Fred Wilson to fund them.  They might not\nhave raised money at all but for the coincidence that Greg Mcadoo,\nour contact at Sequoia, was one of a handful of VCs who understood\nthe vacation rental business, having spent much of the previous two\nyears investigating it.[5]\nI calculated it once for the last batch before a consortium of\ninvestors started offering investment automatically to every startup\nwe funded, summer 2010.  At the time it was 94% (33 of 35 companies\nthat tried to raise money succeeded, and one didn't try because\nthey were already profitable).  Presumably it's lower now because\nof that investment; in the old days it was raise after Demo Day or\ndie.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Jessica\nLivingston, Geoff Ralston, and Harj Taggar for reading drafts of\nthis."},{"title":"Bradley's Ghost","text":"November 2004\nA lot of people are writing now about\nwhy Kerry lost.  Here I want to\nexamine a more specific question: why were the exit polls so\nwrong?In Ohio, which Kerry ultimately\nlost 49-51, exit polls gave him a 52-48 victory.  And this wasn't just\nrandom error.  In every swing state they overestimated the Kerry vote.\nIn Florida, which Bush ultimately won 52-47, exit polls predicted\na dead heat.(These are not early numbers. They're from about midnight eastern time,\nlong after polls closed in Ohio and Florida.  And yet by the\nnext afternoon the exit poll numbers online corresponded to the returns.\nThe only way I can imagine this happening is if those in\ncharge of the exit polls cooked the books after seeing the actual\nreturns.  But that's another issue.)What happened?  The source of the problem may be a variant of\nthe Bradley Effect.\nThis term\nwas invented after Tom Bradley, the black mayor of Los Angeles,\nlost an election for governor of California despite a comfortable\nlead in the polls.  Apparently voters were afraid to say\nthey planned to vote against him, lest their motives be\n(perhaps correctly) suspected.It seems likely that something similar happened in exit polls this year.\nIn theory, exit polls ought to be very accurate.\nYou're not asking people what they would do.  You're\nasking what they just did.How can you get errors asking that?  Because some people don't\nrespond.  To get a truly random sample, pollsters ask, say, every\n20th person leaving the polling place who they voted for.  But not\neveryone wants to answer.  And the pollsters can't simply ignore\nthose who won't, or their sample isn't random anymore.  So what\nthey do, apparently, is note down the age and race and sex of the\nperson, and guess from that who they voted for.This works so long as there is no correlation between who people\nvote for and whether they're willing to talk about it.  But this\nyear there may have been.  It may be that a significant number of\nthose who voted for\nBush didn't want to say so.Why not?  Because people in the US are more conservative than they're\nwilling to admit.  The values of the elite in this country, at least\nat the moment, are NPR values.  The average person, as I think both\nRepublicans and Democrats would agree, is more socially conservative.\nBut while some openly flaunt the fact that they don't share the\nopinions of the elite, others feel a little nervous about it, as\nif they had bad table manners.For example, according to current NPR values, you\ncan't say anything that might be\nperceived as disparaging towards homosexuals.  To do\nso is \"homophobic.\"  And yet a large number of Americans are deeply\nreligious, and the Bible is quite explicit on the subject of\nhomosexuality.  What are they to do?  I think what many do is keep\ntheir opinions, but keep them to themselves.They know what they believe, but they also know what they're supposed\nto believe.\nAnd so when a stranger (for example, a pollster) asks\nthem their opinion about something like gay marriage, they will not\nalways say what they really think.When the values of the elite are liberal, polls will tend to\nunderestimate the conservativeness of ordinary voters.  This seems\nto me the leading theory to explain why the exit polls were so\nfar off this year.  NPR values\nsaid one ought to vote for Kerry.  So all the people who voted for\nKerry felt virtuous for doing so, and were eager to tell pollsters\nthey had. No one who voted for Kerry did it as an act of quiet\ndefiance."},{"title":"CRM114 gets 99.87%","text":"(Bill Yerazunis' CRM114\nhas the best spam filtering performance I've\nheard of to date and deserves to be better known.  According to this email,\nwhich Bill has allowed me to reprint, CRM114 now achieves 99.87% accuracy.\nThis level of performance is more evidence that probabilistic,\ncontent-based filters are the answer to spam.)Date: Wed, 16 Oct 2002 10:07:10 -0400From: Bill YerazunisThe current statistics for CRM114's sparse binary polynomial hashes\nare in. Over the last two weeks it's managed a reasonably enviable\n99.87% accuracy.Details: 2374 fresh-from-the-wild incoming messages, 1518 spam and 856\nnonspam yielded only three errors.  All classification was done via\nthe sparse binary polynomial hash classifier system, no blacklists or\nwhitelists used, training set approximately 250Kbytes.  If I'd turned\non the whitelists and blacklists, it would have been one error instead\nof three, for a 99.96% accuracy, but as we consider blacklists (even\nof known spamhausen) to be \"cheating\", I'm running without them.The worst-case margin of error on that result is +-0.16%, as that's the\nmeasured error rate of _me_ distinguishing spam from nonspam.  (I\nmanually classified the same set of 1900 messages twice, and found\nthree errors in my own classifications, hence I have a 99.84% success\nrate.)With an accuracy of 99.87% for CRM114 versus my own rate of 99.84%, I\nconclude that CRM114 is \"better than human\", or at least better than\nits creator when confronted with 3800 decisions to make.Date: Wed, 16 Oct 2002 14:26:46 -0400From: Bill Yerazunis[The three errors were] one false reject, two false accepts, if I recall correctly.But only one of the false accepts was from an unknown source, and the\nfalse reject was from a known-good source, so the black/whitelist\nwould have caught it, and it would still be a 99.96% accurate system.More Info:"},{"title":"Can You Buy a Silicon Valley?  Maybe.","text":"February 2009A lot of cities look at Silicon Valley and ask \"How could we make\nsomething like that happen here?\"  The\norganic way to do it is to\nestablish a first-rate university in a place where rich people want\nto live. That's how Silicon Valley happened.  But could you shortcut\nthe process by funding startups?Possibly. Let's consider what it would take.The first thing to understand is that encouraging startups is a\ndifferent problem from encouraging startups in a particular city.\nThe latter is much more expensive.People sometimes think they could improve the startup scene in their\ntown by starting something like Y\nCombinator there, but in fact it\nwill have near zero effect.  I know because Y Combinator itself had\nnear zero effect on Boston when we were based there half the year.\nThe people we funded came from all over the country (indeed, the\nworld) and afterward they went wherever they could get more\nfunding—which generally meant Silicon Valley.The seed funding business is not a regional business, because at\nthat stage startups are mobile. They're just a couple founders with\nlaptops.\n[1]If you want to encourage startups in a particular city, you have\nto fund startups that won't leave.  There are two ways to do that:\nhave rules preventing them from leaving, or fund them at the point\nin their life when they naturally take root.  The first approach\nis a mistake, because it becomes a filter for selecting bad startups.\nIf your terms force startups to do things they don't want to, only\nthe desperate ones will take your money.Good startups will move to another city as a condition of funding.\nWhat they won't do is agree not to move the next time they need\nfunding.  So the only way to get them to stay is to give them enough\nthat they never need to leave.___How much would that take?  If you want to keep startups from leaving\nyour town, you have to give them enough that they're not tempted\nby an offer from Silicon Valley VCs that requires them to move.  A\nstartup would be able to refuse such an offer if they had grown to\nthe point where they were (a) rooted in your town and/or (b) so\nsuccessful that VCs would fund them even if they didn't move.How much would it cost to grow a startup to that point? A minimum\nof several hundred thousand dollars.  Wufoo\nseem to have rooted\nthemselves in Tampa on $118k, but they're an extreme case.  On\naverage it would take at least half a million.So if it seems too good to be true to think you could grow a local\nsilicon valley by giving startups $15-20k each like Y Combinator,\nthat's because it is.  To make them stick around you'd have to give\nthem at least 20 times that much.However, even that is an interesting prospect.  Suppose to be on\nthe safe side it would cost a million dollars per startup. If you\ncould get startups to stick to your town for a million apiece, then\nfor a billion dollars you could bring in a thousand startups. That probably wouldn't push you past Silicon Valley itself,\nbut it might get you second place.For the price of a football stadium, any town that was decent to\nlive in could make itself one of the biggest startup hubs in the\nworld.What's more, it wouldn't take very long.   You could probably do\nit in five years.  During the term of one mayor. And it would get\neasier over time, because the more startups you had in town, the\nless it would take to get new ones to move there. By the time you\nhad a thousand startups in town, the VCs wouldn't be trying so hard\nto get them to move to Silicon Valley; instead they'd be opening\nlocal offices.  Then you'd really be in good shape.  You'd have\nstarted a self-sustaining chain reaction like the one that drives\nthe Valley.___But now comes the hard part.  You have to pick the startups.  How\ndo you do that?  Picking startups is a rare and valuable skill, and\nthe handful of people who have it are not readily hireable.  And\nthis skill is so hard to measure that if a government did try to\nhire people with it, they'd almost certainly get the wrong ones.For example, a city could give money to a VC fund to establish a\nlocal branch, and let them make the choices.  But only a bad VC\nfund would take that deal.  They wouldn't seem bad to the city\nofficials.  They'd seem very impressive.  But they'd be bad at\npicking startups.  That's the characteristic failure mode of VCs.\nAll VCs look impressive to limited partners.  The difference between\nthe good ones and the bad ones only becomes visible in the other\nhalf of their jobs: choosing and advising startups.\n[2]What you really want is a pool of local angel investors—people\ninvesting money they made from their own startups.  But unfortunately\nyou run into a chicken and egg problem here.  If your city isn't\nalready a startup hub, there won't be people there who got rich\nfrom startups. And there is no way I can think of that a city could\nattract angels from outside. By definition they're rich.  There's\nno incentive that would make them move.\n[3]However, a city could select startups by piggybacking on the expertise\nof investors who weren't local.  It would be pretty straightforward\nto make a list of the most eminent Silicon Valley angels and from\nthat to generate a list of all the startups they'd invested in.  If\na city offered these companies a million dollars each to move, a\nlot of the earlier stage ones would probably take it.Preposterous as this plan sounds, it's probably the most efficient\nway a city could select good startups.It would hurt the startups somewhat to be separated from their\noriginal investors. On the other hand, the extra million dollars\nwould give them a lot more runway.___Would the transplanted startups survive?  Quite possibly. The only\nway to find out would be to try it.  It would be a pretty cheap\nexperiment, as civil expenditures go.  Pick 30 startups that eminent\nangels have recently invested in, give them each a million dollars\nif they'll relocate to your city, and see what happens after a year.\nIf they seem to be thriving, you can try importing startups on a\nlarger scale.Don't be too legalistic about the conditions under which they're\nallowed to leave.  Just have a gentlemen's agreement.Don't try to do it on the cheap and pick only 10 for the initial\nexperiment.  If you do this on too small a scale you'll just guarantee\nfailure. Startups need to be around other startups.  30 would be\nenough to feel like a community.Don't try to make them all work in some renovated warehouse you've\nmade into an \"incubator.\"  Real startups prefer to work in their\nown spaces.In fact, don't impose any restrictions on the startups at all.\nStartup founders are mostly hackers,\nand hackers are much more\nconstrained by gentlemen's agreements than regulations.  If they\nshake your hand on a promise, they'll keep it.  But show them a\nlock and their first thought is how to pick it.Interestingly, the 30-startup experiment could be done by any\nsufficiently rich private citizen.  And what pressure it would\nput on the city if it worked.\n[4]___Should the city take stock in return for the money?\nIn principle they're entitled to, but how would they choose valuations\nfor the startups?  You couldn't just give them all the same valuation:\nthat would be too low for some (who'd turn you down) and too high\nfor others (because it might make their next round a \"down round\").\nAnd since we're assuming we're doing this without being able to\npick startups, we also have to assume we can't value them, since\nthat's practically the same thing.Another reason not to take stock in the startups is that startups\nare often involved in disreputable things.  So are established\ncompanies, but they don't get blamed for it.  If someone gets\nmurdered by someone they met on Facebook, the press will treat the\nstory as if it were about Facebook.  If someone gets murdered by\nsomeone they met at a supermarket, the press will just treat it as\na story about a murder.  So understand that if you invest in startups,\nthey might build things that get used for pornography, or file-sharing,\nor the expression of unfashionable opinions.  You should probably\nsponsor this project jointly with your political opponents, so they\ncan't use whatever the startups do as a club to beat you with.It would be too much of a political liability just to give\nthe startups the money, though.  So the best plan would be to\nmake it convertible debt, but which didn't convert except in\na really big round, like $20 million.___How well this scheme worked would depend on the\ncity.  There are\nsome towns, like Portland, that would be easy to turn into startup\nhubs, and others, like Detroit, where it would really be an uphill\nbattle.  So be honest with yourself about the sort of town you have\nbefore you try this.It will be easier in proportion to how much your town resembles San\nFrancisco.  Do you have good weather?  Do people live downtown, or\nhave they abandoned the center for the suburbs?  Would the city be\ndescribed as \"hip\" and \"tolerant,\" or as reflecting \"traditional\nvalues?\"  Are there good universities nearby?  Are there walkable\nneighborhoods?  Would nerds feel at home?  If you answered yes to\nall these questions, you might be able not only to pull off this\nscheme, but to do it for less than a million per startup.I realize the chance of any city having\nthe political will to carry out this plan is microscopically\nsmall.  I just wanted to explore what it would take if one did.\nHow hard would it be to jumpstart a silicon valley?  It's\nfascinating to think this prize might be within\nthe reach of so many cities.  So even though they'll all still\nspend the money on the stadium, at least now someone can ask them:\nwhy did you choose to do that instead of becoming a serious\nrival to Silicon Valley?Notes[1]\nWhat people who start these supposedly local seed firms always\nfind is that (a) their applicants come from all over, not just the\nlocal area, and (b) the local startups also apply to the other seed\nfirms.  So what ends up happening is that the applicant pool gets\npartitioned by quality rather than geography.[2]\nInterestingly, the bad VCs fail by choosing startups run by\npeople like them—people who are good presenters, but have no\nreal substance.   It's a case of the fake leading the fake.  And\nsince everyone involved is so plausible, the LPs who invest in these\nfunds have no idea what's happening till they measure their returns.[3]\nNot even being a tax haven, I suspect.  That makes some rich\npeople move, but not the type who would make good angel investors\nin startups.[4]\nThanks to Michael Keenan for pointing this out.Thanks to Trevor Blackwell, Jessica Livingston, Robert\nMorris, and Fred Wilson for reading drafts of this."},{"title":"Carl de Marcken: Inside Orbitz","text":"(Here's an email Carl de Marcken of ITA Software sent to\na friend, describing their experiences using Lisp in one of the software\nindustry's most demanding\napplications.)Date: Fri, 12 Jan 2001 15:42:34 -0500From: Carl de MarckenGeoffrey,Here are some tidbits...1. Right now Sabre, Galileo, Amadeus and Worldspan operate many\nmillions of dollars of IBM and Unisys mainframes each to\nanswer the vast majority of queries done by airline phone agents,\nairport desk agents, travel agents, and travel web sites (other than\nour own and our customers').  Their computers are housed in\nbomb-proof, fire-walled (literally) complexes in Kansas City, Denver,\nGermany and Atlanta, and mostly run assembly language code for\nperformance reasons.  From what we can discern, their algorithms are\nbasic: until we pointed it out to them I don't think they had any\nunderstanding of how hard the problem they're trying to solve is, or\nhow far their solutions are from optimal.2. ITA Software is slowly replacing the industry's hardware and\nsoftware with Common Lisp code running on Linux PCs, that uses\nrelatively involved algorithms that show off our academic CS\nbackground.  The easiest place to see the code in action is on our web\nsite,\nwww.itasoftware.com.3. The vast majority of our \"thinking\" code is in Common Lisp.  We run\nboth\nCMUCL and\nFranz,\nunder Linux/Intel, HPUX/PA, and NT/Intel, and\nhave about 200,000 lines of Lisp in our base search engine. Our web\nsite page generation code is also largely written in Common Lisp,\nthough there's also fair bit of Java there.4. Because we have about 2 gigs of static data we need rapid access\nto, we use C++ code to memory-map huge files containing pointerless C\nstructs (of flights, fares, etc), and then access these from Common\nLisp using foreign data accesses.  A struct field access compiles into\ntwo or three instructions, so there's not really any performance.\npenalty for accessing C rather than Lisp objects.  By doing this, we\nkeep the Lisp garbage collector from seeing the data (to Lisp, each\npointer to a C object is just a fixnum, though we do often temporarily\nwrap these pointers in Lisp objects to improve debuggability).  Our\nLisp images are therefore only about 250 megs of \"working\" data\nstructures and code.5. Every query that hits our site gets sent via tcpip to a Lisp\nprocess running on an dual 800mhz x86 Linux box with 2g of ram ($3000,\nvs about $1,000,000 for a similarly capable mainframe), and the\nprocess devotes between 5 and 15 seconds of CPU time to it.  One of\nour customers will have 200 such boxes, each running 2 or 3 Lisp\nprocesses.  We save on ram by putting multiple processes on one box,\nsince the virtual memory system automatically shares our read-only\nmemory-mapped files between processes.6. If you want to do a simple round-trip from BOS to LAX in two weeks,\ncoming back in three, willing to entertain a 24 hour departure window\nfor both parts, then limiting to \"reasonable\" routes (at most 3\nflights and at most 10 hours or so) you have about 5,000 ways to get\nthere and 5,000 ways to get back.  Listing them is a mostly trivial\ngraph-search (there are a few minor complications, but not many), that\nanybody could do in a fraction of a second.7. The real challenge is that a single fixed itinerary (a fixed set of\nflights from BOS to LAX and a fixed set back) with only two flights in\neach direction may have more than 10,000 possible combinations of\napplicable \"fares\", each fare with complex restrictions that must be\nchecked against the flights and the other fares.  That means that the\nsearch space for this simple trip is of the order 5000 x 5000 x 10000,\nand a naive program would need to do a _lot_ of computation just to\nvalidate each of these possibilities.  Suitably formalized, its not\neven clear that the problem of finding the cheapest flight is\nNP-complete, since it is difficult to put a bound on the size of the\nsolution that will result in the cheapest price.  If you're willing to\ndispense with restrictions on the energy in the universe, then it is\nactually possible to formalize the cheapest-price problem in a\nnot-too-unreasonable way that leads to a proof of undecidability by\nreduction to the Post correspondance problem :-).8. Our Lisp code is running very clever algorithms that let us produce\nin a reasonable time a data structure we call the \"pricing-graph\" from\nwhich we can very efficiently answer a query of the form \"give me the\nk-th best solution (a validated set of flights and fares), ordered\naccording to the function f\", assuming of course certain restrictions\non f, where the number of answers represented by the pricing-graph is\n10^20 - 10^30 depending on the type of trip.  In this way, we can\nreasonably claim that in 10 seconds we can produce 10^30 answers, even\nif we could not possibly enumerate the list of such answers.9. We can do 10 seconds of Lisp computation on a 800mhz box and cons\nless than 5k of data.  This is because we pre-allocate all data\nstructures we need and die on queries that exceed them.  This may make\nmany Lisp programmers cringe, but with a 250 meg image and real-time\nconstraints, we can't afford to generate garbage.  For example, rather\nthan using cons, we use \"cons!\", which grabs cells from an array of\n10,000,000 cells we've preallocated and which gets reset every query.10. A lot of our Lisp is designed to compile into very efficient\nassembly.  We make a lot of use of Lisp's macro capabilities, but shy\naway from many other Lisp features like closures, generic functions,\ncomplex sequence functions and garbage collection.  We're doing an\nincredible amount of computation - getting 10 seconds on a modern\nmachine is an incredible gift - but if we're sloppy at all 10 seconds\ncan turn into ten minutes, not adequate for a travel agent or web\nsite.  We disassemble most every Lisp function looking for\ninefficiencies and have had both CMUCL and Franz enhanced to compile\nour code better.11. Occasionally we've had to move code from Lisp to C++, usually\nbecause of data loading issues (Lisp garbage collectors just can't\ndeal with gigs of data, and there's no way to rapidly load gigs of\ndata into a Lisp).  Our experience has been a 10 to 1 code expansion;\nI don't think there are any programmers in our company that regret the\nchoice of Common Lisp.12. We've had very little trouble getting non-Lisp programmers to read\nand understand and extend our Lisp code.  The only real problem is\nthat the training most programmers have in Lisp has taught them to\ncode very inefficiently, without paying any attention to the compiler.\nOf course, with things like STL and Java, I think programmers of other\nlanguages are also becoming pretty ignorant.\nDate: Tue, 15 Jan 2002 17:49:04 -0800From: Carl de MarckenPaul,I don't have any problems with it going up on a site, but\nplease make a note that this message is old and the world is constantly\nchanging: we now have thousands of CPUs running our code, and various\nairlines and major web sites (Orbitz, e.g.) depending on it.  The mainframes\nare disappearing as our stuff replaces it."},{"title":"Change Your Name","text":"August 2015If you have a US startup called X and you don't have x.com, you\nshould probably change your name.The reason is not just that people can't find you.  For companies\nwith mobile apps, especially, having the right domain name is not\nas critical as it used to be for getting users.  The problem with\nnot having the .com of your name is that it signals weakness.  Unless\nyou're so big that your reputation precedes you, a marginal domain\nsuggests you're a marginal company.  Whereas\n(as Stripe shows)\nhaving x.com signals strength even if it has no relation to what you\ndo.Even good founders can be in denial about this.  Their denial derives\nfrom two very powerful forces: identity, and lack of imagination.X is what we are, founders think. There's no other name as good.\nBoth of which are false.You can fix the first by stepping back from the problem. Imagine\nyou'd called your company something else.  If you had, surely you'd\nbe just as attached to that name as you are to your current one.\nThe idea of switching to your current name would seem repellent.\n[1]There's nothing intrinsically great about your current name.  Nearly\nall your attachment to it comes from it being attached to you.\n[2]The way to neutralize the second source of denial, your inability\nto think of other potential names, is to acknowledge that you're\nbad at naming.  Naming is a completely separate skill from those\nyou need to be a good founder.  You can be a great startup founder\nbut hopeless at thinking of names for your company.Once you acknowledge that, you stop believing there is nothing else\nyou could be called.  There are lots of other potential names that\nare as good or better; you just can't think of them.How do you find them? One answer is the default way to solve\nproblems you're bad at: find someone else who can think of names.\nBut with company names there is another possible\napproach.  It turns out almost any word or word pair that is not\nan obviously bad name is a sufficiently good one, and the number\nof such domains is so large that you can find plenty that are cheap\nor even untaken.  So make a list and try to buy some.  That's what\nStripe\ndid.  (Their search also turned up parse.com, which their\nfriends at Parse took.)The reason I know that naming companies is a distinct skill orthogonal\nto the others you need in a startup is that I happen to have it.\nBack when I was running YC and did more office hours with startups,\nI would often help them find new names.  80% of the time we could\nfind at least one good name in a 20 minute office hour slot.Now when I do office hours I have to focus on more important\nquestions, like what the company is doing.  I tell them when they\nneed to change their name.  But I know the power of the forces that\nhave them in their grip, so I know most won't listen.\n[3]There are of course examples of startups that have succeeded without\nhaving the .com of their name.  There are startups that have succeeded despite any\nnumber of different mistakes.  But this mistake is less excusable\nthan most.  It's something that can be fixed in a couple days if\nyou have sufficient discipline to acknowledge the problem.100% of the top 20 YC companies by valuation have the .com of their\nname. 94% of the top 50 do. But only 66% of companies in the current\nbatch have the .com of their name. Which suggests there are lessons\nahead for most of the rest, one way or another.Notes[1]\nIncidentally, this thought experiment works for\nnationality and religion too.[2]\nThe liking you have for a name that has become part of your\nidentity manifests itself not directly, which would be easy to\ndiscount, but as a collection of specious beliefs about its intrinsic\nqualities.  (This too is true of nationality and religion as well.)[3]\nSometimes founders know it's a problem that they don't have\nthe .com of their name, but delusion strikes a step later in the belief that they'll\nbe able to buy it despite having no evidence it's for sale.  Don't\nbelieve a domain is for sale unless the owner has already told you\nan asking price.Thanks to Sam Altman, Jessica Livingston, and Geoff Ralston\nfor reading drafts of this."},{"title":"Cities and Ambition","text":"May 2008\nGreat cities attract ambitious people.  You can sense it when you\nwalk around one.  In a hundred subtle ways, the city sends you a\nmessage: you could do more; you should try harder.The surprising thing is how different these messages can be.  New\nYork tells you, above all: you should make more money.  There are\nother messages too, of course.  You should be hipper.  You should\nbe better looking.  But the clearest message is that you should be\nricher.What I like about Boston (or rather Cambridge) is that the message\nthere is: you should be smarter.  You really should get around to\nreading all those books you've been meaning to.When you ask what message a city sends, you sometimes get surprising\nanswers.  As much as they respect brains in Silicon Valley, the\nmessage the Valley sends is: you should be more powerful.That's not quite the same message New York sends.  Power matters\nin New York too of course, but New York is pretty impressed by a\nbillion dollars even if you merely inherited it.  In Silicon Valley\nno one would care except a few real estate agents.  What matters\nin Silicon Valley is how much effect you have on the world.  The\nreason people there care about Larry and Sergey is not their wealth\nbut the fact that they control Google, which affects practically\neveryone._____How much does it matter what message a city sends?  Empirically,\nthe answer seems to be: a lot. You might think that if you had\nenough strength of mind to do great things, you'd be able to transcend\nyour environment.  Where you live should make at most a couple\npercent difference.  But if you look at the historical evidence,\nit seems to matter more than that.  Most people who did great things\nwere clumped together in a few places where that sort of thing was\ndone at the time.You can see how powerful cities are from something I wrote about\nearlier: the case of the Milanese Leonardo.\nPractically every\nfifteenth century Italian painter you've heard of was from Florence,\neven though Milan was just as big.  People in Florence weren't\ngenetically different, so you have to assume there was someone born\nin Milan with as much natural ability as Leonardo.  What happened\nto him?If even someone with the same natural ability as Leonardo\ncouldn't beat the force of environment, do you suppose you can?I don't.  I'm fairly stubborn, but I wouldn't try to fight this\nforce.  I'd rather use it.  So I've thought a lot about where to\nlive.I'd always imagined Berkeley would be the ideal place—that\nit would basically be Cambridge with good weather.  But when I\nfinally tried living there a couple years ago, it turned out not\nto be.  The message Berkeley sends is: you should live better.  Life\nin Berkeley is very civilized.  It's probably the place in America\nwhere someone from Northern Europe would feel most at home.  But\nit's not humming with ambition.In retrospect it shouldn't have been surprising that a place so\npleasant would attract people interested above all in quality of\nlife.  Cambridge with good weather, it turns out, is not Cambridge.\nThe people you find in Cambridge are not there by accident.  You\nhave to make sacrifices to live there.  It's expensive and somewhat\ngrubby, and the weather's often bad.  So the kind of people you\nfind in Cambridge are the kind of people who want to live where the\nsmartest people are, even if that means living in an expensive,\ngrubby place with bad weather.As of this writing, Cambridge seems to be the intellectual capital\nof the world.  I realize that seems a preposterous claim.  What\nmakes it true is that it's more preposterous to claim about anywhere\nelse.  American universities currently seem to be the best, judging\nfrom the flow of ambitious students.  And what US city has a stronger\nclaim?  New York?  A fair number of smart people, but diluted by a\nmuch larger number of neanderthals in suits.  The Bay Area has a\nlot of smart people too, but again, diluted;  there are two great\nuniversities, but they're far apart.  Harvard and MIT are practically\nadjacent by West Coast standards, and they're surrounded by about\n20 other colleges and universities.\n[1]Cambridge as a result feels like a town whose main industry is\nideas, while New York's is finance and Silicon Valley's is startups._____When you talk about cities in the sense we are, what you're really\ntalking about is collections of people.  For a long time cities\nwere the only large collections of people, so you could use the two\nideas interchangeably.  But we can see how much things are changing\nfrom the examples I've mentioned.  New York is a classic great city.\nBut Cambridge is just part of a city, and Silicon Valley is not\neven that.  (San Jose is not, as it sometimes claims, the capital\nof Silicon Valley.  It's just 178 square miles at one end of it.)Maybe the Internet will change things further.  Maybe one day the\nmost important community you belong to will be a virtual one, and\nit won't matter where you live physically.  But I wouldn't bet on\nit.  The physical world is very high bandwidth, and some of the\nways cities send you messages are quite subtle.One of the exhilarating things about coming back to Cambridge every\nspring is walking through the streets at dusk, when you can see\ninto the houses.  When you walk through Palo Alto in the evening,\nyou see nothing but the blue glow of TVs.  In Cambridge you see\nshelves full of promising-looking books.  Palo Alto was probably\nmuch like Cambridge in 1960, but you'd never guess now that there\nwas a university nearby.  Now it's just one of the richer neighborhoods\nin Silicon Valley.\n[2]A city speaks to you mostly by accident—in things you see\nthrough windows, in conversations you overhear.  It's not something\nyou have to seek out, but something you can't turn off.  One of the\noccupational hazards of living in Cambridge is overhearing the\nconversations of people who use interrogative intonation in declarative\nsentences.  But on average I'll take Cambridge conversations over\nNew York or Silicon Valley ones.A friend who moved to Silicon Valley in the late 90s said the worst\nthing about living there was the low quality of the eavesdropping.\nAt the time I thought she was being deliberately eccentric. Sure,\nit can be interesting to eavesdrop on people, but is good quality\neavesdropping so important that it would affect where you chose to\nlive?  Now I understand what she meant.  The conversations you\noverhear tell you what sort of people you're among._____No matter how determined you are, it's hard not to be influenced\nby the people around you.  It's not so much that you do whatever a\ncity expects of you, but that you get discouraged when no one around\nyou cares about the same things you do.There's an imbalance between encouragement and discouragement like\nthat between gaining and losing money.  Most people overvalue\nnegative amounts of money: they'll work much harder to avoid losing\na dollar than to gain one.  Similarly, although there are plenty of\npeople strong enough to resist doing something just because that's\nwhat one is supposed to do where they happen to be, there are few\nstrong enough to keep working on something no one around them cares\nabout.Because ambitions are to some extent incompatible and admiration\nis a zero-sum game, each city tends to focus on one type of ambition.\nThe reason Cambridge is the intellectual capital is not just that\nthere's a concentration of smart people there, but that there's\nnothing else people there care about more.  Professors in\nNew York and the Bay area are second class citizens—till they\nstart hedge funds or startups respectively.This suggests an answer to a question people in New York have\nwondered about since the Bubble: whether New York could grow into\na startup hub to rival Silicon Valley.  One reason that's unlikely\nis that someone starting a startup in New York would feel like a\nsecond class citizen.\n[3]\nThere's already something else people in New York admire more.In the long term, that could be a bad thing for New York.  The power\nof an important new technology does eventually convert to money.\nSo by caring more about money and less about power than Silicon\nValley, New York is recognizing the same thing, but slower.\n[4]\nAnd in fact it has been losing to Silicon Valley at its own game:\nthe ratio of New York to California residents in the Forbes 400 has\ndecreased from 1.45 (81:56) when the list was first published in\n1982 to .83 (73:88) in 2007._____Not all cities send a message.  Only those that are centers for\nsome type of ambition do.  And it can be hard to tell exactly what\nmessage a city sends without living there.  I understand the messages\nof New York, Cambridge, and Silicon Valley because I've lived for\nseveral years in each of them.  DC and LA seem to send messages\ntoo, but I haven't spent long enough in either to say for sure what\nthey are.The big thing in LA seems to be fame.  There's an A List of people\nwho are most in demand right now, and what's most admired is to be\non it, or friends with those who are.  Beneath that the message is\nmuch like New York's, though perhaps with more emphasis on physical\nattractiveness.In DC the message seems to be that the most important thing is who\nyou know.  You want to be an insider.  In practice this seems to\nwork much as in LA.  There's an A List and you want to be on it or\nclose to those who are.  The only difference is how the A List is\nselected.  And even that is not that different.At the moment, San Francisco's message seems to be the same as\nBerkeley's: you should live better.  But this will change if enough\nstartups choose SF over the Valley.  During the Bubble that was a\npredictor of failure—a self-indulgent choice, like buying\nexpensive office furniture.  Even now I'm suspicious when startups\nchoose SF.  But if enough good ones do, it stops being a self-indulgent\nchoice, because the center of gravity of Silicon Valley will shift\nthere.I haven't found anything like Cambridge for intellectual ambition.\nOxford and Cambridge (England) feel like Ithaca or Hanover: the\nmessage is there, but not as strong.Paris was once a great intellectual center.  If you went there in\n1300, it might have sent the message Cambridge does now.  But I\ntried living there for a bit last year, and the ambitions of the\ninhabitants are not intellectual ones.  The message Paris sends now\nis: do things with style.  I liked that, actually.  Paris is the\nonly city I've lived in where people genuinely cared about art.  In\nAmerica only a few rich people buy original art, and even the more\nsophisticated ones rarely get past judging it by the brand name of\nthe artist.  But looking through windows at dusk in Paris you can\nsee that people there actually care what paintings look like.\nVisually, Paris has the best eavesdropping I know.\n[5]There's one more message I've heard from cities: in London you can\nstill (barely) hear the message that one should be more aristocratic.\nIf you listen for it you can also hear it in Paris, New York, and\nBoston.  But this message is everywhere very faint.  It would have\nbeen strong 100 years ago, but now I probably wouldn't have picked\nit up at all if I hadn't deliberately tuned in to that wavelength\nto see if there was any signal left._____So far the complete list of messages I've picked up from cities is:\nwealth, style, hipness, physical attractiveness, fame, political\npower, economic power, intelligence, social class, and quality of\nlife.My immediate reaction to this list is that it makes me slightly\nqueasy.  I'd always considered ambition a good thing, but I realize\nnow that was because I'd always implicitly understood it to mean\nambition in the areas I cared about.  When you list everything\nambitious people are ambitious about, it's not so pretty.On closer examination I see a couple things on the list that are\nsurprising in the light of history.  For example, physical\nattractiveness wouldn't have been there 100 years ago (though it\nmight have been 2400 years ago).  It has always mattered for women,\nbut in the late twentieth century it seems to have started to matter\nfor men as well.  I'm not sure why—probably some combination\nof the increasing power of women, the increasing influence of actors\nas models, and the fact that so many people work in offices now:\nyou can't show off by wearing clothes too fancy to wear in a factory,\nso you have to show off with your body instead.Hipness is another thing you wouldn't have seen on the list 100\nyears ago.  Or wouldn't you?  What it means is to know what's what.\nSo maybe it has simply replaced the component of social class that\nconsisted of being \"au fait.\"  That could explain why hipness seems\nparticularly admired in London: it's version 2 of the traditional\nEnglish delight in obscure codes that only insiders understand.Economic power would have been on the list 100 years ago, but what\nwe mean by it is changing.  It used to mean the control of vast\nhuman and material resources.  But increasingly it means the ability\nto direct the course of technology, and some of the people in a\nposition to do that are not even rich—leaders of important\nopen source projects, for example.  The Captains of Industry of\ntimes past had laboratories full of clever people cooking up new\ntechnologies for them.  The new breed are themselves those people.As this force gets more attention, another is dropping off the list:\nsocial class.  I think the two changes are related.  Economic power,\nwealth, and social class are just names for the same thing at\ndifferent stages in its life: economic power converts to wealth,\nand wealth to social class.  So the focus of admiration is simply\nshifting upstream._____Does anyone who wants to do great work have to live in a great city?\nNo; all great cities inspire some sort of ambition, but they aren't\nthe only places that do.  For some kinds of work, all you need is\na handful of talented colleagues.What cities provide is an audience, and a funnel for peers.  These\naren't so critical in something like math or physics, where no\naudience matters except your peers, and judging ability is sufficiently\nstraightforward that hiring and admissions committees can do it\nreliably.  In a field like math or physics all you need is a\ndepartment with the right colleagues in it.  It could be anywhere—in\nLos Alamos, New Mexico, for example.It's in fields like the arts or writing or technology that the\nlarger environment matters.  In these the best practitioners aren't\nconveniently collected in a few top university departments and\nresearch labs—partly because talent is harder to judge, and\npartly because people pay for these things, so one doesn't need to\nrely on teaching or research funding to support oneself.  It's in\nthese more chaotic fields that it helps most to be in a great city:\nyou need the encouragement of feeling that people around you care\nabout the kind of work you do, and since you have to find peers for\nyourself, you need the much larger intake mechanism of a great city.You don't have to live in a great city your whole life to benefit\nfrom it.  The critical years seem to be the early and middle ones\nof your career.  Clearly you don't have to grow up in a great city.\nNor does it seem to matter if you go to college in one.  To most\ncollege students a world of a few thousand people seems big enough.\nPlus in college you don't yet have to face the hardest kind of\nwork—discovering new problems to solve.It's when you move on to the next and much harder step that it helps\nmost to be in a place where you can find peers and encouragement.\nYou seem to be able to leave, if you want, once you've found both.\nThe Impressionists show the typical pattern: they were born all\nover France (Pissarro was born in the Carribbean) and died all over\nFrance, but what defined them were the years they spent together\nin Paris._____Unless you're sure what you want to do and where the leading center\nfor it is, your best bet is probably to try living in several\nplaces when you're young.  You can never tell what message a city\nsends till you live there, or even whether it still sends one.\nOften your information will be wrong: I tried living in Florence\nwhen I was 25, thinking it would be an art center, but it turned\nout I was 450 years too late.Even when a city is still a live center of ambition, you won't know\nfor sure whether its message will resonate with you till you hear\nit.  When I moved to New York, I was very excited at first.  It's\nan exciting place.  So it took me quite a while to realize I just\nwasn't like the people there.  I kept searching for the Cambridge\nof New York.  It turned out it was way, way uptown: an hour uptown\nby air.Some people know at 16 what sort of work they're going to do, but\nin most ambitious kids, ambition seems to precede anything specific\nto be ambitious about.  They know they want to do something great.\nThey just haven't decided yet whether they're going to be a rock\nstar or a brain surgeon.  There's nothing wrong with that.  But it\nmeans if you have this most common type of ambition, you'll probably\nhave to figure out where to live by trial and error.  You'll\nprobably have to find the city where you feel at home to know what sort of\nambition you have.Notes[1]\nThis is one of the advantages of not having the universities\nin your country controlled by the government.  When governments\ndecide how to allocate resources, political deal-making causes\nthings to be spread out geographically.  No central goverment would\nput its two best universities in the same town, unless it was the\ncapital (which would cause other problems).  But scholars seem to\nlike to cluster together as much as people in any other field, and\nwhen given the freedom to they derive the same advantages from it.[2]\nThere are still a few old professors in Palo Alto, but one by\none they die and their houses are transformed by developers into\nMcMansions and sold to VPs of Bus Dev.[3]\nHow many times have you read about startup founders who continued\nto live inexpensively as their companies took off?  Who continued\nto dress in jeans and t-shirts, to drive the old car they had in\ngrad school, and so on?  If you did that in New York, people would\ntreat you like shit.  If you walk into a fancy restaurant in San\nFrancisco wearing a jeans and a t-shirt, they're nice to you; who\nknows who you might be?  Not in New York.One sign of a city's potential as a technology center is the number\nof restaurants that still require jackets for men.  According to\nZagat's there are none in San Francisco, LA, Boston, or Seattle,\n4 in DC, 6 in Chicago, 8 in London, 13 in New York, and 20 in Paris.(Zagat's lists the Ritz Carlton Dining Room in SF as requiring jackets\nbut I couldn't believe it, so I called to check and in fact they\ndon't. Apparently there's only one restaurant left on the entire West\nCoast that still requires jackets: The French Laundry in Napa Valley.)[4]\nIdeas are one step upstream from economic power, so it's\nconceivable that intellectual centers like Cambridge will one day\nhave an edge over Silicon Valley like the one the Valley has over\nNew York.This seems unlikely at the moment; if anything Boston is falling\nfurther and further behind.  The only reason I even mention the\npossibility is that the path from ideas to startups has recently\nbeen getting smoother.  It's a lot easier now for a couple of hackers\nwith no business experience to start a startup than it was 10 years\nago.  If you extrapolate another 20 years, maybe the balance of\npower will start to shift back.  I wouldn't bet on it, but I wouldn't\nbet against it either.[5]\nIf Paris is where people care most about art, why is New York\nthe center of gravity of the art business?  Because in the twentieth\ncentury, art as brand split apart from art as stuff.  New York is\nwhere the richest buyers are, but all they demand from art is brand,\nand since you can base brand on anything with a sufficiently\nidentifiable style, you may as well use the local stuff.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston,\nJackie McDonough, Robert Morris, and David Sloo for reading drafts\nof this."},{"title":"Copy What You Like","text":"July 2006\nWhen I was in high school I spent a lot of time imitating bad\nwriters.  What we studied in English classes was mostly fiction,\nso I assumed that was the highest form of writing.  Mistake number\none.  The stories that seemed to be most admired were ones in which\npeople suffered in complicated ways.  Anything funny or\ngripping was ipso facto suspect, unless it was old enough to be hard to\nunderstand, like Shakespeare or Chaucer.  Mistake number two.  The\nideal medium seemed the short story, which I've since learned had\nquite a brief life, roughly coincident with the peak of magazine\npublishing.  But since their size made them perfect for use in\nhigh school classes, we read a lot of them, which gave us the\nimpression the short story was flourishing.  Mistake number three.\nAnd because they were so short, nothing really had to happen; you\ncould just show a randomly truncated slice of life, and that was\nconsidered advanced.  Mistake number four.  The result was that I\nwrote a lot of stories in which nothing happened except that someone\nwas unhappy in a way that seemed deep.For most of college I was a philosophy major.  I was very impressed\nby the papers published in philosophy journals.  They were so\nbeautifully typeset, and their tone was just captivating—alternately\ncasual and buffer-overflowingly technical.  A fellow would be walking\nalong a street and suddenly modality qua modality would spring upon\nhim.  I didn't ever quite understand these papers, but I figured\nI'd get around to that later, when I had time to reread them more\nclosely.  In the meantime I tried my best to imitate them.  This\nwas, I can now see, a doomed undertaking, because they weren't\nreally saying anything.  No philosopher ever refuted another, for\nexample, because no one said anything definite enough to refute.\nNeedless to say, my imitations didn't say anything either.In grad school I was still wasting time imitating the wrong things.\nThere was then a fashionable type of program called an expert system,\nat the core of which was something called an inference engine.  I\nlooked at what these things did and thought \"I could write that in\na thousand lines of code.\"  And yet eminent professors were writing\nbooks about them, and startups were selling them for a year's salary\na copy.  What an opportunity, I thought; these impressive things\nseem easy to me; I must be pretty sharp.  Wrong.  It was simply a\nfad.  The books the professors wrote about expert systems are now\nignored.  They were not even on a path to anything interesting.\nAnd the customers paying so much for them were largely the same\ngovernment agencies that paid thousands for screwdrivers and toilet\nseats.How do you avoid copying the wrong things?  Copy only what you\ngenuinely like.  That would have saved me in all three cases.  I\ndidn't enjoy the short stories we had to read in English classes;\nI didn't learn anything from philosophy papers; I didn't use expert\nsystems myself.  I believed these things were good because they\nwere admired.It can be hard to separate the things you like from the things\nyou're impressed with.  One trick is to ignore presentation.  Whenever\nI see a painting impressively hung in a museum, I ask myself: how\nmuch would I pay for this if I found it at a garage sale, dirty and\nframeless, and with no idea who painted it?  If you walk around a\nmuseum trying this experiment, you'll find you get some truly\nstartling results.  Don't ignore this data point just because it's\nan outlier.Another way to figure out what you like is to look at what you enjoy\nas guilty pleasures.  Many things people like, especially if they're\nyoung and ambitious, they like largely for the feeling of virtue\nin liking them.  99% of people reading Ulysses are thinking\n\"I'm reading Ulysses\" as they do it. A guilty pleasure is\nat least a pure one.  What do you read when you don't feel up to being\nvirtuous?  What kind of book do you read and feel sad that there's\nonly half of it left, instead of being impressed that you're half\nway through?  That's what you really like.Even when you find genuinely good things to copy, there's another\npitfall to be avoided.  Be careful to copy what makes them good,\nrather than their flaws.  It's easy to be drawn into imitating\nflaws, because they're easier to see, and of course easier to copy\ntoo.  For example, most painters in the eighteenth and nineteenth\ncenturies used brownish colors.  They were imitating the great\npainters of the Renaissance, whose paintings by that time were brown\nwith dirt.  Those paintings have since been cleaned, revealing\nbrilliant colors; their imitators are of course still brown.It was painting, incidentally, that cured me of copying the wrong\nthings.  Halfway through grad school I decided I wanted to try being\na painter, and the art world was so manifestly corrupt that it\nsnapped the leash of credulity.  These people made philosophy\nprofessors seem as scrupulous as mathematicians.  It was so clearly\na choice of doing good work xor being an insider that I was forced\nto see the distinction.  It's there to some degree in almost every\nfield, but I had till then managed to avoid facing it.That was one of the most valuable things I learned from painting:\nyou have to figure out for yourself what's\ngood.  You can't trust\nauthorities. They'll lie to you on this one.\nComment on this essay."},{"title":"Could VC be a Casualty of the Recession?","text":"December 2008(I originally wrote this at the request of a company producing\na report about entrepreneurship.  Unfortunately after reading it\nthey decided  it was too controversial to include.)VC funding will probably dry up somewhat during the present recession,\nlike it usually does in bad times.  But this time the result may\nbe different.  This time the number of new startups may not decrease.\nAnd that could be dangerous for VCs.When VC funding dried up after the Internet Bubble, startups dried\nup too.   There were not a lot of new startups being founded in\n2003.  But startups aren't tied to VC the way they were 10 years\nago.  It's now possible for VCs and startups to diverge.  And if\nthey do, they may not reconverge once the economy gets better.The reason startups no longer depend so much on VCs is one that\neveryone in the startup business knows by now: it has gotten much\ncheaper to start a startup.  There are four main reasons: Moore's\nlaw has made hardware cheap; open source has made software free;\nthe web has made marketing and distribution free; and more powerful\nprogramming languages mean development teams can be smaller.  These\nchanges have pushed the cost of starting a startup down into the\nnoise.  In a lot of startups—probaby most startups funded by\nY Combinator—the biggest expense is simply the founders'\nliving expenses.  We've had startups that were profitable on revenues\nof $3000 a month.$3000 is insignificant as revenues go.  Why should anyone care about\na startup making $3000 a month?  Because, although insignificant\nas revenue, this amount of money can change a startup's\nfunding situation completely.Someone running a startup is always calculating in the back of their\nmind how much \"runway\" they have—how long they have till the\nmoney in the bank runs out and they either have to be profitable,\nraise more money, or go out of business.  Once you cross the threshold\nof profitability, however low, your runway becomes infinite.  It's\na qualitative change, like the stars turning into lines and\ndisappearing when the Enterprise accelerates to warp speed.  Once\nyou're profitable you don't need investors' money.  And because\nInternet startups have become so cheap to run, the threshold of\nprofitability can be trivially low.  Which means many Internet\nstartups don't need VC-scale investments anymore.  For many startups,\nVC funding has, in the language of VCs, gone from a must-have to a\nnice-to-have.This change happened while no one was looking, and its effects have\nbeen largely masked so far.  It was during the trough after the\nInternet Bubble that it became trivially cheap to start a startup,\nbut few realized it because startups were so out of fashion.   When\nstartups came back into fashion, around 2005, investors were starting\nto write checks again.  And while founders may not have needed VC\nmoney the way they used to, they were willing to take it if\noffered—partly because there was a tradition of startups\ntaking VC money, and partly because startups, like dogs, tend to\neat when given the opportunity.  As long as VCs were writing checks,\nfounders were never forced to explore the limits of how little they\nneeded them.  There were a few startups who hit these limits\naccidentally because of their unusual circumstances—most\nfamously 37signals, which hit the limit because they crossed into\nstartup land from the other direction: they started as a consulting\nfirm, so they had revenue before they had a product.VCs and founders are like two components that used to be bolted\ntogether.  Around 2000 the bolt was removed.  Because the components\nhave so far been subjected to the same forces, they still seem to\nbe joined together, but really one is just resting on the other.\nA sharp impact would make them fly apart.  And the present recession\ncould be that impact.Because of Y Combinator's position at the extreme end of the spectrum,\nwe'd be the first to see signs of a separation between founders and\ninvestors, and we are in fact seeing it.  For example, though the\nstock market crash does seem to have made investors more cautious,\nit doesn't seem to have had any effect on the number of people who\nwant to start startups.  We take applications for funding every 6\nmonths.  Applications for the current funding cycle closed on October\n17, well after the markets tanked, and even so we got a record\nnumber, up 40% from the same cycle a year before.Maybe things will be different a year from now, if the economy\ncontinues to get worse, but so far there is zero slackening of\ninterest among potential founders.  That's different from the way\nthings felt in 2001.  Then there was a widespread feeling among\npotential founders that startups were over, and that one should\njust go to grad school.   That isn't happening this time, and part\nof the reason is that even in a bad economy it's not that hard to\nbuild something that makes $3000 a month.  If investors stop writing\nchecks, who cares?We also see signs of a divergence between founders and investors\nin the attitudes of existing startups we've funded.  I was talking\nto one recently that had a round fall through at the last minute\nover the sort of trifle that breaks deals when investors feel they\nhave the upper hand—over an uncertainty about whether the\nfounders had correctly filed their 83(b) forms, if you can believe\nthat.  And yet this startup is obviously going to succeed: their\ntraffic and revenue graphs look like a jet taking off.  So I asked\nthem if they wanted me to introduce them to more investors.  To my\nsurprise, they said no—that they'd just spent four months\ndealing with investors, and they were actually a lot happier now\nthat they didn't have to.  There was a friend they wanted to hire\nwith the investor money, and now they'd have to postpone that.  But\notherwise they felt they had enough in the bank to make it to\nprofitability.  To make sure, they were moving to a cheaper apartment.\nAnd in this economy I bet they got a good deal on it.I've detected this \"investors aren't worth the trouble\" vibe from\nseveral YC founders I've talked to recently.  At least one startup\nfrom the most recent (summer) cycle may not even raise angel money,\nlet alone VC.  Ticketstumbler\nmade it to profitability on Y Combinator's $15,000 investment and\nthey hope not to need more.  This surprised even us.  Although YC\nis based on the idea of it being cheap to start a startup, we never\nanticipated that founders would grow successful startups on nothing\nmore than YC funding.If founders decide VCs aren't worth the trouble, that could be bad\nfor VCs.  When the economy bounces back in a few years and they're\nready to write checks again, they may find that founders have moved\non.There is a founder community just as there's a VC community.  They\nall know one another, and techniques spread rapidly between them.\nIf one tries a new programming language or a new hosting provider\nand gets good results, 6 months later half of them are using it.\nAnd the same is true for funding.  The current generation of founders\nwant to raise money from VCs, and Sequoia specifically, because\nLarry and Sergey took money from VCs, and Sequoia specifically.\nImagine what it would do to the VC business if the next hot company\ndidn't take VC at all.VCs think they're playing a zero sum game.  In fact, it's not even\nthat.  If you lose a deal to Benchmark, you lose that deal, but VC\nas an industry still wins.  If you lose a deal to None, all VCs\nlose.This recession may be different from the one after the Internet\nBubble.  This time founders may keep starting startups.  And if\nthey do, VCs will have to keep writing checks, or they could become\nirrelevant.Thanks to Sam Altman, Trevor Blackwell, David Hornik, Jessica\nLivingston, Robert Morris, and Fred Wilson for reading drafts of\nthis."},{"title":"Dan Weinreb: Loop","text":"(Replying to a reference to Waters' series macros on the LL1 mailing\nlist, Dan Weinreb, one of the designers of Common Lisp, writes about the\nLoop macro.  I consider Loop one of the worst flaws in CL, and an\nexample to be borne in mind by both macro writers and language designers.)This was the big competitor to LOOP, back in roughly maybe\n1978-1979 when we all wanted to generalize and extend Maclisp's\n\"new style DO\".  Each approach had its own merits and demerits.\nI think probably we in the LOOP camp were insufficiently sympathetic\nto the merits of Waters's approach, possibly because we were\nnot experienced with lexical scoping, although also because\nthere really were a few things that it didn't do as well as\nLOOP.LOOP, by the way, is one of the few cases of a macro in which\nwe deliberately violated one of the (excellent!) rules that Scott McKay\nenumerated recently on this list.  Namely, we (\"what you mean we?\",\nreally Dave Moon, but others of us were egging him on, so to speak)\ndecided to violate the usual stricture that a Lisp special form\nshould only have a symbol as the first element of the list, and\nthat subsequent \"syntax\" within the special form should be done\nentirely in terms of the nested list structure.After all, we\nwere the ones who had introduced keyword arguments into Lisp.\nThose were symbols used at runtime in a sort of syntactic way.\nHere we went the next step further and used symbols at \"compile\ntime\", i.e. statically, i.e. syntactically (e.g. you did not\nhave to use QUOTE), as keywords.  So we created one of the first\nLisp special forms to be keyword-oriented, and I think it may\nbe the only such special form that was accepted in Common Lisp.(And it was only accepted after very bloody battles were fought,\nas Guy Steele knows better than anyone else, since he was the\nreferee of those battles!)LOOP was not as much of a success as we had hoped.  To this day\nI firmly stick by our decision to use keywords.  All rules have\ntheir exceptions, and this was a case where the benefit of using\nkeywords outweighed the cost of using unusual syntax.  The use\nof keywords is NOT what was wrong with LOOP.Rather, the problem with LOOP was that it turned out to be\nhard to predict what it would do, when you started using a\nlot of different facets of LOOP all together.  This is a\nserious problem since the whole idea of LOOP was to let you\nuse many facets together; if you're not doing that, LOOP\nis overkill.  Moon struggled hard to make LOOP more predictable\nand understandable.  Even at the time I did not fully comprehend\nall the issues; now, over 20 years later, I've almost forgotten\nthem.  But if Dave Moon could not figure out how to solve the\nproblem, I am quite confident that it's a very hard problem to\nsolve."},{"title":"Dan Weinreb on NIL","text":"(Here Dan Weinreb replies to\nOlin Shivers with a\ndescription of some of the extenuating factors in the history of NIL.)You have to take into account who their user community was.  The\nMacsyma people were a very large constituency.  It was clear that\nhigh-speed bignums were way up there on the priority list -- NIL with\nslow bignums would be deemed a failure.It would have helped them a lot if a lot of the people knowledgable\nabout Lisp implementation had not been off working on Lisp machines\ninstead of being part of the NIL team.  They had very extensive\nrequirements, including \"do everything that Maclisp does at least as\nwell as Maclisp does it\", which was a tall order.  The \"quick and\ndirty prototype\" path that Jonathan took with T was not considered\nsuitable.  (At least that's how I remember it, not that I was really\ninvolved directly with NIL...)By the way, while we're talking history, let me mention that it took\nan *amazingly* long time for SETF to be invented.  In retrospect, it's\nseems so simple and obvious.  But the MIT Lisp community went through\nmany generations of structure-macro-packages before SETF came along,\nat which point it was instantly obvious to everybody that SETF was the\nanswer.  (I'm not sure who invented it, but I'm pretty sure it was\neither Dave Moon or Alan Bawden.)And nested backquotes flummoxed all of us for quite some time.  Moon\nand I and Bawden had noticed that nesting backquotes just didn't work,\nbut we didn't understand why.  Finally Bawden groked it in all its\nfullness and discovered that actually it *did* work; our problem was\nthat we had not yet discovered the \",',\" construct.So I hope this is encouraging for newcomers: although other (very\nsmart) people have tramped all over the garden, it there may yet be\nstill-undiscovered gems hiding under that next stone."},{"title":"Default Alive or Default Dead?","text":"October 2015When I talk to a startup that's been operating for more than 8 or\n9 months, the first thing I want to know is almost always the same.\nAssuming their expenses remain constant and their revenue growth\nis what it's been over the last several months, do they make it to\nprofitability on the money they have left?  Or to put it more\ndramatically, by default do they live or die?The startling thing is how often the founders themselves don't know.\nHalf the founders I talk to don't know whether they're default alive\nor default dead.If you're among that number, Trevor Blackwell has made a handy\ncalculator you can use to find out.The reason I want to know first whether a startup is default alive\nor default dead is that the rest of the conversation depends on the\nanswer.  If the company is default alive, we can talk about ambitious\nnew things they could do.  If it's default dead, we probably need\nto talk about how to save it.  We know the current trajectory ends\nbadly.  How can they get off that trajectory?Why do so few founders know whether they're default alive or default\ndead?  Mainly, I think, because they're not used to asking that.\nIt's not a question that makes sense to ask early on, any more than\nit makes sense to ask a 3 year old how he plans to support\nhimself.  But as the company grows older the question switches from\nmeaningless to critical.  That kind of switch often takes people\nby surprise.I propose the following solution: instead of starting to ask too\nlate whether you're default alive or default dead, start asking too\nearly.  It's hard to say precisely when the question switches\npolarity.  But it's probably not that dangerous to start worrying\ntoo early that you're default dead, whereas it's very dangerous to\nstart worrying too late.The reason is a phenomenon I wrote about earlier: the\nfatal pinch.\nThe fatal pinch is default dead + slow growth + not enough\ntime to fix it.  And the way founders end up in it is by not realizing\nthat's where they're headed.There is another reason founders don't ask themselves whether they're\ndefault alive or default dead: they assume it will be easy to raise\nmore money.  But that assumption is often false, and worse still, the\nmore you depend on it, the falser it becomes.Maybe it will help to separate facts from hopes. Instead of thinking\nof the future with vague optimism, explicitly separate the components.\nSay \"We're default dead, but we're counting on investors to save\nus.\" Maybe as you say that it will set off the same alarms in your\nhead that it does in mine.  And if you set off the alarms sufficiently\nearly, you may be able to avoid the fatal pinch.It would be safe to be default dead if you could count on investors\nsaving you.  As a rule their interest is a function of\ngrowth.  If you have steep revenue growth, say over 6x a year, you\ncan start to count on investors being interested even if you're not\nprofitable.\n[1]\nBut investors are so fickle that you can never\ndo more than start to count on it.  Sometimes something about your\nbusiness will spook investors even if your growth is great.  So no\nmatter how good your growth is, you can never safely treat fundraising\nas more than a plan A. You should always have a plan B as well: you\nshould know (as in write down) precisely what you'll need to do to\nsurvive if you can't raise more money, and precisely when you'll\nhave to switch to plan B if plan A isn't working.In any case, growing fast versus operating cheaply is far from the\nsharp dichotomy many founders assume it to be.  In practice there\nis surprisingly little connection between how much a startup spends\nand how fast it grows.  When a startup grows fast, it's usually\nbecause the product hits a nerve, in the sense of hitting some big\nneed straight on.  When a startup spends a lot, it's usually because\nthe product is expensive to develop or sell, or simply because\nthey're wasteful.If you're paying attention, you'll be asking at this point not just\nhow to avoid the fatal pinch, but how to avoid being default dead.\nThat one is easy: don't hire too fast.  Hiring too fast is by far\nthe biggest killer of startups that raise money.\n[2]Founders tell themselves they need to hire in order to grow.  But\nmost err on the side of overestimating this need rather than\nunderestimating it.  Why?  Partly because there's so much work to\nbe done.  Naive founders think that if they can just hire enough\npeople, it somehow will be.  Partly because successful startups have\nlots of employees, so it seems like that's what one does in order\nto be successful.  In fact the large staffs of successful startups\nare probably more the effect of growth than the cause.  And\npartly because when founders have slow growth they don't want to\nface what is usually the real reason: the product is not appealing\nenough.Plus founders who've just raised money are often encouraged to\noverhire by the VCs who funded them.  Kill-or-cure strategies are\noptimal for VCs because they're protected by the portfolio effect.\nVCs want to blow you up, in one sense of the phrase or the other.\nBut as a founder your incentives are different.  You want above all\nto survive.\n[3]Here's a common way startups die.  They make something moderately\nappealing and have decent initial growth. They raise their first\nround fairly easily because the founders seem smart and the idea\nsounds plausible. But because the product is only moderately\nappealing, growth is ok but not great.  The founders convince\nthemselves that hiring a bunch of people is the way to boost growth.\nTheir investors agree.  But (because the product is only moderately\nappealing) the growth never comes.  Now they're rapidly running out\nof runway.  They hope further investment will save them. But because\nthey have high expenses and slow growth, they're now unappealing\nto investors. They're unable to raise more, and the company dies.What the company should have done is address the fundamental problem:\nthat the product is only moderately appealing.  Hiring people is\nrarely the way to fix that.  More often than not it makes it harder.\nAt this early stage, the product needs to evolve more than to be\n\"built out,\" and that's usually easier with fewer people.\n[4]Asking whether you're default alive or default dead may save you\nfrom this.  Maybe the alarm bells it sets off will counteract the\nforces that push you to overhire.  Instead you'll be compelled to\nseek growth in other ways. For example, by doing\nthings that don't scale, or by redesigning the product in the\nway only founders can.\nAnd for many if not most startups, these paths to growth will be\nthe ones that actually work.Airbnb waited 4 months after raising money at the end of Y Combinator\nbefore they hired their first employee.  In the meantime the founders\nwere terribly overworked.  But they were overworked evolving Airbnb\ninto the astonishingly successful organism it is now.Notes[1]\nSteep usage growth will also interest investors.  Revenue\nwill ultimately be a constant multiple of usage, so x% usage growth\npredicts x% revenue growth.  But in practice investors discount\nmerely predicted revenue, so if you're measuring usage you need a\nhigher growth rate to impress investors.[2]\nStartups that don't raise money are saved from hiring too\nfast because they can't afford to. But that doesn't mean you should\navoid raising money in order to avoid this problem, any more than\nthat total abstinence is the only way to avoid becoming an alcoholic.[3]\nI would not be surprised if VCs' tendency to push founders\nto overhire is not even in their own interest.  They don't know how\nmany of the companies that get killed by overspending might have\ndone well if they'd survived.  My guess is a significant number.[4]\nAfter reading a draft, Sam Altman wrote:\"I think you should make the hiring point more strongly.  I think\nit's roughly correct to say that YC's most successful companies\nhave never been the fastest to hire, and one of the marks of a great\nfounder is being able to resist this urge.\"Paul Buchheit adds:\"A related problem that I see a lot is premature scaling—founders\ntake a small business that isn't really working (bad unit economics,\ntypically) and then scale it up because they want impressive growth\nnumbers. This is similar to over-hiring in that it makes the business\nmuch harder to fix once it's big, plus they are bleeding cash really\nfast.\"Thanks to Sam Altman, Paul Buchheit, Joe Gebbia, Jessica Livingston,\nand Geoff Ralston for reading drafts of this."},{"title":"Defining Property","text":"March 2012As a child I read a book of stories about a famous judge in eighteenth\ncentury Japan called Ooka Tadasuke.  One of the cases he decided\nwas brought by the owner of a food shop.  A poor student who could\nafford only rice was eating his rice while enjoying the delicious\ncooking smells coming from the food shop.  The owner wanted the\nstudent to pay for the smells he was enjoying.  The student was\nstealing his smells!This story often comes to mind when I hear the RIAA and MPAA accusing\npeople of stealing music and movies.It sounds ridiculous to us to treat smells as property.  But I can\nimagine scenarios in which one could charge for smells.  Imagine\nwe were living on a moon base where we had to buy air by the\nliter.  I could imagine air suppliers adding scents at an extra\ncharge.The reason it seems ridiculous to us to treat smells as property\nis that it wouldn't work to.  It would work on a moon base, though.What counts as property depends on what works to treat as property.\nAnd that not only can change, but has changed.  Humans may always\n(for some definition of human and always) have treated small items\ncarried on one's person as property.  But hunter gatherers didn't\ntreat land, for example, as property in the way we do.\n[1]The reason so many people think of property as having a single\nunchanging definition is that its definition changes very slowly.\n[2]\nBut we are in the midst of such a change now.  The record\nlabels and movie studios used to distribute what they made like air\nshipped through tubes on a moon base.  But with the arrival of\nnetworks, it's as if we've moved to a planet with a breathable\natmosphere.  Data moves like smells now.  And through a combination\nof wishful thinking and short-term greed, the labels and studios\nhave put themselves in the position of the food shop owner, accusing\nus all of stealing their smells.(The reason I say short-term greed is that the underlying problem\nwith the labels and studios is that the people who run them are\ndriven by bonuses rather than equity.  If they were driven by equity\nthey'd be looking for ways to take advantage of technological change\ninstead of fighting it.  But building new things takes too long.\nTheir bonuses depend on this year's revenues, and the best way to\nincrease those is to extract more money from stuff they do already.)So what does this mean?  Should people not be able to charge for\ncontent?  There's not a single yes or no answer to that question.\nPeople should be able to charge for content when it works to charge\nfor content.But by \"works\" I mean something more subtle than \"when they can get\naway with it.\"  I mean when people can charge for content without\nwarping society in order to do it.  After all, the companies selling\nsmells on the moon base could continue to sell them on the Earth,\nif they lobbied successfully for laws requiring us all to continue\nto breathe through tubes down here too, even though we no longer\nneeded to.The crazy legal measures that the labels and studios have been\ntaking have a lot of that flavor.  Newspapers and magazines are\njust as screwed, but they are at least declining gracefully.  The\nRIAA and MPAA would make us breathe through tubes if they could.Ultimately it comes down to common sense.  When you're abusing the\nlegal system by trying to use mass lawsuits against randomly chosen\npeople as a form of exemplary punishment, or lobbying for laws\nthat would break the Internet if they passed, that's ipso facto\nevidence you're using a definition of property that doesn't work.This is where it's helpful to have working democracies and multiple\nsovereign countries.  If the world had a single, autocratic government,\nthe labels and studios could buy laws making the definition of\nproperty be whatever they wanted.  But fortunately there are still\nsome countries that are not copyright colonies of the US, and even\nin the US, politicians\nstill seem to be afraid of actual voters, in sufficient numbers.\n[3]The people running the US may not like it when voters or other\ncountries refuse to bend to their will, but ultimately it's in all\nour interest that there's not a single point of attack for people\ntrying to warp the law to serve their own purposes.  Private property\nis an extremely useful idea—arguably one of our greatest inventions.\nSo far, each new definition of it has brought us increasing material\nwealth.\n[4]\nIt seems reasonable to suppose the newest one will\ntoo.  It would be a disaster if we all had to keep running an\nobsolete version just because a few powerful people were too lazy\nto upgrade.Notes[1]\nIf you want to learn more about hunter gatherers I strongly\nrecommend Elizabeth Marshall Thomas's The\nHarmless People and The\nOld Way.[2]\nChange in the definition of property is driven mostly by\ntechnological progress, however, and since technological progress\nis accelerating, so presumably will the rate of change in the\ndefinition of property.  Which means it's all the more important\nfor societies to be able to respond gracefully to such changes,\nbecause they will come at an ever increasing rate.[3]\nAs far as I know, the term \"copyright colony\" was first used\nby Myles\nPeterson.[4]\nThe state of technology isn't simply a function of\nthe definition of property.  They each constrain the other.  But\nthat being so, you can't mess with the definition of property without\naffecting (and probably harming) the state of technology.  The\nhistory of the USSR offers a vivid illustration of that.Thanks to Sam Altman and Geoff Ralston for reading drafts\nof this."},{"title":"Design Philosophy","text":"I chose images from 1973 deliberately.  It's easier to tell\ngood design from bad when you're not looking at current\nfashions.  (Try looking at the haircuts in an old high school\nyearbook.)Good design is timeless, and if you want something timeless\nyou can't pander to the limitations of some hypothetical\n\"average\" user.   It's too vague a target.  It's also a\nmoving target: the average\nuser might not be as stupid as you think.Look what happened with the 911.  It's\nso obviously superior to the Cadillac that a child could\ntell it's better.  And so,\nby the 1980s, even the\ndrug dealers that the\nCadillac was designed for wanted\n911s instead.The same thing happens in languages.  The great languages\nhave been the ones that good programmers designed for\ntheir own use-- C, Smalltalk, Lisp.  The languages that were consciously designed for \"average\"\nprogrammers (Cobol, Pascal, Ada) have tended to be\nevolutionary dead ends.The only reliable plan is to design for performance.  Performance\ndoesn't mean speed; that's taking the metaphor too literally.\nSpeed counts, but a programming language is first of all a tool\nfor thinking in.  We want thinking in Arc to feel like driving a 911.(I'm not claiming it will, just that that's the target.)"},{"title":"Design and Research","text":"January 2003(This article is derived from a keynote talk at the fall 2002 meeting\nof NEPLS.)Visitors to this country are often surprised to find that\nAmericans like to begin a conversation by asking \"what do you do?\"\nI've never liked this question.  I've rarely had a\nneat answer to it.  But I think I have finally solved the problem.\nNow, when someone asks me what I do, I look them straight\nin the eye and say \"I'm designing a\nnew dialect of Lisp.\"\nI recommend this answer to anyone who doesn't like being asked what\nthey do.  The conversation will turn immediately to other topics.I don't consider myself to be doing research on programming languages.\nI'm just designing one, in the same way that someone might design\na building or a chair or a new typeface.\nI'm not trying to discover anything new.  I just want\nto make a language that will be good to program in.  In some ways,\nthis assumption makes life a lot easier.The difference between design and research seems to be a question\nof new versus good.  Design doesn't have to be new, but it has to\nbe good.  Research doesn't have to be good, but it has to be new.\nI think these two paths converge at the top: the best design\nsurpasses its predecessors by using new ideas, and the best research\nsolves problems that are not only new, but actually worth solving.\nSo ultimately we're aiming for the same destination, just approaching\nit from different directions.What I'm going to talk about today is what your target looks like\nfrom the back.  What do you do differently when you treat\nprogramming languages as a design problem instead of a research topic?The biggest difference is that you focus more on the user.\nDesign begins by asking, who is this\nfor and what do they need from it?  A good architect,\nfor example, does not begin by creating a design that he then\nimposes on the users, but by studying the intended users and figuring\nout what they need.Notice I said \"what they need,\" not \"what they want.\"  I don't mean\nto give the impression that working as a designer means working as\na sort of short-order cook, making whatever the client tells you\nto.  This varies from field to field in the arts, but\nI don't think there is any field in which the best work is done by\nthe people who just make exactly what the customers tell them to.The customer is always right in\nthe sense that the measure of good design is how well it works\nfor the user.  If you make a novel that bores everyone, or a chair\nthat's horribly uncomfortable to sit in, then you've done a bad\njob, period.  It's no defense to say that the novel or the chair\nis designed according to the most advanced theoretical principles.And yet, making what works for the user doesn't mean simply making\nwhat the user tells you to.  Users don't know what all the choices\nare, and are often mistaken about what they really want.The answer to the paradox, I think, is that you have to design\nfor the user, but you have to design what the user needs, not simply\nwhat he says he wants.\nIt's much like being a doctor.  You can't just treat a patient's\nsymptoms.  When a patient tells you his symptoms, you have to figure\nout what's actually wrong with him, and treat that.This focus on the user is a kind of axiom from which most of the\npractice of good design can be derived, and around which most design\nissues center.If good design must do what the user needs, who is the user?  When\nI say that design must be for users, I don't mean to imply that good\ndesign aims at some kind of\nlowest common denominator.  You can pick any group of users you\nwant.  If you're designing a tool, for example, you can design it\nfor anyone from beginners to experts, and what's good design\nfor one group might be bad for another.  The point\nis, you have to pick some group of users.  I don't think you can\neven talk about good or bad design except with\nreference to some intended user.You're most likely to get good design if the intended users include\nthe designer himself.  When you design something\nfor a group that doesn't include you, it tends to be for people\nyou consider to be less sophisticated than you, not more sophisticated.That's a problem, because looking down on the user, however benevolently,\nseems inevitably to corrupt the designer.\nI suspect that very few housing\nprojects in the US were designed by architects who expected to live\nin them.   You can see the same thing\nin programming languages.  C, Lisp, and Smalltalk were created for\ntheir own designers to use.  Cobol, Ada, and Java, were created\nfor other people to use.If you think you're designing something for idiots, the odds are\nthat you're not designing something good, even for idiots.Even if you're designing something for the most sophisticated\nusers, though, you're still designing for humans.  It's different\nin research.  In math you\ndon't choose abstractions because they're\neasy for humans to understand; you choose whichever make the\nproof shorter.  I think this is true for the sciences generally.\nScientific ideas are not meant to be ergonomic.Over in the arts, things are very different.  Design is\nall about people.  The human body is a strange\nthing, but when you're designing a chair,\nthat's what you're designing for, and there's no way around it.\nAll the arts have to pander to the interests and limitations\nof humans.   In painting, for example, all other things being\nequal a painting with people in it will be more interesting than\none without.  It is not merely an accident of history that\nthe great paintings of the Renaissance are all full of people.\nIf they hadn't been, painting as a medium wouldn't have the prestige\nthat it does.Like it or not, programming languages are also for people,\nand I suspect the human brain is just as lumpy and idiosyncratic\nas the human body.  Some ideas are easy for people to grasp\nand some aren't.  For example, we seem to have a very limited\ncapacity for dealing with detail.  It's this fact that makes\nprograming languages a good idea in the first place; if we\ncould handle the detail, we could just program in machine\nlanguage.Remember, too, that languages are not\nprimarily a form for finished programs, but something that\nprograms have to be developed in.  Anyone in the arts could\ntell you that you might want different mediums for the\ntwo situations.  Marble, for example, is a nice, durable\nmedium for finished ideas, but a hopelessly inflexible one\nfor developing new ideas.A program, like a proof,\nis a pruned version of a tree that in the past has had\nfalse starts branching off all over it.  So the test of\na language is not simply how clean the finished program looks\nin it, but how clean the path to the finished program was.\nA design choice that gives you elegant finished programs\nmay not give you an elegant design process.  For example,\nI've written a few macro-defining macros full of nested\nbackquotes that look now like little gems, but writing them\ntook hours of the ugliest trial and error, and frankly, I'm still\nnot entirely sure they're correct.We often act as if the test of a language were how good\nfinished programs look in it.\nIt seems so convincing when you see the same program\nwritten in two languages, and one version is much shorter.\nWhen you approach the problem from the direction of the\narts, you're less likely to depend on this sort of\ntest.  You don't want to end up with a programming\nlanguage like marble.For example, it is a huge win in developing software to\nhave an interactive toplevel, what in Lisp is called a\nread-eval-print loop.  And when you have one this has\nreal effects on the design of the language.  It would not\nwork well for a language where you have to declare\nvariables before using them, for example.  When you're\njust typing expressions into the toplevel, you want to be\nable to set x to some value and then start doing things\nto x.  You don't want to have to declare the type of x\nfirst.  You may dispute either of the premises, but if\na language has to have a toplevel to be convenient, and\nmandatory type declarations are incompatible with a\ntoplevel, then no language that makes type declarations\nmandatory could be convenient to program in.In practice, to get good design you have to get close, and stay\nclose, to your users.  You have to calibrate your ideas on actual\nusers constantly, especially in the beginning.  One of the reasons\nJane Austen's novels are so good is that she read them out loud to\nher family.  That's why she never sinks into self-indulgently arty\ndescriptions of landscapes,\nor pretentious philosophizing.  (The philosophy's there, but it's\nwoven into the story instead of being pasted onto it like a label.)\nIf you open an average \"literary\" novel and imagine reading it out loud\nto your friends as something you'd written, you'll feel all too\nkeenly what an imposition that kind of thing is upon the reader.In the software world, this idea is known as Worse is Better.\nActually, there are several ideas mixed together in the concept of\nWorse is Better, which is why people are still arguing about\nwhether worse\nis actually better or not.  But one of the main ideas in that\nmix is that if you're building something new, you should get a\nprototype in front of users as soon as possible.The alternative approach might be called the Hail Mary strategy.\nInstead of getting a prototype out quickly and gradually refining\nit, you try to create the complete, finished, product in one long\ntouchdown pass.  As far as I know, this is a\nrecipe for disaster.  Countless startups destroyed themselves this\nway during the Internet bubble.  I've never heard of a case\nwhere it worked.What people outside the software world may not realize is that\nWorse is Better is found throughout the arts.\nIn drawing, for example, the idea was discovered during the\nRenaissance.  Now almost every drawing teacher will tell you that\nthe right way to get an accurate drawing is not to\nwork your way slowly around the contour of an object, because errors will\naccumulate and you'll find at the end that the lines don't meet.\nInstead you should draw a few quick lines in roughly the right place,\nand then gradually refine this initial sketch.In most fields, prototypes\nhave traditionally been made out of different materials.\nTypefaces to be cut in metal were initially designed\nwith a brush on paper.  Statues to be cast in bronze\nwere modelled in wax.  Patterns to be embroidered on tapestries\nwere drawn on paper with ink wash.  Buildings to be\nconstructed from stone were tested on a smaller scale in wood.What made oil paint so exciting, when it\nfirst became popular in the fifteenth century, was that you\ncould actually make the finished work from the prototype.\nYou could make a preliminary drawing if you wanted to, but you\nweren't held to it; you could work out all the details, and\neven make major changes, as you finished the painting.You can do this in software too.  A prototype doesn't have to\nbe just a model; you can refine it into the finished product.\nI think you should always do this when you can.  It lets you\ntake advantage of new insights you have along the way.  But\nperhaps even more important, it's good for morale.Morale is key in design.  I'm surprised people\ndon't talk more about it.  One of my first\ndrawing teachers told me: if you're bored when you're\ndrawing something, the drawing will look boring.\nFor example, suppose you have to draw a building, and you\ndecide to draw each brick individually.  You can do this\nif you want, but if you get bored halfway through and start\nmaking the bricks mechanically instead of observing each one,\nthe drawing will look worse than if you had merely suggested\nthe bricks.Building something by gradually refining a prototype is good\nfor morale because it keeps you engaged.  In software, my\nrule is: always have working code.  If you're writing\nsomething that you'll be able to test in an hour, then you\nhave the prospect of an immediate reward to motivate you.\nThe same is true in the arts, and particularly in oil painting.\nMost painters start with a blurry sketch and gradually\nrefine it.\nIf you work this way, then in principle\nyou never have to end the day with something that actually\nlooks unfinished.  Indeed, there is even a saying among\npainters: \"A painting is never finished, you just stop\nworking on it.\"  This idea will be familiar to anyone who\nhas worked on software.Morale is another reason that it's hard to design something\nfor an unsophisticated user.   It's hard to stay interested in\nsomething you don't like yourself.  To make something\ngood, you have to be thinking, \"wow, this is really great,\"\nnot \"what a piece of shit; those fools will love it.\"Design means making things for humans.  But it's not just the\nuser who's human.  The designer is human too.Notice all this time I've been talking about \"the designer.\"\nDesign usually has to be under the control of a single person to\nbe any good.   And yet it seems to be possible for several people\nto collaborate on a research project.  This seems to\nme one of the most interesting differences between research and\ndesign.There have been famous instances of collaboration in the arts,\nbut most of them seem to have been cases of molecular bonding rather\nthan nuclear fusion.  In an opera it's common for one person to\nwrite the libretto and another to write the music.   And during the Renaissance,\njourneymen from northern\nEurope were often employed to do the landscapes in the\nbackgrounds of Italian paintings.  But these aren't true collaborations.\nThey're more like examples of Robert Frost's\n\"good fences make good neighbors.\"  You can stick instances\nof good design together, but within each individual project,\none person has to be in control.I'm not saying that good design requires that one person think\nof everything.  There's nothing more valuable than the advice\nof someone whose judgement you trust.  But after the talking is\ndone, the decision about what to do has to rest with one person.Why is it that research can be done by collaborators and\ndesign can't?  This is an interesting question.  I don't\nknow the answer.  Perhaps,\nif design and research converge, the best research is also\ngood design, and in fact can't be done by collaborators.\nA lot of the most famous scientists seem to have worked alone.\nBut I don't know enough to say whether there\nis a pattern here.  It could be simply that many famous scientists\nworked when collaboration was less common.Whatever the story is in the sciences, true collaboration\nseems to be vanishingly rare in the arts.  Design by committee is a\nsynonym for bad design.  Why is that so?  Is there some way to\nbeat this limitation?I'm inclined to think there isn't-- that good design requires\na dictator.  One reason is that good design has to\nbe all of a piece.  Design is not just for humans, but\nfor individual humans.  If a design represents an idea that\nfits in one person's head, then the idea will fit in the user's\nhead too.Related:"},{"title":"Dexter Walks","text":"26 Feb 2007This Valentine's Day I saw one of the most exciting things I've\nseen in my life: Trevor Blackwell's robot finally walked.   Dexter\nis, as far as we know, the first dynamically balancing biped\nrobot—that is, the first robot that walks like we do.\nThere are of course biped robots that walk.  The Honda Asimo is the\nbest known.  But the Asimo doesn't balance dynamically.  Its walk\nis preprogrammed; if you had it walk twice across the same space,\nit would put its feet down in exactly the same place the second\ntime.  And of course the floor has to be hard and flat.Dynamically balancing—the way we walk—is much harder.  It looks\nfairly smooth when we do it, but it's really a controlled fall.  At\nany given moment you have to think (or at least, your body does)\nabout which direction you're falling, and put your foot down in\nexactly the right place to push you in the direction you want to\ngo.  Practice makes it seem easy to us, but it's a hard problem\nto solve.  Something as tall as a human becomes irretrievably off\nbalance very rapidly.  When a robot is falling, meaning its center\nof gravity is not centered over the foot (or feet) on the ground,\nthe error grows by e^(t/.5). If a robot gets more than a few\ncentimeters off balance, it's unlikely to recover, because you just\ncan't move the limbs fast enough to compensate.Trevor started working on this problem in May 2001, and it was not\ntill February 2007 that he could even make Dexter lift one foot off\nthe ground and put it down again without falling over.  In retrospect,\nI don't know what kept him going.  I talked to him constantly about\nthis project as he was working on it, and I know for most of those\nsix years he had no idea how he was going to solve the problem.\nThis isn't like software: when a robot can't walk, you can't say\nfor sure why not.The breakthrough, according to Trevor, was to dramatically improve\nthe robot's sense of where its center of gravity was.  None of the\ncommercial gyroscopes were good enough, he said, so he built his\nown.  It also helped to make the feet lighter.  The original feet,\nwearing heavy Doc Martens, were replaced by lighter ones outfitted\nwith Vans.  (I'm not joking.)We were very excited when Dexter could lift a foot up without\nfalling, because it meant walking was not far behind.  Y Combinator's\nwest coast offices are within the building of Anybots, Trevor's\nrobot company, so every Tuesday dinner we got to see a demo of\nwhatever Trevor had made in the past week.  And on February 13th\nwe saw something really dramatic: Dexter could walk a few steps\nforward without falling over.  I hung around the next day as well,\nbecause I had the feeling I was witnessing something historic.  On\nthe morning of Valentine's Day, Dexter was walking so well that\nTrevor and Scott Wiley took the front off his rolling cage (which\ncatches him when he falls) so that he'd have more room.  And by\nthat night, Dexter was really walking.  The longest walk, which Dan\nMiller got on video, was over six feet.Now, a week later, Dexter is so good at walking that the limit on\nthe length of his walks is the size of room he lives in.  Next step:\na cage that can operate outdoors, so Trevor can take Dexter for a\nwalk in the park.A dynamically balancing robot is really something to see.  You can't\nturn away from it. It's so shockingly anthropomorphic.  Because it\nwalks like you do, you sense what it's feeling.  But of course it\nwasn't (just) for entertainment that Trevor built this thing.  Any\nrobot for use in real world situations has to balance dynamically,\nbecause you can't predict what surface it would have to walk on.What makes Dexter all the more impressive is that Anybots consists\nof just three guys and a machine shop.  Basically it's PARC without\nXerox.  Eventually they'll have to take outside money.  I tell\nTrevor that he should just find a big company to pay Anybots'\noperating costs in exchange for a license to use what they develop.\nOr they could go after government grants, or raise venture capital.\nOne way or another, ten or twenty years from now you'll see robots\nlike this walking around."},{"title":"Disconnecting Distraction","text":"Note: The strategy described at the end of this essay didn't work.\nIt would work for a while, and then I'd gradually find myself\nusing the Internet on my work computer.  I'm trying other\nstrategies now, but I think this time I'll wait till I'm sure\nthey work before writing about them.May 2008Procrastination feeds on distractions.  Most people find it\nuncomfortable just to sit and do nothing; you avoid work by doing\nsomething else.So one way to beat procrastination is to starve it of distractions.\nBut that's not as straightforward as it sounds, because there are\npeople working hard to distract you.  Distraction is not a static\nobstacle that you avoid like you might avoid a rock in the road.\nDistraction seeks you out.Chesterfield described dirt as matter out of place.  Distracting\nis, similarly, desirable at the wrong time.  And technology is\ncontinually being refined to produce more and more desirable things.\nWhich means that as we learn to avoid one class of distractions,\nnew ones constantly appear, like drug-resistant bacteria.Television, for example, has after 50 years of refinement reached\nthe point where it's like visual crack.  I realized when I was 13\nthat TV was addictive, so I stopped watching it.  But I read recently\nthat the average American watches\n4 hours\nof TV a day.  A quarter\nof their life.TV is in decline now, but only because people have found even more\naddictive ways of wasting time.  And what's especially dangerous\nis that many happen at your computer.  This is no accident.  An\never larger percentage of office workers sit in front of computers\nconnected to the Internet, and distractions always evolve toward\nthe procrastinators.I remember when computers were, for me at least, exclusively for\nwork.  I might occasionally dial up a server to get mail or ftp\nfiles, but most of the time I was offline.  All I could do was write\nand program.  Now I feel as if someone snuck a television onto my\ndesk.  Terribly addictive things are just a click away.  Run into\nan obstacle in what you're working on?  Hmm, I wonder what's new\nonline.  Better check.After years of carefully avoiding classic time sinks like TV, games,\nand Usenet, I still managed to fall prey to distraction, because\nI didn't realize that it evolves.  Something that used to be safe,\nusing the Internet, gradually became more and more dangerous.  Some\ndays I'd wake up, get a cup of tea and check the news, then check\nemail, then check the news again, then answer a few emails, then\nsuddenly notice it was almost lunchtime and I hadn't gotten any real\nwork done.  And this started to happen more and more often.It took me surprisingly long to realize how distracting the Internet\nhad become, because the problem was intermittent.  I ignored it the\nway you let yourself ignore a bug that only appears intermittently.  When\nI was in the middle of a project, distractions weren't really a\nproblem.  It was when I'd finished one project and was deciding\nwhat to do next that they always bit me.Another reason it was hard to notice the danger of this new type\nof distraction was that social customs hadn't yet caught up with\nit.  If I'd spent a whole morning sitting on a sofa watching TV,\nI'd have noticed very quickly.  That's a known danger sign, like\ndrinking alone.  But using the Internet still looked and felt a\nlot like work.Eventually, though, it became clear that the Internet had become so much\nmore distracting that I had to start treating it differently.\nBasically, I had to add a new application to my list of known time\nsinks: Firefox.* * *The problem is a hard one to solve because most people still need\nthe Internet for some things.  If you drink too much, you can solve\nthat problem by stopping entirely.  But you can't solve the problem\nof overeating by stopping eating.  I couldn't simply avoid the\nInternet entirely, as I'd done with previous time sinks.At first I tried rules.  For example, I'd tell myself I was only\ngoing to use the Internet twice a day.  But these schemes never\nworked for long.  Eventually something would come up that required\nme to use it more than that.  And then I'd gradually slip back\ninto my old ways.Addictive things have to be treated as if they were sentient\nadversaries—as if there were a little man in your head always\ncooking up the most plausible arguments for doing whatever you're\ntrying to stop doing.  If you leave a path to it, he'll find it.The key seems to be visibility.  The biggest ingredient in most bad habits\nis denial.  So you have to make it so that you can't merely slip\ninto doing the thing you're trying to avoid.  It has to set off\nalarms.Maybe in the long term the right answer for dealing with Internet\ndistractions will be\nsoftware that watches and controls them.  But\nin the meantime I've found a more drastic solution that definitely\nworks: to set up a separate computer for using the Internet.I now leave wifi turned off on my main computer except when I need\nto transfer a file or edit a web page, and I have a separate laptop\non the other side\nof the room that I use to check mail or browse the web.  (Irony of\nironies, it's the computer Steve Huffman wrote Reddit on.  When\nSteve and Alexis auctioned off their old laptops for charity, I\nbought them for the Y Combinator museum.)My rule is that I can spend as much time online as I want, as long\nas I do it on that computer.  And this turns out to be enough.  When\nI have to sit on the other side of the room to check email or browse\nthe web, I become much more aware of it.  Sufficiently aware, in\nmy case at least, that it's hard to spend more than about an hour\na day online.And my main computer is now freed for work.  If you try this trick,\nyou'll probably be struck by how different it feels when your\ncomputer is disconnected from the Internet.  It was alarming to me\nhow foreign it felt to sit in front of a computer that could\nonly be used for work, because that showed how much time I must\nhave been wasting.Wow.  All I can do at this computer is work.  Ok, I better work\nthen.That's the good part.  Your old bad habits now help you to work.\nYou're used to sitting in front of that computer for hours at a\ntime.   But you can't browse the web or check email now.  What are\nyou going to do?  You can't just sit there.  So you start working."},{"title":"Do Things that Don't Scale","text":"July 2013One of the most common types of advice we give at Y Combinator is\nto do things that don't scale.  A lot of would-be founders believe\nthat startups either take off or don't.  You build something, make\nit available, and if you've made a better mousetrap, people beat a\npath to your door as promised.  Or they don't, in which case the\nmarket must not exist.\n[1]Actually startups take off because the founders make them take off.\nThere may be a handful that just grew by themselves, but usually\nit takes some sort of push to get them going.  A good metaphor would\nbe the cranks that car engines had before they got electric starters.\nOnce the engine was going, it would keep going, but there was a\nseparate and laborious process to get it going.RecruitThe most common unscalable thing founders have to do at the start\nis to recruit users manually.  Nearly all startups have to.  You\ncan't wait for users to come to you.  You have to go out and get\nthem.Stripe is one of the most successful startups we've funded, and the\nproblem they solved was an urgent one.   If anyone could have sat\nback and waited for users, it was Stripe.  But in fact they're\nfamous within YC for aggressive early user acquisition.Startups building things for other startups have a big pool of\npotential users in the other companies we've funded, and none took\nbetter advantage of it than Stripe.  At YC we use the term \"Collison\ninstallation\" for the technique they invented.  More diffident\nfounders ask \"Will you try our beta?\" and if the answer is yes,\nthey say \"Great, we'll send you a link.\"  But the Collison brothers\nweren't going to wait. When anyone agreed to try Stripe they'd say\n\"Right then, give me your laptop\" and set them up on the spot.There are two reasons founders resist going out and recruiting users\nindividually.  One is a combination of shyness and laziness.  They'd\nrather sit at home writing code than go out and talk to a bunch of\nstrangers and probably be rejected by most of them.  But for a\nstartup to succeed, at least one founder (usually the CEO) will\nhave to spend a lot of time on sales and marketing.\n[2]The other reason founders ignore this path is that the absolute\nnumbers seem so small at first.  This can't be how the big, famous\nstartups got started, they think. The mistake they make is to\nunderestimate the power of compound growth.  We encourage every\nstartup to measure their progress by weekly growth\nrate.  If you have 100 users, you need to get 10 more next week\nto grow 10% a week.  And while 110 may not seem much better than\n100, if you keep growing at 10% a week you'll be surprised how big\nthe numbers get.  After a year you'll have 14,000 users, and after\n2 years you'll have 2 million.You'll be doing different things when you're acquiring users a\nthousand at a time, and growth has to slow down eventually.  But\nif the market exists you can usually start by recruiting users\nmanually and then gradually switch to less manual methods.\n[3]Airbnb is a classic example of this technique.  Marketplaces are\nso hard to get rolling that you should expect to take heroic measures\nat first. In Airbnb's case, these consisted of going door to door\nin New York, recruiting new users and helping existing ones improve\ntheir listings.  When I remember the Airbnbs during YC, I picture\nthem with rolly bags, because when they showed up for tuesday dinners\nthey'd always just flown back from somewhere.FragileAirbnb now seems like an unstoppable juggernaut, but early on it\nwas so fragile that about 30 days of going out and engaging in\nperson with users made the difference between success and failure.That initial fragility was not a unique feature of Airbnb.  Almost\nall startups are fragile initially.  And that's one of the biggest\nthings inexperienced founders and investors (and reporters and\nknow-it-alls on forums) get wrong about them.  They unconsciously\njudge larval startups by the standards of established ones.  They're\nlike someone looking at a newborn baby and concluding \"there's no\nway this tiny creature could ever accomplish anything.\"It's harmless if reporters and know-it-alls dismiss your startup.\nThey always get things wrong.   It's even ok if investors dismiss\nyour startup; they'll change their minds when they see growth.  The\nbig danger is that you'll dismiss your startup yourself.  I've seen\nit happen.  I often have to encourage founders who don't see the\nfull potential of what they're building.  Even Bill Gates made that\nmistake.  He returned to Harvard for the fall semester after starting\nMicrosoft.  He didn't stay long, but he wouldn't have returned at\nall if he'd realized Microsoft was going to be even a fraction of\nthe size it turned out to be.\n[4]The question to ask about an early stage startup is not \"is this\ncompany taking over the world?\"  but \"how big could this company\nget if the founders did the right things?\"  And the right things\noften seem both laborious and inconsequential at the time. Microsoft\ncan't have seemed very impressive when it was just a couple guys\nin Albuquerque writing Basic interpreters for a market of a few\nthousand hobbyists (as they were then called), but in retrospect\nthat was the optimal path to dominating microcomputer software.\nAnd I know Brian Chesky and Joe Gebbia didn't feel like they were\nen route to the big time as they were taking \"professional\" photos\nof their first hosts' apartments.  They were just trying to survive.\nBut in retrospect that too was the optimal path to dominating a big\nmarket.How do you find users to recruit manually?  If you build something\nto solve your own problems, then\nyou only have to find your peers, which is usually straightforward.\nOtherwise you'll have to make a more deliberate effort to locate\nthe most promising vein of users.  The usual way to do that is to\nget some initial set of users by doing a comparatively untargeted\nlaunch, and then to observe which kind seem most enthusiastic, and\nseek out more like them.  For example, Ben Silbermann noticed that\na lot of the earliest Pinterest users were interested in design,\nso he went to a conference of design bloggers to recruit users, and\nthat worked well.\n[5]DelightYou should take extraordinary measures not just to acquire users,\nbut also to make them happy.  For as long as they could (which\nturned out to be surprisingly long), Wufoo sent each new user a\nhand-written thank you note.  Your first users should feel that\nsigning up with you was one of the best choices they ever made.\nAnd you in turn should be racking your brains to think of new ways\nto delight them.Why do we have to teach startups this?  Why is it counterintuitive\nfor founders?  Three reasons, I think.One is that a lot of startup founders are trained as engineers,\nand customer service is not part of the training of engineers.\nYou're supposed to build things that are robust and elegant, not\nbe slavishly attentive to individual users like some kind of\nsalesperson.  Ironically, part of the reason engineering is\ntraditionally averse to handholding is that its traditions date\nfrom a time when engineers were less powerful—when they were\nonly in charge of their narrow domain of building things, rather\nthan running the whole show.  You can be ornery when you're Scotty,\nbut not when you're Kirk.Another reason founders don't focus enough on individual customers\nis that they worry it won't scale.  But when founders of larval\nstartups worry about this, I point out that in their current state\nthey have nothing to lose.  Maybe if they go out of their way to\nmake existing users super happy, they'll one day have too many to\ndo so much for.  That would be a great problem to have.  See if you\ncan make it happen.  And incidentally, when it does, you'll find\nthat delighting customers scales better than you expected.  Partly\nbecause you can usually find ways to make anything scale more than\nyou would have predicted, and partly because delighting customers\nwill by then have permeated your culture.I have never once seen a startup lured down a blind alley by trying\ntoo hard to make their initial users happy.But perhaps the biggest thing preventing founders from realizing\nhow attentive they could be to their users is that they've never\nexperienced such attention themselves.  Their standards for customer\nservice have been set by the companies they've been customers of,\nwhich are mostly big ones.  Tim Cook doesn't send you a hand-written\nnote after you buy a laptop.  He can't.  But you can.  That's one\nadvantage of being small: you can provide a level of service no big\ncompany can.\n[6]Once you realize that existing conventions are not the upper bound\non user experience, it's interesting in a very pleasant way to think\nabout how far you could go to delight your users.ExperienceI was trying to think of a phrase to convey how extreme your attention\nto users should be, and I realized Steve Jobs had already done it:\ninsanely great.  Steve wasn't just using \"insanely\" as a synonym\nfor \"very.\"  He meant it more literally—that one should focus\non quality of execution to a degree that in everyday life would be\nconsidered pathological.All the most successful startups we've funded have, and that probably\ndoesn't surprise would-be founders.  What novice founders don't get\nis what insanely great translates to in a larval startup.  When\nSteve Jobs started using that phrase, Apple was already an established\ncompany.  He meant the Mac (and its documentation and even\npackaging—such is the nature of obsession) should be insanely\nwell designed and manufactured.  That's not hard for engineers to\ngrasp.  It's just a more extreme version of designing a robust and\nelegant product.What founders have a hard time grasping (and Steve himself might\nhave had a hard time grasping) is what insanely great morphs into\nas you roll the time slider back to the first couple months of a\nstartup's life.  It's not the product that should be insanely great,\nbut the experience of being your user.  The product is just one\ncomponent of that.  For a big company it's necessarily the dominant\none.  But you can and should give users an insanely great experience\nwith an early, incomplete, buggy product, if you make up the\ndifference with attentiveness.Can, perhaps, but should?  Yes.  Over-engaging with early users is\nnot just a permissible technique for getting growth rolling.  For\nmost successful startups it's a necessary part of the feedback loop\nthat makes the product good.  Making a better mousetrap is not an\natomic operation.  Even if you start the way most successful startups\nhave, by building something you yourself need, the first thing you\nbuild is never quite right.  And except in domains with big penalties\nfor making mistakes, it's often better not to aim for perfection\ninitially.  In software, especially, it usually works best to get\nsomething in front of users as soon as it has a quantum of utility,\nand then see what they do with it.  Perfectionism is often an excuse\nfor procrastination, and in any case your initial model of users\nis always inaccurate, even if you're one of them.\n[7]The feedback you get from engaging directly with your earliest users\nwill be the best you ever get.  When you're so big you have to\nresort to focus groups, you'll wish you could go over to your users'\nhomes and offices and watch them use your stuff like you did when\nthere were only a handful of them.FireSometimes the right unscalable trick is to focus on a deliberately\nnarrow market.  It's like keeping a fire contained at first to get\nit really hot before adding more logs.That's what Facebook did.  At first it was just for Harvard students.\nIn that form it only had a potential market of a few thousand people,\nbut because they felt it was really for them, a critical mass of\nthem signed up.  After Facebook stopped being for Harvard students,\nit remained for students at specific colleges for quite a while.\nWhen I interviewed Mark Zuckerberg at Startup School, he said that\nwhile it was a lot of work creating course lists for each school,\ndoing that made students feel the site was their natural home.Any startup that could be described as a marketplace usually has\nto start in a subset of the market, but this can work for other\nstartups as well.  It's always worth asking if there's a subset of\nthe market in which you can get a critical mass of users quickly.\n[8]Most startups that use the contained fire strategy do it unconsciously.\nThey build something for themselves and their friends, who happen\nto be the early adopters, and only realize later that they could\noffer it to a broader market.  The strategy works just as well if\nyou do it unconsciously.  The biggest danger of not being consciously\naware of this pattern is for those who naively discard part of it.\nE.g. if you don't build something for yourself and your friends,\nor even if you do, but you come from the corporate world and your\nfriends are not early adopters, you'll no longer have a perfect\ninitial market handed to you on a platter.Among companies, the best early adopters are usually other startups.\nThey're more open to new things both by nature and because, having\njust been started, they haven't made all their choices yet.  Plus\nwhen they succeed they grow fast, and you with them.  It was one\nof many unforeseen advantages of the YC model (and specifically of\nmaking YC big) that B2B startups now have an instant market of\nhundreds of other startups ready at hand.MerakiFor hardware startups there's a variant of\ndoing things that don't scale that we call \"pulling a Meraki.\"\nAlthough we didn't fund Meraki, the founders were Robert Morris's\ngrad students, so we know their history.  They got started by doing\nsomething that really doesn't scale: assembling their routers\nthemselves.Hardware startups face an obstacle that software startups don't.\nThe minimum order for a factory production run is usually several\nhundred thousand dollars.  Which can put you in a catch-22: without\na product you can't generate the growth you need to raise the money\nto manufacture your product.  Back when hardware startups had to\nrely on investors for money, you had to be pretty convincing to\novercome this.  The arrival of crowdfunding (or more precisely,\npreorders) has helped a lot.  But even so I'd advise startups to\npull a Meraki initially if they can.  That's what Pebble did.  The\nPebbles\nassembled\nthe first several hundred watches themselves. If\nthey hadn't gone through that phase, they probably wouldn't have\nsold $10 million worth of watches when they did go on Kickstarter.Like paying excessive attention to early customers, fabricating\nthings yourself turns out to be valuable for hardware startups.\nYou can tweak the design faster when you're the factory, and you\nlearn things you'd never have known otherwise.  Eric Migicovsky of\nPebble said one of things he learned was \"how valuable it was to\nsource good screws.\"   Who knew?ConsultSometimes we advise founders of B2B startups to take over-engagement\nto an extreme, and to pick a single user and act as if they were\nconsultants building something just for that one user.   The initial\nuser serves as the form for your mold; keep tweaking till you fit\ntheir needs perfectly, and you'll usually find you've made something\nother users want too.  Even if there aren't many of them, there are\nprobably adjacent territories that have more.  As long as you can\nfind just one user who really needs something and can act on that\nneed, you've got a toehold in making something people want, and\nthat's as much as any startup needs initially.\n[9]Consulting is the canonical example of work that doesn't scale.\nBut (like other ways of bestowing one's favors liberally) it's safe\nto do it so long as you're not being paid to.  That's where companies\ncross the line.  So long as you're a product company that's merely\nbeing extra attentive to a customer, they're very grateful even if\nyou don't solve all their problems.  But when they start paying you\nspecifically for that attentiveness—when they start paying\nyou by the hour—they expect you to do everything.Another consulting-like technique for recruiting initially lukewarm\nusers is to use your software yourselves on their behalf.  We\ndid that at Viaweb.  When we approached merchants asking if they\nwanted to use our software to make online stores, some said no, but\nthey'd let us make one for them.  Since we would do anything to get\nusers, we did.  We felt pretty lame at the time.  Instead of\norganizing big strategic e-commerce partnerships, we were trying\nto sell luggage and pens and men's shirts.  But in retrospect it\nwas exactly the right thing to do, because it taught us how it would\nfeel to merchants to use our software.  Sometimes the feedback loop\nwas near instantaneous: in the middle of building some merchant's\nsite I'd find I needed a feature we didn't have, so I'd spend a\ncouple hours implementing it and then resume building the site.ManualThere's a more extreme variant where you don't just use your software,\nbut are your software.  When you only have a small number of users,\nyou can sometimes get away with doing by hand things that you plan\nto automate later.  This lets you launch faster, and when you do\nfinally automate yourself out of the loop, you'll know exactly what\nto build because you'll have muscle memory from doing it yourself.When manual components look to the user like software, this technique\nstarts to have aspects of a practical joke.  For example, the way\nStripe delivered \"instant\" merchant accounts to its first users was\nthat the founders manually signed them up for traditional merchant\naccounts behind the scenes.Some startups could be entirely manual at first. If you can find\nsomeone with a problem that needs solving and you can solve it\nmanually, go ahead and do that for as long as you can, and then\ngradually automate the bottlenecks.  It would be a little frightening\nto be solving users' problems in a way that wasn't yet automatic,\nbut less frightening than the far more common case of having something\nautomatic that doesn't yet solve anyone's problems.BigI should mention one sort of initial tactic that usually doesn't\nwork: the Big Launch.  I occasionally meet founders who seem to\nbelieve startups are projectiles rather than powered aircraft, and\nthat they'll make it big if and only if they're launched with\nsufficient initial velocity.  They want to launch simultaneously\nin 8 different publications, with embargoes.  And on a tuesday, of\ncourse, since they read somewhere that's the optimum day to launch\nsomething.It's easy to see how little launches matter.  Think of some successful\nstartups.  How many of their launches do you remember?\nAll you need from a launch is some initial core of users.  How well\nyou're doing a few months later will depend more on how happy you\nmade those users than how many there were of them.\n[10]So why do founders think launches matter?  A combination of solipsism\nand laziness.  They think what they're building is so great that\neveryone who hears about it will immediately sign up.  Plus it would\nbe so much less work if you could get users merely by broadcasting\nyour existence, rather than recruiting them one at a time.  But\neven if what you're building really is great, getting users will\nalways be a gradual process—partly because great things\nare usually also novel, but mainly because users have other things\nto think about.Partnerships too usually don't work.  They don't work for startups\nin general, but they especially don't work as a way to get growth\nstarted.  It's a common mistake among inexperienced founders to\nbelieve that a partnership with a big company will be their big\nbreak.  Six months later they're all saying the same thing: that\nwas way more work than we expected, and we ended up getting practically\nnothing out of it.\n[11]It's not enough just to do something extraordinary initially.  You\nhave to make an extraordinary effort initially.  Any strategy\nthat omits the effort—whether it's expecting a big launch to\nget you users, or a big partner—is ipso facto suspect.VectorThe need to do something unscalably laborious to get started is so\nnearly universal that it might be a good idea to stop thinking of\nstartup ideas as scalars.  Instead we should try thinking of them\nas pairs of what you're going to build, plus the unscalable thing(s)\nyou're going to do initially to get the company going.It could be interesting to start viewing startup ideas this way,\nbecause now that there are two components you can try to be imaginative\nabout the second as well as the first.  But in most cases the second\ncomponent will be what it usually is—recruit users manually\nand give them an overwhelmingly good experience—and the main\nbenefit of treating startups as vectors will be to remind founders\nthey need to work hard in two dimensions.\n[12]In the best case, both components of the vector contribute to your\ncompany's DNA: the unscalable things you have to do to get started\nare not merely a necessary evil, but change the company permanently\nfor the better.  If you have to be aggressive about user acquisition\nwhen you're small, you'll probably still be aggressive when you're\nbig.  If you have to manufacture your own hardware, or use your\nsoftware on users's behalf, you'll learn things you couldn't have\nlearned otherwise.  And most importantly, if you have to work hard\nto delight users when you only have a handful of them, you'll keep\ndoing it when you have a lot.Notes[1]\nActually Emerson never mentioned mousetraps specifically.  He\nwrote \"If a man has good corn or wood, or boards, or pigs, to sell,\nor can make better chairs or knives, crucibles or church organs,\nthan anybody else, you will find a broad hard-beaten road to his\nhouse, though it be in the woods.\"[2]\nThanks to Sam Altman for suggesting I make this explicit.\nAnd no, you can't avoid doing sales by hiring someone to do it for\nyou.  You have to do sales yourself initially.  Later you can hire\na real salesperson to replace you.[3]\nThe reason this works is that as you get bigger, your size\nhelps you grow.  Patrick Collison wrote \"At some point, there was\na very noticeable change in how Stripe felt. It tipped from being\nthis boulder we had to push to being a train car that in fact had\nits own momentum.\"[4]\nOne of the more subtle ways in which YC can help founders\nis by calibrating their ambitions, because we know exactly how a\nlot of successful startups looked when they were just getting\nstarted.[5]\nIf you're building something for which you can't easily get\na small set of users to observe—e.g. enterprise software—and\nin a domain where you have no connections, you'll have to rely on\ncold calls and introductions.  But should you even be working on\nsuch an idea?[6]\nGarry Tan pointed out an interesting trap founders fall into\nin the beginning.  They want so much to seem big that they imitate\neven the flaws of big companies, like indifference to individual\nusers.  This seems to them more \"professional.\"  Actually it's\nbetter to embrace the fact that you're small and use whatever\nadvantages that brings.[7]\nYour user model almost couldn't be perfectly accurate, because\nusers' needs often change in response to what you build for them.\nBuild them a microcomputer, and suddenly they need to run spreadsheets\non it, because the arrival of your new microcomputer causes someone\nto invent the spreadsheet.[8]\nIf you have to choose between the subset that will sign up\nquickest and those that will pay the most, it's usually best to\npick the former, because those are probably the early adopters.\nThey'll have a better influence on your product, and they won't\nmake you expend as much effort on sales.  And though they have less\nmoney, you don't need that much to maintain your target growth rate\nearly on.[9]\nYes, I can imagine cases where you could end up making\nsomething that was really only useful for one user.  But those are\nusually obvious, even to inexperienced founders.  So if it's not\nobvious you'd be making something for a market of one, don't worry\nabout that danger.[10]\nThere may even be an inverse correlation between launch\nmagnitude and success.  The only launches I remember are famous\nflops like the Segway and Google Wave.  Wave is a particularly\nalarming example, because I think it was actually a great idea that\nwas killed partly by its overdone launch.[11]\nGoogle grew big on the back of Yahoo, but that wasn't a\npartnership.  Yahoo was their customer.[12]\nIt will also remind founders that an idea where the second\ncomponent is empty—an idea where there is nothing you can do\nto get going, e.g. because you have no way to find users to recruit\nmanually—is probably a bad idea, at least for those founders.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Kevin\nHale, Steven Levy, Jessica Livingston, Geoff Ralston, and Garry Tan for reading\ndrafts of this."},{"title":"Domain Support Group / iSupportNet","text":"I was recently cold-called (on my cell phone)\nby a company called the Domain Support Group,\nwhich the woman on the phone said was a \"transfer notification agent.\"\nI have been dealing with domain names for many years and I had never\nheard of \"a transfer notification agent.\" I was suspicious, and it turns out\nI was right to be.If you look at the front page of the Domain Support Group, it looks as if\nthey are some kind of semi official organization.  The page has\njust the kind of ugly look it would have if it were administered by\nICANN, and it is sprinkled with quotes about ICANN's mission.\nStrangely, however, the page also had ads on it.  I poked around\nfurther in the site, and got still more suspicious.Meanwhile the woman on the phone transferred me\nto her supervisor.  When I told him I had had domain names for many\nyears and never had to deal with a \"transfer notification agent,\" he\njust hung up. Apparently I am not the kind of prospect the Domain\nSupport Group is looking for.So then I went to Google and searched for \"domain support group scam\"\nand what do you know, I got search results:http://www.niner.net/docs/dsg.shtmlhttp://www.bankersonline.com/technology/techalert_040902.htmlApparently the business of the Domain Support Group is to trick people into registering\n.us, .info, and .biz\ndomain names.  I hope this page adds to the search results about them.This group also appears to operate under the name Internet Support\nNetwork, or iSupportNet.(If this page helped you, you can help ensure it comes\nup near the top of Google search results by making a link to it on your own site.)"},{"title":"Don't Talk to Corp Dev","text":"January 2015Corporate Development, aka corp dev, is the group within companies\nthat buys other companies. If you're talking to someone from corp\ndev, that's why, whether you realize it yet or not.It's usually a mistake to talk to corp dev unless (a) you want to\nsell your company right now and (b) you're sufficiently likely to\nget an offer at an acceptable price.  In practice that means startups\nshould only talk to corp dev when they're either doing really well\nor really badly.  If you're doing really badly, meaning the company\nis about to die, you may as well talk to them, because you have\nnothing to lose. And if you're doing really well, you can safely\ntalk to them, because you both know the price will have to be high,\nand if they show the slightest sign of wasting your time, you'll\nbe confident enough to tell them to get lost.The danger is to companies in the middle.  Particularly to young\ncompanies that are growing fast, but haven't been doing it for long\nenough to have grown big yet.  It's usually a mistake for a promising\ncompany less than a year old even to talk to corp dev.But it's a mistake founders constantly make.  When someone from\ncorp dev wants to meet, the founders tell themselves they should\nat least find out what they want.  Besides, they don't want to\noffend Big Company by refusing to meet.Well, I'll tell you what they want.  They want to talk about buying\nyou.  That's what the title \"corp dev\" means.   So before agreeing\nto meet with someone from corp dev, ask yourselves, \"Do we want to\nsell the company right now?\"  And if the answer is no, tell them\n\"Sorry, but we're focusing on growing the company.\"  They won't be\noffended.  And certainly the founders of Big Company won't be\noffended. If anything they'll think more highly of you.  You'll\nremind them of themselves.  They didn't sell either; that's why\nthey're in a position now to buy other companies.\n[1]Most founders who get contacted by corp dev already know what it\nmeans.  And yet even when they know what corp dev does and know\nthey don't want to sell, they take the meeting.  Why do they do it?\nThe same mix of denial and wishful thinking that underlies most\nmistakes founders make. It's flattering to talk to someone who wants\nto buy you.  And who knows, maybe their offer will be surprisingly\nhigh.  You should at least see what it is, right?No.  If they were going to send you an offer immediately by email,\nsure, you might as well open it.  But that is not how conversations\nwith corp dev work.  If you get an offer at all, it will be at the\nend of a long and unbelievably distracting process.  And if the\noffer is surprising, it will be surprisingly low.Distractions are the thing you can least afford in a startup.  And\nconversations with corp dev are the worst sort of distraction,\nbecause as well as consuming your attention they undermine your\nmorale.  One of the tricks to surviving a grueling process is not\nto stop and think how tired you are.  Instead you get into a sort\nof flow.\n[2]\nImagine what it would do to you if at mile 20 of a\nmarathon, someone ran up beside you and said \"You must feel really\ntired.  Would you like to stop and take a rest?\"  Conversations\nwith corp dev are like that but worse, because the suggestion of\nstopping gets combined in your mind with the imaginary high price\nyou think they'll offer.And then you're really in trouble.  If they can, corp dev people\nlike to turn the tables on you. They like to get you to the point\nwhere you're trying to convince them to buy instead of them trying\nto convince you to sell.  And surprisingly often they succeed.This is a very slippery slope, greased with some of the most powerful\nforces that can work on founders' minds, and attended by an experienced\nprofessional whose full time job is to push you down it.Their tactics in pushing you down that slope are usually fairly\nbrutal. Corp dev people's whole job is to buy companies, and they\ndon't even get to choose which.  The only way their performance is\nmeasured is by how cheaply they can buy you, and the more ambitious\nones will stop at nothing to achieve that. For example, they'll\nalmost always start with a lowball offer, just to see if you'll\ntake it. Even if you don't, a low initial offer will demoralize you\nand make you easier to manipulate.And that is the most innocent of their tactics. Just wait till\nyou've agreed on a price and think you have a done deal, and then\nthey come back and say their boss has vetoed the deal and won't do\nit for more than half the agreed upon price. Happens all the time.\nIf you think investors can behave badly, it's nothing compared to\nwhat corp dev people can do.  Even corp dev people at companies\nthat are otherwise benevolent.  I remember once complaining to a\nfriend at Google about some nasty trick their corp dev people had\npulled on a YC startup. \"What happened to Don't be Evil?\" I asked.\n\"I don't think corp dev got the memo,\" he replied.\n[3]The tactics you encounter in M&A conversations can be like nothing\nyou've experienced in the otherwise comparatively\nupstanding world\nof Silicon Valley.  It's as if a chunk of genetic material from the\nold-fashioned robber baron business world got incorporated into the\nstartup world.The simplest way to protect yourself is to use the trick that John\nD. Rockefeller, whose grandfather was an alcoholic, used to protect\nhimself from becoming one.  He once told a Sunday school class\nBoys, do you know why I never became a drunkard?  Because I never\ntook the first drink.\nDo you want to sell your company right now?  Not eventually, right\nnow.  If not, just don't take the first meeting.  They won't be\noffended.  And you in turn will be guaranteed to be spared one of\nthe worst experiences that can happen to a startup.If you do want to sell, there's another set of\ntechniques\nfor doing\nthat.  But the biggest mistake founders make in dealing with corp\ndev is not doing a bad job of talking to them when they're ready\nto, but talking to them before they are.  So if you remember only\nthe title of this essay, you already know most of what you need to\nknow about M&A in the first year.Notes[1]\nI'm not saying you should never sell.  I'm saying you should\nbe clear in your own mind about whether you want to sell or not,\nand not be led by manipulation or wishful thinking into trying to\nsell earlier than you otherwise would have.[2]\nIn a startup, as in most competitive sports, the task at hand\nalmost does this for you; you're too busy to feel tired.  But when\nyou lose that protection, e.g. at the final whistle, the fatigue\nhits you like a wave.  To talk to corp dev is to let yourself feel\nit mid-game.[3]\nTo be fair, the apparent misdeeds of corp dev people are magnified\nby the fact that they function as the face of a large organization\nthat often doesn't know its own mind.  Acquirers can be surprisingly\nindecisive about acquisitions, and their flakiness is indistinguishable\nfrom dishonesty by the time it filters down to you.Thanks to Marc Andreessen, Jessica Livingston, Geoff\nRalston, and Qasar Younis for reading drafts of this."},{"title":"Doug McIlroy: McCarthy Presents Lisp","text":"September 2009Doug McIlroy recently sent me an email saying\n\"It occurred to me recently that 1959 is the 50th anniversary\nof the most significant computer science talk I ever attended.\"\nHe went on to describe it:Just fifty years ago, John McCarthy circulated a notice\nthat he would be giving an informal talk that he thought\nwould be of interest.  I drove up to MIT from New Jersey to\nattend this seminar of typical length in a typical classroom.\nBut the seminar was anything but typical.  It was a revelation.\nIn one session at the blackboard, John introduced Lisp—all\nyou could do with car, cdr, cons, cond, lambda, and recursion.Recursion had no place in mainstream programming at the time,\nnor did lambda calculus.  Only two years before, I had sat in a\ncoffee-room discussion of what it would mean for a subroutine\nto call itself.  Questions raised but unanswered were whether\nrecursive instances deserved to be deemed the \"same\" subroutine,\nand, if you could do it, what good would it be?  It turned out\nyou could do it: I programmed it for the IBM 704.  Given the\nchallenge, the now standard stack solution arose inexorably.\nBut the question of what it was good for remained.In the course of the lecture John introduced the usual basic\nlist functions like copy, append and reverse (quadratic\nand linear), as well as tree manipulation.  He went on to\nhigher-level functions, demonstrating maplis and lambda.\nBy the end of the hour he had put together a powerful little\ntoolkit of functions which he used in his finale: symbolic\ndifferentiation of univariate expressions.There it was—functional programming ex nihilo. McCarthy\nacknowledged IPL  V and recursive function theory, but the elegant\nand practical face he put upon these antecedents was a work\nof genius.  Nobody would ever again wonder what good it was to\nallow functions to call themselves.  And it was all so clear one\ncould go home and build it oneself without any instruction book."},{"title":"Economic Inequality","text":"January 2016Since the 1970s, economic inequality in the US has increased\ndramatically. And in particular, the rich have gotten a lot richer.\nNearly everyone who writes about it says that economic inequality\nshould be decreased.I'm interested in this topic because I was one of the founders of\na company called Y Combinator that helps people start startups.\nAlmost by definition, if a startup succeeds its founders become\nrich. Which means by helping startup founders I've been helping to\nincrease economic inequality.  If economic inequality should be\ndecreased, I shouldn't be helping founders. No one should\nbe.But that doesn't sound right. So have we just shown, by reductio\nad absurdum, that it's false that economic inequality should be\ndecreased?  That doesn't sound right either.   Surely it's bad that some people\nare born practically locked into poverty, while at the other extreme\nfund managers exploit loopholes to cut their income taxes in half.The solution to this puzzle is to realize that economic inequality\nis not just one thing.  It consists of some things that are very\nbad, like kids with no chance of reaching their potential, and others\nthat are good, like Larry Page and Sergey Brin starting the company\nyou use to find things online.If you want to understand economic inequality—and more importantly,\nif you actually want to fix the bad aspects of it—you have to\ntease apart the components.  And yet the trend in nearly everything\nwritten about the subject is to do the opposite: to squash together\nall the aspects of economic inequality as if it were a single\nphenomenon.Sometimes this is done for ideological reasons.  Sometimes it's\nbecause the writer only has very high-level data and so draws\nconclusions from that, like the proverbial drunk who looks for his\nkeys under the lamppost, instead of where he dropped them, because the\nlight is better there.  Sometimes it's because the writer doesn't\nunderstand critical aspects of inequality, like the role of technology\nin wealth creation.  Much of the time, perhaps most of the time,\nwriting about economic inequality combines all three.___The most common mistake people make about economic inequality is\nto treat it as a single phenomenon.  The most naive version of which\nis the one based on the pie fallacy: that the rich get rich by\ntaking money from the poor.Usually this is an assumption people start from rather than a\nconclusion they arrive at by examining the evidence.  Sometimes the\npie fallacy is stated explicitly:\n...those at the top are grabbing an increasing fraction of the\nnation's income—so much of a larger share that what's left over\nfor the rest is diminished....\n[1]\nOther times it's more unconscious. But the unconscious form is very\nwidespread.  I think because we grow up in a world where the pie\nfallacy is actually true.  To kids, wealth is a fixed pie\nthat's shared out, and if one person gets more it's at the expense\nof another.  It takes a conscious effort to remind oneself that the\nreal world doesn't work that way.In the real world you can create wealth as well as taking it from\nothers.  A woodworker creates wealth.  He makes a chair, and you\nwillingly give him money in return for it.  A high-frequency trader\ndoes not.  He makes a dollar only when someone on the other end of\na trade loses a dollar.If the rich people in a society got that way by taking wealth from\nthe poor, then you have the degenerate case of economic inequality\nwhere the cause of poverty is the same as the cause of wealth.  But\ninstances of inequality don't have to be instances of the degenerate\ncase.  If one woodworker makes 5 chairs and another makes none, the\nsecond woodworker will have less money, but not because anyone took\nanything from him.Even people sophisticated enough to know about the pie fallacy are\nled toward it by the custom of describing economic inequality as a\nratio of one quantile's income or wealth to another's.  It's so\neasy to slip from talking about income shifting from one quantile\nto another, as a figure of speech, into believing that is literally\nwhat's happening.Except in the degenerate case, economic inequality can't be described\nby a ratio or even a curve.  In the general case it consists of\nmultiple ways people become poor, and multiple ways people become\nrich.  Which means to understand economic inequality in a country,\nyou have to go find individual people who are poor or rich and\nfigure out why.\n[2]If you want to understand change in economic inequality, you\nshould ask what those people would have done when it was different.\nThis is one way I know the rich aren't all getting richer simply\nfrom some new system for transferring wealth to them from\neveryone else.  When you use the would-have method with startup\nfounders, you find what most would have done\nback in 1960, when\neconomic inequality was lower, was to join big companies or become\nprofessors.  Before Mark Zuckerberg started Facebook, his default\nexpectation was that he'd end up working at Microsoft.  The reason\nhe and most other startup founders are richer than they would have\nbeen in the mid 20th century is not because of some right turn the\ncountry took during the Reagan administration, but because progress\nin technology has made it much easier to start a new company that\ngrows fast.Traditional economists seem strangely averse to studying individual\nhumans. It seems to be a rule with them that everything has to start\nwith statistics.  So they give you very precise numbers about\nvariation in wealth and income, then follow it with the most naive\nspeculation about the underlying causes.But while there are a lot of people who get rich through rent-seeking\nof various forms, and a lot who get rich by playing games that\nthough not crooked are zero-sum, there are also a significant number\nwho get rich by creating wealth.  And creating wealth, as a source\nof economic inequality, is different from taking it—not just\nmorally, but also practically, in the sense that it is harder to\neradicate.  One reason is that variation in productivity is\naccelerating.  The rate at which individuals can create wealth\ndepends on the technology available to them, and that grows\nexponentially. The other reason creating wealth is such a tenacious\nsource of inequality is that it can expand to accommodate a lot of\npeople.___I'm all for shutting down the crooked ways to get rich.  But that\nwon't eliminate great variations in wealth, because as long as you leave\nopen the option of getting rich by creating wealth, people who want\nto get rich will do that instead.Most people who get rich tend to be fairly driven. Whatever their\nother flaws, laziness is usually not one of them.  Suppose new\npolicies make it hard to make a fortune in finance. Does it seem\nplausible that the people who currently go into finance to make\ntheir fortunes will continue to do so but be content to work for\nordinary salaries? The reason they go into finance is not because\nthey love finance but because they want to get rich. If the only\nway left to get rich is to start startups, they'll start startups.\nThey'll do well at it too, because determination is the main factor\nin the success of a startup.\n[3]\nAnd while it would probably be\na good thing for the world if people who wanted to get rich switched\nfrom playing zero-sum games to creating wealth, that would not only\nnot eliminate great variations in wealth, but might even\nexacerbate them.\nIn a zero-sum game there is at least a limit to the upside.  Plus\na lot of the new startups would create new technology that further\naccelerated variation in productivity.Variation in productivity is far from the only source of economic\ninequality, but it is the irreducible core of it, in the sense that\nyou'll have that left when you eliminate all other sources. And if\nyou do, that core will be big, because it will have expanded to\ninclude the efforts of all the refugees.  Plus it will have a large\nBaumol penumbra around it: anyone who could get rich by creating\nwealth on their own account will have to be paid enough to prevent\nthem from doing it.You can't prevent great variations in wealth without preventing people\nfrom getting rich, and you can't do that without preventing them\nfrom starting startups.So let's be clear about that. Eliminating great variations in wealth would\nmean eliminating startups.  And that doesn't seem a wise move.\nEspecially since it would only mean you eliminated\nstartups in your own country.  Ambitious people already move halfway\naround the world to further their careers, and startups can operate\nfrom anywhere nowadays.  So if you made it impossible to get rich\nby creating wealth in your country, people who wanted to do that\nwould just leave and do it somewhere else. Which would\ncertainly get you a lower Gini coefficient, along with a lesson in\nbeing careful what you ask for.\n[4]I think rising economic inequality is the inevitable fate of countries\nthat don't choose something worse. We had a 40 year stretch in the\nmiddle of the 20th century that convinced some people otherwise.\nBut as I explained in The Refragmentation,\nthat was an anomaly—a\nunique combination of circumstances that compressed American society\nnot just economically but culturally too.\n[5]And while some of the growth in economic inequality we've seen since\nthen has been due to bad behavior of various kinds, there has\nsimultaneously been a huge increase in individuals' ability to\ncreate wealth.  Startups are almost entirely a product of this\nperiod. And even within the startup world, there has been a qualitative\nchange in the last 10 years.  Technology has decreased the cost of\nstarting a startup so much that founders now have the upper hand\nover investors.  Founders get less diluted, and it is now common\nfor them to retain board control as well.  Both further increase\neconomic inequality, the former because founders own more stock,\nand the latter because, as investors have learned, founders tend\nto be better at running their companies than investors.While the surface manifestations change, the underlying forces are\nvery, very old.  The acceleration of productivity we see in Silicon\nValley has been happening for thousands of years.  If you look at\nthe history of stone tools, technology was already accelerating in\nthe Mesolithic.  The acceleration would have been too slow to\nperceive in one lifetime.  Such is the nature of the leftmost part\nof an exponential curve.  But it was the same curve.You do not want to design your society in a way that's incompatible\nwith this curve. The evolution of technology is one of the most\npowerful forces in history.Louis Brandeis said \"We may have democracy, or we may have wealth\nconcentrated in the hands of a few, but we can't have both.\" That\nsounds plausible.  But if I have to choose between ignoring him and\nignoring an exponential curve that has been operating for thousands\nof years, I'll bet on the curve.  Ignoring any trend that has been\noperating for thousands of years is dangerous.  But exponential\ngrowth especially tends to bite you.___If accelerating variation in productivity is always going to produce\nsome baseline growth in economic inequality, it would be a good\nidea to spend some time thinking about that future.  Can you have\na healthy society with great variation in wealth?  What would it\nlook like?Notice how novel it feels to think about that.  The public conversation\nso far has been exclusively about the need to decrease economic\ninequality.  We've barely given a thought to how to live with it.I'm hopeful we'll be able to.  Brandeis was a product of the Gilded\nAge, and things have changed since then. It's harder to hide\nwrongdoing now.  And to get rich now you don't have to buy politicians\nthe way railroad or oil magnates did.\n[6]\nThe great concentrations\nof wealth I see around me in Silicon Valley don't seem to be\ndestroying democracy.There are lots of things wrong with the US that have economic\ninequality as a symptom. We should fix those things.  In the process\nwe may decrease economic inequality. But we can't start from the\nsymptom and hope to fix the underlying causes.\n[7]The most obvious is poverty. I'm sure most of those who want to\ndecrease economic inequality want to do it mainly to help the poor,\nnot to hurt the rich.\n[8]\nIndeed, a good number are merely being\nsloppy by speaking of decreasing economic inequality when what they\nmean is decreasing poverty.  But this is a situation where it would\nbe good to be precise about what we want.  Poverty and economic\ninequality are not identical.  When the city is turning off your\nwater\nbecause you can't pay the bill, it doesn't make any difference\nwhat Larry Page's net worth is compared to yours.  He might only\nbe a few times richer than you, and it would still be just as much\nof a problem that your water was getting turned off.Closely related to poverty is lack of social mobility.  I've seen\nthis myself: you don't have to grow up rich or even upper middle\nclass to get rich as a startup founder, but few successful founders\ngrew up desperately poor.  But again, the problem here is not simply\neconomic inequality.  There is an enormous difference in wealth\nbetween the household Larry Page grew up in and that of a successful\nstartup founder, but that didn't prevent him from joining their\nranks.  It's not economic inequality per se that's blocking social\nmobility, but some specific combination of things that go wrong\nwhen kids grow up sufficiently poor.One of the most important principles in Silicon Valley is that \"you\nmake what you measure.\"  It means that if you pick some number to\nfocus on, it will tend to improve, but that you have to choose the\nright number, because only the one you choose will improve; another\nthat seems conceptually adjacent might not.  For example, if you're\na university president and you decide to focus on graduation rates,\nthen you'll improve graduation rates.  But only graduation rates,\nnot how much students learn.  Students could learn less, if to\nimprove graduation rates you made classes easier.Economic inequality is sufficiently far from identical with the\nvarious problems that have it as a symptom that we'll probably only\nhit whichever of the two we aim at.  If we aim at economic inequality,\nwe won't fix these problems.  So I say let's aim at the problems.For example, let's attack poverty, and if necessary damage wealth\nin the process. That's much more likely to work than attacking\nwealth in the hope that you will thereby fix poverty.\n[9]\nAnd if\nthere are people getting rich by tricking consumers or lobbying the\ngovernment for anti-competitive regulations or tax loopholes, then\nlet's stop them. Not because it's causing economic inequality, but\nbecause it's stealing.\n[10]If all you have is statistics, it seems like that's what you need\nto fix. But behind a broad statistical measure like economic\ninequality there are some things that are good and some that are\nbad, some that are historical trends with immense momentum and\nothers that are random accidents.  If we want to fix the world\nbehind the statistics, we have to understand it, and focus our\nefforts where they'll do the most good.Notes[1]\nStiglitz, Joseph. The Price of Inequality. Norton, 2012. p.\n32.[2]\nParticularly since economic inequality is a matter of outliers,\nand outliers are disproportionately likely to have gotten where\nthey are by ways that have little do with the sort of things\neconomists usually think about, like wages and productivity, but\nrather by, say, ending up on the wrong side of the \"War on Drugs.\"[3]\nDetermination is the most important factor in deciding between\nsuccess and failure, which in startups tend to be sharply differentiated.\nBut it takes more than determination to create one of the hugely\nsuccessful startups.  Though most founders start out excited about\nthe idea of getting rich, purely mercenary founders will usually\ntake one of the big acquisition offers most successful startups get\non the way up.  The founders who go on to the next stage tend to\nbe driven by a sense of mission.  They have the same attachment to\ntheir companies that an artist or writer has to their work.  But\nit is very hard to predict at the outset which founders will do\nthat. It's not simply a function of their initial attitude.  Starting\na company changes people.[4]\nAfter reading a draft of this essay, Richard Florida told me\nhow he had once talked to a group of Europeans \"who said\nthey wanted to make Europe more entrepreneurial and more\nlike Silicon Valley. I said by definition this will give you more\ninequality.  They thought I was insane—they could not process\nit.\"[5]\nEconomic inequality has been decreasing globally.  But this\nis mainly due to the erosion of the kleptocracies that formerly\ndominated all the poorer countries.  Once the playing field is\nleveler politically, we'll see economic inequality start to rise\nagain. The US is the bellwether.  The situation we face here, the\nrest of the world will sooner or later.[6]\nSome people still get rich by buying politicians.  My point is that\nit's no longer a precondition.[7]\nAs well as problems that have economic inequality as a symptom,\nthere are those that have it as a cause.  But in most if not all,\neconomic inequality is not the primary cause.  There is usually\nsome injustice that is allowing economic inequality to turn into\nother forms of inequality, and that injustice is what we need to\nfix.  For example, the police in the US treat the poor worse than\nthe rich.  But the solution is not to make people richer. It's to\nmake the police treat people more equitably.  Otherwise they'll\ncontinue to maltreat people who are weak in other ways.[8]\nSome who read this essay will say that I'm clueless or even\nbeing deliberately misleading by focusing so much on the richer end\nof economic inequality—that economic inequality is really about\npoverty. But that is exactly the point I'm making, though sloppier\nlanguage than I'd use to make it.  The real problem is poverty, not\neconomic inequality.  And if you conflate them you're aiming at the\nwrong target.Others will say I'm clueless or being misleading by focusing on\npeople who get rich by creating wealth—that startups aren't the\nproblem, but corrupt practices in finance, healthcare, and so on.\nOnce again, that is exactly my point.  The problem is not economic\ninequality, but those specific abuses.It's a strange task to write an essay about why something isn't the\nproblem, but that's the situation you find yourself in when so many\npeople mistakenly think it is.[9]\nParticularly since many causes of poverty are only partially\ndriven by people trying to make money from them. For example,\nAmerica's abnormally high incarceration rate is a major cause of\npoverty.  But although for-profit prison companies and\nprison guard unions both spend\na lot lobbying for harsh sentencing laws, they\nare not the original source of them.[10]\nIncidentally, tax loopholes are definitely not a product\nof some power shift due to recent increases in economic inequality.\nThe golden age of economic equality in the mid 20th century was\nalso the golden age of tax avoidance. Indeed, it was so widespread\nand so effective that I'm skeptical whether economic inequality was\nreally so low then as we think.  In a period when people are trying\nto hide wealth from the government, it will tend to be hidden from\nstatistics too. One sign of the potential magnitude of the problem\nis the discrepancy between government receipts as a percentage of\nGDP, which have remained more or less constant during the entire\nperiod from the end of World War II to the present, and tax rates,\nwhich have varied dramatically.Thanks to Sam Altman, Tiffani Ashley Bell, Patrick Collison, Ron\nConway, Richard Florida, Ben Horowitz, Jessica Livingston, Robert\nMorris, Tim O'Reilly, Max Roser, and Alexia Tsotsis for reading\ndrafts of this.Note: This is a new version from which I\nremoved a pair of metaphors that made a lot of people mad,\nessentially by macroexpanding them.  If anyone wants to see\nthe old version, I put it here.Related:"},{"title":"Economic Inequality (Original Version)","text":"January 2016Since the 1970s, economic inequality in the US has increased\ndramatically.  And in particular, the rich have gotten a lot richer.\nSome worry this is a sign the country is broken.I'm interested in the topic because I am a manufacturer of economic\ninequality.  I was one of the founders of a company called Y\nCombinator that helps people start startups.  Almost by definition,\nif a startup succeeds its founders become rich.  And while getting\nrich is not the only goal of most startup founders, few would do\nit if one couldn't.I've become an expert on how to increase economic inequality, and\nI've spent the past decade working hard to do it.  Not just by\nhelping the 2500 founders YC has funded.  I've also written essays\nencouraging people to increase economic inequality and giving them\ndetailed instructions showing how.So when I hear people saying that economic inequality is bad and\nshould be decreased, I feel rather like a wild animal overhearing\na conversation between hunters.  But the thing that strikes me most\nabout the conversations I overhear is how confused they are.  They\ndon't even seem clear whether they want to kill me or not.The most common mistake people make about economic inequality is\nto treat it as a single phenomenon.  The most naive version of which\nis the one based on the pie fallacy: that the rich get rich by\ntaking money from the poor.Usually this is an assumption people start from rather than a\nconclusion they arrive at by examining the evidence.  Sometimes the\npie fallacy is stated explicitly:\n...those at the top are grabbing an increasing fraction of the\nnation's income—so much of a larger share that what's left over\nfor the rest is diminished....\n[1]\nOther times it's more unconscious. But the unconscious form is very\nwidespread.  I think because we grow up in a world where the pie\nfallacy is actually true.  To kids, wealth is a fixed pie\nthat's shared out, and if one person gets more it's at the expense\nof another.  It takes a conscious effort to remind oneself that the\nreal world doesn't work that way.In the real world you can create wealth as well as taking it from\nothers.  A woodworker creates wealth.  He makes a chair, and you\nwillingly give him money in return for it.  A high-frequency trader\ndoes not.  He makes a dollar only when someone on the other end of\na trade loses a dollar.If the rich people in a society got that way by taking wealth from\nthe poor, then you have the degenerate case of economic inequality\nwhere the cause of poverty is the same as the cause of wealth.  But\ninstances of inequality don't have to be instances of the degenerate\ncase.  If one woodworker makes 5 chairs and another makes none, the\nsecond woodworker will have less money, but not because anyone took\nanything from him.Even people sophisticated enough to know about the pie fallacy are\nled toward it by the custom of describing economic inequality as a\nratio of one quantile's income or wealth to another's.  It's so\neasy to slip from talking about income shifting from one quantile\nto another, as a figure of speech, into believing that is literally\nwhat's happening.Except in the degenerate case, economic inequality can't be described\nby a ratio or even a curve.  In the general case it consists of\nmultiple ways people become poor, and multiple ways people become\nrich.  Which means to understand economic inequality in a country,\nyou have to go find individual people who are poor or rich and\nfigure out why.\n[2]If you want to understand change in economic inequality, you\nshould ask what those people would have done when it was different.\nThis is one way I know the rich aren't all getting richer simply\nfrom some sinister new system for transferring wealth to them from\neveryone else.  When you use the would-have method with startup\nfounders, you find what most would have done back in 1960, when\neconomic inequality was lower, was to join big companies or become\nprofessors.  Before Mark Zuckerberg started Facebook, his default\nexpectation was that he'd end up working at Microsoft.  The reason\nhe and most other startup founders are richer than they would have\nbeen in the mid 20th century is not because of some right turn the\ncountry took during the Reagan administration, but because progress\nin technology has made it much easier to start a new company that\ngrows fast.Traditional economists seem strangely averse to studying individual\nhumans. It seems to be a rule with them that everything has to start\nwith statistics.  So they give you very precise numbers about\nvariation in wealth and income, then follow it with the most naive\nspeculation about the underlying causes.As a manufacturer of economic inequality, the underlying causes are\nsomething I know about.  Yes, there are a lot of people who get\nrich through rent-seeking of various forms, and a lot who get rich\nby playing games that though not crooked are zero-sum.  But there\nare also a significant number who get rich by creating wealth.And that group presents two problems for the hunter of economic\ninequality.  One is that variation in productivity is accelerating.\nThe rate at which individuals can create wealth depends on the\ntechnology available to them, and that grows exponentially.  The\nother problem with creating wealth, as a source of inequality, is\nthat it can expand to accommodate a lot of people.I'm all for shutting down the crooked ways to get rich.  But that\nwon't eliminate great variations in wealth, because as long as you leave\nopen the option of getting rich by creating wealth, people who want\nto get rich will do that instead.Most people who get rich tend to be fairly driven. Whatever their\nother flaws, laziness is usually not one of them.  Suppose new\npolicies make it hard to make a fortune in finance. Does it seem\nplausible that the people who currently go into finance to make\ntheir fortunes will continue to do so but be content to work for\nordinary salaries? The reason they go into finance is not because\nthey love finance but because they want to get rich. If the only\nway left to get rich is to start startups, they'll start startups.\nThey'll do well at it too, because determination is the main factor\nin the success of a startup.\n[3]\nAnd while it would probably be\na good thing for the world if people who wanted to get rich switched\nfrom playing zero-sum games to creating wealth, that would not only\nnot eliminate great variations in wealth, but might even\nexacerbate them.\nIn a zero-sum game there is at least a limit to the upside.  Plus\na lot of the new startups would create new technology that further\naccelerated variation in productivity.Variation in productivity is far from the only source of economic\ninequality, but it is the irreducible core of it, in the sense that\nyou'll have that left when you eliminate all other sources. And if\nyou do, that core will be big, because it will have expanded to\ninclude the efforts of all the refugees.  Plus it will have a large\nBaumol penumbra around it: anyone who could get rich by creating\nwealth on their own account will have to be paid enough to prevent\nthem from doing it.You can't prevent great variations in wealth without preventing people\nfrom getting rich, and you can't do that without preventing them\nfrom starting startups.So let's be clear about that. Eliminating great variations in wealth would\nmean eliminating startups.  Are you sure, hunters, that you want\nto shoot this particular animal?  It would only mean you eliminated\nstartups in your own country.  Ambitious people already move halfway\naround the world to further their careers, and startups can operate\nfrom anywhere nowadays.  So if you made it impossible to get rich\nby creating wealth in your country, the ambitious people in your\ncountry would just leave and do it somewhere else. Which would\ncertainly get you a lower Gini coefficient, along with a lesson in\nbeing careful what you ask for.\n[4]I think rising economic inequality is the inevitable fate of countries\nthat don't choose something worse. We had a 40 year stretch in the\nmiddle of the 20th century that convinced some people otherwise.\nBut as I explained in The Refragmentation,\nthat was an anomaly—a\nunique combination of circumstances that compressed American society\nnot just economically but culturally too.\n[5]And while some of the growth in economic inequality we've seen since\nthen has been due to bad behavior of various kinds, there has\nsimultaneously been a huge increase in individuals' ability to\ncreate wealth.  Startups are almost entirely a product of this\nperiod. And even within the startup world, there has been a qualitative\nchange in the last 10 years.  Technology has decreased the cost of\nstarting a startup so much that founders now have the upper hand\nover investors.  Founders get less diluted, and it is now common\nfor them to retain board control as well.  Both further increase\neconomic inequality, the former because founders own more stock,\nand the latter because, as investors have learned, founders tend\nto be better at running their companies than investors.While the surface manifestations change, the underlying forces are\nvery, very old.  The acceleration of productivity we see in Silicon\nValley has been happening for thousands of years.  If you look at\nthe history of stone tools, technology was already accelerating in\nthe Mesolithic.  The acceleration would have been too slow to\nperceive in one lifetime.  Such is the nature of the leftmost part\nof an exponential curve.  But it was the same curve.You do not want to design your society in a way that's incompatible\nwith this curve. The evolution of technology is one of the most\npowerful forces in history.Louis Brandeis said \"We may have democracy, or we may have wealth\nconcentrated in the hands of a few, but we can't have both.\" That\nsounds plausible.  But if I have to choose between ignoring him and\nignoring an exponential curve that has been operating for thousands\nof years, I'll bet on the curve.  Ignoring any trend that has been\noperating for thousands of years is dangerous.  But exponential\ngrowth especially tends to bite you.If accelerating variation in productivity is always going to produce\nsome baseline growth in economic inequality, it would be a good\nidea to spend some time thinking about that future.  Can you have\na healthy society with great variation in wealth?  What would it\nlook like?Notice how novel it feels to think about that.  The public conversation\nso far has been exclusively about the need to decrease economic\ninequality.  We've barely given a thought to how to live with it.I'm hopeful we'll be able to.  Brandeis was a product of the Gilded\nAge, and things have changed since then. It's harder to hide\nwrongdoing now.  And to get rich now you don't have to buy politicians\nthe way railroad or oil magnates did.\n[6]\nThe great concentrations\nof wealth I see around me in Silicon Valley don't seem to be\ndestroying democracy.There are lots of things wrong with the US that have economic\ninequality as a symptom. We should fix those things.  In the process\nwe may decrease economic inequality. But we can't start from the\nsymptom and hope to fix the underlying causes.\n[7]The most obvious is poverty. I'm sure most of those who want to\ndecrease economic inequality want to do it mainly to help the poor,\nnot to hurt the rich.\n[8]\nIndeed, a good number are merely being\nsloppy by speaking of decreasing economic inequality when what they\nmean is decreasing poverty.  But this is a situation where it would\nbe good to be precise about what we want.  Poverty and economic\ninequality are not identical.  When the city is turning off your\nwater\nbecause you can't pay the bill, it doesn't make any difference\nwhat Larry Page's net worth is compared to yours.  He might only\nbe a few times richer than you, and it would still be just as much\nof a problem that your water was getting turned off.Closely related to poverty is lack of social mobility.  I've seen\nthis myself: you don't have to grow up rich or even upper middle\nclass to get rich as a startup founder, but few successful founders\ngrew up desperately poor.  But again, the problem here is not simply\neconomic inequality.  There is an enormous difference in wealth\nbetween the household Larry Page grew up in and that of a successful\nstartup founder, but that didn't prevent him from joining their\nranks.  It's not economic inequality per se that's blocking social\nmobility, but some specific combination of things that go wrong\nwhen kids grow up sufficiently poor.One of the most important principles in Silicon Valley is that \"you\nmake what you measure.\"  It means that if you pick some number to\nfocus on, it will tend to improve, but that you have to choose the\nright number, because only the one you choose will improve; another\nthat seems conceptually adjacent might not.  For example, if you're\na university president and you decide to focus on graduation rates,\nthen you'll improve graduation rates.  But only graduation rates,\nnot how much students learn.  Students could learn less, if to\nimprove graduation rates you made classes easier.Economic inequality is sufficiently far from identical with the\nvarious problems that have it as a symptom that we'll probably only\nhit whichever of the two we aim at.  If we aim at economic inequality,\nwe won't fix these problems.  So I say let's aim at the problems.For example, let's attack poverty, and if necessary damage wealth\nin the process. That's much more likely to work than attacking\nwealth in the hope that you will thereby fix poverty.\n[9]\nAnd if\nthere are people getting rich by tricking consumers or lobbying the\ngovernment for anti-competitive regulations or tax loopholes, then\nlet's stop them. Not because it's causing economic inequality, but\nbecause it's stealing.\n[10]If all you have is statistics, it seems like that's what you need\nto fix. But behind a broad statistical measure like economic\ninequality there are some things that are good and some that are\nbad, some that are historical trends with immense momentum and\nothers that are random accidents.  If we want to fix the world\nbehind the statistics, we have to understand it, and focus our\nefforts where they'll do the most good.If our goal is to decrease economic inequality, then it is equally\nimportant to prevent people from becoming rich and to prevent\nthem becoming poor. I believe it's far more important to prevent\npeople becoming poor. And that therefore decreasing economic\ninequality should not be our goal.Notes[1]\nStiglitz, Joseph. The Price of Inequality. Norton, 2012. p.\n32.[2]\nParticularly since economic inequality is a matter of outliers,\nand outliers are disproportionately likely to have gotten where\nthey are by ways that have little do with the sort of things\neconomists usually think about, like wages and productivity, but\nrather by, say, ending up on the wrong side of the \"War on Drugs.\"[3]\nDetermination is the most important factor in deciding between\nsuccess and failure, which in startups tend to be sharply differentiated.\nBut it takes more than determination to create one of the hugely\nsuccessful startups.  Though most founders start out excited about\nthe idea of getting rich, purely mercenary founders will usually\ntake one of the big acquisition offers most successful startups get\non the way up.  The founders who go on to the next stage tend to\nbe driven by a sense of mission.  They have the same attachment to\ntheir companies that an artist or writer has to their work.  But\nit is very hard to predict at the outset which founders will do\nthat. It's not simply a function of their initial attitude.  Starting\na company changes people.[4]\nAfter reading a draft of this essay, Richard Florida told me\nhow he had once talked to a group of Europeans \"who said\nthey wanted to make Europe more entrepreneurial and more\nlike Silicon Valley. I said by definition this will give you more\ninequality.  They thought I was insane—they could not process\nit.\"[5]\nEconomic inequality has been decreasing globally.  But this\nis mainly due to the erosion of the kleptocracies that formerly\ndominated all the poorer countries.  Once the playing field is\nleveler politically, we'll see economic inequality start to rise\nagain. The US is the bellwether.  The situation we face here, the\nrest of the world will sooner or later.[6]\nSome people still get rich by buying politicians.  My point is that\nit's no longer a precondition.[7]\nAs well as problems that have economic inequality as a symptom,\nthere are those that have it as a cause.  But in most if not all,\neconomic inequality is not the primary cause.  There is usually\nsome injustice that is allowing economic inequality to turn into\nother forms of inequality, and that injustice is what we need to\nfix.  For example, the police in the US treat the poor worse than\nthe rich.  But the solution is not to make people richer. It's to\nmake the police treat people more equitably.  Otherwise they'll\ncontinue to maltreat people who are weak in other ways.[8]\nSome who read this essay will say that I'm clueless or even\nbeing deliberately misleading by focusing so much on the richer end\nof economic inequality—that economic inequality is really about\npoverty. But that is exactly the point I'm making, though sloppier\nlanguage than I'd use to make it.  The real problem is poverty, not\neconomic inequality.  And if you conflate them you're aiming at the\nwrong target.Others will say I'm clueless or being misleading by focusing on\npeople who get rich by creating wealth—that startups aren't the\nproblem, but corrupt practices in finance, healthcare, and so on.\nOnce again, that is exactly my point.  The problem is not economic\ninequality, but those specific abuses.It's a strange task to write an essay about why something isn't the\nproblem, but that's the situation you find yourself in when so many\npeople mistakenly think it is.[9]\nParticularly since many causes of poverty are only partially\ndriven by people trying to make money from them. For example,\nAmerica's abnormally high incarceration rate is a major cause of\npoverty.  But although for-profit prison companies and\nprison guard unions both spend\na lot lobbying for harsh sentencing laws, they\nare not the original source of them.[10]\nIncidentally, tax loopholes are definitely not a product\nof some power shift due to recent increases in economic inequality.\nThe golden age of economic equality in the mid 20th century was\nalso the golden age of tax avoidance. Indeed, it was so widespread\nand so effective that I'm skeptical whether economic inequality was\nreally so low then as we think.  In a period when people are trying\nto hide wealth from the government, it will tend to be hidden from\nstatistics too. One sign of the potential magnitude of the problem\nis the discrepancy between government receipts as a percentage of\nGDP, which have remained more or less constant during the entire\nperiod from the end of World War II to the present, and tax rates,\nwhich have varied dramatically.Note:\nSome people used a few sentences in the original version of\nthis essay where\nI talked about eliminating economic inequality to claim that I\nwas arguing against a straw man, so I replaced these with stronger\nclaims.  For example\nYou can't prevent economic inequality without preventing people\nfrom getting rich\nbecame\nYou can't prevent great variations in wealth without preventing\npeople from getting rich\nBecause in fact startups do not merely cause some economic inequality,\nthey cause great economic inequality.  The median US household net\nworth is about $80k.  It's common for the stock of a successful\nstartup founder to be worth a hundred times as much, and not unheard\nof for it to be worth ten thousand times as much.So startups present a problem not just for those who want to eliminate\neconomic inequality completely, but for anyone opposed to high\nlevels of it.\nWhich is why they make a good counterexample to the\nidea that economic inequality per se is what we should be worried\nabout, rather than poverty or lack of social mobility.Thanks to Sam Altman, Tiffani Ashley Bell, Patrick Collison, Ron\nConway, Richard Florida, Ben Horowitz, Jessica Livingston, Robert\nMorris, Tim O'Reilly, Max Roser, and Alexia Tsotsis for reading\ndrafts of this."},{"title":"Economic Inequality: The Short Version","text":"January 2016As often happens when you say something controversial, there have\nbeen some very adventurous interpretations of the\nessay I just wrote\nabout economic inequality.  I thought it might help clarify matters\nif I tried to write a version so simple that it\nleaves no room for misinterpretation.Lots of people talk about economic inequality.  Nearly all say it\nis bad if economic inequality increases, and that it would be better\nif it decreased.But economic inequality per se is not bad. It has multiple causes.\nMany are bad, but some are good.For example, high incarceration rates and tax loopholes are bad\nthings that increase economic inequality.But startups also increase economic inequality. A founder whose\nstartup succeeds will end up with stock worth a lot of money.And unlike high incarceration rates and tax loopholes, startups are\non the whole good.Since economic inequality per se is not bad, we should not attack\nit. Instead we should attack the bad things that cause it.For example, instead of attacking economic inequality, we should\nattack poverty.Attacking economic inequality would be doubly mistaken. It would\nharm the good as well as the bad causes. But even worse, it would\nbe an ineffective way to attack the bad causes.We will not do a good job of fixing the bad causes of economic\ninequality unless we attack them directly.But if we fix all the bad causes of economic inequality, we will\nstill have increasing levels of it, due to the increasing power of\ntechnology."},{"title":"Errata","text":"Here's a list of problems people have reported in On Lisp.\nI haven't checked them all yet. The ones that say caught I\nhave checked, the ones that say reported I haven't.p. 14. \"One of the big differences ... are the large number\"\nCaught by John Chandler.p. 18. In the footnote, x should be n, and parameter should be plural.\nCaught by Kris Steegmans.p. 23. our-find-if would recurse infinitely if no element matches.\nCaught by Markus Triska.p. 75. \"it would [be] safe to assume\".\nCaught by Markus Triska.p. 85. `(,a ,(b `,c))) has an extra close paren.\nCaught by Jon Ericson.p. 156.  In do-tuples/o the expression (1- (length parms))\nshould be (- (length source) (length parms)).\nReported by Roland. (at netquant.com.br)p. 176. In the second to last line, \"grows exponentially\" should be\n\"grows quadratically.\"\nCaught by Chris Oliver.p. 189 et seq. Anaphora is not a plural.p. 191 (acond (3)) returns nil when it should return 3.\nSame problem with acond2, p. 198.\nCaught by Terrence Ireland.p. 222. In the definition of asetf, 'setf should be'(lambda (x y) y).\nCaught by Francois-Rene Rideau.p. 223. The &optional in the definition of defanaph is unnecessary.\nCaught by Francois-Rene Rideau.p. 246. Extra a in \"An embedded language is not a like a...\"\nCaught by Markus Triska.p. 267. The global value of *cont* should be #'values instead of #'identity.\nCaught by Francois-Rene Rideau.p. 293. The last line of choose should be indented two more spaces.\n(This doesn't change its behavior of course.)  Caught by Alejandro Forero Cuervo.p. 301 In Figure 22.9, equal? should be eq?.\nCaught by Francois-Rene Rideau."},{"title":"FFB FAQ","text":"What is an FFB?A Filter that Fights Back.What would an FFB do?Spider every url in each newly arrived spam,\nif the ip address of the server was blacklisted.\nIdeally the http requests would be spread over the\nlifetime of the spam-- the period during which\n\"customers\" respond to it.  I suspect\nmost responses occur within a couple hours of the\nspam being sent.  It may be different for spams sent at\nnight.\nCould spammers make servers fast\nenough to handle the flood of http requests?The hardcore spammers probably could.  But not sites like\nAmericanSingles.Com.What kind of bandwidth costs could FFBs generate?If there were 100,000 FFBs, a spammer's site had a total of\n100k of stuff in it, and each FFB crawled the site 10x per\nspam, this would generate 100 GB of transfer.  At current\nrates\nfor spam hosting that would cost the spammer\nabout $1000-4000 per spam.Introductory spam hosting plans have transfer limits\nwell under 100 GB/month, so FFBs would shut down such sites\nbefore the \"customers\" had a chance to respond.  In a world\ncontaining FFBs, it would be hard to get started as a spammer.Couldn't spammers protect against crawlers?They probably could, by putting invisible links in their pages.\nAnything that followed such a link must be a crawler and could\nsafely be ignored.  But the easiest way to protect against\nFFBs would be to include working unsubscribe links.  This would\nbe particularly necessary for small fry just getting started and\n\"legitimate\" sites that hire\nspammers to generate traffic.\nThese would not have the infrastructure or expertise to protect\nagainst FFBs.Wouldn't retrieving web beacons show your address was live?Yes, so that might bring more spam.  But it would also make\nweb beacons stop working as an index of open rates.  And\nyou'd be clicking on unsubscribe links as well, which FFBs\nwould make more popular.Wouldn't this encourage people to send spams promoting sites\nthat pay for clickthroughs?If there are still sites that pay for\nclickthroughs, they must already\nhave some way to protect themselves against people who\ngenerate traffic by spamming.  So there would be no money in it.This is a bad idea because it just uses up more bandwidth.That's like arguing that we shouldn't have police, because\nin addition to all the losses caused by crime, we have\npeople taken away from productive work to chase criminals.\nIf FFBs make working unsubscribe links universal,\nthe result is net less use of bandwidth.I'm not proposing that FFBs should\nbe used by people on dialup lines, just by users who have\nbandwidth to spare-- people at universities and corporations,\nand on DSL lines.\nIsn't a denial of service attack on spammers illegal?This one would be uncoordinated, and so distributed that no one client\nwould have to submit too many http requests.\nI'm not proposing that a given\nfilter hit a spammer's site with 10,000 http requests.\nMore like a couple hundred, at most.It would be hard\nfor someone to claim you were mounting a DoS attack\non them for submitting a couple hundred http requests.\nIf a couple hundred requests is a DoS attack,\nthen I have several times been guilty of\nDoSing eBay.In any case, spammers like to keep a low profile.\nI can't imagine spammers, especially spammers based\noffshore, trying to\ninvoke the protection of the law.  They've probably\nalready been victims of conventional DoS attacks,\nand I haven't heard of any of them doing this.This could be used to DoS innocent victims.That's the point of the blacklist.  A site doesn't\nget pounded simply by being mentioned in a spam.  It has\nto be mentioned in a spam and be on the blacklist.How would blacklists be managed?I'm not committed to one way of doing it.  But I suspect\nit couldn't be entirely automated.\nSites would have to be inspected by humans\nto protect innocent sites from being blacklisted.If FFBs become a threat to\nthem, spammers will try to give them a bad name by causing\nthem to attack innocent victims.\nSo blacklists should include ip addresses as well as domain names.\nOtherwise a spammer could\nswitch the DNS record of a blacklisted site to point to\nan innocent victim.Anyone running a blacklist should assume, by default, that\nany url mentioned in a spam is the victim of a\nJoe job,\nand only blacklist sites when, after inspection,\nthis is clearly not the case.Aren't blacklists prone to abuse?Yes.  To be honest, this is the weak link in this plan.\nA widely used FFB blacklist run by nuts like MAPS could\ndo a lot of damage.  And all blacklists seem to become\ncorrupt eventually.FFB blacklists are less dangerous\nthan mail server blacklists, because being on the blacklist\nalone is not enough to cause a site trouble.  You only get\ncrawled when you're already on the blacklist, and a new\nspam arrives with your url in it.  On\nthe other hand, FFBs are going to be run by individual users,\nwho will not be as discerning about the blacklists they\nsubscribe to as ISPs are.\nCouldn't spammers just sue or DoS the blacklist?To protect against DoS attacks, the blacklist might have to\nbe distributed through a p2p network.I don't think lawsuits would be much of a threat, though.\nA blacklist of spamvertised sites could legitimately claim\nthat it wasn't intended specifically for use by FFBs.\nThere's a genuine need for such blacklists to aid in spam\nfiltering.  To evade filters, spammers now change their\ndomain names regularly.  When a filter sees a domain name\nfor the first time, it would be very helpful if there\nwere a list it could check to see if other users had\nreported spams containing it.If FFBs happened to use this list too, well, that would be\nbe done without the knowledge of the administrators, just as those\nnaughty \"affiliates\" are spamming without the knowledge of the\nsites they send traffic too.Wouldn't this miss spammers using Migmaf-style proxies?Yes.   But if we\ndrive spammers to use such measures to survive, I think we'll\ndrive a lot of them out of business.  Writing viruses\nseems to be taken more seriously by the criminal justice\nsystem than forging headers.  I think many current spammers\nwouldn't take the risk.What about spammers breaking into people's web servers and\nusing them to redirect?This wouldn't help them.  FFBs would still\ninterfere with the spammers' \"customers\".What about spammers using redirects off sites like Geocities?Such spams are rare, probably because Geocities\nhas figured out how to prevent spammers from using them for\nthis purpose.  Hosting services that hadn't figured\nthis out would soon learn.Why have email as part of the system?  Why not just have\na blacklist of spam sites and encourage people to beat on them?Several people have written suggesting a \"DDoS@Home\" project\nof this type.  (Two correspondents who shall remain nameless\nsimultaneously invented this\ncatchy name.)  But I think mail should remain in the system for\ntwo reasons: (a) it tells you which sites to pound, and when,\nand (b) if you included it as part of a filter, you could\nget more users.On the other hand, if some group managed to launch a DDoS@Home\nproject aimed at spammers, that would be enormously amusing.\nI'd sign up for it."},{"title":"Female Founders","text":"January 2014I was accused recently of believing things I don't believe about\nwomen as programmers and startup founders.  So I thought I'd explain\nwhat I actually do believe.Some accused me of being sexist—of being biased against female\nfounders.  To anyone who knows Y Combinator that would seem a pretty\nimplausible claim.  It's hard to argue I'm biased against female\nfounders when I have a female\ncofounder myself.  And with 3 female\npartners out of 12, YC has slightly over 3x the venture industry\naverage.  While 3 out of 12 is not 50-50, it would be very hard to\nfind another firm of our size in the venture business where women\nrun the show to the degree they do at YC.  I may be the public face\nof the company, but it's impossible to imagine YC doing something\nthat Jessica, Kirsty, and Carolynn were against.More thoughtful people were willing to concede YC wasn't biased\nagainst women, but thought we should be actively working to increase\nthe number of female founders.  As one put it, instead of being a\ngatekeeper, we should be a gateway.But that is exactly what Y Combinator is.  The people who caricature\nus as being only interested in funding young hotshots forget that\nwhen we started, in 2005, young founders were not a privileged group\nbut a marginalized one.  VCs didn't want to fund them, and when\nthey did they often as not tried to replace them with \"adult\nsupervision.\"  The fact that young founders seem a privileged group\nnow is partly due to our efforts.  We attacked the problem not by\nadvocacy but by action—by funding more young founders than\nVCs would, and then helping them to overcome the bias against them\nthat they'd encounter among other investors.  It worked rapidly,\nbecause it had a double effect: if you support a young founder who\notherwise would not have been able to find funding and they go on\nto succeed, you get not just one more young founder but also the\nadditional ones they inspire by their example.We're doing the same thing for female founders.  We fund more female\nfounders than VCs do, and we help them to overcome the bias they'll\nencounter among other investors.  In the current YC batch, 16 out\nof 68 companies, or 24%, have female founders.  That's almost twice\nthe rate at which VCs fund such companies. [1] If these founders go\non to succeed, they'll become what we know from experience will be\nthe most powerful force for encouraging other female founders:\nexamples of people like them who've done it.The way we got so many female founders was by being less biased.\nIt was the same with young founders.  We didn't lower our standards\nfor younger founders.  We just tried to be better than other investors\nat seeing their true potential.  That's why it worked.Is there another organization that has done more to help female\nfounders than Y Combinator, measured by number of female founders\nhelped times how much we've helped each one?  Possibly. But the\namount of thought it takes to answer that question shows we are at\nleast among the organizations that have done most.\n[2]Eventually other investors will follow our lead.  I can say more\nthan that I hope they will, because as with young founders, they\nwill make more money if they do, and investors tend to notice that\nfairly quickly.  A lot of people outside the startup world seem to\nassume that investors have the same sort of naive bias ordinary\npeople do when deciding who to invite to join a club—that\nthey simply fund the people most like them.  That is not true.\n[3]\nWhat drives most investors is money.  As it should, because they\nhave a fiduciary duty to their limited partners.  So while they\nhave biases, their biases are merely instances of stupidity, not\nprinciples they feel they have to uphold.\n[4]\nWhen they realize\nthey've been overlooking some type of startup or founder, they stop,\nbecause it means they've been losing money.  All it takes is another\ninvestor who's willing to fund the companies they're overlooking.I saw this happen with Homejoy.  When Adora Cheung first tried to\nraise a series A round, she couldn't find a VC willing to lead,\ndespite their remarkable growth.  Partly this was due to the nature\nof the business.  Software-eating-the-world startups are still a\nnovel idea to many investors.  But I was convinced it was also\npartly because Adora was female.  So I tweeted their revenue\ngraph, saying that this was the fastest growing YC company I\nknew of, because I knew ultimately growth was what would convince\ninvestors.  As in fact it did.  If your numbers go up steeply enough\nfor long enough, you could have eyeballs on stalks and investors\nwill fund you.I realize though that with female founders, efforts at our stage\nare not enough.  We could in principle have fixed the problem for\nyoung founders by ourselves.  If we funded enough young founders\nwho went on to succeed, both investors and other would-be founders\nwould learn from their example.  But it would be naive to assume\nwe could get the percentage of female startup founders to 50% so\nlong as the percentage of female programmers is so much lower\nthan 50%.  Though this is less the case than it used to be, many\nstartups still have a big technical component, and if you want to\nstart that sort of startup your chances of succeeding are higher\nif you're a programmer.  Adora Cheung is a programmer, for example.\nSoftware eating the world is still software.So how would you cause there to be more female programmers?  The\nmeta-answer is: not just one thing.  People's abilities and interests\nby the time they're old enough to start a startup are the product\nof their whole lives—indeed, of their ancestors' lives as\nwell.  Even if we limit ourselves to one lifetime we find a long\nlist of factors that could influence the ratio of female programmers\nto male, from the first day of a girl's life when her parents treat\nher differently, right up to the point where a woman who has become\na programmer leaves the field because it seems unwelcoming.  And\nwhile the nature of this sort of funnel is that you can increase\nthroughput by attacking bottlenecks at any point, if you want to\neliminate the discrepancy between male and female programmers\ncompletely, you probably have to go back to the point where it\nstarts to become significant.It seems to be well underway by the time kids reach their teens.\nWhich to me suggests the place to focus the most effort initially\nis in getting more girls interested in programming.I'm not saying that's the only thing you could do, or trying to\ndownplay other obstacles women and girls face in becoming programmers\nor founders.  I'm just saying that seems to me where you'd get the\nmost bang for the buck.How would you get more girls interested in programming?  I don't\nknow much about girls specifically, but I have some ideas about how\nto get kids interested in programming.  I think at a minimum you\nneed two things: access and examples.First of all, kids need to be able to program, in both senses of\nthe word: they have to know how to write a program, and they need\naccess to a computer they can write programs on, which nowadays\nprobably includes Internet connectivity.\n[5]But to turn kids into avid programmers—to get them to work\non projects of their own in their spare time—you may need to\ndo more than just expose them to programming.  In my experience the\nbest way to get people to work on ambitious projects is examples\nof other people who have.  I'm pretty sure that's why so many more\nstartups come out of some universities than others, for example.\nI don't think Yale students are inherently less able to start\nstartups than Stanford students, or that Yale doesn't prepare them\nto.  They just don't have examples of successful startups all around\nthem like Stanford students do.So if we want to get more girls to become programmers, we should\ngive them more examples.  Ideally in person, though examples also\nwork through the media. Do the examples have to be female?  They\ndon't have to be to send the message that programming is one of the\nthings people can work on, but female programmers might make more\ncompelling role models.Are there other things you could do to get girls interested in\nprogramming?  Almost certainly.  Are there other things you'd have\nto do?  Quite possibly.  But notice the language I'm using.  In the\ncourse of writing this I've gone from certainty to uncertainty.\nThat's because I've gone from talking about a topic I know more\nabout than most people—what happens when women start\nstartups—to a topic many people know more about than me.I can say though that at our end of the funnel the trend for female\nfounders is encouraging.  Not just because 24% of the companies in\nthe current YC batch have female founders.  There is also starting\nto be a critical mass of successful female founders from previous\nbatches, which means we can now run events like the one Jessica is\norganizing in which they share their experiences with other women\ninterested in starting startups.  That should further accelerate\nthe growing number who do.Notes[1]\nIn 2013, 13% of series A rounds went to companies with female founders.\nWe did our own study to determine the number because the numbers\nwe found online varied so much.  We randomly selected 200 companies\nfrom Mattermark's list of those that raised series A rounds in 2013\nand looked up all their founders. 26 of 200 had female founders at\nthe time they got funded.The 24% number is itself growing.  Two years ago it was 9%\n(which was also more than VCs were funding then).  Why the increase?\nPartly because more women are starting startups, partly because\nYC's applicant pool has been broadening beyond its initial core of\nprogrammers (a group in which women are underrepresented), and\npartly from efforts to recruit individual women.[2]\nWhich in turn shows how broken the public conversation is about\nthis topic.  There are a lot of people who are so agitated about\nit that they end up attacking those who are actually most sympathetic\nto their aims.  If we really want to improve the situation it would\nhelp to stop blasting one another with friendly fire.For example, if your goal is to get Y Combinator to accept more\nfemale founders, how does it help that goal to claim publicly that\nwe're hostile to women?  It just makes women less likely to apply.[3]\nIt's a useful technique for investors to fund founders who are\nlike them in ways that help the startup, of course.  So it's good\nif investors had been startup founders themselves, for example,\nbecause they can recognize their peers.  Long ago a few people\nattacked me for saying we could recognize successful founders because\nthey were \"like us.\"  It may have been the first time YC got trolled\non this topic.   But it was clear from the context that I meant we\ncould recognize them because they were like us in being founders,\nnot because they were demographically like us.[4]\nMediocre investors discriminate against women not because women\nare unlike them, but because they're unlike previous successful\nfounders. Like mediocre people in any field, they're fighting the\nlast war, and the last war was won by Mark Zuckerberg.[5]\nMany kids now have computers with Internet access, but kids\nfrom poor families often don't. So to get them interested in\nprogramming you also have to solve the problem of hardware somehow.\nThat is among the problems being attacked by one of the nonprofits\nin the current YC batch.Thanks to Sam Altman, Alexandra Cavoulacos, Adora Cheung,\nTracy Chou, John Collison, Patrick Collison, Danielle Fong, Kevin\nHale, Aaron Harris, Elizabeth Iorns, Carolynn Levy, Jessica Livingston,\nClaire McDonnell, Kat Manalac, Kathryn Minshew, Kirsty Nathoo, Geoff\nRalston, Garry Tan, and Olga Vidisheva for reading drafts of this."},{"title":"Filters that Fight Back","text":"August 2003\nWe may be able to improve the accuracy of Bayesian spam filters\nby having them follow links to see what's\nwaiting at the other end.  Richard Jowsey of\ndeath2spam now does\nthis in borderline cases, and reports that it works well.Why only do it in borderline cases?  And why only do it once?As I mentioned in Will Filters Kill Spam?,\nfollowing all the urls in\na spam would have an amusing side-effect.  If popular email clients\ndid this in order to filter spam, the spammer's servers\nwould take a serious pounding.  The more I think about this,\nthe better an idea it seems.  This isn't just amusing; it\nwould be hard to imagine a more perfectly targeted counterattack\non spammers.So I'd like to suggest an additional feature to those\nworking on spam filters: a \"punish\" mode which,\nif turned on, would spider every url\nin a suspected spam n times, where n could be set by the user. [1]As many people have noted, one of the problems with the\ncurrent email system is that it's too passive.  It does\nwhatever you tell it.  So far all the suggestions for fixing\nthe problem seem to involve new protocols.  This one\nwouldn't.If widely used, auto-retrieving spam filters would make\nthe email system rebound.  The huge volume of the\nspam, which has so far worked in the spammer's favor,\nwould now work against him, like a branch snapping back in\nhis face.   Auto-retrieving spam filters would drive the\nspammer's\ncosts up,\nand his sales down:  his bandwidth usage\nwould go through the roof, and his servers would grind to a\nhalt under the load, which would make them unavailable\nto the people who would have responded to the spam.Pump out a million emails an hour, get a\nmillion hits an hour on your servers.\nWe would want to ensure that this is only done to\nsuspected spams.  As a rule, any url sent to millions of\npeople is likely to be a spam url, so submitting every http\nrequest in every email would work fine nearly all the time.\nBut there are a few cases where this isn't true: the urls\nat the bottom of mails sent from free email services like\nYahoo Mail and Hotmail, for example.To protect such sites, and to prevent abuse, auto-retrieval\nshould be combined with blacklists of spamvertised sites.\nOnly sites on a blacklist would get crawled, and\nsites would be blacklisted\nonly after being inspected by humans. The lifetime of a spam\nmust be several hours at least, so\nit should be easy to update such a list in time to\ninterfere with a spam promoting a new site. [2]High-volume auto-retrieval would only be practical for users\non high-bandwidth\nconnections, but there are enough of those to cause spammers\nserious trouble.   Indeed, this solution neatly\nmirrors the problem.  The problem with spam is that in\norder to reach a few gullible people the spammer sends\nmail to everyone.  The non-gullible recipients\nare merely collateral damage.  But the non-gullible majority\nwon't stop getting spam until they can stop (or threaten to\nstop) the gullible\nfrom responding to it.  Auto-retrieving spam filters offer\nthem a way to do this.Would that kill spam?  Not quite.  The biggest spammers\ncould probably protect their servers against auto-retrieving\nfilters.  However, the easiest and cheapest way for them\nto do it would be to include working unsubscribe links in\ntheir mails.  And this would be a necessity for smaller fry,\nand for \"legitimate\" sites that hired spammers to promote\nthem.  So if auto-retrieving filters became widespread,\nthey'd become auto-unsubscribing filters.In this scenario, spam would, like OS crashes, viruses, and\npopups, become one of those plagues that only afflict people\nwho don't bother to use the right software.Notes[1] Auto-retrieving filters will have to follow redirects,\nand should in some cases (e.g. a page that just says\n\"click here\") follow more than one level of links.\nMake sure too that\nthe http requests are indistinguishable from those of\npopular Web browsers, including the order and referrer.If the response\ndoesn't come back within x amount of time, default to\nsome fairly high spam probability.Instead of making n constant, it might be a good idea to\nmake it a function of the number of spams that have been\nseen mentioning the site.  This would add a further level of\nprotection against abuse and accidents.[2] The original version of this article used the term\n\"whitelist\" instead of \"blacklist\".  Though they were\nto work like blacklists, I preferred to call them whitelists\nbecause it might make them less vulnerable to legal attack.\nThis just seems to have confused readers, though.There should probably be multiple blacklists.  A single point\nof failure would be vulnerable both to attack and abuse.Thanks to Brian Burton, Bill Yerazunis, Dan Giffin,\nEric Raymond, and Richard Jowsey for reading drafts of this."},{"title":"Filters vs. Blacklists","text":"September 2002The real test of any technique for eliminating spam is not how much spam\nyou can stop, but how much spam you can stop without stopping a significant\namount of  legitimate email.\nThat is, how do you design a defense against spam so\nthat the error in the system is nearly all in the direction of false negatives\nrather than false positives?One great advantage of\nBayesian filtering is that it generates few false\npositives.  This\nis the main reason I prefer it to other antispam techniques, particularly\nblacklisting.Simply blocking mail from any server listed on a\nblacklist, as some ISPs do now, is in effect a clumsy form of filtering--\none that generates a large number of false positives, and yet only\ncatches a\nsmall percentage\nof spam.  Spammers seem to have\nlittle trouble staying a step ahead of blacklists.Blacklists have been around for years.  If they worked, we'd know by now.\nBut according to a recent study,\nthe MAPS RBL, probably the best known\nblacklist, catches only 24% of spam, with 34% false\npositives.  It would take a conscious effort to write a content-based filter\nwith performance that bad.Another advantage of filtering over blacklisting is that there is less\npotential for abuse.  Like other kinds of vigilantes, antispam vigilantes often\ndo more\ndamage\nthan the problem they're fighting.  The ACLU, the Electronic Frontier\nFoundation, and Computer Professionals for Social Responsibility\n(among others) have all condemned\nthe practices of groups like MAPS.The problem is not just that these groups' methods are unethical.\nTheir unethical methods are why their numbers are bad.  The worst\nof them will blacklist anyone who makes them mad\nenough, whether their server is a source of spam or not.\nObviously, this is not\ngoing to generate very good filtering performance.In effect, MAPS wastes most of its bullets on civilians.Bayesian filters, because they're just programs, don't take spam personally.\nAs a result, they make fewer mistakes.So if you want to fight spam, work on filters.  (Think globally, act locally.)\nThis approach is not only more\neffective, it's also less likely to turn you into a nut.I'm not saying it's a waste of time to keep track of spam sources.  But I do think\nthat whether an email comes from a server on a list of (supposed) spam\nsources is just one piece of evidence among many, and probably fairly\nunimportant evidence compared to the content of the email.Ultimately, I think filters will put a stop to groups like MAPS.   They only\nhave the power that they do because ISPs are desperate and feel\nthey have no alternative.  If ISPs start to do content-based filtering,\nor know that their users are, they won't have to rely on such crude\nmethods much longer.More Info:"},{"title":"First Priority: Core Language","text":"February 2008My first priority with Arc right now is the core language—those\noperators that are neither primitives like car and cdr, nor\nspecial-purpose library functions.  I mean operators like CL's\nmapcar, let, remove-if-not, and so on.As I said in the Arc\nChallenge, there has to be at least one optimal path up from\naxioms to a complete language for everyday programming, and the\ngoal of Arc is to try to discover one.I'm not against changing the axioms.  If it's possible to do that\nin a useful way, so much the better.  But that is not the kind of\nidea one has every day.The reason I'm focusing on the region between axioms and libraries\nis that, from the programmer's point of view, these operators are\nthe language.  These are what your programs are made of.  If Lisp\nwere a house, these operators would be the front door, the living\nroom sofa, the kitchen table.  Small variations in their design can\ngreatly affect how well the language works.I've taken a lot of heat for focusing on this, but I think\nit's both an important problem and a difficult one.  One sign\nof its difficulty is that although Lisp is almost 50 years old, the\ncore operators in all the Lisp dialects I know are so far from\noptimal.  The cond macro, for example.  It had all those gratuitous\nparentheses in it since Lisp 1, and no one did anything about it.\nI wouldn't be surprised if someone had already discovered the Arc\ntrick of collapsing if and cond into one operator, but it was\ncertainly not common knowledge.  I was pleased when I realized it\ncould be done.One reason Lisp cores evolve so slowly is that we get used to them.\nYou start to think in the operators that already exist.  It takes\na conscious effort to imagine how your code might be rewritten using\noperators that don't.That's part of why I focus on code size.  Length is an external\nconstraint.  If you start looking at code thinking \"what is the\nlower bound on how long this has to be?\" you're one step from\ndiscovering the new operator that will make it that short.The other reason Lisp cores have evolved so slowly is that it's a\ndesign problem more than an implementation\nproblem, and most hackers have neither the ability nor the inclination\nto work on that sort of thing.  It won't impress your hacker pals;\nit won't get you tenure; instead of pumping out 500 lines of code\na day, you consider yourself lucky if you write -20. But it's not\na frivolous thing to work on.  Indeed, I think one of the reasons\nLisp has persisted so long is that McCarthy was a great designer.\nAt a time when other people were creating languages compromised by\nthe hardware of the day or by ill-considered attempts to make\nprogramming languages like natural languages, he made something\ntiny and timeless.  A lot of what's good about Lisp is that brilliance,\nshowing up through the murk of successive less talented designers.Some of the people who flamed Arc on its initial release joked about\nit as \"the second coming of McCarthy.\"  I'm sure they didn't mean\nit this way, but in fact I do want to restart the kind of language\ndesign he was doing at the point where he left off.So I want to ask a favor from Arc users: I want to ask for tolerance\nwhen I break and change things in what may seem to be arbitrary,\nsmall ways.  I consider the whole core to be written in pencil at\nthis point, and I hope to be able to change it a lot.  This will\nmake Arc a pain in the ass to write programs on top of, I know, but\nthe end result should be something worth having.While Arc includes some handy libraries for writing web\napps—libraries so powerful, apparently, that it's cheating to compare\nArc to other languages using a problem that requires saving a string\non the server—that is not the focus right now.  I only wrote all\nthe web stuff to create the pressure of real applications pushing\ndown on the core.  So while I'm interested in new ideas\nfor web apps, the kind of ideas I'd really like to hear about are\nnew things to do in the language core.It's harder to think of new ideas down in this highly compressed\nand thoroughly picked over territory, but it's very rewarding work.\nAnd we know what we're looking for must exist.  By definition, there\nis some optimal path from axioms up to a complete language.\nThe Platonic form of Lisp is somewhere inside the block of marble.\nAll we have to do is chip away till we get at it."},{"title":"Five Founders","text":"April 2009Inc recently asked me who I thought were the 5 most\ninteresting startup founders of the last 30 years.  How do\nyou decide who's the most interesting?  The best test seemed\nto be influence: who are the 5\nwho've influenced me most?  Who do I use as examples when I'm\ntalking to companies we fund?  Who do I find myself quoting?1. Steve JobsI'd guess Steve is the most influential founder not just for me but\nfor most people you could ask.  A lot of startup culture is Apple\nculture.  He was the original young founder.  And while the concept\nof \"insanely great\" already existed in the arts, it was a novel\nidea to introduce into a company in the 1980s.More remarkable still, he's stayed interesting for 30 years.  People\nawait new Apple products the way they'd await new books by a popular\nnovelist.  Steve may not literally design them, but they wouldn't\nhappen if he weren't CEO.Steve is clever and driven, but so are a lot of people in the Valley.\nWhat makes him unique is his\nsense of\ndesign.  Before him, most\ncompanies treated design as a frivolous extra.  Apple's competitors\nnow know better.2. TJ RodgersTJ Rodgers isn't as famous as Steve Jobs, but he may be the best\nwriter among Silicon Valley CEOs.  I've probably learned more from\nhim about the startup way of thinking than from anyone else.  Not\nso much from specific things he's written as by reconstructing the\nmind that produced them: brutally candid; aggressively garbage-collecting\noutdated ideas; and yet driven by pragmatism rather than ideology.The first essay of his that I read was so electrifying that I\nremember exactly where I was at the time.  It was\nHigh\nTechnology Innovation: Free Markets or Government Subsidies? and\nI was downstairs in the Harvard Square T Station.  It felt as if\nsomeone had flipped on a light switch inside my head.3. Larry & SergeyI'm sorry to treat Larry and Sergey as one person.  I've always\nthought that was unfair to them.  But it does seem as if Google was a\ncollaboration.Before Google, companies in Silicon Valley already knew it was\nimportant to have the best hackers.  So they claimed, at least.\nBut Google pushed this idea further than anyone had before.  Their\nhypothesis seems to have been that, in the initial stages at least,\nall you need is good hackers: if you hire all the smartest people\nand put them to work on a problem where their success can be measured,\nyou win.  All the other stuff—which includes all the stuff that\nbusiness schools think business consists of—you can figure out\nalong the way.  The results won't be perfect, but they'll be optimal.\nIf this was their hypothesis, it's now been verified experimentally.4. Paul BuchheitFew know this, but one person, Paul Buchheit, is responsible for\nthree of the best things Google has done.  He was the original\nauthor of GMail, which is the most impressive thing Google has after\nsearch.  He also wrote the first prototype of AdSense, and was the\nauthor of Google's mantra \"Don't be evil.\"PB made a point in a talk once that I now mention to every startup\nwe fund: that it's better, initially, to make a small number of\nusers really love you than a large number kind of like you.   If I\ncould tell startups only\nten sentences,\nthis would be one of them.Now he's cofounder of a startup called Friendfeed.  It's only a\nyear old, but already everyone in the Valley is watching them.\nSomeone responsible for three of the biggest ideas at Google is\ngoing to come up with more.5. Sam AltmanI was told I shouldn't mention founders of YC-funded companies in\nthis list.   But Sam Altman can't be stopped by such flimsy rules.\nIf he wants to be on this list, he's going to be.Honestly, Sam is, along with Steve Jobs, the founder I refer to\nmost when I'm advising startups.  On questions of design, I ask\n\"What would Steve do?\" but on questions of strategy or ambition I\nask \"What would Sama do?\"What I learned from meeting Sama is that the doctrine of the elect\napplies to startups.  It applies way less than most people think:\nstartup investing does not consist of trying to pick winners the\nway you might in a horse race.  But there are a few people with\nsuch force of will that they're going to get whatever they want."},{"title":"Five Questions about Language Design","text":"May 2001\n(These are some notes I made\nfor a panel discussion on programming language design\nat MIT on May 10, 2001.)1. Programming Languages Are for People.Programming languages\nare how people talk to computers.  The computer would be just as\nhappy speaking any language that was unambiguous.  The reason we\nhave high level languages is because people can't deal with\nmachine language.  The point of programming\nlanguages is to prevent our poor frail human brains from being\noverwhelmed by a mass of detail.Architects know that some kinds of design problems are more personal\nthan others.  One of the cleanest, most abstract design problems\nis designing bridges.  There your job is largely a matter of spanning\na given distance with the least material.  The other end of the\nspectrum is designing chairs.  Chair designers have to spend their\ntime thinking about human butts.Software varies in the same way. Designing algorithms for routing\ndata through a network is a nice, abstract problem, like designing\nbridges.  Whereas designing programming languages is like designing\nchairs: it's all about dealing with human weaknesses.Most of us hate to acknowledge this.  Designing systems of great\nmathematical elegance sounds a lot more appealing to most of us\nthan pandering to human weaknesses.  And there is a role for mathematical\nelegance: some kinds of elegance make programs easier to understand.\nBut elegance is not an end in itself.And when I say languages have to be designed to suit human weaknesses,\nI don't mean that languages have to be designed for bad programmers.\nIn fact I think you ought to design for the\nbest programmers, but\neven the best programmers have limitations.  I don't think anyone\nwould like programming in a language where all the variables were\nthe letter x with integer subscripts.2. Design for Yourself and Your Friends.If you look at the history of programming languages, a lot of the best\nones were languages designed for their own authors to use, and a\nlot of the worst ones were designed for other people to use.When languages are designed for other people, it's always a specific\ngroup of other people: people not as smart as the language designer.\nSo you get a language that talks down to you.  Cobol is the most\nextreme case, but a lot of languages are pervaded by this spirit.It has nothing to do with how abstract the language is.  C is pretty\nlow-level, but it was designed for its authors to use, and that's\nwhy hackers like it.The argument for designing languages for bad programmers is that\nthere are more bad programmers than good programmers.  That may be\nso.  But those few good programmers write a disproportionately\nlarge percentage of the software.I'm interested in the question, how do you design a language that\nthe very best hackers will like?  I happen to think this is\nidentical to the question, how do you design a good programming\nlanguage?, but even if it isn't, it is at least an interesting\nquestion.3. Give the Programmer as Much Control as Possible.Many languages\n(especially the ones designed for other people) have the attitude\nof a governess: they try to prevent you from\ndoing things that they think aren't good for you.  I like the\nopposite approach: give the programmer as much\ncontrol as you can.When I first learned Lisp, what I liked most about it was\nthat it considered me an equal partner.  In the other languages\nI had learned up till then, there was the language and there was my\nprogram, written in the language, and the two were very separate.\nBut in Lisp the functions and macros I wrote were just like those\nthat made up the language itself.  I could rewrite the language\nif I wanted.  It had the same appeal as open-source software.4. Aim for Brevity.Brevity is underestimated and even scorned.\nBut if you look into the hearts of hackers, you'll see that they\nreally love it.  How many times have you heard hackers speak fondly\nof how in, say, APL, they could do amazing things with just a couple\nlines of code?  I think anything that really smart people really\nlove is worth paying attention to.I think almost anything\nyou can do to make programs shorter is good.  There should be lots\nof library functions; anything that can be implicit should be;\nthe syntax should be terse to a fault; even the names of things\nshould be short.And it's not only programs that should be short.  The manual should\nbe thin as well.  A good part of manuals is taken up with clarifications\nand reservations and warnings and special cases.  If you force\nyourself to shorten the manual, in the best case you do it by fixing\nthe things in the language that required so much explanation.5. Admit What Hacking Is.A lot of people wish that hacking was\nmathematics, or at least something like a natural science.  I think\nhacking is more like architecture.  Architecture is\nrelated to physics, in the sense that architects have to design\nbuildings that don't fall down, but the actual goal of architects\nis to make great buildings, not to make discoveries about statics.What hackers like to do is make great programs.\nAnd I think, at least in our own minds, we have to remember that it's\nan admirable thing to write great programs, even when this work\ndoesn't translate easily into the conventional intellectual\ncurrency of research papers.  Intellectually, it is just as\nworthwhile to design a language programmers will love as it is to design a\nhorrible one that embodies some idea you can publish a paper\nabout.1. How to Organize Big Libraries?Libraries are becoming an\nincreasingly important component of programming languages.  They're\nalso getting bigger, and this can be dangerous.  If it takes longer\nto find the library function that will do what you want than it\nwould take to write it yourself, then all that code is doing nothing\nbut make your manual thick.  (The Symbolics manuals were a case in\npoint.)  So I think we will have to work on ways to organize\nlibraries.  The ideal would be to design them so that the programmer\ncould guess what library call would do the right thing.2. Are People Really Scared of Prefix Syntax?This is an open\nproblem in the sense that I have wondered about it for years and\nstill don't know the answer.  Prefix syntax seems perfectly natural\nto me, except possibly for math.  But it could be that a lot of\nLisp's unpopularity is simply due to having an unfamiliar syntax.\nWhether to do anything about it, if it is true, is another question.\n3. What Do You Need for Server-Based Software?\nI think a lot of the most exciting new applications that get written\nin the next twenty years will be Web-based applications, meaning\nprograms that sit on the server and talk to you through a Web\nbrowser.  And to write these kinds of programs we may need some\nnew things.One thing we'll need is support for the new way that server-based\napps get released.  Instead of having one or two big releases a\nyear, like desktop software, server-based apps get released as a\nseries of small changes.  You may have as many as five or ten\nreleases a day.  And as a rule everyone will always use the latest\nversion.You know how you can design programs to be debuggable?\nWell, server-based software likewise has to be designed to be\nchangeable.  You have to be able to change it easily, or at least\nto know what is a small change and what is a momentous one.Another thing that might turn out to be useful for server based\nsoftware, surprisingly, is continuations.  In Web-based software\nyou can use something like continuation-passing style to get the\neffect of subroutines in the inherently\nstateless world of a Web\nsession.  Maybe it would be worthwhile having actual continuations,\nif it was not too expensive.4. What New Abstractions Are Left to Discover?I'm not sure how\nreasonable a hope this is, but one thing I would really love to\ndo, personally, is discover a new abstraction-- something that would\nmake as much of a difference as having first class functions or\nrecursion or even keyword parameters.  This may be an impossible\ndream.  These things don't get discovered that often.  But I am always\nlooking.1. You Can Use Whatever Language You Want.Writing application\nprograms used to mean writing desktop software.  And in desktop\nsoftware there is a big bias toward writing the application in the\nsame language as the operating system.  And so ten years ago,\nwriting software pretty much meant writing software in C.\nEventually a tradition evolved:\napplication programs must not be written in unusual languages.\nAnd this tradition had so long to develop that nontechnical people\nlike managers and venture capitalists also learned it.Server-based software blows away this whole model.  With server-based\nsoftware you can use any language you want.  Almost nobody understands\nthis yet (especially not managers and venture capitalists).\nA few hackers understand it, and that's why we even hear\nabout new, indy languages like Perl and Python.  We're not hearing\nabout Perl and Python because people are using them to write Windows\napps.What this means for us, as people interested in designing programming\nlanguages, is that there is now potentially an actual audience for\nour work.2. Speed Comes from Profilers.Language designers, or at least\nlanguage implementors, like to write compilers that generate fast\ncode.  But I don't think this is what makes languages fast for users.\nKnuth pointed out long ago that speed only matters in a few critical\nbottlenecks.  And anyone who's tried it knows that you can't guess\nwhere these bottlenecks are.  Profilers are the answer.Language designers are solving the wrong problem.  Users don't need\nbenchmarks to run fast.  What they need is a language that can show\nthem what parts of their own programs need to be rewritten.  That's\nwhere speed comes from in practice.  So maybe it would be a net\nwin if language implementors took half the time they would\nhave spent doing compiler optimizations and spent it writing a\ngood profiler instead.3. You Need an Application to Drive the Design of a Language.This may not be an absolute rule, but it seems like the best languages\nall evolved together with some application they were being used to\nwrite.  C was written by people who needed it for systems programming.\nLisp was developed partly to do symbolic differentiation, and\nMcCarthy was so eager to get started that he was writing differentiation\nprograms even in the first paper on Lisp, in 1960.It's especially good if your application solves some new problem.\nThat will tend to drive your language to have new features that\nprogrammers need.  I personally am interested in writing\na language that will be good for writing server-based applications.[During the panel, Guy Steele also made this point, with the\nadditional suggestion that the application should not consist of\nwriting the compiler for your language, unless your language\nhappens to be intended for writing compilers.]4. A Language Has to Be Good for Writing Throwaway Programs.You know what a throwaway program is: something you write quickly for\nsome limited task.  I think if you looked around you'd find that\na lot of big, serious programs started as throwaway programs.  I\nwould not be surprised if most programs started as throwaway\nprograms.  And so if you want to make a language that's good for\nwriting software in general, it has to be good for writing throwaway\nprograms, because that is the larval stage of most software.5. Syntax Is Connected to Semantics.It's traditional to think of\nsyntax and semantics as being completely separate.  This will\nsound shocking, but it may be that they aren't.\nI think that what you want in your language may be related\nto how you express it.I was talking recently to Robert Morris, and he pointed out that\noperator overloading is a bigger win in languages with infix\nsyntax.  In a language with prefix syntax, any function you define\nis effectively an operator.  If you want to define a plus for a\nnew type of number you've made up, you can just define a new function\nto add them.  If you do that in a language with infix syntax,\nthere's a big difference in appearance between the use of an\noverloaded operator and a function call.1. New Programming Languages.Back in the 1970s\nit was fashionable to design new programming languages.  Recently\nit hasn't been.  But I think server-based software will make new\nlanguages fashionable again.  With server-based software, you can\nuse any language you want, so if someone does design a language that\nactually seems better than others that are available, there will be\npeople who take a risk and use it.2. Time-Sharing.Richard Kelsey gave this as an idea whose time\nhas come again in the last panel, and I completely agree with him.\nMy guess (and Microsoft's guess, it seems) is that much computing\nwill move from the desktop onto remote servers.  In other words,\ntime-sharing is back.  And I think there will need to be support\nfor it at the language level.  For example, I know that Richard\nand Jonathan Rees have done a lot of work implementing process\nscheduling within Scheme 48.3. Efficiency.Recently it was starting to seem that computers\nwere finally fast enough.  More and more we were starting to hear\nabout byte code, which implies to me at least that we feel we have\ncycles to spare.  But I don't think we will, with server-based\nsoftware.   Someone is going to have to pay for the servers that\nthe software runs on, and the number of users they can support per\nmachine will be the divisor of their capital cost.So I think efficiency will matter, at least in computational\nbottlenecks.  It will be especially important to do i/o fast,\nbecause server-based applications do a lot of i/o.It may turn out that byte code is not a win, in the end.  Sun and\nMicrosoft seem to be facing off in a kind of a battle of the byte\ncodes at the moment.  But they're doing it because byte code is a\nconvenient place to insert themselves into the process, not because\nbyte code is in itself a good idea.  It may turn out that this\nwhole battleground gets bypassed.  That would be kind of amusing.1. Clients.This is just a guess, but my guess is that\nthe winning model for most applications will be purely server-based.\nDesigning software that works on the assumption that everyone will\nhave your client is like designing a society on the assumption that\neveryone will just be honest.  It would certainly be convenient, but\nyou have to assume it will never happen.I think there will be a proliferation of devices that have some\nkind of Web access, and all you'll be able to assume about them is\nthat they can support simple html and forms.  Will you have a\nbrowser on your cell phone?  Will there be a phone in your palm\npilot?  Will your blackberry get a bigger screen? Will you be able\nto browse the Web on your gameboy?  Your watch?  I don't know.\nAnd I don't have to know if I bet on\neverything just being on the server.  It's\njust so much more robust to have all the\nbrains on the server.2. Object-Oriented Programming.I realize this is a\ncontroversial one, but I don't think object-oriented programming\nis such a big deal.  I think it is a fine model for certain kinds\nof applications that need that specific kind of data structure,\nlike window systems, simulations, and cad programs.  But I don't\nsee why it ought to be the model for all programming.I think part of the reason people in big companies like object-oriented\nprogramming is because it yields a lot of what looks like work.\nSomething that might naturally be represented as, say, a list of\nintegers, can now be represented as a class with all kinds of\nscaffolding and hustle and bustle.Another attraction of\nobject-oriented programming is that methods give you some of the\neffect of first class functions.  But this is old news to Lisp\nprogrammers.  When you have actual first class functions, you can\njust use them in whatever way is appropriate to the task at hand,\ninstead of forcing everything into a mold of classes and methods.What this means for language design, I think, is that you shouldn't\nbuild object-oriented programming in too deeply.  Maybe the\nanswer is to offer more general, underlying stuff, and let people design\nwhatever object systems they want as libraries.3. Design by Committee.Having your language designed by a committee is a big pitfall,\nand not just for the reasons everyone knows about.  Everyone\nknows that committees tend to yield lumpy, inconsistent designs.\nBut I think a greater danger is that they won't take risks.\nWhen one person is in charge he can take risks\nthat a committee would never agree on.Is it necessary to take risks to design a good language though?\nMany people might suspect\nthat language design is something where you should stick fairly\nclose to the conventional wisdom.  I bet this isn't true.\nIn everything else people do, reward is proportionate to risk.\nWhy should language design be any different?"},{"title":"Fortran I","text":"To give you some idea of the state of the art when Lisp\nwas invented, these two images are taken from the first Fortran\nmanual, published in October 1956. Fortran was not\nthen called a programming language; the manual describes\n\"The FORTRAN Automatic Coding System for the IBM 704 EDPM.\"*What was automatic about it was that you didn't have\nto write machine language.  The FORTRAN system\nwould do it for you.I have heard that the inventors of Fortran did not initially expect\nthe same language to be used on different types of\ncomputers, or to have multiple languages available for\nthe same computer.  Each computer would have its own\n\"automatic coding system\" (since they would\neach have their own instruction sets) and this was to be the 704's.Fortran I was very simple.  Programs were flat: the language\ndoes not seem to have supported\nsubroutines or nested expressions.  The Fortran if\nwas a conditional goto.\nIt was partly to overcome these limitation that\nMcCarthy\ndeveloped Lisp.\nThe statement for reading\nin a stack of cards is impressively terse.\nReminds one of Perl.  (Common) Lisp is embarrassingly\ninferior here.The mysterious Frequency statement is optimization advice to\nthe compiler about the likely outcomes of conditionals.\nIt apparently proved useless and\nwas dropped from the language in Fortran II."},{"title":"Founder Control","text":"December 2010Someone we funded is talking to VCs now, and asked me how common\nit was for a startup's founders to retain control of the board after\na series A round.  He said VCs told him this almost never happened.Ten years ago that was true.  In the past, founders rarely kept\ncontrol of the board through a series A.  The traditional series A\nboard consisted of two founders, two VCs, and one independent member.\nMore recently the recipe is often one founder, one VC, and one\nindependent.  In either case the founders lose their majority.But not always.  Mark Zuckerberg kept control of Facebook's board\nthrough the series A and still has it today.  Mark Pincus has kept\ncontrol of Zynga's too.  But are these just outliers?  How common\nis it for founders to keep control after an A round?  I'd heard of\nseveral cases among the companies we've funded, but I wasn't sure\nhow many there were, so I emailed the ycfounders list.The replies surprised me.  In a dozen companies we've funded, the\nfounders still had a majority of the board seats after the series\nA round.I feel like we're at a tipping point here.  A lot of VCs still act\nas if founders retaining board control after a series A is unheard-of.\nA lot of them try to make you feel bad if you even ask—as if\nyou're a noob or a control freak for wanting such a thing.  But the\nfounders I heard from aren't noobs or control freaks.  Or if they\nare, they are, like Mark Zuckerberg, the kind of noobs and control\nfreaks VCs should be trying to fund more of.Founders retaining control after a series A is clearly heard-of.\nAnd barring financial catastrophe, I think in the coming year it\nwill become the norm.Control of a company is a more complicated matter than simply\noutvoting other parties in board meetings.  Investors usually get\nvetos over certain big decisions, like selling the company, regardless\nof how many board seats they have.  And board votes are rarely\nsplit.  Matters are decided in the discussion preceding the vote,\nnot in the vote itself, which is usually unanimous.  But if opinion\nis divided in such discussions, the side that knows it would lose\nin a vote will tend to be less insistent.  That's what board control\nmeans in practice.  You don't simply get to do whatever you want;\nthe board still has to act in the interest of the shareholders; but\nif you have a majority of board seats, then your opinion about\nwhat's in the interest of the shareholders will tend to prevail.So while board control is not total control, it's not imaginary\neither.  There's inevitably a difference in how things feel within\nthe company.  Which means if it becomes the norm for founders to\nretain board control after a series A, that will change the way\nthings feel in the whole startup world.The switch to the new norm may be surprisingly fast, because the\nstartups that can retain control tend to be the best ones.  They're\nthe ones that set the trends, both for other startups and for VCs.A lot of the reason VCs are harsh when negotiating with startups\nis that they're embarrassed to go back to their partners looking\nlike they got beaten.  When they sign a termsheet, they want to be\nable to brag about the good terms they got.  A lot of them don't\ncare that much personally about whether founders keep board control.\nThey just don't want to seem like they had to make concessions.\nWhich means if letting the founders keep control stops being perceived\nas a concession, it will rapidly become much more common.Like a lot of changes that have been forced on VCs, this change\nwon't turn out to be as big a problem as they might think. VCs will\nstill be able to convince; they just won't be able to compel.  And\nthe startups where they have to resort to compulsion are not the\nones that matter anyway.  VCs make most of their money from a few\nbig hits, and those aren't them.Knowing that founders will keep control of the board may even help\nVCs pick better.  If they know they can't fire the founders, they'll\nhave to choose founders they can trust.  And that's who they should\nhave been choosing all along.Thanks to Sam Altman, John Bautista, Trevor Blackwell, Paul\nBuchheit, Brian Chesky, Bill Clerico, Patrick Collison, Adam\nGoldstein, James Lindenbaum, Jessica Livingston, and Fred Wilson\nfor reading drafts of this."},{"title":"Founders' Accents","text":"August 2013Recently Inc published an interview in which I said we'd noticed a\ncorrelation between founders having very strong foreign accents and\ntheir companies doing badly.Some interpreted this statement as xenophobic, or even racist—as\nif I'd said that having a foreign accent at all was a problem.But that's not what I said, or what I think.  No one in Silicon\nValley would think that.  A lot of the most successful founders\nhere speak with accents.The case I was talking about is when founders have accents so strong\nthat people can't understand what they're saying.  I.e. the problem\nis not the cultural signal accents send, but the practical difficulty\nof getting a startup off the ground when people can't understand\nyou.I'd already explained that when I talked about this issue with a\nNew York Times reporter:\nBut after ranking every Y.C. company by its valuation, Graham\ndiscovered a more significant correlation. \"You have to go far\ndown the list to find a C.E.O. with a strong foreign accent,\"\nGraham told me. \"Alarmingly far down—like 100th place.\" I asked\nhim to clarify. \"You can sound like you're from Russia,\" he said,\nin the voice of an evil Soviet henchman. \"It's just fine, as long\nas everyone can understand you.\"\nEveryone got that?  We all agree accents are fine?  The problem is\nwhen people can't understand you.We have a lot of empirical evidence that there's a threshold beyond\nwhich the difficulty of understanding the CEO harms a company's\nprospects.  And while we don't know exactly how, I'm pretty sure\nthe problem is not merely that investors have trouble understanding\nthe company's Demo Day presentation.  Demo Day presentations are\nonly 2 minutes and 30 seconds. With a presentation that short, you\ncan just memorize it at the level of individual phonemes. Most\nbatches we have groups that do this.Conversations are more of a problem, as I know from\nmy own experience doing office\nhours.  We talk about a lot of subtle\npoints at office hours.  (Even talking on the phone rather than in\nperson introduces a significant degradation. That's why we insist\nthe groups we fund move to Silicon Valley for the duration of YC.)\nAnd I know I don't get as deeply into things with the groups that\ndon't speak English well.  I can feel it happening; we just can't\ncommunicate well enough.  And often when I feel it happening, I\nwarn the founders, because most of the people they encounter are\nnot going to work as hard to understand them as I do.A startup founder is always selling.  Not just literally to customers,\nbut to current and potential employees, partners, investors, and\nthe press as well.  Since the best startup ideas are by their nature\nperilously close to bad ideas,\nthere is little room for misunderstanding.\nAnd yet a lot of the people you encounter as a founder will initially\nbe indifferent, if not skeptical.  They don't know yet that you're\ngoing to be huge.  You're just one person they're meeting that day.\nThey're not going to work to understand you.  So you can't make it\nbe work to understand you.I'd thought of just letting this controversy blow over.  But then\nI remembered why I said what I said in the interview in the first\nplace: to help founders. (I said so in the interview, though that\ngot cut from the published version.)  There's an important message\nhere that I want to get through to founders, and the danger of\npeople misrepresenting what I said is not just that founders get\nthe parody version, but that the original message is lost.I was talking a few years ago to a woman from some sort of\nentrepreneurship program in Central Europe.  She asked me what they\ncould do to prepare people to apply to Y Combinator.  I think she\nwas hoping I would tell her how she could teach them about startups,\nbut as I've written elsewhere,\nthe way to learn about startups is\nto start one.  I told her the most important thing she could do was\nto make sure they spoke English well.  I don't mind people beating\non me so long as I can get that message through to founders who\nwant to come to Silicon Valley from other countries.  It's fine to\nhave an accent, but you must be able to make yourself understood.Thanks to Sam Altman, Kevin Hale, Carolynn Levy, Jessica Livingston,\nGeoff Ralston, and Garry Tan for reading drafts of this.Related:"},{"title":"Frighteningly Ambitious Startup Ideas","text":"March 2012One of the more surprising things I've noticed while working\non Y Combinator is how frightening the most ambitious startup\nideas are.  In this essay I'm going to demonstrate\nthis phenomenon by describing some.  Any one of them\ncould make you a billionaire.  That might sound like an attractive\nprospect, and yet when I describe these ideas you may\nnotice you find yourself shrinking away from them.Don't worry, it's not a sign of weakness.  Arguably it's a sign of\nsanity.  The biggest startup ideas are terrifying.  And not just\nbecause they'd be a lot of work.  The biggest ideas seem to threaten\nyour identity: you wonder if you'd have enough ambition to carry\nthem through.There's a scene in Being John Malkovich where the nerdy hero\nencounters a very attractive, sophisticated woman.  She says to\nhim:\nHere's the thing: If you ever got me, you wouldn't have a clue\nwhat to do with me.\nThat's what these ideas say to us.This phenomenon is one of the most important things you can understand\nabout startups.\n[1]\nYou'd expect big startup ideas to be\nattractive, but actually they tend to repel you.  And that has a\nbunch of consequences.  It means these ideas are invisible to most\npeople who try to think of startup ideas, because their subconscious\nfilters them out.  Even the most ambitious people are probably best\noff approaching them obliquely.1. A New Search EngineThe best ideas are just on the right side of impossible.  I don't\nknow if this one is possible, but there are signs it might be.\nMaking a new search engine means competing with Google, and recently\nI've noticed some cracks in their fortress.The point when it became clear to me that Microsoft had lost their\nway was when they decided to get into the search business.  That\nwas not a natural move for Microsoft.  They did it because they\nwere afraid of Google, and Google was in the search business.  But\nthis meant (a) Google was now setting Microsoft's agenda, and (b)\nMicrosoft's agenda consisted of stuff they weren't good at.Microsoft : Google :: Google : Facebook.That does not by itself mean\nthere's room for a new search engine, but lately when using Google\nsearch I've found myself nostalgic for the old days, when\nGoogle was true to its own slightly aspy self.  Google used to give\nme a page of the right answers, fast, with no clutter.  Now the\nresults seem inspired by the Scientologist principle that what's\ntrue is what's true for you.  And the pages don't have the\nclean, sparse feel they used to.  Google search results used to\nlook like the output of a Unix utility.  Now if I accidentally put\nthe cursor in the wrong place, anything might happen.The way to win here is to build the search engine all the hackers\nuse.  A search engine whose users consisted of the top 10,000 hackers\nand no one else would be in a very powerful position despite its\nsmall size, just as Google was when it was that search engine.  And\nfor the first time in over a decade the idea of switching seems\nthinkable to me.Since anyone capable of starting this company is one of those 10,000\nhackers, the route is at least straightforward: make the search\nengine you yourself want.  Feel free to make it excessively hackerish.\nMake it really good for code search, for example.  Would you like\nsearch queries to be Turing complete?  Anything that gets you those\n10,000 users is ipso facto good.Don't worry if something you want to do will constrain you in the\nlong term, because if you don't get that initial core of users,\nthere won't be a long term.  If you can just build something that\nyou and your friends genuinely prefer to Google, you're already\nabout 10% of the way to an IPO, just as Facebook was (though they\nprobably didn't realize it) when they got all the Harvard undergrads.2. Replace EmailEmail was not designed to be used the way we use it now.  Email is\nnot a messaging protocol.  It's a todo list.  Or rather, my inbox\nis a todo list, and email is the way things get onto it.  But it\nis a disastrously bad todo list.I'm open to different types of solutions to this problem, but I\nsuspect that tweaking the inbox is not enough, and that email has\nto be replaced with a new protocol.\nThis new protocol should be a todo list protocol, not\na messaging protocol, although there is a degenerate case where\nwhat someone wants you to do is: read the following text.As a todo list protocol, the new protocol should give more power\nto the recipient than email does.  I want there to be more restrictions\non what someone can put on my todo list.  And when someone can put\nsomething on my todo list, I want them to tell me more about what\nthey want from me.  Do they want me to do something beyond just\nreading some text?  How important is it?  (There obviously has to\nbe some mechanism to prevent people from saying everything is\nimportant.)  When does it have to be done?This is one of those ideas that's like an irresistible force meeting\nan immovable object.  On one hand, entrenched protocols are impossible\nto replace.  On the other, it seems unlikely that people in\n100 years will still be living in the same email hell we do now.\nAnd if email is going to get replaced eventually, why not now?If you do it right, you may be able to avoid the usual chicken\nand egg problem new protocols face, because some of the most powerful\npeople in the world will be among the first to switch to it.\nThey're all at the mercy of email too.Whatever you build, make it fast.  GMail has become painfully slow.\n[2]\nIf you made something no better than GMail, but fast, that\nalone would let you start to pull users away from GMail.GMail is slow because Google can't afford to spend a lot on it.\nBut people will pay for this.  I'd have no problem paying $50 a month.\nConsidering how much time I spend in email, it's kind of scary to\nthink how much I'd be justified in paying.  At least $1000 a month.\nIf I spend several hours a day reading and writing email, that would\nbe a cheap way to make my life better.3. Replace UniversitiesPeople are all over this idea lately, and I think they're onto\nsomething.  I'm reluctant to suggest that an institution that's\nbeen around for a millennium is finished just because of some mistakes\nthey made in the last few decades, but certainly in the last few\ndecades US universities seem to have been headed down the wrong\npath.  One could do a lot better for a lot less money.I don't think universities will disappear.  They won't be replaced\nwholesale.  They'll just lose the de facto monopoly on certain types\nof learning that they once had.  There will be many different ways\nto learn different things, and some may look quite different from\nuniversities.   Y Combinator itself is arguably one of them.Learning is such a big problem that changing the way people do it\nwill have a wave of secondary effects.  For example, the name of\nthe university one went to is treated by a lot of people (correctly\nor not) as a credential in its own right.  If learning breaks up\ninto many little pieces, credentialling may separate from it.  There\nmay even need to be replacements for campus social life (and oddly\nenough, YC even has aspects of that).You could replace high schools too, but there you face bureaucratic\nobstacles that would slow down a startup.  Universities seem the\nplace to start.4. Internet DramaHollywood has been slow to embrace the Internet.  That was a\nmistake, because I think we can now call a winner in the race between\ndelivery mechanisms, and it is the Internet, not cable.A lot of the reason is the horribleness of cable clients, also known\nas TVs.  Our family didn't wait for Apple TV.  We hated our last\nTV so much that a few months ago we replaced it with an iMac bolted\nto the wall.  It's a little inconvenient to control it with a\nwireless mouse, but the overall experience is much better than the\nnightmare UI we had to deal with before.Some of the attention people currently devote to watching\nmovies and TV can be stolen by things that seem completely unrelated,\nlike social networking apps.  More can be stolen by things that are\na little more closely related, like games.  But there will probably\nalways remain some residual demand for conventional drama, where\nyou sit passively and watch as a plot happens.  So how do you deliver\ndrama via the Internet?  Whatever you make will have to be on a\nlarger scale than Youtube clips.  When people sit down to watch a\nshow, they want to know what they're going to get: either part\nof a series with familiar characters, or a single longer \"movie\"\nwhose basic premise they know in advance.There are two ways delivery and payment could play out.  Either\nsome company like Netflix or Apple will be the app store for\nentertainment, and you'll reach audiences through them.  Or the\nwould-be app stores will be too overreaching, or too technically\ninflexible, and companies will arise to supply payment and streaming\na la carte to the producers of drama.  If that's the way things\nplay out, there will also be a need for such infrastructure companies.5. The Next Steve JobsI was talking recently to someone who knew Apple well, and I asked\nhim if the people now running the company would be able to keep\ncreating new things the way Apple had under Steve Jobs.  His answer\nwas simply \"no.\"  I already feared that would be the answer.  I\nasked more to see how he'd qualify it.  But he didn't qualify it\nat all.  No, there will be no more great new stuff beyond whatever's\ncurrently in the pipeline.  Apple's\nrevenues may continue to rise for a long time, but as Microsoft\nshows, revenue is a lagging indicator in the technology business.So if Apple's not going to make the next iPad, who is?  None of the\nexisting players.  None of them are run by product visionaries, and\nempirically you can't seem to get those by hiring them.  Empirically\nthe way you get a product visionary as CEO is for him to found the\ncompany and not get fired.  So the company that creates the next\nwave of hardware is probably going to have to be a startup.I realize it sounds preposterously ambitious for a startup to try\nto become as big as Apple.  But no more ambitious than it was for\nApple to become as big as Apple, and they did it.  Plus a startup\ntaking on this problem now has an advantage the original Apple\ndidn't: the example of Apple.  Steve Jobs has shown us what's\npossible.  That helps would-be successors both directly, as Roger\nBannister did, by showing how much better you can do than people\ndid before, and indirectly, as Augustus did, by lodging the idea\nin users' minds that a single person could unroll the future\nfor them.\n[3]Now Steve is gone there's a vacuum we can all feel.  If a new company\nled boldly into the future of hardware, users would follow.  The\nCEO of that company, the \"next Steve Jobs,\" might not measure up\nto Steve Jobs. But he wouldn't have to.  He'd just have to do a\nbetter job than Samsung and HP and Nokia, and that seems pretty\ndoable.6. Bring Back Moore's LawThe last 10 years have reminded us what Moore's Law actually says.\nTill about 2002 you could safely misinterpret it as promising that\nclock speeds would double every 18 months.  Actually what it says\nis that circuit densities will double every 18 months.  It used to\nseem pedantic to point that out.  Not any more.  Intel can no longer\ngive us faster CPUs, just more of them.This Moore's Law is not as good as the old one.  Moore's Law used\nto mean that if your software was slow, all you had to do was wait,\nand the inexorable progress of hardware would solve your problems.\nNow if your software is slow you have to rewrite it to do more\nthings in parallel, which is a lot more work than waiting.It would be great if a startup could give us something of the old\nMoore's Law back, by writing software that could make a large number\nof CPUs look to the developer like one very fast CPU.  There are\nseveral ways to approach this problem.  The most ambitious is to\ntry to do it automatically: to write a compiler that will parallelize\nour code for us.  There's a name for this compiler, the sufficiently\nsmart compiler, and it is a byword for impossibility.  But is\nit really impossible?  Is there no configuration of the bits in\nmemory of a present day computer that is this compiler?  If you\nreally think so, you should try to prove it, because that would be\nan interesting result.  And if it's not impossible but simply very\nhard, it might be worth trying to write it.  The expected value\nwould be high even if the chance of succeeding was low.The reason the expected value is so high is web services.  If you\ncould write software that gave programmers the convenience of the\nway things were in the old days, you could offer it to them as a\nweb service.  And that would in turn mean that you got practically\nall the users.Imagine there was another processor manufacturer that could still translate\nincreased circuit densities into increased clock speeds. They'd\ntake most of Intel's business.  And since web services mean that\nno one sees their processors anymore, by writing the sufficiently\nsmart compiler you could create a situation indistinguishable from\nyou being that manufacturer, at least for the server market.The least ambitious way of approaching the problem is to start from\nthe other end, and offer programmers more parallelizable Lego blocks\nto build programs out of, like Hadoop and MapReduce.   Then the\nprogrammer still does much of the work of optimization.There's an intriguing middle ground where you build a semi-automatic\nweapon—where there's a human in the loop.  You make something\nthat looks to the user like the sufficiently smart compiler, but\ninside has people, using highly developed optimization tools to\nfind and eliminate bottlenecks in users' programs.   These people\nmight be your employees, or you might create a marketplace for\noptimization.An optimization marketplace would be a way to generate the sufficiently\nsmart compiler piecemeal, because participants would immediately\nstart writing bots.  It would be a curious state of affairs if you\ncould get to the point where everything could be done by bots,\nbecause then you'd have made the sufficiently smart compiler, but\nno one person would have a complete copy of it.I realize how crazy all this sounds.  In fact, what I like about\nthis idea is all the different ways in which it's wrong.  The whole\nidea of focusing on optimization is counter to the general trend\nin software development for the last several decades.  Trying to\nwrite the sufficiently smart compiler is by definition a mistake.\nAnd even if it weren't, compilers are the sort of software that's\nsupposed to be created by open source projects, not companies.  Plus\nif this works it will deprive all the programmers who take pleasure\nin making multithreaded apps of so much amusing complexity. The\nforum troll I have by now internalized doesn't even know where to\nbegin in raising objections to this project.  Now that's what I\ncall a startup idea.7. Ongoing DiagnosisBut wait, here's another that could face even greater resistance:\nongoing, automatic medical diagnosis.One of my tricks for generating startup ideas is to imagine the\nways in which we'll seem backward to future generations.  And I'm\npretty sure that to people 50 or 100 years in the future, it will\nseem barbaric that people in our era waited till they had symptoms\nto be diagnosed with conditions like heart disease and cancer.For example, in 2004 Bill Clinton found he was feeling short of\nbreath.  Doctors discovered that several of his arteries were over\n90% blocked and 3 days later he had a quadruple bypass.  It seems\nreasonable to assume Bill Clinton has the best medical care available.\nAnd yet even he had to wait till his arteries were over 90% blocked\nto learn that the number was over 90%.  Surely at some point in the\nfuture we'll know these numbers the way we now know something like\nour weight.  Ditto for cancer.  It will seem preposterous to future\ngenerations that we wait till patients have physical symptoms to\nbe diagnosed with cancer.  Cancer will show up on some sort of radar\nscreen immediately.(Of course, what shows up on the radar screen may be different from\nwhat we think of now as cancer.  I wouldn't be surprised if at any\ngiven time we have ten or even hundreds of microcancers going at\nonce, none of which normally amount to anything.)A lot of the obstacles to ongoing diagnosis will come from the fact\nthat it's going against the grain of the medical profession.  The\nway medicine has always worked is that patients come to doctors\nwith problems, and the doctors figure out what's wrong.  A lot of\ndoctors don't like the idea of going on the medical equivalent of\nwhat lawyers call a \"fishing expedition,\" where you go looking for\nproblems without knowing what you're looking for.  They call the\nthings that get discovered this way \"incidentalomas,\" and they are\nsomething of a nuisance.For example, a friend of mine once had her brain scanned as part\nof a study.  She was horrified when the doctors running the study\ndiscovered what appeared to be a large tumor.  After further testing,\nit turned out to be a harmless cyst.  But it cost her a few days\nof terror. A lot of doctors worry that if you start scanning people\nwith no symptoms, you'll get this on a giant scale: a huge number\nof false alarms that make patients panic and require expensive and\nperhaps even dangerous tests to resolve.  But I think that's just\nan artifact of current limitations.  If people were scanned all the\ntime and we got better at deciding what was a real problem, my\nfriend would have known about this cyst her whole life and known\nit was harmless, just as we do a birthmark.There is room for a lot of startups here.\nIn addition to the technical obstacles all\nstartups face, and the bureaucratic obstacles all medical startups\nface, they'll be going against thousands of years of medical\ntradition.  But it will happen, and it will be a great thing—so\ngreat that people in the future will feel as sorry for us as we do\nfor the generations that lived before anaesthesia and antibiotics.TacticsLet me conclude with some tactical advice.  If you want to take on\na problem as big as the ones I've discussed, don't make a direct\nfrontal attack on it.  Don't say, for example, that you're going\nto replace email.  If you do that you raise too many expectations.\nYour employees and investors will constantly be asking \"are we there\nyet?\" and you'll have an army of haters waiting to see you fail.\nJust say you're building todo-list software.  That sounds harmless.\nPeople can notice you've replaced email when it's a fait accompli.\n[4]Empirically, the way to do really big things seems to be to start\nwith deceptively small things.  Want to dominate microcomputer\nsoftware?  Start by writing a Basic interpreter for a machine with\na few thousand users.  Want to make the universal web site?  Start\nby building a site for Harvard undergrads to stalk one another.Empirically, it's not just for other people that you need to start\nsmall.  You need to for your own sake.  Neither Bill Gates nor Mark\nZuckerberg knew at first how big their companies were going to get.\nAll they knew was that they were onto something.  Maybe it's a bad\nidea to have really big ambitions initially, because the bigger\nyour ambition, the longer it's going to take, and the further you\nproject into the future, the more likely you'll get it wrong.I think the way to use these big ideas is not to try to identify a\nprecise point in the future and then ask yourself how to get from\nhere to there, like the popular image of a visionary.  You'll be\nbetter off if you operate like Columbus and just head in a general\nwesterly direction.  Don't try to construct the future like a\nbuilding, because your current blueprint is almost certainly mistaken.\nStart with something you know works, and when you expand, expand\nwestward.The popular image of the visionary is someone with a clear view of\nthe future, but empirically it may be better to have a blurry one.Notes[1]\nIt's also one of the most important things VCs fail to\nunderstand about startups.  Most expect founders to walk in with a\nclear plan for the future, and judge them based on that.  Few\nconsciously realize that in the biggest successes there is the least\ncorrelation between the initial plan and what the startup eventually\nbecomes.[2]\nThis sentence originally read \"GMail is painfully slow.\"\nThanks to Paul Buchheit for the correction.[3]\nRoger Bannister is famous as the first person to run a mile\nin under 4 minutes.  But his world record only lasted 46 days.  Once\nhe showed it could be done, lots of others followed.  Ten years\nlater Jim Ryun ran a 3:59 mile as a high school junior.[4]\nIf you want to be the next Apple, maybe you don't even want to start\nwith consumer electronics.  Maybe at first you make something hackers\nuse.  Or you make something popular but apparently unimportant,\nlike a headset or router.  All you need is a bridgehead.Thanks to Sam Altman, Trevor Blackwell,\nPaul Buchheit, Patrick Collison, Aaron Iba, Jessica\nLivingston, Robert Morris, Harj Taggar and Garry Tan\nfor reading drafts of this."},{"title":"Gates Email","text":"From: Bill GatesSent: Sunday, October 30, 2005 9:56 PMTo: Executive Staff and Direct Reports; Distinguished EngineersSubject: Internet Software ServicesMicrosoft has always had to anticipate changes in the software business and seize the opportunity to lead.Ten years ago this December, I wrote a memo entitled The Internet Tidal Wave which described how the internet was going to forever change the landscape of computing. Our products could either prepare for the magnitude of what was to come or risk being swept away. We dedicated ourselves to innovating rapidly and lead the way much to the surprise of many industry pundits who questioned our ability to reinvent our approach of delivering software breakthroughs.Five years ago we focused our strategy on .NET making a huge bet on XML and Web services. We were a leader in driving these standards and building them into our products and again this has been key to our success. Today, over 92% of the Fortune 100 are utilizing .Net and our current wave of products have XML and Web services at their core and are gaining share because of the bold bet we made back in the year 2000.Today, the opportunity is to utilize the Internet to make software far more powerful by incorporating a services model which will simplify the work that IT departments and developers have to do while providing new capabilities.In many ways this is not completely new. All the way back in 1998 we had a company meeting where we outlined a vision in which software would become more of a service over time. We've been making investments since then -- for example, the Watson service we have built into Windows and Office allows us and our partners to understand where our users are running into problems and lets us improve their experience. Our On-line help work gives us constant feedback about what topics are helping our users and which we need to change. Products from MSN like Messenger and Hotmail are updated with new features many times throughout the year, allowing them to deliver innovations rapidly. Our Mappoint service was a pioneer in letting corporations connect up to a web based API on a subscription basis.However, to lead we need to do far more. The broad and rich foundation of the internet will unleash a \"services wave\" of applications and experiences available instantly over the internet to millions of users. Advertising has emerged as a powerful new means by which to directly and indirectly fund the creation and delivery of software and services along with subscriptions and license fees. Services designed to scale to tens or hundreds of millions will dramatically change the nature and cost of solutions deliverable to enterprises or small businesses.We will build our strategies around Internet services and we will provide a broad set of service APIs and use them in all of our key applications.This coming \"services wave\" will be very disruptive. We have competitors who will seize on these approaches and challenge us � still, the opportunity for us to lead is very clear. More than any other company, we have the vision, assets, experience, and aspirations to deliver experiences and solutions across the entire range of digital workstyle & digital lifestyle scenarios, and to do so at scale, reaching users, developers and businesses across all markets.But in order to execute on this opportunity, as we've done before we must act quickly and decisively. This next generation of the internet is being shaped by its \"grassroots\" adoption and popularization model, and the cost-effective \"seamless experiences\" delivered through the intentional fusion of services, software and sometimes hardware. We must reflect upon what and for whom we are building, how best to deliver new functionality given the internet services model, what kind of a platform in this new context might enable partners to build great profitable businesses, and how our applications might be reshaped to create service-enabled experiences uniquely compelling to both users and businesses alike.Steve and I recently expanded Ray Ozzie's role as CTO to include leading our services strategy across all three divisions. We did this because we believe our services challenges and opportunities will impact most everything we do. Ray has long demonstrated his passion for software, and through his work at Groove he also came to realize the transformative potential for combining software and services. I've attached a memo from Ray which I feel sure we will look back on as being as critical as The Internet Tidal Wave memo was when it came out. Ray outlines the great things we and our partners can do using the Internet Services approach.The next sea change is upon us. We must recognize this change as an opportunity to take our offerings to the next level, compete in a manner commensurate with our industry responsibilities, and utilize our assets and our broad reach to reshape our business for the benefit of the users of our products, our customers, our partners and ourselves.Bill"},{"title":"Gateway High School, 1981","text":"Popular GirlsSusie, second from right, was\nprobably the most popular girl in school.  (She did have two legs;\nshe's just standing strangely.)Lisa, far left, went to Gateway for a\nyear between prep schools.  She seemed out of\nplace, in a good way.  She didn't\nbelieve in big hair, and was known to have\nread books.Tough GuysThe tough guys in my high school were pretty scary.  Fortunately,\nby this time I hardly ever ran into them.A friend of mine who went to a good east coast high school looked\nat this picture and said \"this looks like a picture from prison.\"    And yet I\nbelieve my school was above average, statistically.Mr. GatewayIf kids in my school had spent as much time studying math\nas they did lifting weights, we could have run our own\nManhattan Project in house.I lifted weights too.  I started at about fifteen, mostly to protect myself.\nBy the time I graduated I could bench press around 200.\nIt was kind of fun, actually.Valedictorian (Almost)Here's my friend Rich in gym class.  He would have been\nvaledictorian, but came second on a technicality.\nRich wrote large parts of Mach and is now a fairly big\ncheese at Microsoft.  Believe it or not, he later took up\nrowing, and is now an avid mountain climber.Pep RallyFootball is taken\nvery seriously in Western Pennsylvania.  When I entered high school, the quarterback\nof our rival Central Catholic was Dan Marino.Looking at this picture now, what I notice is the uniformity.\nThe same clothes, the same hair, the same facial expressions,\nthe same gestures.Chess ClubThat's me, top left.  How unhappy we all look.  Well, we probably\nwere unhappy.  The kind of things we were interested in didn't count\nfor much in our high school.Jonathan Yedidia, lower\nleft, later became a\nprofessional chess player.  It was not so\nmuch a question of whether he would win as how many\npieces he would spot you.A Great TeacherDoc Schultz was a great teacher.  His class felt like a college\nclass.  What was he doing in our school?(I was alarmed to hear from several friends that they\nthought I'd made this page as a joke.  So let me state explicitly, all these pictures\nare scanned from my junior-year high school yearbook.  Yes, my high school\nhad bodybuilding contests; yes, that muscular guy was a high\nschool student, and not the only one who looked like that; yes, Dan Marino\nwas the quarterback of our high school rival; and yes,\nthat is me in the upper left in the chess club.)Thanks to new media expert Maria Daniels for scanning these images."},{"title":"General FAQ","text":"Will you invest in and/or advise our startup?I invest in and advise startups through\nY Combinator.  If you\nwant investment, the way to get it is to apply for our\nnext round of funding.  If we fund you, you can have all the\nadvice you want (if not more).Sorry, but I can't give advice to every startup that writes to me.\nIt's as much as I can do to keep up\nwith the ones we've funded.Can I mirror an essay on my site?I'd rather you linked to it instead.  I like to keep track\nof which ones people read, because it gives me\nideas of what to write about next.  I also like to\nbe able to fix typos.Can I include an essay in my school newspaper?Sure, go ahead.  Please include the url of the original\nthough.Can I put a translation into another language online?Sure.  Please include the url of the original, and send\nme the url of your translation so I can make a link to it.How long does it take you to write an essay?Usually about two weeks.  What You Can't\nSay took a month, partly because the topic was so\ndangerous.  How to Start a Startup\ntook a week, because I started it a week before I had\nto deliver it as a talk.  Writing,\nBriefly was the fastest, at just over an hour.Why did the school authorities veto the plan to have\nyou give the talk that became \"What You'll Wish You'd Known?\"They didn't have anything against me specifically,\nbut because I wouldn't be coming from any organization, they\nwouldn't have any guarantee I wouldn't say dangerous things.\nWhereas if I came to speak from IBM or the State Department, and told\nthe students they should all go out and try heroin, I'd be fired.Which shows one reason public schools lose.  A private school\nwould probably have taken the risk, but the administration at\na public school has to consider all the fuss parents might\nmake in the worst-case scenario.Are any of your paintings online?I don't really consider myself a painter.  I was trained in painting,\nbut I haven't worked seriously at it for years.  For the curious\nthere is one image online.  The painting\non the cover of ANSI Common Lisp is\nalso one of mine.Are you the photographer Paul Graham?No, that's a\ndifferent\nguy.You say in \"Taste for Makers\" that setting\ntext in sans serif fonts was a mistake. So why do you use them\non your site?I was talking about books.  The resolution of computer\nscreens is much lower.Why is the text on your site so narrow?  It wastes screen space.The aim of web design is not to use all available\nscreen space.  It is legibility.  Text is most\nlegible with no more than 70 characters per line."},{"title":"General and Surprising","text":"September 2017The most valuable insights are both general and surprising.\nF = ma for example. But general and surprising is a hard\ncombination to achieve. That territory tends to be picked\nclean, precisely because those insights are so valuable.Ordinarily, the best that people can do is one without the\nother: either surprising without being general (e.g.\ngossip), or general without being surprising (e.g.\nplatitudes).Where things get interesting is the moderately valuable\ninsights.  You get those from small additions of whichever\nquality was missing.  The more common case is a small\naddition of generality: a piece of gossip that's more than\njust gossip, because it teaches something interesting about\nthe world. But another less common approach is to focus on\nthe most general ideas and see if you can find something new\nto say about them. Because these start out so general, you\nonly need a small delta of novelty to produce a useful\ninsight.A small delta of novelty is all you'll be able to get most\nof the time. Which means if you take this route your ideas\nwill seem a lot like ones that already exist. Sometimes\nyou'll find you've merely rediscovered an idea that did\nalready exist.  But don't be discouraged.  Remember the huge\nmultiplier that kicks in when you do manage to think of\nsomething even a little new.Corollary: the more general the ideas you're talking about,\nthe less you should worry about repeating yourself.  If you\nwrite enough, it's inevitable you will.  Your brain is much\nthe same from year to year and so are the stimuli that hit\nit. I feel slightly bad when I find I've said something\nclose to what I've said before, as if I were plagiarizing\nmyself. But rationally one shouldn't.  You won't say\nsomething exactly the same way the second time, and that\nvariation increases the chance you'll get that tiny but\ncritical delta of novelty.And of course, ideas beget ideas.  (That sounds familiar.)\nAn idea with a small amount of novelty could lead to one\nwith more. But only if you keep going. So it's doubly\nimportant not to let yourself be discouraged by people who\nsay there's not much new about something you've discovered.\n\"Not much new\" is a real achievement when you're talking\nabout the most general ideas. Maybe if you keep going,\nyou'll discover more.It's not true that there's nothing new under the sun.  There\nare some domains where there's almost nothing new.  But\nthere's a big difference between nothing and almost nothing,\nwhen it's multiplied by the area under the sun.Thanks to Sam Altman, Patrick Collison, and Jessica\nLivingston for reading drafts of this."},{"title":"Getting Past Filters","text":"How can legitimate opt-in list publishers avoid\ngetting their mails caught in spam filters?The key is to avoid getting your initial email caught in the\nfilter.  Bayesian filters \"learn\" about spam characteristics\nfrom the mail each user receives.  Once a mail ends up in\nthe spam folder, all mails resembling it will be classified\nas spam.  Which means once you get in the spam folder, you\nwon't get out.The opposite is also true, however.  If the recipient discards\nyour email as ordinary trash, he thereby labels it as legit,\nand mails resembing it will in future get past the filter.So the key thing for the legitimate publisher is to avoid\ngetting that first email classified as spam.  If you can get\nthe first email into the inbox, and the user doesn't mark\nit as spam, you're in.How do you do that?  Avoid saying spammy things in that first\nemail.  Sales pitches, for example.  And even more importantly,\ninclude words that only a legitimate sender would know, like\nthe first and last name of the subscriber.  If your list, like\nmany lists, is related to some specific interest that the\nsubscriber has (model trains, for example), use terms related\nto that field as well, because they will likely have occurred\nin his legit email already."},{"title":"Good and Bad Procrastination","text":"December 2005The most impressive people I know are all terrible procrastinators.\nSo could it be that procrastination isn't always bad?Most people who write about procrastination write about how to cure\nit.  But this is, strictly speaking, impossible.  There are an\ninfinite number of things you could be doing.  No matter what you\nwork on, you're not working on everything else.  So the question\nis not how to avoid procrastination, but how to procrastinate well.There are three variants of procrastination, depending on what you\ndo instead of working on something: you could work on (a) nothing,\n(b) something less important, or (c) something more important.  That\nlast type, I'd argue, is good procrastination.That's the \"absent-minded professor,\" who forgets to shave, or eat,\nor even perhaps look where he's going while he's thinking about\nsome interesting question.   His mind is absent from the everyday\nworld because it's hard at work in another.That's the sense in which the most impressive people I know are all\nprocrastinators.  They're type-C procrastinators:  they put off\nworking on small stuff to work on big stuff.What's \"small stuff?\"  Roughly, work that has zero chance of being\nmentioned in your obituary.  It's hard to say at the time what will\nturn out to be your best work (will it be your magnum opus on\nSumerian temple architecture, or the detective thriller you wrote\nunder a pseudonym?), but there's a whole class of tasks you can\nsafely rule out: shaving, doing your laundry, cleaning the house,\nwriting thank-you notes—anything that might be called an errand.Good procrastination is avoiding errands to do real work.Good in a sense, at least.  The people who want you to do the errands\nwon't think it's good.  But you probably have to annoy them if you\nwant to get anything done.  The mildest seeming people, if they\nwant to do real work, all have a certain degree of ruthlessness\nwhen it comes to avoiding errands.Some errands, like replying to letters, go away if you\nignore them (perhaps taking friends with them).  Others, like mowing\nthe lawn, or filing tax returns, only get worse if you put them\noff.  In principle it shouldn't work to put off the second kind of\nerrand.  You're going to have to do whatever it is eventually.  Why\nnot (as past-due notices are always saying) do it now?The reason it pays to put off even those errands is that real work\nneeds two things errands don't: big chunks of time, and the\nright mood.  If you get inspired by some project, it can be a net\nwin to blow off everything you were supposed to do for the next few\ndays to work on it.  Yes, those errands may cost you more time when\nyou finally get around to them.  But if you get a lot done during\nthose few days, you will be net more productive.In fact, it may not be a difference in degree, but a difference in\nkind.  There may be types of work that can only be done in long,\nuninterrupted stretches, when inspiration hits, rather than dutifully\nin scheduled little slices.  Empirically it seems to be so.  When\nI think of the people I know who've done great things, I don't\nimagine them dutifully crossing items off to-do lists.  I imagine\nthem sneaking off to work on some new idea.Conversely, forcing someone to perform errands synchronously is\nbound to limit their productivity.  The cost of an interruption is\nnot just the time it takes, but that it breaks the time on either\nside in half.  You probably only have to interrupt someone a couple\ntimes a day before they're unable to work on hard problems at all.I've wondered a lot about why\nstartups are most productive at the\nvery beginning, when they're just a couple guys in an apartment.\nThe main reason may be that there's no one to interrupt them yet.\nIn theory it's good when the founders finally get enough money to\nhire people to do some of the work for them.  But it may be better\nto be overworked than interrupted.  Once you dilute a startup with\nordinary office workers—with type-B procrastinators—the whole\ncompany starts to resonate at their frequency.  They're interrupt-driven,\nand soon you are too.Errands are so effective at killing great projects that a lot of\npeople use them for that purpose.  Someone who has decided to write\na novel, for example, will suddenly find that the house needs\ncleaning. People who fail to write novels don't do it by sitting\nin front of a blank page for days without writing anything.  They\ndo it by feeding the cat, going out to buy something they need for\ntheir apartment, meeting a friend for coffee, checking email.  \"I\ndon't have time to work,\" they say.  And they don't; they've made\nsure of that.(There's also a variant where one has no place to work.  The cure\nis to visit the places where famous people worked, and see how\nunsuitable they were.)I've used both these excuses at one time or another.  I've learned\na lot of tricks for making myself work over the last 20 years, but\neven now I don't win consistently.  Some days I get real work done.\nOther days are eaten up by errands.  And I know it's usually my\nfault: I let errands eat up the day, to avoid\nfacing some hard problem.The most dangerous form of procrastination is unacknowledged type-B\nprocrastination, because it doesn't feel like procrastination.\nYou're \"getting things done.\"  Just the wrong things.Any advice about procrastination that concentrates on crossing\nthings off your to-do list is not only incomplete, but positively\nmisleading, if it doesn't consider the possibility that the to-do\nlist is itself a form of type-B procrastination.  In fact, possibility\nis too weak a word.  Nearly everyone's is.  Unless you're working\non the biggest things you could be working on, you're type-B\nprocrastinating, no matter how much you're getting done.In his famous essay You and Your Research\n(which I recommend to\nanyone ambitious, no matter what they're working on), Richard Hamming\nsuggests that you ask yourself three questions:\nWhat are the most important problems in your field? Are you working on one of them? Why not?\nHamming was at Bell Labs when he started asking such questions.  In\nprinciple anyone there ought to have been able to work on the most\nimportant problems in their field.  Perhaps not everyone can make\nan equally dramatic mark on the world; I don't know; but whatever\nyour capacities, there are projects that stretch them.  So Hamming's\nexercise can be generalized to:\nWhat's the best thing you could be working on, and why aren't\nyou?\nMost people will shy away from this question.  I shy away from it\nmyself; I see it there on the page and quickly move on to the next\nsentence.  Hamming used to go around actually asking people this,\nand it didn't make him popular.  But it's a question anyone ambitious\nshould face.The trouble is, you may end up hooking a very big fish with this\nbait.  To do good work, you need to do more than find good projects.\nOnce you've found them, you have to get yourself to work on them,\nand that can be hard.  The bigger the problem, the harder it is to\nget yourself to work on it.Of course, the main reason people find it difficult to work on a\nparticular problem is that they don't\nenjoy it.  When you're young,\nespecially, you often find yourself working on stuff you don't\nreally like-- because it seems impressive, for example, or because\nyou've been assigned to work on it.  Most grad students are stuck\nworking on big problems they don't really like, and grad school is\nthus synonymous with procrastination.But even when you like what you're working on, it's easier to get\nyourself to work on small problems than big ones.  Why?  Why is it\nso hard to work on big problems?  One reason is that you may not\nget any reward in the forseeable future.  If you work on something\nyou can finish in a day or two, you can expect to have a nice feeling\nof accomplishment fairly soon.  If the reward is indefinitely far\nin the future, it seems less real.Another reason people don't work on big projects is, ironically,\nfear of wasting time.  What if they fail?  Then all the time they\nspent on it will be wasted.  (In fact it probably won't be, because\nwork on hard projects almost always leads somewhere.)But the trouble with big problems can't be just that they promise\nno immediate reward and might cause you to waste a lot of time.  If\nthat were all, they'd be no worse than going to visit your in-laws.\nThere's more to it than that.  Big problems are terrifying.\nThere's an almost physical pain in facing them.  It's like having\na vacuum cleaner hooked up to your imagination.   All your initial\nideas get sucked out immediately, and you don't have any more, and\nyet the vacuum cleaner is still sucking.You can't look a big problem too directly in the eye. You have to\napproach it somewhat obliquely.  But you have to adjust the angle\njust right: you have to be facing the big problem directly enough\nthat you catch some of the excitement radiating from it, but not\nso much that it paralyzes you.  You can tighten the angle once you\nget going, just as a sailboat can sail closer to the wind once it\ngets underway.If you want to work on big things, you seem to have to trick yourself\ninto doing it.  You have to work on small things that could grow\ninto big things, or work on successively larger things, or split\nthe moral load with collaborators.  It's not a sign of weakness to\ndepend on such tricks.  The very best work has been done this way.When I talk to people who've managed to make themselves work on big\nthings, I find that all blow off errands, and all feel guilty about\nit.  I don't think they should feel guilty.  There's more to do\nthan anyone could.  So someone doing the best work they can is\ninevitably going to leave a lot of errands undone.  It seems a\nmistake to feel bad about that.I think the way to \"solve\" the problem of procrastination is to let\ndelight pull you instead of making a to-do list push you.  Work on\nan ambitious project you really enjoy, and sail as close to the\nwind as you can, and you'll leave the right things undone.Thanks to Trevor Blackwell, Jessica Livingston, and Robert\nMorris for reading drafts of this."},{"title":"Great Hackers","text":"July 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new\nbook,\nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by\nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the\nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste,\nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste, you can, as Steve Jobs does, make satisfying\nyou the kind of problem that good people like to work on.Nasty Little ProblemsIt's pretty easy to say what kinds of problems are not interesting:\nthose where instead of solving a few big, clear, problems, you have\nto solve a lot of nasty little ones.  One of the worst kinds of\nprojects is writing an interface to a piece of software that's\nfull of bugs.  Another is when you have to customize\nsomething for an individual client's complex and ill-defined needs.\nTo hackers these kinds of projects are the death of a thousand\ncuts.The distinguishing feature of nasty little problems is that you\ndon't learn anything from them.   Writing a compiler is interesting\nbecause it teaches you what a compiler is.  But writing an interface\nto a buggy piece of software doesn't teach you anything, because the\nbugs are random.  [3] So it's not just fastidiousness that makes good\nhackers avoid nasty little problems.  It's more a question of\nself-preservation.  Working on nasty little problems makes you\nstupid.  Good hackers avoid it for the same reason models avoid\ncheeseburgers.Of course some problems inherently have this character.  And because\nof supply and demand, they pay especially well.  So a company that\nfound a way to get great hackers to work on tedious problems would\nbe very successful.  How would you do it?One place this happens is in startups.  At our startup we had\nRobert Morris working as a system administrator.  That's like having the\nRolling Stones play at a bar mitzvah.  You can't hire that kind of\ntalent.  But people will do any amount of drudgery for companies\nof which they're the founders.  [4]Bigger companies solve the problem by partitioning the company.\nThey get smart people to work for them by establishing a separate\nR&D department where employees don't have to work directly on\ncustomers' nasty little problems. [5] In this model, the research\ndepartment functions like a mine. They produce new ideas; maybe\nthe rest of the company will be able to use them.You may not have to go to this extreme.\nBottom-up programming\nsuggests another way to partition the company: have the smart people\nwork as toolmakers.  If your company makes software to do x, have\none group that builds tools for writing software of that type, and\nanother that uses these tools to write the applications.  This way\nyou might be able to get smart people to write 99% of your code,\nbut still keep them almost as insulated from users as they would\nbe in a traditional research department.  The toolmakers would have\nusers, but they'd only be the company's own developers.  [6]If Microsoft used this approach, their software wouldn't be so full\nof security holes, because the less smart people writing the actual\napplications wouldn't be doing low-level stuff like allocating\nmemory.  Instead of writing Word directly in C, they'd be plugging\ntogether big Lego blocks of Word-language.  (Duplo, I believe, is\nthe technical term.)ClumpingAlong with interesting problems, what good hackers like is other\ngood hackers.  Great hackers tend to clump together-- sometimes\nspectacularly so, as at Xerox Parc.   So you won't attract good\nhackers in linear proportion to how good an environment you create\nfor them.  The tendency to clump means it's more like the square\nof the environment.  So it's winner take all.  At any given time,\nthere are only about ten or twenty places where hackers most want to\nwork, and if you aren't one of them, you won't just have fewer\ngreat hackers, you'll have zero.Having great hackers is not, by itself, enough to make a company\nsuccessful.  It works well for Google and ITA, which are two of\nthe hot spots right now, but it didn't help Thinking Machines or\nXerox.  Sun had a good run for a while, but their business model\nis a down elevator.  In that situation, even the best hackers can't\nsave you.I think, though, that all other things being equal, a company that\ncan attract great hackers will have a huge advantage.  There are\npeople who would disagree with this.  When we were making the rounds\nof venture capital firms in the 1990s, several told us that software\ncompanies didn't win by writing great software, but through brand,\nand dominating channels, and doing the right deals.They really seemed to believe this, and I think I know why.  I\nthink what a lot of VCs are looking for, at least unconsciously,\nis the next Microsoft.  And of course if Microsoft is your model,\nyou shouldn't be looking for companies that hope to win by writing\ngreat software.  But VCs are mistaken to look for the next Microsoft,\nbecause no startup can be the next Microsoft unless some other\ncompany is prepared to bend over at just the right moment and be\nthe next IBM.It's a mistake to use Microsoft as a model, because their whole\nculture derives from that one lucky break.  Microsoft is a bad data\npoint.  If you throw them out, you find that good products do tend\nto win in the market.  What VCs should be looking for is the next\nApple, or the next Google.I think Bill Gates knows this.  What worries him about Google is\nnot the power of their brand, but the fact that they have\nbetter hackers. [7]RecognitionSo who are the great hackers?  How do you know when you meet one?\nThat turns out to be very hard.  Even hackers can't tell.  I'm\npretty sure now that my friend Trevor Blackwell is a great hacker.\nYou may have read on Slashdot how he made his\nown Segway.  The\nremarkable thing about this project was that he wrote all the\nsoftware in one day (in Python, incidentally).For Trevor, that's\npar for the course.  But when I first met him, I thought he was a\ncomplete idiot.  He was standing in Robert Morris's office babbling\nat him about something or other, and I remember standing behind\nhim making frantic gestures at Robert to shoo this nut out of his\noffice so we could go to lunch.  Robert says he misjudged Trevor\nat first too.  Apparently when Robert first met him, Trevor had\njust begun a new scheme that involved writing down everything about\nevery aspect of his life on a stack of index cards, which he carried\nwith him everywhere.  He'd also just arrived from Canada, and had\na strong Canadian accent and a mullet.The problem is compounded by the fact that hackers, despite their\nreputation for social obliviousness, sometimes put a good deal of\neffort into seeming smart.  When I was in grad school I used to\nhang around the MIT AI Lab occasionally. It was kind of intimidating\nat first.  Everyone there spoke so fast.  But after a while I\nlearned the trick of speaking fast.  You don't have to think any\nfaster; just use twice as many words to say everything.  With this amount of noise in the signal, it's hard to tell good\nhackers when you meet them.  I can't tell, even now.  You also\ncan't tell from their resumes.  It seems like the only way to judge\na hacker is to work with him on something.And this is the reason that high-tech areas\nonly happen around universities.  The active ingredient\nhere is not so much the professors as the students.  Startups grow up\naround universities because universities bring together promising young\npeople and make them work on the same projects.  The\nsmart ones learn who the other smart ones are, and together\nthey cook up new projects of their own.Because you can't tell a great hacker except by working with him,\nhackers themselves can't tell how good they are.  This is true to\na degree in most fields.  I've found that people who\nare great at something are not so much convinced of their own\ngreatness as mystified at why everyone else seems so incompetent.\nBut it's particularly hard for hackers to know how good they are,\nbecause it's hard to compare their work.  This is easier in most\nother fields.  In the hundred meters, you know in 10 seconds who's\nfastest.  Even in math there seems to be a general consensus about\nwhich problems are hard to solve, and what constitutes a good\nsolution.  But hacking is like writing.  Who can say which of two\nnovels is better?  Certainly not the authors.With hackers, at least, other hackers can tell.  That's because,\nunlike novelists, hackers collaborate on projects.  When you get\nto hit a few difficult problems over the net at someone, you learn\npretty quickly how hard they hit them back.  But hackers can't\nwatch themselves at work.  So if you ask a great hacker how good\nhe is, he's almost certain to reply, I don't know.  He's not just\nbeing modest.  He really doesn't know.And none of us know, except about people we've actually worked\nwith.  Which puts us in a weird situation: we don't know who our\nheroes should be.  The hackers who become famous tend to become\nfamous by random accidents of PR.  Occasionally I need to give an\nexample of a great hacker, and I never know who to use.  The first\nnames that come to mind always tend to be people I know personally,\nbut it seems lame to use them.  So, I think, maybe I should say\nRichard Stallman, or Linus Torvalds, or Alan Kay, or someone famous\nlike that.  But I have no idea if these guys are great hackers.\nI've never worked with them on anything.If there is a Michael Jordan of hacking, no one knows, including\nhim.CultivationFinally, the question the hackers have all been wondering about:\nhow do you become a great hacker?  I don't know if it's possible\nto make yourself into one.  But it's certainly possible to do things\nthat make you stupid, and if you can make yourself stupid, you\ncan probably make yourself smart too.The key to being a good hacker may be to work on what you like.\nWhen I think about the great hackers I know, one thing they have\nin common is the extreme\ndifficulty of making them work\non anything they\ndon't want to.  I don't know if this is cause or effect; it may be\nboth.To do something well you have to love it.\nSo to the extent you\ncan preserve hacking as something you love, you're likely to do it\nwell.  Try to keep the sense of wonder you had about programming at\nage 14.  If you're worried that your current job is rotting your\nbrain, it probably is.The best hackers tend to be smart, of course, but that's true in\na lot of fields.  Is there some quality that's unique to hackers?\nI asked some friends, and the number one thing they mentioned was\ncuriosity.\nI'd always supposed that all smart people were curious--\nthat curiosity was simply the first derivative of knowledge.  But\napparently hackers are particularly curious, especially about how\nthings work.  That makes sense, because programs are in effect\ngiant descriptions of how things work.Several friends mentioned hackers' ability to concentrate-- their\nability, as one put it, to \"tune out everything outside their own\nheads.''  I've certainly noticed this.  And I've heard several\nhackers say that after drinking even half a beer they can't program at\nall.   So maybe hacking does require some special ability to focus.\nPerhaps great hackers can load a large amount of context into their\nhead, so that when they look at a line of code, they see not just\nthat line but the whole program around it.  John McPhee\nwrote that Bill Bradley's success as a basketball player was due\npartly to his extraordinary peripheral vision.  \"Perfect'' eyesight\nmeans about 47 degrees of vertical peripheral vision.  Bill Bradley\nhad 70; he could see the basket when he was looking at the floor.\nMaybe great hackers have some similar inborn ability.  (I cheat by\nusing a very dense language,\nwhich shrinks the court.)This could explain the disconnect over cubicles.  Maybe the people\nin charge of facilities, not having any concentration to shatter,\nhave no idea that working in a cubicle feels to a hacker like having\none's brain in a blender.  (Whereas Bill, if the rumors of autism\nare true, knows all too well.)One difference I've noticed between great hackers and smart people\nin general is that hackers are more\npolitically incorrect.  To the\nextent there is a secret handshake among good hackers, it's when they\nknow one another well enough to express opinions that would get\nthem stoned to death by the general public.  And I can see why\npolitical incorrectness would be a useful quality in programming.\nPrograms are very complex and, at least in the hands of good\nprogrammers, very fluid.  In such situations it's helpful to have\na habit of questioning assumptions.Can you cultivate these qualities?  I don't know.  But you can at\nleast not repress them.  So here is my best shot at a recipe.  If\nit is possible to make yourself into a great hacker, the way to do\nit may be to make the following deal with yourself: you never have\nto work on boring projects (unless your family will starve otherwise),\nand in return, you'll never allow yourself to do a half-assed job.\nAll the great hackers I know seem to have made that deal, though\nperhaps none of them had any choice in the matter.Notes\n[1] In fairness, I have to say that IBM makes decent hardware.  I\nwrote this on an IBM laptop.[2] They did turn out to be doomed.  They shut down a few months\nlater.[3] I think this is what people mean when they talk\nabout the \"meaning of life.\"  On the face of it, this seems an\nodd idea.  Life isn't an expression; how could it have meaning?\nBut it can have a quality that feels a lot like meaning.  In a project\nlike a compiler, you have to solve a lot of problems, but the problems\nall fall into a pattern, as in a signal.  Whereas when the problems\nyou have to solve are random, they seem like noise.\n[4] Einstein at one point worked designing refrigerators. (He had equity.)[5] It's hard to say exactly what constitutes research in the\ncomputer world, but as a first approximation, it's software that\ndoesn't have users.I don't think it's publication that makes the best hackers want to work\nin research departments.  I think it's mainly not having to have a\nthree hour meeting with a product manager about problems integrating\nthe Korean version of Word 13.27 with the talking paperclip.[6] Something similar has been happening for a long time in the\nconstruction industry. When you had a house built a couple hundred\nyears ago, the local builders built everything in it.  But increasingly\nwhat builders do is assemble components designed and manufactured\nby someone else.  This has, like the arrival of desktop publishing,\ngiven people the freedom to experiment in disastrous ways, but it\nis certainly more efficient.[7] Google is much more dangerous to Microsoft than Netscape was.\nProbably more dangerous than any other company has ever been.  Not\nleast because they're determined to fight.  On their job listing\npage, they say that one of their \"core values'' is \"Don't be evil.''\nFrom a company selling soybean oil or mining equipment, such a\nstatement would merely be eccentric.  But I think all of us in the\ncomputer world recognize who that is a declaration of war on.Thanks to Jessica Livingston, Robert Morris, and Sarah Harlin\nfor reading earlier versions of this talk."},{"title":"Hackers & Painters","text":"We live in the computer age, a world increasingly shaped by\nprogrammers.  Who are they, what motivates them, and what impact\nwill they have on the rest of us?That impact is ever more visible.  Everything around us is becoming\ncomputerized.  Your typewriter is gone, replaced by a computer.\nYour phone has turned into a computer. So has your camera. Soon\nyour TV and VCR will be components in a computer network. Your car\nhas more processing power in it than a room-sized mainframe did in\n1970. Letters, encyclopedias, newspapers, and even your local store\nare being replaced by the Internet.  What's next?Hackers & Painters examines the world of hackers and the\nmotivations of the people who occupy it. In clear, thoughtful prose\nthat draws on illuminating historical examples, Graham takes readers\non a fast-moving tour of what he calls \"an intellectual Wild West.\"Why do kids who can't master high school end up\nas some of the most powerful people in the world?\nWhat makes a startup succeed?\nWill technology create a gap between those who understand it and\nthose who don't?  Will Microsoft\ntake over the Internet?  What to do about spam?If you want to understand what hackers are up to, this book\nwill tell you.  And if you are a hacker, you'll probably recognize\nin it a portrait of yourself.O'Reilly,\n2004, 272 pages, hardcover. ISBN 0596006624.Buy at Amazon.\n\"A delightful ping-pong around the brain of a really smart guy. The chapter that answers the key question of our age-- why are nerds unpopular?-- is worth the price of admission alone.\"- Chris\nAnderson, Editor-in-Chief, Wired\"Paul Graham takes on big ideas writing with a grace, clarity and humor\nrare not only among his sister and brother geeks, but among the best\nwriters anywhere.\"- David Weinberger, co-author of The Cluetrain Manifesto\"Paul Graham has delivered final proof that he is a marvelous essayist.\"- Slashdot\nReview\"I want everybody I know to read \"How to Make Wealth\" and \"Mind the Gap\"\n(chapters 6 and 7), which brilliantly articulate the most commonly, and frustratingly, misunderstood core economic principles of everyday life.\"- Evan Williams, co-creator of Blogger\"Reading Paul's essays is like having a conversation with a genius who doesn't need to score any points by proving it to you, except that most geniuses aren't as articulate as he is. You get to share Paul's sense that the Universe is a fascinating place, and his knack for looking at it from an unusual angle.\"- Eric Raymond,\nauthor of The Cathedral and the Bazaar\n\"This book will force you to re-think\nyour ideas about the nature of computer programming.\"- Robert Morris, MIT\"Society has yet to understand the beauty and brilliance that wraps the coder. Graham's clear and engaging book does, and will teach anyone willing to listen. And if we're not to lose something important soon, we as a society should listen.\"- Larry Lessig,\nStanford Law School, author of Code and Other Laws of Cyberspace\"Explains how [nerds] make so much money that they get dates\ndespite their personalities.\"- Book News\"Paul Graham's Hackers & Painters is one diverse book, but it\ndoesn't matter if you're learning why nerds get beat up in high school,\nor the subtleties of language design and acceptance. Paul approaches\neach of his subjects with an entertaining insight that will make you\nsmile and think. Highly recommended to anyone.\"- Rob \"CmdrTaco\" Malda,\nCreator/Director, Slashdot\"Paul Graham writes about the human side of the often enigmatic world of computer programming. This book will help you remember the enjoyment you got from science class when science was a romp through the mud and woods, a class like art where making a mess is accepted as part of the process. Paul is a true hacker with a broad business experience, deep technical understanding, an uncontrollably inquisitive mind, and a wonderful writing style. His no-nonsense evaluation of the software industry may irritate some pundits and therefore is well worth reading.\"- Mike Smith,\nHarvard University\"You won't agree with everything, but you'll be challenged and fascinated throughout. Even the footnotes are worth reading.\"- Barnes\n& Noble\"Get Paul's book Hackers & Painters. Or just read, and listen,\nto everything he says. This guy is real good.\"- Doc Searls, Senior Editor,\nLinux Journal\n\"What Paul does, and does very well, is to take ideas and concepts\nthat are beautiful in the abstract, and brings them down to a real\nworld level.  That's a rare talent to find in writing these days.\"- Jeff \"hemos\" Bates,\nDirector, OSDN; Co-evolver, Slashdot\"Written in an engaging, grab-you-by-the-lapels style, and because he's studied it, a lot of the argument is conducted via the metaphor of painting. Overall this works, because he is putting the case for craftsmanship, discipline, and originality.\"- Mantex Review\"Paul Graham is a hacker, a painter, and a terrific writer. His lucid,\nhumorous prose is brimming with contrarian insight and practical wisdom\non writing great code at the intersection of art, science and commerce.\nHe may even make you want to start programming in Lisp.\"- Andy\nHertzfeld, co-creator of the Macintosh\"Paul Graham, like nobody else, tells us what it means to be a hacker.\"\n- Matthias Felleisen,\nNortheastern University\"Since programmers create programs out of nothing, imagination is our only limitation. Thus, in the world of programming, the hero is the one who has great vision. Paul Graham is one of our contemporary heroes. He has the ability to embrace the vision, and to express it plainly. His works are my favorites, especially the ones describing language design. He explains secrets of programming, languages, and human nature that can only be learned from the hacker experience. This book shows you his great vision, and tells you the truth about the nature of hacking.\"- Yukihiro \"Matz\" Matsumoto,\ncreator of Ruby\"So wonderful that its biggest problem is its title....\nHow to Think Like a Computer Millionaire would, I suspect,\nbe a more popular title. It would certainly be apt.\"- Aaron Swartz\"Paul Graham tells it like it is, like it was, and like it will be. I\nlearned much from reading Hackers & Painters. This high-tech\nguru's essays are a joy to read in content, style, and wit. His insider\nview of the entire process of a startup is rivetting, and his guide on\nhow to do it should be required for all high-tech gamblers.\"- Daniel P. Friedman,\nIndiana University\"A wonderful book and required reading. Paul helps others understand why\nI chose the name 'Software Arts' for the company Dan Bricklin and I started.\nThose who don't understand the language of software cannot consider\nthemselves literate.\"- Bob Frankston, co-founder, Software Arts\n\"As an introductory programming instructor, I'm\nalways on the lookout for inspiring works to give to students. A high schooler,\ncollege freshman, or any motivated lay person, can read\nHackers & Painters\nand find out what, spiritually, designing and building great programs is all about. Highly recommended.\"- Brian M. Dennis, Northwestern University\"The language of programmers is rich in references to art and industrial\ndesign. Paul Graham, whose training and experience spans these areas,\noffers an illuminating tour of this relationship in essays peppered\nwith trenchant observation, humor, and art (some\nvisual, some parenthetical).\"\n- Shriram Krishnamurthi,\nBrown University\"Hackers and Painters e scritto da una persona che ha incarnato lo spirito hacker fin dalla sua giovane eta.\"- Neural.it Review"},{"title":"Hackers and Painters","text":"May 2003(This essay is derived from a guest lecture at Harvard, which incorporated\nan earlier talk at Northeastern.)When I finished grad school in computer science I went\nto art school to study painting.  A lot of people seemed surprised\nthat someone interested in computers would also be interested in painting.\nThey seemed to think that\nhacking and painting were very different kinds of work-- that\nhacking was cold, precise, and methodical, and that\npainting was the frenzied expression of some primal urge.Both of these images are wrong.  Hacking and painting have a\nlot in common.  In fact, of all the different types of people I've\nknown, hackers and painters are among the most alike.What hackers and painters have in common is that they're\nboth makers.  Along with composers, architects, and writers,\nwhat hackers and painters are trying to do is make good things.\nThey're not doing research per se, though if in the course of\ntrying to make good things they discover some new technique,\nso much the better.I've never liked the term \"computer science.\"  The main\nreason I don't like it is that there's no such thing.\nComputer science is a\ngrab bag of tenuously related areas thrown together\nby an accident of history, like Yugoslavia.\nAt one end you have people who are really mathematicians,\nbut call what they're doing computer science so they can get DARPA grants.\nIn the middle you have people working on\nsomething like the natural history of computers-- studying the\nbehavior of algorithms for routing data through\nnetworks, for example.  And then at the other extreme you\nhave the hackers, who are trying to\nwrite interesting software, and for whom computers are just a\nmedium of expression, as concrete is for architects or\npaint for painters.  It's as if\nmathematicians, physicists, and architects all had to be in\nthe same department.Sometimes what the hackers do is called \"software engineering,\"\nbut this term is just as misleading.\nGood software designers are no more engineers than architects are.\nThe border between architecture and engineering is not sharply\ndefined, but it's there.\nIt falls between what and how: architects decide what to do,\nand engineers figure out how to do it.What and how should not be kept too separate.  You're\nasking for trouble if you try to decide what to do without\nunderstanding how to do it.\nBut hacking can certainly be more than just deciding how to\nimplement some spec.  At its best, it's creating the spec-- though\nit turns out the best way to do that is to implement it.Perhaps one day\n\"computer science\" will, like Yugoslavia, get broken up into its\ncomponent parts.  That might be a good thing.  Especially if it\nmeant independence for my native land, hacking.Bundling all these different types of work together in one\ndepartment may be convenient administratively, but it's confusing\nintellectually. That's the other reason I don't like the name\n\"computer science.\"  Arguably the people in the middle are doing\nsomething like an experimental science.  But the people at either\nend, the hackers and the mathematicians, are not actually doing science.The mathematicians don't seem bothered by this.  They happily\nset to work proving theorems like the other mathematicians\nover in the math department, and probably soon stop noticing\nthat the building they work in says ``computer science'' on the\noutside.  But for the hackers this label is a problem.\nIf what they're doing is called science, it makes them feel they\nought to be acting scientific.\nSo instead of doing what they really want to do, which is\nto design beautiful software, hackers in universities and\nresearch labs feel they ought to be writing research papers.In the best case, the papers are just a formality.  Hackers write\ncool software, and then write a paper about it, and the paper\nbecomes a proxy for the achievement represented by the software.\nBut often this mismatch causes problems.  It's easy to\ndrift away from building beautiful things toward building ugly\nthings that make more suitable subjects for research papers.Unfortunately, beautiful things don't always make the\nbest subjects for papers.\nNumber one, research must be original-- and\nas anyone who has written a PhD dissertation knows, the way to\nbe sure that you're exploring virgin territory is to to stake\nout a piece of ground that no one wants.  Number two, research must be\nsubstantial-- and awkward systems yield meatier papers,\nbecause you can write about the obstacles you have to overcome\nin order to get things done.  Nothing yields meaty problems like\nstarting with the wrong assumptions.  Most of AI is an example\nof this rule; if you assume that knowledge can be represented\nas a list of predicate logic expressions whose arguments represent\nabstract concepts, you'll have a lot of\npapers to write about how to make this work.  As Ricky Ricardo\nused to say, \"Lucy, you got a lot of explaining to do.\"The way to create something beautiful is often to make subtle\ntweaks to something that already exists, or to combine existing\nideas in a slightly new way.  This kind of work is hard to\nconvey in a research paper.So why do universities and research labs continue to judge\nhackers by publications?\nFor the same reason that \"scholastic aptitude\"\ngets measured by simple-minded standardized tests, or\nthe productivity of programmers gets measured in lines of code.\nThese tests\nare easy to apply, and there is nothing so tempting as an easy test\nthat kind of works.Measuring what hackers are actually trying to do, designing\nbeautiful software, would be much more difficult.  You need\na good sense of design to judge\ngood design.  And\nthere is no correlation, except possibly\na negative\none, between people's ability to recognize good\ndesign and their confidence that they can.The only external test is time.  Over time, beautiful\nthings tend to thrive, and ugly\nthings tend to get discarded.  Unfortunately, the amounts of time\ninvolved can be longer than human lifetimes.  Samuel Johnson\nsaid it took a hundred years for a writer's reputation to\nconverge.  You have to wait for the writer's\ninfluential friends to die, and then for all their followers\nto die.I think hackers just have to resign themselves to having a large random\ncomponent in their reputations.  In this they are no different\nfrom other makers.  In fact, they're lucky by comparison.\nThe influence of fashion is not nearly so great in hacking as it\nis in painting.There are worse things than having people misunderstand your\nwork.  A worse danger is that you\nwill yourself misunderstand your work.  Related fields are\nwhere you go looking for ideas.  If you find yourself in the computer science\ndepartment, there is a natural temptation to believe, for example,\nthat hacking is the applied version of what theoretical computer\nscience is the theory of.   All\nthe time I was in graduate school I had an uncomfortable feeling\nin the back of my mind that I ought to know more theory,\nand that it was very remiss of me to have forgotten all that\nstuff within three weeks of the final exam.Now I realize I was\nmistaken.  Hackers need to understand the theory of computation\nabout as much as painters need to understand paint chemistry.\nYou need to know how to calculate time and\nspace complexity and about\nTuring completeness.  You might also want to remember at\nleast the concept of a state machine, in case you have to write\na parser or a regular expression library.  Painters in fact\nhave to remember a good deal more about paint chemistry than\nthat.I've found that the best sources of ideas\nare not the other fields that have the word \"computer\" in\ntheir names, but the other fields inhabited by makers.\nPainting has been a much richer source of ideas than the\ntheory of computation.For example, I was taught in college\nthat one ought to figure out a program\ncompletely on paper\nbefore even going near a computer.  I found that I did not\nprogram this way.  I found that I liked to program\nsitting in front of a computer, not a piece of paper.  Worse\nstill, instead of patiently writing out a complete program\nand assuring myself it was correct, I tended to just spew\nout code that was hopelessly broken, and gradually beat it into\nshape.  Debugging, I was taught, was a kind of final pass where\nyou caught typos and oversights.  The way I worked, it\nseemed like programming consisted of debugging.For a long time I felt bad about this, just as I once\nfelt bad that I didn't hold my pencil the way they taught me\nto in elementary school.\nIf I had only looked over at\nthe other makers, the painters or the architects, I would\nhave realized that there was a name for what I was doing:\nsketching.  As far as I can tell, the\nway they taught me to program in college was all wrong.\nYou should figure out programs as you're writing them,\njust as writers and painters and architects do.Realizing this has real implications for software design.\nIt means that a programming language should, above all, be\nmalleable.  A programming language is for\nthinking of\nprograms, not for expressing programs you've already thought\nof.  It should be a pencil, not a pen.  Static typing would\nbe a fine idea if people actually did write programs the way\nthey taught me to in college.  But that's not how any of the\nhackers I know write programs.  We need a language that lets us\nscribble and smudge and smear, not a language where you have\nto sit with a teacup of types balanced on your knee and make\npolite conversation with a strict old aunt of a compiler.While we're on the subject of static typing, identifying with\nthe makers will save us from another problem that afflicts\nthe sciences: math envy.  Everyone in the sciences\nsecretly believes that mathematicians are smarter than they are.\nI think mathematicians also believe this.  At any rate,\nthe result is that scientists tend to make their\nwork look as mathematical as possible.  In a field like\nphysics this probably doesn't do much harm, but the further you\nget from the natural sciences, the more of a problem it\nbecomes.A page of formulas just looks so impressive.\n(Tip: for extra impressiveness, use Greek variables.)  And\nso there is a great temptation to work on problems you\ncan treat formally, rather than problems that are, say,\nimportant.If hackers identified with other makers, like writers and\npainters, they wouldn't feel tempted to do\nthis.  Writers and painters don't suffer from math envy.\nThey feel as if they're doing something completely unrelated.\nSo are hackers, I think.If universities and research labs keep hackers from doing\nthe kind of work they want to do,\nperhaps the place for them is in companies.\nUnfortunately, most companies won't let hackers do what they\nwant either.  Universities and research labs force hackers\nto be scientists, and companies force them to be engineers.I only discovered this myself quite recently.  When Yahoo bought\nViaweb, they asked me what I wanted to do.  I had never\nliked the business side very much, and said that I just wanted to\nhack.  When I got to Yahoo, I found that what hacking meant\nto them was implementing software, not designing it.  Programmers\nwere seen as technicians who translated the visions (if\nthat is the word) of product managers into code.This seems to be the\ndefault plan in big companies.  They do it because\nit decreases the standard deviation of the outcome.\nOnly a small percentage of hackers can actually design software,\nand it's hard for the\npeople running a company to pick these out.  So instead of\nentrusting the future of the software to\none brilliant hacker, most companies set things up so that it is\ndesigned by committee, and the hackers merely\nimplement the design.If you want to make money at some point, remember this,\nbecause this is one of the reasons startups win.  Big companies want\nto decrease the standard deviation of design outcomes because they\nwant to avoid disasters.  But when you damp oscillations, you\nlose the high points as well as the low.  This is not a problem for\nbig companies, because they don't win by making great\nproducts.  Big companies win by sucking less than other big companies.So if you can figure out a way to get in a\ndesign war with a company big enough that its software is\ndesigned by product managers, they'll never be able to keep up\nwith you.  These opportunities are not easy to find, though.\nIt's hard to engage a big company in a design war,\njust as it's hard to engage an opponent inside a castle in hand\nto hand combat.  It would be pretty easy to write a better\nword processor than Microsoft Word, for example, but Microsoft,\nwithin the castle of their operating system monopoly,\nprobably wouldn't even notice if you did.The place to fight design wars is in new markets, where no one\nhas yet managed to establish any fortifications.  That's where\nyou can win big by taking the bold approach to design, and\nhaving the same people both design and implement the product.\nMicrosoft themselves did this at the start.  So did Apple.\nAnd Hewlett-Packard.  I suspect almost every successful startup\nhas.So one way to build great software is to start your own\nstartup.  There are two problems with this, though.  One is\nthat in a startup you have to do so much besides write software.\nAt Viaweb I considered myself lucky if I\ngot to hack a quarter of the time.  And the things I had to\ndo the other three quarters of the time ranged from tedious\nto terrifying.  I have a benchmark for this, because I\nonce had to leave a board meeting to have\nsome cavities filled.  I remember sitting back in the\ndentist's chair, waiting for the drill, and feeling like\nI was on vacation.The other problem with startups is that there is not much\noverlap between the kind of software that makes money and the\nkind that's interesting to write.  Programming languages\nare interesting to write, and Microsoft's first product was\none, in fact, but no one will pay for programming languages\nnow.  If you want to make money, you tend to be forced to work\non problems that are too nasty for anyone to solve for free.All makers face this problem.  Prices are\ndetermined by supply and demand, and there is just not as much\ndemand for things that are fun to work on as there is for\nthings that solve the mundane problems of individual customers.\nActing in off-Broadway plays just doesn't pay as well as\nwearing a gorilla suit in someone's booth at a\ntrade show.  Writing novels doesn't pay as well as writing\nad copy for garbage disposals.\nAnd hacking programming languages doesn't pay as well\nas figuring out how to connect some company's\nlegacy database to their Web server.I think the answer to this problem, in the case of software,\nis a concept known to nearly all makers: the day job.\nThis phrase began with musicians, who\nperform at night.  More generally, it means that you have one\nkind of work you do for money, and another for love.Nearly all makers have day jobs early in their careers.\nPainters and writers notoriously do.  If you're lucky\nyou can get a day job that's closely\nrelated to your real work.  Musicians often\nseem to work in record stores.  A hacker working on some\nprogramming language or operating system might likewise be able to\nget a day job using it.  [1]When I say that the answer is for hackers to have day jobs,\nand work on beautiful software on the side, I'm not proposing\nthis as a new idea.  This is what open-source hacking is all\nabout.  What I'm saying is that open-source is probably the right\nmodel, because it has been independently confirmed by all the\nother makers.It seems surprising to me that any employer would be reluctant\nto let hackers work on open-source projects.\nAt Viaweb, we would have been reluctant to hire anyone\nwho didn't.  When we interviewed\nprogrammers, the main\nthing we cared about was what kind of software they\nwrote in their spare time.\nYou can't do anything really well unless\nyou love it, and if you love to hack you'll inevitably\nbe working on projects of your own. [2]Because hackers are makers rather than scientists,\nthe right place to look for metaphors is not in the\nsciences, but among other kinds of makers.  What else can painting\nteach us about hacking?One thing we can learn, or at least confirm, from the\nexample of painting is how to learn to hack.  You learn to\npaint mostly by doing it.\nDitto for hacking.  Most hackers don't learn to hack by\ntaking college courses in programming.  They learn to hack\nby writing programs of their own at age thirteen.  Even in\ncollege classes, you learn to hack mostly by hacking. [3]Because painters leave a trail of work behind them, you\ncan watch them learn by doing.  If you look at the work\nof a painter in chronological order, you'll find that each\npainting builds on things that have been learned in previous\nones.  When there's something in\na painting that works very well, you can usually find version\n1 of it in a smaller form in some earlier painting.I think most makers work this way.  Writers and architects seem\nto as well.  Maybe it would be good for hackers\nto act more like painters, and regularly start over from scratch,\ninstead of continuing to work for years on one project, and\ntrying to incorporate all their later ideas as revisions.The fact that hackers learn to hack by doing it is another\nsign of how different hacking is from the sciences.  Scientists\ndon't learn science by doing it, but by doing labs and problem sets.\nScientists start out doing work that's perfect, in the sense\nthat they're just trying to reproduce work someone else has\nalready done for them.\nEventually, they get\nto the point where they can do original work.\nWhereas hackers, from the start, are doing original work; it's\njust very bad.  So hackers start original, and get good, and\nscientists start good, and get original.The other way makers learn is from examples.\nFor a painter, a museum is a reference library of techniques.\nFor hundreds of years it has been part of the traditional\neducation of painters to copy the works of the great masters,\nbecause copying forces you to look closely\nat the way a painting is made.Writers do this too.\nBenjamin Franklin learned to write by summarizing the points\nin the essays of Addison and Steele and then trying to\nreproduce them.  Raymond Chandler did the same thing\nwith detective stories.Hackers, likewise, can learn to program by looking at\ngood programs-- not just at what they do, but the source\ncode too.  One of the less publicized benefits\nof the open-source movement is that it has made it easier\nto learn to program.  When I learned to program, we had to rely\nmostly on examples in books.  The one big chunk of\ncode available then was Unix, but even this was not\nopen source.  Most of the people who read the source\nread it in illicit photocopies of John Lions' book, which\nthough written in 1977 was not allowed to be published\nuntil 1996.Another example we can take from painting is the way that\npaintings are created by gradual refinement.  Paintings usually\nbegin with a sketch.\nGradually the details get filled in.\nBut it is not merely a process of filling in. Sometimes\nthe original plans turn out to be mistaken.\nCountless paintings,\nwhen you look at them in xrays, turn out to have limbs that\nhave been moved or facial features that have been readjusted.Here's a case where we can learn from painting.  I think hacking\nshould work this way too.  It's unrealistic\nto expect that the specifications for a program will be\nperfect. You're\nbetter off if you admit this up front, and write programs in\na way that allows specifications to change on the fly.(The structure of large companies makes this hard for them\nto do, so here is another place where startups have an advantage.)Everyone by now presumably knows about the danger of premature\noptimization.  I think we should be just as worried about\npremature design-- deciding too early what\na program should do.The right tools can help us avoid\nthis danger.\nA good programming language should, like oil paint, make it\neasy to change your mind.  Dynamic typing is a win here because\nyou don't have to\ncommit to specific data representations up front.\nBut the key to flexibility, I think, is to make the language\nvery abstract.\nThe easiest program to change is one that's very short.This sounds like a paradox, but a great painting\nhas to be better than it has to be.\nFor example, when Leonardo\npainted the portrait of Ginevra de Benci\nin the National Gallery, he put a juniper bush behind her head.\nIn it he carefully\npainted each individual leaf.  Many painters might have thought,\nthis is just something to put in the background to frame\nher head.  No one will look that closely at it.Not Leonardo.  How hard he worked on part of a painting didn't\ndepend at all on how closely he expected anyone to look at it.\nHe was like Michael Jordan.  Relentless.Relentlessness wins because, in the aggregate, unseen details\nbecome visible.\nWhen people walk by the portrait of Ginevra de Benci,\ntheir attention is often immediately arrested by it,\neven before they look at the label and notice that it says\nLeonardo da Vinci.  All those unseen details combine to produce\nsomething that's just stunning, like a thousand barely audible\nvoices all singing in tune.Great software, likewise, requires a fanatical devotion to\nbeauty.  If you look inside good software, you find that\nparts no one is ever supposed to see are beautiful too.\nI'm not claiming I write great software, but I\nknow that when it comes to code I behave in a way that would\nmake me eligible for prescription drugs if I approached everyday\nlife the same way.\nIt drives me crazy to see code that's badly indented,\nor that uses ugly variable names.If a hacker were a mere implementor, turning a spec into code, then\nhe could just work his way through it from one end to the other like\nsomeone digging a ditch.  But if the hacker is a creator, we have\nto take inspiration into account.In hacking, like painting,\nwork comes in cycles.  Sometimes you get excited about some\nnew project and you want to work sixteen hours a day on it.\nOther times nothing seems interesting.To do good work you have to take these cycles into\naccount, because they're affected by how you react to them.\nWhen you're driving a\ncar with a manual transmission on a hill, you have to back off\nthe clutch sometimes to avoid stalling.  Backing\noff can likewise prevent ambition from stalling.\nIn both painting and hacking there are some\ntasks that are terrifyingly ambitious, and others that are\ncomfortingly routine.  It's a good idea to save some easy\ntasks for moments when you would otherwise stall.In hacking, this can literally mean saving up bugs.\nI like debugging: it's the\none time that hacking is as straightforward as\npeople think it is.  You have a\ntotally constrained problem, and all you have to do is solve\nit.  Your program is supposed to do x.  Instead it does y.\nWhere does it go wrong? You know you're going to win\nin the end.  It's as relaxing as painting a wall.The example of painting can teach us not only how to manage our\nown work, but how to work together.  A lot of the\ngreat art of the past is the work of multiple hands, though\nthere may only be one name on the wall next to it in the\nmuseum.  Leonardo was an apprentice in the workshop of\nVerrocchio and painted one of the angels in his Baptism of\nChrist.  This sort of thing was the rule, not the exception.\nMichelangelo was considered especially dedicated for insisting\non painting all the figures on the ceiling of the Sistine\nChapel himself.As far as I know, when painters worked together on a painting,\nthey never worked on the same parts.  It was common\nfor the master to paint the principal figures and for assistants\nto paint the others and the background.  But you never had\none guy painting over the work of another.I think this is the right model for collaboration in software\ntoo.  Don't push it too far.  When a piece of code is\nbeing hacked by three or four different people, no one of whom\nreally owns it, it will end up being like a common-room.  It will\ntend to feel bleak and abandoned, and accumulate cruft.\nThe right\nway to collaborate, I think, is to divide projects into sharply\ndefined modules, each with a definite owner, and with interfaces\nbetween them that are as carefully designed and, if possible,\nas articulated as programming languages.Like painting, most software is intended for\na human audience.  And so hackers, like painters, must have\nempathy to do really great work.  You have to be able to see\nthings from the user's point of view.When I was a kid I was always being told to look at things from\nsomeone else's point of view.  What this always meant in\npractice was to do what someone else wanted, instead of what\nI wanted.  This of course gave empathy a bad name, and I made a\npoint of not cultivating it.Boy, was I wrong.  It turns out that looking at things from\nother people's point of view is practically the secret of\nsuccess.  It doesn't necessarily mean being self-sacrificing.\nFar from it.  Understanding how someone else sees things\ndoesn't imply that you'll act in his interest; in some\nsituations-- in war, for example-- you want to do exactly\nthe opposite. [4]Most makers make things for a human audience.\nAnd to engage an audience you have to understand what they need.\nNearly all the greatest paintings are paintings of people,\nfor example, because people are what people are interested in.Empathy is probably the single most important difference\nbetween a good hacker and a great one.  Some hackers\nare quite smart, but when it comes to empathy are\npractically solipsists.  It's hard for such\npeople to design great software [5], because they can't\nsee things from the user's point of view.One way to tell how good people are at empathy is to watch\nthem explain a technical question to someone without a technical\nbackground.  We probably all know people who, though otherwise smart,\nare just comically bad at this.  If someone asks them at\na dinner party what a programming language is, they'll\nsay something like ``Oh, a high-level language is what\nthe compiler uses as input to generate object code.''\nHigh-level language?  Compiler?  Object code?  Someone who\ndoesn't know what a programming language is obviously doesn't\nknow what these things are, either.Part of what software has to do is explain itself.  So to\nwrite good software you have to understand how little users\nunderstand.\nThey're going to walk up to the software with no preparation, and\nit had better do what they guess it will, because they're\nnot going to read the manual.  The best system I've ever seen\nin this respect was the original Macintosh, in 1985.\nIt did what software almost never does: it just worked. [6]Source code, too, should explain itself.  If I could get people to\nremember just one quote about programming, it would be the\none at the beginning of Structure and Interpretation of Computer\nPrograms.\nPrograms should be written for people to read, and\nonly incidentally for machines to execute.\nYou need to have\nempathy not just for your users, but for your readers.  It's in\nyour interest, because you'll be one of them.\nMany a hacker has written a program only to\nfind on returning to it six months later that he has no idea\nhow it works.  I know several people who've sworn off Perl after\nsuch experiences. [7]Lack of empathy is associated with intelligence, to the point\nthat there is even something of a fashion for it in some places.\nBut I don't think there's any correlation.\nYou can do well in math and\nthe natural sciences without having to learn empathy, and people in these\nfields tend to be smart, so the two qualities have come to be\nassociated.  But there are plenty of dumb people who are bad at\nempathy too.  Just listen to the people who call in with questions on\ntalk shows.  They ask whatever it is they're asking in\nsuch a roundabout way\nthat the hosts often have to rephrase the question for them.So, if hacking works like painting and writing, is it as cool?\nAfter all, you only get one life.\nYou might as well spend it working on something great.Unfortunately, the question is hard to answer.  There is always\na big time lag in prestige.  It's like light from a distant star.\nPainting has prestige now because of great work people did five hundred\nyears ago.  At the time, no one thought\nthese paintings were as important as we do today.  It would have\nseemed very odd to people at the time that Federico da Montefeltro,\nthe Duke of Urbino, would one day be known mostly as the guy\nwith the strange nose in a painting\nby Piero della Francesca.So while I admit that hacking doesn't seem as cool as painting now,\nwe should remember that painting itself didn't seem as cool in\nits glory days as it does now.What we can say with some confidence is that these are the glory\ndays of hacking.  In most fields the great work is done early on.\nThe paintings made between 1430 and 1500 are still unsurpassed.\nShakespeare appeared just as professional theater was being born,\nand pushed the medium\nso far that every playwright since has had to live in his shadow.\nAlbrecht Durer did the same thing with engraving, and Jane Austen\nwith the novel.Over and over we see the same pattern.  A new medium appears, and\npeople are so excited about it that they explore most of its\npossibilities in the first couple generations.   Hacking seems\nto be in this phase now.Painting was not, in Leonardo's time, as cool as his work\nhelped make it.\nHow cool hacking turns out to be will depend on what we can\ndo with this new medium.\nNotes[1] The greatest damage that photography has done\nto painting may be the fact that it killed the best day job.\nMost of the great painters in history supported\nthemselves by painting portraits.  [2] I've been told that Microsoft discourages\nemployees from contributing to open-source projects, even in\ntheir spare time.\nBut so many of the best hackers work on open-source\nprojects now that the main effect of this policy may be\nto ensure that they won't be able to hire any first-rate\nprogrammers.[3] What you learn about programming in college is much like\nwhat you learn about books or clothes or dating: what bad taste you\nhad in high school.[4] Here's an example of applied empathy.\nAt Viaweb, if we couldn't decide between two alternatives, we'd\nask, what would our competitors hate most?  At one point a\ncompetitor added a feature to their software that was basically\nuseless, but since it was one of few they had that we didn't, they\nmade much of it in the trade press.\nWe could have tried to explain that the feature was useless,\nbut we decided it would annoy our competitor more if we\njust implemented it ourselves, so we hacked together our own\nversion that afternoon.[5] Except text editors and compilers.  Hackers don't need empathy to\ndesign these, because they are themselves typical users.[6] Well, almost.  They overshot the available RAM somewhat,\ncausing much inconvenient disk swapping, but this could be fixed\nwithin a few months by buying an additional disk drive.[7] The way to make programs easy to read is not to\nstuff them with comments. I would take Abelson and Sussman's\nquote a step further.  Programming languages should be designed\nto express algorithms, and only incidentally to tell computers\nhow to execute them.  A good programming language\nought to be better for explaining software than English.\nYou should only\nneed comments when there is some kind of kludge you need to warn\nreaders about, just as on a road there are only\narrows on parts with unexpectedly sharp curves.\nThanks to Trevor Blackwell, Robert Morris, Dan Giffin, and Lisa\nRandall for reading drafts of this, and to Henry Leitner\nand Larry Finkelstein for inviting me to speak."},{"title":"Harj Taggar: We'll Be Circling Back","text":"I sent the YC partners an email saying I was growing increasingly\nimpressed with one of the startups in the current batch and asking what\nthey thought of them, and Harj Taggar replied with this brilliant piece of\nVC boilerplate.\nFrom: Harj TaggarTo: Paul Graham\nHi Paul,\nThanks for your note and sending ⟨startup⟩ our way,\nwe really appreciate it and always enjoy meeting with YC founders.\nKeep 'em coming!\nWe loved ⟨founder⟩ and are impressed by both his\nbackground and the progress he has made thus far. It's exciting to\nsee entrepreneurs tackling \"real-world\" problems in important areas,\nwhich aligns well with our investment thesis.\nHowever it's currently a little early for us to step in here. We'd\nlike to see ⟨founder⟩ show a few more proof points\nand validate a couple of the core assumptions underlying the business.\nWe've offered to introduce him to a few value-add partners, within\nour network, who we think could really help him work through and\nshape some of the strategic issues he'll face in the coming months.\nWe plan on keeping in close touch and will be circling back once\nhe's at a more appropriate stage for investment.\nOn a separate note, I feel like we could be doing more to help YC\ncompanies. We're in awe of what you've built over there at the Y\nand we'd love to grab a coffee and talk more about how we could be\nhelpful to both the companies and you.\nBest,"},{"title":"Help Us","text":"We often get mail saying: you should take a look at\nLanguage X; it has some really cool features.We're ready to embrace\n(and extend) any great new ideas that are out there, but there\nare just too many languages for us to learn them all.That's where you can help.  If some other language has\na core language feature that impresses you, make a post\ndescribing it on the Arc\nForum, along with, if applicable, the presumably\nkludgier code you'd have to write in Arc to do the same thing."},{"title":"High Resolution Fundraising","text":"September 2010The reason startups have been using\nmore convertible notes in angel\nrounds is that they make deals close faster.  By making it easier\nfor startups to give different prices to different investors, they\nhelp them break the sort of deadlock that happens when investors\nall wait to see who else is going to invest.By far the biggest influence on investors' opinions of a startup\nis the opinion of other investors.  There are very, very few who\nsimply decide for themselves.  Any startup founder can tell you the\nmost common question they hear from investors is not about the\nfounders or the product, but \"who else is investing?\"That tends to produce deadlocks.  Raising an old-fashioned\nfixed-size equity round can take weeks, because all the angels sit around\nwaiting for the others to commit, like competitors in a bicycle\nsprint who deliberately ride slowly at the start so they can follow\nwhoever breaks first.Convertible notes let startups beat such deadlocks by rewarding\ninvestors willing to move first with lower (effective) valuations.\nWhich they deserve because they're taking more risk.  It's much\nsafer to invest in a startup Ron Conway has already invested in;\nsomeone who comes after him should pay a higher price.The reason convertible notes allow more flexibility in price is\nthat valuation caps aren't actual valuations, and notes are cheap\nand easy to do.  So you can do high-resolution fundraising: if you\nwanted you could have a separate note with a different cap for each\ninvestor.That cap need not simply rise monotonically.  A startup could\nalso give better deals to investors they expected to help\nthem most.  The point is simply that different investors,\nwhether because of the help they offer or their willingness to\ncommit, have different values for\nstartups, and their terms should reflect that.Different terms for different investors is\nclearly the way of the future.  Markets always evolve toward higher\nresolution.  You may not need to use convertible notes to do it.\nWith sufficiently lightweight standardized equity terms (and some\nchanges in investors' and lawyers' expectations about equity rounds)\nyou might be able to do the same thing with equity instead of debt.\nEither would be fine with startups, so long as they can easily\nchange their valuation.Deadlocks weren't the only problem with fixed-size equity rounds.\nAnother was that startups had to decide in advance how much to\nraise.  I think it's a mistake for a startup to fix upon a specific\nnumber. If investors are easily convinced, the startup should raise more\nnow, and if investors are skeptical, the startup should take a\nsmaller amount and use that to get the company to the point where\nit's more convincing.It's just not reasonable to expect startups to pick an optimal round\nsize in advance, because that depends on the reactions of investors,\nand those are impossible to predict.Fixed-size, multi-investor angel rounds are such a bad idea for\nstartups that one wonders why things were ever done that way.  One\npossibility is that this custom reflects the way investors like to\ncollude when they can get away with it.  But I think the actual\nexplanation is less sinister.  I think angels (and their lawyers)\norganized rounds this way in unthinking imitation of VC series A\nrounds.  In a series A, a fixed-size equity round with a lead makes\nsense, because there is usually just one big investor, who is\nunequivocally the lead.  Fixed-size series A rounds already are\nhigh res.  But the more investors you have in a round, the less\nsense it makes for everyone to get the same price.The most interesting question here may be what high res fundraising\nwill do to the world of investors.  Bolder investors will now get\nrewarded with lower prices.  But more important, in a\nhits-driven business, is that they'll be able to get into the deals\nthey want.  Whereas the \"who else is investing?\" type of investors\nwill not only pay higher prices, but may not be able to get into\nthe best deals at all.Thanks to Immad Akhund, Sam Altman, John Bautista, Pete Koomen,\nJessica Livingston, Dan Siroker, Harj Taggar, and\nFred Wilson for reading drafts of this."},{"title":"Hijacking is Buffer Overflow","text":"September 2001If you want to defend against hijackings, the problem you're trying to\nsolve is one that programmers know well: the buffer overflow\nattack.In a buffer overflow attack, someone gives a program much\nmore data than it was expecting.  The data is too long\nfor the memory allocated for it and overflows\ninto the memory occupied by the program itself.\nSuddenly the computer is running the attacker's code.In a hijacking, the same thing happens to a plane.  A plane\nhas two separate spaces, one for the people carried on it,\nand one for the people who control it.  A hijacking happens\nwhen passengers overflow into the cockpit from the cabin.\nWhat was cargo is now in control.  By promoting themselves\nfrom data to code, hijackers on September 11th promoted\nbox-cutters into 400,000 lb. incendiary bombs.How do programmers solve the problem?  There are two defenses,\none that works and one that doesn't.The defense that doesn't work is to check the data on the way in,\nto make sure it isn't longer than the memory set aside for it.\nThe problem here is that you might forget to check, or do\nit incorrectly.  And in fact this happens all the time.\nEveryone has known about buffer overflow\nfor at least 15 years, and still software gets written that is\nvulnerable to it.The defense that does work is to keep code and data in\nseparate places.  Then there is no way to compromise code by\nplaying tricks with data.  Garbage-collected languages like\nPerl and Lisp do this, and as a result are immune\nfrom buffer overflow attacks.To programmers, at least, this would suggest that the most\nreliable way to prevent hijackings is to separate the\ncockpit from the cabin.  You still need to watch who gets\non the plane, to prevent people from simply blowing it\nup.  But as long as you keep passengers out of the cockpit\nyou can prevent anyone taking control of the plane.It might be enough\njust to keep the cockpit door locked, and make it strong\nenough that to get through it you'd need something harder\nto smuggle onboard a plane than a box-cutter.I'm sure the government is working on the problem.  I just\nhope they understand as well as we do that it is never\nenough just to check what comes in."},{"title":"Hiring is Obsolete","text":"May 2005(This essay is derived from a talk at the Berkeley CSUA.)The three big powers on the Internet now are Yahoo, Google, and\nMicrosoft.  Average age of their founders: 24.  So it is pretty\nwell established now that grad students can start successful\ncompanies.  And if grad students can do it, why not undergrads?Like everything else in technology, the cost of starting a startup\nhas decreased dramatically.  Now it's so low that it has disappeared\ninto the noise. The main cost of starting a Web-based\nstartup is food and rent.  Which means it doesn't cost much more\nto start a company than to be a total slacker.  You can probably\nstart a startup on ten thousand dollars of seed funding, if you're\nprepared to live on ramen.The less it costs to start a company, the less you need the permission\nof investors to do it.  So a lot of people will be able to start\ncompanies now who never could have before.The most interesting subset may be those in their early twenties.\nI'm not so excited about founders who have everything investors\nwant except intelligence, or everything except energy.  The most\npromising group to be liberated by the new, lower threshold are\nthose who have everything investors want except experience.Market RateI once claimed that nerds were unpopular\nin secondary school mainly because they had better things to do\nthan work full-time at being popular.  Some said I was just telling\npeople what they wanted to hear.  Well, I'm now about to do that\nin a spectacular way: I think undergraduates are undervalued.Or more precisely, I think few realize the huge\nspread in the value of 20 year olds.  Some, it's true, are not very\ncapable.  But others are more capable than all but a handful of 30\nyear olds. [1]Till now the problem has always been that it's difficult to pick\nthem out.  Every VC in the world, if they could go back in time,\nwould try to invest in Microsoft.  But which would have then?  How\nmany would have understood that this particular 19 year old was\nBill Gates?It's hard to judge the young because (a) they change rapidly, (b)\nthere is great variation between them, and (c) they're individually\ninconsistent.  That last one is a big problem.  When you're young,\nyou occasionally say and do stupid things even when you're smart.\nSo if the algorithm is to filter out people who say stupid things,\nas many investors and employers unconsciously do, you're going to\nget a lot of false positives.Most organizations who hire people right out of college are only\naware of the average value of 22 year olds, which is not that high.\nAnd so the idea for most of the twentieth century was that everyone\nhad to begin as a trainee in some\nentry-level job.  Organizations\nrealized there was a lot of variation in the incoming stream, but\ninstead of pursuing this thought they tended to suppress it, in the\nbelief that it was good for even the most promising kids to start\nat the bottom, so they didn't get swelled heads.The most productive young people will always be undervalued\nby large organizations, because the young have no performance to\nmeasure yet, and any error in guessing their ability will tend\ntoward the mean.What's an especially productive 22 year old to do?  One thing you\ncan do is go over the heads of organizations, directly to the users.\nAny company that hires you is, economically, acting as a proxy for\nthe customer.  The rate at which they value you (though they may\nnot consciously realize it) is an attempt to guess your value to\nthe user.  But there's a way to appeal their judgement.  If you\nwant, you can opt to be valued directly by users, by starting your\nown company.The market is a lot more discerning than any employer.  And it is\ncompletely non-discriminatory.  On the Internet, nobody knows you're\na dog.  And more to the point, nobody knows you're 22.  All users\ncare about is whether your site or software gives them what they\nwant.  They don't care if the person behind it is a high school\nkid.If you're really productive, why not make employers pay market rate\nfor you?  Why go work as an ordinary employee for a big\ncompany, when you could start a startup and make them buy it to get\nyou?When most people hear the word \"startup,\" they think of the famous\nones that have gone public.  But most startups that succeed do it\nby getting bought.  And usually the acquirer doesn't just want the\ntechnology, but the people who created it as well.Often big companies buy startups before they're profitable.  Obviously\nin such cases they're not after revenues.  What they want is the\ndevelopment team and the software they've built so far.  When a\nstartup gets bought for 2 or 3 million six months in, it's really\nmore of a hiring bonus than an acquisition.I think this sort of thing will happen more and more, and that it\nwill be better for everyone.  It's obviously better for the people\nwho start the startup, because they get a big chunk of money up\nfront.  But I think it will be better for the acquirers too.  The\ncentral problem in big companies, and the main reason they're so\nmuch less productive than small companies, is the difficulty of\nvaluing each person's work.  Buying larval startups solves that\nproblem for them: the acquirer doesn't pay till the developers have\nproven themselves.  Acquirers are protected on the downside, but\nstill get most of the upside.Product DevelopmentBuying startups also solves another problem afflicting big companies:\nthey can't do product development.  Big companies are good at\nextracting the value from existing products, but bad at creating\nnew ones.Why? It's worth studying this phenomenon in detail, because this\nis the raison d'etre of startups.To start with, most big companies have some kind of turf to protect,\nand this tends to warp their development decisions.  For example,\nWeb-based applications are hot now, but\nwithin Microsoft there must\nbe a lot of ambivalence about them, because the very idea of Web-based\nsoftware threatens the desktop.  So any Web-based application that\nMicrosoft ends up with, will probably, like Hotmail, be something\ndeveloped outside the company.Another reason big companies are bad at developing new products is\nthat the kind of people who do that tend not to have much power in\nbig companies (unless they happen to be the CEO).  Disruptive\ntechnologies are developed by disruptive people.  And they either\ndon't work for the big company, or have been outmaneuvered by yes-men\nand have comparatively little influence.Big companies also lose because they usually only build one of each\nthing.  When you only have one Web browser, you can't do anything\nreally risky with it.  If ten different startups design ten different\nWeb browsers and you take the best, you'll probably get something\nbetter.The more general version of this problem is that there are too many\nnew ideas for companies to explore them all.  There might be 500\nstartups right now who think they're making something Microsoft\nmight buy.  Even Microsoft probably couldn't manage 500 development\nprojects in-house.Big companies also don't pay people the right way.  People developing\na new product at a big company get paid roughly the same whether\nit succeeds or fails.  People at a startup expect to get rich if\nthe product succeeds, and get nothing if it fails. [2]  So naturally\nthe people at the startup work a lot harder.The mere bigness of big companies is an obstacle.  In startups,\ndevelopers are often forced to talk directly to users, whether they\nwant to or not, because there is no one else to do sales and support.\nIt's painful doing sales, but you learn much more from\ntrying to sell people something than reading what\nthey said in focus groups.And then of course, big companies are bad at product development\nbecause they're bad at everything.  Everything happens slower in\nbig companies than small ones, and product development is something\nthat has to happen fast, because you have to go through a lot of\niterations to get something good.TrendI think the trend of big companies buying startups will only\naccelerate.  One of the biggest remaining obstacles is pride.  Most\ncompanies, at least unconsciously, feel they ought to be able to\ndevelop stuff in house, and that buying startups is to some degree\nan admission of failure.  And so, as people generally do with\nadmissions of failure, they put it off for as long as possible.\nThat makes the acquisition very expensive when it finally happens.What companies should do is go out and discover startups when they're\nyoung, before VCs have puffed them up into something that costs\nhundreds of millions to acquire.  Much of what VCs add, the acquirer\ndoesn't need anyway.Why don't acquirers try to predict the companies they're going to\nhave to buy for hundreds of millions, and grab them early for a\ntenth or a twentieth of that?  Because they can't predict the winners\nin advance?  If they're only paying a twentieth as much, they only\nhave to predict a twentieth as well.  Surely they can manage that.I think companies that acquire technology will gradually learn to\ngo after earlier stage startups.  They won't necessarily buy them\noutright.  The solution may be some hybrid of investment and\nacquisition: for example, to buy a chunk of the company and get an\noption to buy the rest later.When companies buy startups, they're effectively fusing recruiting\nand product development.  And I think that's more efficient than\ndoing the two separately, because you always get people who are\nreally committed to what they're working on.Plus this method yields teams of developers who already work well\ntogether.  Any conflicts between them have been ironed out under\nthe very hot iron of running a startup.  By the time the acquirer\ngets them, they're finishing one another's sentences.  That's\nvaluable in software, because so many bugs occur at the boundaries\nbetween different people's code.InvestorsThe increasing cheapness of starting a company doesn't just give\nhackers more power relative to employers.  It also gives them more\npower relative to investors.The conventional wisdom among VCs is that hackers shouldn't be\nallowed to run their own companies.  The founders are supposed to\naccept MBAs as their bosses, and themselves take on some title like\nChief Technical Officer.  There may be cases where this is a good\nidea.  But I think founders will increasingly be able to push back\nin the matter of control, because they just don't need the investors'\nmoney as much as they used to.Startups are a comparatively new phenomenon.  Fairchild Semiconductor\nis considered the first VC-backed startup, and they were founded\nin 1959, less than fifty years ago.  Measured on the time scale of\nsocial change, what we have now is pre-beta.  So we shouldn't assume\nthe way startups work now is the way they have to work.Fairchild needed a lot of money to get started.  They had to build\nactual factories.  What does the first round of venture funding for\na Web-based startup get spent on today?  More money can't get\nsoftware written faster; it isn't needed for facilities, because\nthose can now be quite cheap; all money can really buy you is sales\nand marketing.  A sales force is worth something, I'll admit.  But\nmarketing is increasingly irrelevant.  On the Internet, anything\ngenuinely good will spread by word of mouth.Investors' power comes from money.  When startups need less money,\ninvestors have less power over them.  So future founders may not\nhave to accept new CEOs if they don't want them.  The VCs will have\nto be dragged kicking and screaming down this road, but like many\nthings people have to be dragged kicking and screaming toward, it\nmay actually be good for them.Google is a sign of the way things are going.  As a condition of\nfunding, their investors insisted they hire someone old and experienced\nas CEO.  But from what I've heard the founders didn't just give in\nand take whoever the VCs wanted.  They delayed for an entire year,\nand when they did finally take a CEO, they chose a guy with a PhD\nin computer science.It sounds to me as if the founders are still the most powerful\npeople in the company, and judging by Google's performance, their\nyouth and inexperience doesn't seem to have hurt them.  Indeed, I\nsuspect Google has done better than they would have if the founders\nhad given the VCs what they wanted, when they wanted it, and let\nsome MBA take over as soon as they got their first round of funding.I'm not claiming the business guys installed by VCs have no value.\nCertainly they have.  But they don't need to become the founders'\nbosses, which is what that title CEO means.  I predict that in the\nfuture the executives installed by VCs will increasingly be COOs\nrather than CEOs.  The founders will run engineering directly, and\nthe rest of the company through the COO.The Open CageWith both employers and investors, the balance of power is slowly\nshifting towards the young.  And yet they seem the last to realize\nit.  Only the most ambitious undergrads even consider starting their\nown company when they graduate.  Most just want to get a job.Maybe this is as it should be.  Maybe if the idea of starting a\nstartup is intimidating, you filter out the uncommitted.  But I\nsuspect the filter is set a little too high.  I think there are\npeople who could, if they tried, start successful startups, and who\ninstead let themselves be swept into the intake ducts of big\ncompanies.Have you ever noticed that when animals are let out of cages, they\ndon't always realize at first that the door's open?  Often they\nhave to be poked with a stick to get them out.  Something similar\nhappened with blogs.  People could have been publishing online in\n1995, and yet blogging has only really taken off in the last couple\nyears.  In 1995 we thought only professional writers were entitled\nto publish their ideas, and that anyone else who did was a crank.\nNow publishing online is becoming so popular that everyone wants\nto do it, even print journalists.  But blogging has not taken off\nrecently because of any technical innovation; it just took eight\nyears for everyone to realize the cage was open.I think most undergrads don't realize yet that the economic cage\nis open.  A lot have been told by their parents that the route to\nsuccess is to get a good job.  This was true when their parents\nwere in college, but it's less true now. The route to success is\nto build something valuable, and you don't have to be working for\nan existing company to do that.  Indeed, you can often do it better\nif you're not.When I talk to undergrads, what surprises me most about them is how\nconservative they are.   Not politically, of course.  I mean they\ndon't seem to want to take risks.  This is a mistake, because the\nyounger you are, the more risk you can take.RiskRisk and reward are always proportionate.  For example, stocks are\nriskier than bonds, and over time always have greater returns.  So\nwhy does anyone invest in bonds?  The catch is that phrase \"over\ntime.\"  Stocks will generate greater returns over thirty years, but\nthey might lose value from year to year.  So what you should invest\nin depends on how soon you need the money.  If you're young, you\nshould take the riskiest investments you can find.All this talk about investing may seem very theoretical.  Most\nundergrads probably have more debts than assets.  They may feel\nthey have nothing to invest.  But that's not true: they have their\ntime to invest, and the same rule about risk applies there.  Your\nearly twenties are exactly the time to take insane career risks.The reason risk is always proportionate to reward is that market\nforces make it so.  People will pay extra for stability.  So if you\nchoose stability-- by buying bonds, or by going to work for a big\ncompany-- it's going to cost you.Riskier career moves pay better on average, because there is less\ndemand for them.  Extreme choices like starting a startup are so\nfrightening that most people won't even try.  So you don't end up\nhaving as much competition as you might expect, considering the\nprizes at stake.The math is brutal.  While perhaps 9 out of 10 startups fail, the\none that succeeds will pay the founders more than 10 times what\nthey would have made in an ordinary job. [3]\nThat's the sense in\nwhich startups pay better \"on average.\"Remember that.  If you start a startup, you'll probably fail.  Most\nstartups fail. It's the nature of the business.  But it's not\nnecessarily a mistake to try something that has a 90% chance of\nfailing, if you can afford the risk.  Failing at 40, when you have\na family to support, could be serious.  But if you fail at 22, so\nwhat?  If you try to start a startup right out of college and it\ntanks, you'll end up at 23 broke and a lot smarter.  Which, if you\nthink about it, is roughly what you hope to get from a graduate\nprogram.Even if your startup does tank, you won't harm your prospects with\nemployers.  To make sure I asked some friends who work for big\ncompanies.  I asked managers at Yahoo, Google, Amazon, Cisco and\nMicrosoft how they'd feel about two candidates, both 24, with equal\nability, one who'd tried to start a startup that tanked, and another\nwho'd spent the two years since college working as a developer at\na big company.  Every one responded that they'd prefer the guy who'd\ntried to start his own company.  Zod Nazem, who's in charge of\nengineering at Yahoo, said:\nI actually put more value on the guy with the failed\nstartup.  And you can quote me!\nSo there you have it.  Want to get hired by Yahoo?  Start your own\ncompany.The Man is the CustomerIf even big employers think highly of young hackers who start\ncompanies, why don't more do it?  Why are undergrads so conservative?\nI think it's because they've spent so much time in institutions.The first twenty years of everyone's life consists of being piped\nfrom one institution to another.  You probably didn't have much\nchoice about the secondary schools you went to.  And after high\nschool it was probably understood that you were supposed to go to\ncollege.  You may have had a few different colleges to choose\nbetween, but they were probably pretty similar.  So by this point\nyou've been riding on a subway line for twenty years, and the next\nstop seems to be a job.Actually college is where the line ends.  Superficially, going to\nwork for a company may feel like just the next in a series of\ninstitutions, but underneath, everything is different.  The end of\nschool is the fulcrum of your life, the point where you go from\nnet consumer to net producer.The other big change is that now, you're steering.  You can go\nanywhere you want. So it may be worth standing back and understanding\nwhat's going on, instead of just doing the default thing.All through college, and probably long before that, most undergrads\nhave been thinking about what employers want.  But what really\nmatters is what customers want, because they're the ones who give\nemployers the money to pay you.So instead of thinking about what employers want, you're probably\nbetter off thinking directly about what users want.  To the extent\nthere's any difference between the two, you can even use that to\nyour advantage if you start a company of your own.  For example,\nbig companies like docile conformists.  But this is merely an\nartifact of their bigness, not something customers need.Grad SchoolI didn't consciously realize all this when I was graduating from\ncollege-- partly because I went straight to grad school.  Grad\nschool can be a pretty good deal, even if you think of one day\nstarting a startup.  You can start one when you're done, or even\npull the ripcord part way through, like the founders of Yahoo and\nGoogle.Grad school makes a good launch pad for startups, because you're\ncollected together with a lot of smart people, and you have bigger\nchunks of time to work on your own projects than an undergrad or\ncorporate employee would.  As long as you have a fairly tolerant\nadvisor, you can take your time developing an idea before turning\nit into a company.  David Filo and Jerry Yang started the Yahoo\ndirectory in February 1994 and were getting a million hits a day\nby the fall, but they didn't actually drop out of grad school and\nstart a company till March 1995.You could also try the startup first, and if it doesn't work, then\ngo to grad school.  When startups tank they usually do it fairly\nquickly. Within a year you'll know if you're wasting your time.If it fails, that is.  If it succeeds, you may have to delay grad\nschool a little longer.  But you'll have a much more enjoyable life\nonce there than you would on a regular grad student stipend.ExperienceAnother reason people in their early twenties don't start startups\nis that they feel they don't have enough experience.  Most investors\nfeel the same.I remember hearing a lot of that word \"experience\" when I was in\ncollege.  What do people really mean by it?  Obviously it's not the\nexperience itself that's valuable, but something it changes in your\nbrain.  What's different about your brain after you have \"experience,\"\nand can you make that change happen faster?I now have some data on this, and I can tell you what tends to be\nmissing when people lack experience.  I've said that every\nstartup needs three things: to start with good people,\nto make something users want, and not to spend too much money.  It's\nthe middle one you get wrong when you're inexperienced.  There are\nplenty of undergrads with enough technical skill to write good\nsoftware, and undergrads are not especially prone to waste money.\nIf they get something wrong, it's usually not realizing they have\nto make something people want.This is not exclusively a failing of the young.  It's common for\nstartup founders of all ages to build things no one wants.Fortunately, this flaw should be easy to fix.  If undergrads were\nall bad programmers, the problem would be a lot harder.  It can\ntake years to learn how to program.  But I don't think it takes\nyears to learn how to make things people want.  My hypothesis is\nthat all you have to do is smack hackers on the side of the head\nand tell them: Wake up.  Don't sit here making up a priori theories\nabout what users need.  Go find some users and see what they need.Most successful startups not only do something very specific, but\nsolve a problem people already know they have.The big change that \"experience\" causes in your brain is learning\nthat you need to solve people's problems.  Once you grasp that, you\nadvance quickly to the next step, which is figuring out what those\nproblems are.  And that takes some effort, because the way software\nactually gets used, especially by the people who pay the most for\nit, is not at all what you might expect.  For example, the stated\npurpose of Powerpoint is to present ideas.  Its real role is to\novercome people's fear of public speaking.  It allows you to give\nan impressive-looking talk about nothing, and it causes the audience\nto sit in a dark room looking at slides, instead of a bright one\nlooking at you.This kind of thing is out there for anyone to see.  The key is to\nknow to look for it-- to realize that having an idea for a startup\nis not like having an idea for a class project.  The goal in a\nstartup is not to write a cool piece of software.  It's to make\nsomething people want.  And to do that you have to look at users--\nforget about hacking, and just look at users.  This can be quite a\nmental adjustment, because little if any of the software you write\nin school even has users.  A few steps before a Rubik's Cube is solved, it still looks like a\nmess.  I think there are a lot of undergrads whose brains are in a\nsimilar position: they're only a few steps away from being able to\nstart successful startups, if they wanted to, but they don't realize\nit.  They have more than enough technical skill.  They just haven't\nrealized yet that the way to create wealth is to make what users\nwant, and that employers are just proxies for users in which risk\nis pooled.If you're young and smart, you don't need either of those.  You\ndon't need someone else to tell you what users want, because you\ncan figure it out yourself.  And you don't want to pool risk, because\nthe younger you are, the more risk you should take.A Public Service MessageI'd like to conclude with a joint message from me and your parents.\nDon't drop out of college to start a startup.  There's no rush.\nThere will be plenty of time to start companies after you graduate.\nIn fact, it may be just as well to go work for an existing company\nfor a couple years after you graduate, to learn how companies work.And yet, when I think about it, I can't imagine telling Bill Gates\nat 19 that he should wait till he graduated to start a company.\nHe'd have told me to get lost.  And could I have honestly claimed\nthat he was harming his future-- that he was learning less by working\nat ground zero of the microcomputer revolution than he would have\nif he'd been taking classes back at Harvard?  No, probably not.And yes, while it is probably true that you'll learn some valuable\nthings by going to work for an existing company for a couple years\nbefore starting your own, you'd learn a thing or two running your\nown company during that time too.The advice about going to work for someone else would get an even\ncolder reception from the 19 year old Bill Gates.  So I'm supposed\nto finish college, then go work for another company for two years,\nand then I can start my own?  I have to wait till I'm 23?  That's\nfour years.  That's more than twenty percent of my life so\nfar.  Plus in four years it will be way too late to make money\nwriting a Basic interpreter for the Altair.And he'd be right.  The Apple II was launched just two years later.\nIn fact, if Bill had finished college and gone to work for another\ncompany as we're suggesting, he might well have gone to work for\nApple.  And while that would probably have been better for all of\nus, it wouldn't have been better for him.So while I stand by our responsible advice to finish college and\nthen go work for a while before starting a startup, I have to admit\nit's one of those things the old tell the young, but don't expect\nthem to listen to.  We say this sort of thing mainly so we can claim\nwe warned you.  So don't say I didn't warn you.Notes[1]\nThe average B-17 pilot in World War II was in his early twenties.\n(Thanks to Tad Marko for pointing this out.)[2] If a company tried to pay employees this way, they'd be called\nunfair.  And yet when they buy some startups and not others, no one\nthinks of calling that unfair.\n[3] The 1/10 success rate for startups is a bit of an urban legend.\nIt's suspiciously neat.  My guess is the odds are slightly worse.Thanks to Jessica Livingston for reading drafts of this, to\nthe friends I promised anonymity to for their opinions about hiring,\nand to Karen Nguyen and the Berkeley CSUA for organizing this talk."},{"title":"History of T","text":"(T was one of the best Lisp implementations, and set a standard for clean design\nthat few newer dialects have been able to meet.  Here Olin Shivers recounts T's\nhistory.)Around 1981-1982, the Yale CS dept., which had a strong AI group led by Roger\nSchank, hired undergraduate\nJonathan Rees\nto implement a new Lisp for their\nresearch programming. Jonathan, I and Dan Weld (now a prof. at U Washington)\nwere the three people at Yale that had discovered the early Sussman/Steele\n\"lambda\" papers, including Guy's seminal master's thesis on Rabbit, the first\nScheme compiler. Dan was a college senior; Jonathan & I were juniors. Alan\nPerlis, the soul of the department, had just discovered functional\nprogramming, and was running a graduate seminar covering early FP languages\nsuch as Hope & Miranda & Scheme. The three of us managed to sleaze our way\ninto this grad class, where we met each other.Some context: Common Lisp did not exist (the effort was just getting\nunderway). MIT Scheme did not exist. Scheme was a couple of AI Lab tech\nreports and a master's thesis. We're talking the tiniest seed crystal\nimaginable, here. There was immense experience in the lisp community on\noptimising compiled implementations of dynamically-scoped languages -- this,\nto such an extent, that it was a widely held opinion at the time that \"lexical\nscope is interesting, *theoretically*, but it's inefficient to implement;\ndynamic scope is the fast choice.\" I'm not kidding. To name two examples, I\nheard this, on different occasions, from Richard Stallman (designer &\nimplementor of emacs lisp) and Richard Fateman (prof. at Berkeley, and the\nprincipal force behind franz lisp, undoubtedly the most important lisp\nimplementation built in the early Vax era -- important because it was\ndelivered and it worked). I asked RMS when he was implementing emacs lisp why\nit was dynamically scoped and his exact reply was that lexical scope was too\ninefficient. So my point here is that even to people who were experts in the\narea of lisp implementation, in 1982 (and for years afterward, actually),\nScheme was a radical, not-at-all-accepted notion. And *outside* the Lisp/AI\ncommunity... well, languages with GC were definitely not acceptable. (Contrast\nwith the perl & Java era in which we live. It is no exaggeration, thanks to\nperl, to say in 2001 that *billions* of dollars of services have been rolled\nout to the world on top of GC'd languages.)Jonathan had spent the previous year on leave from Yale working at MIT. The\nimportant thing that was happening was that 32-bit machines were coming out,\nwith 32-bit address spaces -- *big* address spaces. A lot of the existing\nlanguage technology in the AI community had been developed for the PDP-11\n(16-bit machine) and, more importantly, the workhorse PDP-10 and -20. I loved\nthe \"ten,\" may I add. It had an instruction set that fit onto a single page of\nlarge type, and was just cool. That ISA was a hacker's dream; you could play\nall kinds of fun games with it. For example, there was a famous hack that\nprovided a means of (1) removing a cons cell from a freelist, (2) updating the\nfreelist, and (3) branching if the freelist was exhausted to the GC... in *one\ninstruction*. The PDP-10 was a 36-bit machine, with an 18-bit word-addressed\naddress space. Note what this means: a cons cell fit into a single word. There\nare many who claim that the -10 was the world's first lisp machine. I agree\nwith them.There were two extremely good, mature, highly optimised lisp implementations\nfor the -10, one \"East Coast\" (Maclisp, from MIT) and one \"West coast\"\n(Interlisp, from Stanford & Xerox PARC). You could also program the -10 in\na beautiful, roughly-C-level language from CMU, called Bliss. I see C and I\nremember Bliss, and I could weep.The problem was the limited, 18-bit address spaces of the -10's. Programmers\nwere blowing them out. When DEC shipped the Vax & Motorola 68000s began to\nshow up in Sun & Apollo workstations, people realised that the 32-bit address\nspace of these architectures was a discontinuous shift in technology, and that\nlanguage implementation on these machines was going to be similarly\ndiscontinuous. For example, with a really big address space, you wanted to\nfundamentally change your GC technology and data representations.Berkeley was a big player making the Vax happen in universities, by getting\nthe ARPA contract to build Berkeley Unix for the Vax (which effort\nsubsequently spun off into Sun, courtesy Bill Joy). Part of this effort was a\nlisp for the Vax, franz lisp, built under Fateman's guidance. Franz was a\ndesign more in the vein of Maclisp than Interlisp, enough so as to allow the\nporting of Macsyma (Fateman's interest) to the Vax. Franz also showed\nfundamental influences from a little-known lisp done at harvard.MIT responded to the Vax by kicking off the NIL project. NIL stood for \"New\nImplementation of Lisp.\" Jonathan was part of this project during his year\naway from Yale. It was a really, really good effort, but in the end, was\ncrippled by premature optimisation -- it was very large, very aggressive, very\ncomplex. Example: they were allocating people to write carefully hand-tuned\nassembly code for the bignum package before the general compiler was written.\nThe NIL project was carried out by top people (err... I recall Jonl White &\nGeorge Carrette being principals). But it never got delivered. It was finished\nyears later than projected, by which time it was mostly irrelevant. (This has\nhappened to me. It's a bitter, bitter experience. I fashionably decried\npremature optimisation in college without really understanding it until I once\ncommitted an act of premature opt so horrific that I can now tell when it is\ngoing to rain by the twinges I get in the residual scar tissue. Now I\nunderstand premature optimisation.) The genesis & eventual failure of this\nkind of project is always clearly visible (in hindsight) in the shibboleths of\nthe early discussions. One key tip-off phrase is always something of the form,\n\"We'll throw out all the old cruft, start over fresh, and just Do Things\nRight.\" (This, unfortunately, is not a useful observation, because that\nstrategy sometimes does pay off, hugely. It's just very risky.)Jonathan worked on NIL for a year, then came back to Yale for his senior year,\nwhere he was hired by the CS dept. to implement a new Lisp. He made a\n*radical* decision: he was going to do an optimising, native-code *Scheme*\nsystem. He chose to name it T. This was a great name for a couple of\nreasons. It was short & simple, of course. It fit in with Yale CS culture, as\nthere was a history of programs developed there that had single-letter names:\ne, c, z & u. (These were a locally-grown family of sophisticated screen\neditors that were rougly comparable to, but quite different from, emacs.)\nFinally, if you're a lisp hacker, then you know that NIL is the lisp false\nconstant... and T is the canonical true constant. So \"T is not NIL.\"Let me repeat here what a radical decision it was to go and build a Scheme.\nThe *only* Scheme implementation that had *ever* been built at this point was\nthe research prototype Steele had done for his Masters. *All* serious Lisps in\nproduction use at that time were dynamically scoped. No one who hadn't\ncarefully read the Rabbit thesis believed lexical scope would fly; even the\nfew people who *had* read it were taking a bit of a leap of faith that this\nwas going to work in serious production use -- the difference between theory &\npractice is, uh, larger in practice than in theory.(For example, the other big MIT implementation effort, Zetalisp for the Lisp\nMachine, kept dynamic scoping, but allowed the compiler to sort of break the\nsemantics, and then, in response to Scheme, threw lexical closures into the\nmix as a fairly kludged-up special form.)(The Europeans working on early systems like ML in Edinburgh probably find all\nthis American early-80's thrashing & confusion over scoping discipline and\nimplementation strategy incredibly clueless. Sorry 'bout that.)Besides Roger Schank, the other person who made the resource committment to\nhire Jonathan to develop T was John O'Donnell, who later went on to be a\nprincipal Multiflow, the company that commercialised VLIW\narchitecture/compiler technology that Josh Fisher spun out of Yale in 1983. I\nsuspect Alan Perlis probably had a hand in the decision, as well, though I\ndon't really know. Committing funds to allow Jonathan to set out to (try to)\nbuild a production-quality Scheme implementation was pretty brave, up there\nwith Jonathan's decision to try.Jonathan brought back to Yale from the NIL project a raft of really excellent\nimplementation technology -- primarily the fundamental data representations\nthat were carefully honed for the new-generation machine architectures, using\ntag bits in the low bits of the datum. E.g., if you made the fixnum tag \"000\",\nthen you could add & subtract fixnums in a single instruction, with no\ntag-hacking overhead; you could multiply with a single pre-shift and divide\nwith a single post-shift. This was a big improvement over Maclisp's required\nboxing of fixnums, and the supporting cruft that made that all work (in my\nopinion). Also, since the Vax was *byte* addressable, you could strip off the\ntype tag of a cons-cell datum simply by adjusting the constant offset in the\naddressing mode. I.e., cons cells were represented by the double-word-aligned\naddress of the two-word chunk of memory where the cell's car & cdr fields\nlived. Double-word-aligning the memory block means the low three bits of its\naddress are always zero, that is, not needed. So the three low bits of the\naddress were used for the type tags. So suppose we use \"010\" (decimal 2) for\nthe type tag. You could take the cdr of the pair in register r7 with a single\ninstruction: load r8, r7[4-2] where the \"4\" gets you 1 word (4 bytes) into the\npair (the cdr field) and the \"-2\" corrects for the type tag. I.e., you could\nstrip off the type tag with *zero* run-time penalty. Nice! The representations\nfor closures and stack frames were also very clever.Jonathan had been burned by the NIL project's failure to complete, so he was\nvery careful about avoiding premature optimisation. So he blasted out a quick\n& dirty prototype implementation just to get something up and running. (I\nthink he wrote this in Maclisp, and as I recall, he called it \"cheapy.\") After\nthat, all development of future implementations was done in T -- T 2 was\nimplemented with T 1.2 was the first really good implementation, with all of the tricks I've\ndescribed above. It ran on Vaxes & 68000's, which had also just come out.\nIt was solid enough to be a serious system that had real clients who depended\non it.About this time, roughly, Sussman's group was starting the development path\nthat eventually led to MIT Scheme, and the (intertwined) pedagogical path that\nled to Sussman & Abelson's book, *Structure and Interpretation of Computer\nPrograms*. The Lisp Machine effort had also spun out into Symbolics & LMI,\ncausing Maclisp to spawn Zetalisp & Flavors, which in turn had a lot of\ninfluence on Common Lisp and Common Lisp's object system, CLOS. But I'm\ndigressing. Back to Yale.T also used a pretty cool GC. Maclisp on the -10 had used a mark&sweep GC (one\nversion of which famously \"ran in the register set,\" though that is another\nstory), encoding type information using a \"BIBOP\" scheme -- all objects\nwere boxed, and segregated by type into pages. Hence the high bits of the\nobject's address could be used to index into a page table to tell you what\nkind of thing lived in that page. This was well tuned for tight-memory systems\nlike the -10. With large address spaces, though, you wanted to use stop&copy,\nbecause with stop&copy you only pay to copy the live data; you don't pay a\ncost proportional to the amount of garbage. This is well suited to the big\nheaps you can allocate on a 32-bit machine. Most stop&copy collectors almost\nuniversally implement the Cheney algorithm, which does a breadth-first\nsearch of the heap. But BFS is not so great for memory locality -- it scatters\ntopologically close data structures all over the heap as it copies. Not good.\nT used a lesser-known (but quite simple -- the research paper describing it is\nabout 2 pages long) algorithm due to Clark that implements *depth*-first\ntraversal. (Just as the Cheney algorithm cleverly uses the existing heap data\nstructures to provide the BFS search queue, Clark's uses the heap to provide\nthe search stack.) Depth-first search means that if you GC a linked list, the\nGC zips down the spine of the list before turning its attention to the\nelements of the list, so those \"spine\" cells wind up laid out sequentially in\nmemory. Your list turns into a vector! (sorta) This *rocks* for locality.\nHowever,- T dropped this algorithm in the late 80's for the classic BFS algorithm.\nDavid Kranz (who will appear in this tale shortly) told me at that point\nthat he'd made the switch because the copy phase of the BFS algorithm had\nslightly faster constant factors- That standard religion I just gave you about \"stop&copy only pays\nfor the good stuff, but in mark&sweep you have to pay for the garbage,\nas well\"? It's not true. We all believed it for decades. But Norman\nRamsey at harvard has cleverly shown that you can implement mark&sweep\nwith *exactly* the same asymptotic costs as stop&copy. This is good\nnews especially for tight-memory systems with homogenous heap data.\nNorman's observation is really obvious and simple; hardly an impressive\nresult when you see it. Except, uh, that it eluded *everyone else* for\n*decades.* And not because people didn't care; GC has received a lot of\nattention from researchers. There's a lesson there.I've never seen a depth-first collector anywhere but T. By the way, the\nT garbage collector was written in T. This is also a slightly amazing feat.\nIt was achieved by virtue of the fact that T was native-code compiled, and\nthe garbage collector was written by the compiler authors. They knew *exactly*\nhow the compiler would handle their source, so they could carefully code the\ncollector so that it would not need to heap allocate while running.(That's not as simple as it sounds. It's not as easy as simply writing your\ncode and never calling malloc() or invoking a \"new\" method. It's tied up in\nthe treatment of lambda. Good Scheme compilers use a range of implementations\nfor the lambdas in the program, depending upon what they can determine about\nthe lambdas at compile time -- how they're used, to where they are passed, the\nrelationship between the uses and the definition points, etc. Some lambdas\njust evaporate into nothing. Some lambdas turn into control-flow join points\nwith associated register/variable bindings. Some lambdas turn into stack\nframes. But some lambdas cause heap allocation to produce general closures. So\nyou have to understand how the compiler is going to handle every lambda you\nwrite. And the fundamental skeleton of a Scheme program is built on lambda.)Another implementation feat of T's was that it allowed interrupts between\n*any* two instructions of user code. This placed a pretty intense burden on\nthe compiler, enough so that, of all the Scheme implementations of which I'm\naware, T is *unique* in this respect. To understand why this is hard in the\npresence of garbage collection, you can read a paper I wrote on the subject ten\nyears later, \"Atomic heap transactions and fine-grain interrupts,\" found at\nhttp://www.cc.gatech.edu/~shivers/citations.html#heap\n(You don't have to be a heavy-duty lambda-calculus wizard to read this\npaper; it's written to be comprehensible to general hackers.) T also allowed\nyou to write interrupt (Unix signal) handlers in T, which was pretty pleasant.There was more to T than implementation technology; there was also a lot of\nbeautiful language design happening. Jonathan seized the opportunity to make a\ncomplete break with backwards compatibility in terms of the runtime library\nand even the names chosen. Somewhere in the T 2 effort, Kent Pitman, another\nLisp wizard, came down to Yale from MIT. He and Jonathan poured an immense\namount of design effort into the language, and it was just really, really\n*clean*. Small (but difficult) things: they chose a standard set of lexemes\nand a regular way of assembling them into the names of the standard\nprocedures, so that you could easily remember or reconstruct names when you\nwere coding. (I have followed this example in the development of the SRFIs\nI've done for the Scheme community. It is not an easy task.)Larger, deeper things: they designed a beautiful object system that was\nintegrated into the assignment machinery -- just as Common Lisp's SETF lets\nyou assign using accessors, e.g., in Common Lisp\n(setf (car x) y)\nis equivalent to\n(rplaca x y)\nin T,\n(set! (car x) y)\nwas shorthand for\n((setter car) x y)\nAccessor functions like CAR handled \"generic functions\" or \"messages\"\nlike SETTER -- CAR returned the SET-CAR! procedure when sent the SETTER\nmessage. The compiler was capable of optimising this into the single\nVax store instruction that implements the SET-CAR! operation, but the\nsemantic machinery was completely general -- you could define your own\naccessor procedures, give them SETTER methods, and then use them in SET!\nforms.(This turned out to be very nice in the actual implementation of the compiler.\nThe AST was a tree of objects, connected together in both directions --\nparents knew their children; children also had links to their parents.\nIf the optimiser changed the else-part of an if-node N with something\nlike this\n(set! (if-node:else n) new-child)\nwhich was really\n((setter if-node:else) n new-child)\nthe if-node:else's SETTER method did a lot of work for you -- it disconnected\nthe old child, installed NEW-CHILD as N's else field, and set NEW-CHILD's\nparent field to be N. So you could never forget to keep all the links\nconsistent; it was all handled for you just by the single SET! assignment.)Around the time that Kent went back to MIT, new grad student Norman Adams\nhooked up w/Jonathan. T 2 and its compiler TC, was produced after about a year\nof really hard, focussed work on the part of Jonathan, Kent and Norman. I\ngraduated from Yale and went off to CMU to be a grad student in AI. Jonathan\nstarted to think about the next compiler.During my first year as a grad student, Jonathan met Forrest Baskett, who was\nthe director of one of the top industrial CS labs, DEC's Western Research\nLab, where a lot of the important RISC work was done (e.g., you could\nargue that David Wall's work on interprocedural register allocation there\nkilled the architectural feature of overlapping register-set stacks that came\nout of Berkeley and wound up in the SPARC). Forrest liked Jonathan, and\ninvited him to bring a team out to WRL for the summer to implement T for the\nmachine they were building (an amazing-for-the-time RISC called the Titan).\nJonathan's team was himself, Norman, Jim Philbin, David Kranz, Richard Kelsey,\nJohn Lamping and myself. Lamping was at Stanford, I was at CMU, the rest were\ngrad students at Yale (except Jonathan, who was an employee at Yale).This brings us to the summer of 1984. The mission was to build the world's\nmost highly-optimising Scheme compiler. We wanted to compete with C and\nFortran. The new system was T3, and the compiler was to be called Orbit. We\nall arrived at WRL and split up responsibility for the compiler. Norman was\ngoing to do the assembler. Philbin was going to handle the runtime (as I\nrecall). Jonathan was project leader and (I think) wrote the linker. Kranz was\nto do the back end. Kelsey, the front end. I had passed the previous semester\nat CMU becoming an expert on data-flow analysis, a topic on which I completely\ngrooved. All hot compilers do DFA. It is necessary for all the really cool\noptimisations, like loop-invariant hoisting, global register allocation,\nglobal common subexpression elimination, copy propagation, induction-variable\nelimination. I knew that no Scheme or Lisp compiler had ever provided these\nhot optimisations. I was burning to make it happen. I had been writing 3D\ngraphics code in T, and really wanted my floating-point matrix multiplies to\nget the full suite of DFA optimisation. Build a DFA module for T, and we would\ncertainly distinguish ourselves from the pack. So when we divided up the\ncompiler, I told everyone else to back off and loudly claimed DFA for my own.\nFine, everyone said. You do the DFA module. Lamping signed up to do it with\nme.Lamping and I spent the rest of the summer failing. Taking trips to the\nStanford library to look up papers. Hashing things out on white boards.\nStaring into space. Writing little bits of experimental code. Failing. Finding\nout *why* no one had ever provided DFA optimisation for Scheme. In short, the\nfundamental item the classical data-flow analysis algorithms need to operate\nis not available in a Scheme program. It was really depressing. I was making\nmore money than I'd ever made in my life ($600/week). I was working with\n*great* guys on a cool project. I had never been to California before, so I\nwas discovering San Francisco, my favorite city in the US and second-favorite\ncity in the world. Silicon Valley in 1984 was beautiful, not like the crowded\nstrip-mall/highway hell hole it is today. Every day was perfect and beautiful\nwhen I biked into work. I got involved with a gorgeous redhead. And every day,\nI went in to WRL, failed for 8 hours, then went home.It was not a good summer.At the end of the summer, I slunk back to CMU with my tail between my legs,\nhaving contributed not one line of code to Orbit.Everyone else, however, completed. The compiler wasn't finished by summer's\nend, but it was completed the following year at Yale. And it was the world's\nmost highly optimising Scheme compiler (even though it did not do data-flow\nanalysis), a record it held for a *long* time -- perhaps ten years?It was also a massive validation of a thesis Steele had argued for his\nMaster's, which was that CPS was a great intermediate representation for a\ncompiler. Orbit was totally hard-core about this -- the first thing the\ncompiler did was translate the user program into CPS, and that was the\nstandard form on which the compiler operated for the rest of its execution.\nAnd it turned out this approach scaled up from Rabbit to a production,\nnative-code compiler very successfully.David Kranz took the work he'd done on the back end, which was a very complex\npiece of code that did a lot of sophisticated analysis on data\nrepresentations, register allocation, and, in particular, lambdas, and turned\nit into his PhD thesis. Orbit produced code that actually beat the Pascal\nimplementation used by Apollo (a Sun-class workstation company) to implement\nthe *operating system* on that workstation; that was a huge coup. David then\nwent to MIT, where he brought his compiler technology to Bert Halstead's\nparallel lisp project, before hooking up with Steve Ward to do the research\nproject that turned into Curl. When Ward spun Curl out into a company,\nHalstead & Kranz became the senior technical guys there.Let's call Kranz's dissertation PhD #1. It's title was *An Optimising Compiler\nfor Scheme,* which I took to be an in-reference to William Wulf's seminal\nBliss compiler, described in a book (my copy is signed) titled simply *The\nDesign of an Optimising Compiler*. Wulf's Bliss compiler was a model up to\nwhich we all looked -- it held the title \"world's most highly optimising\ncompiler\" for a while.(Remember Bliss? Just to add more cross-links, Wulf had left CMU about then\nand spun out a company, Tartan Labs, to commercialise this compiler technology\nfor C. He took Guy Steele with him, who had just finished wrapping up leading\nthe Common Lisp definition while on the faculty at CMU. Tartan tanked, Wulf\nmoved on to a senior position at UVa & is now a big wheel at the national\nscience-policy level, e.g. leading National Academy inquiries into\ncounter-terrorism technology. Steele went to Thinking Machines, and then\nthrew his language-development skills behind the Java effort at Sun.)Kranz' diss is a Yale Computer Science Dept. tech report. I would say it\nis required reading for anyone interested in serious compiler technology for\nfunctional programming languages. You could probably order or download one\nfrom a web page at a url that I'd bet begins with http://www.cs.yale.edu/.Richard Kelsey took his front end, which was a very aggressive CPS-based\noptimiser, and extended it all the way down to the ground to produce a\ncomplete, second compiler, which he called \"TC\" for the \"Transformational\nCompiler.\" His approach was simply to keep transforming the program from one\nsimple, CPS, lambda language to an even simpler one, until the language was so\nsimple it only had 16 variables... r1 through r15, at which time you could\njust kill the lambdas and call it assembler. It is a beautiful piece of work,\nand, like Kranz's dissertation, required reading for anyone who wants to do\ncompilers for functional programming languages. It had a big influence on\nAndrew Appel, at Princeton, who subsequently adopted a lot of the ideas in it\nwhen he and Dave MacQueen's group at Bell Labs built the SML/NJ compiler for\nSML; Andrew described this in the book he subsequently wrote on that compiler,\n*Compiling With Continuations.* However, unlike the SML/NJ compiler, Kelsey's\nCPS-based compiler compiled code that used a run-time stack for procedure\ncalls. He actually describes front ends in his diss for standard procedural\n\"non-lambda\" languages such as Basic.So the lineage of the CPS-as-compiler-IR thesis goes from Steele's Rabbit\ncompiler through T's Orbit to SML/NJ. At which point Sabry & Felleisen at Rice\npublished a series of very heavy-duty papers dumping on CPS as a\nrepresentation and proposing an alternate called A-Normal Form. ANF has been\nthe fashionable representation for about ten years now; CPS is out of favor.\nThis thread then sort of jumps tracks over to the CMU ML community, where it\npicks up the important typed-intermediate-language track and heads to Cornell,\nand Yale, but I'm not going to follow that now. However, just to tell you\nwhere I am on this issue, I think the whole movement from CPS to ANF is a bad\nidea (though Sabry & Felleisen's technical observations and math are as\nrock solid as one would expect from people of their caliber).Let's call Kelsey's dissertation PhD #2.Kelsey subsequently spent time as a prof at Northeastern, then left for NEC's\nprestige lab in Princeton, where he worked on the Kali distributed system. He\nalso got set down precisely on paper something all the CPS people knew at some\nintuitive level: that the whole \"SSA\" revolution in the classical compiler\ncommunity was essentially a rediscovery of CPS. (Harrumph.) NEC Princeton went\non to accumulate a very impressive collection of Scheme/ML hackers: Stephen\nWeeks & Andrew Wright from Rice, Kevin Lang (who built a little known but\nquite beautiful, elegant, free and portable object-oriented Scheme called\nOaklisp), Kelsey, Jim Philbin, Henry Cetjin, and Jeff Siskind. When NEC\nPrinceton became an insane toxic place, Kelsey, like almost everyone else in\nthat previous list, jumped out into startup land, where he did a startup with\nRees & an MIT alumn, Patrick Sobalvarro, who achieved some early fame for work\non GC. That startup tanked in the dotcom meltdown last year, and Kelsey's\nnow on his second startup.Norman Adams turned his assembler into a master's degree. It also was a cool\npiece of software. His assembler didn't take a linear text stream; the\ncompiler handed it a *graph structure*. It serialised the graph on its own to\nminimise the spans of the jump instructions, and had other neat features\n(e.g., it was actually a portable framework for building assemblers). Then he\ntook his Masters and bailed out to Tektronix, where he developed a very\nhigh-performance Scheme implementation for the Motorola 88000 called \"screme,\"\nand then went to Xerox PARC, where he worked on ubiquitous computing and a\nScheme implementation called SchemeXeroX (a joke on \"Team Xerox\") with Pavel\nCurtis. He left Xerox at the beginning of the dotcom boom and was early in at\nthe startup company Ariba, which is why (1) Ariba's big product had a\nconfiguration system that is a Scheme built in Java and (2) he's a rich\ndude.Lamping's story is perhaps the strangest. He went back to Stanford, and got\ninvolved in a very arcane, theoretical problem called optimal lambda\nreduction, which he completely solved for his PhD. This is an achievement of\nconsiderable note because pointy-headed theoretical semanticists had been\nstruggling to crack this problem for a long time in Europe. They'd been\nstruggling so hard, in fact, that they really seemed... annoyed when this\nhacker from Stanford just sat down and solved the problem. John seemed to be\ncompletely unqualified to solve the problem, bringing nothing to it but, uh,\nbrains. There was, for example, a snooty French paper that sort of dismissed\nLamping as an \"autodidact,\" before proceeding to build (with, let me be\ncareful to note, proper credit given to John) on his work. So Lamping has thus\nbeen permanently saddled with this hilarious title/term, by those who know &\nlike him. He'll never live it down. John Lamping, autodidact.John subsequently went to Xerox PARC, where he and Gregor Kiczales made a team\nworking on a wide array of interesting programming-language problems, of which\n\"Aspect-Oriented Programming\" is the most well known. Again, the story here\ndeparts from T, so I won't pursue it. For the same reason, we will not call\nJohn's dissertation \"PhD #3\" -- it wasn't really connected to his work on the\nT project.About three years after the summer at WRL, I *finally* figured out how to do\ndata-flow analysis for Scheme, which ended a long, pretty unhappy period in my\nlife. I officially switched from being an AI student to being a PL student,\npicked up Peter Lee as a co-advisor (since my original advisor, Allen Newell,\nwhile certainly the greatest scholar I've ever personally known, was not a PL\nguy), and wrote it all up for *my* dissertation. This we can call PhD #3.By the way, I'll add that the deepest and most powerful part of my diss, in my\nopinion, is the part (a) about which no one seems to know and (b) which is on\nthe shakiest theoretical ground: environment reflow analysis. I would surely\nlove it if some interested character one day takes that piece of my diss and\nreally takes it someplace.Jim Philbin, like Kelsey, also went to NEC, where he built an operating system\ntuned for functional programming languages, STING (or perhaps it was spelled\n\"STNG\" -- in any event it was pronounced \"sting\"). He built it in T, of\ncourse, and one could see that it had its roots in his work on T3.\n(Implementing the runtime for a functional language, in some sense, requires\nyou to implement a little virtual OS on top of the real, underlying OS.) Call\nthat PhD #4. Jim subsequently left Scheme, to do parallel processor & systems\nwork with Kai Li at Princeton.Jonathan went to MIT as a graduate student, where he worked with Gerry Sussman\nand David Gifford. After working on a series of interesting problems, Jonathan\nalso wrote his dissertation on an operating system for functional languages,\nwhere you could use language safety as the fundamental protection mechanism.\nCall that PhD #5. Then he got interested in entomology (bugs, I mean -- real\nbugs, not computer bugs), did a post-doc in Europe, then came back to the US\nand has sort of bounced between pursuing research topics that are as radical\nand unusual as T was in 1982 & startup companies.(Jonathan also wrote his dissertation *in Scheme* as well as *about* Scheme.\nHe built a little word processor for his diss in Scheme called \"markup\" that\nallowed you to write standard text, interspersed with commands that were\ndelimited with curly braces. (Hmm. Text and commands in curly braces. Sound\nfamiliar?) Commands were defined in Scheme; the markup processor had multiple\nback-ends, such as HTML & PostScript. Scott Draves later extended markup for\n*his* dissertation on partial-evaluation and high-performance graphics\nrendering at CMU.)I think that covers the entire T team. It is interesting to note that *five*\ndissertation-level chunks of work (and one Master's-level chunk) came out of a\nsingle summer project.I've spent a fair amount of time discussing T's implementation technology.\nHowever, it is also worth study as a language *design*, and here, Jonathan\nis the single greatest influence. T was, principally, his baby. It was\nquite a beautiful design.When the risc revolution happened, Orbit was ported to the late-80's risc\nprocessors: MIPS & SPARC. This is when the Clark GC was ripped out and\nreplaced with the Cheney collector. At CMU, I ported Orbit to an IBM precursor\nof their POWER architecture, called the ROMP or the RT/PC.One of the limiting factors of Orbit was the complexity of the back end. It\nwas documented very well by Kranz' diss, and it was very sophisticated, but it\nwas also a big mess of code. Out of a reaction to this complexity was born\nScheme 48 -- when Kelsey came to Northeastern as a prof, Jonathan was still at\nMIT; he and Jonathan built Scheme 48 together. Its first use was on an\nautonomous robot system that Jonathan had gotten involved with at Cornell. The\nname was intended to reflect the idea that the implementation should be so\nclear and simple that you could believe the system could have been written in\n48 hours (or perhaps, when S48 got complex enough, this was altered to \"could\nhave been *read* in 48 hours\"). Scheme 48 had very little technical overlap\nw/T3 and Orbit -- no native code compiler, no object system, no CPS IR. Its\ninnovations were its module system, the language in which its VM was defined\n(\"pre-scheme\"), and its stack-management technology. These were all\ninteresting technical bits. The stack was managed not by push & pop, but by\npush & a generational gc. I believe Kelsey wrote a paper on this and its\nadvantages. The module system was somewhat like SML's, but allowed modular\nmacros and had another fairly cool feature: when you defined a module, clauses\nlet you specify which files held the module's source. But *other* clauses let\nyou specify which \"reader\" procedure to use to translate the character stream\nin the files to the s-expression tree handed to the compiler. So you could\nhandle files with different concrete syntax -- R5RS syntax, scsh syntax, S48\nsyntax, PLT Scheme syntax, guile syntax, perhaps an infix syntax (as is so\noften discussed). That eliminated an annoying, low-level but persistent\nbarrier to sharing code across different implementations of Scheme.Pre-scheme was quite interesting. Kelsey published a paper on it, as well, I\nbelieve. It was Scheme in the sense that you could load it into a Scheme\nsystem and run the code. But it was restrictive -- it required you to write in\na fashion that allowed complete Hindley-Milner static type inference, and all\nhigher-order procedures were beta-substituted away at compile time, meaning\nyou could *straightforwardly* translate a prescheme program into \"natural\" C\ncode with C-level effiency. That is, you could view prescheme as a really\npleasant alternative to C for low-level code. And you could debug your\nprescheme programs in the interactive Scheme development environment of your\nchoice, before flipping a switch and translating to C code, because prescheme\nwas just a restricted Scheme. The Scheme 48 byte-code interpreter was written\nin prescheme. Prescheme sort of died -- beyond the academic paper he wrote,\nKelsey never quite had the time to document it and turn it into a standalone\ntool that other people could use (Ian Horswill's group at Northwestern is an\nexception to that claim -- they have used prescheme for interesting work).\nThere are ideas there to be had, however.I subsequently picked up Scheme 48 around 1992 to build scsh, but we're\nbeginning to wander from T, so I'll leave that thread.The tapestry of advanced language implementation work is a very rich and\ninterconnected one, the weaving of which is is an incredibly interesting task\nthat can keep you happily occupied for a lifetime. I've only traced out one\nselected thread in that tapestry with this rambling post; there are many other\nimportant ones. But that, to the best of my knowledge, is the story of T.A cautionary note: the danger of writing history when all of the principals\nare still alive is that there are people around to catch you out in your\nerrors. I'm sure there *are* errors in my recollection, but I'm also\nreasonably sure I've got the broad strokes roughly correct. Someone like\nJonathan could certainly give a much more\nauthoritative account.Here are some references to papers I've mentioned.This is the first paper published on T, based on T2:Jonathan A. Rees and Norman I. Adams IV.\nT: A dialect of Lisp or, Lambda: The ultimate software tool.\nIn Conference Record of the 1982 ACM Symposium on LISP and Functional\nProgramming, pages 114-122, August 1982.This is a general overview of T3's Orbit:ORBIT: An optimizing compiler for Scheme.\nIn Proceedings of the SIGPLAN '86 Symposium on Compiler Construction,\npublished as SIGPLAN Notices 21(7), pages 219-233.\nAssociation for Computing Machinery, July 1986.There is a later, third paper, written by Jonathan & Norman, on object systems\nin general and T's in particular. I do not have a reference.The reference manual for T is also interesting reading, for information\non the features of the language:Jonathan A.Rees, Norman I.Adams IV\nand James R. Meehan.\nThe T Manual.\n4th edition, Yale University, Department of Computer Science, January 1984.\nI also could probably post PostScript source for it, if people care.Kelsey's diss:Compilation by Program Transformation.\nPh.D.dissertation, Yale University, May 1989.\nResearch Report 702, Department of Computer Science.\nA conference-length version of this dissertation appears in POPL 89.Kranz's diss:David Kranz.\nORBIT:  An Optimizing Compiler for Scheme.\nPh.D. dissertation, Yale University, February 1988.\nResearch Report 632, Department of Computer Science.More Info:"},{"title":"Holding a Program in One's Head","text":"August 2007A good programmer working intensively on his own code can hold it\nin his mind the way a mathematician holds a problem he's working\non.  Mathematicians don't answer questions by working them out on\npaper the way schoolchildren are taught to.  They do more in their\nheads: they try to understand a problem space well enough that they\ncan walk around it the way you can walk around the memory of the\nhouse you grew up in.  At its best programming is the same.  You\nhold the whole program in your head, and you can manipulate it at\nwill.That's particularly valuable at the start of a project, because\ninitially the most important thing is to be able to change what\nyou're doing.  Not just to solve the problem in a different way,\nbut to change the problem you're solving.Your code is your understanding of the problem you're exploring.\nSo it's only when you have your code in your head that you really\nunderstand the problem.It's not easy to get a program into your head.  If you leave a\nproject for a few months, it can take days to really understand it\nagain when you return to it.  Even when you're actively working on\na program it can take half an hour to load into your head when you\nstart work each day.  And that's in the best case.  Ordinary\nprogrammers working in typical office conditions never enter this\nmode.  Or to put it more dramatically, ordinary programmers working\nin typical office conditions never really understand the problems\nthey're solving.Even the best programmers don't always have the whole program they're\nworking on loaded into their heads.   But there are things you can\ndo to help:\nAvoid distractions.  Distractions are bad for many types of work,\nbut especially bad for programming, because programmers tend to\noperate at the limit of the detail they can handle.The danger of a distraction depends not on how long it is, but\non how much it scrambles your brain.  A programmer can leave the\noffice and go and get a sandwich without losing the code in his\nhead.  But the wrong kind of interruption can wipe your brain\nin 30 seconds.Oddly enough, scheduled distractions may be worse than unscheduled\nones.  If you know you have a meeting in an hour, you don't even\nstart working on something hard. Work in long stretches.  Since there's a fixed cost each time\nyou start working on a program, it's more efficient to work in\na few long sessions than many short ones.  There will of course\ncome a point where you get stupid because you're tired.  This\nvaries from person to person.  I've heard of people hacking for\n36 hours straight, but the most I've ever been able to manage\nis about 18, and I work best in chunks of no more than 12.The optimum is not the limit you can physically endure.  There's\nan advantage as well as a cost of breaking up a project.  Sometimes\nwhen you return to a problem after a rest, you find your unconscious\nmind has left an answer waiting for you. Use succinct languages.  More\npowerful programming languages\nmake programs shorter. And programmers seem to think of programs\nat least partially in the language they're using to write them.\nThe more succinct the language, the shorter the program, and the\neasier it is to load and keep in your head.You can magnify the effect of a powerful language by using a\nstyle called bottom-up programming, where you write programs in\nmultiple layers, the lower ones acting as programming languages\nfor those above.  If you do this right, you only have to keep\nthe topmost layer in your head. Keep rewriting your program.  Rewriting a program often yields\na cleaner design.  But it would have advantages even if it didn't:\nyou have to understand a program completely to rewrite it, so\nthere is no better way to get one loaded into your head. Write rereadable code.  All programmers know it's good to write\nreadable code.  But you yourself are the most important reader.\nEspecially in the beginning; a prototype is a conversation with\nyourself.  And when writing for yourself you have different\npriorities.  If you're writing for other people, you may not\nwant to make code too dense.  Some parts of a program may be\neasiest to read if you spread things out, like an introductory\ntextbook.  Whereas if you're writing code to make it easy to reload\ninto your head, it may be best to go for brevity. Work in small groups.  When you manipulate a program in your\nhead, your vision tends to stop at the edge of the code you own.\nOther parts you don't understand as well, and more importantly,\ncan't take liberties with.  So the smaller the number of\nprogrammers, the more completely a project can mutate.  If there's\njust one programmer, as there often is at first, you can do\nall-encompassing redesigns. Don't have multiple people editing the same piece of code.  You\nnever understand other people's code as well as your own.  No\nmatter how thoroughly you've read it, you've only read it, not\nwritten it.  So if a piece of code is written by multiple authors,\nnone of them understand it as well as a single author would.And of course you can't safely redesign something other people\nare working on.  It's not just that you'd have to ask permission.\nYou don't even let yourself think of such things.  Redesigning\ncode with several authors is like changing laws; redesigning\ncode you alone control is like seeing the other interpretation\nof an ambiguous image.If you want to put several people to work on a project, divide\nit into components and give each to one person. Start small.  A program gets easier to hold in your head as you\nbecome familiar with it.  You can start to treat parts as black\nboxes once you feel confident you've fully explored them.  But\nwhen you first start working on a project, you're forced to see\neverything.  If you start with too big a problem, you may never\nquite be able to encompass it.  So if you need to write a big,\ncomplex program, the best way to begin may not be to write a\nspec for it, but to write a prototype that solves a subset of\nthe problem.  Whatever the advantages of planning, they're often\noutweighed by the advantages of being able to keep a program in\nyour head.\nIt's striking how often programmers manage to hit all eight points\nby accident.  Someone has an idea for a new project, but because\nit's not officially sanctioned, he has to do it in off hours—which\nturn out to be more productive because there are no distractions.\nDriven by his enthusiasm for the new project he works on it for\nmany hours at a stretch.  Because it's initially just an\nexperiment, instead of a \"production\" language he uses a mere\n\"scripting\" language—which is in fact far more powerful.  He\ncompletely rewrites the program several times; that wouldn't be\njustifiable for an official project, but this is a labor of love\nand he wants it to be perfect.  And since no one is going to see\nit except him, he omits any comments except the note-to-self variety.\nHe works in a small group perforce, because he either hasn't told\nanyone else about the idea yet, or it seems so unpromising that no\none else is allowed to work on it.  Even if there is a group, they\ncouldn't have multiple people editing the same code, because it\nchanges too fast for that to be possible.  And the project starts\nsmall because the idea is small at first; he just has some cool\nhack he wants to try out.Even more striking are the number of officially sanctioned projects\nthat manage to do all eight things wrong.  In fact, if you look at\nthe way software gets written in most organizations, it's almost\nas if they were deliberately trying to do things wrong. In a sense,\nthey are.  One of the defining qualities of organizations since\nthere have been such a thing is to treat individuals as interchangeable\nparts.  This works well for more parallelizable tasks, like fighting\nwars.  For most of history a well-drilled army of professional\nsoldiers could be counted on to beat an army of individual warriors,\nno matter how valorous.  But having ideas is not very parallelizable.\nAnd that's what programs are: ideas.It's not merely true that organizations dislike the idea of depending\non individual genius, it's a tautology.  It's part of the definition\nof an organization not to.  Of our current concept of an organization,\nat least.Maybe we could define a new kind of organization that combined the\nefforts of individuals without requiring them to be interchangeable.\nArguably a market is such a form of organization, though it may be\nmore accurate to describe a market as a degenerate case—as what\nyou get by default when organization isn't possible.Probably the best we'll do is some kind of hack, like making the\nprogramming parts of an organization work differently from the rest.\nPerhaps the optimal solution is for big companies not even to try\nto develop ideas in house, but simply to\nbuy them.  But regardless\nof what the solution turns out to be, the first step is to realize\nthere's a problem.  There is a contradiction in the very phrase\n\"software company.\"   The two words are pulling in opposite directions.\nAny good programmer in a large organization is going to be at odds\nwith it, because organizations are designed to prevent what\nprogrammers strive for.Good programmers manage to get a lot done anyway.\nBut often it\nrequires practically an act of rebellion against the organizations\nthat employ them.  Perhaps it will help if more people understand that the way\nprogrammers behave is driven by the demands of the work they do.\nIt's not because they're irresponsible that they work in long binges\nduring which they blow off all other obligations, plunge straight into\nprogramming instead of writing specs first, and rewrite code that\nalready works.  It's not because they're unfriendly that they prefer\nto work alone, or growl at people who pop their head in the door\nto say hello.  This apparently random collection of annoying habits\nhas a single explanation: the power of holding a program in one's\nhead.Whether or not understanding this can help large organizations, it\ncan certainly help their competitors.  The weakest point in big\ncompanies is that they don't let individual programmers do great\nwork.  So if you're a little startup, this is the place to attack\nthem.  Take on the kind of problems that have to be solved in one\nbig brain.Thanks to Sam Altman, David Greenspan, Aaron Iba, Jessica Livingston,\nRobert Morris, Peter Norvig, Lisa Randall, Emmett Shear, Sergei Tsarev,\nand Stephen Wolfram for reading drafts of this."},{"title":"How Art Can Be Good","text":"December 2006I grew up believing that taste is just a matter of personal preference.\nEach person has things they like, but no one's preferences are any\nbetter than anyone else's.  There is no such thing as good taste.Like a lot of things I grew up believing, this turns out to be\nfalse, and I'm going to try to explain why.One problem with saying there's no such thing as good taste is that\nit also means there's no such thing as good art.  If there were\ngood art, then people who liked it would have better taste than\npeople who didn't.  So if you discard taste, you also have to discard\nthe idea of art being good, and artists being good at making it.It was pulling on that thread that unravelled my childhood faith\nin relativism.  When you're trying to make things, taste becomes a\npractical matter.  You have to decide what to do next.  Would it\nmake the painting better if I changed that part?  If there's no\nsuch thing as better, it doesn't matter what you do.  In fact, it\ndoesn't matter if you paint at all.  You could just go out and buy\na ready-made blank canvas.  If there's no such thing as good, that\nwould be just as great an achievement as the ceiling of the Sistine\nChapel.  Less laborious, certainly, but if you can achieve the same\nlevel of performance with less effort, surely that's more impressive,\nnot less.Yet that doesn't seem quite right, does it?AudienceI think the key to this puzzle is to remember that art has an\naudience.  Art has a purpose, which is to interest its audience.\nGood art (like good anything) is art that achieves its purpose\nparticularly well.  The meaning of \"interest\" can vary.  Some works\nof art are meant to shock, and others to please; some are meant to\njump out at you, and others to sit quietly in the background. But\nall art has to work on an audience, and—here's the critical\npoint—members of the audience share things in common.For example, nearly all humans find human faces engaging.  It seems\nto be wired into us.  Babies can recognize faces practically from\nbirth.  In fact, faces seem to have co-evolved with our interest\nin them; the face is the body's billboard.  So all other things\nbeing equal, a painting with faces in it will interest people more\nthan one without.\n[1]One reason it's easy to believe that taste is merely personal\npreference is that, if it isn't, how do you pick out the people\nwith better taste?  There are billions of people, each with their\nown opinion; on what grounds can you prefer one to another?\n[2]But if audiences have a lot in common, you're not in a position of\nhaving to choose one out of a random set of individual biases,\nbecause the set isn't random.  All humans find faces\nengaging—practically by definition: face recognition is\nin our DNA.  And so\nhaving a notion of good art, in the sense of art that does its job\nwell, doesn't require you to pick out a few individuals and label\ntheir opinions as correct.  No matter who you pick, they'll find\nfaces engaging.Of course, space aliens probably wouldn't find human faces engaging.\nBut there might be other things they shared in common with us.  The\nmost likely source of examples is math.  I expect space aliens would\nagree with us most of the time about which of two proofs was better.\nErdos thought so.  He called a maximally elegant proof one out of\nGod's book, and presumably God's book is universal.\n[3]Once you start talking about audiences, you don't have to argue\nsimply that there are or aren't standards of taste.  Instead tastes\nare a series of concentric rings, like ripples in a pond.  There\nare some things that will appeal to you and your friends, others\nthat will appeal to most people your age, others that will appeal\nto most humans, and perhaps others that would appeal to most sentient\nbeings (whatever that means).The picture is slightly more complicated than that, because in the\nmiddle of the pond there are overlapping sets of ripples.  For\nexample, there might be things that appealed particularly to men,\nor to people from a certain culture.If good art is art that interests its audience, then when you talk\nabout art being good, you also have to say for what audience.  So\nis it meaningless to talk about art simply being good or bad?  No,\nbecause one audience is the set of all possible humans.  I think\nthat's the audience people are implicitly talking about when they\nsay a work of art is good: they mean it would engage any human.\n[4]And that is a meaningful test, because although, like any everyday\nconcept, \"human\" is fuzzy around the edges, there are a lot of\nthings practically all humans have in common.  In addition to our\ninterest in faces, there's something special about primary colors\nfor nearly all of us, because it's an artifact of the way our eyes\nwork.  Most humans will also find images of 3D objects engaging,\nbecause that also seems to be built into our visual perception.\n[5]\nAnd beneath that there's edge-finding, which makes images\nwith definite shapes more engaging than mere blur.Humans have a lot more in common than this, of course.  My goal is\nnot to compile a complete list, just to show that there's some solid\nground here.  People's preferences aren't random.  So an artist\nworking on a painting and trying to decide whether to change some\npart of it doesn't have to think \"Why bother?  I might as well flip\na coin.\" Instead he can ask \"What would make the painting more\ninteresting to people?\"  And the reason you can't equal Michelangelo\nby going out and buying a blank canvas is that the ceiling of the\nSistine Chapel is more interesting to people.A lot of philosophers have had a hard time believing it was possible\nfor there to be objective standards for art. It seemed obvious that\nbeauty, for example, was something that happened in the head of the observer,\nnot something that was a property of objects.  It was thus\n\"subjective\" rather than \"objective.\"  But in fact if you narrow the\ndefinition of beauty to something that works a certain way on\nhumans, and you observe how much humans have in common, it turns out\nto be a property of objects after all.   You don't\nhave to choose between something being a property of the\nsubject or the object if subjects all react similarly.\nBeing good art is thus a property of objects as much as, say, being\ntoxic to humans is: it's good art if it consistently affects humans\nin a certain way.ErrorSo could we figure out what the best art is by taking a vote?  After\nall, if appealing to humans is the test, we should be able to just\nask them, right?Well, not quite.  For products of nature that might work.  I'd be\nwilling to eat the apple the world's population had voted most\ndelicious, and I'd probably be willing to visit the beach they voted\nmost beautiful, but having to look at the painting they voted the\nbest would be a crapshoot.Man-made stuff is different.  For one thing, artists, unlike apple\ntrees, often deliberately try to trick us.  Some tricks are quite\nsubtle.  For example, any work of art sets expectations by its level\nof finish.  You don't expect photographic accuracy in something\nthat looks like a quick sketch.  So one widely used trick, especially\namong illustrators, is to intentionally make a painting or drawing\nlook like it was done faster than it was.  The average person looks\nat it and thinks: how amazingly skillful.  It's like saying something\nclever in a conversation as if you'd thought of it on the spur of\nthe moment, when in fact you'd worked it out the day before.Another much less subtle influence is brand.  If you go to see the\nMona Lisa, you'll probably be disappointed, because it's hidden\nbehind a thick glass wall and surrounded by a frenzied crowd taking\npictures of themselves in front of it.  At best you can see it the\nway you see a friend across the room at a crowded party.  The Louvre\nmight as well replace it with copy; no one would be able to tell.\nAnd yet the Mona Lisa is a small, dark painting.  If you found\npeople who'd never seen an image of it and sent them to a museum\nin which it was hanging among other paintings with a tag labelling\nit as a portrait by an unknown fifteenth century artist, most would\nwalk by without giving it a second look.For the average person, brand dominates all other factors in the\njudgement of art.  Seeing a painting they recognize from reproductions\nis so overwhelming that their response to it as a painting is drowned\nout.And then of course there are the tricks people play on themselves.\nMost adults looking at art worry that if they don't like what they're\nsupposed to, they'll be thought uncultured.  This doesn't just\naffect what they claim to like; they actually make themselves like\nthings they're supposed to.That's why you can't just take a vote.  Though appeal to people is\na meaningful test, in practice you can't measure it, just as you\ncan't find north using a compass with a magnet sitting next to it.\nThere are sources of error so powerful that if you take a vote, all\nyou're measuring is the error.We can, however, approach our goal from another direction, by using\nourselves as guinea pigs.  You're human.  If you want to know what\nthe basic human reaction to a piece of art would be, you can at\nleast approach that by getting rid of the sources of error in your\nown judgements.For example, while anyone's reaction to a famous painting will be\nwarped at first by its fame, there are ways to decrease its effects.\nOne is to come back to the painting over and over.  After a few\ndays the fame wears off, and you can start to see it as a painting.\nAnother is to stand close.  A painting familiar from reproductions\nlooks more familiar from ten feet away; close in you see details\nthat get lost in reproductions, and which you're therefore seeing\nfor the first time.There are two main kinds of error that get in the way of seeing a\nwork of art: biases you bring from your own circumstances, and\ntricks played by the artist.  Tricks are straightforward to correct\nfor. Merely being aware of them usually prevents them from working.\nFor example, when I was ten I used to be very impressed by airbrushed\nlettering that looked like shiny metal.  But once you study how\nit's done, you see that it's a pretty cheesy trick—one of the\nsort that relies on pushing a few visual buttons really hard to\ntemporarily overwhelm the viewer.  It's like trying to convince\nsomeone by shouting at them.The way not to be vulnerable to tricks is to explicitly seek out\nand catalog them.  When you notice a whiff of dishonesty coming\nfrom some kind of art, stop and figure out what's going on.  When\nsomeone is obviously pandering to an audience that's easily fooled,\nwhether it's someone making shiny stuff to impress ten year olds,\nor someone making conspicuously avant-garde stuff to impress would-be\nintellectuals, learn how they do it.  Once you've seen enough\nexamples of specific types of tricks, you start to become a connoisseur\nof trickery in general, just as professional magicians are.What counts as a trick?  Roughly, it's something done with contempt\nfor the audience.  For example, the guys designing Ferraris in the\n1950s were probably designing cars that they themselves admired.\nWhereas I suspect over at General Motors the marketing people are\ntelling the designers, \"Most people who buy SUVs do it to seem\nmanly, not to drive off-road. So don't worry about the suspension;\njust make that sucker as big and tough-looking as you can.\"\n[6]I think with some effort you can make yourself nearly immune to\ntricks.  It's harder to escape the influence of your own circumstances,\nbut you can at least move in that direction.  The way to do it is\nto travel widely, in both time and space.  If you go and see all\nthe different kinds of things people like in other cultures, and\nlearn about all the different things people have liked in the past,\nyou'll probably find it changes what you like.  I doubt you could\never make yourself into a completely universal person, if only\nbecause you can only travel in one direction in time.  But if you\nfind a work of art that would appeal equally to your friends, to\npeople in Nepal, and to the ancient Greeks, you're probably onto\nsomething.My main point here is not how to have good taste, but that there\ncan even be such a thing.  And I think I've shown that.  There is\nsuch a thing as good art. It's art that interests its human audience,\nand since humans have a lot in common, what interests them is not\nrandom.  Since there's such a thing as good art, there's\nalso such a thing as good taste, which is the ability to recognize\nit.If we were talking about the taste of apples, I'd agree that taste\nis just personal preference.  Some people like certain kinds of\napples and others like other kinds, but how can you say that one\nis right and the other wrong?\n[7]The thing is, art isn't apples.  Art is man-made. It comes with a\nlot of cultural baggage, and in addition the people who make it\noften try to trick us.  Most people's judgement of art is dominated\nby these extraneous factors; they're like someone trying to judge\nthe taste of apples in a dish made of equal parts apples and jalapeno\npeppers.  All they're tasting is the peppers.  So it turns out you\ncan pick out some people and say that they have better taste than\nothers: they're the ones who actually taste art like apples.Or to put it more prosaically, they're the people who (a) are hard\nto trick, and (b) don't just like whatever they grew up with.  If\nyou could find people who'd eliminated all such influences on their\njudgement, you'd probably still see variation in what they liked.\nBut because humans have so much in common, you'd also find they\nagreed on a lot.  They'd nearly all prefer the ceiling of the Sistine\nChapel to a blank canvas.Making ItI wrote this essay because I was tired of hearing \"taste is subjective\"\nand wanted to kill it once and for all. Anyone who makes things\nknows intuitively that's not true.  When you're trying to make art,\nthe temptation to be lazy is as great as in any other kind of work.\nOf course it matters to do a good job.  And yet you can see how\ngreat a hold \"taste is subjective\" has even in the art world by how\nnervous it makes people to talk about art being good or bad.  Those\nwhose jobs require them to judge art, like curators, mostly resort\nto euphemisms like \"significant\" or \"important\" or (getting dangerously\nclose) \"realized.\"\n[8]I don't have any illusions that being able to talk about art being\ngood or bad will cause the people who talk about it to have anything\nmore useful to say.  Indeed, one of the reasons \"taste is subjective\"\nfound such a receptive audience is that, historically, the things\npeople have said about good taste have generally been such nonsense.It's not for the people who talk about art that I want to free the\nidea of good art, but for those who\nmake it.  Right now, ambitious\nkids going to art school run smack into a brick wall.  They arrive\nhoping one day to be as good as the famous artists they've seen in\nbooks, and the first thing they learn is that the concept of good\nhas been retired.  Instead everyone is just supposed to explore\ntheir own personal vision.\n[9]When I was in art school, we were looking one day at a slide of\nsome great fifteenth century painting, and one of the students asked\n\"Why don't artists paint like that now?\" The room suddenly got\nquiet.  Though rarely asked out loud, this question lurks uncomfortably\nin the back of every art student's mind.  It was as if someone had\nbrought up the topic of lung cancer in a meeting within Philip\nMorris.\"Well,\" the professor replied, \"we're interested in different\nquestions now.\"  He was a pretty nice guy, but at the time I couldn't\nhelp wishing I could send him back to fifteenth century Florence\nto explain in person to Leonardo & Co. how we had moved beyond their\nearly, limited concept of art.  Just imagine that conversation.In fact, one of the reasons artists in fifteenth century Florence made\nsuch great things was that they believed you could make great things.\n[10]\nThey were intensely competitive and were always trying to outdo\none another, like mathematicians or physicists today—maybe like\nanyone who has ever done anything really well.The idea that you could make great things was not just a useful\nillusion.  They were actually right.  So the most important consequence\nof realizing there can be good art is that it frees artists to try\nto make it.  To the ambitious kids arriving at art school this year\nhoping one day to make great things, I say: don't believe it when\nthey tell you this is a naive and outdated ambition.  There is such\na thing as good art, and if you try to make it, there are people\nwho will notice.Notes[1]\nThis is not to say, of course, that good paintings must\nhave faces in them, just that everyone's visual piano has that key\non it.  There are situations in which you want to avoid faces,\nprecisely because they attract so much attention.  But you can see\nhow universally faces work by their prevalence in\nadvertising.[2]\nThe other reason it's easy to believe is that it makes people\nfeel good.  To a kid, this idea is crack.  In every other respect\nthey're constantly being told that they have a lot to learn.  But\nin this they're perfect.  Their opinion carries the same weight as\nany adult's.  You should probably question anything you believed\nas a kid that you'd want to believe this much.[3]\nIt's conceivable that the elegance of proofs is quantifiable,\nin the sense that there may be some formal measure that turns out\nto coincide with mathematicians' judgements.  Perhaps it would be\nworth trying to make a formal language for proofs in which those\nconsidered more elegant consistently came out shorter (perhaps after\nbeing macroexpanded or compiled).[4]\nMaybe it would be possible to make art that would appeal to\nspace aliens, but I'm not going to get into that because (a) it's\ntoo hard to answer, and (b) I'm satisfied if I can establish that\ngood art is a meaningful idea for human audiences.[5]\nIf early abstract paintings seem more interesting than later\nones, it may be because the first abstract painters were trained\nto paint from life, and their hands thus tended to make the kind\nof gestures you use in representing physical things.  In effect\nthey were saying \"scaramara\" instead of \"uebfgbsb.\"[6]\nIt's a bit more complicated, because sometimes artists\nunconsciously use tricks by imitating art that does.[7]\nI phrased this in terms of the taste of apples because if\npeople can see the apples, they can be fooled.  When I was a kid\nmost apples were a variety called Red Delicious that had been bred\nto look appealing in stores, but which didn't taste very good.[8]\nTo be fair, curators are in a difficult position.  If they're\ndealing with recent art, they have to include things in shows that\nthey think are bad.  That's because the test for what gets included\nin shows is basically the market price, and for recent art that is\nlargely determined by successful businessmen and their wives.  So\nit's not always intellectual dishonesty that makes curators and\ndealers use neutral-sounding language.[9]\nWhat happens in practice is that everyone gets really good at\ntalking about art.  As the art itself gets more random, the effort\nthat would have gone into the work goes instead into the intellectual\nsounding theory behind it.  \"My work represents an exploration of\ngender and sexuality in an urban context,\" etc.  Different people\nwin at that game.[10]\nThere were several other reasons, including that Florence was\nthen the richest and most sophisticated city in the world, and that\nthey lived in a time before photography had (a) killed portraiture\nas a source of income and (b) made brand the dominant factor in the\nsale of art.Incidentally, I'm not saying that good art = fifteenth century\nEuropean art.  I'm not saying we should make what they made, but\nthat we should work like they worked.  There are fields now in which\nmany people work with the same energy and honesty that fifteenth\ncentury artists did, but art is not one of them.Thanks to Trevor Blackwell, Jessica Livingston, and Robert Morris\nfor reading drafts of this, and to Paul Watson for permission to\nComment on this essay."},{"title":"How Not to Die","text":"August 2007(This is a talk I gave at the last\nY Combinator dinner of the summer.\nUsually we don't have a speaker at the last dinner; it's more of\na party.  But it seemed worth spoiling the atmosphere if I could\nsave some of the startups from\npreventable deaths.  So at the last minute I cooked up this rather\ngrim talk.  I didn't mean this as an essay; I wrote it down\nbecause I only had two hours before dinner and think fastest while\nwriting.)\nA couple days ago I told a reporter that we expected about a third\nof the companies we funded to succeed.  Actually I was being\nconservative.  I'm hoping it might be as much as a half.  Wouldn't\nit be amazing if we could achieve a 50% success rate?Another way of saying that is that half of you are going to die.  Phrased\nthat way, it doesn't sound good at all.  In fact, it's kind of weird\nwhen you think about it, because our definition of success is that\nthe founders get rich.  If half the startups we fund succeed, then\nhalf of you are going to get rich and the other half are going to\nget nothing.If you can just avoid dying, you get rich.  That sounds like a joke,\nbut it's actually a pretty good description of what happens in a\ntypical startup.  It certainly describes what happened in Viaweb.\nWe avoided dying till we got rich.It was really close, too.  When we were visiting Yahoo to talk about\nbeing acquired, we had to interrupt everything and borrow one of\ntheir conference rooms to talk down an investor who was about to\nback out of a new funding round we needed to stay alive.   So even\nin the middle of getting rich we were fighting off the grim reaper.You may have heard that quote about luck consisting of opportunity\nmeeting preparation.  You've now done the preparation.  The work\nyou've done so far has, in effect, put you in a position to get\nlucky: you can now get rich by not letting your company die.  That's\nmore than most people have.  So let's talk about how not to die.We've done this five times now, and we've seen a bunch of startups\ndie.  About 10 of them so far.  We don't know exactly what happens\nwhen they die, because they generally don't die loudly and heroically.\nMostly they crawl off somewhere and die.For us the main indication of impending doom is when we don't hear\nfrom you.  When we haven't heard from, or about, a startup for a\ncouple months, that's a bad sign.  If we send them an email asking\nwhat's up, and they don't reply, that's a really bad sign.  So far\nthat is a 100% accurate predictor of death.Whereas if a startup regularly does new deals and releases and\neither sends us mail or shows up at YC events, they're probably\ngoing to live.I realize this will sound naive, but maybe the linkage works in\nboth directions.  Maybe if you can arrange that we keep hearing\nfrom you, you won't die.That may not be so naive as it sounds.  You've probably noticed\nthat having dinners every Tuesday with us and the other founders\ncauses you to get more done than you would otherwise, because every\ndinner is a mini Demo Day.  Every dinner is a kind of a deadline.\nSo the mere constraint of staying in regular contact with us will\npush you to make things happen, because otherwise you'll be embarrassed\nto tell us that you haven't done anything new since the last time\nwe talked.If this works, it would be an amazing hack.  It would be pretty\ncool if merely by staying in regular contact with us you could get\nrich.  It sounds crazy, but there's a good chance that would work.A variant is to stay in touch with other YC-funded startups.  There\nis now a whole neighborhood of them in San Francisco.  If you move\nthere, the peer pressure that made you work harder all summer will\ncontinue to operate.When startups die, the official cause of death is always either\nrunning out of money or a critical founder bailing.  Often the two\noccur simultaneously.  But I think the underlying cause is usually\nthat they've become demoralized.  You rarely hear of a startup\nthat's working around the clock doing deals and pumping out new\nfeatures, and dies because they can't pay their bills and their ISP\nunplugs their server.Startups rarely die in mid keystroke.  So keep typing!If so many startups get demoralized and fail when merely by hanging\non they could get rich, you have to assume that running a startup\ncan be demoralizing.  That is certainly true.  I've been there, and\nthat's why I've never done another startup.  The low points in a\nstartup are just unbelievably low.  I bet even Google had moments\nwhere things seemed hopeless.Knowing that should help.  If you know it's going to feel terrible\nsometimes, then when it feels terrible you won't think \"ouch, this\nfeels terrible, I give up.\"  It feels that way for everyone.  And\nif you just hang on, things will probably get better.  The metaphor\npeople use to describe the way a startup feels is at least a roller\ncoaster and not drowning.  You don't just sink and sink; there are\nups after the downs.Another feeling that seems alarming but is in fact normal in a\nstartup is the feeling that what you're doing isn't working.  The\nreason you can expect to feel this is that what you do probably\nwon't work.  Startups almost never get it right the first time.\nMuch more commonly you launch something, and no one cares.  Don't\nassume when this happens that you've failed.  That's normal for\nstartups.  But don't sit around doing nothing.  Iterate.I like Paul Buchheit's suggestion of trying to make something that\nat least someone really loves.  As long as you've made something\nthat a few users are ecstatic about, you're on the right track.  It\nwill be good for your morale to have even a handful of users who\nreally love you, and startups run on morale.  But also it\nwill tell you what to focus on.  What is it about you that they\nlove?  Can you do more of that?  Where can you find more people who\nlove that sort of thing?  As long as you have some core of users\nwho love you, all you have to do is expand it.  It may take a while,\nbut as long as you keep plugging away, you'll win in the end.  Both\nBlogger and Delicious did that.  Both took years to succeed.  But\nboth began with a core of fanatically devoted users, and all Evan\nand Joshua had to do was grow that core incrementally.\nWufoo is\non the same trajectory now.So when you release something and it seems like no one cares, look\nmore closely.  Are there zero users who really love you, or is there\nat least some little group that does?  It's quite possible there\nwill be zero.  In that case, tweak your product and try again.\nEvery one of you is working on a space that contains at least one\nwinning permutation somewhere in it.  If you just keep trying,\nyou'll find it.Let me mention some things not to do.  The number one thing not to\ndo is other things.  If you find yourself saying a sentence that\nends with \"but we're going to keep working on the startup,\" you are\nin big trouble.  Bob's going to grad school, but we're going to\nkeep working on the startup.  We're moving back to Minnesota, but\nwe're going to keep working on the startup.  We're taking on some\nconsulting projects, but we're going to keep working on the startup.\nYou may as well just translate these to \"we're giving up on the\nstartup, but we're not willing to admit that to ourselves,\" because\nthat's what it means most of the time.  A startup is so hard that\nworking on it can't be preceded by \"but.\"In particular, don't go to graduate school, and don't start other\nprojects.  Distraction is fatal to startups.  Going to (or back to)\nschool is a huge predictor of death because in addition to the\ndistraction it gives you something to say you're doing.  If you're\nonly doing a startup, then if the startup fails, you fail.  If\nyou're in grad school and your startup fails, you can say later \"Oh\nyeah, we had this startup on the side when I was in grad school,\nbut it didn't go anywhere.\"You can't use euphemisms like \"didn't go anywhere\" for something\nthat's your only occupation.  People won't let you.One of the most interesting things we've discovered from working\non Y Combinator is that founders are more motivated by the fear of\nlooking bad than by the hope of getting millions of dollars.   So\nif you want to get millions of dollars, put yourself in a position\nwhere failure will be public and humiliating.When we first met the founders of\nOctopart, they seemed very smart,\nbut not a great bet to succeed, because they didn't seem especially\ncommitted.  One of the two founders was still in grad school.  It\nwas the usual story: he'd drop out if it looked like the startup\nwas taking off.  Since then he has not only dropped out of grad\nschool, but appeared full length in\nNewsweek\nwith the word \"Billionaire\"\nprinted across his chest.  He just cannot fail now.  Everyone he\nknows has seen that picture.  Girls who dissed him in high school\nhave seen it.  His mom probably has it on the fridge.  It would be\nunthinkably humiliating to fail now.  At this point he is committed\nto fight to the death.I wish every startup we funded could appear in a Newsweek article\ndescribing them as the next generation of billionaires, because\nthen none of them would be able to give up.  The success rate would\nbe 90%.  I'm not kidding.When we first knew the Octoparts they were lighthearted, cheery\nguys.  Now when we talk to them they seem grimly determined.  The\nelectronic parts distributors are trying to squash them to keep\ntheir monopoly pricing.  (If it strikes you as odd that people still\norder electronic parts out of thick paper catalogs in 2007, there's\na reason for that.  The distributors want to prevent the transparency\nthat comes from having prices online.)  I feel kind of bad that\nwe've transformed these guys from lighthearted to grimly determined.\nBut that comes with the territory.  If a startup succeeds, you get\nmillions of dollars, and you don't get that kind of money just by\nasking for it.  You have to assume it takes some amount of pain.And however tough things get for the Octoparts, I predict they'll\nsucceed.  They may have to morph themselves into something totally\ndifferent, but they won't just crawl off and die.  They're smart;\nthey're working in a promising field; and they just cannot give up.All of you guys already have the first two.  You're all smart and\nworking on promising ideas.  Whether you end up among the living\nor the dead comes down to the third ingredient, not giving up.So I'll tell you now: bad shit is coming.  It always is in a startup.\nThe odds of getting from launch to liquidity without some kind of\ndisaster happening are one in a thousand.  So don't get demoralized.\nWhen the disaster strikes, just say to yourself, ok, this was what\nPaul was talking about.  What did he say to do?  Oh, yeah.  Don't\ngive up."},{"title":"How You Know","text":"December 2014I've read Villehardouin's chronicle of the Fourth Crusade at least\ntwo times, maybe three.  And yet if I had to write down everything\nI remember from it, I doubt it would amount to much more than a\npage.  Multiply this times several hundred, and I get an uneasy\nfeeling when I look at my bookshelves. What use is it to read all\nthese books if I remember so little from them?A few months ago, as I was reading Constance Reid's excellent\nbiography of Hilbert, I figured out if not the answer to this\nquestion, at least something that made me feel better about it.\nShe writes:\nHilbert had no patience with mathematical lectures which filled\nthe students with facts but did not teach them how to frame a\nproblem and solve it. He often used to tell them that \"a perfect\nformulation of a problem is already half its solution.\"\nThat has always seemed to me an important point, and I was even\nmore convinced of it after hearing it confirmed by Hilbert.But how had I come to believe in this idea in the first place?  A\ncombination of my own experience and other things I'd read.  None\nof which I could at that moment remember!  And eventually I'd forget\nthat Hilbert had confirmed it too.  But my increased belief in the\nimportance of this idea would remain something I'd learned from\nthis book, even after I'd forgotten I'd learned it.Reading and experience train your model of the world.  And even if\nyou forget the experience or what you read, its effect on your model\nof the world persists.  Your mind is like a compiled program you've\nlost the source of.  It works, but you don't know why.The place to look for what I learned from Villehardouin's chronicle\nis not what I remember from it, but my mental models of the crusades,\nVenice, medieval culture, siege warfare, and so on.  Which doesn't\nmean I couldn't have read more attentively, but at least the harvest\nof reading is not so miserably small as it might seem.This is one of those things that seem obvious in retrospect.  But\nit was a surprise to me and presumably would be to anyone else who\nfelt uneasy about (apparently) forgetting so much they'd read.Realizing it does more than make you feel a little better about\nforgetting, though.  There are specific implications.For example, reading and experience are usually \"compiled\" at the\ntime they happen, using the state of your brain at that time.  The\nsame book would get compiled differently at different points in\nyour life.  Which means it is very much worth reading important\nbooks multiple times.  I always used to feel some misgivings about\nrereading books.  I unconsciously lumped reading together with work\nlike carpentry, where having to do something again is a sign you\ndid it wrong the first time.  Whereas now the phrase \"already read\"\nseems almost ill-formed.Intriguingly, this implication isn't limited to books.  Technology\nwill increasingly make it possible to relive our experiences.  When\npeople do that today it's usually to enjoy them again (e.g. when\nlooking at pictures of a trip) or to find the origin of some bug in\ntheir compiled code (e.g. when Stephen Fry succeeded in remembering\nthe childhood trauma that prevented him from singing).  But as\ntechnologies for recording and playing back your life improve, it\nmay become common for people to relive experiences without any goal\nin mind, simply to learn from them again as one might when rereading\na book.Eventually we may be able not just to play back experiences but\nalso to index and even edit them. So although not knowing how you\nknow things may seem part of being human, it may not be.Thanks to Sam Altman, Jessica Livingston, and Robert Morris for reading\ndrafts of this."},{"title":"How to Be Silicon Valley","text":"May 2006(This essay is derived from a keynote at Xtech.)Could you reproduce Silicon Valley elsewhere, or is there something\nunique about it?It wouldn't be surprising if it were hard to reproduce in other\ncountries, because you couldn't reproduce it in most of the US\neither.  What does it take to make a silicon valley even here?What it takes is the right people.  If you could get the right ten\nthousand people to move from Silicon Valley to Buffalo, Buffalo\nwould become Silicon Valley.\n[1]That's a striking departure from the past.  Up till a couple decades\nago, geography was destiny for cities.  All great cities were located\non waterways, because cities made money by trade, and water was the\nonly economical way to ship.Now you could make a great city anywhere, if you could get the right\npeople to move there.  So the question of how to make a silicon\nvalley becomes: who are the right people, and how do you get them\nto move?Two TypesI think you only need two kinds of people to create a technology\nhub: rich people and nerds.  They're the limiting reagents in the\nreaction that produces startups, because they're the only ones\npresent when startups get started.  Everyone else will move.Observation bears this out: within the US, towns have become startup\nhubs if and only if they have both rich people and nerds.  Few\nstartups happen in Miami, for example, because although it's full\nof rich people, it has few nerds.  It's not the kind of place nerds\nlike.Whereas Pittsburgh has the opposite problem: plenty of nerds, but\nno rich people.  The top US Computer Science departments are said\nto be MIT, Stanford, Berkeley, and Carnegie-Mellon.  MIT yielded\nRoute 128.  Stanford and Berkeley yielded Silicon Valley.  But\nCarnegie-Mellon?  The record skips at that point.  Lower down the\nlist, the University of Washington yielded a high-tech community\nin Seattle, and the University of Texas at Austin yielded one in\nAustin.  But what happened in Pittsburgh?  And in Ithaca, home of\nCornell, which is also high on the list?I grew up in Pittsburgh and went to college at Cornell, so I can\nanswer for both.  The weather is terrible,  particularly in winter,\nand there's no interesting old city to make up for it, as there is\nin Boston.  Rich people don't want to live in Pittsburgh or Ithaca.\nSo while there are plenty of hackers who could start startups,\nthere's no one to invest in them.Not BureaucratsDo you really need the rich people?  Wouldn't it work to have the\ngovernment invest in the nerds?  No, it would not.  Startup investors\nare a distinct type of rich people.  They tend to have a lot of\nexperience themselves in the technology business.  This (a) helps\nthem pick the right startups, and (b) means they can supply advice\nand connections as well as money.  And the fact that they have a\npersonal stake in the outcome makes them really pay attention.Bureaucrats by their nature are the exact opposite sort of people\nfrom startup investors. The idea of them making startup investments\nis comic.  It would be like mathematicians running Vogue-- or\nperhaps more accurately, Vogue editors running a math journal.\n[2]Though indeed, most things bureaucrats do, they do badly.   We just\ndon't notice usually, because they only have to compete against\nother bureaucrats.  But as startup investors they'd have to compete\nagainst pros with a great deal more experience and motivation.Even corporations that have in-house VC groups generally forbid\nthem to make their own investment decisions.  Most are only allowed\nto invest in deals where some reputable private VC firm is willing\nto act as lead investor.Not BuildingsIf you go to see Silicon Valley, what you'll see are buildings.\nBut it's the people that make it Silicon Valley, not the buildings.\nI read occasionally about attempts to set up \"technology\nparks\" in other places, as if the active ingredient of Silicon\nValley were the office space.  An article about Sophia Antipolis\nbragged that companies there included Cisco, Compaq, IBM, NCR, and\nNortel.  Don't the French realize these aren't startups?Building office buildings for technology companies won't get you a\nsilicon valley, because the key stage in the life of a startup\nhappens before they want that kind of space.  The key stage is when\nthey're three guys operating out of an apartment.  Wherever the\nstartup is when it gets funded, it will stay.  The defining quality\nof Silicon Valley is not that Intel or Apple or Google have offices\nthere, but that they were started there.So if you want to reproduce Silicon Valley, what you need to reproduce\nis those two or three founders sitting around a kitchen table\ndeciding to start a company.  And to reproduce that you need those\npeople.UniversitiesThe exciting thing is, all you need are the people.  If you could\nattract a critical mass of nerds and investors to live somewhere,\nyou could reproduce Silicon Valley.  And both groups are highly\nmobile.  They'll go where life is good.  So what makes a place good\nto them?What nerds like is other nerds.  Smart people will go wherever other\nsmart people are.  And in particular, to great universities.  In\ntheory there could be other ways to attract them, but so far\nuniversities seem to be indispensable.  Within the US, there are\nno technology hubs without first-rate universities-- or at least,\nfirst-rate computer science departments.So if you want to make a silicon valley, you not only need a\nuniversity, but one of the top handful in the world.  It has to be\ngood enough to act as a magnet, drawing the best people from thousands\nof miles away.  And that means it has to stand up to existing magnets\nlike MIT and Stanford.This sounds hard.  Actually it might be easy.  My professor friends,\nwhen they're deciding where they'd like to work, consider one thing\nabove all: the quality of the other faculty.  What attracts professors\nis good colleagues.  So if you managed to recruit, en masse, a\nsignificant number of the best young researchers, you could create\na first-rate university from nothing overnight.  And you could do\nthat for surprisingly little.  If you paid 200 people hiring bonuses\nof $3 million apiece, you could put together a faculty that would\nbear comparison with any in the world.  And from that point the\nchain reaction would be self-sustaining.  So whatever it costs to\nestablish a mediocre university, for an additional half billion or\nso you could have a great one.\n[3]PersonalityHowever, merely creating a new university would not be enough to\nstart a silicon valley. The university is just the seed.  It has\nto be planted in the right soil, or it won't germinate.  Plant it\nin the wrong place, and you just create Carnegie-Mellon.To spawn startups, your university has to be in a town that has\nattractions other than the university.  It has to be a place where\ninvestors want to live, and students want to stay after they graduate.The two like much the same things, because most startup investors\nare nerds themselves.  So what do nerds look for in a town?  Their\ntastes aren't completely different from other people's, because a\nlot of the towns they like most in the US are also big tourist\ndestinations: San Francisco, Boston, Seattle.   But their tastes\ncan't be quite mainstream either, because they dislike other big\ntourist destinations, like New York, Los Angeles, and Las Vegas.There has been a lot written lately about the \"creative class.\" The\nthesis seems to be that as wealth derives increasingly from ideas,\ncities will prosper only if they attract those who have them.  That\nis certainly true; in fact it was the basis of Amsterdam's prosperity\n400 years ago.A lot of nerd tastes they share with the creative class in general.\nFor example, they like well-preserved old neighborhoods instead of\ncookie-cutter suburbs, and locally-owned shops and restaurants\ninstead of national chains.  Like the rest of the creative class,\nthey want to live somewhere with personality.What exactly is personality?  I think it's the feeling that each\nbuilding is the work of a distinct group of people.  A town with\npersonality is one that doesn't feel mass-produced.  So if you want\nto make a startup hub-- or any town to attract the \"creative class\"--\nyou probably have to ban large development projects.\nWhen a large tract has been developed by a single organization, you\ncan always tell.\n[4]Most towns with personality are old, but they don't have to be.\nOld towns have two advantages: they're denser, because they were\nlaid out before cars, and they're more varied, because they were\nbuilt one building at a time.  You could have both now.  Just have\nbuilding codes that ensure density, and ban large scale developments.A corollary is that you have to keep out the biggest developer of\nall: the government.  A government that asks \"How can we build a\nsilicon valley?\" has probably ensured failure by the way they framed\nthe question.  You don't build a silicon valley; you let one grow.NerdsIf you want to attract nerds, you need more than a town with\npersonality.  You need a town with the right personality.  Nerds\nare a distinct subset of the creative class, with different tastes\nfrom the rest.  You can see this most clearly in New York, which\nattracts a lot of creative people, but few nerds.\n[5]What nerds like is the kind of town where people walk around smiling.\nThis excludes LA, where no one walks at all, and also New York,\nwhere people walk, but not smiling. When I was in grad school in\nBoston, a friend came to visit from New York.  On the subway back\nfrom the airport she asked \"Why is everyone smiling?\"  I looked and\nthey weren't smiling.  They just looked like they were compared to\nthe facial expressions she was used to.If you've lived in New York, you know where these facial expressions\ncome from.  It's the kind of place where your mind may be excited,\nbut your body knows it's having a bad time.  People don't so much\nenjoy living there as endure it for the sake of the excitement.\nAnd if you like certain kinds of excitement, New York is incomparable.\nIt's a hub of glamour, a magnet for all the shorter half-life\nisotopes of style and fame.Nerds don't care about glamour, so to them the appeal of New York\nis a mystery.  People who like New York will pay a fortune for a\nsmall, dark, noisy apartment in order to live in a town where the\ncool people are really cool.  A nerd looks at that deal and sees\nonly: pay a fortune for a small, dark, noisy apartment.Nerds will pay a premium to live in a town where the smart people\nare really smart, but you don't have to pay as much for that.  It's\nsupply and demand: glamour is popular, so you have to pay a lot for\nit.Most nerds like quieter pleasures.  They like cafes instead of\nclubs; used bookshops instead of fashionable clothing shops; hiking\ninstead of dancing; sunlight instead of tall buildings.  A nerd's\nidea of paradise is Berkeley or Boulder.YouthIt's the young nerds who start startups, so it's those specifically\nthe city has to appeal to.  The startup hubs in the US are all\nyoung-feeling towns.  This doesn't mean they have to be new.\nCambridge has the oldest town plan in America, but it feels young\nbecause it's full of students.What you can't have, if you want to create a silicon valley, is a\nlarge, existing population of stodgy people.  It would be a waste\nof time to try to reverse the fortunes of a declining industrial town\nlike Detroit or Philadelphia by trying to encourage startups.  Those\nplaces have too much momentum in the wrong direction.  You're better\noff starting with a blank slate in the form of a small town.  Or\nbetter still, if there's a town young people already flock to, that\none.The Bay Area was a magnet for the young and optimistic for decades\nbefore it was associated with technology.  It was a place people\nwent in search of something new.  And so it became synonymous with\nCalifornia nuttiness.  There's still a lot of that there.  If you\nwanted to start a new fad-- a new way to focus one's \"energy,\" for\nexample, or a new category of things not to eat-- the Bay Area would\nbe the place to do it.  But a place that tolerates oddness in the\nsearch for the new is exactly what you want in a startup hub, because\neconomically that's what startups are.  Most good startup ideas\nseem a little crazy; if they were obviously good ideas, someone\nwould have done them already.(How many people are going to want computers in their houses?\nWhat, another search engine?)That's the connection between technology and liberalism.  Without\nexception the high-tech cities in the US are also the most liberal.\nBut it's not because liberals are smarter that this is so.  It's\nbecause liberal cities tolerate odd ideas, and smart people by\ndefinition have odd ideas.Conversely, a town that gets praised for being \"solid\" or representing\n\"traditional values\" may be a fine place to live, but it's never\ngoing to succeed as a startup hub.  The 2004 presidential election,\nthough a disaster in other respects, conveniently supplied us with\na county-by-county\nmap of such places.\n[6]To attract the young, a town must have an intact center.  In most\nAmerican cities the center has been abandoned, and the growth, if\nany, is in the suburbs.  Most American cities have been turned\ninside out. But none of the startup hubs has: not San Francisco,\nor Boston, or Seattle.  They all have intact centers.\n[7]\nMy guess is that no city with a dead center could be turned into a\nstartup hub.  Young people don't want to live in the suburbs.Within the US, the two cities I think could most easily be turned\ninto new silicon valleys are Boulder and Portland.  Both have the\nkind of effervescent feel that attracts the young.  They're each\nonly a great university short of becoming a silicon valley, if they\nwanted to.TimeA great university near an attractive town.  Is that all it takes?\nThat was all it took to make the original Silicon Valley.  Silicon\nValley traces its origins to William Shockley, one of the inventors\nof the transistor.  He did the research that won him the Nobel Prize\nat Bell Labs, but when he started his own company in 1956 he moved\nto Palo Alto to do it.   At the time that was an odd thing to do.\nWhy did he?  Because he had grown up there and remembered how nice\nit was.  Now Palo Alto is suburbia, but then it was a charming\ncollege town-- a charming college town with perfect weather and San\nFrancisco only an hour away.The companies that rule Silicon Valley now are all descended in\nvarious ways from Shockley Semiconductor.  Shockley was a difficult\nman, and in 1957 his top people-- \"the traitorous eight\"-- left to\nstart a new company, Fairchild Semiconductor.  Among them were\nGordon Moore and Robert Noyce, who went on to found Intel, and\nEugene Kleiner, who founded the VC firm Kleiner Perkins.  Forty-two\nyears later, Kleiner Perkins funded Google, and the partner responsible\nfor the deal was John Doerr, who came to Silicon Valley in 1974 to\nwork for Intel.So although a lot of the newest companies in Silicon Valley don't\nmake anything out of silicon, there always seem to be multiple links\nback to Shockley.  There's a lesson here: startups beget startups.\nPeople who work for startups start their own.  People who get rich\nfrom startups fund new ones.  I suspect this kind of organic growth\nis the only way to produce a startup hub, because it's the only way\nto grow the expertise you need.That has two important implications.  The first is that you need\ntime to grow a silicon valley.  The university you could create in\na couple years, but the startup community around it has to grow\norganically.   The cycle time is limited by the time it takes a\ncompany to succeed, which probably averages about five years.The other implication of the organic growth hypothesis is that you\ncan't be somewhat of a startup hub.  You either have a self-sustaining\nchain reaction, or not.  Observation confirms this too: cities\neither have a startup scene, or they don't.  There is no middle\nground.  Chicago has the third largest metropolitan area in America.\nAs source of startups it's negligible compared to Seattle, number 15.The good news is that the initial seed can be quite small.  Shockley\nSemiconductor, though itself not very successful, was big enough.\nIt brought a critical mass of experts in an important new technology\ntogether in a place they liked enough to stay.CompetingOf course, a would-be silicon valley faces an obstacle the original\none didn't: it has to compete with Silicon Valley.  Can that be\ndone?  Probably.One of Silicon Valley's biggest advantages is its venture capital\nfirms.  This was not a factor in Shockley's day, because VC funds\ndidn't exist.  In fact, Shockley Semiconductor and Fairchild\nSemiconductor were not startups at all in our sense.  They were\nsubsidiaries-- of Beckman Instruments and Fairchild Camera and\nInstrument respectively.  Those companies were apparently willing\nto establish subsidiaries wherever the experts wanted to live.Venture investors, however, prefer to fund startups within an hour's\ndrive.  For one, they're more likely to notice startups nearby.\nBut when they do notice startups in other towns they prefer them\nto move.  They don't want to have to travel to attend board meetings,\nand in any case the odds of succeeding are higher in a startup hub.The centralizing effect of venture firms is a double one: they cause\nstartups to form around them, and those draw in more startups through\nacquisitions.  And although the first may be weakening because it's\nnow so cheap to start some startups, the second seems as strong as ever.\nThree of the most admired\n\"Web 2.0\" companies were started outside the usual startup hubs,\nbut two of them have already been reeled in through acquisitions.Such centralizing forces make it harder for new silicon valleys to\nget started.  But by no means impossible.  Ultimately power rests\nwith the founders.  A startup with the best people will beat one\nwith funding from famous VCs, and a startup that was sufficiently\nsuccessful would never have to move.  So a town that\ncould exert enough pull over the right people could resist and\nperhaps even surpass Silicon Valley.For all its power, Silicon Valley has a great weakness: the paradise\nShockley found in 1956 is now one giant parking lot.  San Francisco\nand Berkeley are great, but they're forty miles away.  Silicon\nValley proper is soul-crushing suburban sprawl.  It\nhas fabulous weather, which makes it significantly better than the\nsoul-crushing sprawl of most other American cities.  But a competitor\nthat managed to avoid sprawl would have real leverage.  All a city\nneeds is to be the kind of place the next traitorous eight look at\nand say \"I want to stay here,\" and that would be enough to get the\nchain reaction started.Notes[1]\nIt's interesting to consider how low this number could be\nmade.  I suspect five hundred would be enough, even if they could\nbring no assets with them.  Probably just thirty, if I could pick them,\nwould be enough to turn Buffalo into a significant startup hub.[2]\nBureaucrats manage to allocate research funding moderately\nwell, but only because (like an in-house VC fund) they outsource\nmost of the work of selection.  A professor at a famous university\nwho is highly regarded by his peers will get funding, pretty much\nregardless of the proposal.  That wouldn't work for startups, whose\nfounders aren't sponsored by organizations, and are often unknowns.[3]\nYou'd have to do it all at once, or at least a whole department\nat a time, because people would be more likely to come if they\nknew their friends were.  And you should probably start from scratch,\nrather than trying to upgrade an existing university, or much energy\nwould be lost in friction.[4]\nHypothesis: Any plan in which multiple independent buildings\nare gutted or demolished to be \"redeveloped\" as a single project\nis a net loss of personality for the city, with the exception of\nthe conversion of buildings not previously public, like warehouses.[5]\nA few startups get started in New York, but less\nthan a tenth as many per capita as in Boston, and mostly\nin less nerdy fields like finance and media.[6]\nSome blue counties are false positives (reflecting the\nremaining power of Democractic party machines), but there are no\nfalse negatives.  You can safely write off all the red counties.[7]\nSome \"urban renewal\" experts took a shot at destroying Boston's\nin the 1960s, leaving the area around city hall a bleak wasteland,\nbut most neighborhoods successfully resisted them.Thanks to Chris Anderson, Trevor Blackwell, Marc Hedlund,\nJessica Livingston, Robert Morris, Greg Mcadoo, Fred Wilson,\nand Stephen Wolfram for\nreading drafts of this, and to Ed Dumbill for inviting me to speak.(The second part of this talk became Why Startups\nCondense in America.)"},{"title":"How to Be an Angel Investor","text":"March 2009(This essay is derived from a talk at AngelConf.)When we sold our startup in 1998 I thought one day I'd do some angel\ninvesting.  Seven years later I still hadn't started.  I put it off\nbecause it seemed mysterious and complicated.   It turns out to be\neasier than I expected, and also more interesting.The part I thought was hard, the mechanics of investing, really\nisn't. You give a startup money and they give you stock.  You'll\nprobably get either preferred stock, which means stock with extra\nrights like getting your money back first in a sale, or convertible\ndebt, which means (on paper) you're lending the company money, and\nthe debt converts to stock at the next sufficiently big funding\nround.\n[1]There are sometimes minor tactical advantages to using one or the\nother.  The paperwork for convertible debt is simpler.  But really\nit doesn't matter much which you use.  Don't spend much time worrying\nabout the details of deal terms, especially when you first start\nangel investing.  That's not how you win at this game.  When you\nhear people talking about a successful angel investor, they're not\nsaying \"He got a 4x liquidation preference.\" They're saying \"He\ninvested in Google.\"That's how you win: by investing in the right startups.  That is\nso much more important than anything else that I worry I'm misleading\nyou by even talking about other things.MechanicsAngel investors often syndicate deals, which means they join together\nto invest on the same terms.  In a syndicate there is usually a\n\"lead\" investor who negotiates the terms with the startup.  But not\nalways: sometimes the startup cobbles together a syndicate of\ninvestors who approach them independently, and the startup's lawyer\nsupplies the paperwork.The easiest way to get started in angel investing is to find a\nfriend who already does it, and try to get included in his syndicates.\nThen all you have to do is write checks.Don't feel like you have to join a syndicate, though.  It's not that\nhard to do it yourself.  You can just use the standard\nseries AA\ndocuments Wilson Sonsini and Y Combinator published online.\nYou should of course have your lawyer review everything.  Both you\nand the startup should have lawyers.  But the lawyers don't have\nto create the agreement from scratch.\n[2]When you negotiate terms with a startup, there are two numbers you\ncare about: how much money you're putting in, and the valuation of\nthe company.  The valuation determines how much stock you get.  If\nyou put $50,000 into a company at a pre-money valuation of $1\nmillion, then the post-money valuation is $1.05 million, and you\nget .05/1.05, or 4.76% of the company's stock.If the company raises more money later, the new investor will take\na chunk of the company away from all the existing shareholders just\nas you did.  If in the next round they sell 10% of the company to\na new investor, your 4.76% will be reduced to 4.28%.That's ok.  Dilution is normal.  What saves you from being mistreated\nin future rounds, usually, is that you're in the same boat as the\nfounders.  They can't dilute you without diluting themselves just\nas much.  And they won't dilute themselves unless they end up\nnet ahead.  So in theory, each further\nround of investment leaves you\nwith a smaller share of an even more valuable company, till after\nseveral more rounds you end up with .5% of the company at the point\nwhere it IPOs, and you are very happy because your $50,000 has\nbecome $5 million.\n[3]The agreement by which you invest should have provisions that\nlet you contribute to\nfuture rounds to maintain your percentage.  So it's your choice\nwhether you get diluted.\n[4]\nIf the company does really well,\nyou eventually will, because eventually the valuations will get so\nhigh it's not worth it for you.How much does an angel invest?  That varies enormously, from $10,000\nto hundreds of thousands or in rare cases even millions.  The upper\nbound is obviously the total amount the founders want to raise.\nThe lower bound is 5-10% of the total or $10,000, whichever\nis greater.  A typical angel round these days might be $150,000\nraised from 5 people.Valuations don't vary as much.  For angel rounds it's rare to see\na valuation lower than half a million or higher than 4 or 5 million.\n4 million is starting to be VC territory.How do you decide what valuation to offer?  If you're part of a\nround led by someone else, that problem is solved for you.  But\nwhat if you're investing by yourself?  There's no real answer.\nThere is no rational way to value an early stage startup.  The\nvaluation reflects nothing more than the strength of the company's\nbargaining position.  If they really want you, either because they\ndesperately need money, or you're someone who can help them a lot,\nthey'll let you invest at a low valuation.  If they don't need you,\nit will be higher.  So guess.  The startup may not have any more\nidea what the number should be than you do.\n[5]Ultimately it doesn't matter much.  When angels make a lot of money\nfrom a deal, it's not because they invested at a valuation of $1.5\nmillion instead of $3 million.  It's because the company was really\nsuccessful.I can't emphasize that too much.  Don't get hung up on mechanics\nor deal terms.  What you should spend your time thinking about is\nwhether the company is good.(Similarly, founders also should not get hung up on deal\nterms, but should spend their time thinking about how to make the\ncompany good.)There's a second less obvious component of an angel investment: how\nmuch you're expected to help the startup.  Like the amount you\ninvest, this can vary a lot.  You don't have to do anything if you\ndon't want to; you could simply be a source of money.  Or you can\nbecome a de facto employee of the company.  Just make sure that you\nand the startup agree in advance about roughly how much you'll do\nfor them.Really hot companies sometimes have high standards for angels.  The\nones everyone wants to invest in practically audition investors,\nand only take money from people who are famous and/or will work\nhard for them.  But don't feel like you have to put in a lot of\ntime or you won't get to invest in any good startups.  There is a\nsurprising lack of correlation between how hot a deal a startup is\nand how well it ends up doing.  Lots of hot startups will end up\nfailing, and lots of startups no one likes will end up succeeding.\nAnd the latter are so desperate for money that they'll take it from\nanyone at a low valuation.\n[6]Picking WinnersIt would be nice to be able to pick those out, wouldn't it?  The\npart of angel investing that has most effect on your returns, picking\nthe right companies, is also the hardest.  So you should practically\nignore (or more precisely, archive, in the Gmail sense) everything\nI've told you so far.  You may need to refer to it at some point,\nbut it is not the central issue.The central issue is picking the right startups.  What \"Make something\npeople want\" is for startups, \"Pick the right startups\" is for\ninvestors.  Combined they yield \"Pick the startups that will make\nsomething people want.\"How do you do that?  It's not as simple as picking startups that\nare already making something wildly popular.  By then it's\ntoo late for angels.  VCs will already be onto them.  As an angel,\nyou have to pick startups before they've got a hit—either\nbecause they've made something great but users don't realize it\nyet, like Google early on, or because they're still an iteration\nor two away from the big hit, like Paypal when they were making\nsoftware for transferring money between PDAs.To be a good angel investor, you have to be a good judge of potential.\nThat's what it comes down to.  VCs can be fast followers.  Most of\nthem don't try to predict what will win.  They just try to notice\nquickly when something already is winning.  But angels have to be\nable to predict.\n[7]One interesting consequence of this fact is that there are a lot\nof people out there who have never even made an angel investment\nand yet are already better angel investors than they realize.\nSomeone who doesn't know the first thing about the mechanics of\nventure funding but knows what a successful startup founder looks\nlike is actually far ahead of someone who knows termsheets inside\nout, but thinks\n\"hacker\" means someone who breaks into computers.\nIf you can recognize good startup founders by empathizing with\nthem—if you both resonate at the same frequency—then\nyou may already be a better startup picker than the median professional\nVC.\n[8]Paul Buchheit, for example, started angel investing about a year\nafter me, and he was pretty much immediately as good as me at picking\nstartups.  My extra year of experience was rounding error compared\nto our ability to empathize with founders.What makes a good founder?  If there were a word that meant the\nopposite of hapless, that would be the one.  Bad founders seem\nhapless.  They may be smart, or not, but somehow events overwhelm\nthem and they get discouraged and give up.  Good founders make\nthings happen the way they want.  Which is not to say they force\nthings to happen in a predefined way.  Good founders have a healthy\nrespect for reality.  But they are relentlessly resourceful.  That's\nthe closest I can get to the opposite of hapless.  You want to fund\npeople who are relentlessly resourceful.Notice we started out talking about things, and now we're talking\nabout people.  There is an ongoing debate between investors which\nis more important, the people, or the idea—or more precisely,\nthe market. Some, like Ron Conway, say it's the people—that\nthe idea will change, but the people are the foundation of the\ncompany.  Whereas Marc Andreessen says he'd back ok founders in a\nhot market over great founders in a bad one.\n[9]These two positions are not so far apart as they seem, because good\npeople find good markets.  Bill Gates would probably have ended up\npretty rich even if IBM hadn't happened to drop the PC standard in\nhis lap.I've thought a lot about the disagreement between the investors who\nprefer to bet on people and those who prefer to bet on markets.\nIt's kind of surprising that it even exists.  You'd expect opinions\nto have converged more.But I think I've figured out what's going on.  The three most\nprominent people I know who favor markets are Marc, Jawed Karim,\nand Joe Kraus.  And all three of them, in their own startups,\nbasically flew into a thermal: they hit a market growing so fast\nthat it was all they could do to keep up with it.  That kind of\nexperience is hard to ignore.  Plus I think they underestimate\nthemselves: they think back to how easy it felt to ride that huge\nthermal upward, and they think \"anyone could have done it.\"  But\nthat isn't true; they are not ordinary people.So as an angel investor I think you want to go with Ron Conway and\nbet on people.  Thermals happen, yes, but no one can predict\nthem—not even the founders, and certainly not you as an\ninvestor.  And only good people can ride the thermals if they hit\nthem anyway.Deal FlowOf course the question of how to choose startups presumes you\nhave startups to choose between.  How do you find them?  This is\nyet another problem that gets solved for you by syndicates.  If you\ntag along on a friend's investments, you don't have to find startups.The problem is not finding startups, exactly, but finding a stream\nof reasonably high quality ones.  The traditional way to do this\nis through contacts.  If you're friends with a lot of investors and\nfounders, they'll send deals your way.  The Valley basically runs\non referrals.  And once you start to become known as reliable,\nuseful investor, people will refer lots of deals to you.  I certainly\nwill.There's also a newer way to find startups, which is to come to\nevents like Y Combinator's Demo Day, where a batch of newly created\nstartups presents to investors all at once.   We have two Demo Days\na year, one in March and one in August.  These are basically mass\nreferrals.But events like Demo Day only account for a fraction of matches\nbetween startups and investors.  The personal referral is still the\nmost common route.  So if you want to hear about new startups, the\nbest way to do it is to get lots of referrals.The best way to get lots of referrals is to invest in startups.  No\nmatter how smart and nice you seem, insiders will be reluctant to\nsend you referrals until you've proven yourself by doing a couple\ninvestments.  Some smart, nice guys turn out to be flaky,\nhigh-maintenance investors. But once you prove yourself as a good\ninvestor, the deal flow, as they call it, will increase rapidly in\nboth quality and quantity.  At the extreme, for someone like Ron\nConway, it is basically identical with the deal flow of the whole\nValley.So if you want to invest seriously, the way to get started is to\nbootstrap yourself off your existing connections, be a good investor\nin the startups you meet that way, and eventually you'll start a\nchain reaction.  Good investors are rare, even in Silicon Valley.\nThere probably aren't more than a couple hundred serious angels in the whole\nValley, and yet they're probably the single most important ingredient\nin making the Valley what it is.  Angels are the limiting reagent\nin startup formation.If there are only a couple hundred serious angels in the Valley,\nthen by deciding to become one you could single-handedly make the pipeline\nfor startups in Silicon Valley significantly wider.  That is kind\nof mind-blowing.Being GoodHow do you be a good angel investor?  The first thing you need is\nto be decisive.  When we talk to founders about good and bad\ninvestors, one of the ways we describe the good ones is to say \"he\nwrites checks.\" That doesn't mean the investor says yes to everyone.\nFar from it.  It means he makes up his mind quickly,\nand follows through.  You may be thinking, how hard could that be?\nYou'll see when you try it.  It follows from the nature of angel\ninvesting that the decisions are hard.  You have to guess early,\nat the stage when the most promising ideas still seem counterintuitive,\nbecause if they were obviously good, VCs would already have funded\nthem.Suppose it's 1998.  You come across a startup founded by a couple\ngrad students.  They say they're going to work on Internet search.\nThere are already a bunch of big public companies doing search.\nHow can these grad students possibly compete with them?  And does\nsearch even matter anyway?  All the search engines are trying to\nget people to start calling them \"portals\" instead.  Why would you\nwant to invest in a startup run by a couple of nobodies who are\ntrying to compete with large, aggressive companies in an area they\nthemselves have declared passe?  And yet the grad students seem\npretty smart.  What do you do?There's a hack for being decisive when you're inexperienced: ratchet\ndown the size of your investment till it's an amount you wouldn't\ncare too much about losing.  For every rich person (you probably\nshouldn't try angel investing unless you think of yourself as rich)\nthere's some amount that would be painless, though annoying, to\nlose.  Till you feel comfortable investing, don't invest more than\nthat per startup.For example, if you have $5 million in investable assets, it would\nprobably be painless (though annoying) to lose $15,000.  That's\nless than .3% of your net worth.  So start by making 3 or 4 $15,000\ninvestments.  Nothing will teach you about angel investing like\nexperience.  Treat the first few as an educational expense.  $60,000\nis less than a lot of graduate programs.  Plus you get equity.What's really uncool is to be strategically indecisive: to string\nfounders along while trying to gather more information about the\nstartup's trajectory.\n[10]\nThere's always a temptation to do that,\nbecause you just have so little to go on, but you have to consciously\nresist it.  In the long term it's to your advantage to be good.The other component of being a good angel investor is simply to be\na good person.  Angel investing is not a business where you make\nmoney by screwing people over.  Startups create wealth, and\ncreating wealth is not a zero sum game.  No one has to lose for you\nto win.  In fact, if you mistreat the founders you invest in, they'll\njust get demoralized and the company will do worse.  Plus your\nreferrals will dry up.  So I recommend being good.The most successful angel investors I know are all basically good\npeople.  Once they invest in a company, all they want to do is help\nit.  And they'll help people they haven't invested in too.  When\nthey do favors they don't seem to keep track of them.  It's too\nmuch overhead.  They just try to help everyone, and assume good\nthings will flow back to them somehow. Empirically that seems to\nwork.Notes[1]\nConvertible debt can be either capped at a particular valuation,\nor can be done at a discount to whatever the valuation turns out\nto be when it converts.  E.g. convertible debt at a discount of 30%\nmeans when it converts you get stock as if you'd invested at a 30%\nlower valuation.  That can be useful in cases where you can't or\ndon't want to figure out what the valuation should be.  You leave\nit to the next investor.  On the other hand, a lot of investors\nwant to know exactly what they're getting, so they will only do\nconvertible debt with a cap.[2]\nThe expensive part of creating an agreement from scratch is\nnot writing the agreement, but bickering at several hundred\ndollars an hour over the details.  That's why the series AA paperwork\naims at a middle ground.  You can just start from the compromise\nyou'd have reached after lots of back and forth.When you fund a startup, both your lawyers should be specialists\nin startups.  Do not use ordinary corporate lawyers for this.  Their\ninexperience makes them overbuild: they'll create huge, overcomplicated\nagreements, and spend hours arguing over irrelevant things.In the Valley, the top startup law firms are Wilson Sonsini, Orrick,\nFenwick & West, Gunderson Dettmer, and Cooley Godward.  In Boston\nthe best are Goodwin Procter, Wilmer Hale, and Foley Hoag.[3]\nYour mileage may vary.[4]\nThese anti-dilution provisions also protect you against\ntricks like a later investor trying to steal the company by doing\nanother round that values the company at $1.  If you have a competent\nstartup lawyer handle the deal for you, you should be protected\nagainst such tricks initially.  But it could become a problem later.\nIf a big VC firm wants to invest in the startup after you, they may\ntry to make you take out your anti-dilution protections.  And if\nthey do the startup will be pressuring you to agree.  They'll tell\nyou that if you don't, you're going to kill their deal with the VC.\nI recommend you solve this problem by having a gentlemen's agreement\nwith the founders: agree with them in advance that you're not going\nto give up your anti-dilution protections.  Then it's up to them\nto tell VCs early on.The reason you don't want to give them up is the following scenario.\nThe VCs recapitalize the company, meaning they give it additional\nfunding at a pre-money valuation of zero.  This wipes out the\nexisting shareholders, including both you and the founders.  They\nthen grant the founders lots of options, because they need them to\nstay around, but you get nothing.Obviously this is not a nice thing to do.  It doesn't happen often.\nBrand-name VCs wouldn't recapitalize a company just to steal a few\npercent from an angel.  But there's a continuum here.  A less\nupstanding, lower-tier VC might be tempted to do it to steal a big\nchunk of stock.I'm not saying you should always absolutely refuse to give up your\nanti-dilution protections.  Everything is a negotiation.  If you're\npart of a powerful syndicate, you might be able to give up legal\nprotections and rely on social ones.  If you invest in a deal led\nby a big angel like Ron Conway, for example, you're pretty well\nprotected against being mistreated, because any VC would think twice\nbefore crossing him.  This kind of protection is one of the reasons\nangels like to invest in syndicates.[5]\nDon't invest so much, or at such a low valuation, that you\nend up with an excessively large share of a startup, unless you're\nsure your money will be the last they ever need.  Later stage\ninvestors won't invest in a company if the founders don't have\nenough equity left to motivate them.  I talked to a VC recently who\nsaid he'd met with a company he really liked, but he turned\nthem down because investors already owned more than half of it.\nThose investors probably thought they'd been pretty clever by getting\nsuch a large chunk of this desirable company, but in fact they were\nshooting themselves in the foot.[6]\nAt any given time I know of at least 3 or 4 YC alumni who I\nbelieve will be big successes but who are running on vapor,\nfinancially, because investors don't yet get what they're doing.\n(And no, unfortunately, I can't tell you who they are.  I can't\nrefer a startup to an investor I don't know.)[7]\nThere are some VCs who can predict instead of reacting.  Not\nsurprisingly, these are the most successful ones.[8]\nIt's somewhat sneaky of me to put it this way, because the\nmedian VC loses money.  That's one of the most surprising things\nI've learned about VC while working on Y Combinator.  Only a fraction\nof VCs even have positive returns.  The rest exist to satisfy demand\namong fund managers for venture capital as an asset class.  Learning\nthis explained a lot about some of the VCs I encountered when we\nwere working on Viaweb.[9]\nVCs also generally say they prefer great markets to great\npeople.  But what they're really saying is they want both.  They're\nso selective that they only even consider great people.  So when\nthey say they care above all about big markets, they mean that's\nhow they choose between great people.[10]\nFounders rightly dislike the sort of investor who says he's\ninterested in investing but doesn't want to lead.  There are\ncircumstances where this is an acceptable excuse, but more often\nthan not what it means is \"No, but if you turn out to be a hot deal,\nI want to be able to claim retroactively I said yes.\"If you like a startup enough to invest in it, then invest in it.\nJust use the standard series\nAA terms and write them a check.Thanks to Sam Altman, Paul Buchheit, Jessica Livingston,\nRobert Morris, and Fred Wilson for reading drafts of this.\nComment on this essay."},{"title":"How to Be an Expert in a Changing World","text":"December 2014If the world were static, we could have monotonically increasing\nconfidence in our beliefs.  The more (and more varied) experience\na belief survived, the less likely it would be false.  Most people\nimplicitly believe something like this about their opinions.  And\nthey're justified in doing so with opinions about things that don't\nchange much, like human nature.  But you can't trust your opinions\nin the same way about things that change, which could include\npractically everything else.When experts are wrong, it's often because they're experts on an\nearlier version of the world.Is it possible to avoid that?  Can you protect yourself against\nobsolete beliefs?  To some extent, yes. I spent almost a decade\ninvesting in early stage startups, and curiously enough protecting\nyourself against obsolete beliefs is exactly what you have to do\nto succeed as a startup investor.  Most really good startup ideas\nlook like bad ideas at first, and many of those look bad specifically\nbecause some change in the world just switched them from bad to\ngood.  I spent a lot of time learning to recognize such ideas, and\nthe techniques I used may be applicable to ideas in general.The first step is to have an explicit belief in change.  People who\nfall victim to a monotonically increasing confidence in their\nopinions are implicitly concluding the world is static.  If you\nconsciously remind yourself it isn't, you start to look for change.Where should one look for it?  Beyond the moderately useful\ngeneralization that human nature doesn't change much, the unfortunate\nfact is that change is hard to predict.  This is largely a tautology\nbut worth remembering all the same: change that matters usually\ncomes from an unforeseen quarter.So I don't even try to predict it.  When I get asked in interviews\nto predict the future, I always have to struggle to come up with\nsomething plausible-sounding on the fly, like a student who hasn't\nprepared for an exam.\n[1]\nBut it's not out of laziness that I haven't\nprepared.  It seems to me that beliefs about the future are so\nrarely correct that they usually aren't worth the extra rigidity\nthey impose, and that the best strategy is simply to be aggressively\nopen-minded.  Instead of trying to point yourself in the right\ndirection, admit you have no idea what the right direction is, and\ntry instead to be super sensitive to the winds of change.It's ok to have working hypotheses, even though they may constrain\nyou a bit, because they also motivate you.  It's exciting to chase\nthings and exciting to try to guess answers.  But you have to be\ndisciplined about not letting your hypotheses harden into anything\nmore.\n[2]I believe this passive m.o. works not just for evaluating new ideas\nbut also for having them.  The way to come up with new ideas is not\nto try explicitly to, but to try to solve problems and simply not\ndiscount weird hunches you have in the process.The winds of change originate in the unconscious minds of domain\nexperts.  If you're sufficiently expert in a field, any weird idea\nor apparently irrelevant question that occurs to you is ipso facto\nworth exploring.\n[3]\nWithin Y Combinator, when an idea is described\nas crazy, it's a compliment—in fact, on average probably a\nhigher compliment than when an idea is described as good.Startup investors have extraordinary incentives for correcting\nobsolete beliefs.  If they can realize before other investors that\nsome apparently unpromising startup isn't, they can make a huge\namount of money.  But the incentives are more than just financial.\nInvestors' opinions are explicitly tested: startups come to them\nand they have to say yes or no, and then, fairly quickly, they learn\nwhether they guessed right.  The investors who say no to a Google\n(and there were several) will remember it for the rest of their\nlives.Anyone who must in some sense bet on ideas rather than merely\ncommenting on them has similar incentives.  Which means anyone who\nwants to have such incentives can, by turning their comments into\nbets: if you write about a topic in some fairly durable and public\nform, you'll find you worry much more about getting things right\nthan most people would in a casual conversation.\n[4]Another trick I've found to protect myself against obsolete beliefs\nis to focus initially on people rather than ideas. Though the nature\nof future discoveries is hard to predict, I've found I can predict\nquite well what sort of people will make them.  Good new ideas come\nfrom earnest, energetic, independent-minded people.Betting on people over ideas saved me countless times as an investor.\nWe thought Airbnb was a bad idea, for example. But we could tell\nthe founders were earnest, energetic, and independent-minded.\n(Indeed, almost pathologically so.)  So we suspended disbelief and\nfunded them.This too seems a technique that should be generally applicable.\nSurround yourself with the sort of people new ideas come from.  If\nyou want to notice quickly when your beliefs become obsolete, you\ncan't do better than to be friends with the people whose discoveries\nwill make them so.It's hard enough already not to become the prisoner of your own\nexpertise, but it will only get harder, because change is accelerating.\nThat's not a recent trend; change has been accelerating since the\npaleolithic era.  Ideas beget ideas.  I don't expect that to change.\nBut I could be wrong.Notes[1]\nMy usual trick is to talk about aspects of the present that\nmost people haven't noticed yet.[2]\nEspecially if they become well enough known that people start\nto identify them with you.  You have to be extra skeptical about\nthings you want to believe, and once a hypothesis starts to be\nidentified with you, it will almost certainly start to be in that\ncategory.[3]\nIn practice \"sufficiently expert\" doesn't require one to be\nrecognized as an expert—which is a trailing indicator in any\ncase.  In many fields a year of focused work plus caring a lot would\nbe enough.[4]\nThough they are public and persist indefinitely, comments on\ne.g. forums and places like Twitter seem empirically to work like\ncasual conversation.  The threshold may be whether what you write\nhas a title.Thanks to Sam Altman, Patrick Collison, and Robert Morris\nfor reading drafts of this."},{"title":"How to Convince Investors","text":"August 2013When people hurt themselves lifting heavy things, it's usually\nbecause they try to lift with their back.  The right way to lift\nheavy things is to let your legs do the work.  Inexperienced founders\nmake the same mistake when trying to convince investors.  They try\nto convince with their pitch.  Most would be better off if they let\ntheir startup do the work—if they started by understanding why\ntheir startup is worth investing in, then simply explained this\nwell to investors.Investors are looking for startups that will be very successful.\nBut that test is not as simple as it sounds.  In startups, as in a\nlot of other domains, the distribution of outcomes follows a power\nlaw, but in startups the curve is startlingly steep.  The big\nsuccesses are so big they\ndwarf the rest.  And since there are only\na handful each year (the conventional wisdom is 15), investors treat\n\"big success\" as if it were binary.  Most are interested in you if\nyou seem like you have a chance, however small, of being one of the\n15 big successes, and otherwise not.\n[1](There are a handful of angels who'd be interested in a company\nwith a high probability of being moderately successful.  But angel\ninvestors like big successes too.)How do you seem like you'll be one of the big successes?  You need\nthree things: formidable founders, a promising market, and (usually)\nsome evidence of success so far.FormidableThe most important ingredient is formidable founders.  Most investors\ndecide in the first few minutes whether you seem like a winner or\na loser, and once their opinion is set it's hard to change. [2]\nEvery startup has reasons both to invest and not to invest.  If\ninvestors think you're a winner they focus on the former, and if\nnot they focus on the latter.  For example, it might be a rich\nmarket, but with a slow sales cycle.  If investors are impressed\nwith you as founders, they say they want to invest because it's a\nrich market, and if not, they say they can't invest because of the\nslow sales cycle.They're not necessarily trying to mislead you.  Most investors are\ngenuinely unclear in their own minds why they like or dislike\nstartups.  If you seem like a winner, they'll like your idea more.\nBut don't be too smug about this weakness of theirs, because you\nhave it too; almost everyone does.There is a role for ideas of course.  They're fuel for the fire\nthat starts with liking the founders.  Once investors like you,\nyou'll see them reaching for ideas: they'll be saying \"yes, and you\ncould also do x.\"  (Whereas when they don't like you, they'll be\nsaying \"but what about x?\")But the foundation of convincing investors is to seem formidable,\nand since this isn't a word most people use in conversation much,\nI should explain what it means.  A formidable person is one who\nseems like they'll get what they want, regardless of whatever\nobstacles are in the way.  Formidable is close to confident, except\nthat someone could be confident and mistaken.  Formidable is roughly\njustifiably confident.There are a handful of people who are really good at seeming\nformidable—some because they actually are very formidable and\njust let it show, and others because they are more or less con\nartists.\n[3]\nBut most founders, including many who will go on\nto start very successful companies, are not that good at seeming\nformidable the first time they try fundraising.  What should they\ndo?\n[4]What they should not do is try to imitate the swagger of more\nexperienced founders.  Investors are not always that good at judging\ntechnology, but they're good at judging confidence.  If you try to\nact like something you're not, you'll just end up in an uncanny\nvalley.  You'll depart from sincere, but never arrive at convincing.TruthThe way to seem most formidable as an inexperienced founder is to\nstick to the truth.   How formidable you seem isn't a constant.  It\nvaries depending on what you're saying.  Most people can seem\nconfident when they're saying \"one plus one is two,\" because they\nknow it's true.  The most diffident person would be puzzled and\neven slightly contemptuous if they told a VC \"one plus one is two\"\nand the VC reacted with skepticism.  The magic ability of people\nwho are good at seeming formidable is that they can do this with\nthe sentence \"we're going to make a billion dollars a year.\"  But\nyou can do the same, if not with that sentence with some fairly\nimpressive ones, so long as you convince yourself first.That's the secret.  Convince yourself that your startup is worth\ninvesting in, and then when you explain this to investors they'll\nbelieve you.  And by convince yourself, I don't mean play mind games\nwith yourself to boost your confidence.  I mean truly evaluate\nwhether your startup is worth investing in.  If it isn't, don't try\nto raise money.\n[5]\nBut if it is, you'll be telling the truth\nwhen you tell investors it's worth investing in, and they'll sense\nthat.  You don't have to be a smooth presenter if you understand\nsomething well and tell the truth about it.To evaluate whether your startup is worth investing in, you have\nto be a domain expert.  If you're not a domain expert, you can be\nas convinced as you like about your idea, and it will seem to\ninvestors no more than an instance of the Dunning-Kruger effect.\nWhich in fact it will usually be.  And investors can tell fairly\nquickly whether you're a domain expert by how well you answer their\nquestions.  Know everything about your market.\n[6]Why do founders persist in trying to convince investors of things\nthey're not convinced of themselves?  Partly because we've all been\ntrained to.When my friends Robert Morris and Trevor Blackwell were in grad\nschool, one of their fellow students was on the receiving end of a\nquestion from their faculty advisor that we still quote today.  When\nthe unfortunate fellow got to his last slide, the professor burst\nout:\nWhich one of these conclusions do you actually believe?\nOne of the artifacts of the way schools are organized is that we\nall get trained to talk even when we have nothing to say.  If you\nhave a ten page paper due, then ten pages you must write, even if\nyou only have one page of ideas.  Even if you have no ideas.  You\nhave to produce something.  And all too many startups go into\nfundraising in the same spirit.  When they think it's time to raise\nmoney, they try gamely to make the best case they can for their\nstartup.  Most never think of pausing beforehand to ask whether\nwhat they're saying is actually convincing, because they've all\nbeen trained to treat the need to present as a given—as an area\nof fixed size, over which however much truth they have must needs\nbe spread, however thinly.The time to raise money is not when you need it, or when you reach\nsome artificial deadline like a Demo Day.  It's when you can convince\ninvestors, and not before.\n[7]And unless you're a good con artist, you'll never convince investors\nif you're not convinced yourself.  They're far better at detecting\nbullshit than you are at producing it, even if you're producing it\nunknowingly.  If you try convincing investors before you've convinced\nyourself, you'll be wasting both your time.But pausing first to convince yourself will do more than save you\nfrom wasting your time.  It will force you to organize your thoughts.\nTo convince yourself that your startup is worth investing in, you'll\nhave to figure out why it's worth investing in.   And if you can\ndo that you'll end up with more than added confidence.  You'll also\nhave a provisional roadmap of how to succeed.MarketNotice I've been careful to talk about whether a startup is worth\ninvesting in, rather than whether it's going to succeed.  No one\nknows whether a startup is going to succeed.  And it's a good thing\nfor investors that this is so, because if you could know in advance\nwhether a startup would succeed, the stock price would already be\nthe future price, and there would be no room for investors to make\nmoney.  Startup investors know that every investment is a bet, and\nagainst pretty long odds.So to prove you're worth investing in, you don't have to prove\nyou're going to succeed, just that you're a sufficiently good bet.\nWhat makes a startup a sufficiently good bet?  In addition to\nformidable founders, you need a plausible path to owning a big piece\nof a big market.  Founders think of startups as ideas, but investors\nthink of them as markets.  If there are x number of customers who'd\npay an average of $y per year for what you're making, then the total\naddressable market, or TAM, of your company is $xy.  Investors don't\nexpect you to collect all that money, but it's an upper bound on\nhow big you can get.Your target market has to be big, and it also has to be capturable\nby you.  But the market doesn't have to be big yet, nor do you\nnecessarily have to be in it yet.  Indeed, it's often better to\nstart in a small market that will either turn into a big one or\nfrom which you can move into a big one.  There just has to be some\nplausible sequence of hops that leads to dominating a big market a\nfew years down the line.The standard of plausibility varies dramatically depending on the\nage of the startup.  A three month old company at Demo Day only\nneeds to be a promising experiment that's worth funding to see how\nit turns out.  Whereas a two year old company raising a series A\nround needs to be able to show the experiment worked.\n[8]But every company that gets really big is \"lucky\" in the sense that\ntheir growth is due mostly to some external wave they're riding,\nso to make a convincing case for becoming huge, you have to identify\nsome specific trend you'll benefit from.  Usually you can find this\nby asking \"why now?\"  If this is such a great idea, why hasn't\nsomeone else already done it?  Ideally the answer is that it only\nrecently became a good idea, because something changed, and no one\nelse has noticed yet.Microsoft for example was not going to grow huge selling Basic\ninterpreters.  But by starting there they were perfectly poised to\nexpand up the stack of microcomputer software as microcomputers\ngrew powerful enough to support one. And microcomputers turned out\nto be a really huge wave, bigger than even the most optimistic\nobservers would have predicted in 1975.But while Microsoft did really well and there is thus a temptation\nto think they would have seemed a great bet a few months in, they\nprobably didn't.  Good, but not great.  No company, however successful,\never looks more than a pretty good bet a few months in. Microcomputers\nturned out to be a big deal, and Microsoft both executed well and\ngot lucky.  But it was by no means obvious that this was how things\nwould play out.  Plenty of companies seem as good a bet a few months\nin.  I don't know about startups in general, but at least half the\nstartups we fund could make as good a case as Microsoft could have\nfor being on a path to dominating a large market.  And who can\nreasonably expect more of a startup than that?RejectionIf you can make as good a case as Microsoft could have, will you\nconvince investors?  Not always.  A lot of VCs would have rejected\nMicrosoft.\n[9]\nCertainly some rejected Google.  And getting\nrejected will put you in a slightly awkward position, because as\nyou'll see when you start fundraising, the most common question\nyou'll get from investors will be \"who else is investing?\" What do\nyou say if you've been fundraising for a while and no one has\ncommitted yet?\n[10]The people who are really good at acting formidable often solve\nthis problem by giving investors the impression that while no\ninvestors have committed yet, several are about to.  This is arguably\na permissible tactic.  It's slightly dickish of investors to care\nmore about who else is investing than any other aspect of your\nstartup, and misleading them about how far along you are with other\ninvestors seems the complementary countermove.  It's arguably an\ninstance of scamming a scammer. But I don't recommend this approach\nto most founders, because most founders wouldn't be able to carry\nit off.  This is the single most common lie told to investors, and\nyou have to be really good at lying to tell members of some profession\nthe most common lie they're told.If you're not a master of negotiation (and perhaps even if you are)\nthe best solution is to tackle the problem head-on, and to explain\nwhy investors have turned you down and why they're mistaken.  If\nyou know you're on the right track, then you also know why investors\nwere wrong to reject you. Experienced investors are well aware that\nthe best ideas are also the scariest.  They all know about the VCs\nwho rejected Google.  If instead of seeming evasive and ashamed\nabout having been turned down (and thereby implicitly agreeing with\nthe verdict) you talk candidly about what scared investors about\nyou, you'll seem more confident, which they like, and you'll probably\nalso do a better job of presenting that aspect of your startup.  At\nthe very least, that worry will now be out in the open instead of\nbeing a gotcha left to be discovered by the investors you're currently\ntalking to, who will be proud of and thus attached to their discovery.\n[11]This strategy will work best with the best investors, who are both\nhard to bluff and who already believe most other investors are\nconventional-minded drones doomed always to miss the big outliers.\nRaising money is not like applying to college, where you can assume\nthat if you can get into MIT, you can also get into Foobar State.\nBecause the best investors are much smarter than the rest, and the\nbest startup ideas look initially like\nbad ideas, it's not uncommon\nfor a startup to be rejected by all the VCs except the best ones.\nThat's what happened to Dropbox.  Y Combinator started in Boston,\nand for the first 3 years we ran alternating batches in Boston and\nSilicon Valley.  Because Boston investors were so few and so timid,\nwe used to ship Boston batches out for a second Demo Day in Silicon\nValley.  Dropbox was part of a Boston batch, which means all those\nBoston investors got the first look at Dropbox, and none of them\nclosed the deal.  Yet another backup and syncing thing, they all\nthought.  A couple weeks later, Dropbox raised a series A round\nfrom Sequoia.\n[12]DifferentNot understanding that investors view investments as bets combines\nwith the ten page paper mentality to prevent founders from even\nconsidering the possibility of being certain of what they're saying.\nThey think they're trying to convince investors of something very\nuncertain—that their startup will be huge—and convincing anyone\nof something like that must obviously entail some wild feat of\nsalesmanship.  But in fact when you raise money you're trying to\nconvince investors of something so much less speculative—whether\nthe company has all the elements of a good bet—that you can\napproach the problem in a qualitatively different way.  You can\nconvince yourself, then convince them.And when you convince them, use the same matter-of-fact language\nyou used to convince yourself.  You wouldn't use vague, grandiose\nmarketing-speak among yourselves.  Don't use it with investors\neither.  It not only doesn't work on them, but seems a mark of\nincompetence.  Just be concise.  Many investors explicitly use that\nas a test, reasoning (correctly) that if you can't explain your\nplans concisely, you don't really understand them.  But even investors\nwho don't have a rule about this will be bored and frustrated by\nunclear explanations.\n[13]So here's the recipe for impressing investors when you're not already\ngood at seeming formidable:\nMake something worth investing in. Understand why it's worth investing in. Explain that clearly to investors.\nIf you're saying something you know is true, you'll seem confident\nwhen you're saying it.  Conversely, never let pitching draw you\ninto bullshitting.  As long as you stay on the territory of truth,\nyou're strong.  Make the truth good, then just tell it.Notes[1]\nThere's no reason to believe this number is a constant.  In\nfact it's our explicit goal at Y Combinator to increase it, by\nencouraging people to start startups who otherwise wouldn't have.[2]\nOr more precisely, investors decide whether you're a loser\nor possibly a winner.  If you seem like a winner, they may then,\ndepending on how much you're raising, have several more meetings\nwith you to test whether that initial impression holds up.But if you seem like a loser they're done, at least for the next\nyear or so.  And when they decide you're a loser they usually decide\nin way less than the 50 minutes they may have allotted for the first\nmeeting.  Which explains the astonished stories one always hears\nabout VC inattentiveness.  How could these people make investment\ndecisions well when they're checking their messages during startups'\npresentations?  The solution to that mystery is that they've already\nmade the decision.[3]\nThe two are not mutually exclusive.  There are people who are\nboth genuinely formidable, and also really good at acting that way.[4]\nHow can people who will go on to create giant companies not\nseem formidable early on?  I think the main reason is that their\nexperience so far has trained them to keep their wings folded, as\nit were.  Family, school, and jobs encourage cooperation, not\nconquest.  And it's just as well they do, because even being Genghis\nKhan is probably 99% cooperation.  But the result is that most\npeople emerge from the tube of their upbringing in their early\ntwenties compressed into the shape of the tube.  Some find they\nhave wings and start to spread them.  But this takes a few years.\nIn the beginning even they don't know yet what they're capable of.[5]\nIn fact, change what you're doing.  You're investing your own\ntime in your startup.  If you're not convinced that what you're\nworking on is a sufficiently good bet, why are you even working on\nthat?[6]\nWhen investors ask you a question you don't know the answer\nto, the best response is neither to bluff nor give up, but instead\nto explain how you'd figure out the answer.  If you can work out a\npreliminary answer on the spot, so much the better, but explain\nthat's what you're doing.[7]\nAt YC we try to ensure startups are ready to raise money on\nDemo Day by encouraging them to ignore investors and instead focus\non their companies till about a week before.  That way most reach\nthe stage where they're sufficiently convincing well before Demo\nDay.  But not all do, so we also give any startup that wants to the\noption of deferring to a later Demo Day.[8]\nFounders are often surprised by how much harder it is to raise\nthe next round.  There is a qualitative difference in investors'\nattitudes.  It's like the difference between being judged as a kid\nand as an adult.  The next time you raise money, it's not enough\nto be promising.  You have to be delivering results.So although it works well to show growth graphs at either stage,\ninvestors treat them differently.  At three months, a growth graph\nis mostly evidence that the founders are effective.  At two years,\nit has to be evidence of a promising market and a company tuned to\nexploit it.[9]\nBy this I mean that if the present day equivalent of the 3\nmonth old Microsoft presented at a Demo Day, there would be investors\nwho turned them down.  Microsoft itself didn't raise outside money,\nand indeed the venture business barely existed when they got started\nin 1975.[10]\nThe best investors rarely care who else is investing, but\nmediocre investors almost all do.  So you can use this question as\na test of investor quality.[11]\nTo use this technique, you'll have to find out why investors\nwho rejected you did so, or at least what they claim was the reason.\nThat may require asking, because investors don't always volunteer\na lot of detail.  Make it clear when you ask that you're not trying\nto dispute their decision—just that if there is some weakness in\nyour plans, you need to know about it.  You won't always get a real\nreason out of them, but you should at least try.[12]\nDropbox wasn't rejected by all the East Coast VCs.  There was\none firm that wanted to invest but tried to lowball them.[13]\nAlfred Lin points out that it's doubly important for the\nexplanation of a startup to be clear and concise, because it has\nto convince at one remove: it has to work not just on the partner\nyou talk to, but when that partner re-tells it to colleagues.We consciously optimize for this at YC.  When we work with founders\ncreate a Demo Day pitch, the last step is to imagine how an investor\nwould sell it to colleagues.Thanks to Marc Andreessen, Sam Altman, Patrick Collison, Ron Conway,\nChris Dixon, Alfred Lin, Ben Horowitz, Steve Huffman, Jessica\nLivingston, Greg Mcadoo, Andrew Mason, Geoff Ralston, Yuri Sagalov,\nEmmett Shear, Rajat Suri, Garry Tan, Albert Wenger, Fred Wilson,\nand Qasar Younis for reading drafts of this."},{"title":"How to Disagree","text":"March 2008The web is turning writing into a conversation.  Twenty years ago,\nwriters wrote and readers read.  The web lets readers respond, and\nincreasingly they do—in comment threads, on forums, and in their\nown blog posts.Many who respond to something disagree with it.  That's to be\nexpected.  Agreeing tends to motivate people less than disagreeing.\nAnd when you agree there's less to say.  You could expand on something\nthe author said, but he has probably already explored the\nmost interesting implications.  When you disagree you're entering\nterritory he may not have explored.The result is there's a lot more disagreeing going on, especially\nmeasured by the word.  That doesn't mean people are getting angrier.\nThe structural change in the way we communicate is enough to account\nfor it.  But though it's not anger that's driving the increase in\ndisagreement, there's a danger that the increase in disagreement\nwill make people angrier.  Particularly online, where it's easy to\nsay things you'd never say face to face.If we're all going to be disagreeing more, we should be careful to\ndo it well.  What does it mean to disagree well?   Most readers can\ntell the difference between mere name-calling and a carefully\nreasoned refutation, but I think it would help to put names on the\nintermediate stages.  So here's an attempt at a disagreement\nhierarchy:DH0. Name-calling.This is the lowest form of disagreement, and probably also the most\ncommon.  We've all seen comments like this:\nu r a fag!!!!!!!!!!\nBut it's important to realize that more articulate name-calling has\njust as little weight.  A comment like\nThe author is a self-important dilettante.\nis really nothing more than a pretentious version of \"u r a fag.\"DH1. Ad Hominem.An ad hominem attack is not quite as weak as mere name-calling.  It\nmight actually carry some weight.  For example, if a senator wrote\nan article saying senators' salaries should be increased, one could\nrespond:\nOf course he would say that.  He's a senator.\nThis wouldn't refute the author's argument, but it may at least be\nrelevant to the case.  It's still a very weak form of disagreement,\nthough.  If there's something wrong with the senator's argument,\nyou should say what it is; and if there isn't, what difference does\nit make that he's a senator?Saying that an author lacks the authority to write about a topic\nis a variant of ad hominem—and a particularly useless sort, because\ngood ideas often come from outsiders.  The question is whether the\nauthor is correct or not.  If his lack of authority caused him to\nmake mistakes, point those out.  And if it didn't, it's not a\nproblem.DH2. Responding to Tone.The next level up we start to see responses to the writing, rather\nthan the writer.  The lowest form of these is to disagree with the\nauthor's tone.  E.g.\nI can't believe the author dismisses intelligent design in such\na cavalier fashion.\nThough better than attacking the author, this is still a weak form\nof disagreement.  It matters much more whether the author is wrong\nor right than what his tone is.  Especially since tone is so hard\nto judge.  Someone who has a chip on their shoulder about some topic\nmight be offended by a tone that to other readers seemed neutral.So if the worst thing you can say about something is to criticize\nits tone, you're not saying much.  Is the author flippant, but\ncorrect?  Better that than grave and wrong.  And if the author is\nincorrect somewhere, say where.DH3. Contradiction.In this stage we finally get responses to what was said, rather\nthan how or by whom.  The lowest form of response to an argument\nis simply to state the opposing case, with little or no supporting\nevidence.This is often combined with DH2 statements, as in:\nI can't believe the author dismisses intelligent design in such\na cavalier fashion.  Intelligent design is a legitimate scientific\ntheory.\nContradiction can sometimes have some weight.  Sometimes merely\nseeing the opposing case stated explicitly is enough to see that\nit's right.  But usually evidence will help.DH4. Counterargument.At level 4 we reach the first form of convincing disagreement:\ncounterargument.  Forms up to this point can usually be ignored as\nproving nothing.  Counterargument might prove something.  The problem\nis, it's hard to say exactly what.Counterargument is contradiction plus reasoning and/or evidence.\nWhen aimed squarely at the original argument, it can be convincing.\nBut unfortunately it's common for counterarguments to be aimed at\nsomething slightly different.  More often than not, two people\narguing passionately about something are actually arguing about two\ndifferent things.  Sometimes they even agree with one another, but\nare so caught up in their squabble they don't realize it.There could be a legitimate reason for arguing against something\nslightly different from what the original author said: when you\nfeel they missed the heart of the matter.  But when you do that,\nyou should say explicitly you're doing it.DH5. Refutation.The most convincing form of disagreement is refutation.  It's also\nthe rarest, because it's the most work.  Indeed, the disagreement\nhierarchy forms a kind of pyramid, in the sense that the higher you\ngo the fewer instances you find.To refute someone you probably have to quote them.  You have to\nfind a \"smoking gun,\" a passage in whatever you disagree with that\nyou feel is mistaken, and then explain why it's mistaken.  If you\ncan't find an actual quote to disagree with, you may be arguing\nwith a straw man.While refutation generally entails quoting, quoting doesn't necessarily\nimply refutation.  Some writers quote parts of things they disagree\nwith to give the appearance of legitimate refutation, then follow\nwith a response as low as DH3 or even DH0.DH6. Refuting the Central Point.The force of a refutation depends on what you refute.  The most\npowerful form of disagreement is to refute someone's central point.Even as high as DH5 we still sometimes see deliberate dishonesty,\nas when someone picks out minor points of an argument and refutes\nthose.  Sometimes the spirit in which this is done makes it more\nof a sophisticated form of ad hominem than actual refutation.  For\nexample, correcting someone's grammar, or harping on minor mistakes\nin names or numbers.  Unless the opposing argument actually depends\non such things, the only purpose of correcting them is to\ndiscredit one's opponent.Truly refuting something requires one to refute its central point,\nor at least one of them.  And that means one has to commit explicitly\nto what the central point is.  So a truly effective refutation would\nlook like:\nThe author's main point seems to be x.  As he says:\n<quotation>\nBut this is wrong for the following reasons...\nThe quotation you point out as mistaken need not be the actual\nstatement of the author's main point.  It's enough to refute something\nit depends upon.What It MeansNow we have a way of classifying forms of disagreement.  What good\nis it?  One thing the disagreement hierarchy doesn't give us is\na way of picking a winner.  DH levels merely describe the form of\na statement, not whether it's correct.  A DH6 response could still\nbe completely mistaken.But while DH levels don't set a lower bound on the convincingness\nof a reply, they do set an upper bound.  A DH6 response might be\nunconvincing, but a DH2 or lower response is always unconvincing.The most obvious advantage of classifying the forms of disagreement\nis that it will help people to evaluate what they read.  In particular,\nit will help them to see through intellectually dishonest arguments.\nAn eloquent speaker or writer can give the impression of vanquishing\nan opponent merely by using forceful words.  In fact that is probably\nthe defining quality of a demagogue.  By giving names to the different\nforms of disagreement, we give critical readers a pin for popping\nsuch balloons.Such labels may help writers too.  Most intellectual dishonesty is\nunintentional.  Someone arguing against the tone of something he\ndisagrees with may believe he's really saying something.  Zooming\nout and seeing his current position on the disagreement hierarchy\nmay inspire him to try moving up to counterargument or refutation.But the greatest benefit of disagreeing well is not just that it\nwill make conversations better, but that it will make the people\nwho have them happier.  If you study conversations, you find there\nis a lot more meanness down in DH1 than up in DH6.  You don't have\nto be mean when you have a real point to make.  In fact, you don't\nwant to.  If you have something real to say, being mean just gets\nin the way.If moving up the disagreement hierarchy makes people less mean,\nthat will make most of them happier.  Most people don't really enjoy\nbeing mean; they do it because they can't help it.Thanks to Trevor Blackwell and Jessica Livingston for reading\ndrafts of this.Related:"},{"title":"How to Do Philosophy","text":"September 2007In high school I decided I was going to study philosophy in college.\nI had several motives, some more honorable than others.  One of the\nless honorable was to shock people.  College was regarded as job\ntraining where I grew up, so studying philosophy seemed an impressively\nimpractical thing to do.  Sort of like slashing holes in your clothes\nor putting a safety pin through your ear, which were other forms\nof impressive impracticality then just coming into fashion.But I had some more honest motives as well.  I thought studying\nphilosophy would be a shortcut straight to wisdom.  All the people\nmajoring in other things would just end up with a bunch of domain\nknowledge.  I would be learning what was really what.I'd tried to read a few philosophy books.  Not recent ones; you\nwouldn't find those in our high school library.  But I tried to\nread Plato and Aristotle.  I doubt I believed I understood them,\nbut they sounded like they were talking about something important.\nI assumed I'd learn what in college.The summer before senior year I took some college classes.  I learned\na lot in the calculus class, but I didn't learn much in Philosophy\n101.  And yet my plan to study philosophy remained intact.  It was\nmy fault I hadn't learned anything.  I hadn't read the books we\nwere assigned carefully enough.  I'd give Berkeley's Principles\nof Human Knowledge another shot in college.  Anything so admired\nand so difficult to read must have something in it, if one could\nonly figure out what.Twenty-six years later, I still don't understand Berkeley.  I have\na nice edition of his collected works.  Will I ever read it?  Seems\nunlikely.The difference between then and now is that now I understand why\nBerkeley is probably not worth trying to understand.  I think I see\nnow what went wrong with philosophy, and how we might fix it.WordsI did end up being a philosophy major for most of college.  It\ndidn't work out as I'd hoped.  I didn't learn any magical truths\ncompared to which everything else was mere domain knowledge.  But\nI do at least know now why I didn't.  Philosophy doesn't really\nhave a subject matter in the way math or history or most other\nuniversity subjects do.  There is no core of knowledge one must\nmaster.  The closest you come to that is a knowledge of what various\nindividual philosophers have said about different topics over the\nyears.  Few were sufficiently correct that people have forgotten\nwho discovered what they discovered.Formal logic has some subject matter. I took several classes in\nlogic.  I don't know if I learned anything from them.\n[1]\nIt does seem to me very important to be able to flip ideas around in\none's head: to see when two ideas don't fully cover the space of\npossibilities, or when one idea is the same as another but with a\ncouple things changed.  But did studying logic teach me the importance\nof thinking this way, or make me any better at it?  I don't know.There are things I know I learned from studying philosophy.  The\nmost dramatic I learned immediately, in the first semester of\nfreshman year, in a class taught by Sydney Shoemaker.  I learned\nthat I don't exist.  I am (and you are) a collection of cells that\nlurches around driven by various forces, and calls itself I.  But\nthere's no central, indivisible thing that your identity goes with.\nYou could conceivably lose half your brain and live.  Which means\nyour brain could conceivably be split into two halves and each\ntransplanted into different bodies.  Imagine waking up after such\nan operation.  You have to imagine being two people.The real lesson here is that the concepts we use in everyday life\nare fuzzy, and break down if pushed too hard.  Even a concept as\ndear to us as I.  It took me a while to grasp this, but when I\ndid it was fairly sudden, like someone in the nineteenth century\ngrasping evolution and realizing the story of creation they'd been\ntold as a child was all wrong.\n[2]\nOutside of math there's a limit\nto how far you can push words; in fact, it would not be a bad\ndefinition of math to call it the study of terms that have precise\nmeanings.  Everyday words are inherently imprecise.  They work well\nenough in everyday life that you don't notice.  Words seem to work,\njust as Newtonian physics seems to.  But you can always make them\nbreak if you push them far enough.I would say that this has been, unfortunately for philosophy, the\ncentral fact of philosophy.  Most philosophical debates are not\nmerely afflicted by but driven by confusions over words.  Do we\nhave free will?  Depends what you mean by \"free.\" Do abstract ideas\nexist?  Depends what you mean by \"exist.\"Wittgenstein is popularly credited with the idea that most philosophical\ncontroversies are due to confusions over language.  I'm not sure\nhow much credit to give him.  I suspect a lot of people realized\nthis, but reacted simply by not studying philosophy, rather than\nbecoming philosophy professors.How did things get this way?  Can something people have spent\nthousands of years studying really be a waste of time?  Those are\ninteresting questions.  In fact, some of the most interesting\nquestions you can ask about philosophy.  The most valuable way to\napproach the current philosophical tradition may be neither to get\nlost in pointless speculations like Berkeley, nor to shut them down\nlike Wittgenstein, but to study it as an example of reason gone\nwrong.HistoryWestern philosophy really begins with Socrates, Plato, and Aristotle.\nWhat we know of their predecessors comes from fragments and references\nin later works; their doctrines could be described as speculative\ncosmology that occasionally strays into analysis.  Presumably they\nwere driven by whatever makes people in every other society invent\ncosmologies.\n[3]With Socrates, Plato, and particularly Aristotle, this tradition\nturned a corner.  There started to be a lot more analysis.  I suspect\nPlato and Aristotle were encouraged in this by progress in math.\nMathematicians had by then shown that you could figure things out\nin a much more conclusive way than by making up fine sounding stories\nabout them.\n[4]People talk so much about abstractions now that we don't realize\nwhat a leap it must have been when they first started to.  It was\npresumably many thousands of years between when people first started\ndescribing things as hot or cold and when someone asked \"what is\nheat?\"  No doubt it was a very gradual process.  We don't know if\nPlato or Aristotle were the first to ask any of the questions they\ndid.  But their works are the oldest we have that do this on a large\nscale, and there is a freshness (not to say naivete) about them\nthat suggests some of the questions they asked were new to them,\nat least.Aristotle in particular reminds me of the phenomenon that happens\nwhen people discover something new, and are so excited by it that\nthey race through a huge percentage of the newly discovered territory\nin one lifetime.  If so, that's evidence of how new this kind of\nthinking was.\n[5]This is all to explain how Plato and Aristotle can be very impressive\nand yet naive and mistaken.  It was impressive even to ask the\nquestions they did.  That doesn't mean they always came up with\ngood answers.  It's not considered insulting to say that ancient\nGreek mathematicians were naive in some respects, or at least lacked\nsome concepts that would have made their lives easier.  So I hope\npeople will not be too offended if I propose that ancient philosophers\nwere similarly naive.  In particular, they don't seem to have fully\ngrasped what I earlier called the central fact of philosophy: that\nwords break if you push them too far.\"Much to the surprise of the builders of the first digital computers,\"\nRod Brooks wrote, \"programs written for them usually did not work.\"\n[6]\nSomething similar happened when people first started trying\nto talk about abstractions.  Much to their surprise, they didn't\narrive at answers they agreed upon.  In fact, they rarely seemed\nto arrive at answers at all.They were in effect arguing about artifacts induced by sampling at\ntoo low a resolution.The proof of how useless some of their answers turned out to be is\nhow little effect they have.  No one after reading Aristotle's\nMetaphysics does anything differently as a result.\n[7]Surely I'm not claiming that ideas have to have practical applications\nto be interesting?  No, they may not have to.  Hardy's boast that\nnumber theory had no use whatsoever wouldn't disqualify it.  But\nhe turned out to be mistaken.  In fact, it's suspiciously hard to\nfind a field of math that truly has no practical use.  And Aristotle's\nexplanation of the ultimate goal of philosophy in Book A of the\nMetaphysics implies that philosophy should be useful too.Theoretical KnowledgeAristotle's goal was to find the most general of general principles.\nThe examples he gives are convincing: an ordinary worker builds\nthings a certain way out of habit; a master craftsman can do more\nbecause he grasps the underlying principles.  The trend is clear:\nthe more general the knowledge, the more admirable it is.  But then\nhe makes a mistake—possibly the most important mistake in the\nhistory of philosophy.  He has noticed that theoretical knowledge\nis often acquired for its own sake, out of curiosity, rather than\nfor any practical need.  So he proposes there are two kinds of\ntheoretical knowledge: some that's useful in practical matters and\nsome that isn't.  Since people interested in the latter are interested\nin it for its own sake, it must be more noble.  So he sets as his\ngoal in the Metaphysics the exploration of knowledge that has no\npractical use.  Which means no alarms go off when he takes on grand\nbut vaguely understood questions and ends up getting lost in a sea\nof words.His mistake was to confuse motive and result.  Certainly, people\nwho want a deep understanding of something are often driven by\ncuriosity rather than any practical need.  But that doesn't mean\nwhat they end up learning is useless.  It's very valuable in practice\nto have a deep understanding of what you're doing; even if you're\nnever called on to solve advanced problems, you can see shortcuts\nin the solution of simple ones, and your knowledge won't break down\nin edge cases, as it would if you were relying on formulas you\ndidn't understand.  Knowledge is power.  That's what makes theoretical\nknowledge prestigious.  It's also what causes smart people to be\ncurious about certain things and not others; our DNA is not so\ndisinterested as we might think.So while ideas don't have to have immediate practical applications\nto be interesting, the kinds of things we find interesting will\nsurprisingly often turn out to have practical applications.The reason Aristotle didn't get anywhere in the Metaphysics was\npartly that he set off with contradictory aims: to explore the most\nabstract ideas, guided by the assumption that they were useless.\nHe was like an explorer looking for a territory to the north of\nhim, starting with the assumption that it was located to the south.And since his work became the map used by generations of future\nexplorers, he sent them off in the wrong direction as well.\n[8]\nPerhaps worst of all, he protected them from both the criticism of\noutsiders and the promptings of their own inner compass by establishing\nthe principle that the most noble sort of theoretical knowledge had\nto be useless.The Metaphysics is mostly a failed experiment.  A few ideas from\nit turned out to be worth keeping; the bulk of it has had no effect\nat all.  The Metaphysics is among the least read of all famous\nbooks.  It's not hard to understand the way Newton's Principia\nis, but the way a garbled message is.Arguably it's an interesting failed experiment.  But unfortunately\nthat was not the conclusion Aristotle's successors derived from\nworks like the Metaphysics.\n[9]\nSoon after, the western world\nfell on intellectual hard times.  Instead of version 1s to be\nsuperseded, the works of Plato and Aristotle became revered texts\nto be mastered and discussed.  And so things remained for a shockingly\nlong time.  It was not till around 1600 (in Europe, where the center\nof gravity had shifted by then) that one found people confident\nenough to treat Aristotle's work as a catalog of mistakes.  And\neven then they rarely said so outright.If it seems surprising that the gap was so long, consider how little\nprogress there was in math between Hellenistic times and the\nRenaissance.In the intervening years an unfortunate idea took hold:  that it\nwas not only acceptable to produce works like the Metaphysics,\nbut that it was a particularly prestigious line of work, done by a\nclass of people called philosophers.  No one thought to go back and\ndebug Aristotle's motivating argument.  And so instead of correcting\nthe problem Aristotle discovered by falling into it—that you can\neasily get lost if you talk too loosely about very abstract ideas—they\ncontinued to fall into it.The SingularityCuriously, however, the works they produced continued to attract\nnew readers.  Traditional philosophy occupies a kind of singularity\nin this respect.  If you write in an unclear way about big ideas,\nyou produce something that seems tantalizingly attractive to\ninexperienced but intellectually ambitious students.  Till one knows\nbetter, it's hard to distinguish something that's hard to understand\nbecause the writer was unclear in his own mind from something like\na mathematical proof that's hard to understand because the ideas\nit represents are hard to understand.  To someone who hasn't learned\nthe difference, traditional philosophy seems extremely attractive:\nas hard (and therefore impressive) as math, yet broader in scope.\nThat was what lured me in as a high school student.This singularity is even more singular in having its own defense\nbuilt in.  When things are hard to understand, people who suspect\nthey're nonsense generally keep quiet.  There's no way to prove a\ntext is meaningless.  The closest you can get is to show that the\nofficial judges of some class of texts can't distinguish them from\nplacebos.\n[10]And so instead of denouncing philosophy, most people who suspected\nit was a waste of time just studied other things.  That alone is\nfairly damning evidence, considering philosophy's claims.  It's\nsupposed to be about the ultimate truths. Surely all smart people\nwould be interested in it, if it delivered on that promise.Because philosophy's flaws turned away the sort of people who might\nhave corrected them, they tended to be self-perpetuating.  Bertrand\nRussell wrote in a letter in 1912:\nHitherto the people attracted to philosophy have been mostly those\nwho loved the big generalizations, which were all wrong, so that\nfew people with exact minds have taken up the subject.\n[11]\nHis response was to launch Wittgenstein at it, with dramatic results.I think Wittgenstein deserves to be famous not for the discovery\nthat most previous philosophy was a waste of time, which judging\nfrom the circumstantial evidence must have been made by every smart\nperson who studied a little philosophy and declined to pursue it\nfurther, but for how he acted in response.\n[12]\nInstead of quietly\nswitching to another field, he made a fuss, from inside.  He was\nGorbachev.The field of philosophy is still shaken from the fright Wittgenstein\ngave it.\n[13]\nLater in life he spent a lot of time talking about\nhow words worked.  Since that seems to be allowed, that's what a\nlot of philosophers do now.  Meanwhile, sensing a vacuum in the\nmetaphysical speculation department, the people who used to do\nliterary criticism have been edging Kantward, under new names like\n\"literary theory,\" \"critical theory,\" and when they're feeling\nambitious, plain \"theory.\"  The writing is the familiar word salad:\nGender is not like some of the other grammatical modes which\nexpress precisely a mode of conception without any reality that\ncorresponds to the conceptual mode, and consequently do not express\nprecisely something in reality by which the intellect could be\nmoved to conceive a thing the way it does, even where that motive\nis not something in the thing as such.\n[14]\nThe singularity I've described is not going away.  There's a market\nfor writing that sounds impressive and can't be disproven. There\nwill always be both supply and demand.  So if one group abandons\nthis territory, there will always be others ready to occupy it.A ProposalWe may be able to do better.  Here's an intriguing possibility.\nPerhaps we should do what Aristotle meant to do, instead of what\nhe did.  The goal he announces in the Metaphysics seems one worth\npursuing: to discover the most general truths.  That sounds good.\nBut instead of trying to discover them because they're useless,\nlet's try to discover them because they're useful.I propose we try again, but that we use that heretofore despised\ncriterion, applicability, as a guide to keep us from wondering\noff into a swamp of abstractions.  Instead of trying to answer the\nquestion:\nWhat are the most general truths?\nlet's try to answer the question\nOf all the useful things we can say, which are the most general?\nThe test of utility I propose is whether we cause people who read\nwhat we've written to do anything differently afterward.  Knowing\nwe have to give definite (if implicit) advice will keep us from\nstraying beyond the resolution of the words we're using.The goal is the same as Aristotle's; we just approach it from a\ndifferent direction.As an example of a useful, general idea, consider that of the\ncontrolled experiment.  There's an idea that has turned out to be\nwidely applicable.  Some might say it's part of science, but it's\nnot part of any specific science; it's literally meta-physics (in\nour sense of \"meta\").   The idea of evolution is another. It turns\nout to have quite broad applications—for example, in genetic\nalgorithms and even product design.  Frankfurt's distinction between\nlying and bullshitting seems a promising recent example.\n[15]These seem to me what philosophy should look like: quite general\nobservations that would cause someone who understood them to do\nsomething differently.Such observations will necessarily be about things that are imprecisely\ndefined.  Once you start using words with precise meanings, you're\ndoing math.  So starting from utility won't entirely solve the\nproblem I described above—it won't flush out the metaphysical\nsingularity.  But it should help.  It gives people with good\nintentions a new roadmap into abstraction.  And they may thereby\nproduce things that make the writing of the people with bad intentions\nlook bad by comparison.One drawback of this approach is that it won't produce the sort of\nwriting that gets you tenure.  And not just because it's not currently\nthe fashion.  In order to get tenure in any field you must not\narrive at conclusions that members of tenure committees can disagree\nwith.  In practice there are two kinds of solutions to this problem.\nIn math and the sciences, you can prove what you're saying, or at\nany rate adjust your conclusions so you're not claiming anything\nfalse (\"6 of 8 subjects had lower blood pressure after the treatment\").\nIn the humanities you can either avoid drawing any definite conclusions\n(e.g. conclude that an issue is a complex one), or draw conclusions\nso narrow that no one cares enough to disagree with you.The kind of philosophy I'm advocating won't be able to take either\nof these routes.  At best you'll be able to achieve the essayist's\nstandard of proof, not the mathematician's or the experimentalist's.\nAnd yet you won't be able to meet the usefulness test without\nimplying definite and fairly broadly applicable conclusions.  Worse\nstill, the usefulness test will tend to produce results that annoy\npeople: there's no use in telling people things they already believe,\nand people are often upset to be told things they don't.Here's the exciting thing, though.  Anyone can do this.  Getting\nto general plus useful by starting with useful and cranking up the\ngenerality may be unsuitable for junior professors trying to get\ntenure, but it's better for everyone else, including professors who\nalready have it.  This side of the mountain is a nice gradual slope.\nYou can start by writing things that are useful but very specific,\nand then gradually make them more general.  Joe's has good burritos.\nWhat makes a good burrito?  What makes good food?  What makes\nanything good?  You can take as long as you want.  You don't have\nto get all the way to the top of the mountain.  You don't have to\ntell anyone you're doing philosophy.If it seems like a daunting task to do philosophy, here's an\nencouraging thought.  The field is a lot younger than it seems.\nThough the first philosophers in the western tradition lived about\n2500 years ago, it would be misleading to say the field is 2500\nyears old, because for most of that time the leading practitioners\nweren't doing much more than writing commentaries on Plato or\nAristotle while watching over their shoulders for the next invading\narmy.  In the times when they weren't, philosophy was hopelessly\nintermingled with religion.  It didn't shake itself free till a\ncouple hundred years ago, and even then was afflicted by the\nstructural problems I've described above.  If I say this, some will\nsay it's a ridiculously overbroad and uncharitable generalization,\nand others will say it's old news, but here goes: judging from their\nworks, most philosophers up to the present have been wasting their\ntime.  So in a sense the field is still at the first step.\n[16]That sounds a preposterous claim to make.  It won't seem so\npreposterous in 10,000 years.  Civilization always seems old, because\nit's always the oldest it's ever been.  The only way to say whether\nsomething is really old or not is by looking at structural evidence,\nand structurally philosophy is young; it's still reeling from the\nunexpected breakdown of words.Philosophy is as young now as math was in 1500.  There is a lot\nmore to discover.Notes\n[1]\nIn practice formal logic is not much use, because despite\nsome progress in the last 150 years we're still only able to formalize\na small percentage of statements.  We may never do that much better,\nfor the same reason 1980s-style \"knowledge representation\" could\nnever have worked; many statements may have no representation more\nconcise than a huge, analog brain state.[2]\nIt was harder for Darwin's contemporaries to grasp this than\nwe can easily imagine.  The story of creation in the Bible is not\njust a Judeo-Christian concept; it's roughly what everyone must\nhave believed since before people were people.  The hard part of\ngrasping evolution was to realize that species weren't, as they\nseem to be, unchanging, but had instead evolved from different,\nsimpler organisms over unimaginably long periods of time.Now we don't have to make that leap.  No one in an industrialized\ncountry encounters the idea of evolution for the first time as an\nadult.  Everyone's taught about it as a child, either as truth or\nheresy.[3]\nGreek philosophers before Plato wrote in verse.  This must\nhave affected what they said.  If you try to write about the nature\nof the world in verse, it inevitably turns into incantation.  Prose\nlets you be more precise, and more tentative.[4]\nPhilosophy is like math's\nne'er-do-well brother.  It was born when Plato and Aristotle looked\nat the works of their predecessors and said in effect \"why can't\nyou be more like your brother?\"  Russell was still saying the same\nthing 2300 years later.Math is the precise half of the most abstract ideas, and philosophy\nthe imprecise half.  It's probably inevitable that philosophy will\nsuffer by comparison, because there's no lower bound to its precision.\nBad math is merely boring, whereas bad philosophy is nonsense.  And\nyet there are some good ideas in the imprecise half.[5]\nAristotle's best work was in logic and zoology, both of which\nhe can  be said to have invented.  But the most dramatic departure\nfrom his predecessors was a new, much more analytical style of\nthinking.  He was arguably the first scientist.[6]\nBrooks, Rodney, Programming in Common Lisp, Wiley, 1985, p.\n94.[7]\nSome would say we depend on Aristotle more than we realize,\nbecause his ideas were one of the ingredients in our common culture.\nCertainly a lot of the words we use have a connection with Aristotle,\nbut it seems a bit much to suggest that we wouldn't have the concept\nof the essence of something or the distinction between matter and\nform if Aristotle hadn't written about them.One way to see how much we really depend on Aristotle would be to\ndiff European culture with Chinese: what ideas did European culture\nhave in 1800 that Chinese culture didn't, in virtue of Aristotle's\ncontribution?[8]\nThe meaning of the word \"philosophy\" has changed over time.\nIn ancient times it covered a broad range of topics, comparable in\nscope to our \"scholarship\" (though without the methodological\nimplications).  Even as late as Newton's time it included what we\nnow call \"science.\"  But core of the subject today is still what\nseemed to Aristotle the core: the attempt to discover the most\ngeneral truths.Aristotle didn't call this \"metaphysics.\"  That name got assigned\nto it because the books we now call the Metaphysics came after\n(meta = after) the Physics in the standard edition of Aristotle's\nworks compiled by Andronicus of Rhodes three centuries later.  What\nwe call \"metaphysics\" Aristotle called \"first philosophy.\"[9]\nSome of Aristotle's immediate successors may have realized\nthis, but it's hard to say because most of their works are lost.[10]\nSokal, Alan, \"Transgressing the Boundaries: Toward a Transformative\nHermeneutics of Quantum Gravity,\" Social Text 46/47, pp. 217-252.Abstract-sounding nonsense seems to be most attractive when it's\naligned with some axe the audience already has to grind.  If this\nis so we should find it's most popular with groups that are (or\nfeel) weak.  The powerful don't need its reassurance.[11]\nLetter to Ottoline Morrell, December 1912.  Quoted in:Monk, Ray, Ludwig Wittgenstein: The Duty of Genius, Penguin, 1991,\np. 75.[12]\nA preliminary result, that all metaphysics between Aristotle\nand 1783 had been a waste of time, is due to I. Kant.[13]\nWittgenstein asserted a sort of mastery to which the inhabitants\nof early 20th century Cambridge seem to have been peculiarly\nvulnerable—perhaps partly because so many had been raised religious\nand then stopped believing, so had a vacant space in their heads\nfor someone to tell them what to do (others chose Marx or Cardinal\nNewman), and partly because a quiet, earnest place like Cambridge\nin that era had no natural immunity to messianic figures, just as\nEuropean politics then had no natural immunity to dictators.[14]\nThis is actually from the Ordinatio of Duns Scotus (ca.\n1300), with \"number\" replaced by \"gender.\"  Plus ca change.Wolter, Allan (trans), Duns Scotus: Philosophical Writings, Nelson,\n1963, p. 92.[15]\nFrankfurt, Harry, On Bullshit,  Princeton University Press,\n2005.[16]\nSome introductions to philosophy now take the line that\nphilosophy is worth studying as a process rather than for any\nparticular truths you'll learn.  The philosophers whose works they\ncover would be rolling in their graves at that.  They hoped they\nwere doing more than serving as examples of how to argue: they hoped\nthey were getting results.  Most were wrong, but it doesn't seem\nan impossible hope.This argument seems to me like someone in 1500 looking at the lack\nof results achieved by alchemy and saying its value was as a process.\nNo, they were going about it wrong.  It turns out it is possible\nto transmute lead into gold (though not economically at current\nenergy prices), but the route to that knowledge was to\nbacktrack and try another approach.Thanks to Trevor Blackwell, Paul Buchheit, Jessica Livingston,\nRobert Morris, Mark Nitzberg, and Peter Norvig for reading drafts of this."},{"title":"How to Do What You Love","text":"January 2006To do something well you have to like it.   That idea is not exactly\nnovel.  We've got it down to four words: \"Do what you love.\"  But\nit's not enough just to tell people that.  Doing what you love is\ncomplicated.The very idea is foreign to what most of us learn as kids.  When I\nwas a kid, it seemed as if work and fun were opposites by definition.\nLife had two states: some of the time adults were making you do\nthings, and that was called work; the rest of the time you could\ndo what you wanted, and that was called playing.  Occasionally the\nthings adults made you do were fun, just as, occasionally, playing\nwasn't—for example, if you fell and hurt yourself.  But except\nfor these few anomalous cases, work was pretty much defined as\nnot-fun.And it did not seem to be an accident. School, it was implied, was\ntedious because it was preparation for grownup work.The world then was divided into two groups, grownups and kids.\nGrownups, like some kind of cursed race, had to work.  Kids didn't,\nbut they did have to go to school, which was a dilute version of\nwork meant to prepare us for the real thing.  Much as we disliked\nschool, the grownups all agreed that grownup work was worse, and\nthat we had it easy.Teachers in particular all seemed to believe implicitly that work\nwas not fun.  Which is not surprising: work wasn't fun for most of\nthem.  Why did we have to memorize state capitals instead of playing\ndodgeball?  For the same reason they had to watch over a bunch of\nkids instead of lying on a beach.  You couldn't just do what you\nwanted.I'm not saying we should let little kids do whatever they want.\nThey may have to be made to work on certain things.  But if we make\nkids work on dull stuff, it might be wise to tell them that tediousness\nis not the defining quality of work, and indeed that the reason\nthey have to work on dull stuff now is so they can work on more\ninteresting stuff later.\n[1]Once, when I was about 9 or 10, my father told me I could be whatever\nI wanted when I grew up, so long as I enjoyed it.  I remember that\nprecisely because it seemed so anomalous.  It was like being told\nto use dry water.  Whatever I thought he meant, I didn't think he\nmeant work could literally be fun—fun like playing.  It\ntook me years to grasp that.JobsBy high school, the prospect of an actual job was on the horizon.\nAdults would sometimes come to speak to us about their work, or we\nwould go to see them at work.  It was always understood that they\nenjoyed what they did.  In retrospect I think one may have: the\nprivate jet pilot.  But I don't think the bank manager really did.The main reason they all acted as if they enjoyed their work was\npresumably the upper-middle class convention that you're supposed\nto.  It would not merely be bad for your career to say that you\ndespised your job, but a social faux-pas.Why is it conventional to pretend to like what you do?  The first\nsentence of this essay explains that.  If you have to like something\nto do it well, then the most successful people will all like what\nthey do.  That's where the upper-middle class tradition comes from.\nJust as houses all over America are full of\nchairs\nthat are, without\nthe owners even knowing it, nth-degree imitations of chairs designed\n250 years ago for French kings, conventional attitudes about work\nare, without the owners even knowing it, nth-degree imitations of\nthe attitudes of people who've done great things.What a recipe for alienation.  By the time they reach an age to\nthink about what they'd like to do, most kids have been thoroughly\nmisled about the idea of loving one's work.  School has trained\nthem to regard work as an unpleasant duty.  Having a job is said\nto be even more onerous than schoolwork.  And yet all the adults\nclaim to like what they do.  You can't blame kids for thinking \"I\nam not like these people; I am not suited to this world.\"Actually they've been told three lies: the stuff they've been taught\nto regard as work in school is not real work; grownup work is not\n(necessarily) worse than schoolwork; and many of the adults around\nthem are lying when they say they like what they do.The most dangerous liars can be the kids' own parents.  If you take\na boring job to give your family a high standard of living, as so\nmany people do, you risk infecting your kids with the idea that\nwork is boring.\n[2]\nMaybe it would be better for kids in this one\ncase if parents were not so unselfish.  A parent who set an example\nof loving their work might help their kids more than an expensive\nhouse.\n[3]It was not till I was in college that the idea of work finally broke\nfree from the idea of making a living.  Then the important question\nbecame not how to make money, but what to work on.  Ideally these\ncoincided, but some spectacular boundary cases (like Einstein in\nthe patent office) proved they weren't identical.The definition of work was now to make some original contribution\nto the world, and in the process not to starve.  But after the habit\nof so many years my idea of work still included a large component\nof pain.  Work still seemed to require discipline, because only\nhard problems yielded grand results, and hard problems couldn't\nliterally be fun.   Surely one had to force oneself to work on them.If you think something's supposed to hurt, you're less likely to\nnotice if you're doing it wrong.  That about sums up my experience\nof graduate school.BoundsHow much are you supposed to like what you do?  Unless you\nknow that, you don't know when to stop searching. And if, like most\npeople, you underestimate it, you'll tend to stop searching too\nearly.  You'll end up doing something chosen for you by your parents,\nor the desire to make money, or prestige—or sheer inertia.Here's an upper bound: Do what you love doesn't mean, do what you\nwould like to do most this second.  Even Einstein probably\nhad moments when he wanted to have a cup of coffee, but told himself\nhe ought to finish what he was working on first.It used to perplex me when I read about people who liked what they\ndid so much that there was nothing they'd rather do.  There didn't\nseem to be any sort of work I liked that much.  If I had a\nchoice of (a) spending the next hour working on something or (b)\nbe teleported to Rome and spend the next hour wandering about, was\nthere any sort of work I'd prefer?  Honestly, no.But the fact is, almost anyone would rather, at any given moment,\nfloat about in the Carribbean, or have sex, or eat some delicious\nfood, than work on hard problems.  The rule about doing what you\nlove assumes a certain length of time.  It doesn't mean, do what\nwill make you happiest this second, but what will make you happiest\nover some longer period, like a week or a month.Unproductive pleasures pall eventually.  After a while you get tired\nof lying on the beach.  If you want to stay happy, you have to do\nsomething.As a lower bound, you have to like your work more than any unproductive\npleasure.  You have to like what you do enough that the concept of\n\"spare time\" seems mistaken.  Which is not to say you have to spend\nall your time working.  You can only work so much before you get\ntired and start to screw up.  Then you want to do something else—even something mindless.  But you don't regard this time as the\nprize and the time you spend working as the pain you endure to earn\nit.I put the lower bound there for practical reasons.  If your work\nis not your favorite thing to do, you'll have terrible problems\nwith procrastination.  You'll have to force yourself to work,  and\nwhen you resort to that the results are distinctly inferior.To be happy I think you have to be doing something you not only\nenjoy, but admire.  You have to be able to say, at the end, wow,\nthat's pretty cool.  This doesn't mean you have to make something.\nIf you learn how to hang glide, or to speak a foreign language\nfluently, that will be enough to make you say, for a while at least,\nwow, that's pretty cool.  What there has to be is a test.So one thing that falls just short of the standard, I think, is\nreading books.  Except for some books in math and the hard sciences,\nthere's no test of how well you've read a book, and that's why\nmerely reading books doesn't quite feel like work.  You have to do\nsomething with what you've read to feel productive.I think the best test is one Gino Lee taught me: to try to do things\nthat would make your friends say wow.  But it probably wouldn't\nstart to work properly till about age 22, because most people haven't\nhad a big enough sample to pick friends from before then.SirensWhat you should not do, I think, is worry about the opinion of\nanyone beyond your friends.  You shouldn't worry about prestige.\nPrestige is the opinion of the rest of the world.  When you can ask\nthe opinions of people whose judgement you respect, what does it\nadd to consider the opinions of people you don't even know?\n[4]This is easy advice to give.  It's hard to follow, especially when\nyou're young.\n[5]\nPrestige is like a powerful magnet that warps\neven your beliefs about what you enjoy.  It causes you to work not\non what you like, but what you'd like to like.That's what leads people to try to write novels, for example.  They\nlike reading novels.  They notice that people who write them win\nNobel prizes.  What could be more wonderful, they think, than to\nbe a novelist?  But liking the idea of being a novelist is not\nenough; you have to like the actual work of novel-writing if you're\ngoing to be good at it; you have to like making up elaborate lies.Prestige is just fossilized inspiration.  If you do anything well\nenough, you'll make it prestigious.  Plenty of things we now\nconsider prestigious were anything but at first.  Jazz comes to\nmind—though almost any established art form would do.   So just\ndo what you like, and let prestige take care of itself.Prestige is especially dangerous to the ambitious.  If you want to\nmake ambitious people waste their time on errands, the way to do\nit is to bait the hook with prestige.  That's the recipe for getting\npeople to give talks, write forewords, serve on committees, be\ndepartment heads, and so on.  It might be a good rule simply to\navoid any prestigious task. If it didn't suck, they wouldn't have\nhad to make it prestigious.Similarly, if you admire two kinds of work equally, but one is more\nprestigious, you should probably choose the other.  Your opinions\nabout what's admirable are always going to be slightly influenced\nby prestige, so if the two seem equal to you, you probably have\nmore genuine admiration for the less prestigious one.The other big force leading people astray is money.  Money by itself\nis not that dangerous.  When something pays well but is regarded\nwith contempt, like telemarketing, or prostitution, or personal\ninjury litigation, ambitious people aren't tempted by it.  That\nkind of work ends up being done by people who are \"just trying to\nmake a living.\"  (Tip: avoid any field whose practitioners say\nthis.)  The danger is when money is combined with prestige, as in,\nsay, corporate law, or medicine.  A comparatively safe and prosperous\ncareer with some automatic baseline prestige is dangerously tempting\nto someone young, who hasn't thought much about what they really\nlike.The test of whether people love what they do is whether they'd do\nit even if they weren't paid for it—even if they had to work at\nanother job to make a living.  How many corporate lawyers would do\ntheir current work if they had to do it for free, in their spare\ntime, and take day jobs as waiters to support themselves?This test is especially helpful in deciding between different kinds\nof academic work, because fields vary greatly in this respect.  Most\ngood mathematicians would work on math even if there were no jobs\nas math professors, whereas in the departments at the other end of\nthe spectrum, the availability of teaching jobs is the driver:\npeople would rather be English professors than work in ad agencies,\nand publishing papers is the way you compete for such jobs.  Math\nwould happen without math departments, but it is the existence of\nEnglish majors, and therefore jobs teaching them, that calls into\nbeing all those thousands of dreary papers about gender and identity\nin the novels of Conrad.  No one does\nthat\nkind of thing for fun.The advice of parents will tend to err on the side of money.  It\nseems safe to say there are more undergrads who want to be novelists\nand whose parents want them to be doctors than who want to be doctors\nand whose parents want them to be novelists.  The kids think their\nparents are \"materialistic.\" Not necessarily.  All parents tend to\nbe more conservative for their kids than they would for themselves,\nsimply because, as parents, they share risks more than rewards.  If\nyour eight year old son decides to climb a tall tree, or your teenage\ndaughter decides to date the local bad boy, you won't get a share\nin the excitement, but if your son falls, or your daughter gets\npregnant, you'll have to deal with the consequences.DisciplineWith such powerful forces leading us astray, it's not surprising\nwe find it so hard to discover what we like to work on.  Most people\nare doomed in childhood by accepting the axiom that work = pain.\nThose who escape this are nearly all lured onto the rocks by prestige\nor money.  How many even discover something they love to work on?\nA few hundred thousand, perhaps, out of billions.It's hard to find work you love; it must be, if so few do.  So don't\nunderestimate this task.  And don't feel bad if you haven't succeeded\nyet.  In fact, if you admit to yourself that you're discontented,\nyou're a step ahead of most people, who are still in denial.  If\nyou're surrounded by colleagues who claim to enjoy work that you\nfind contemptible, odds are they're lying to themselves.  Not\nnecessarily, but probably.Although doing great work takes less discipline than people think—because the way to do great work is to find something you like so\nmuch that you don't have to force yourself to do it—finding\nwork you love does usually require discipline.   Some people are\nlucky enough to know what they want to do when they're 12, and just\nglide along as if they were on railroad tracks.  But this seems the\nexception.  More often people who do great things have careers with\nthe trajectory of a ping-pong ball.  They go to school to study A,\ndrop out and get a job doing B, and then become famous for C after\ntaking it up on the side.Sometimes jumping from one sort of work to another is a sign of\nenergy, and sometimes it's a sign of laziness.  Are you dropping\nout, or boldly carving a new path?  You often can't tell yourself.\nPlenty of people who will later do great things seem to be disappointments\nearly on, when they're trying to find their niche.Is there some test you can use to keep yourself honest?  One is to\ntry to do a good job at whatever you're doing, even if you don't\nlike it.  Then at least you'll know you're not using dissatisfaction\nas an excuse for being lazy.  Perhaps more importantly, you'll get\ninto the habit of doing things well.Another test you can use is: always produce.  For example, if you\nhave a day job you don't take seriously because you plan to be a\nnovelist, are you producing?  Are you writing pages of fiction,\nhowever bad?  As long as you're producing, you'll know you're not\nmerely using the hazy vision of the grand novel you plan to write\none day as an opiate.  The view of it will be obstructed by the all\ntoo palpably flawed one you're actually writing.\"Always produce\" is also a heuristic for finding the work you love.\nIf you subject yourself to that constraint, it will automatically\npush you away from things you think you're supposed to work on,\ntoward things you actually like.  \"Always produce\" will discover\nyour life's work the way water, with the aid of gravity, finds the\nhole in your roof.Of course, figuring out what you like to work on doesn't mean you\nget to work on it.  That's a separate question.  And if you're\nambitious you have to keep them separate: you have to make a conscious\neffort to keep your ideas about what you want from being contaminated\nby what seems possible.\n[6]It's painful to keep them apart, because it's painful to observe\nthe gap between them. So most people pre-emptively lower their\nexpectations.  For example, if you asked random people on the street\nif they'd like to be able to draw like Leonardo, you'd find most\nwould say something like \"Oh, I can't draw.\"  This is more a statement\nof intention than fact; it means, I'm not going to try.  Because\nthe fact is, if you took a random person off the street and somehow\ngot them to work as hard as they possibly could at drawing for the\nnext twenty years, they'd get surprisingly far.  But it would require\na great moral effort; it would mean staring failure in the eye every\nday for years.  And so to protect themselves people say \"I can't.\"Another related line you often hear is that not everyone can do\nwork they love—that someone has to do the unpleasant jobs.  Really?\nHow do you make them?  In the US the only mechanism for forcing\npeople to do unpleasant jobs is the draft, and that hasn't been\ninvoked for over 30 years.  All we can do is encourage people to\ndo unpleasant work, with money and prestige.If there's something people still won't do, it seems as if society\njust has to make do without.  That's what happened with domestic\nservants.  For millennia that was the canonical example of a job\n\"someone had to do.\"  And yet in the mid twentieth century servants\npractically disappeared in rich countries, and the rich have just\nhad to do without.So while there may be some things someone has to do, there's a good\nchance anyone saying that about any particular job is mistaken.\nMost unpleasant jobs would either get automated or go undone if no\none were willing to do them.Two RoutesThere's another sense of \"not everyone can do work they love\"\nthat's all too true, however.  One has to make a living, and it's\nhard to get paid for doing work you love.  There are two routes to\nthat destination:\nThe organic route: as you become more eminent, gradually to\nincrease the parts of your job that you like at the expense of\nthose you don't.The two-job route: to work at things you don't like to get money\nto work on things you do.\nThe organic route is more common.  It happens naturally to anyone\nwho does good work.  A young architect has to take whatever work\nhe can get, but if he does well he'll gradually be in a position\nto pick and choose among projects.  The disadvantage of this route\nis that it's slow and uncertain.  Even tenure is not real freedom.The two-job route has several variants depending on how long you\nwork for money at a time.  At one extreme is the \"day job,\" where\nyou work regular hours at one job to make money, and work on what\nyou love in your spare time.  At the other extreme you work at\nsomething till you make enough not to\nhave to work for money again.The two-job route is less common than the organic route, because\nit requires a deliberate choice.  It's also more dangerous.  Life\ntends to get more expensive as you get older, so it's easy to get\nsucked into working longer than you expected at the money job.\nWorse still, anything you work on changes you.  If you work too\nlong on tedious stuff, it will rot your brain.  And the best paying\njobs are most dangerous, because they require your full attention.The advantage of the two-job route is that it lets you jump over\nobstacles.  The landscape of possible jobs isn't flat; there are\nwalls of varying heights between different kinds of work.\n[7]\nThe trick of maximizing the parts of your job that you like can get you\nfrom architecture to product design, but not, probably, to music.\nIf you make money doing one thing and then work on another, you\nhave more freedom of choice.Which route should you take?  That depends on how sure you are of\nwhat you want to do, how good you are at taking orders, how much\nrisk you can stand, and the odds that anyone will pay (in your\nlifetime) for what you want to do.  If you're sure of the general\narea you want to work in and it's something people are likely to\npay you for, then you should probably take the organic route.  But\nif you don't know what you want to work on, or don't like to take\norders, you may want to take the two-job route, if you can stand\nthe risk.Don't decide too soon.  Kids who know early what they want to do\nseem impressive, as if they got the answer to some math question\nbefore the other kids.  They have an answer, certainly, but odds\nare it's wrong.A friend of mine who is a quite successful doctor complains constantly\nabout her job.  When people applying to medical school ask her for\nadvice, she wants to shake them and yell \"Don't do it!\"  (But she\nnever does.) How did she get into this fix?  In high school she\nalready wanted to be a doctor.  And she is so ambitious and determined\nthat she overcame every obstacle along the way—including,\nunfortunately, not liking it.Now she has a life chosen for her by a high-school kid.When you're young, you're given the impression that you'll get\nenough information to make each choice before you need to make it.\nBut this is certainly not so with work.  When you're deciding what\nto do, you have to operate on ridiculously incomplete information.\nEven in college you get little idea what various types of work are\nlike.  At best you may have a couple internships, but not all jobs\noffer internships, and those that do don't teach you much more about\nthe work than being a batboy teaches you about playing baseball.In the design of lives, as in the design of most other things, you\nget better results if you use flexible media.  So unless you're\nfairly sure what you want to do, your best bet may be to choose a\ntype of work that could turn into either an organic or two-job\ncareer.  That was probably part of the reason I chose computers.\nYou can be a professor, or make a lot of money, or morph it into\nany number of other kinds of work.It's also wise, early on, to seek jobs that let you do many different\nthings, so you can learn faster what various kinds of work are like.\nConversely, the extreme version of the two-job route is dangerous\nbecause it teaches you so little about what you like.  If you work\nhard at being a bond trader for ten years, thinking that you'll\nquit and write novels when you have enough money, what happens when\nyou quit and then discover that you don't actually like writing\nnovels?Most people would say, I'd take that problem.  Give me a million\ndollars and I'll figure out what to do.  But it's harder than it\nlooks.  Constraints give your life shape.  Remove them and most\npeople have no idea what to do: look at what happens to those who\nwin lotteries or inherit money.  Much as everyone thinks they want\nfinancial security, the happiest people are not those who have it,\nbut those who like what they do.  So a plan that promises freedom\nat the expense of knowing what to do with it may not be as good as\nit seems.Whichever route you take, expect a struggle.  Finding work you love\nis very difficult.  Most people fail.  Even if you succeed, it's\nrare to be free to work on what you want till your thirties or\nforties.  But if you have the destination in sight you'll be more\nlikely to arrive at it.  If you know you can love work, you're in\nthe home stretch, and if you know what work you love, you're\npractically there.Notes[1]\nCurrently we do the opposite: when we make kids do boring work,\nlike arithmetic drills, instead of admitting frankly that it's\nboring, we try to disguise it with superficial decorations.[2]\nOne father told me about a related phenomenon: he found himself\nconcealing from his family how much he liked his work.  When he\nwanted to go to work on a saturday, he found it easier to say that\nit was because he \"had to\" for some reason, rather than admitting\nhe preferred to work than stay home with them.[3]\nSomething similar happens with suburbs.  Parents move to suburbs\nto raise their kids in a safe environment, but suburbs are so dull\nand artificial that by the time they're fifteen the kids are convinced\nthe whole world is boring.[4]\nI'm not saying friends should be the only audience for your\nwork.  The more people you can help, the better.  But friends should\nbe your compass.[5]\nDonald Hall said young would-be poets were mistaken to be so\nobsessed with being published.  But you can imagine what it would\ndo for a 24 year old to get a poem published in The New Yorker.\nNow to people he meets at parties he's a real poet.  Actually he's\nno better or worse than he was before, but to a clueless audience\nlike that, the approval of an official authority makes all the\ndifference.   So it's a harder problem than Hall realizes.  The\nreason the young care so much about prestige is that the people\nthey want to impress are not very discerning.[6]\nThis is isomorphic to the principle that you should prevent\nyour beliefs about how things are from being contaminated by how\nyou wish they were.  Most people let them mix pretty promiscuously.\nThe continuing popularity of religion is the most visible index of\nthat.[7]\nA more accurate metaphor would be to say that the graph of jobs\nis not very well connected.Thanks to Trevor Blackwell, Dan Friedman, Sarah Harlin,\nJessica Livingston, Jackie McDonough, Robert Morris, Peter Norvig,\nDavid Sloo, and Aaron Swartz\nfor reading drafts of this."},{"title":"How to Do What You Love (Old Version)","text":"January 2006To do something well you have to like it.   That idea is not exactly\nnovel.  We've got it down to four words: \"Do what you love.\"  But\nit's not enough just to tell people that.  Doing what you love is\ncomplicated.The very idea is foreign to what most of us learn as kids.  When I\nwas a kid, it seemed as if work and fun were opposites by definition.\nLife had two states: some of the time adults were making you do\nthings, and that was called work; the rest of the time you could\ndo what you wanted, and that was called playing.  Occasionally the\nthings adults made you do were fun, just as, occasionally, playing\nwasn't-- for example, if you fell and hurt yourself.  But except\nfor these few anomalous cases, work was pretty much defined as\nnot-fun.And it did not seem to be an accident. School, it was implied, was\ntedious because it was preparation for grownup work.The world then was divided into two groups, grownups and kids.\nGrownups, like some kind of cursed race, had to work.  Kids didn't,\nbut they did have to go to school, which was a dilute version of\nwork meant to prepare us for the real thing.  Much as we disliked\nschool, the grownups all agreed that grownup work was worse, and\nthat we had it easy.Teachers in particular all seemed to believe implicitly that work\nwas not fun.  Which is not surprising: work wasn't fun for most\nof them.  Why did we have to memorize state capitals instead of\nplaying dodgeball?  For the same reason they had to watch over a\nbunch of kids instead of lying on a beach.  You couldn't just do\nwhat you wanted.I'm not saying we should let little kids do whatever they want.\nThey may have to be made to work on certain things.  But if we make\nkids work on dull stuff, it might be wise to tell them that tediousness\nis not the defining quality of work, and indeed that the reason\nthey have to work on dull stuff now is so they can work on more\ninteresting stuff later.\n[1]Once, when I was about 9 or 10, my father told me I could be whatever\nI wanted when I grew up, so long as I enjoyed it.  I remember that\nprecisely because it seemed so anomalous.  It was like being told\nto use dry water.Whatever I thought he meant, I didn't think he meant work could\nliterally be fun-- fun like playing.  In fact, I went through\nseveral variants of work = pain over the next 15 years before I\nrealized that the right way to interpret statements about work being\nfun was simply literally.JobsBy high school I had a theory about what he'd meant, but a mistaken\none.  By then everyone was talking about \"aptitude.\"  Some people\nwere cut out to be car mechanics, and some to be doctors and lawyers.\nSo enjoyable work was literally engaging: the shape of the work\nengaged the gears in your particular brain.  But it was still work,\nin the sense of not being what you'd choose to do in your free time.\nThe whole concept of \"free time\" presumes that.Occasionally adults would come to speak to us about their work, or\nwe would go to see them at work.  It was always understood that\nthey enjoyed what they did.  In retrospect I think one may have:\nthe private jet pilot.  But I don't think the bank manager really\ndid.The main reason they all acted as if they enjoyed their work was\npresumably the upper-middle class convention that you're supposed\nto.  It would not merely be bad for your career to say that you\ndespised your job, but a social faux-pas.  That's a working-class\nattitude.Why is it conventional to pretend to like what you do?  The first\nsentence of this essay explains that.  If you have to like something\nto do it well, then the most successful people will all like what\nthey do.  That's where the upper-middle class tradition comes from.\nJust as houses all over\nAmerica are full of\nchairs\nthat are, without the owners even knowing\nit, nth-degree imitations of chairs designed 250 years ago for\nFrench kings, conventional attitudes about work are, without the\nowners even knowing it, nth-degree imitations of the attitudes of\npeople who've done great things.What a recipe for alienation.  By the time they reach an age to\nthink about what they'd like to do, most kids have been thoroughly\nmisled about the idea of loving one's work.  School has trained\nthem to regard work as an unpleasant duty.  Having a job is said\nto be even more onerous than schoolwork.  And yet all the adults\nclaim to like what they do.  You can't blame kids for thinking \"I\nam not like these people; I am not suited to this world.\"Actually they've been told three lies: the stuff they've been taught\nto regard as work in school is not real work; grownup work is not\n(necessarily) worse than schoolwork; and many of the adults around\nthem are lying when they say they like what they do.The most dangerous liars can be the kids' own parents.  If you take\na boring job to give your family a high standard of living, as so\nmany people do, you risk infecting your kids with the idea that\nwork is boring.\n[2]\nMaybe it would be better for kids in this one\ncase if parents were not so unselfish.  A parent who set an example\nof loving their work might help their kids more than an expensive\nhouse.\n[3]Fortunately toward the end of high school I began to detect some\nnew ideas emanating from college.  I remember vividly when an older\nfriend who was majoring in English in college was asked what he was\ngoing to \"do with that.\" I don't remember his exact words, but his\nreply was the standard line about liberal education:\nthat the purpose of college is not job training, but to learn.This of course seems a cliche now (and not even true), but at the\ntime it was a revelation.  Suddenly there was a huge and very\nexciting crack in the glum doctrine of school = work = pain that\nI'd always taken for granted.In college the idea of work finally broke free from the idea of\nmaking a living.  Now the important question was not how to make\nmoney, but what to work on.  Ideally these coincided, but some\nspectacular boundary cases (like Einstein in the patent office)\nproved they weren't identical.School was not job training.  It was work training.And the new definition of work was now to make some original\ncontribution to the world, and in the process not to starve.  But\nafter the habit of so many years my idea of work still included a\nlarge component of pain.  Work still seemed to require discipline,\nbecause only hard problems yielded grand results, and hard problems\ncouldn't literally be fun.   Surely one had to force oneself to\nwork on them.If you think something's supposed to hurt, you're less likely to\nnotice if you're doing it wrong.  That about sums up my experience\nof graduate school.BoundsHow much are you supposed to like what you do?  Unless you know\nthat, you don't know when to stop searching. And if, like most\npeople, you underestimate it, you'll tend to stop searching too\nearly.  You'll end up doing something chosen for you by your parents,\nor the desire to make money, or prestige-- or sheer inertia.I have a good deal of experience working at things I liked to varying\ndegrees, so I'll take a shot at answering this question.Here's an upper bound: Do what you love doesn't mean, do what you\nwould like to do most this second.  Even Einstein probably had\nmoments when he wanted to have a cup of coffee, but told himself\nhe ought to finish what he was working on first.It used to perplex me when I read about people who liked what they\ndid so much that there was nothing they'd rather do.  There didn't\nseem to be any sort of work I liked that much.  If I had a choice\nof (a) spending the next hour working on something or (b) be\nteleported to Rome and spend the next hour wandering about, was\nthere any sort of work I'd prefer?  Honestly, no.  And in\nfact I could think of a lot of things I'd rather spend the next\nhour doing than any kind of work.  Ergo I must be a loser.But the fact is, almost anyone would rather, at any given moment,\nfloat about in the Carribbean, or have sex, or eat some delicious\nfood, than work on hard problems.  The rule about doing what you\nlove assumes a certain length of time.  It doesn't mean, do what\nwill make you happiest this second, but what will make you happiest\nover some longer period, like a week or a month.Unproductive pleasures pall eventually.  After a while you get tired\nof lying on the beach.  If you want to stay happy, you have to do\nsomething.As a lower bound, you have to like your work more than any unproductive\npleasure.  You have to like what you do enough that the concept of\n\"spare time\" seems mistaken.  Which is not to say you have to spend\nall your time working.  You can only work so much before you get\ntired and start to screw up.  Then you want to do something else--\neven something mindless.  But you don't regard this time as the\nprize and the time you spend working as the pain you endure to earn\nit.I put the lower bound there for practical reasons.  If your work\nis not your favorite thing to do, you'll have terrible problems\nwith procrastination.  You'll have to force yourself to work.\nAnd when you downshift into that mode, the results\nare distinctly inferior, like an OS paging, or a country whose\ncurrency is so debased that people revert to barter.To be happy I think you have to be doing something you admire.  You\nhave to be able to say, at the end, wow, that's pretty cool.  This\ndoesn't mean you have to make something.  If you learn how to hang\nglide, or to speak a foreign language fluently, that will be enough\nto make you say, for a while at least, wow, that's pretty cool.What there has to be is a test.  There is automatically when you\nmake anything-- the test of how it comes out-- but there's also a\ndefinite test in learning to hang glide or learning a language.\nYou could make hang gliding or learning languages your life's work\nif you liked either enough.One thing that falls just short of the standard, I think, is reading\nbooks.  Except for some books in math and the hard sciences, there\nis no test of how well you've read a book, and that's why merely\nreading books doesn't quite feel like work.  You have to do something\nwith what you've read to feel productive.I think the best test is to try to do things that would make your\nfriends say wow.  I learned this test about ten years ago from Gino\nLee, and I haven't found a better one.  But it does assume that\nyou've collected the right friends.  It probably wouldn't start to\nwork properly till about age 22, because most people haven't had a\nbig enough sample to pick friends from before then.Why do you need friends at all?  Because you can't trust your own\njudgement.  At least I can't, and I'm pretty strong-willed.  When\nI make something new, I can't tell if it's any good; I'm too close\nto it.\n[4]PrestigeWhat you should not do, I think, is worry about the opinion of\nanyone beyond your friends.  You shouldn't worry about prestige.\nPrestige is the opinion of the rest of the world.  When you can ask\nthe opinions of people whose judgement you respect, what does it\nadd to consider the opinions of people you don't even know?This is easy advice to give.  It's hard to follow, especially when\nyou're young.\n[5]\nPrestige is like a powerful magnet that warps\neven your beliefs about what you enjoy.  It causes you to work not\non what you like, but what you'd like to like.That's what leads people to try to write novels, for example.  They\nlike reading novels.  They notice that people who write them win\nNobel prizes.  What could be more wonderful, they think, than to\nbe a novelist?  But liking the idea of being a novelist is not\nenough; you have to like the actual work of novel-writing if you're\ngoing to be good at it; you have to like making up elaborate lies.Prestige is just fossilized inspiration.  If you do anything well\nenough, you'll make it prestigious.  Plenty of things we now\nconsider prestigious were anything but at first.  Jazz comes to\nmind-- though almost any established art form would do.   So just\ndo what you like, and let prestige take care of itself.Prestige is so effective at distracting the ambitious that society\nhas evolved many ways to use it for this purpose.  If you want to\nmake ambitious people waste their time on errands, the way to do\nit is to bait the hook with prestige.  That's the recipe for getting\npeople to give talks, write forewords, serve on committees, be\ndepartment heads, and so on.  This pattern is so common that it\nmight be a good rule simply to avoid any prestigious task. If it\ndidn't suck, they wouldn't have had to make it prestigious.Similarly, if you admire two kinds of work equally, but one is more\nprestigious, you should probably choose the other.  Your opinions\nabout what's admirable are always going to be slightly influenced\nby prestige, so if the two seem equal to you, you probably have\nmore genuine admiration for the less prestigious one.MoneyThe other big force leading people astray is money.  Money by itself\nis not that dangerous.  When something pays well but is regarded\nwith contempt, like telemarketing, or prostitution, or personal\ninjury litigation, ambitious people aren't tempted by it.  That\nkind of work ends up being done by people who are \"just trying to\nmake a living.\"  (Tip: avoid any field whose practitioners say\nthis.)  The danger is when money is combined with prestige, as in,\nsay, corporate law, or medicine.The prospect of a comparatively safe and prosperous career with\nsome automatic baseline prestige is dangerously tempting to someone\nyoung who hasn't thought much about what they really like.  And the\nhigh initial cost makes it hard to change your mind later.  I suspect\nnot all doctors and lawyers love what they do.The test of whether people love what they do is whether they'd do\nit even if they weren't paid for it-- even if they had to work at\nanother job to make a living.  How many corporate lawyers would do\ntheir current work if they had to do it for free, in their spare\ntime, and take day jobs as waiters to support themselves?This test is especially helpful in deciding between different kinds\nof academic work, because different fields vary greatly in this\nrespect.  Most good mathematicians would work on math even if there\nwere no jobs as math professors, whereas in the departments at the\nother end of the spectrum, the availability of teaching jobs is the\ndriver: people would rather be English professors than work in ad\nagencies, and publishing papers is the way you compete for such\njobs.  Math would happen without math departments, but it is the\nexistence of English majors, and therefore jobs teaching them, that\ncalls into being all those thousands of dreary papers about gender\nand identity in the novels of Conrad.  No one does\nthat\nkind of thing for fun.The advice of parents will tend to err on the side of money.  It\nseems safe to say there are more undergrads who want to be novelists\nand whose parents want them to be doctors than who want to be doctors\nand whose parents want them to be novelists.  The kids think their\nparents are \"materialistic.\" Not necessarily.  All parents tend to\nbe more conservative for their kids than they would for themselves,\nsimply because, as parents, they share risks more than rewards.  If\nyour eight year old son decides to climb a tall tree, or your teenage\ndaughter decides to date the local bad boy, you won't get a share\nin the excitement, but if your son falls, or your daughter gets\npregnant, you'll have to deal with the consequences.Not all the conservatism of parental advice comes from this bias,\nthough.  Some comes from being older and knowing what's what.  If\nyou want to factor out just the bias that comes from the weird\nrisk/reward balance they have as parents, try asking the advice of\nsomeone who's as experienced as your parents, but who doesn't feel\nobliged to take care of you if you get hurt.SearchWith such powerful forces leading us astray, it's not surprising\nwe find it so hard to discover what we like to work on.  Most people\nare doomed in childhood by accepting the axiom that work = pain.\nThose who escape this are nearly all lured onto the rocks by prestige\nor money.  How many even discover something they love to work on?\nA few hundred thousand, perhaps, out of billions.That's an important thing to bear in mind.  It's very hard to find\nwork you love.  It must be, if so few do.  So don't underestimate\nthis task.  And don't feel bad if you haven't succeeded yet.  It's\nnot a sign there's something wrong with you if you have trouble\nfinding the work you love, any more than it is if you're out of\nbreath climbing a 30% grade.In fact, if you admit to yourself that you're discontented, you're\na step ahead of most people, who are still in denial.  If you're\nsurrounded by colleagues who claim to enjoy work that you find\ncontemptible, odds are they're lying to themselves.  Not necessarily,\nbut probably.Although doing great work takes less discipline than people think--\nbecause the way to do great work is to find something you like so\nmuch that you don't have to force yourself to do it-- finding\nwork you love does usually require discipline.   Some people are\nlucky enough to know what they want to do when they're twelve, and\njust glide along as if they were on railroad tracks.  But this seems\nthe exception.  More often people who do great things have careers\nwith the trajectory of a ping-pong ball.  They go to school to study\nA, drop out and get a job doing B, and then become famous for C\nafter taking it up on the side.Jumping from one sort of work to another is an odd thing.  Sometimes\nit's a sign of discipline, and sometimes it's a sign of laziness.\nAre you dropping out, or boldy carving a new path?  You often can't\ntell yourself.  Plenty of people who will later do great things\nseem to their friends and family and even themselves to be\ndisappointments early on, when they're trying to find the work they\nlove.Is there some test you can use to keep yourself honest?  One is to\ntry to do a good job at whatever you're doing, even if you don't\nlike it.  Then at least you'll know you're not using dissatisfaction\nas an excuse for being lazy.  Perhaps more importantly, you'll get\ninto the habit of doing things well.Another test you can use is: always produce.  For example, if you\nhave a day job that you don't take seriously because you plan to\nbe a novelist, are you producing?  Are you writing pages of fiction,\nhowever bad?  As long as you're producing, you'll know you're not\nmerely using the hazy vision of the grand novel you plan to write\none day as an opiate.  The view of it will be obstructed by the all\ntoo palpably flawed one you're actually writing.\"Always produce\" is more than just a test of earnestness though.\nIt's also a heuristic for finding the work you love.  If you subject\nyourself to that constraint, it will automatically push you away\nfrom things you think you're supposed to work on, toward things you\nactually like.  \"Always produce\" will discover your life's work the\nway water, with the aid of gravity, finds the hole in your roof.Of course, figuring out what you like to work on doesn't mean you\nget to work on it.  That's a separate question.  And if you're\nambitious you have to keep them separate: you have to make a conscious\neffort to keep your ideas about what you want from being contaminated\nby what seems possible.\n[6]It's painful to keep them apart, because it's painful to observe\nthe gap between them. So most people don't; most people pre-emptively\nlower their expectations for themselves.  For example, if you asked\nrandom people on the street if they'd like to be able to draw like\nLeonardo, you'd find most would say something like \"Oh, I can't\ndraw.\"  When people say something like this, it's more a statement\nof intention than fact; it means, I'm not going to try.  Because\nthe fact is, if you took a random person off the street and somehow\ngot them to work as hard as they possibly could at drawing for the\nnext twenty years, they'd get surprisingly far.  But it would require\nan enormous moral effort; it would mean staring failure in the eye\nevery day for years.  And so to protect themselves people say \"I\ncan't.\"Another related line you often hear is that not everyone can do\nwork they love-- that someone has to do the unpleasant jobs.  Really?\nHow do you make them?  In the US the only mechanism for forcing\npeople to do unpleasant jobs is the draft, and that hasn't been\ninvoked for over 30 years.  All we can do is encourage people to\ndo unpleasant work, with money and prestige.If there's something people still won't do, it seems as if society\njust has to make do without.  That's what happened with domestic\nservants.  For millennia that was the canonical example of a job\n\"someone had to do.\"  And yet in the mid twentieth century servants\npractically disappeared in rich countries, because the people who\nused to take such jobs found better opportunities.  And the rich\nhave just had to do without.So while there may be some things someone has to do, there's a good\nchance anyone saying that about any particular job is mistaken.\nMost unpleasant jobs would either get automated or go undone if no\none were willing to do them.RoutesThere is another sense of \"not everyone can do work they love\"\nthat's all too true, however.  One has to make a living, and it's\nhard to get paid for doing work you love.  There are two routes to\nthat destination:\nthe organic route: as you become more eminent, gradually to\nincrease the parts of your job that you like at the expense of\nthose you don't.the two-job route: to work at things you don't like to get money\nto work on things you do.\nThe organic route is probably more common.  It tends to happen\nnaturally to anyone who does good work.  For example, a young\narchitect has to take whatever work he can get, but if he does well\nhe'll gradually be in a position to pick and choose among projects.\nThe disadvantage of this route is that it's slow and uncertain.  As\nlong as you still depend on clients or employers, there's no guarantee\nyou won't have to return to working on things you dislike.  Even\ntenure is not real freedom.The two-job route has several variants depending on how long you\nwork for money at a time  At one extreme is the \"day job,\" where\nyou work regular hours at one job to make money, and work on what\nyou love in your spare time.  At the other extreme you work at\nsomething till you make enough not to have to work for money again.\nThere are gradations between, where you work for several months or\nyears to make enough to do what you want for several months or\nyears.The two-job route is less common than the organic route, because\nit requires a deliberate choice.  It's also more dangerous.  Life\ntends to get more expensive as you get older, so it's easy to get\nsucked into working longer than you expected at the money job.\nAnother perhaps\neven more dangerous problem is that anything you work on changes\nyou.  You tend to become what you do.  If you work on tedious stuff\nfor too long, it will rot your brain.  And the best paying jobs are\nmost dangerous, because they tend to require your complete attention.The kid who wants to write but decides to go to law school, thinking\nthat he'll be a lawyer and write in his spare time, runs a great\nrisk of finding ten years later that he has become a lawyer.\n\"Always produce\" offers some protection against this, but it's\ntiring constantly shifting gears between two different types of\nwork.Another danger of a formidable money job is that it might spoil\nyour appetite.  If you're a musician and take a day job as a\ndishwasher, you'll feel you have to make it as a musician.  If\nyou have a day job as a lawyer, people will be more impressed with\nyou, and you may gradually start to feel satisfied with that.The advantage of the two-job route is that it allows you to jump\nover obstacles.  The landscape of possible jobs is not flat; there\nare walls of varying heights between different kinds of work.\n[7]\nThe trick of maximizing the parts of your job that you like can get\nyou from architecture to product design, but not, probably, to\nmusic.  If you make money doing one thing and then work on another,\nyou have more freedom of choice-- though there are still jobs you\ncan't simply elect to have: you can't slide sideways into being a\ndoctor or a military officer.Which route should you take?  That depends on how sure you are of\nwhat you want to do, how good you are at taking orders, how much\nrisk you can stand, and the odds that anyone will pay (in your\nlifetime) for what you want to do.  If you're sure of the general\narea you want to work in and it's something people are likely to\npay you for, then you should probably take the organic route.  But\nif you don't know what you want to work on, or don't like to take\norders, you may want to take the two-job route, if you can stand\nthe risk.ChoosingPerhaps more important than the question of which route to take is\nwhen to decide which route to take.  You don't have to decide as\nearly as you might think.  A lot of kids decide in high school that\nthey want to be doctors, for example.  That's playing with fire.\nAt that age you're unlikely to know what it's really like to be a\ndoctor, or what the other options are.  A friend of mine who is a\nquite successful doctor complains constantly about her job.  When\npeople applying to medical school ask her for advice, she wants to\nshake them and yell \"Don't do it!\"  (But she never does.) How did\nshe get into this fix?  In high school she already wanted to be a\ndoctor.  And she is so ambitious and determined that she overcame\nevery obstacle along the way-- including, unfortunately, not liking\nit.Now she has a life chosen for her by a high-school kid.Kids who know early what they want to do seem impressive, as if\nthey got the answer to some math question before the other kids.\nThey have an answer, certainly, but odds are it's wrong.  If you\nread autobiographies (which I highly recommend) you find that a lot\nof the most successful people didn't decide till quite late what\nthey wanted to do.  And not because they were indecisive, or didn't\nknow themselves.  It takes a long time to just to learn what different\nkinds of work are like.When you're young, you're given the impression that you'll get\nenough information to make each choice before you need to make it.\nBut this is certainly not so with work.  When you're deciding what\nto work on, you have to operate on ridiculously incomplete information.\nEven in college you get very little idea what various types of work\nare like.  At best you may have a couple internships, but not all\njobs offer internships, and those that do don't teach you much more\nabout the work than being a batboy teaches you about playing baseball.In the design of careers, as in the design of most other things,\nyou get better results if you use flexible media.  Unless you're\nfairly sure what you want to do, your best bet may be to choose a\ntype of work that will allow you to delay deciding whether to take\nthe organic or two-job route.  That was probably part of the reason\nI chose computers.  You can be a professor, or make a lot of money,\nor morph it into any number of other kinds of work.Another question to consider is which route will give you the best\nchance to learn what you like.  The only way to learn what a job\nis really like is to do it.  So a job that lets you work at many\ndifferent things is good not just because you can push it in many\ndifferent directions,  but because you can learn faster which\ndirection you want to push it in.  Conversely, the extreme version\nof the two-job route is dangerous because it teaches you so little\nabout what you like.  If you work hard at being a bond trader for\nten years, thinking that you'll quit and write novels when you have\nenough money, what happens when you quit and then discover that you\ndon't actually like writing novels?Most people would say, I'd take that problem.  Give me a million\ndollars and I'll figure out what to do.  But it's harder than it\nlooks.  Constraints give your life shape.  Remove all constraints\nand most people have no idea what to do: look at what happens to\nthose who win lotteries or inherit money.  Much as everyone thinks\nthey want financial security, the happiest people are not those who\nhave it, but those who like what they do.  So a plan that promises\nfreedom at the expense of knowing what to do with it may not be as\ngood as it seems.Whichever route you take, if you want to end up working on something\nyou love, it will help if you don't have a taste for money or\nprestige, since (a) that's how unpleasant jobs are rewarded, and\n(b) you often have to sacrifice one or both when switching fields.Expect a struggle.  In high school they act as if choosing a career\nwere straightforward.  Actually, finding work you love is very\ndifficult, and most people fail.  Even if you succeed, it's rare\nto be free to work on what you want till your thirties or forties.\nBut if you have the destination in sight you'll be more likely to\narrive at it.  If you know you can love work, you're in the home\nstretch, and if you know what work you love, you're practically\nthere.Notes[1]\nCurrently we do the opposite: when we make kids do boring\nwork, like arithmetic drills, instead of admitting frankly that\nit's boring, we try to disguise it with superficial decorations.[2]\nOne father told me about a related phenomenon: he found himself\nconcealing from his family how much he liked his work.  When he\nwanted to go to work on a saturday, he found it easier to say that\nit was because he \"had to\" for some reason, rather than admitting\nhe preferred to work than stay home with them.[3]\nSomething similar happens with suburbs.  Parents move to\nsuburbs to raise their kids in a safe environment, but suburbs are\nso dull and artificial that by the time they're fifteen the kids\nare convinced the whole world is boring.[4]\nA painting will often have serious errors that the artist\ncan't see because he's too used to looking at it.  One of the most\nstriking is the right arm of Ingres's Comtesse d'Haussonville, which\nemerges from her sternum.  To overcome this problem, painters look\nat paintings in a mirror, or upside down.[5]\nDonald Hall said young would-be poets were mistaken to be so\nobsessed with being published.  But you can imagine what it would\ndo for a 24 year old to get a poem published in The New Yorker.\nNow to people he meets at parties he's a real poet.  Actually he's\nno better or worse than he was before, but to a clueless audience\nlike that, the approval of an official authority makes all the\ndifference.   So it's a harder problem than Hall realizes.  The\nreason the young care so much about prestige is that the people\nthey want to impress are not very discerning.[6]\nThis is isomorphic to the principle that you should prevent\nyour beliefs about how things are from being contaminated by how\nyou wish they were.  Most people let them mix pretty promiscuously.\nThe continuing popularity of religion is the most visible index of\nthat.[7]\nA more accurate metaphor would be to say that the graph of\njobs is not very well connected.Thanks to Trevor Blackwell, Dan Friedman, Jessica Livingston,\nRobert Morris, and Aaron Swartz for reading drafts of this.\nComment on this essay."},{"title":"How to Fund a Startup","text":"November 2005\nVenture funding works like gears.  A typical startup goes through\nseveral rounds of funding, and at each round you want to take just\nenough money to reach the speed where you can shift into the next\ngear.Few startups get it quite right.  Many are underfunded.  A few are\noverfunded, which is like trying to start driving in third gear.I think it would help founders to understand funding better—not\njust the mechanics of it, but what investors are thinking.  I was\nsurprised recently when I realized that all the worst problems we\nfaced in our startup were due not to competitors, but investors.\nDealing with competitors was easy by comparison.I don't mean to suggest that our investors were nothing but a drag\non us.  They were helpful in negotiating deals, for example.  I\nmean more that conflicts with investors are particularly nasty.\nCompetitors punch you in the jaw, but investors have you by the\nballs.Apparently our situation was not unusual.  And if trouble with\ninvestors is one of the biggest threats to a startup, managing them\nis one of the most important skills founders need to learn.Let's start by talking about the five sources of startup funding.\nThen we'll trace the life of a hypothetical (very fortunate) startup\nas it shifts gears through successive rounds.Friends and FamilyA lot of startups get their first funding from friends and family.\nExcite did, for example: after the founders graduated from college,\nthey borrowed $15,000 from their parents to start a company.  With\nthe help of some part-time jobs they made it last 18 months.If your friends or family happen to be rich, the line blurs between\nthem and angel investors.  At Viaweb we got our first $10,000 of\nseed money from our friend Julian, but he was sufficiently rich\nthat it's hard to say whether he should be classified as a friend\nor angel.  He was also a lawyer, which was great, because it meant\nwe didn't have to pay legal bills out of that initial small sum.The advantage of raising money from friends and family is that\nthey're easy to find.  You already know them.  There are three main\ndisadvantages: you mix together your business and personal life;\nthey will probably not be as well connected as angels or venture\nfirms; and they may not be accredited investors, which could\ncomplicate your life later.The SEC defines an \"accredited investor\" as someone with over a\nmillion dollars in liquid assets or an income of over $200,000 a\nyear.  The regulatory burden is much lower if a company's shareholders\nare all accredited investors.  Once you take money from the general\npublic you're more restricted in what you can do.\n[1]A startup's life will be more complicated, legally, if any of the\ninvestors aren't accredited.  In an IPO, it might not merely add\nexpense, but change the outcome. A lawyer I asked about it said:\nWhen the company goes public, the SEC will carefully study all\nprior issuances of stock by the company and demand that it take\nimmediate action to cure any past violations of securities laws.\nThose remedial actions can delay, stall or even kill the IPO.\nOf course the odds of any given startup doing an IPO are small.\nBut not as small as they might seem. A lot of startups that end up\ngoing public didn't seem likely to at first. (Who could have guessed\nthat the company Wozniak and Jobs started in their spare time selling\nplans for microcomputers would yield one of the biggest IPOs of the\ndecade?) Much of the value of a startup consists of that tiny\nprobability multiplied by the huge outcome.It wasn't because they weren't accredited investors that I didn't\nask my parents for seed money, though.  When we were starting Viaweb,\nI didn't know about the concept of an accredited investor, and\ndidn't stop to think about the value of investors' connections.\nThe reason I didn't take money from my parents was that I didn't\nwant them to lose it.ConsultingAnother way to fund a startup is to get a job.  The best sort of\njob is a consulting project in which you can build whatever software\nyou wanted to sell as a startup.  Then you can gradually transform\nyourself from a consulting company into a product company, and have\nyour clients pay your development expenses.This is a good plan for someone with kids, because it takes most\nof the risk out of starting a startup.  There never has to be a\ntime when you have no revenues.  Risk and reward are usually\nproportionate, however: you should expect a plan that cuts the risk\nof starting a startup also to cut the average return.  In this case,\nyou trade decreased financial risk for increased risk that your\ncompany won't succeed as a startup.But isn't the consulting company itself a startup?  No, not generally.\nA company has to be more than small and newly founded to be a\nstartup.  There are millions of small businesses in America, but\nonly a few thousand are startups.  To be a startup, a company has\nto be a product business, not a service business.  By which I mean\nnot that it has to make something physical, but that it has to have\none thing it sells to many people, rather than doing custom work\nfor individual clients.  Custom work doesn't scale.  To be a startup\nyou need to be the band that sells a million copies of a song, not\nthe band that makes money by playing at individual weddings and bar\nmitzvahs.The trouble with consulting is that clients have an awkward habit\nof calling you on the phone.  Most startups operate close to the\nmargin of failure, and the distraction of having to deal with clients\ncould be enough to put you over the edge.  Especially if you have\ncompetitors who get to work full time on just being a startup.So you have to be very disciplined if you take the consulting route.\nYou have to work actively to prevent your company growing into a\n\"weed tree,\" dependent on this source of easy but low-margin money.\n[2]Indeed, the biggest danger of consulting may be that it gives you\nan excuse for failure.  In a startup, as in grad school, a lot of\nwhat ends up driving you are the expectations of your family and\nfriends.  Once you start a startup and tell everyone that's what\nyou're doing, you're now on a path labelled \"get rich or bust.\" You\nnow have to get rich, or you've failed.Fear of failure is an extraordinarily powerful force.  Usually it\nprevents people from starting things, but once you publish some\ndefinite ambition, it switches directions and starts working in\nyour favor.  I think it's a pretty clever piece of jiujitsu to set\nthis irresistible force against the slightly less immovable object\nof becoming rich.  You won't have it driving you if your stated\nambition is merely to start a consulting company that you will one\nday morph into a startup.An advantage of consulting, as a way to develop a product, is that\nyou know you're making something at least one customer wants.  But\nif you have what it takes to start a startup you should have\nsufficient vision not to need this crutch.Angel InvestorsAngels are individual rich people.  The word was first used\nfor backers of Broadway plays, but now applies to individual investors\ngenerally.  Angels who've made money in technology are preferable,\nfor two reasons: they understand your situation, and they're a\nsource of contacts and advice.The contacts and advice can be more important than the money.  When\ndel.icio.us took money from investors, they took money from, among\nothers, Tim O'Reilly.  The amount he put in was small compared to\nthe VCs who led the round, but Tim is a smart and influential guy\nand it's good to have him on your side.You can do whatever you want with money from consulting or friends\nand family.  With angels we're now talking about venture funding\nproper, so it's time to introduce the concept of exit strategy.\nYounger would-be founders are often surprised that investors expect\nthem either to sell the company or go public.  The reason is that\ninvestors need to get their capital back.  They'll only consider\ncompanies that have an exit strategy—meaning companies that could\nget bought or go public.This is not as selfish as it sounds.  There are few large, private\ntechnology companies.  Those that don't fail all seem to get bought\nor go public.  The reason is that employees are investors too—of\ntheir time—and they want just as much to be able to cash out.  If\nyour competitors offer employees stock options that might make them\nrich, while you make it clear you plan to stay private, your\ncompetitors will get the best people. So the principle of an \"exit\"\nis not just something forced on startups by investors, but part of\nwhat it means to be a startup.Another concept we need to introduce now is valuation.  When someone\nbuys shares in a company, that implicitly establishes a value for\nit.  If someone pays $20,000 for 10% of a company, the company is\nin theory worth $200,000.  I say \"in theory\" because in early stage\ninvesting, valuations are voodoo.  As a company gets more established,\nits valuation gets closer to an actual market value.  But in a newly\nfounded startup, the valuation number is just an artifact of the\nrespective contributions of everyone involved.Startups often \"pay\" investors who will help the company in some\nway by letting them invest at low valuations.  If I had a startup\nand Steve Jobs wanted to invest in it, I'd give him the stock for\n$10, just to be able to brag that he was an investor.  Unfortunately,\nit's impractical (if not illegal) to adjust the valuation of the\ncompany up and down for each investor.  Startups' valuations are\nsupposed to rise over time.  So if you're going to sell cheap stock\nto eminent angels, do it early, when it's natural for the company\nto have a low valuation.Some angel investors join together in syndicates.  Any city where\npeople start startups will have one or more of them.  In Boston the\nbiggest is the Common\nAngels.  In the Bay Area it's the Band\nof Angels.  You can find groups near you through the Angel Capital Association.\n[3]\nHowever, most angel investors don't belong to these groups.  In\nfact, the more prominent the angel, the less likely they are to\nbelong to a group.Some angel groups charge you money to pitch your idea to them.\nNeedless to say, you should never do this.One of the dangers of taking investment from individual angels,\nrather than through an angel group or investment firm, is that they\nhave less reputation to protect.  A big-name VC firm will not screw\nyou too outrageously, because other founders would avoid them if\nword got out.  With individual angels you don't have this protection,\nas we found to our dismay in our own startup.  In many startups'\nlives there comes a point when you're at the investors'\nmercy—when you're out of money and the only place to get more is your\nexisting investors.  When we got into such a scrape, our investors\ntook advantage of it in a way that a name-brand VC probably wouldn't\nhave.Angels have a corresponding advantage, however: they're also not\nbound by all the rules that VC firms are.  And so they can, for\nexample, allow founders to cash out partially in a funding round,\nby selling some of their stock directly to the investors.  I think\nthis will become more common; the average founder is eager to do\nit, and selling, say, half a million dollars worth of stock will\nnot, as VCs fear, cause most founders to be any less committed to\nthe business.The same angels who tried to screw us also let us do this, and so\non balance I'm grateful rather than angry.  (As in families, relations\nbetween founders and investors can be complicated.)The best way to find angel investors is through personal introductions.\nYou could try to cold-call angel groups near you, but angels, like\nVCs, will pay more attention to deals recommended by someone they\nrespect.Deal terms with angels vary a lot.  There are no generally accepted\nstandards.  Sometimes angels' deal terms are as fearsome as VCs'.\nOther angels, particularly in the earliest stages, will invest based\non a two-page agreement.Angels who only invest occasionally may not themselves know what\nterms they want.  They just want to invest in this startup.  What\nkind of anti-dilution protection do they want?  Hell if they know.\nIn these situations, the deal terms tend to be random: the angel\nasks his lawyer to create a vanilla agreement, and the terms end\nup being whatever the lawyer considers vanilla.  Which in practice\nusually means, whatever existing agreement he finds lying around\nhis firm.  (Few legal documents are created from scratch.)These heaps o' boilerplate are a problem for small startups, because\nthey tend to grow into the union of all preceding documents.  I\nknow of one startup that got from an angel investor what amounted\nto a five hundred pound handshake: after deciding to invest, the\nangel presented them with a 70-page agreement.  The startup didn't\nhave enough money to pay a lawyer even to read it, let alone negotiate\nthe terms, so the deal fell through.One solution to this problem would be to have the startup's lawyer\nproduce the agreement, instead of the angel's.  Some angels might\nbalk at this, but others would probably welcome it.Inexperienced angels often get cold feet when the time comes to\nwrite that big check.  In our startup, one of the two angels in the\ninitial round took months to pay us, and only did after repeated\nnagging from our lawyer, who was also, fortunately, his lawyer.It's obvious why investors delay.  Investing in startups is risky!\nWhen a company is only two months old, every day you wait\ngives you 1.7% more data about their trajectory.  But the investor\nis already being compensated for that risk in the low price of the\nstock, so it is unfair to delay.Fair or not, investors do it if you let them.  Even VCs do it.  And\nfunding delays are a big distraction for founders, who ought to be\nworking on their company, not worrying about investors.  What's a\nstartup to do?  With both investors and acquirers, the only leverage\nyou have is competition.  If an investor knows you have other\ninvestors lined up, he'll be a lot more eager to close-- and not\njust because he'll worry about losing the deal, but because if other\ninvestors are interested, you must be worth investing in.  It's the\nsame with acquisitions.  No one wants to buy you till someone else\nwants to buy you, and then everyone wants to buy you.The key to closing deals is never to stop pursuing alternatives.\nWhen an investor says he wants to invest in you, or an acquirer\nsays they want to buy you, don't believe it till you get the\ncheck.  Your natural tendency when an investor says yes will\nbe to relax and go back to writing code.  Alas, you can't; you have\nto keep looking for more investors, if only to get this one to act.\n[4]Seed Funding FirmsSeed firms are like angels in that they invest relatively small\namounts at early stages, but like VCs in that they're companies\nthat do it as a business, rather than individuals making occasional\ninvestments on the side.Till now, nearly all seed firms have been so-called \"incubators,\"\nso Y Combinator gets called\none too, though the only thing we have in common is that we invest\nin the earliest phase.According to the National Association of Business Incubators, there\nare about 800 incubators in the US.  This is an astounding number,\nbecause I know the founders of a lot of startups, and I can't think\nof one that began in an incubator.What is an incubator?  I'm not sure myself.  The defining quality\nseems to be that you work in their space.  That's where the name\n\"incubator\" comes from.  They seem to vary a great deal in other\nrespects.  At one extreme is the sort of pork-barrel project where\na town gets money from the state government to renovate a vacant\nbuilding as a \"high-tech incubator,\" as if it were merely lack of\nthe right sort of office space that had till now prevented the town\nfrom becoming a\nstartup hub.\nAt the other extreme are places like\nIdealab, which generates ideas for new startups internally and hires\npeople to work for them.The classic Bubble incubators, most of which now seem to be dead,\nwere like VC firms except that they took a much bigger role in the\nstartups they funded.  In addition to working in their space, you\nwere supposed to use their office staff, lawyers, accountants, and\nso on.Whereas incubators tend (or tended) to exert more control than VCs,\nY Combinator exerts less.\nAnd we think it's better if startups operate out of their own\npremises, however crappy, than the offices of their investors.  So\nit's annoying that we keep getting called an \"incubator,\" but perhaps\ninevitable, because there's only one of us so far and no word yet\nfor what we are.  If we have to be called something, the obvious\nname would be \"excubator.\" (The name is more excusable if one\nconsiders it as meaning that we enable people to escape cubicles.)Because seed firms are companies rather than individual people,\nreaching them is easier than reaching angels.  Just go to their web\nsite and send them an email.  The importance of personal introductions\nvaries, but is less than with angels or VCs.The fact that seed firms are companies also means the investment\nprocess is more standardized.  (This is generally true with angel\ngroups too.) Seed firms will probably have set deal terms they use\nfor every startup they fund.  The fact that the deal terms are\nstandard doesn't mean they're favorable to you, but if other startups\nhave signed the same agreements and things went well for them, it's\na sign the terms are reasonable.Seed firms differ from angels and VCs in that they invest exclusively\nin the earliest phases—often when the company is still just an\nidea.  Angels and even VC firms occasionally do this, but they also\ninvest at later stages.The problems are different in the early stages.  For example, in\nthe first couple months a startup may completely redefine their idea.  So seed investors usually care less\nabout the idea than the people. This is true of all venture funding,\nbut especially so in the seed stage.Like VCs, one of the advantages of seed firms is the advice they\noffer.  But because seed firms operate in an earlier phase, they\nneed to offer different kinds of advice.  For example, a seed firm\nshould be able to give advice about how to approach VCs, which VCs\nobviously don't need to do; whereas VCs should be able to give\nadvice about how to hire an \"executive team,\" which is not an issue\nin the seed stage.In the earliest phases, a lot of the problems are technical, so\nseed firms should be able to help with technical as well as business\nproblems.Seed firms and angel investors generally want to invest in the\ninitial phases of a startup, then hand them off to VC firms for the\nnext round.  Occasionally startups go from seed funding direct to\nacquisition, however, and I expect this to become increasingly\ncommon.Google has been aggressively pursuing this route, and now Yahoo is too.  Both\nnow compete directly with VCs.  And this is a smart move.  Why wait\nfor further funding rounds to jack up a startup's price?  When a\nstartup reaches the point where VCs have enough information to\ninvest in it, the acquirer should have enough information to buy\nit.  More information, in fact; with their technical depth, the\nacquirers should be better at picking winners than VCs.Venture Capital FundsVC firms are like seed firms in that they're actual companies, but\nthey invest other people's money, and much larger amounts of it.\nVC investments average several million dollars.  So they tend to\ncome later in the life of a startup, are harder to get, and come\nwith tougher terms.The word \"venture capitalist\" is sometimes used loosely for any\nventure investor, but there is a sharp difference between VCs and\nother investors: VC firms are organized as funds, much like\nhedge funds or mutual funds.  The fund managers, who are called\n\"general partners,\" get about 2% of the fund annually as a management\nfee, plus about 20% of the fund's gains.There is a very sharp dropoff in performance among VC firms, because\nin the VC business both success and failure are self-perpetuating.\nWhen an investment scores spectacularly, as Google did for Kleiner\nand Sequoia, it generates a lot of good publicity for the VCs.  And\nmany founders prefer to take money from successful VC firms, because\nof the legitimacy it confers.  Hence a vicious (for the losers)\ncycle:  VC firms that have been doing badly will only get the deals\nthe bigger fish have rejected, causing them to continue to do badly.As a result, of the thousand or so VC funds in the US now, only\nabout 50 are likely to make money, and it is very hard for a new\nfund to break into this group.In a sense, the lower-tier VC firms are a bargain for founders.\nThey may not be quite as smart or as well connected as the big-name\nfirms, but they are much hungrier for deals.  This means you should\nbe able to get better terms from them.Better how?  The most obvious is valuation: they'll take less of\nyour company.  But as well as money, there's power.  I think founders\nwill increasingly be able to stay on as CEO, and on terms that will\nmake it fairly hard to fire them later.The most dramatic change, I predict,\nis that VCs will allow founders to\ncash out partially by selling\nsome of their stock direct to the VC firm.  VCs have traditionally\nresisted letting founders get anything before the ultimate \"liquidity\nevent.\"  But they're also desperate for deals.  And since I know\nfrom my own experience that the rule against buying stock from\nfounders is a stupid one, this is a natural place for things to\ngive as venture funding becomes more and more a seller's market.The disadvantage of taking money from less known firms is that\npeople will assume, correctly or not, that you were turned down by\nthe more exalted ones.  But, like where you went to college, the\nname of your VC stops mattering once you have some performance to\nmeasure.  So the more confident you are, the less you need a\nbrand-name VC.  We funded Viaweb entirely with angel money; it never\noccurred to us that the backing of a well known VC firm would make\nus seem more impressive.\n[5]Another danger of less known firms is that, like angels, they have\nless reputation to protect.   I suspect it's the lower-tier firms\nthat are responsible for most of the tricks that have given VCs\nsuch a bad reputation among hackers.  They are doubly hosed: the\ngeneral partners themselves are less able, and yet they have harder\nproblems to solve, because the top VCs skim off all the best deals,\nleaving the lower-tier firms exactly the startups that are likely\nto blow up.For example, lower-tier firms are much more likely to pretend to\nwant to do a deal with you just to lock you up while they decide\nif they really want to.  One experienced CFO said:\nThe better ones usually will not give a term sheet unless they\nreally want to do a deal. The second or third tier firms have a\nmuch higher break rate—it could be as high as 50%.\nIt's obvious why: the lower-tier firms' biggest fear, when chance\nthrows them a bone, is that one of the big dogs will notice and\ntake it away.  The big dogs don't have to worry about that.Falling victim to this trick could really hurt you.  As one\nVC told me:\nIf you were talking to four VCs, told three of them that you\naccepted a term sheet, and then have to call them back to tell\nthem you were just kidding, you are absolutely damaged goods.\nHere's a partial solution: when a VC offers you a term sheet, ask\nhow many of their last 10 term sheets turned into deals.  This will\nat least force them to lie outright if they want to mislead you.Not all the people who work at VC firms are partners.  Most firms\nalso have a handful of junior employees called something like\nassociates or analysts.  If you get a call from a VC\nfirm, go to their web site and check whether the person you talked\nto is a partner.  Odds are it will be a junior person; they scour\nthe web looking for startups their bosses could invest in.  The\njunior people will tend to seem very positive about your company.\nThey're not pretending; they want to believe you're a hot\nprospect, because it would be a huge coup for them if their firm\ninvested in a company they discovered.  Don't be misled by this\noptimism.  It's the partners who decide, and they view things with\na colder eye.Because VCs invest large amounts, the money comes with more\nrestrictions.  Most only come into effect if the company gets into\ntrouble.  For example, VCs generally write it into the deal that\nin any sale, they get their investment back first.  So if the company\ngets sold at a low price, the founders could get nothing.  Some VCs\nnow require that in any sale they get 4x their investment back\nbefore the common stock holders (that is, you) get anything, but\nthis is an abuse that should be resisted.Another difference with large investments is that the founders are\nusually required to accept \"vesting\"—to surrender their stock and\nearn it back over the next 4-5 years.  VCs don't want to invest\nmillions in a company the founders could just walk away from.\nFinancially, vesting has little effect, but in some situations it\ncould mean founders will have less power.  If VCs got de facto\ncontrol of the company and fired one of the founders, he'd lose any\nunvested stock unless there was specific protection against this.\nSo vesting would in that situation force founders to toe the line.The most noticeable change when a startup takes serious funding is\nthat the founders will no longer have complete control.  Ten years\nago VCs used to insist that founders step down as CEO and hand the\njob over to a business guy they supplied.  This is less the rule\nnow, partly because the disasters of the Bubble showed that generic\nbusiness guys don't make such great CEOs.But while founders will increasingly be able to stay on as CEO,\nthey'll have to cede some power, because the board of directors\nwill become more powerful.  In the seed stage, the board is generally\na formality; if you want to talk to the other board members, you\njust yell into the next room.  This stops with VC-scale money.  In\na typical VC funding deal, the board of directors might be composed\nof two VCs, two founders, and one outside person acceptable to both.\nThe board will have ultimate power, which means the founders now\nhave to convince instead of commanding.This is not as bad as it sounds, however.  Bill Gates is in the\nsame position; he doesn't have majority control of Microsoft; in\nprinciple he also has to convince instead of commanding.  And yet\nhe seems pretty commanding, doesn't he?  As long as things are going\nsmoothly, boards don't interfere much.  The danger comes when there's\na bump in the road, as happened to Steve Jobs at Apple.Like angels, VCs prefer to invest in deals that come to them through\npeople they know.  So while nearly all VC funds have some address\nyou can send your business plan to, VCs privately admit the chance\nof getting funding by this route is near zero.  One recently told\nme that he did not know a single startup that got funded this way.I suspect VCs accept business plans \"over the transom\" more as a\nway to keep tabs on industry trends than as a source of deals.  In\nfact, I would strongly advise against mailing your business plan\nrandomly to VCs, because they treat this as evidence of laziness.\nDo the extra work of getting personal introductions.  As one VC put\nit:\nI'm not hard to find.  I know a lot of people.  If you can't find\nsome way to reach me, how are you going to create a successful\ncompany?\nOne of the most difficult problems for startup founders is deciding\nwhen to approach VCs. You really only get one chance, because they\nrely heavily on first impressions.  And you can't approach some and\nsave others for later, because (a) they ask who else you've talked\nto and when and (b) they talk among themselves.  If you're talking\nto one VC and he finds out that you were rejected by another several\nmonths ago, you'll definitely seem shopworn.So when do you approach VCs?  When you can convince them.  If the\nfounders have impressive resumes and the idea isn't hard to understand,\nyou could approach VCs quite early.  Whereas if the founders are\nunknown and the idea is very novel, you might have to launch the\nthing and show that users loved it before VCs would be convinced.If several VCs are interested in you, they will sometimes be willing\nto split the deal between them.  They're more likely to do this if\nthey're close in the VC pecking order.  Such deals may be a net win\nfor founders, because you get multiple VCs interested in your\nsuccess, and you can ask each for advice about the other.  One\nfounder I know wrote:\nTwo-firm deals are great. It costs you a little more equity, but\nbeing able to play the two firms off each other (as well as ask\none if the other is being out of line) is invaluable.\nWhen you do negotiate with VCs, remember that they've done this a\nlot more than you have.  They've invested in dozens of startups,\nwhereas this is probably the first you've founded.  But don't let\nthem or the situation intimidate you. The average founder is smarter\nthan the average VC.  So just do what you'd do in any complex,\nunfamiliar situation: proceed deliberately, and question anything\nthat seems odd.It is, unfortunately, common for VCs to put terms in an agreement\nwhose consequences surprise founders later, and also common for VCs\nto defend things they do by saying that they're standard in the\nindustry.  Standard, schmandard; the whole industry is only a few\ndecades old, and rapidly evolving.  The concept of \"standard\" is a\nuseful one when you're operating on a small scale (Y Combinator\nuses identical terms for every deal because for tiny seed-stage\ninvestments it's not worth the overhead of negotiating individual\ndeals), but it doesn't apply at the VC level.  On that scale, every\nnegotiation is unique.Most successful startups get money from more than one of the preceding\nfive sources.\n[6]\nAnd, confusingly, the names of funding sources\nalso tend to be used as the names of different rounds.  The best\nway to explain how it all works is to follow the case of a hypothetical\nstartup.Stage 1: Seed RoundOur startup begins when a group of three friends have an idea--\neither an idea for something they might build, or simply the idea\n\"let's start a company.\"  Presumably they already have some source\nof food and shelter.  But if you have food and shelter, you probably\nalso have something you're supposed to be working on: either\nclasswork, or a job.  So if you want to work full-time on a startup,\nyour money situation will probably change too.A lot of startup founders say they started the company without any\nidea of what they planned to do.  This is actually less common than\nit seems: many have to claim they thought of the idea after quitting\nbecause otherwise their former employer would own it.The three friends decide to take the leap.  Since most startups are\nin competitive businesses, you not only want to work full-time on\nthem, but more than full-time.  So some or all of the friends quit\ntheir jobs or leave school.  (Some of the founders in a startup can\nstay in grad school, but at least one has to make the company his\nfull-time job.)They're going to run the company out of one of their apartments at\nfirst, and since they don't have any users they don't have to pay\nmuch for infrastructure.  Their main expenses are setting up the\ncompany, which costs a couple thousand dollars in legal work and\nregistration fees, and the living expenses of the founders.The phrase \"seed investment\" covers a broad range.  To some VC firms\nit means $500,000, but to most startups it means several months'\nliving expenses.  We'll suppose our group of friends start with\n$15,000 from their friend's rich uncle, who they give 5% of the\ncompany in return.  There's only common stock at this stage.  They\nleave 20% as an options pool for later employees (but they set\nthings up so that they can issue this stock to themselves if they\nget bought early and most is still unissued), and the three founders\neach get 25%.By living really cheaply they think they can make the remaining\nmoney last five months.  When you have five months' runway left,\nhow soon do you need to start looking for your next round?  Answer:\nimmediately.  It takes time to find investors, and time (always\nmore than you expect) for the deal to close even after they say\nyes.  So if our group of founders know what they're doing they'll\nstart sniffing around for angel investors right away.  But of course\ntheir main job is to build version 1 of their software.The friends might have liked to have more money in this first phase,\nbut being slightly underfunded teaches them an important lesson.\nFor a startup, cheapness is power.  The lower your costs, the more\noptions you have—not just at this stage, but at every point till\nyou're profitable.  When you have a high \"burn rate,\" you're always\nunder time pressure, which means (a) you don't have time for your\nideas to evolve, and (b) you're often forced to take deals you don't\nlike.Every startup's rule should be: spend little, and work fast.After ten weeks' work the three friends have built a prototype that\ngives one a taste of what their product will do.  It's not what\nthey originally set out to do—in the process of writing it, they\nhad some new ideas.  And it only does a fraction of what the finished\nproduct will do, but that fraction includes stuff that no one else\nhas done before.They've also written at least a skeleton business plan, addressing\nthe five fundamental questions: what they're going to do, why users\nneed it, how large the market is, how they'll make money, and who\nthe competitors are and why this company is going to beat them.\n(That last has to be more specific than \"they suck\" or \"we'll work\nreally hard.\")If you have to choose between spending time on the demo or the\nbusiness plan, spend most on the demo.   Software is not only more\nconvincing, but a better way to explore ideas.Stage 2: Angel RoundWhile writing the prototype, the group has been traversing their\nnetwork of friends in search of angel investors.  They find some\njust as the prototype is demoable.  When they demo it, one of the\nangels is willing to invest.  Now the group is looking for more\nmoney: they want enough to last for a year, and maybe to hire a\ncouple friends.  So they're going to raise $200,000.The angel agrees to invest at a pre-money valuation of $1 million.\nThe company issues $200,000 worth of new shares to the angel; if\nthere were 1000 shares before the deal, this means 200 additional\nshares.  The angel now owns 200/1200 shares, or a sixth of the\ncompany, and all the previous shareholders' percentage ownership\nis diluted by a sixth.  After the deal, the capitalization table\nlooks like this:\nshareholder   shares    percent\n-------------------------------\nangel           200       16.7\nuncle            50        4.2\neach founder    250       20.8\noption pool     200       16.7\n----      -----\ntotal          1200      100\nTo keep things simple, I had the angel do a straight cash for stock\ndeal.  In reality the angel might be more likely to make the\ninvestment in the form of a convertible loan.  A convertible loan\nis a loan that can be converted into stock later; it works out the\nsame as a stock purchase in the end, but gives the angel more\nprotection against being squashed by VCs in future rounds.Who pays the legal bills for this deal?  The startup, remember,\nonly has a couple thousand left.  In practice this turns out to be\na sticky problem that usually gets solved in some improvised way.\nMaybe the startup can find lawyers who will do it cheaply in the\nhope of future work if the startup succeeds.  Maybe someone has a\nlawyer friend.  Maybe the angel pays for his lawyer to represent\nboth sides.  (Make sure if you take the latter route that the lawyer\nis representing you rather than merely advising you, or his\nonly duty is to the investor.)An angel investing $200k would probably expect a seat on the board\nof directors.  He might also want preferred stock, meaning a special\nclass of stock that has some additional rights over the common stock\neveryone else has.  Typically these rights include vetoes over major\nstrategic decisions, protection against being diluted in future\nrounds, and the right to get one's investment back first if the\ncompany is sold.Some investors might expect the founders to accept vesting for a\nsum this size, and others wouldn't.  VCs are more likely to require\nvesting than angels.  At Viaweb we managed to raise $2.5 million\nfrom angels without ever accepting vesting, largely because we were\nso inexperienced that we were appalled at the idea.  In practice\nthis turned out to be good, because it made us harder to push around.Our experience was unusual; vesting is the norm for amounts that\nsize.  Y Combinator doesn't require vesting, because (a) we invest\nsuch small amounts, and (b) we think it's unnecessary, and that the\nhope of getting rich is enough motivation to keep founders at work.\nBut maybe if we were investing millions we would think differently.I should add that vesting is also a way for founders to protect\nthemselves against one another.  It solves the problem of what to\ndo if one of the founders quits.  So some founders impose it on\nthemselves when they start the company.The angel deal takes two weeks to close, so we are now three months\ninto the life of the company.The point after you get the first big chunk of angel money will\nusually be the happiest phase in a startup's life.  It's a lot like\nbeing a postdoc: you have no immediate financial worries, and few\nresponsibilities.  You get to work on juicy kinds of work, like\ndesigning software.  You don't have to spend time on bureaucratic\nstuff, because you haven't hired any bureaucrats yet.  Enjoy it\nwhile it lasts, and get as much done as you can, because you will\nnever again be so productive.With an apparently inexhaustible sum of money sitting safely in the\nbank, the founders happily set to work turning their prototype into\nsomething they can release.  They hire one of their friends—at\nfirst just as a consultant, so they can try him out—and then a\nmonth later as employee #1. They pay him the smallest salary he can\nlive on, plus 3% of the company in restricted stock, vesting over\nfour years.  (So after this the option pool is down to 13.7%).\n[7]\nThey also spend a little money on a freelance graphic designer.How much stock do you give early employees?  That varies so much\nthat there's no conventional number.  If you get someone really\ngood, really early, it might be wise to give him as much stock as\nthe founders.  The one universal rule is that the amount of stock\nan employee gets decreases polynomially with the age of the company.\nIn other words, you get rich as a power of how early you were.  So\nif some friends want you to come work for their startup, don't wait\nseveral months before deciding.A month later, at the end of month four, our group of founders have\nsomething they can launch.  Gradually through word of mouth they\nstart to get users.  Seeing the system in use by real users—people\nthey don't know—gives them lots of new ideas.  Also they find\nthey now worry obsessively about the status of their server.  (How\nrelaxing founders' lives must have been when startups wrote VisiCalc.)By the end of month six, the system is starting to have a solid\ncore of features, and a small but devoted following.  People start\nto write about it, and the founders are starting to feel like experts\nin their field.We'll assume that their startup is one that could put millions more\nto use.  Perhaps they need to spend a lot on marketing, or build\nsome kind of expensive infrastructure, or hire highly paid salesmen.\nSo they decide to start talking to VCs.  They get introductions to\nVCs from various sources: their angel investor connects them with\na couple; they meet a few at conferences; a couple VCs call them\nafter reading about them.Step 3: Series A RoundArmed with their now somewhat fleshed-out business plan and able\nto demo a real, working system, the founders visit the VCs they\nhave introductions to.  They find the VCs intimidating and inscrutable.\nThey all ask the same question: who else have you pitched to?  (VCs\nare like high school girls: they're acutely aware of their position\nin the VC pecking order, and their interest in a company is a\nfunction of the interest other VCs show in it.)One of the VC firms says they want to invest and offers the founders\na term sheet.  A term sheet is a summary of what the deal terms\nwill be when and if they do a deal; lawyers will fill in the details\nlater.  By accepting the term sheet, the startup agrees to turn\naway other VCs for some set amount of time while this firm does the\n\"due diligence\" required for the deal.  Due diligence is the corporate\nequivalent of a background check: the purpose is to uncover any\nhidden bombs that might sink the company later, like serious design\nflaws in the product, pending lawsuits against the company,\nintellectual property issues, and so on.  VCs' legal and financial\ndue diligence is pretty thorough, but the technical due diligence\nis generally a joke.\n[8]The due diligence discloses no ticking bombs, and six weeks later\nthey go ahead with the deal.  Here are the terms: a $2 million\ninvestment at a pre-money valuation of $4 million, meaning that\nafter the deal closes the VCs will own a third of the company (2 /\n(4 + 2)).  The VCs also insist that prior to the deal the option\npool be enlarged by an additional hundred shares.  So the total\nnumber of new shares issued is 750, and the cap table becomes:\nshareholder   shares    percent\n-------------------------------\nVCs             650       33.3\nangel           200       10.3\nuncle            50        2.6\neach founder    250       12.8\nemployee         36*       1.8     *unvested\noption pool     264       13.5\n----      -----\ntotal          1950      100\nThis picture is unrealistic in several respects.  For example, while\nthe percentages might end up looking like this, it's unlikely that\nthe VCs would keep the existing numbers of shares.  In fact, every\nbit of the startup's paperwork would probably be replaced, as if\nthe company were being founded anew.  Also, the money might come\nin several tranches, the later ones subject to various\nconditions—though this is apparently more common in deals with lower-tier VCs\n(whose lot in life is to fund more dubious startups) than with the\ntop firms.And of course any VCs reading this are probably rolling on the floor\nlaughing at how my hypothetical VCs let the angel keep his 10.3 of\nthe company.  I admit, this is the Bambi version; in simplifying\nthe picture, I've also made everyone nicer.  In the real world, VCs\nregard angels the way a jealous husband feels about his wife's\nprevious boyfriends.  To them the company didn't exist before they\ninvested in it.\n[9]I don't want to give the impression you have to do an angel round\nbefore going to VCs.  In this example I stretched things out to\nshow multiple sources of funding in action. Some startups could go\ndirectly from seed funding to a VC round; several of the companies\nwe've funded have.The founders are required to vest their shares over four years, and\nthe board is now reconstituted to consist of two VCs, two founders,\nand a fifth person acceptable to both. The angel investor cheerfully\nsurrenders his board seat.At this point there is nothing new our startup can teach us about\nfunding—or at least, nothing good.\n[10]\nThe startup will almost\ncertainly hire more people at this point; those millions must be\nput to work, after all.  The company may do additional funding\nrounds, presumably at higher valuations.  They may if they are\nextraordinarily fortunate do an IPO, which we should remember is\nalso in principle a round of funding, regardless of its de facto\npurpose.  But that, if not beyond the bounds of possibility, is\nbeyond the scope of this article.Deals Fall ThroughAnyone who's been through a startup will find the preceding portrait\nto be missing something: disasters.  If there's one thing all\nstartups have in common, it's that something is always going wrong.\nAnd nowhere more than in matters of funding.For example, our hypothetical startup never spent more than half\nof one round before securing the next.  That's more ideal than\ntypical.  Many startups—even successful ones—come close to\nrunning out of money at some point.  Terrible things happen to\nstartups when they run out of money, because they're designed for\ngrowth, not adversity.But the most unrealistic thing about the series of deals I've\ndescribed is that they all closed.  In the startup world, closing\nis not what deals do.  What deals do is fall through.  If you're\nstarting a startup you would do well to remember that.  Birds fly;\nfish swim; deals fall through.Why?  Partly the reason deals seem to fall through so often is that\nyou lie to yourself.  You want the deal to close, so you start to\nbelieve it will.  But even correcting for this, startup deals fall\nthrough alarmingly often—far more often than, say, deals to buy\nreal estate.  The reason is that it's such a risky environment.\nPeople about to fund or acquire a startup are prone to wicked cases\nof buyer's remorse.  They don't really grasp the risk they're taking\ntill the deal's about to close.  And then they panic.  And not just\ninexperienced angel investors, but big companies too.So if you're a startup founder wondering why some angel investor\nisn't returning your phone calls, you can at least take comfort in\nthe thought that the same thing is happening to other deals a hundred\ntimes the size.The example of a startup's history that I've presented is like a\nskeleton—accurate so far as it goes, but needing to be fleshed\nout to be a complete picture.  To get a complete picture, just add\nin every possible disaster.A frightening prospect?  In a way.  And yet also in a way encouraging.\nThe very uncertainty of startups frightens away almost everyone.\nPeople overvalue stability—especially young\npeople, who ironically need it least.  And so in starting a startup,\nas in any really bold undertaking, merely deciding to do it gets\nyou halfway there.  On the day of the race, most of the other runners\nwon't show up.\nNotes[1]\nThe aim of such regulations is to protect widows and orphans\nfrom crooked investment schemes; people with a million dollars in\nliquid assets are assumed to be able to protect themselves.\nThe unintended consequence is that the investments that generate\nthe highest returns, like hedge funds, are available only to the\nrich.[2]\nConsulting is where product companies go to die.  IBM is the\nmost famous example.  So starting as a consulting company is like\nstarting out in the grave and trying to work your way up into the\nworld of the living.[3]\nIf \"near you\" doesn't mean the Bay Area, Boston, or Seattle,\nconsider moving.  It's not a coincidence you haven't heard of many\nstartups from Philadelphia.[4]\nInvestors are often compared to sheep.  And they are like sheep,\nbut that's a rational response to their situation.  Sheep act the\nway they do for a reason.  If all the other sheep head for a certain\nfield, it's probably good grazing.  And when a wolf appears, is he\ngoing to eat a sheep in the middle of the flock, or one near the\nedge?[5]\nThis was partly confidence, and partly simple ignorance.  We\ndidn't know ourselves which VC firms were the impressive ones.  We\nthought software was all that mattered.  But that turned out to be\nthe right direction to be naive in: it's much better to overestimate\nthan underestimate the importance of making a good product.[6]\nI've omitted one source: government grants.  I don't think\nthese are even worth thinking about for the average startup.\nGovernments may mean well when they set up grant programs to encourage\nstartups, but what they give with one hand they take away with the\nother: the process of applying is inevitably so arduous, and the\nrestrictions on what you can do with the money so burdensome, that\nit would be easier to take a job to get the money.\nYou should be especially suspicious of grants whose purpose is some\nkind of social engineering-- e.g. to encourage more startups to be\nstarted in Mississippi.  Free money to start a startup in a place\nwhere few succeed is hardly free.Some government agencies run venture funding groups, which make\ninvestments rather than giving grants.  For example, the CIA runs\na venture fund called In-Q-Tel that is modelled on private sector\nfunds and apparently generates good returns.  They would probably\nbe worth approaching—if you don't mind taking money from the CIA.[7]\nOptions have largely been replaced with restricted stock, which\namounts to the same thing.  Instead of earning the right to buy\nstock, the employee gets the stock up front, and earns the right\nnot to have to give it back.  The shares set aside for this purpose\nare still called the \"option pool.\"[8]\nFirst-rate technical people do not generally hire themselves\nout to do due diligence for VCs.  So the most difficult\npart for startup founders is often responding politely to the inane\nquestions of the \"expert\" they send to look you over.[9]\nVCs regularly wipe out angels by issuing arbitrary amounts of\nnew stock.  They seem to have a standard piece of casuistry for\nthis situation: that the angels are no longer working to help the\ncompany, and so don't deserve to keep their stock.  This of course\nreflects a willful misunderstanding of what investment means; like\nany investor, the angel is being compensated for risks he took\nearlier.  By a similar logic, one could argue that the VCs should\nbe deprived of their shares when the company goes public.[10]\nOne new thing the company might encounter is a down\nround, or a funding round at valuation lower than the previous\nround.  Down rounds are bad news; it is generally the common stock\nholders who take the hit.  Some of the most fearsome provisions in\nVC deal terms have to do with down rounds—like \"full ratchet\nanti-dilution,\" which is as frightening as it sounds.Founders are tempted to ignore these clauses, because they think\nthe company will either be a big success or a complete bust.  VCs\nknow otherwise: it's not uncommon for startups to have moments of\nadversity before they ultimately succeed.  So it's worth negotiating\nanti-dilution provisions, even though you don't think you need to,\nand VCs will try to make you feel that you're being gratuitously\ntroublesome.Thanks to Sam Altman, Hutch Fishman, Steve Huffman, Jessica\nLivingston, Sesha Pratap, Stan Reiss, Andy Singleton, Zak Stone,\nand Aaron Swartz for reading drafts of this."},{"title":"How to Get Startup Ideas","text":"November 2012The way to get startup ideas is not to try to think of startup\nideas.  It's to look for problems, preferably problems you have\nyourself.The very best startup ideas tend to have three things in common:\nthey're something the founders themselves want, that they themselves\ncan build, and that few others realize are worth doing.  Microsoft,\nApple, Yahoo, Google, and Facebook all began this way.ProblemsWhy is it so important to work on a problem you have?  Among other\nthings, it ensures the problem really exists.  It sounds obvious\nto say you should only work on problems that exist.  And yet by far\nthe most common mistake startups make is to solve problems no one\nhas.I made it myself.  In 1995 I started a company to put art galleries\nonline.  But galleries didn't want to be online.  It's not how the\nart business works.  So why did I spend 6 months working on this\nstupid idea?  Because I didn't pay attention to users.  I invented\na model of the world that didn't correspond to reality, and worked\nfrom that.  I didn't notice my model was wrong until I tried\nto convince users to pay for what we'd built.  Even then I took\nembarrassingly long to catch on.  I was attached to my model of the\nworld, and I'd spent a lot of time on the software.  They had to\nwant it!Why do so many founders build things no one wants?  Because they\nbegin by trying to think of startup ideas.  That m.o. is doubly\ndangerous: it doesn't merely yield few good ideas; it yields bad\nideas that sound plausible enough to fool you into working on them.At YC we call these \"made-up\" or \"sitcom\" startup ideas.  Imagine\none of the characters on a TV show was starting a startup.  The\nwriters would have to invent something for it to do.  But coming\nup with good startup ideas is hard.  It's not something you can do\nfor the asking.  So (unless they got amazingly lucky) the writers\nwould come up with an idea that sounded plausible, but was actually\nbad.For example, a social network for pet owners.  It doesn't sound\nobviously mistaken.  Millions of people have pets.  Often they care\na lot about their pets and spend a lot of money on them.  Surely\nmany of these people would like a site where they could talk to\nother pet owners.  Not all of them perhaps, but if just 2 or 3\npercent were regular visitors, you could have millions of users.\nYou could serve them targeted offers, and maybe charge for premium\nfeatures.\n[1]The danger of an idea like this is that when you run it by your\nfriends with pets, they don't say \"I would never use this.\" They\nsay \"Yeah, maybe I could see using something like that.\" Even when\nthe startup launches, it will sound plausible to a lot of people.\nThey don't want to use it themselves, at least not right now, but\nthey could imagine other people wanting it.  Sum that reaction\nacross the entire population, and you have zero users.\n[2]WellWhen a startup launches, there have to be at least some users who\nreally need what they're making—not just people who could see\nthemselves using it one day, but who want it urgently.  Usually\nthis initial group of users is small, for the simple reason that\nif there were something that large numbers of people urgently needed\nand that could be built with the amount of effort a startup usually\nputs into a version one, it would probably already exist.  Which\nmeans you have to compromise on one dimension: you can either build\nsomething a large number of people want a small amount, or something\na small number of people want a large amount.  Choose the latter.\nNot all ideas of that type are good startup ideas, but nearly all\ngood startup ideas are of that type.Imagine a graph whose x axis represents all the people who might\nwant what you're making and whose y axis represents how much they\nwant it.  If you invert the scale on the y axis, you can envision\ncompanies as holes.  Google is an immense crater: hundreds of\nmillions of people use it, and they need it a lot.  A startup just\nstarting out can't expect to excavate that much volume.  So you\nhave two choices about the shape of hole you start with.  You can\neither dig a hole that's broad but shallow, or one that's narrow\nand deep, like a well.Made-up startup ideas are usually of the first type.  Lots of people\nare mildly interested in a social network for pet owners.Nearly all good startup ideas are of the second type.  Microsoft\nwas a well when they made Altair Basic.  There were only a couple\nthousand Altair owners, but without this software they were programming\nin machine language.  Thirty years later Facebook had the same\nshape.  Their first site was exclusively for Harvard students, of\nwhich there are only a few thousand, but those few thousand users\nwanted it a lot.When you have an idea for a startup, ask yourself: who wants this\nright now?  Who wants this so much that they'll use it even when\nit's a crappy version one made by a two-person startup they've never\nheard of?  If you can't answer that, the idea is probably bad.\n[3]You don't need the narrowness of the well per se.  It's depth you\nneed; you get narrowness as a byproduct of optimizing for depth\n(and speed).  But you almost always do get it.  In practice the\nlink between depth and narrowness is so strong that it's a good\nsign when you know that an idea will appeal strongly to a specific\ngroup or type of user.But while demand shaped like a well is almost a necessary condition\nfor a good startup idea, it's not a sufficient one.  If Mark\nZuckerberg had built something that could only ever have appealed\nto Harvard students, it would not have been a good startup idea.\nFacebook was a good idea because it started with a small market\nthere was a fast path out of.  Colleges are similar enough that if\nyou build a facebook that works at Harvard, it will work at any\ncollege. So you spread rapidly through all the colleges.  Once you\nhave all the college students, you get everyone else simply by\nletting them in.Similarly for Microsoft: Basic for the Altair; Basic for other\nmachines; other languages besides Basic; operating systems;\napplications; IPO.SelfHow do you tell whether there's a path out of an idea?  How do you\ntell whether something is the germ of a giant company, or just a\nniche product?  Often you can't. The founders of Airbnb didn't\nrealize at first how big a market they were tapping.  Initially\nthey had a much narrower idea.  They were going to let hosts rent\nout space on their floors during conventions.  They didn't foresee\nthe expansion of this idea; it forced itself upon them gradually.\nAll they knew at first is that they were onto something.  That's\nprobably as much as Bill Gates or Mark Zuckerberg knew at first.Occasionally it's obvious from the beginning when there's a path\nout of the initial niche.  And sometimes I can see a path that's\nnot immediately obvious; that's one of our specialties at YC.  But\nthere are limits to how well this can be done, no matter how much\nexperience you have.  The most important thing to understand about\npaths out of the initial idea is the meta-fact that these are hard\nto see.So if you can't predict whether there's a path out of an idea, how\ndo you choose between ideas?  The truth is disappointing but\ninteresting: if you're the right sort of person, you have the right\nsort of hunches.  If you're at the leading edge of a field that's\nchanging fast, when you have a hunch that something is worth doing,\nyou're more likely to be right.In Zen and the Art of Motorcycle Maintenance, Robert Pirsig says:\nYou want to know how to paint a perfect painting? It's easy.  Make\nyourself perfect and then just paint naturally.\nI've wondered about that passage since I read it in high school.\nI'm not sure how useful his advice is for painting specifically,\nbut it fits this situation well.  Empirically, the way to have good\nstartup ideas is to become the sort of person who has them.Being at the leading edge of a field doesn't mean you have to be\none of the people pushing it forward.  You can also be at the leading\nedge as a user.  It was not so much because he was a programmer\nthat Facebook seemed a good idea to Mark Zuckerberg as because he\nused computers so much.  If you'd asked most 40 year olds in 2004\nwhether they'd like to publish their lives semi-publicly on the\nInternet, they'd have been horrified at the idea.  But Mark already\nlived online; to him it seemed natural.Paul Buchheit says that people at the leading edge of a rapidly\nchanging field \"live in the future.\"  Combine that with Pirsig and\nyou get:\nLive in the future, then build what's missing.\nThat describes the way many if not most of the biggest startups got\nstarted.  Neither Apple nor Yahoo nor Google nor Facebook were even\nsupposed to be companies at first.  They grew out of things their\nfounders built because there seemed a gap in the world.If you look at the way successful founders have had their ideas,\nit's generally the result of some external stimulus hitting a\nprepared mind.  Bill Gates and Paul Allen hear about the Altair and\nthink \"I bet we could write a Basic interpreter for it.\" Drew Houston\nrealizes he's forgotten his USB stick and thinks \"I really need to\nmake my files live online.\" Lots of people heard about the Altair.\nLots forgot USB sticks.  The reason those stimuli caused those\nfounders to start companies was that their experiences had prepared\nthem to notice the opportunities they represented.The verb you want to be using with respect to startup ideas is not\n\"think up\" but \"notice.\" At YC we call ideas that grow naturally\nout of the founders' own experiences \"organic\" startup ideas.  The\nmost successful startups almost all begin this way.That may not have been what you wanted to hear.  You may have\nexpected recipes for coming up with startup ideas, and instead I'm\ntelling you that the key is to have a mind that's prepared in the\nright way.  But disappointing though it may be, this is the truth.\nAnd it is a recipe of a sort, just one that in the worst case takes\na year rather than a weekend.If you're not at the leading edge of some rapidly changing field,\nyou can get to one.  For example, anyone reasonably smart can\nprobably get to an edge of programming (e.g. building mobile apps)\nin a year.  Since a successful startup will consume at least 3-5\nyears of your life, a year's preparation would be a reasonable\ninvestment.  Especially if you're also looking for a cofounder.\n[4]You don't have to learn programming to be at the leading edge of a\ndomain that's changing fast.  Other domains change fast.  But while\nlearning to hack is not necessary, it is for the forseeable future\nsufficient. As Marc Andreessen put it, software is eating the world,\nand this trend has decades left to run.Knowing how to hack also means that when you have ideas, you'll be\nable to implement them.  That's not absolutely necessary (Jeff Bezos\ncouldn't) but it's an advantage.  It's a big advantage, when you're\nconsidering an idea like putting a college facebook online, if\ninstead of merely thinking \"That's an interesting idea,\" you can\nthink instead \"That's an interesting idea.  I'll try building an\ninitial version tonight.\"  It's even better when you're both a\nprogrammer and the target user, because then the cycle of generating\nnew versions and testing them on users can happen inside one head.NoticingOnce you're living in the future in some respect, the way to notice\nstartup ideas is to look for things that seem to be missing.  If\nyou're really at the leading edge of a rapidly changing field, there\nwill be things that are obviously missing.  What won't be obvious\nis that they're startup ideas.  So if you want to find startup\nideas, don't merely turn on the filter \"What's missing?\" Also turn\noff every other filter, particularly \"Could this be a big company?\"\nThere's plenty of time to apply that test later.  But if you're\nthinking about that initially, it may not only filter out lots\nof good ideas, but also cause you to focus on bad ones.Most things that are missing will take some time to see.  You almost\nhave to trick yourself into seeing the ideas around you.But you know the ideas are out there.  This is not one of those\nproblems where there might not be an answer.  It's impossibly\nunlikely that this is the exact moment when technological progress\nstops.  You can be sure people are going to build things in the\nnext few years that will make you think \"What did I do before x?\"And when these problems get solved, they will probably seem flamingly\nobvious in retrospect.  What you need to do is turn off the filters\nthat usually prevent you from seeing them.  The most powerful is\nsimply taking the current state of the world for granted.  Even the\nmost radically open-minded of us mostly do that.  You couldn't get\nfrom your bed to the front door if you stopped to question everything.But if you're looking for startup ideas you can sacrifice some of\nthe efficiency of taking the status quo for granted and start to\nquestion things.  Why is your inbox overflowing?  Because you get\na lot of email, or because it's hard to get email out of your inbox?\nWhy do you get so much email?  What problems are people trying to\nsolve by sending you email?  Are there better ways to solve them?\nAnd why is it hard to get emails out of your inbox?  Why do you\nkeep emails around after you've read them?  Is an inbox the optimal\ntool for that?Pay particular attention to things that chafe you.  The advantage\nof taking the status quo for granted is not just that it makes life\n(locally) more efficient, but also that it makes life more tolerable.\nIf you knew about all the things we'll get in the next 50 years but\ndon't have yet, you'd find present day life pretty constraining,\njust as someone from the present would if they were sent back 50\nyears in a time machine.  When something annoys you, it could be\nbecause you're living in the future.When you find the right sort of problem, you should probably be\nable to describe it as obvious, at least to you.  When we started\nViaweb, all the online stores were built by hand, by web designers\nmaking individual HTML pages.  It was obvious to us as programmers\nthat these sites would have to be generated by software.\n[5]Which means, strangely enough, that coming up with startup ideas\nis a question of seeing the obvious.  That suggests how weird this\nprocess is: you're trying to see things that are obvious, and yet\nthat you hadn't seen.Since what you need to do here is loosen up your own mind, it may\nbe best not to make too much of a direct frontal attack on the\nproblem—i.e. to sit down and try to think of ideas.  The best\nplan may be just to keep a background process running, looking for\nthings that seem to be missing.  Work on hard problems, driven\nmainly by curiosity, but have a second self watching over your\nshoulder, taking note of gaps and anomalies.\n[6]Give yourself some time.  You have a lot of control over the rate\nat which you turn yours into a prepared mind, but you have less\ncontrol over the stimuli that spark ideas when they hit it.  If\nBill Gates and Paul Allen had constrained themselves to come up\nwith a startup idea in one month, what if they'd chosen a month\nbefore the Altair appeared?  They probably would have worked on a\nless promising idea.  Drew Houston did work on a less promising\nidea before Dropbox: an SAT prep startup.  But Dropbox was a much\nbetter idea, both in the absolute sense and also as a match for his\nskills.\n[7]A good way to trick yourself into noticing ideas is to work on\nprojects that seem like they'd be cool.  If you do that, you'll\nnaturally tend to build things that are missing.  It wouldn't seem\nas interesting to build something that already existed.Just as trying to think up startup ideas tends to produce bad ones,\nworking on things that could be dismissed as \"toys\" often produces\ngood ones.  When something is described as a toy, that means it has\neverything an idea needs except being important.  It's cool; users\nlove it; it just doesn't matter.  But if you're living in the future\nand you build something cool that users love, it may matter more\nthan outsiders think.  Microcomputers seemed like toys when Apple\nand Microsoft started working on them.  I'm old enough to remember\nthat era; the usual term for people with their own microcomputers\nwas \"hobbyists.\"  BackRub seemed like an inconsequential science\nproject.  The Facebook was just a way for undergrads to stalk one\nanother.At YC we're excited when we meet startups working on things that\nwe could imagine know-it-alls on forums dismissing as toys.  To us\nthat's positive evidence an idea is good.If you can afford to take a long view (and arguably you can't afford\nnot to), you can turn \"Live in the future and build what's missing\"\ninto something even better:\nLive in the future and build what seems interesting.\nSchoolThat's what I'd advise college students to do, rather than trying\nto learn about \"entrepreneurship.\"  \"Entrepreneurship\" is something\nyou learn best by doing it.  The examples of the most successful\nfounders make that clear.  What you should be spending your time\non in college is ratcheting yourself into the future.  College is\nan incomparable opportunity to do that.  What a waste to sacrifice\nan opportunity to solve the hard part of starting a startup—becoming\nthe sort of person who can have organic startup ideas—by\nspending time learning about the easy part.  Especially since\nyou won't even really learn about it, any more than you'd learn\nabout sex in a class.  All you'll learn is the words for things.The clash of domains is a particularly fruitful source of ideas.\nIf you know a lot about programming and you start learning about\nsome other field, you'll probably see problems that software could\nsolve.  In fact, you're doubly likely to find good problems in\nanother domain: (a) the inhabitants of that domain are not as likely\nas software people to have already solved their problems with\nsoftware, and (b) since you come into the new domain totally ignorant,\nyou don't even know what the status quo is to take it for granted.So if you're a CS major and you want to start a startup, instead\nof taking a class on entrepreneurship you're better off taking a\nclass on, say, genetics.  Or better still, go work for a biotech\ncompany.  CS majors normally get summer jobs at computer hardware\nor software companies.  But if you want to find startup ideas, you\nmight do better to get a summer job in some unrelated field.\n[8]Or don't take any extra classes, and just build things.  It's no\ncoincidence that Microsoft and Facebook both got started in January.\nAt Harvard that is (or was) Reading Period, when students have no\nclasses to attend because they're supposed to be studying for finals.\n[9]But don't feel like you have to build things that will become startups.  That's\npremature optimization. Just build things.  Preferably with other\nstudents.  It's not just the classes that make a university such a\ngood place to crank oneself into the future.  You're also surrounded\nby other people trying to do the same thing.  If you work together\nwith them on projects, you'll end up producing not just organic\nideas, but organic ideas with organic founding teams—and that,\nempirically, is the best combination.Beware of research.  If an undergrad writes something all his friends\nstart using, it's quite likely to represent a good startup idea.\nWhereas a PhD dissertation is extremely unlikely to.  For some\nreason, the more a project has to count as research, the less likely\nit is to be something that could be turned into a startup.\n[10]\nI think the reason is that the subset of ideas that count as research\nis so narrow that it's unlikely that a project that satisfied that\nconstraint would also satisfy the orthogonal constraint of solving\nusers' problems.  Whereas when students (or professors) build\nsomething as a side-project, they automatically gravitate toward\nsolving users' problems—perhaps even with an additional energy\nthat comes from being freed from the constraints of research.CompetitionBecause a good idea should seem obvious, when you have one you'll\ntend to feel that you're late.  Don't let that deter you.  Worrying\nthat you're late is one of the signs of a good idea.  Ten minutes\nof searching the web will usually settle the question.  Even if you\nfind someone else working on the same thing, you're probably not\ntoo late.  It's exceptionally rare for startups to be killed by\ncompetitors—so rare that you can almost discount the possibility.\nSo unless you discover a competitor with the sort of lock-in that\nwould prevent users from choosing you, don't discard the idea.If you're uncertain, ask users.  The question of whether you're too\nlate is subsumed by the question of whether anyone urgently needs\nwhat you plan to make.  If you have something that no competitor\ndoes and that some subset of users urgently need, you have a\nbeachhead.\n[11]The question then is whether that beachhead is big enough. Or more\nimportantly, who's in it: if the beachhead consists of people doing\nsomething lots more people will be doing in the future, then it's\nprobably big enough no matter how small it is.  For example, if\nyou're building something differentiated from competitors by the\nfact that it works on phones, but it only works on the newest phones,\nthat's probably a big enough beachhead.Err on the side of doing things where you'll face competitors.\nInexperienced founders usually give competitors more credit than\nthey deserve.  Whether you succeed depends far more on you than on\nyour competitors.  So better a good idea with competitors than a\nbad one without.You don't need to worry about entering a \"crowded market\" so long\nas you have a thesis about what everyone else in it is overlooking.\nIn fact that's a very promising starting point.  Google was that\ntype of idea.  Your thesis has to be more precise than \"we're going\nto make an x that doesn't suck\" though. You have to be able to\nphrase it in terms of something the incumbents are overlooking.\nBest of all is when you can say that they didn't have the courage\nof their convictions, and that your plan is what they'd have done\nif they'd followed through on their own insights.  Google was that\ntype of idea too.  The search engines that preceded them shied away\nfrom the most radical implications of what they were doing—particularly\nthat the better a job they did, the faster users would\nleave.A crowded market is actually a good sign, because it means both\nthat there's demand and that none of the existing solutions are\ngood enough.  A startup can't hope to enter a market that's obviously\nbig and yet in which they have no competitors.  So any startup that\nsucceeds is either going to be entering a market with existing\ncompetitors, but armed with some secret weapon that will get them\nall the users (like Google), or entering a market that looks small\nbut which will turn out to be big (like Microsoft).\n[12]FiltersThere are two more filters you'll need to turn off if you want to\nnotice startup ideas: the unsexy filter and the schlep filter.Most programmers wish they could start a startup by just writing\nsome brilliant code, pushing it to a server, and having users pay\nthem lots of money.  They'd prefer not to deal with tedious problems\nor get involved in messy ways with the real world.  Which is a\nreasonable preference, because such things slow you down.  But this\npreference is so widespread that the space of convenient startup\nideas has been stripped pretty clean.  If you let your mind wander\na few blocks down the street to the messy, tedious ideas, you'll\nfind valuable ones just sitting there waiting to be implemented.The schlep filter is so dangerous that I wrote a separate essay\nabout the condition it induces, which I called\nschlep blindness.\nI gave Stripe as an example of a startup that benefited from turning\noff this filter, and a pretty striking example it is.  Thousands\nof programmers were in a position to see this idea; thousands of\nprogrammers knew how painful it was to process payments before\nStripe.  But when they looked for startup ideas they didn't see\nthis one, because unconsciously they shrank from having to deal\nwith payments.  And dealing with payments is a schlep for Stripe,\nbut not an intolerable one.  In fact they might have had net less\npain; because the fear of dealing with payments kept most people\naway from this idea, Stripe has had comparatively smooth sailing\nin other areas that are sometimes painful, like user acquisition.\nThey didn't have to try very hard to make themselves heard by users,\nbecause users were desperately waiting for what they were building.The unsexy filter is similar to the schlep filter, except it keeps\nyou from working on problems you despise rather than ones you fear.\nWe overcame this one to work on Viaweb. There were interesting\nthings about the architecture of our software, but we weren't\ninterested in ecommerce per se.  We could see the problem was one\nthat needed to be solved though.Turning off the schlep filter is more important than turning off\nthe unsexy filter, because the schlep filter is more likely to be\nan illusion.  And even to the degree it isn't, it's a worse form\nof self-indulgence.  Starting a successful startup is going to be\nfairly laborious no matter what.  Even if the product doesn't entail\na lot of schleps, you'll still have plenty dealing with investors,\nhiring and firing people, and so on.  So if there's some idea you\nthink would be cool but you're kept away from by fear of the schleps\ninvolved, don't worry: any sufficiently good idea will have as many.The unsexy filter, while still a source of error, is not as entirely\nuseless as the schlep filter.  If you're at the leading edge of a\nfield that's changing rapidly, your ideas about what's sexy will\nbe somewhat correlated with what's valuable in practice.  Particularly\nas you get older and more experienced.  Plus if you find an idea\nsexy, you'll work on it more enthusiastically.\n[13]RecipesWhile the best way to discover startup ideas is to become the sort\nof person who has them and then build whatever interests you,\nsometimes you don't have that luxury.  Sometimes you need an idea\nnow.  For example, if you're working on a startup and your initial\nidea turns out to be bad.For the rest of this essay I'll talk about tricks for coming up\nwith startup ideas on demand.  Although empirically you're better\noff using the organic strategy, you could succeed this way. You\njust have to be more disciplined.  When you use the organic method,\nyou don't even notice an idea unless it's evidence that something\nis truly missing.  But when you make a conscious effort to think\nof startup ideas, you have to replace this natural constraint with\nself-discipline.  You'll see a lot more ideas, most of them bad,\nso you need to be able to filter them.One of the biggest dangers of not using the organic method is the\nexample of the organic method.  Organic ideas feel like inspirations.\nThere are a lot of stories about successful startups that began\nwhen the founders had what seemed a crazy idea but \"just knew\" it\nwas promising.  When you feel that about an idea you've had while\ntrying to come up with startup ideas, you're probably mistaken.When searching for ideas, look in areas where you have some expertise.\nIf you're a database expert, don't build a chat app for teenagers\n(unless you're also a teenager).  Maybe it's a good idea, but you\ncan't trust your judgment about that, so ignore it.  There have to\nbe other ideas that involve databases, and whose quality you can\njudge.  Do you find it hard to come up with good ideas involving\ndatabases?  That's because your expertise raises your standards.\nYour ideas about chat apps are just as bad, but you're giving\nyourself a Dunning-Kruger pass in that domain.The place to start looking for ideas is things you need.  There\nmust be things you need.\n[14]One good trick is to ask yourself whether in your previous job you\never found yourself saying \"Why doesn't someone make x?  If someone\nmade x we'd buy it in a second.\" If you can think of any x people\nsaid that about, you probably have an idea.  You know there's demand,\nand people don't say that about things that are impossible to build.More generally, try asking yourself whether there's something unusual\nabout you that makes your needs different from most other people's.\nYou're probably not the only one.  It's especially good if you're\ndifferent in a way people will increasingly be.If you're changing ideas, one unusual thing about you is the idea\nyou'd previously been working on.  Did you discover any needs while\nworking on it?  Several well-known startups began this way.  Hotmail\nbegan as something its founders wrote to talk about their previous\nstartup idea while they were working at their day jobs.\n[15]A particularly promising way to be unusual is to be young.  Some\nof the most valuable new ideas take root first among people in their\nteens and early twenties.  And while young founders are at a\ndisadvantage in some respects, they're the only ones who really\nunderstand their peers.  It would have been very hard for someone\nwho wasn't a college student to start Facebook.  So if you're a\nyoung founder (under 23 say), are there things you and your friends\nwould like to do that current technology won't let you?The next best thing to an unmet need of your own is an unmet need\nof someone else.  Try talking to everyone you can about the gaps\nthey find in the world.  What's missing?  What would they like to\ndo that they can't?  What's tedious or annoying, particularly in\ntheir work?  Let the conversation get general; don't be trying too\nhard to find startup ideas.  You're just looking for something to\nspark a thought.  Maybe you'll notice a problem they didn't consciously\nrealize they had, because you know how to solve it.When you find an unmet need that isn't your own, it may be somewhat\nblurry at first.  The person who needs something may not know exactly\nwhat they need.  In that case I often recommend that founders act\nlike consultants—that they do what they'd do if they'd been\nretained to solve the problems of this one user.  People's problems\nare similar enough that nearly all the code you write this way will\nbe reusable, and whatever isn't will be a small price to start out\ncertain that you've reached the bottom of the well.\n[16]One way to ensure you do a good job solving other people's problems\nis to make them your own.  When Rajat Suri of E la Carte decided\nto write software for restaurants, he got a job as a waiter to learn\nhow restaurants worked.  That may seem like taking things to extremes,\nbut startups are extreme.  We love it when founders do such things.In fact, one strategy I recommend to people who need a new idea is\nnot merely to turn off their schlep and unsexy filters, but to seek\nout ideas that are unsexy or involve schleps.  Don't try to start\nTwitter.  Those ideas are so rare that you can't find them by looking\nfor them.  Make something unsexy that people will pay you for.A good trick for bypassing the schlep and to some extent the unsexy\nfilter is to ask what you wish someone else would build, so that\nyou could use it.  What would you pay for right now?Since startups often garbage-collect broken companies and industries,\nit can be a good trick to look for those that are dying, or deserve\nto, and try to imagine what kind of company would profit from their\ndemise.  For example, journalism is in free fall at the moment.\nBut there may still be money to be made from something like journalism.\nWhat sort of company might cause people in the future to say \"this\nreplaced journalism\" on some axis?But imagine asking that in the future, not now.  When one company\nor industry replaces another, it usually comes in from the side.\nSo don't look for a replacement for x; look for something that\npeople will later say turned out to be a replacement for x.  And\nbe imaginative about the axis along which the replacement occurs.\nTraditional journalism, for example, is a way for readers to get\ninformation and to kill time, a way for writers to make money and\nto get attention, and a vehicle for several different types of\nadvertising.  It could be replaced on any of these axes (it has\nalready started to be on most).When startups consume incumbents, they usually start by serving\nsome small but important market that the big players ignore.  It's\nparticularly good if there's an admixture of disdain in the big\nplayers' attitude, because that often misleads them.  For example,\nafter Steve Wozniak built the computer that became the Apple I, he\nfelt obliged to give his then-employer Hewlett-Packard the option\nto produce it.  Fortunately for him, they turned it down, and one\nof the reasons they did was that it used a TV for a monitor, which\nseemed intolerably d�class� to a high-end hardware company like HP\nwas at the time.\n[17]Are there groups of\nscruffy\nbut sophisticated users like the early\nmicrocomputer \"hobbyists\" that are currently being ignored by the\nbig players?  A startup with its sights set on bigger things can\noften capture a small market easily by expending an effort that\nwouldn't be justified by that market alone.Similarly, since the most successful startups generally ride some\nwave bigger than themselves, it could be a good trick to look for\nwaves and ask how one could benefit from them.  The prices of gene\nsequencing and 3D printing are both experiencing Moore's Law-like\ndeclines.  What new things will we be able to do in the new world\nwe'll have in a few years?  What are we unconsciously ruling out\nas impossible that will soon be possible?OrganicBut talking about looking explicitly for waves makes it clear that\nsuch recipes are plan B for getting startup ideas.  Looking for\nwaves is essentially a way to simulate the organic method.  If\nyou're at the leading edge of some rapidly changing field, you don't\nhave to look for waves; you are the wave.Finding startup ideas is a subtle business, and that's why most\npeople who try fail so miserably.  It doesn't work well simply to\ntry to think of startup ideas.  If you do that, you get bad ones\nthat sound dangerously plausible.  The best approach is more indirect:\nif you have the right sort of background, good startup ideas will\nseem obvious to you.  But even then, not immediately.  It takes\ntime to come across situations where you notice something missing.\nAnd often these gaps won't seem to be ideas for companies, just\nthings that would be interesting to build.  Which is why it's good\nto have the time and the inclination to build things just because\nthey're interesting.Live in the future and build what seems interesting.  Strange as\nit sounds, that's the real recipe.Notes[1]\nThis form of bad idea has been around as long as the web.  It\nwas common in the 1990s, except then people who had it used to say\nthey were going to create a portal for x instead of a social network\nfor x.  Structurally the idea is stone soup: you post a sign saying\n\"this is the place for people interested in x,\" and all those people\nshow up and you make money from them.  What lures founders into\nthis sort of idea are statistics about the millions of people who\nmight be interested in each type of x.  What they forget is that\nany given person might have 20 affinities by this standard, and no\none is going to visit 20 different communities regularly.[2]\nI'm not saying, incidentally, that I know for sure a social\nnetwork for pet owners is a bad idea.  I know it's a bad idea the\nway I know randomly generated DNA would not produce a viable organism.\nThe set of plausible sounding startup ideas is many times larger\nthan the set of good ones, and many of the good ones don't even\nsound that plausible.  So if all you know about a startup idea is\nthat it sounds plausible, you have to assume it's bad.[3]\nMore precisely, the users' need has to give them sufficient\nactivation energy to start using whatever you make, which can vary\na lot.  For example, the activation energy for enterprise software\nsold through traditional channels is very high, so you'd have to\nbe a lot better to get users to switch.  Whereas the activation\nenergy required to switch to a new search engine is low.  Which in\nturn is why search engines are so much better than enterprise\nsoftware.[4]\nThis gets harder as you get older.  While the space of ideas\ndoesn't have dangerous local maxima, the space of careers does.\nThere are fairly high walls between most of the paths people take\nthrough life, and the older you get, the higher the walls become.[5]\nIt was also obvious to us that the web was going to be a big\ndeal.  Few non-programmers grasped that in 1995, but the programmers\nhad seen what GUIs had done for desktop computers.[6]\nMaybe it would work to have this second self keep a journal,\nand each night to make a brief entry listing the gaps and anomalies\nyou'd noticed that day.  Not startup ideas, just the raw gaps and\nanomalies.[7]\nSam Altman points out that taking time to come up with an\nidea is not merely a better strategy in an absolute sense, but also\nlike an undervalued stock in that so few founders do it.There's comparatively little competition for the best ideas, because\nfew founders are willing to put in the time required to notice them.\nWhereas there is a great deal of competition for mediocre ideas,\nbecause when people make up startup ideas, they tend to make up the\nsame ones.[8]\nFor the computer hardware and software companies, summer jobs\nare the first phase of the recruiting funnel.  But if you're good\nyou can skip the first phase.  If you're good you'll have no trouble\ngetting hired by these companies when you graduate, regardless of\nhow you spent your summers.[9]\nThe empirical evidence suggests that if colleges want to help\ntheir students start startups, the best thing they can do is leave\nthem alone in the right way.[10]\nI'm speaking here of IT startups; in biotech things are different.[11]\nThis is an instance of a more general rule: focus on users,\nnot competitors.  The most important information about competitors\nis what you learn via users anyway.[12]\nIn practice most successful startups have elements of both.\nAnd you can describe each strategy in terms of the other by adjusting\nthe boundaries of what you call the market.  But it's useful to\nconsider these two ideas separately.[13]\nI almost hesitate to raise that point though.  Startups are\nbusinesses; the point of a business is to make money; and with that\nadditional constraint, you can't expect you'll be able to spend all\nyour time working on what interests you most.[14]\nThe need has to be a strong one.  You can retroactively\ndescribe any made-up idea as something you need.  But do you really\nneed that recipe site or local event aggregator as much as Drew\nHouston needed Dropbox, or Brian Chesky and Joe Gebbia needed Airbnb?Quite often at YC I find myself asking founders \"Would you use this\nthing yourself, if you hadn't written it?\" and you'd be surprised\nhow often the answer is no.[15]\nPaul Buchheit points out that trying to sell something bad\ncan be a source of better ideas:\"The best technique I've found for dealing with YC companies that\nhave bad ideas is to tell them to go sell the product ASAP (before\nwasting time building it). Not only do they learn that nobody\nwants what they are building, they very often come back with a\nreal idea that they discovered in the process of trying to sell\nthe bad idea.\"[16]\nHere's a recipe that might produce the next Facebook, if\nyou're college students.  If you have a connection to one of the\nmore powerful sororities at your school, approach the queen bees\nthereof and offer to be their personal IT consultants, building\nanything they could imagine needing in their social lives that\ndidn't already exist.  Anything that got built this way would be\nvery promising, because such users are not just the most demanding\nbut also the perfect point to spread from.I have no idea whether this would work.[17]\nAnd the reason it used a TV for a monitor is that Steve Wozniak\nstarted out by solving his own problems.  He, like most of his\npeers, couldn't afford a monitor.Thanks to Sam Altman, Mike Arrington, Paul Buchheit, John Collison,\nPatrick Collison, Garry Tan, and Harj Taggar for reading drafts of\nthis, and Marc Andreessen, Joe Gebbia, Reid Hoffman, Shel Kaphan,\nMike Moritz and Kevin Systrom for answering my questions about\nstartup history."},{"title":"How to Lose Time and Money","text":"July 2010When we sold our startup in 1998 I suddenly got a lot of money.  I\nnow had to think about something I hadn't had to think about before:\nhow not to lose it.   I knew it was possible to go from rich to\npoor, just as it was possible to go from poor to rich.  But while\nI'd spent a lot of the past several years studying the paths from\npoor to rich,\nI knew practically nothing about the paths from rich\nto poor.  Now, in order to avoid them, I had to learn where they\nwere.So I started to pay attention to how fortunes are lost.  If you'd\nasked me as a kid how rich people became poor, I'd have said by\nspending all their money.  That's how it happens in books and movies,\nbecause that's the colorful way to do it.  But in fact the way most\nfortunes are lost is not through excessive expenditure, but through\nbad investments.It's hard to spend a fortune without noticing.  Someone with ordinary\ntastes would find it hard to blow through more than a few tens of\nthousands of dollars without thinking \"wow, I'm spending a lot of\nmoney.\"  Whereas if you start trading derivatives, you can lose a\nmillion dollars (as much as you want, really) in the blink of an\neye.In most people's minds, spending money on luxuries sets off alarms\nthat making investments doesn't.  Luxuries seem self-indulgent.\nAnd unless you got the money by inheriting it or winning a lottery,\nyou've already been thoroughly trained that self-indulgence leads\nto trouble.  Investing bypasses those alarms.  You're not spending\nthe money; you're just moving it from one asset to another.  Which\nis why people trying to sell you expensive things say \"it's an\ninvestment.\"The solution is to develop new alarms.  This can be a tricky business,\nbecause while the alarms that prevent you from overspending are so\nbasic that they may even be in our DNA, the ones that prevent you\nfrom making bad investments have to be learned, and are sometimes\nfairly counterintuitive.A few days ago I realized something surprising: the situation with\ntime is much the same as with money.  The most dangerous way to\nlose time is not to spend it having fun, but to spend it doing fake\nwork.  When you spend time having fun, you know you're being\nself-indulgent.  Alarms start to go off fairly quickly.  If I woke\nup one morning and sat down on the sofa and watched TV all day, I'd\nfeel like something was terribly wrong.  Just thinking about it\nmakes me wince.  I'd start to feel uncomfortable after sitting on\na sofa watching TV for 2 hours, let alone a whole day.And yet I've definitely had days when I might as well have sat in\nfront of a TV all day—days at the end of which, if I asked myself\nwhat I got done that day, the answer would have been: basically,\nnothing.  I feel bad after these days too, but nothing like as bad\nas I'd feel if I spent the whole day on the sofa watching TV.  If\nI spent a whole day watching TV I'd feel like I was descending into\nperdition.  But the same alarms don't go off on the days when I get\nnothing done, because I'm doing stuff that seems, superficially,\nlike real work.  Dealing with email, for example.  You do it sitting\nat a desk.  It's not fun.  So it must be work.With time, as with money, avoiding pleasure is no longer enough to\nprotect you.  It probably was enough to protect hunter-gatherers,\nand perhaps all pre-industrial societies.  So nature and nurture\ncombine to make us avoid self-indulgence. But the world has gotten\nmore complicated: the most dangerous traps now are new behaviors\nthat bypass our alarms about self-indulgence by mimicking more\nvirtuous types.  And the worst thing is, they're not even fun.Thanks to Sam Altman, Trevor Blackwell, Patrick Collison, Jessica\nLivingston, and Robert Morris for reading drafts of this."},{"title":"How to Make Pittsburgh a Startup Hub","text":"April 2016(This is a talk I gave at an event called Opt412 in Pittsburgh.\nMuch of it will apply to other towns.  But not all, because\nas I say in the talk, Pittsburgh has some important advantages over\nmost would-be startup hubs.)What would it take to make Pittsburgh into a startup hub, like\nSilicon Valley?  I feel like I understand Pittsburgh pretty well,\nbecause I grew up here, in Monroeville. And I understand Silicon\nValley pretty well because that's where I live now.  Could you get\nthat kind of startup ecosystem going here?When I agreed to speak here, I didn't think I'd be able to give a\nvery optimistic talk.  I thought I'd be talking about what Pittsburgh\ncould do to become a startup hub, very much in the subjunctive.\nInstead I'm going to talk about what Pittsburgh can do.What changed my mind was an article I read in, of all places, the New\nYork Times food section.  The title was \"Pittsburgh's Youth-Driven\nFood Boom.\"  To most people that might not even sound interesting,\nlet alone something related to startups.  But it was electrifying\nto me to read that title.  I don't think I could pick a more promising\none if I tried.  And when I read the article I got even more excited.\nIt said \"people ages 25 to 29 now make up 7.6 percent of all\nresidents, up from 7 percent about a decade ago.\"  Wow, I thought,\nPittsburgh could be the next Portland.  It could become the cool\nplace all the people in their twenties want to go live.When I got here a couple days ago, I could feel the difference.  I\nlived here from 1968 to 1984.  I didn't realize it at the time, but\nduring that whole period the city was in free fall. On top of the\nflight to the suburbs that happened everywhere, the steel and nuclear\nbusinesses were both dying. Boy are things different now.  It's not\njust that downtown seems a lot more prosperous. There is an energy\nhere that was not here when I was a kid.When I was a kid, this was a place young people left. Now it's a\nplace that attracts them.What does that have to do with startups?  Startups are made\nof people, and the average age of the people in a typical startup\nis right in that 25 to 29 bracket.I've seen how powerful it is for a city to have those people.  Five\nyears ago they shifted the center of gravity of Silicon Valley from\nthe peninsula to San Francisco.  Google and Facebook are on the\npeninsula, but the next generation of big winners are all in SF.\nThe reason the center of gravity shifted was the talent war, for\nprogrammers especially.  Most 25 to 29 year olds want to live in\nthe city, not down in the boring suburbs.  So whether they like it\nor not, founders know they have to be in the city.  I know multiple\nfounders who would have preferred to live down in the Valley proper,\nbut who made themselves move to SF because they knew otherwise\nthey'd lose the talent war.So being a magnet for people in their twenties is a very promising\nthing to be.  It's hard to imagine a place becoming a startup hub\nwithout also being that.  When I read that statistic about the\nincreasing percentage of 25 to 29 year olds, I had exactly the same\nfeeling of excitement I get when I see a startup's graphs start to\ncreep upward off the x axis.Nationally the percentage of 25 to 29 year olds is 6.8%.  That means\nyou're .8% ahead.  The population is 306,000, so we're talking about\na surplus of about 2500 people.  That's the population of a small\ntown, and that's just the surplus. So you have a toehold.  Now you\njust have to expand it.And though \"youth-driven food boom\" may sound frivolous, it is\nanything but.  Restaurants and cafes are a big part of the personality\nof a city.  Imagine walking down a street in Paris. What are you\nwalking past?  Little restaurants and cafes.  Imagine driving through\nsome depressing random exurb.  What are you driving past?  Starbucks\nand McDonalds and Pizza Hut.   As Gertrude Stein said, there is no\nthere there. You could be anywhere.These independent restaurants and cafes are not just feeding people.\nThey're making there be a there here.So here is my first concrete recommendation for turning Pittsburgh\ninto the next Silicon Valley: do everything you can to encourage\nthis youth-driven food boom.  What could the city do?  Treat the\npeople starting these little restaurants and cafes as your users,\nand go ask them what they want.  I can guess at least one thing\nthey might want: a fast permit process.  San Francisco has left you\na huge amount of room to beat them in that department.I know restaurants aren't the prime mover though.  The prime mover,\nas the Times article said, is cheap housing.  That's a big advantage.\nBut that phrase \"cheap housing\" is a bit misleading.  There are\nplenty of places that are cheaper.  What's special about Pittsburgh\nis not that it's cheap, but that it's a cheap place you'd actually\nwant to live.Part of that is the buildings themselves. I realized a long time\nago, back when I was a poor twenty-something myself, that the best\ndeals were places that had once been rich, and then became poor.\nIf a place has always been rich, it's nice but too expensive.  If\na place has always been poor, it's cheap but grim.  But if a place\nwas once rich and then got poor, you can find palaces for cheap.\nAnd that's what's bringing people here.  When Pittsburgh was rich,\na hundred years ago, the people who lived here built big solid\nbuildings.  Not always in the best taste, but definitely solid.  So\nhere is another piece of advice for becoming a startup hub: don't\ndestroy the buildings that are bringing people here.  When cities\nare on the way back up, like Pittsburgh is now, developers race to\ntear down the old buildings.  Don't let that happen.  Focus on\nhistoric preservation.  Big real estate development projects are\nnot what's bringing the twenty-somethings here.  They're the opposite\nof the new restaurants and cafes; they subtract personality from\nthe city.The empirical evidence suggests you cannot be too strict about\nhistoric preservation.  The tougher cities are about it, the better\nthey seem to do.But the appeal of Pittsburgh is not just the buildings themselves,\nbut the neighborhoods they're in. Like San Francisco and New York,\nPittsburgh is fortunate in being a pre-car city.  It's not too\nspread out. Because those 25 to 29 year olds do not like driving.\nThey prefer walking, or bicycling, or taking public transport.  If\nyou've been to San Francisco recently you can't help noticing the\nhuge number of bicyclists.  And this is not just a fad that the\ntwenty-somethings have adopted.  In this respect they have discovered\na better way to live.  The beards will go, but not the bikes.  Cities\nwhere you can get around without driving are just better period.\nSo I would suggest you do everything you can to capitalize on this.\nAs with historic preservation, it seems impossible to go too far.Why not make Pittsburgh the most bicycle and pedestrian friendly\ncity in the country?  See if you can go so far that you make San\nFrancisco seem backward by comparison.  If you do, it's very unlikely\nyou'll regret it.  The city will seem like a paradise to the young\npeople you want to attract.  If they do leave to get jobs elsewhere,\nit will be with regret at leaving behind such a place.  And what's\nthe downside?  Can you imagine a headline \"City ruined by becoming\ntoo bicycle-friendly?\"  It just doesn't happen.So suppose cool old neighborhoods and cool little restaurants make\nthis the next Portland.  Will that be enough?  It will put you in\na way better position than Portland itself, because Pittsburgh has\nsomething Portland lacks: a first-rate research university.  CMU\nplus little cafes means you have more than hipsters drinking lattes.\nIt means you have hipsters drinking lattes while talking about\ndistributed systems.  Now you're getting really close to San\nFrancisco.In fact you're better off than San Francisco in one way, because\nCMU is downtown, but Stanford and Berkeley are out in the suburbs.What can CMU do to help Pittsburgh become a startup hub?  Be an\neven better research university.  CMU is one of the best universities\nin the world, but imagine what things would be like if it were the\nvery best, and everyone knew it.  There are a lot of ambitious\npeople who must go to the best place, wherever it is—if it's in\nSiberia.  If CMU were it, they would all come here. There would be\nkids in Kazakhstan dreaming of one day living in Pittsburgh.Being that kind of talent magnet is the most important contribution\nuniversities can make toward making their city a startup hub.  In\nfact it is practically the only contribution they can make.But wait, shouldn't universities be setting up programs with words\nlike \"innovation\" and \"entrepreneurship\" in their names?  No, they\nshould not.  These kind of things almost always turn out to be\ndisappointments.  They're pursuing the wrong targets.  The way to\nget innovation is not to aim for innovation but to aim for something\nmore specific, like better batteries or better 3D printing.  And\nthe way to learn about entrepreneurship is to do it, which you can't\nin school.I know it may disappoint some administrators to hear that the best\nthing a university can do to encourage startups is to be a great\nuniversity.  It's like telling people who want to lose weight that\nthe way to do it is to eat less.But if you want to know where startups come from, look at the\nempirical evidence.  Look at the histories of the most successful\nstartups, and you'll find they grow organically out of a couple of\nfounders building something that starts as an interesting side\nproject.  Universities are great at bringing together founders, but\nbeyond that the best thing they can do is get out of the way.  For\nexample, by not claiming ownership of \"intellectual property\" that\nstudents and faculty develop, and by having liberal rules about\ndeferred admission and leaves of absence.In fact, one of the most effective things a university could do to\nencourage startups is an elaborate form of getting out of the way\ninvented by Harvard.  Harvard used to have exams for the fall\nsemester after Christmas.  At the beginning of January they had\nsomething called \"Reading Period\" when you were supposed to be\nstudying for exams.  And Microsoft and Facebook have something in\ncommon that few people realize: they were both started during Reading\nPeriod.  It's the perfect situaton for producing the sort of side\nprojects that turn into startups. The students are all on campus,\nbut they don't have to do anything because they're supposed to be\nstudying for exams.Harvard may have closed this window, because a few years ago they\nmoved exams before Christmas and shortened reading period from 11\ndays to 7.  But if a university really wanted to help its students\nstart startups, the empirical evidence, weighted by market cap,\nsuggests the best thing they can do is literally nothing.The culture of Pittsburgh is another of its strengths.  It seems\nlike a city has to be very socially liberal to be a startup hub,\nand it's pretty clear why. A city has to tolerate strangeness to\nbe a home for startups, because startups are so strange.  And you\ncan't choose to allow just the forms of strangeness that will turn\ninto big startups, because they're all intermingled.  You have to\ntolerate all strangeness.That immediately rules out big chunks of the US.  I'm optimistic\nit doesn't rule out Pittsburgh.  One of the things I remember from\ngrowing up here, though I didn't realize at the time that there was\nanything unusual about it, is how well people got along.  I'm still\nnot sure why.  Maybe one reason was that everyone felt like an\nimmigrant.  When I was a kid in Monroeville, people didn't call\nthemselves American.  They called themselves Italian or Serbian or\nUkranian.  Just imagine what it must have been like here a hundred\nyears ago, when people were pouring in from twenty different\ncountries.  Tolerance was the only option.What I remember about the culture of Pittsburgh is that it was\nboth tolerant and pragmatic.  That's how I'd describe the culture\nof Silicon Valley too.  And it's not a coincidence, because Pittsburgh\nwas the Silicon Valley of its time.  This was a city where people\nbuilt new things.  And while the things people build have changed,\nthe spirit you need to do that kind of work is the same.So although an influx of latte-swilling hipsters may be annoying\nin some ways, I would go out of my way to encourage them.  And more\ngenerally to tolerate strangeness, even unto the degree wacko\nCalifornians do.  For Pittsburgh that is a conservative choice:\nit's a return to the city's roots.Unfortunately I saved the toughest part for last. There is one more\nthing you need to be a startup hub, and Pittsburgh hasn't got it:\ninvestors.  Silicon Valley has a big investor community because\nit's had 50 years to grow one.  New York has a big investor community\nbecause it's full of people who like money a lot and are quick to\nnotice new ways to get it.  But Pittsburgh has neither of these.\nAnd the cheap housing that draws other people here has no effect\non investors.If an investor community grows up here, it will happen the same way\nit did in Silicon Valley: slowly and organically.  So I would not\nbet on having a big investor community in the short term.  But\nfortunately there are three trends that make that less necessary\nthan it used to be.  One is that startups are increasingly cheap\nto start, so you just don't need as much outside money as you used\nto.  The second is that thanks to things like Kickstarter, a startup\ncan get to revenue faster.  You can put something on Kickstarter\nfrom anywhere.  The third is programs like Y Combinator.  A startup\nfrom anywhere in the world can go to YC for 3 months, pick up\nfunding, and then return home if they want.My advice is to make Pittsburgh a great place for startups, and\ngradually more of them will stick.  Some of those will succeed;\nsome of their founders will become investors; and still more startups\nwill stick.This is not a fast path to becoming a startup hub. But it is at\nleast a path, which is something few other cities have.  And it's\nnot as if you have to make painful sacrifices in the meantime.\nThink about what I've suggested you should do.  Encourage local\nrestaurants, save old buildings, take advantage of density, make\nCMU the best, promote tolerance.  These are the things that make\nPittsburgh good to live in now.  All I'm saying is that you should\ndo even more of them.And that's an encouraging thought.  If Pittsburgh's path to becoming\na startup hub is to be even more itself, then it has a good chance\nof succeeding.  In fact it probably has the best chance of any city\nits size.  It will take some effort, and a lot of time, but if any\ncity can do it, Pittsburgh can.Thanks to Charlie Cheever and Jessica Livingston for reading\ndrafts of this, and to Meg Cheever for organizing Opt412 and inviting\nme to speak."},{"title":"How to Make Wealth","text":"May 2004\n(This essay was originally published in Hackers\n& Painters.)\nIf you wanted to get rich, how would you do it? I think your best\nbet would be to start or join a startup.  That's been a\nreliable way to get rich for hundreds of years.  The word \"startup\"\ndates from the 1960s, but what happens in one is\nvery similar to the venture-backed trading voyages of the\nMiddle Ages.Startups usually involve technology, so much so that the phrase\n\"high-tech startup\" is almost redundant.  A startup is a small\ncompany that takes on a hard technical problem.Lots of people get rich knowing nothing more than that.\nYou don't have to know physics to be a good pitcher.  But\nI think it could give you an edge to understand the underlying principles.\nWhy do startups have to be small?\nWill a startup inevitably stop being a startup as it\ngrows larger?\nAnd why do they so often work on\ndeveloping new technology?   Why are there so many startups\nselling new drugs or computer software, and none selling corn oil\nor laundry detergent?The PropositionEconomically, you can think of a startup as a way to\ncompress your whole working life into a few years.  Instead\nof working at a low intensity for forty years, you work as\nhard as you possibly can for four.  This pays especially well\nin technology, where you earn a premium for working fast.Here is a brief sketch of the economic proposition.  If you're\na good hacker in your mid twenties, you can\nget a job paying about $80,000 per year.  So on average\nsuch a hacker must be\nable to do at least $80,000 worth of work per year for the\ncompany just to break even.  You could probably\nwork twice as many hours as a corporate employee, and if\nyou focus you can probably get three times as much done in\nan hour.\n[1]\nYou should get another multiple of two, at\nleast, by eliminating the drag\nof the pointy-haired middle\nmanager who would be your boss in a big company.\nThen there is one more multiple: how much smarter are you\nthan your job description expects you to be?\nSuppose another multiple of three.  Combine all these multipliers, and I'm\nclaiming you could be 36 times more\nproductive than you're expected to be in a random corporate\njob.\n[2]\nIf a fairly good hacker is worth $80,000 a year at a\nbig company, then a smart\nhacker working very hard without any corporate\nbullshit to slow him down should be able to do work worth about\n$3 million a year.Like all back-of-the-envelope calculations, this one\nhas a lot of wiggle room.  I wouldn't try to\ndefend the actual numbers.  But I stand by the\nstructure of the calculation.  I'm not claiming\nthe multiplier is precisely 36, but it is certainly more\nthan 10, and probably rarely as high as 100.If $3 million a year seems\nhigh, remember that we're talking about the limit case:\nthe case where you not only have zero leisure time\nbut indeed work so hard that you endanger your health.Startups are not magic.  They don't change the laws of\nwealth creation.  They just represent a point at the far end of the curve.\nThere is a conservation law at work here: if\nyou want to make a million dollars, you have to endure a\nmillion dollars' worth of pain.\nFor example, one way to\nmake a million dollars would be to work for the\nPost Office your whole life, and save every penny of your\nsalary.  Imagine the stress of working for the Post\nOffice for fifty years.   In a startup you compress all\nthis stress into three or four years.  You do tend to get a\ncertain\nbulk discount if you buy the economy-size pain,\nbut you can't evade the fundamental conservation law.\nIf starting a startup were easy, everyone would do it.Millions, not BillionsIf $3 million a year seems high to some people, it will seem\nlow to others.  Three million?\nHow do I get to be a billionaire, like Bill Gates?So let's get Bill Gates out of the way right now.  It's not\na good idea to use famous rich people\nas examples, because the press only\nwrite about the very richest, and these tend to be outliers.\nBill Gates is a smart, determined, and hardworking man,\nbut you need more than\nthat to make as much money as he has.  You also need to be\nvery lucky.There is a large random\nfactor in the success of any company.  So the guys you end\nup reading about in the papers are the ones who are very\nsmart, totally dedicated, and win the lottery.\nCertainly Bill is smart and dedicated, but Microsoft also\nhappens to have been the beneficiary of one of the most spectacular\nblunders in the history of business: the licensing deal for\nDOS.  No doubt Bill did\neverything he could to steer IBM into making that blunder,\nand he has done an excellent job of exploiting it, but if\nthere had been one person with a brain on IBM's side,\nMicrosoft's future would have been very different.\nMicrosoft at that stage had little leverage over IBM.\nThey were effectively a component supplier.  If IBM had\nrequired an exclusive license, as they should have, Microsoft\nwould still have signed the deal.  It would still have\nmeant a lot of money for them,  and IBM\ncould easily have gotten an operating system elsewhere.Instead IBM ended up using all its power in the market\nto give Microsoft control of the PC standard.  From\nthat point, all Microsoft had to do was execute.  They\nnever had to bet the company on a bold decision.  All they\nhad to do was play hardball with licensees and copy more\ninnovative products reasonably promptly.If IBM hadn't made this mistake, Microsoft would\nstill have been a successful company, but it\ncould not have grown so big so fast.\nBill Gates would be rich, but he'd be somewhere\nnear the bottom of the Forbes 400 with the other guys his age.There are a lot of ways to get\nrich, and this essay is about only one of them.  This\nessay is about how to make money by creating wealth and\ngetting paid for it.  There are plenty of other ways to\nget money, including chance, speculation, marriage, inheritance,\ntheft, extortion, fraud, monopoly,\ngraft, lobbying,\ncounterfeiting, and prospecting.  Most of the greatest fortunes\nhave probably involved several of these.The advantage of creating wealth, as a way to get rich,\nis not just that it's more legitimate\n(many of the other methods are now illegal)\nbut that it's more\nstraightforward.  You just have to do something people want.Money Is Not WealthIf you want to create wealth, it will help to understand what it is.\nWealth is not the same thing as money.\n[3]\nWealth is as old as\nhuman history.  Far older, in fact; ants have wealth.\nMoney is a comparatively recent invention.Wealth is the fundamental thing.  Wealth is stuff we want: food,\nclothes, houses, cars, gadgets, travel to interesting places,\nand so on.  You can have wealth without\nhaving money.  If you had a magic machine that\ncould on command make you a car or cook you dinner or do your\nlaundry, or do anything else you wanted, you wouldn't need money.\nWhereas if you were in the middle of Antarctica, where there is\nnothing to buy, it wouldn't matter how much money you had.Wealth is what you want, not money.  But if wealth is the important\nthing, why does everyone talk about making money?   It is\na kind of shorthand: money is a way of moving wealth, and in practice\nthey are usually interchangeable.  But they are not the same thing,\nand unless you plan to get rich by counterfeiting, talking about\nmaking money can make it harder to understand how to\nmake money.Money is a side effect of specialization.\nIn a specialized society, most of the\nthings you need, you can't make for yourself.  If you want a potato\nor a pencil or a place to live, you have to get it from someone\nelse.How do you get the person who grows the potatoes to give you some?\nBy giving him something he wants in return.  But you can't get\nvery far by trading things directly with the people who\nneed them.  If you make violins, and none of the local\nfarmers wants one, how will you eat?The solution societies find, as they get more specialized, is to\nmake the trade into a two-step process.  Instead of trading violins\ndirectly for potatoes, you trade violins for, say, silver,\nwhich you can then trade again for anything else you need.  The\nintermediate stuff-- the medium of exchange-- can be anything that's\nrare and portable.  Historically metals have been the most common,\nbut recently we've been using a medium of exchange, called the dollar,\nthat doesn't physically exist.  It works as a medium of exchange,\nhowever, because its rarity\nis guaranteed by the U.S. Government.The advantage of a medium of exchange is that it makes trade work.\nThe disadvantage is that it tends to obscure what trade really\nmeans.  People think that what a business does is make money.\nBut money is just the intermediate stage-- just\na shorthand-- for whatever people want.\nWhat most businesses really do is make\nwealth.  They do something people want.\n[4]The Pie FallacyA surprising number of people retain from childhood the idea\nthat there is a fixed amount of wealth in the world.\nThere is, in any normal family, a fixed amount of money at\nany moment.  But that's not the same thing.When wealth is talked about in this context, it is often\ndescribed as a pie.  \"You can't make the pie larger,\"\nsay politicians.\nWhen you're\ntalking about the amount of money in one family's bank\naccount, or the amount available to a government from one\nyear's tax revenue, this is true.\nIf one person gets more, someone else has to get less.I can remember believing, as a child, that if a few\nrich people had all the money, it left less for everyone else.\nMany people seem to continue to believe something like this\nwell into adulthood.  This fallacy is usually there in the\nbackground when you hear someone talking about how x percent\nof the population have y percent of the wealth.  If you plan\nto start a startup, then whether you realize it or not, you're\nplanning to disprove the Pie Fallacy.What leads people astray here is the abstraction of\nmoney.  Money is not wealth.  It's\njust something we use to move wealth around.\nSo although there may be, in certain specific moments (like\nyour family, this month) a fixed amount of money available to\ntrade with other people for things you want,\nthere is not a fixed amount of wealth in the world.\nYou can make more wealth.  Wealth has been getting created and\ndestroyed (but on balance, created) for all of human history.Suppose you own a beat-up old car.\nInstead of sitting on your butt next\nsummer, you could spend the time restoring your car to pristine condition.\nIn doing so you create wealth.  The world is-- and\nyou specifically are-- one pristine old car the richer.  And not\njust in some metaphorical way.  If you sell your car,\nyou'll get more for it.In restoring your old car you have made yourself\nricher.  You haven't made anyone else poorer.  So there is\nobviously not a fixed pie.  And in fact, when you look at\nit this way, you wonder why anyone would think there was.\n[5]Kids know, without knowing they know, that they can create\nwealth.  If you need to give someone a present and don't\nhave any money, you make one.  But kids are so bad at making\nthings that they consider home-made presents to be a distinct,\ninferior, sort of thing to store-bought ones-- a mere expression\nof the proverbial thought that counts.\nAnd indeed, the lumpy ashtrays\nwe made for our parents did not have much of a resale market.CraftsmenThe people most likely to grasp that wealth can be\ncreated are the ones who are good at making things, the craftsmen.\nTheir hand-made objects become store-bought ones.\nBut with the rise of industrialization there are fewer and\nfewer craftsmen.  One of the biggest remaining groups  is\ncomputer programmers.A programmer can sit down in front of a computer and\ncreate wealth.  A good piece of software is, in itself,\na valuable thing.\nThere is no manufacturing to confuse the issue.  Those\ncharacters you type\nare a complete, finished product.\nIf someone sat down and wrote a web\nbrowser that didn't suck (a fine idea, by the way), the world\nwould be that much richer.\n[5b]Everyone in a company works together to create\nwealth, in the sense of making more things people want.\nMany of the employees (e.g. the people in the mailroom or\nthe personnel department) work at one remove from the\nactual making of stuff.  Not the programmers.  They\nliterally think the product, one line at a time.\nAnd so it's clearer to programmers that wealth is something\nthat's made, rather than being distributed, like slices of a\npie, by some imaginary Daddy.It's also obvious to programmers that there are huge variations\nin the rate at which wealth is created.  At Viaweb we had one\nprogrammer who was a sort of monster of productivity.\nI remember watching what he did one long day and estimating that\nhe had added several hundred thousand dollars\nto the market value of the company.\nA great programmer, on a roll, could\ncreate a million dollars worth of wealth in a couple weeks.\nA mediocre programmer over the same period will generate zero or\neven negative wealth (e.g. by introducing bugs).This is\nwhy so many of the best programmers are libertarians.\nIn our world, you sink or swim, and there are no excuses.\nWhen those far removed from the creation of wealth-- undergraduates,\nreporters, politicians-- hear\nthat the richest 5% of the people have\nhalf the total wealth, they tend to think injustice!\nAn experienced programmer would be more likely to think\nis that all?  The top 5% of programmers\nprobably write 99% of the good software.Wealth can be created without being sold.  Scientists, till\nrecently at least, effectively donated the wealth they\ncreated.  We are all richer for knowing about penicillin,\nbecause we're less likely to die from infections.  Wealth\nis whatever people want, and not dying is certainly something\nwe want.  Hackers often donate their work by\nwriting open source software that anyone can use for free.\nI am much the richer for the operating system\nFreeBSD, which I'm running on the computer I'm using now,\nand so is Yahoo, which runs it on all their servers.What a Job IsIn industrialized countries, people belong to one institution or\nanother at least until their twenties.  After all those years you get\nused to the idea of belonging to a group of people who all get up\nin the morning, go to some set of buildings, and do things that they\ndo not, ordinarily, enjoy doing.  Belonging to such a group becomes\npart of your identity: name, age, role, institution.\nIf you have to introduce yourself, or\nsomeone else describes you, it will be as something like, John\nSmith, age 10, a student at such and such elementary school, or\nJohn Smith, age 20, a student at such and such college.When John Smith finishes school he is expected to get a job.  And\nwhat getting a job seems to mean is joining another institution.\nSuperficially it's a lot like college.  You pick the companies you\nwant to work for and apply to join them.  If one likes you, you\nbecome a member of this new group.  You get up in the morning and\ngo to a new set of buildings, and do things that you do not, ordinarily,\nenjoy doing.  There are a few differences: life is not as much fun,\nand you get paid, instead of paying, as you did in college.  But\nthe similarities feel greater than the differences.  John Smith is\nnow John Smith, 22, a software developer at such and such corporation.In fact John Smith's\nlife has changed more than he realizes.  Socially, a company\nlooks much like college, but the deeper you go into the\nunderlying reality, the more different it gets.What a company does, and has to do if it wants to continue to\nexist, is earn money.  And the way most companies make money\nis by creating wealth.  Companies can be so specialized that this\nsimilarity is concealed, but it is not only manufacturing\ncompanies that create wealth.  A big component of wealth is\nlocation.\nRemember that magic machine that could\nmake you cars and cook you dinner and so on?  It would not be\nso useful if it delivered your dinner to a random location\nin central Asia.\nIf wealth means what people want, companies that move\nthings also create wealth.  Ditto for\nmany other kinds of companies that don't make anything\nphysical.  Nearly all companies exist to do something people\nwant.And that's what you do, as well, when you go to work for a company.\nBut here there is another layer that tends to obscure the underlying\nreality.  In a company, the work you do is averaged together with\na lot of other people's.\nYou may not even be aware you're doing something people\nwant.  Your contribution may be indirect.  But the company as a\nwhole must be giving people something they want, or they won't make\nany money.  And if they are paying you x dollars a year, then on\naverage you must be contributing at least x dollars a year worth\nof work, or the company will be spending more than it makes,\nand will go out of business.Someone graduating from college thinks, and is told, that he needs\nto get a job, as if the important thing were becoming a member of\nan institution.  A more direct way to put it would be: you need to\nstart doing something people want.  You don't\nneed to\njoin a company to do that.  All a company is is a group of people\nworking together to do something people want.  It's doing something people\nwant that matters, not joining the group.\n[6]For most people the\nbest plan probably is to go to work for some existing\ncompany.  But it is a good idea to understand what's happening\nwhen you do this.  A job means doing something people want,\naveraged together with everyone else in that company.Working HarderThat averaging gets to be a problem.\nI think the single biggest problem afflicting large companies is the\ndifficulty of assigning a value to each person's work.\nFor the most part they punt.  In a\nbig company you get paid a fairly predictable salary for working\nfairly hard.  You're expected not to be obviously incompetent or\nlazy, but you're not expected to devote your whole life to your\nwork.It turns out, though, that there are economies of scale in how much of your\nlife you devote to your work.  In the right kind of business,\nsomeone who really devoted himself to work could generate ten or\neven a hundred times as much wealth as an average\nemployee.  A programmer, for example, instead of chugging along\nmaintaining and updating an existing piece of software, could write\na whole new piece of software, and with it create a new source of\nrevenue.Companies are not set up to reward people who want to do this.\nYou can't go to your boss and say, I'd like to start working ten\ntimes as hard, so will you please pay me ten times as much? For\none thing, the official fiction is that you are already working as\nhard as you can.  But a more serious problem is that the company\nhas no way of measuring the value of your work.Salesmen are an exception.  It's easy\nto measure how much revenue they generate, and they're\nusually paid a percentage of it.  If a salesman wants to work harder,\nhe can just start doing it, and he will automatically\nget paid proportionally more.There is one other job besides sales where big companies can\nhire first-rate people: in the top management jobs.\nAnd for the same reason: their performance can\nbe measured.  The top managers are\nheld responsible for the performance of the entire company.\nBecause an ordinary employee's performance can't usually\nbe measured, he is not expected to do\nmore than put in a solid effort.  Whereas top management, like\nsalespeople, have to actually come up with the numbers.\nThe CEO of a company that tanks cannot plead that he put in\na solid effort.  If the company does badly, he's done badly.A company that could pay all its employees so straightforwardly\nwould be enormously successful.  Many employees would work harder\nif they could get paid for it.  More importantly,\nsuch a company would attract people who wanted to work\nespecially hard.\nIt would crush its competitors.Unfortunately, companies can't pay everyone like salesmen.  Salesmen\nwork alone.  Most employees' work is tangled together.  Suppose\na company makes some kind of consumer gadget.  The\nengineers build a reliable gadget with all kinds of new features;\nthe industrial designers design a beautiful case for it; and then\nthe marketing people convince everyone that\nit's something they've got to have.  How do you know how much of the\ngadget's sales are due to each group's efforts?  Or, for that\nmatter, how much is due to the creators of past gadgets that gave\nthe company a reputation for quality?  There's no way to\nuntangle all their contributions.  Even if you could read the minds\nof the consumers, you'd find these factors were all blurred together.If you want to go faster, it's a problem to have your work\ntangled together with a large number of other people's.  In a\nlarge group, your performance is not separately measurable-- and\nthe rest of the group slows you down.Measurement and LeverageTo get rich you need to get yourself in a situation with two\nthings, measurement and leverage.  You need to be in a\nposition where your performance can be measured, or there is\nno way to get paid more by doing more.  And you have to\nhave leverage, in the sense that the decisions you make have\na big effect.Measurement alone is not enough.  An example of a job with\nmeasurement but not leverage is doing piecework in a\nsweatshop.  Your performance is measured and you get paid\naccordingly, but you have no scope for decisions.  The only\ndecision you get to make is how fast you work, and that\ncan probably only increase your earnings by a factor\nof two or three.An example of a job with both measurement and leverage would\nbe lead actor in a movie.  Your performance can be measured in the\ngross of the movie.  And you have leverage in the sense that your\nperformance can make or break it.CEOs also have both measurement and leverage.  They're measured,\nin that the performance of the company is their performance.\nAnd they have leverage in that their decisions\nset the whole company moving in one direction or another.I think everyone who gets rich by their own efforts will be\nfound to be in a situation with measurement and leverage.\nEveryone I can think of does: CEOs, movie stars,\nhedge fund managers, professional athletes.  A good hint to the\npresence of leverage is the possibility of failure.\nUpside must be balanced by downside, so if there is\nbig potential for gain there must also be a terrifying\npossibility of loss.  CEOs, stars, fund managers, and athletes\nall live with the sword hanging over their heads;\nthe moment they start to suck, they're out.  If you're in\na job that feels safe, you are not going to get rich,\nbecause if there is no danger there is almost certainly no leverage.But you don't have to become a CEO or a movie star to\nbe in a situation with measurement and leverage.  All you\nneed to do is be part of a small group working on a\nhard problem.Smallness = MeasurementIf you can't measure the value of the work done by individual\nemployees, you can get close.  You can measure the value\nof the work done by small groups.One level at which you can accurately measure the revenue\ngenerated by employees is at the level of the whole company.\nWhen the company is small, you are thereby fairly close to\nmeasuring the contributions of individual employees.  A viable\nstartup might only have ten employees, which puts you within a\nfactor of ten of measuring individual effort.Starting or joining a startup is thus as close as most\npeople can get to saying to one's boss, I want to work ten times\nas hard, so please pay me ten times as much.  There are two\ndifferences: you're not saying it to your boss, but directly to the\ncustomers (for whom your boss is only a proxy after all), and\nyou're not doing it individually, but along with a small group\nof other ambitious people.It will, ordinarily, be a group.  Except in a few unusual kinds\nof work, like acting or writing books, you can't be a company\nof one person.\nAnd the people you work with had better be good, because it's their work that\nyours is going to be averaged with.A big company is like a giant galley driven by a thousand rowers.\nTwo things keep the speed of the\ngalley down.  One is that individual rowers don't see any\nresult from working harder.\nThe other is that, in a group of a\nthousand people, the average rower is likely  to be\npretty average.If you took ten people at random out of the big galley and\nput them in a boat by themselves, they could probably go\nfaster.  They would have both carrot and stick to motivate\nthem.  An energetic rower would be encouraged by the thought\nthat he could have a visible effect on the speed of\nthe boat.  And if someone was lazy, the others would be more likely\nto notice and complain.But the real advantage of the ten-man boat shows when\nyou take the ten best rowers out of the big galley\nand put them in a boat together.  They will have all\nthe extra motivation that comes from being in a small group.\nBut more importantly, by selecting that small a group\nyou can get the best rowers.  Each one will be in\nthe top 1%.  It's a much better deal for them to average\ntheir work together with a small group of their peers than to\naverage it with everyone.That's the real point of startups.  Ideally, you are getting\ntogether with a group of other people who also want to work\na lot harder, and get paid a lot more, than they would in\na big company.  And because startups tend to get founded\nby self-selecting groups of ambitious people who already\nknow one another (at least by reputation), the level of\nmeasurement is more precise than you get from smallness alone.\nA startup is not merely ten people, but ten people like you.Steve Jobs once said that the success or failure of a startup\ndepends on the first ten employees.  I agree. If\nanything, it's more like the first five.\nBeing small is not, in itself, what makes startups kick butt,\nbut rather that small groups can be select.\nYou don't want small in the sense of a\nvillage, but small in the sense of an all-star team.The larger a group, the closer its average member will be to the average\nfor the population as a whole.   So all other things being\nequal, a very able person in a big company is probably\ngetting a bad deal, because his performance is dragged down by\nthe overall lower performance of the others.  Of course,\nall other things often are not equal: the able person may\nnot care about money, or may prefer the stability of a large\ncompany.  But a very able person who does care about money\nwill ordinarily do better to go off and work with a small\ngroup of peers.Technology = LeverageStartups offer anyone a way to be in a situation with\nmeasurement and leverage.\nThey allow measurement because they're small,\nand they offer leverage because they\nmake money by inventing new technology.What is technology?  It's technique. It's the way\nwe all do things.  And when\nyou discover a new way to do things, its value is multiplied\nby all the people who use it.  It is the proverbial fishing\nrod, rather than the fish.  That's the difference between a\nstartup and a restaurant or a barber shop.  You fry eggs or cut\nhair one customer at a time.  Whereas if\nyou solve a technical problem that a lot of people care about,\nyou help everyone who uses your solution.\nThat's leverage.If you look at history, it seems that most people\nwho got rich by creating wealth did it by developing\nnew technology.  You just can't fry eggs or cut hair fast enough.\nWhat made the Florentines rich in 1200\nwas the discovery of new techniques for making the high-tech\nproduct of the time, fine woven cloth.  What made the\nDutch rich in 1600 was the discovery of shipbuilding and\nnavigation techniques that enabled them to dominate the seas\nof the Far East.Fortunately there is a natural fit between smallness and\nsolving hard problems.  The leading edge of technology moves\nfast.  Technology that's valuable today could be worthless\nin a couple years.  Small companies are more at home in this\nworld, because they don't have layers of bureaucracy to\nslow them down.\nAlso, technical advances tend to come from unorthodox approaches,\nand small companies are less constrained by convention.Big companies can develop technology.  They just can't do it\nquickly.  Their size makes them slow and prevents\nthem from rewarding employees for the extraordinary\neffort required.  So in practice big companies only get to develop\ntechnology in fields where large capital requirements prevent startups from\ncompeting with them, like microprocessors, power plants,\nor passenger aircraft.  And even in those fields they depend heavily\non startups for components and ideas.It's obvious that biotech or software startups exist to solve\nhard technical problems, but\nI think it will also be found to be true\nin businesses that don't seem to be about technology.  McDonald's,\nfor example, grew big by designing a system, the McDonald's\nfranchise, that could then be reproduced at will all over the\nface of the earth.  A McDonald's franchise is controlled by rules\nso precise that it is practically\na piece of software.  Write once, run everywhere.\nDitto for Wal-Mart.  Sam Walton got rich not by being a\nretailer, but by designing a new kind of store.Use difficulty as a guide not just in selecting the overall\naim of your company, but also at decision points along the way.\nAt Viaweb one of our rules of thumb was run upstairs.\nSuppose you are a little, nimble guy being chased by a big,\nfat, bully.  You open a door and find yourself in a\nstaircase.  Do you go up or down?  I say up.  The\nbully can probably run downstairs as fast as you can.\nGoing upstairs his bulk will be more of a disadvantage.\nRunning upstairs is hard for you but even harder for him.What this meant in practice was that we deliberately sought\nhard problems.  If there were two features we could add to our\nsoftware, both equally valuable in proportion to their difficulty,\nwe'd always take the harder one.  Not just because it was\nmore valuable, but because it was harder.\nWe delighted in forcing bigger, slower competitors\nto follow us over difficult ground.\nLike guerillas, startups prefer the difficult terrain of the\nmountains, where the troops of the central government\ncan't follow.  I can remember times when we were just\nexhausted after wrestling all day with some horrible technical\nproblem.  And I'd be delighted, because something that was\nhard for us would be impossible for our competitors.This is not just a good way to run a startup.  It's what\na startup is.\nVenture capitalists know about this and have a phrase for it:\nbarriers to entry.  If you go to a VC with a new\nidea and ask him to invest in it, one of the first things\nhe'll ask is, how hard would this be for someone else to\ndevelop?  That is, how much difficult ground\nhave you put between yourself and potential pursuers?\n[7]\nAnd you had better have a convincing explanation of why\nyour technology would be hard to duplicate.  Otherwise as\nsoon as some big company becomes aware of it, they'll make\ntheir own, and with their brand name, capital, and\ndistribution clout, they'll take away your market overnight.\nYou'd be like guerillas caught in the open field by regular\narmy forces.One way to put up barriers to entry is through patents.\nBut patents may not provide much protection.\nCompetitors commonly find ways to work around a patent.\nAnd if they can't, they\nmay simply violate it and invite you to sue them.\nA big company is not afraid to be sued; it's an everyday thing\nfor them.  They'll make sure that suing them is expensive and\ntakes a long time.\nEver heard of Philo Farnsworth?  He invented\ntelevision.  The reason you've never\nheard of him is that his company was not the one to make\nmoney from it.\n[8]\nThe company that did was RCA, and\nFarnsworth's reward for his efforts was a decade of\npatent litigation.Here, as so often, the best defense is a good offense.  If\nyou can develop technology that's simply too hard for\ncompetitors to duplicate, you don't need to rely on other\ndefenses.  Start by picking a hard problem, and\nthen at every decision point, take the harder choice.\n[9]The Catch(es)If it were simply a matter of working harder than\nan ordinary employee and getting paid proportionately, it would\nobviously be a good deal to start a startup.  Up to a point it\nwould be more fun. I don't think many people\nlike the slow pace of big companies, the interminable meetings,\nthe water-cooler conversations, the clueless middle managers,\nand so on.Unfortunately there are a couple catches.  One is that you\ncan't choose the point on the curve that you want to inhabit.\nYou can't decide, for example, that you'd like to work just\ntwo or three times as hard, and get paid that much more.  When\nyou're running a startup, your competitors decide how\nhard you work.  And they pretty much all make the same decision:\nas hard as you possibly can.The other catch is that the payoff is only on average proportionate\nto your productivity.  There is, as I said before, a large\nrandom multiplier in the success of any company.  So in\npractice the deal is not that you're 30 times as productive and get\npaid 30 times as much.  It is that you're 30 times as productive,\nand get paid between zero and a thousand times as much.\nIf the mean is 30x, the median is probably zero.\nMost startups tank, and not just the dogfood\nportals we all heard about during\nthe Internet Bubble.  It's common for a startup\nto be developing a genuinely good product, take slightly\ntoo long to do it, run out of money, and have to shut down.A startup is like a mosquito.  A bear can absorb a hit and a crab\nis armored against one, but a mosquito is designed for one thing:\nto score.  No energy is wasted on defense.  The defense of mosquitos,\nas a species, is that there are a lot of them, but this is little\nconsolation to the individual mosquito.Startups, like mosquitos, tend to be an all-or-nothing proposition.\nAnd you don't generally know which of the two you're going to\nget till the last minute.\nViaweb came close to tanking several times. Our trajectory\nwas like a sine wave.  Fortunately we got bought at\nthe top of the cycle, but it was damned close.   While we were\nvisiting Yahoo in California to talk about selling the company\nto them, we had to borrow a conference room to reassure\nan investor who was about to back out of a new round of funding\nthat we needed to stay alive.The all-or-nothing aspect of startups was not something we wanted.\nViaweb's hackers were all extremely risk-averse.\nIf there had been some way just to work super hard and get\npaid for it, without having a lottery mixed in, we would have\nbeen delighted.  We would have much preferred a 100% chance of\n$1 million to a 20% chance of $10 million, even though\ntheoretically the second is worth twice as much.   Unfortunately,\nthere is not currently any space in the business world where\nyou can get the first deal.The closest you can get is by\nselling your startup in the early stages, giving up upside\n(and risk) for a smaller but guaranteed payoff.  We had a\nchance to do this, and stupidly, as we then thought, let it slip by.\nAfter that we became comically eager to sell.\nFor the next year or so,\nif anyone expressed the slightest curiosity about Viaweb\nwe would try to sell them the company.  But there were no takers,\nso we had to keep going.It would have been a bargain to\nbuy us at an early stage, but companies doing acquisitions are not\nlooking for bargains.  A company big enough to acquire\nstartups will be big enough to be fairly conservative, and\nwithin the company the people in charge of acquisitions will\nbe among the more conservative, because they are likely to be\nbusiness school types who joined the company late.\nThey would rather overpay for a safe choice.  So\nit is easier to sell an established startup, even at a large\npremium, than an early-stage one.Get UsersI think it's a good idea to get bought, if you can.  Running a\nbusiness is different from growing one.\nIt is just as well to let a big company take over once you reach\ncruising altitude.  It's\nalso financially wiser, because selling allows you to diversify.\nWhat would you think of a financial advisor who put all his\nclient's assets into one volatile stock?How do you get bought?  Mostly by doing the same things\nyou'd do if you didn't intend to sell the company.  Being\nprofitable, for example.   But getting bought is also an art\nin its own right, and one that we spent a lot of time trying\nto master.Potential buyers will\nalways delay if they can.  The hard part about getting\nbought is getting them to act.  For most people, the most powerful motivator\nis not the hope of gain, but the fear of loss.  For potential\nacquirers, the most powerful motivator is the prospect that\none of their competitors will buy you.  This, as we found,\ncauses CEOs to take red-eyes.\nThe second biggest is the worry that, if they don't buy you\nnow, you'll continue to grow rapidly and will cost more to\nacquire later, or even become a competitor.In both cases, what it all comes down to is users.\nYou'd think that a company about to buy you would do a lot of\nresearch and decide for themselves how valuable your technology\nwas.  Not at all.  What they go by is the number of users you\nhave.In effect, acquirers assume the customers know who has the\nbest technology.  And this is not as stupid as it sounds.  Users\nare the only real proof that you've created wealth.  Wealth is\nwhat people want, and if people aren't using your software,\nmaybe it's not just because you're bad at marketing.  Maybe it's\nbecause you haven't made what they want.Venture capitalists have a list of danger signs to watch out for.\nNear the top is the company run by techno-weenies who are\nobsessed with solving interesting technical problems, instead\nof making users happy.  In a startup, you're not just trying to\nsolve problems.  You're trying to solve problems that\nusers care about.So I think you should make users the test, just as\nacquirers do.  Treat a startup as an optimization problem\nin which performance is measured by number of users.  As anyone\nwho has tried to optimize software knows, the key is measurement.\nWhen you try to guess where your program is slow, and what would\nmake it faster, you almost always guess wrong.Number of users may not be the perfect test, but it will\nbe very close.  It's what acquirers care about.  It's what\nrevenues depend on.\nIt's what makes competitors unhappy.\nIt's what impresses reporters, and potential\nnew users.  Certainly it's a better test than your a priori\nnotions of what problems are important to solve, no matter how\ntechnically adept you are.Among other things, treating a startup as an optimization\nproblem will help you avoid another\npitfall that VCs worry about, and rightly-- taking a long time\nto develop a product.  Now we can recognize this as something\nhackers already know to avoid: premature optimization.  Get a version\n1.0 out there as soon as you can.  Until you have some users to\nmeasure, you're optimizing based on guesses.The ball you need to keep your eye on here is the underlying\nprinciple that wealth is what people want.  If you plan to get\nrich by creating wealth, you have to know what people want.\nSo few businesses really pay attention to making customers happy.\nHow often do you walk into a store, or call a company on the\nphone, with a feeling of dread in the back of your mind?\nWhen you hear \"your call is important to us, please stay on\nthe line,\" do you think, oh good, now everything will be all right?A restaurant can afford to serve the occasional burnt dinner.\nBut in technology, you cook one thing and that's what everyone\neats.  So any difference between what people want and what\nyou deliver is multiplied.\nYou please or annoy\ncustomers wholesale.  The closer you can get to what they want,\nthe more wealth you generate.Wealth and PowerMaking wealth is not the only way to get rich.  For most of\nhuman history it has not even been the most common.  Until\na few centuries ago,\nthe main sources of wealth were mines, slaves and serfs,\nland, and cattle,\nand the only ways to acquire these rapidly were by inheritance,\nmarriage, conquest, or confiscation.\nNaturally wealth had a bad reputation.Two things changed.  The first was the rule of law.  For most of the world's\nhistory, if you did somehow accumulate a fortune, the ruler or his\nhenchmen\nwould find a way to steal it.\nBut in medieval Europe something new happened.\nA new class of merchants and manufacturers\nbegan to collect in towns.\n[10]\nTogether they were able to withstand the local feudal\nlord.  So\nfor the first time in our history, the bullies stopped stealing the\nnerds' lunch money.\nThis was naturally a great incentive,\nand possibly indeed the main cause of the second big change,\nindustrialization.A great deal has been written about the causes of the Industrial\nRevolution.  But surely a necessary, if not sufficient, condition\nwas that people who made fortunes be able to enjoy them in peace.\n[11]\nOne piece of evidence is what happened to countries\nthat tried to return to the old model, like the Soviet\nUnion, and to a lesser extent Britain under the labor\ngovernments of the 1960s and early 1970s.  Take away the incentive\nof wealth, and technical innovation grinds to a halt.Remember what a startup is, economically:\na way of saying, I want to work faster.  Instead of accumulating\nmoney slowly by being paid a regular wage for fifty years, I\nwant to get it over with as soon as possible.  So governments\nthat forbid you to accumulate wealth are in effect decreeing\nthat you work slowly.  They're willing to let you earn $3 million over\nfifty years, but they're not willing to let you work so hard that\nyou can do it in two.  They are like\nthe corporate boss that you can't go to and say, I want to work\nten times as hard, so please pay me ten times a much.\nExcept this is not a boss you can escape by starting your own\ncompany.The problem with working slowly is not just that technical\ninnovation happens slowly.  It's that it tends not to happen at all.\nIt's only when you're deliberately looking for hard problems,\nas a way to use speed to the greatest advantage, that you take\non this kind of project.  Developing new technology is a\npain in the ass. It is, as Edison said, one percent\ninspiration and ninety-nine percent perspiration.\nWithout the incentive of wealth, no one wants to do it.\nEngineers will work on sexy projects like fighter planes and moon\nrockets for ordinary salaries, but more mundane technologies\nlike light bulbs or semiconductors have to be developed by entrepreneurs.Startups\nare not just something that happened in Silicon Valley in\nthe last couple decades.  Since it became possible to\nget rich by creating wealth, everyone who has done it has\nused essentially the same recipe: measurement and leverage,\nwhere measurement comes from working with a small\ngroup, and leverage from developing new techniques.\nThe recipe was the same in Florence in 1200 as it is\nin Santa Clara today.Understanding this may help to answer an important question:\nwhy Europe grew so powerful.\nWas it something about the geography of\nEurope?  Was it that Europeans are somehow racially superior?\nWas it their religion?  The answer (or at least\nthe proximate cause) may be that the\nEuropeans\nrode on the crest of a powerful new idea: allowing those who\nmade a lot of money to keep it.Once you're allowed to do that,\npeople who want to get rich can do it by generating\nwealth instead of stealing it.\nThe resulting technological growth translates not only\ninto wealth but into military power.  The theory that led to\nthe stealth plane was developed by a Soviet mathematician.\nBut because the Soviet Union didn't have a computer industry,\nit remained for them a theory;\nthey didn't have hardware capable of executing the calculations\nfast enough to design an actual airplane.In that respect the Cold War teaches the same lesson as\nWorld War II and, for that matter, most wars in recent history.\nDon't let a ruling\nclass of warriors and politicians squash the entrepreneurs.\nThe same recipe that makes individuals rich\nmakes countries powerful.  Let the nerds keep their lunch\nmoney, and you rule the world.Notes[1]\nOne valuable thing you tend to get only in startups is\nuninterruptability.  Different kinds of\nwork have different time quanta.  Someone proofreading a\nmanuscript\ncould probably be interrupted every fifteen minutes\nwith little loss of productivity.  But the time quantum for\nhacking is very long: it might take an hour just to load\na problem into your head.  So the\ncost of having someone from personnel\ncall you about a form you forgot to fill out can be huge.This is why hackers give you such a baleful stare as they\nturn from their screen to answer your question.  Inside\ntheir heads a giant house of cards is tottering.The mere possibility of being interrupted deters hackers\nfrom starting hard projects.  This is why they\ntend to work late at night, and why it's next to impossible\nto write great software in a cubicle (except late at night).One great advantage of startups is that they don't yet have\nany of the people who interrupt you.  There is no personnel\ndepartment, and thus no form nor anyone to call you about it.[2]\nFaced with the idea that people working for startups might be\n20 or 30 times as productive as those working for large companies,\nexecutives at large companies will naturally wonder, how could\nI get the people working for me to do that?  The answer is\nsimple: pay them to.Internally most companies are run like Communist states.\nIf you believe in free markets, why not turn your company into one?Hypothesis: A company will be maximally profitable when each\nemployee is paid in proportion to the wealth they generate.[3]\nUntil recently even governments sometimes didn't grasp the\ndistinction between money and wealth.  Adam\nSmith (Wealth of Nations, v:i) mentions several\nthat tried to preserve their\n\"wealth\" by forbidding the export of gold or silver.\nBut having more of the medium of exchange would not make\na country richer; if you have more money chasing the same\namount of material wealth, the only result is higher prices.[4]\nThere are many senses of the word \"wealth,\" not all of\nthem material.  I'm not trying to make a deep philosophical\npoint here about which\nis the true kind.  I'm writing about one specific,\nrather technical sense of the word \"wealth.\"  What\npeople will give you money for.\nThis is an interesting sort of wealth to study, because\nit is the kind that prevents you from starving.\nAnd what people will give you money for depends on them,\nnot you.When you're starting a business,\nit's easy to slide into thinking that customers\nwant what you do.  During the Internet Bubble I talked\nto a woman who, because she liked the outdoors, was\nstarting an \"outdoor portal.\" You know what\nkind of business you should start if you like\nthe outdoors?  One to recover data from crashed hard disks.What's the connection?  None at all.  Which is precisely my point.\nIf you want\nto create wealth (in the narrow technical sense of not\nstarving) then you should be especially skeptical about any\nplan that centers on things you like doing.\nThat is where your idea of what's valuable is least\nlikely to coincide with other people's.[5]\nIn the average car restoration you probably do make everyone\nelse microscopically poorer, by doing a small amount of damage to\nthe environment.  While environmental costs should be taken\ninto account, they don't\nmake wealth a zero-sum game.  For example, if you repair\na machine that's broken because a part has come unscrewed,\nyou create wealth with no environmental cost.[5b]\nThis essay was written before Firefox.[6]\nMany people feel confused and depressed in\ntheir early twenties.  Life seemed so much more fun in college.\nWell, of course it was.  Don't be fooled by the surface similarities.\nYou've gone from guest to servant.\nIt's possible to have fun in this new world.\nAmong other things, you now get to go behind the doors that say\n\"authorized personnel only.\"\nBut the change is a shock at first, and all the worse\nif you're not consciously aware of it.[7]\nWhen VCs asked us how long it would take another startup\nto duplicate our software, we used to reply that they probably\nwouldn't be able to at all. I think this made us seem naive,\nor liars.[8]\nFew technologies have one clear inventor.  So as\na rule, if you know the \"inventor\" of something\n(the telephone, the assembly line, the airplane,\nthe light bulb, the transistor) it is because their\ncompany made money from it, and the company's PR people worked\nhard to spread the story.  If you don't know who invented\nsomething (the automobile, the television, the computer,\nthe jet engine, the laser), it's because other companies\nmade all the money.[9]\nThis is a good plan for life in general.\nIf you have two choices, choose the harder.\nIf you're trying to decide whether to go out running or\nsit home and watch TV, go running.\nProbably the reason this trick works so well is that\nwhen you have two choices and one is harder, the\nonly reason you're even considering the other is laziness.\nYou know in the back of your mind what's the right thing\nto do, and this trick merely forces you to acknowledge it.[10]\nIt is probably no accident that the middle class\nfirst appeared in northern Italy and the low countries,\nwhere there were no strong central governments.   These two\nregions were the richest of their time and became the twin\ncenters from which Renaissance civilization radiated.\nIf they no longer play that role, it is because\nother places, like the United States, have been truer to the\nprinciples they discovered.[11]\nIt may indeed be a sufficient condition.  But if so, why didn't\nthe Industrial Revolution happen earlier?  Two possible (and\nnot incompatible) answers: (a) It did.\nThe Industrial Revolution was one in a series.\n(b) Because in medieval towns, monopolies\nand guild regulations initially slowed the development of new means\nof production.\nComment on this essay."},{"title":"How to Present to Investors","text":"August 2006, rev. April 2007, September 2010In a few days it will be Demo Day, when the startups we funded\nthis summer present to investors.  Y Combinator funds startups twice\na year, in January and June.  Ten weeks later we invite all the\ninvestors we know to hear them present what they've built so far.Ten weeks is not much time.  The average startup probably doesn't\nhave much to show for itself after ten weeks.  But the average\nstartup fails.  When you look at the ones that went on to do great\nthings, you find a lot that began with someone pounding out a\nprototype in a week or two of nonstop work.  Startups are a\ncounterexample to the rule that haste makes waste.(Too much money seems to be as bad for startups as too much time,\nso we don't give them much money either.)A week before Demo Day, we have a dress rehearsal called Rehearsal Day.\nAt other Y Combinator events we allow outside guests, but not at\nRehearsal Day.  No one except the other founders gets to see the rehearsals.The presentations on Rehearsal Day are often pretty rough.  But this is\nto be expected.  We try to pick founders who are good at building\nthings, not ones who are slick presenters.  Some of the founders\nare just out of college, or even still in it, and have never spoken\nto a group of people they didn't already know.So we concentrate on the basics.  On Demo Day each startup will\nonly get ten minutes, so we encourage them to focus on just two\ngoals: (a) explain what you're doing, and (b) explain why users\nwill want it.That might sound easy, but it's not when the speakers have no\nexperience presenting, and they're explaining technical matters to\nan audience that's mostly non-technical.This situation is constantly repeated when startups present to\ninvestors: people who are bad at explaining, talking to people who\nare bad at understanding.  Practically every successful startup,\nincluding stars like Google, presented at some point to investors\nwho didn't get it and turned them down.  Was it because the founders\nwere bad at presenting, or because the investors were obtuse?  It's\nprobably always some of both.At the most recent Rehearsal Day, we four Y Combinator partners found\nourselves saying a lot of the same things we said at the last two.\nSo at dinner afterward we collected all our tips about presenting\nto investors.  Most startups face similar challenges, so we hope\nthese will be useful to a wider audience.1. Explain what you're doing.Investors' main question when judging a very early startup is whether\nyou've made a compelling product.  Before they can judge whether\nyou've built a good x, they have to understand what kind of x you've\nbuilt.  They will get very frustrated if instead of telling them\nwhat you do, you make them sit through some kind of preamble.Say what you're doing as soon as possible, preferably in the first\nsentence. \"We're Jeff and Bob and we've built an easy to use web-based\ndatabase.  Now we'll show it to you and explain why people need\nthis.\"If you're a great public speaker you may be able to violate this\nrule.  Last year one founder spent the whole first half of his talk\non a fascinating analysis of the limits of the conventional desktop\nmetaphor.  He got away with it, but unless you're a captivating\nspeaker, which most hackers aren't, it's better to play it safe.2. Get rapidly to demo.This section is now obsolete for YC founders presenting\nat Demo Day, because Demo Day presentations are now so short\nthat they rarely include much if any demo.  They seem to work\njust as well without, however, which makes me think I was\nwrong to emphasize demos so much before.A demo explains what you've made more effectively than any verbal\ndescription.  The only thing worth talking about first is the problem\nyou're trying to solve and why it's important.  But don't spend\nmore than a tenth of your time on that.  Then demo.When you demo, don't run through a catalog of features.  Instead\nstart with the problem you're solving, and then show how your product\nsolves it.  Show features in an order driven by some kind of purpose,\nrather than the order in which they happen to appear on the screen.If you're demoing something web-based, assume that the network\nconnection will mysteriously die 30 seconds into your presentation,\nand come prepared with a copy of the server software running on\nyour laptop.3. Better a narrow description than a vague one.One reason founders resist describing their projects concisely is\nthat, at this early stage, there are all kinds of possibilities.\nThe most concise descriptions seem misleadingly narrow.  So for\nexample a group that has built an easy web-based database might\nresist calling their applicaton that, because it could be so much\nmore.  In fact, it could be anything...The problem is, as you approach (in the calculus sense) a description\nof something that could be anything, the content of your description\napproaches zero.  If you describe your web-based database as \"a\nsystem to allow people to collaboratively leverage the value of\ninformation,\" it will go in one investor ear and out the other.\nThey'll just discard that sentence as meaningless boilerplate, and\nhope, with increasing impatience, that in the next sentence you'll\nactually explain what you've made.Your primary goal is not to describe everything your system might\none day become, but simply to convince investors you're worth talking\nto further.  So approach this like an algorithm that gets the right\nanswer by successive approximations.  Begin with a description\nthat's gripping but perhaps overly narrow, then flesh it out to the\nextent you can.  It's the same principle as incremental development:\nstart with a simple prototype, then add features, but at every point\nhave working code.  In this case, \"working code\" means a working\ndescription in the investor's head.4. Don't talk and drive.Have one person talk while another uses the computer.  If the same\nperson does both, they'll inevitably mumble downwards at the computer\nscreen instead of talking clearly at the audience.As long as you're standing near the audience and looking at them,\npoliteness (and habit) compel them to pay attention to you.  Once\nyou stop looking at them to fuss with something on your computer,\ntheir minds drift off to the errands they have to run later.5. Don't talk about secondary matters at length.If you only have a few minutes, spend them explaining what your\nproduct does and why it's great.  Second order issues like competitors\nor resumes should be single slides you go through quickly at the\nend.  If you have impressive resumes, just flash them on the screen\nfor 15 seconds and say a few words.  For competitors, list the top\n3 and explain in one sentence each what they lack\nthat you have.  And put this kind of thing at the end, after you've\nmade it clear what you've built.6. Don't get too deeply into business models.It's good to talk about how you plan to make money, but mainly\nbecause it shows you care about that and have thought about it.\nDon't go into detail about your business model, because (a) that's\nnot what smart investors care about in a brief presentation, and\n(b) any business model you have at this point is probably wrong\nanyway.Recently a VC who came to speak at Y Combinator talked about a\ncompany he just invested in.  He said their business model was wrong\nand would probably change three times before they got it right.\nThe founders were experienced guys who'd done startups before and\nwho'd just succeeded in getting millions from one of the top VC\nfirms, and even their business model was crap.  (And yet he invested\nanyway, because he expected it to be crap at this stage.)If you're solving an important problem, you're going to sound a lot\nsmarter talking about that than the business model.  The business\nmodel is just a bunch of guesses, and guesses about stuff that's\nprobably not your area of expertise.  So don't spend your precious\nfew minutes talking about crap when you could be talking about\nsolid, interesting things you know a lot about: the problem you're\nsolving and what you've built so far.As well as being a bad use of time, if your business model seems\nspectacularly wrong, that will push the stuff you want investors\nto remember out of their heads.  They'll just remember you as the\ncompany with the boneheaded plan for making money, rather than the\ncompany that solved that important problem.7. Talk slowly and clearly at the audience.Everyone at Rehearsal Day could see the difference between the people\nwho'd been out in the world for a while and had presented to groups,\nand those who hadn't.You need to use a completely different voice and manner talking to\na roomful of people than you would in conversation.  Everyday life\ngives you no practice in this.  If you can't already do it, the\nbest solution is to treat it as a consciously artificial trick,\nlike juggling.However, that doesn't mean you should talk like some kind of\nannouncer.  Audiences tune that out.  What you need to do is talk\nin this artificial way, and yet make it seem conversational.  (Writing\nis the same.  Good writing is an elaborate effort to seem spontaneous.)If you want to write out your whole presentation beforehand and\nmemorize it, that's ok.  That has worked for some groups in the\npast.  But make sure to write something that sounds like spontaneous,\ninformal speech, and deliver it that way too.Err on the side of speaking slowly.  At Rehearsal Day, one of the founders\nmentioned a rule actors use: if you feel you're speaking too slowly,\nyou're speaking at about the right speed.8. Have one person talk.Startups often want to show that all the founders are equal partners.\nThis is a good instinct; investors dislike unbalanced teams.  But\ntrying to show it by partitioning the presentation is going too\nfar.  It's distracting.  You can demonstrate your respect\nfor one another in more subtle ways.  For example, when one of the\ngroups presented at Demo Day, the more extroverted of the two\nfounders did most of the talking, but he described his co-founder\nas the best hacker he'd ever met, and you could tell he meant it.Pick the one or at most two best speakers, and have them do most\nof the talking.Exception: If one of the founders is an expert in some specific\ntechnical field, it can be good for them to talk about that for a\nminute or so.  This kind of \"expert witness\" can add credibility,\neven if the audience doesn't understand all the details.  If Jobs\nand Wozniak had 10 minutes to present the Apple II, it might be a good plan\nto have Jobs speak for 9 minutes and have Woz speak for a minute\nin the middle about some of the technical feats he'd pulled off in\nthe design.  (Though of course if it were actually those two, Jobs\nwould speak for the entire 10 minutes.)9. Seem confident.Between the brief time available and their lack of technical\nbackground, many in the audience will have a hard time evaluating\nwhat you're doing.  Probably the single biggest piece of evidence,\ninitially, will be your own confidence in it.   You have\nto show you're impressed with what you've made.And I mean show, not tell.  Never say \"we're passionate\" or \"our\nproduct is great.\"  People just ignore that—or worse, write you\noff as bullshitters.  Such messages must be implicit.What you must not do is seem nervous and apologetic.  If you've\ntruly made something good, you're doing investors a favor by\ntelling them about it.  If you don't genuinely believe that, perhaps\nyou ought to change what your company is doing.  If you don't believe\nyour startup has such promise that you'd be doing them a favor by\nletting them invest, why are you investing your time in it?10. Don't try to seem more than you are.Don't worry if your company is just a few months old and doesn't\nhave an office yet, or your founders are technical people with no\nbusiness experience.  Google was like that once, and they turned out\nok.  Smart investors can see past such superficial flaws.  They're\nnot looking for finished, smooth presentations.  They're looking\nfor raw talent.  All you need to convince them of is that you're\nsmart and that you're onto something good.  If you try too hard to\nconceal your rawness—by trying to seem corporate, or pretending\nto know about stuff you don't—you may just conceal your talent.You can afford to be candid about what you haven't figured out yet.\nDon't go out of your way to bring it up (e.g. by having a slide\nabout what might go wrong), but don't try to pretend either that\nyou're further along than you are.  If you're a hacker and you're\npresenting to experienced investors, they're probably better at\ndetecting bullshit than you are at producing it.11. Don't put too many words on slides.When there are a lot of words on a slide, people just skip reading\nit.  So look at your slides and ask of each word \"could I cross\nthis out?\"  This includes gratuitous clip art.  Try to get your\nslides under 20 words if you can.Don't read your slides.  They should be something in the background\nas you face the audience and talk to them, not something you face\nand read to an audience sitting behind you.Cluttered sites don't do well in demos, especially when they're\nprojected onto a screen.  At the very least, crank up the font size\nbig enough to make all the text legible.  But cluttered sites are\nbad anyway, so perhaps you should use this opportunity to make your\ndesign simpler.12. Specific numbers are good.If you have any kind of data, however preliminary, tell the audience.\nNumbers stick in people's heads.  If you can claim that the median\nvisitor generates 12 page views, that's great.But don't give them more than four or five numbers, and only give\nthem numbers specific to you.  You don't need to tell them the size\nof the market you're in.  Who cares, really, if it's 500 million\nor 5 billion a year?  Talking about that is like an actor at the\nbeginning of his career telling his parents how much Tom Hanks\nmakes.  Yeah, sure, but first you have to become Tom Hanks.  The\nimportant part is not whether he makes ten million a year or a\nhundred, but how you get there.13. Tell stories about users.The biggest fear of investors looking at early stage startups is\nthat you've built something based on your own a priori theories of\nwhat the world needs, but that no one will actually want.  So it's\ngood if you can talk about problems specific users have and how you\nsolve them.Greg Mcadoo said one thing Sequoia looks for is the \"proxy for\ndemand.\"  What are people doing now, using inadequate tools, that\nshows they need what you're making?Another sign of user need is when people pay a lot for something.\nIt's easy to convince investors there will be demand for\na cheaper alternative to something popular, if you preserve\nthe qualities that made it popular.The best stories about user needs are about your own.  A remarkable\nnumber of famous startups grew out of some need the founders had:\nApple, Microsoft, Yahoo, Google.  Experienced investors know that,\nso stories of this type will get their attention.  The next best\nthing is to talk about the needs of people you know personally,\nlike your friends or siblings.14. Make a soundbite stick in their heads.Professional investors hear a lot of pitches.  After a while they\nall blur together.  The first cut is simply to be one of those\nthey remember.  And the way to ensure that is to create a descriptive\nphrase about yourself that sticks in their heads.In Hollywood, these phrases seem to be of the form \"x meets y.\"\nIn the startup world, they're usually \"the x of y\" or \"the x y.\"\nViaweb's was \"the Microsoft Word of ecommerce.\"Find one and launch it clearly (but apparently casually) in your\ntalk, preferably near the beginning.It's a good exercise for you, too, to sit down and try to figure\nout how to describe your startup in one compelling phrase.  If you\ncan't, your plans may not be sufficiently focused."},{"title":"How to Raise Money","text":"September 2013Most startups that raise money do it more than once.  A typical\ntrajectory might be (1) to get started with a few tens of thousands\nfrom something like Y Combinator or individual angels, then\n(2) raise a few hundred thousand to a few million to build the company,\nand then (3) once the company is clearly succeeding, raise one or\nmore later rounds to accelerate growth.Reality can be messier.  Some companies raise money twice in phase\n2.  Others skip phase 1 and go straight to phase 2.  And at Y Combinator\nwe get an increasing number of companies that have already\nraised amounts in the hundreds of thousands.  But the three phase\npath is at least the one about which individual startups' paths\noscillate.This essay focuses on phase 2 fundraising.  That's the type the\nstartups we fund are doing on Demo Day, and this essay is the advice\nwe give them.ForcesFundraising is hard in both senses: hard like lifting a heavy weight,\nand hard like solving a puzzle.  It's hard like lifting a weight\nbecause it's intrinsically hard to convince people to part with\nlarge sums of money.  That problem is irreducible; it should be\nhard.  But much of the other kind of difficulty can be eliminated.\nFundraising only seems a puzzle because it's an alien world to most\nfounders, and I hope to fix that by supplying a map through it.To founders, the behavior of investors is often opaque—partly\nbecause their motivations are obscure, but partly because they\ndeliberately mislead you.  And the misleading ways of investors\ncombine horribly with the wishful thinking of inexperienced founders.\nAt YC we're always warning founders about this danger, and investors\nare probably more circumspect with YC startups than with other\ncompanies they talk to, and even so we witness a constant series\nof explosions as these two volatile components combine.\n[1]If you're an inexperienced founder, the only way to survive is by\nimposing external constraints on yourself.  You can't trust your\nintuitions.  I'm going to give you a set of rules here that will\nget you through this process if anything will.  At certain moments\nyou'll be tempted to ignore them.  So rule number zero is: these\nrules exist for a reason.  You wouldn't need a rule to keep you\ngoing in one direction if there weren't powerful forces pushing you\nin another.The ultimate source of the forces acting on you are the forces\nacting on investors.  Investors are pinched between two kinds of\nfear: fear of investing in startups that fizzle, and fear of missing\nout on startups that take off.  The cause of all this fear is the\nvery thing that makes startups such attractive investments: the\nsuccessful ones grow very fast.  But that fast growth means investors\ncan't wait around.  If you wait till a startup is obviously a\nsuccess, it's too late.  To get the really high returns, you have\nto invest in startups when it's still unclear how they'll do.  But\nthat in turn makes investors nervous they're about to invest in a\nflop.  As indeed they often are.What investors would like to do, if they could, is wait.  When a\nstartup is only a few months old, every week that passes gives you\nsignificantly more information about them.  But if you wait too\nlong, other investors might take the deal away from you.  And of\ncourse the other investors are all subject to the same forces.  So\nwhat tends to happen is that they all wait as long as they can,\nthen when some act the rest have to.Don't raise money unless you want it and it wants you.Such a high proportion of successful startups raise money that it\nmight seem fundraising is one of the defining qualities of a startup.\nActually it isn't.  Rapid growth is what\nmakes a company a startup.  Most companies in a position to grow\nrapidly find that (a) taking outside money helps them grow faster,\nand (b) their growth potential makes it easy to attract such money.\nIt's so common for both (a) and (b) to be true of a successful\nstartup that practically all do raise outside money.  But there may\nbe cases where a startup either wouldn't want to grow faster, or\noutside money wouldn't help them to, and if you're one of them,\ndon't raise money.The other time not to raise money is when you won't be able to.  If\nyou try to raise money before you can convince\ninvestors, you'll not only waste your time, but also burn your\nreputation with those investors.Be in fundraising mode or not.One of the things that surprises founders most about fundraising\nis how distracting it is.  When you start fundraising, everything\nelse grinds to a halt.  The problem is not the time fundraising\nconsumes but that it becomes the top idea in\nyour mind.  A startup can't endure that level of distraction\nfor long.  An early stage startup grows mostly because the founders\nmake it grow, and if the founders look away,\ngrowth usually drops sharply.Because fundraising is so distracting, a startup should either be\nin fundraising mode or not.  And when you do decide to raise money,\nyou should focus your whole attention on it so you can get it done\nquickly and get back to work.\n[2]You can take money from investors when you're not in fundraising\nmode.  You just can't expend any attention on it.  There are two\nthings that take attention: convincing investors, and negotiating\nwith them.  So when you're not in fundraising mode, you should take\nmoney from investors only if they require no convincing, and are\nwilling to invest on terms you'll take without negotiation.  For\nexample, if a reputable investor is willing to invest on a convertible\nnote, using standard paperwork, that is either uncapped or capped\nat a good valuation, you can take that without having to think.\n[3]\nThe terms will be whatever they turn out to be in your next\nequity round.  And \"no convincing\" means just that: zero time spent\nmeeting with investors or preparing materials for them.  If an\ninvestor says they're ready to invest, but they need you to come\nin for one meeting to meet some of the partners, tell them no, if\nyou're not in fundraising mode, because that's fundraising.\n[4]\nTell them politely; tell them you're focusing on the company right\nnow, and that you'll get back to them when you're fundraising; but\ndo not get sucked down the slippery slope.Investors will try to lure you into fundraising when you're not.\nIt's great for them if they can, because they can thereby get a\nshot at you before everyone else.  They'll send you emails saying\nthey want to meet to learn more about you.  If you get cold-emailed\nby an associate at a VC firm, you shouldn't meet even if you are\nin fundraising mode.  Deals don't happen that way.\n[5]\nBut even\nif you get an email from a partner you should try to delay meeting\ntill you're in fundraising mode.  They may say they just want to\nmeet and chat, but investors never just want to meet and chat.  What\nif they like you?  What if they start to talk about giving you\nmoney?  Will you be able to resist having that conversation?  Unless\nyou're experienced enough at fundraising to have a casual conversation\nwith investors that stays casual, it's safer to tell them that you'd\nbe happy to later, when you're fundraising, but that right now you\nneed to focus on the company.\n[6]Companies that are successful at raising money in phase 2 sometimes\ntack on a few investors after leaving fundraising mode.  This is\nfine; if fundraising went well, you'll be able to do it without\nspending time convincing them or negotiating about terms.Get introductions to investors.Before you can talk to investors, you have to be introduced to them.\nIf you're presenting at a Demo Day, you'll be introduced to a whole\nbunch simultaneously.  But even if you are, you should supplement\nthese with intros you collect yourself.Do you have to be introduced?  In phase 2, yes.  Some investors\nwill let you email them a business plan, but you can tell from the\nway their sites are organized that they don't really want startups\nto approach them directly.Intros vary greatly in effectiveness.  The best type of intro is\nfrom a well-known investor who has just invested in you.  So when\nyou get an investor to commit, ask them to introduce you to other\ninvestors they respect.\n[7]\nThe next best type of intro is from a\nfounder of a company they've funded.  You can also get intros from\nother people in the startup community, like lawyers and reporters.There are now sites like AngelList, FundersClub, and WeFunder that\ncan introduce you to investors.  We recommend startups treat them\nas auxiliary sources of money.  Raise money first from leads you\nget yourself.  Those will on average be better investors.  Plus\nyou'll have an easier time raising money on these sites once you\ncan say you've already raised some from well-known investors.Hear no till you hear yes.Treat investors as saying no till they unequivocally say yes, in\nthe form of a definite offer with no contingencies.I mentioned earlier that investors prefer to wait if they can.\nWhat's particularly dangerous for founders is the way they wait.\nEssentially, they lead you on.  They seem like they're about to\ninvest right up till the moment they say no.  If they even say no.\nSome of the worse ones never actually do say no; they just stop\nreplying to your emails.  They hope that way to get a free option\non investing.  If they decide later that they want to invest—usually\nbecause they've heard you're a hot deal—they can pretend they\njust got distracted and then restart the conversation as if they'd\nbeen about to.\n[8]That's not the worst thing investors will do.  Some will use language\nthat makes it sound as if they're committing, but which doesn't\nactually commit them.  And wishful thinking founders are happy to\nmeet them half way.\n[9]Fortunately, the next rule is a tactic for neutralizing this behavior.\nBut to work it depends on you not being tricked by the no that\nsounds like yes.  It's so common for founders to be misled/mistaken\nabout this that we designed a protocol to fix the\nproblem.  If you believe an investor has committed, get them to\nconfirm it.  If you and they have different views of reality, whether\nthe source of the discrepancy is their sketchiness or your wishful\nthinking, the prospect of confirming a commitment in writing will\nflush it out.  And till they confirm, regard them as saying no.Do breadth-first search weighted by expected value.When you talk to investors your m.o. should be breadth-first search,\nweighted by expected value.  You should always talk to investors\nin parallel rather than serially.  You can't afford the time it\ntakes to talk to investors serially, plus if you only talk to one\ninvestor at a time, they don't have the pressure of other investors\nto make them act.  But you shouldn't pay the same attention to every\ninvestor, because some are more promising prospects than others.\nThe optimal solution is to talk to all potential investors in\nparallel, but give higher priority to the more promising ones.\n[10]Expected value = how likely an investor is to say yes, multiplied\nby how good it would be if they did.  So for example, an eminent\ninvestor who would invest a lot, but will be hard to convince, might\nhave the same expected value as an obscure angel who won't invest\nmuch, but will be easy to convince.  Whereas an obscure angel who\nwill only invest a small amount, and yet needs to meet multiple\ntimes before making up his mind, has very low expected value.  Meet\nsuch investors last, if at all.\n[11]Doing breadth-first search weighted by expected value will save you\nfrom investors who never explicitly say no but merely drift away,\nbecause you'll drift away from them at the same rate.  It protects\nyou from investors who flake in much the same way that a distributed\nalgorithm protects you from processors that fail.  If some investor\nisn't returning your emails, or wants to have lots of meetings but\nisn't progressing toward making you an offer, you automatically\nfocus less on them.  But you have to be disciplined about assigning\nprobabilities.  You can't let how much you want an investor influence\nyour estimate of how much they want you.Know where you stand.How do you judge how well you're doing with an investor, when\ninvestors habitually seem more positive than they are?  By looking\nat their actions rather than their words.  Every investor has some\ntrack they need to move along from the first conversation to wiring\nthe money, and you should always know what that track consists of,\nwhere you are on it, and how fast you're moving forward.Never leave a meeting with an investor without asking what happens\nnext.  What more do they need in order to decide?  Do they need\nanother meeting with you?  To talk about what?  And how soon?  Do\nthey need to do something internally, like talk to their partners,\nor investigate some issue?  How long do they expect it to take?\nDon't be too pushy, but know where you stand.  If investors are\nvague or resist answering such questions, assume the worst; investors\nwho are seriously interested in you will usually be happy to talk\nabout what has to happen between now and wiring the money, because\nthey're already running through that in their heads.\n[12]If you're experienced at negotiations, you already know how to ask\nsuch questions.\n[13]\nIf you're not, there's a trick you can use\nin this situation.  Investors know you're inexperienced at raising\nmoney.  Inexperience there doesn't make you unattractive.  Being a\nnoob at technology would, if you're starting a technology startup,\nbut not being a noob at fundraising.  Larry and Sergey were noobs\nat fundraising.  So you can just confess that you're inexperienced\nat this and ask how their process works and where you are in it.\n[14]Get the first commitment.The biggest factor in most investors' opinions of you is the opinion\nof other investors.  Once you start getting\ninvestors to commit, it becomes increasingly easy to get more to.\nBut the other side of this coin is that it's often hard to get the\nfirst commitment.Getting the first substantial offer can be half the total difficulty\nof fundraising.  What counts as a substantial offer depends on who\nit's from and how much it is.  Money from friends and family doesn't\nusually count, no matter how much.  But if you get $50k from a well\nknown VC firm or angel investor, that will usually be enough to set\nthings rolling.\n[15]Close committed money.It's not a deal till the money's in the bank.  I often hear\ninexperienced founders say things like \"We've raised $800,000,\"\nonly to discover that zero of it is in the bank so far.  Remember\nthe twin fears that torment investors?  The fear of missing out\nthat makes them jump early, and the fear of jumping onto a turd\nthat results?  This is a market where people are exceptionally prone\nto buyer's remorse.  And it's also one that furnishes them plenty\nof excuses to gratify it.  The public markets snap startup investing\naround like a whip.  If the Chinese economy blows up tomorrow, all\nbets are off.  But there are lots of surprises for individual\nstartups too, and they tend to be concentrated around fundraising.\nTomorrow a big competitor could appear, or you could get C&Ded, or\nyour cofounder could quit.\n[16]Even a day's delay can bring news that causes an investor to change\ntheir mind.  So when someone commits, get the money.  Knowing where\nyou stand doesn't end when they say they'll invest.  After they say\nyes, know what the timetable is for getting the money, and then\nbabysit that process till it happens.  Institutional investors have\npeople in charge of wiring money, but you may have to hunt angels\ndown in person to collect a check.Inexperienced investors are the ones most likely to get buyer's\nremorse.  Established ones have learned to treat saying yes as like\ndiving off a diving board, and they also have more brand to preserve.\nBut I've heard of cases of even top-tier VC firms welching on deals.Avoid investors who don't \"lead.\"Since getting the first offer is most of the difficulty of fundraising,\nthat should be part of your calculation of expected value when you\nstart.  You have to estimate not just the probability that an\ninvestor will say yes, but the probability that they'd be the first\nto say yes, and the latter is not simply a constant fraction of the\nformer.  Some investors are known for deciding quickly, and those\nare extra valuable early on.Conversely, an investor who will only invest once other investors\nhave is worthless initially.  And while most investors are influenced\nby how interested other investors are in you, there are some who\nhave an explicit policy of only investing after other investors\nhave.  You can recognize this contemptible subspecies of investor\nbecause they often talk about \"leads.\"  They say that they don't\nlead, or that they'll invest once you have a lead.  Sometimes they\neven claim to be willing to lead themselves, by which they mean\nthey won't invest till you get $x from other investors.  (It's great\nif by \"lead\" they mean they'll invest unilaterally, and in addition\nwill help you raise more.  What's lame is when they use the term\nto mean they won't invest unless you can raise more elsewhere.)\n[17]Where does this term \"lead\" come from?  Up till a few years ago,\nstartups raising money in phase 2 would usually raise equity rounds\nin which several investors invested at the same time using the same\npaperwork.  You'd negotiate the terms with one \"lead\" investor, and\nthen all the others would sign the same documents and all the money\nchange hands at the closing.Series A rounds still work that way, but things now work differently\nfor most fundraising prior to the series A.  Now there are rarely\nactual rounds before the A round, or leads for them.  Now startups\nsimply raise money from investors one at a time till they feel they\nhave enough.Since there are no longer leads, why do investors use that term?\nBecause it's a more legitimate-sounding way of saying what they\nreally mean.  All they really mean is that their interest in you\nis a function of other investors' interest in you.  I.e. the spectral\nsignature of all mediocre investors.  But when phrased in terms of\nleads, it sounds like there is something structural and therefore\nlegitimate about their behavior.When an investor tells you \"I want to invest in you, but I don't\nlead,\" translate that in your mind to \"No, except yes if you turn\nout to be a hot deal.\"  And since that's the default opinion of any\ninvestor about any startup, they've essentially just told you\nnothing.When you first start fundraising, the expected value of an investor\nwho won't \"lead\" is zero, so talk to such investors last if at all.Have multiple plans.Many investors will ask how much you're planning to raise. This\nquestion makes founders feel they should be planning to raise a\nspecific amount.  But in fact you shouldn't.  It's a mistake to\nhave fixed plans in an undertaking as unpredictable as fundraising.So why do investors ask how much you plan to raise?  For much the\nsame reasons a salesperson in a store will ask \"How much were you\nplanning to spend?\" if you walk in looking for a gift for a friend.\nYou probably didn't have a precise amount in mind; you just want\nto find something good, and if it's inexpensive, so much the better.\nThe salesperson asks you this not because you're supposed to have\na plan to spend a specific amount, but so they can show you only\nthings that cost the most you'll pay.Similarly, when investors ask how much you plan to raise, it's not\nbecause you're supposed to have a plan.  It's to see whether you'd\nbe a suitable recipient for the size of investment they like to\nmake, and also to judge your ambition, reasonableness, and how far\nyou are along with fundraising.If you're a wizard at fundraising, you can say \"We plan to raise\na $7 million series A round, and we'll be accepting termsheets next\ntuesday.\"  I've known a handful of founders who could pull that off\nwithout having VCs laugh in their faces.  But if you're in the\ninexperienced but earnest majority, the solution is analogous to\nthe solution I recommend for pitching\nyour startup: do the right thing and then just tell investors what\nyou're doing.And the right strategy, in fundraising, is to have multiple plans\ndepending on how much you can raise.  Ideally you should be able\nto tell investors something like: we can make it to profitability\nwithout raising any more money, but if we raise a few hundred\nthousand we can hire one or two smart friends, and if we raise a\ncouple million, we can hire a whole engineering team, etc.Different plans match different investors.  If you're talking to a\nVC firm that only does series A rounds (though there are few of\nthose left), it would be a waste of time talking about any but your\nmost expensive plan.  Whereas if you're talking to an angel who\ninvests $20k at a time and you haven't raised any money yet, you\nprobably want to focus on your least expensive plan.If you're so fortunate as to have to think about the upper limit\non what you should raise, a good rule of thumb is to multiply the\nnumber of people you want to hire times $15k times 18 months.  In\nmost startups, nearly all the costs are a function of the number\nof people, and $15k per month is the conventional total cost\n(including benefits and even office space) per person.  $15k per\nmonth is high, so don't actually spend that much.  But it's ok to\nuse a high estimate when fundraising to add a margin for error.  If\nyou have additional expenses, like manufacturing, add in those at\nthe end.  Assuming you have none and you think you might hire 20\npeople, the most you'd want to raise is 20 x $15k x 18 = $5.4\nmillion.\n[18]Underestimate how much you want.Though you can focus on different plans when talking to different\ntypes of investors, you should on the whole err on the side of\nunderestimating the amount you hope to raise.For example, if you'd like to raise $500k, it's better to say\ninitially that you're trying to raise $250k.  Then when you reach\n$150k you're more than half done.  That sends two useful signals\nto investors: that you're doing well, and that they have to decide\nquickly because you're running out of room.  Whereas if you'd said\nyou were raising $500k, you'd be less than a third done at $150k.\nIf fundraising stalled there for an appreciable time, you'd start\nto read as a failure.Saying initially that you're raising $250k doesn't limit you to\nraising that much.  When you reach your initial target and you still\nhave investor interest, you can just decide to raise more.  Startups\ndo that all the time.  In fact, most startups that are very successful\nat fundraising end up raising more than they originally intended.I'm not saying you should lie, but that you should lower your\nexpectations initially.  There is almost no downside in starting\nwith a low number.  It not only won't cap the amount you raise, but\nwill on the whole tend to increase it.A good metaphor here is angle of attack.  If you try to fly at too\nsteep an angle of attack, you just stall.  If you say right out of\nthe gate that you want to raise a $5 million series A round, unless\nyou're in a very strong position, you not only won't get that but\nwon't get anything. Better to start at a low angle of attack, build\nup speed, and then gradually increase the angle if you want.Be profitable if you can.You will be in a much stronger position if your collection of plans\nincludes one for raising zero dollars—i.e. if you can make\nit to profitability without raising any additional money.  Ideally\nyou want to be able to say to investors \"We'll succeed no matter\nwhat, but raising money will help us do it faster.\"There are many analogies between fundraising and dating, and this\nis one of the strongest.  No one wants you if you seem desperate.\nAnd the best way not to seem desperate is not to be desperate.\nThat's one reason we urge startups during YC to keep expenses low\nand to try to make it to ramen\nprofitability before Demo Day.  Though it sounds slightly\nparadoxical, if you want to raise money, the best thing you can do\nis get yourself to the point where you don't need to.There are almost two distinct modes of fundraising: one in which\nfounders who need money knock on doors seeking it, knowing that\notherwise the company will die or at the very least people will\nhave to be fired, and one in which founders who don't need money\ntake some to grow faster than they could merely on their own revenues.\nTo emphasize the distinction I'm going to name them: type A fundraising\nis when you don't need money, and type B fundraising is when you\ndo.Inexperienced founders read about famous startups doing what was\ntype A fundraising, and decide they should raise money too, since\nthat seems to be how startups work. Except when they raise money\nthey don't have a clear path to profitability and are thus doing\ntype B fundraising.  And they are then surprised how difficult and\nunpleasant it is.Of course not all startups can make it to ramen profitability in a\nfew months.  And some that don't still manage to have the upper\nhand over investors, if they have some other advantage like\nextraordinary growth numbers or exceptionally formidable founders.\nBut as time passes it gets increasingly difficult to fundraise from\na position of strength without being profitable.\n[19]Don't optimize for valuation.When you raise money, what should your valuation be?  The most\nimportant thing to understand about valuation is that it's not that\nimportant.Founders who raise money at high valuations tend to be unduly proud\nof it.  Founders are often competitive people, and since valuation\nis usually the only visible number attached to a startup, they end\nup competing to raise money at the highest valuation.  This is\nstupid, because fundraising is not the test that matters.  The real\ntest is revenue.  Fundraising is just a means to that end.  Being\nproud of how well you did at fundraising is like being proud of\nyour college grades.Not only is fundraising not the test that matters, valuation is not\neven the thing to optimize about fundraising.  The number one thing\nyou want from phase 2 fundraising is to get the money you need, so\nyou can get back to focusing on the real test, the success of your\ncompany.  Number two is good investors. Valuation is at best third.The empirical evidence shows just how unimportant it is.  Dropbox\nand Airbnb are the most successful companies we've funded so far,\nand they raised money after Y Combinator at premoney valuations of\n$4 million and $2.6 million respectively. Prices are so much higher\nnow that if you can raise money at all you'll probably raise it at\nhigher valuations than Dropbox and Airbnb.  So let that satisfy\nyour competitiveness.  You're doing better than Dropbox and Airbnb!\nAt a test that doesn't matter.When you start fundraising, your initial valuation (or valuation\ncap) will be set by the deal you make with the first investor who\ncommits.  You can increase the price for later investors, if you\nget a lot of interest, but by default the valuation you got from\nthe first investor becomes your asking price.So if you're raising money from multiple investors, as most companies\ndo in phase 2, you have to be careful to avoid raising the first\nfrom an over-eager investor at a price you won't be able to\nsustain.  You can of course lower your price if you need to (in\nwhich case you should give the same terms to investors who invested\nearlier at a higher price), but you may lose a bunch of leads in\nthe process of realizing you need to do this.What you can do if you have eager first investors is raise money\nfrom them on an uncapped convertible note with an MFN clause.  This\nis essentially a way of saying that the valuation cap of the note\nwill be determined by the next investors you raise money from.It will be easier to raise money at a lower valuation.  It shouldn't\nbe, but it is.  Since phase 2 prices vary at most 10x and the big\nsuccesses generate returns of at least 100x, investors should pick\nstartups entirely based on their estimate of the probability that\nthe company will be a big success and hardly at all on price.  But\nalthough it's a mistake for investors to care about price, a\nsignificant number do.  A startup that investors seem to like but\nwon't invest in at a cap of $x will have an easier time at $x/2.\n[20]Yes/no before valuation.Some investors want to know what your valuation is before they even\ntalk to you about investing.  If your valuation has already been\nset by a prior investment at a specific valuation or cap, you can\ntell them that number.  But if it isn't set because you haven't\nclosed anyone yet, and they try to push you to name a price, resist\ndoing so.  If this would be the first investor you've closed, then\nthis could be the tipping point of fundraising. That means closing\nthis investor is the first priority, and you need to get the\nconversation onto that instead of being dragged sideways into a\ndiscussion of price.Fortunately there is a way to avoid naming a price in this situation.\nAnd it is not just a negotiating trick; it's how you (both) should\nbe operating.  Tell them that valuation is not the most important\nthing to you and that you haven't thought much about it, that you\nare looking for investors you want to partner with and who want to\npartner with you, and that you should talk first about whether they\nwant to invest at all.  Then if they decide they do want to invest,\nyou can figure out a price. But first things first.Since valuation isn't that important and getting fundraising rolling\nis, we usually tell founders to give the first investor who commits\nas low a price as they need to.  This is a safe technique so long\nas you combine it with the next one.\n[21]Beware \"valuation sensitive\" investors.Occasionally you'll encounter investors who describe themselves as\n\"valuation sensitive.\"  What this means in practice is that they\nare compulsive negotiators who will suck up a lot of your time\ntrying to push your price down.  You should therefore never approach\nsuch investors first. While you shouldn't chase high valuations,\nyou also don't want your valuation to be set artificially low because\nthe first investor who committed happened to be a compulsive\nnegotiator.  Some such investors have value, but the time to approach\nthem is near the end of fundraising, when you're in a position to\nsay \"this is the price everyone else has paid; take it or leave it\"\nand not mind if they leave it.  This way, you'll not only get market\nprice, but it will also take less time.Ideally you know which investors have a reputation for being\n\"valuation sensitive\" and can postpone dealing with them till last,\nbut occasionally one you didn't know about will pop up early on.\nThe rule of doing breadth first search weighted by expected value\nalready tells you what to do in this case: slow down your interactions\nwith them.There are a handful of investors who will try to invest at a lower\nvaluation even when your price has already been set.  Lowering your\nprice is a backup plan you resort to when you discover you've let\nthe price get set too high to close all the money you need.  So\nyou'd only want to talk to this sort of investor if you were about\nto do that anyway.  But since investor meetings have to be arranged\nat least a few days in advance and you can't predict when you'll\nneed to resort to lowering your price, this means in practice that\nyou should approach this type of investor last if at all.If you're surprised by a lowball offer, treat it as a backup offer\nand delay responding to it.  When someone makes an offer in good\nfaith, you have a moral obligation to respond in a reasonable time.\nBut lowballing you is a dick move that should be met with the\ncorresponding countermove.Accept offers greedily.I'm a little leery of using the term \"greedily\" when writing about\nfundraising lest non-programmers misunderstand me, but a greedy\nalgorithm is simply one that doesn't try to look into the future.\nA greedy algorithm takes the best of the options in front of it\nright now.  And that is how startups should approach fundraising\nin phases 2 and later.  Don't try to look into the future because\n(a) the future is unpredictable, and indeed in this business you're\noften being deliberately misled about it and (b) your first priority\nin fundraising should be to get it finished and get back to work\nanyway.If someone makes you an acceptable offer, take it.  If you have\nmultiple incompatible offers, take the best.  Don't reject an\nacceptable offer in the hope of getting a better one in the future.These simple rules cover a wide variety of cases.  If you're raising\nmoney from many investors, roll them up as they say yes.  As you\nstart to feel you've raised enough, the threshold for acceptable\nwill start to get higher.In practice offers exist for stretches of time, not points.  So\nwhen you get an acceptable offer that would be incompatible with\nothers (e.g. an offer to invest most of the money you need), you\ncan tell the other investors you're talking to that you have an\noffer good enough to accept, and give them a few days to make their\nown.  This could lose you some that might have made an offer if\nthey had more time.  But by definition you don't care; the initial\noffer was acceptable.Some investors will try to prevent others from having time to decide\nby giving you an \"exploding\" offer, meaning one that's only valid\nfor a few days.  Offers from the very best investors explode less\nfrequently and less rapidly—Fred Wilson never gives exploding\noffers, for example—because they're confident you'll pick\nthem.  But lower-tier investors sometimes give offers with very\nshort fuses, because they believe no one who had other options would\nchoose them.  A deadline of three working days is acceptable.  You\nshouldn't need more than that if you've been talking to investors\nin parallel.  But a deadline any shorter is a sign you're dealing\nwith a sketchy investor.  You can usually call their bluff, and you\nmay need to.\n[22]It might seem that instead of accepting offers greedily, your goal\nshould be to get the best investors as partners.  That is certainly\na good goal, but in phase 2 \"get the best investors\" only rarely\nconflicts with \"accept offers greedily,\" because the best investors\ndon't usually take any longer to decide than the others.  The only\ncase where the two strategies give conflicting advice is when you\nhave to forgo an offer from an acceptable investor to see if you'll\nget an offer from a better one.  If you talk to investors in parallel\nand push back on exploding offers with excessively short deadlines,\nthat will almost never happen.  But if it does, \"get the best\ninvestors\" is in the average case bad advice.  The best investors\nare also the most selective, because they get their pick of all the\nstartups.  They reject nearly everyone they talk to, which means\nin the average case it's a bad trade to exchange a definite offer\nfrom an acceptable investor for a potential offer from a better\none.(The situation is different in phase 1.  You can't apply to all the\nincubators in parallel, because some offset their schedules to\nprevent this.  In phase 1, \"accept offers greedily\" and \"get the\nbest investors\" do conflict, so if you want to apply to multiple\nincubators, you should do it in such a way that the ones you want\nmost decide first.)Sometimes when you're raising money from multiple investors, a\nseries A will emerge out of those conversations, and these rules\neven cover what to do in that case.  When an investor starts to\ntalk to you about a series A, keep taking smaller investments till\nthey actually give you a termsheet.  There's no practical difficulty.\nIf the smaller investments are on convertible notes, they'll just\nconvert into the series A round.  The series A investor won't like\nhaving all these other random investors as bedfellows, but if it\nbothers them so much they should get on with giving you a termsheet.\nTill they do, you don't know for sure they will, and the greedy\nalgorithm tells you what to do.\n[23]Don't sell more than 25% in phase 2.If you do well, you will probably raise a series A round eventually.\nI say probably because things are changing with series A rounds.\nStartups may start to skip them.  But only one company we've funded\nhas so far, so tentatively assume the path to huge passes through\nan A round.\n[24]Which means you should avoid doing things in earlier rounds that\nwill mess up raising an A round.  For example, if you've sold more\nthan about 40% of your company total, it starts to get harder to\nraise an A round, because VCs worry there will not be enough stock\nleft to keep the founders motivated.Our rule of thumb is not to sell more than 25% in phase 2, on top\nof whatever you sold in phase 1, which should be less than 15%.  If\nyou're raising money on uncapped notes, you'll have to guess what\nthe eventual equity round valuation might be.  Guess conservatively.(Since the goal of this rule is to avoid messing up the series A,\nthere's obviously an exception if you end up raising a series A in\nphase 2, as a handful of startups do.)Have one person handle fundraising.If you have multiple founders, pick one to handle fundraising so\nthe other(s) can keep working on the company.  And since the danger\nof fundraising is not the time taken up by the actual meetings but\nthat it becomes the top idea in your mind, the founder who handles\nfundraising should make a conscious effort to insulate the other\nfounder(s) from the details of the process.\n[25](If the founders mistrust one another, this could cause some friction.\nBut if the founders mistrust one another, you have worse problems\nto worry about than how to organize fundraising.)The founder who handles fundraising should be the CEO, who should\nin turn be the most formidable of the founders.  Even if the CEO\nis a programmer and another founder is a salesperson?  Yes.  If you\nhappen to be that type of founding team, you're effectively a single\nfounder when it comes to fundraising.It's ok to bring all the founders to meet an investor who will\ninvest a lot, and who needs this meeting as the final step before\ndeciding.  But wait till that point.  Introducing an investor to\nyour cofounder(s) should be like introducing a girl/boyfriend to\nyour parents—something you do only when things reach a certain\nstage of seriousness.Even if there are still one or more founders focusing on the company\nduring fundraising, growth will slow.  But try to get as much growth\nas you can, because fundraising is a segment of time, not a point,\nand what happens to the company during that time affects the outcome.\nIf your numbers grow significantly between two investor meetings,\ninvestors will be hot to close, and if your numbers are flat or\ndown they'll start to get cold feet.You'll need an executive summary and (maybe) a deck.Traditionally phase 2 fundraising consists of presenting a slide\ndeck in person to investors.  Sequoia describes what such a deck\nshould contain, and\nsince they're the customer you can take their word for it.I say \"traditionally\" because I'm ambivalent about decks, and (though\nperhaps this is wishful thinking) they seem to be on the way out.\nA lot of the most successful startups we fund never make decks in\nphase 2.  They just talk to investors and explain what they plan\nto do.  Fundraising usually takes off fast for the startups that\nare most successful at it, and they're thus able to excuse themselves\nby saying that they haven't had time to make a deck.You'll also want an executive summary, which should be no more than\na page long and describe in the most matter of fact language what\nyou plan to do, why it's a good idea, and what progress you've made\nso far.  The point of the summary is to remind the investor (who\nmay have met many startups that day) what you talked about.Assume that if you give someone a copy of your deck or executive\nsummary, it will be passed on to whoever you'd least like to have\nit.  But don't refuse on that account to give copies to investors\nyou meet.  You just have to treat such leaks as a cost of doing\nbusiness.  In practice it's not that high a cost.  Though founders\nare rightly indignant when their plans get leaked to competitors,\nI can't think of a startup whose outcome has been affected by it.Sometimes an investor will ask you to send them your deck and/or\nexecutive summary before they decide whether to meet with you.  I\nwouldn't do that.  It's a sign they're not really interested.Stop fundraising when it stops working.When do you stop fundraising?  Ideally when you've raised enough.\nBut what if you haven't raised as much as you'd like?  When do you\ngive up?It's hard to give general advice about this, because there have\nbeen cases of startups that kept trying to raise money even when\nit seemed hopeless, and miraculously succeeded. But what I usually\ntell founders is to stop fundraising when you start to get a lot\nof air in the straw.  When you're drinking through a straw, you can\ntell when you get to the end of the liquid because you start to get\na lot of air in the straw.  When your fundraising options run out,\nthey usually run out in the same way.  Don't keep sucking on the\nstraw if you're just getting air.  It's not going to get better.Don't get addicted to fundraising.Fundraising is a chore for most founders, but some find it more\ninteresting than working on their startup.  The work at an early\nstage startup often consists of unglamorous schleps.  Whereas fundraising, when it's\ngoing well, can be quite the opposite.  Instead of sitting in your\ngrubby apartment listening to users complain about bugs in your\nsoftware, you're being offered millions of dollars by famous investors\nover lunch at a nice restaurant.\n[26]The danger of fundraising is particularly acute for people who are\ngood at it.  It's always fun to work on something you're good at.\nIf you're one of these people, beware.  Fundraising is not what\nwill make your company successful.  Listening to users complain\nabout bugs in your software is what will make you successful.  And\nthe big danger of getting addicted to fundraising is not merely\nthat you'll spend too long on it or raise too much money.  It's\nthat you'll start to think of yourself as being already successful,\nand lose your taste for the schleps you need to undertake to actually\nbe successful.  Startups can be destroyed by this.When I see a startup with young founders that is fabulously successful\nat fundraising, I mentally decrease my estimate of the probability\nthat they'll succeed.  The press may be writing about them as if\nthey'd been anointed as the next Google, but I'm thinking \"this is\ngoing to end badly.\"Don't raise too much.Though only a handful of startups have to worry about this, it is\npossible to raise too much.  The dangers of raising too much are\nsubtle but insidious.  One is that it will set impossibly high\nexpectations.  If you raise an excessive amount of money, it will\nbe at a high valuation, and the danger of raising money at too high\na valuation is that you won't be able to increase it sufficiently\nthe next time you raise money.A company's valuation is expected to rise each time it raises money.\nIf not it's a sign of a company in trouble, which makes you\nunattractive to investors.  So if you raise money in phase 2 at a\npost-money valuation of $30 million, the pre-money valuation of\nyour next round, if you want to raise one, is going to have to be\nat least $50 million.  And you have to be doing really, really well\nto raise money at $50 million.It's very dangerous to let the competitiveness of your current round\nset the performance threshold you have to meet to raise your next\none, because the two are only loosely coupled.But the money itself may be more dangerous than the valuation.  The\nmore you raise, the more you spend, and spending a lot of money can\nbe disastrous for an early stage startup.  Spending a lot makes it\nharder to become profitable, and perhaps even worse, it makes you\nmore rigid, because the main way to spend money is people, and the\nmore people you have, the harder it is to change directions.  So\nif you do raise a huge amount of money, don't spend it.  (You will\nfind that advice almost impossible to follow, so hot will be the\nmoney burning a hole in your pocket, but I feel obliged at least\nto try.)Be nice.Startups raising money occasionally alienate investors by seeming\narrogant.  Sometimes because they are arrogant, and sometimes because\nthey're noobs clumsily attempting to mimic the toughness they've\nobserved in experienced founders.It's a mistake to behave arrogantly to investors.  While there are\ncertain situations in which certain investors like certain kinds\nof arrogance, investors vary greatly in this respect, and a flick\nof the whip that will bring one to heel will make another roar with\nindignation.  The only safe strategy is never to seem arrogant at\nall.That will require some diplomacy if you follow the advice I've given\nhere, because the advice I've given is essentially how to play\nhardball back.  When you refuse to meet an investor because you're\nnot in fundraising mode, or slow down your interactions with an\ninvestor who moves too slow, or treat a contingent offer as the no\nit actually is and then, by accepting offers greedily, end up leaving\nthat investor out, you're going to be doing things investors don't\nlike.  So you must cushion the blow with soft words.  At YC we tell\nstartups they can blame us.  And now that I've written this, everyone\nelse can blame me if they want.  That plus the inexperience card\nshould work in most situations: sorry, we think you're great, but\nPG said startups shouldn't ___, and since we're new to fundraising,\nwe feel like we have to play it safe.The danger of behaving arrogantly is greatest when you're doing\nwell.  When everyone wants you, it's hard not to let it go to your\nhead.  Especially if till recently no one wanted you.  But restrain\nyourself.  The startup world is a small place, and startups have\nlots of ups and downs.  This is a domain where it's more true than\nusual that pride goeth before a fall.\n[27]Be nice when investors reject you as well.  The best investors are\nnot wedded to their initial opinion of you.  If they reject you in\nphase 2 and you end up doing well, they'll often invest in phase\n3.  In fact investors who reject you are some of your warmest leads\nfor future fundraising.  Any investor who spent significant time\ndeciding probably came close to saying yes.  Often you have some\ninternal champion who only needs a little more evidence to convince\nthe skeptics.  So it's wise not merely to be nice to investors who\nreject you, but (unless they behaved badly) to treat it as the\nbeginning of a relationship.The bar will be higher next time.Assume the money you raise in phase 2 will be the last you ever\nraise.  You must make it to profitability on this money if you can.Over the past several years, the investment community has evolved\nfrom a strategy of anointing a small number of winners early and\nthen supporting them for years to a strategy of spraying money at\nearly stage startups and then ruthlessly culling them at the next\nstage.  This is probably the optimal strategy for investors.  It's\ntoo hard to pick winners early on.  Better to let the market do it\nfor you.  But it often comes as a surprise to startups how much\nharder it is to raise money in phase 3.When your company is only a couple months old, all it has to be is\na promising experiment that's worth funding to see how it turns\nout.  The next time you raise money, the experiment has to have\nworked.  You have to be on a trajectory that leads to going public.\nAnd while there are some ideas where the proof that the experiment\nworked might consist of e.g. query response times, usually the proof\nis profitability.  Usually phase 3 fundraising has to be type A\nfundraising.In practice there are two ways startups hose themselves between\nphases 2 and 3.  Some are just too slow to become profitable.  They\nraise enough money to last for two years.  There doesn't seem any\nparticular urgency to be profitable.  So they don't make any effort\nto make money for a year.  But by that time, not making money has\nbecome habitual.  When they finally decide to try, they find they\ncan't.The other way companies hose themselves is by letting their expenses\ngrow too fast.  Which almost always means hiring too many people.\nYou usually shouldn't go out and hire 8 people as soon as you raise\nmoney at phase 2.  Usually you want to wait till you have growth\n(and thus usually revenues) to justify them.  A lot of VCs will\nencourage you to hire aggressively.  VCs generally tell you to spend\ntoo much, partly because as money people they err on the side of\nsolving problems by spending money, and partly because they want\nyou to sell them more of your company in subsequent rounds.  Don't\nlisten to them.Don't make things complicated.I realize it may seem odd to sum up this huge treatise by saying\nthat my overall advice is not to make fundraising too complicated,\nbut if you go back and look at this list you'll see it's basically\na simple recipe with a lot of implications and edge cases.  Avoid\ninvestors till you decide to raise money, and then when you do,\ntalk to them all in parallel, prioritized by expected value, and\naccept offers greedily.  That's fundraising in one sentence.  Don't\nintroduce complicated optimizations, and don't let investors introduce\ncomplications either.Fundraising is not what will make you successful.  It's just a means\nto an end.  Your primary goal should be to get it over with and get\nback to what will make you successful—making things and talking\nto users—and the path I've described will for most startups\nbe the surest way to that destination.Be good, take care of yourselves, and don't leave the path.Notes[1]\nThe worst explosions happen when unpromising-seeming startups\nencounter mediocre investors.  Good investors don't lead startups\non; their reputations are too valuable.  And startups that seem\npromising can usually get enough money from good investors that\nthey don't have to talk to mediocre ones.  It is the unpromising-seeming\nstartups that have to resort to raising money from mediocre investors.\nAnd it's particularly damaging when these investors flake, because\nunpromising-seeming startups are usually more desperate for money.(Not all unpromising-seeming startups do badly.  Some are merely\nugly ducklings in the sense that they violate current startup\nfashions.)[2]\nOne YC founder told me:\nI think in general we've done ok at fundraising, but I managed\nto screw up twice at the exact same thing—trying to focus\non building the company and fundraising at the same time.\n[3]\nThere is one subtle danger you have to watch out for here, which\nI warn about later: beware of getting too high a valuation from an\neager investor, lest that set an impossibly high target when raising\nadditional money.[4]\nIf they really need a meeting, then they're not ready to invest,\nregardless of what they say. They're still deciding, which means\nyou're being asked to come in and convince them. Which is fundraising.[5]\nAssociates at VC firms regularly cold email startups.  Naive\nfounders think \"Wow, a VC is interested in us!\"  But an associate\nis not a VC.  They have no decision-making power.  And while they\nmay introduce startups they like to partners at their firm, the\npartners discriminate against deals that come to them this way.   I\ndon't know of a single VC investment that began with an associate\ncold-emailing a startup.  If you want to approach a specific firm,\nget an intro to a partner from someone they respect.It's ok to talk to an associate if you get an intro to a VC firm\nor they see you at a Demo Day and they begin by having an associate\nvet you.  That's not a promising lead and should therefore get low\npriority, but it's not as completely worthless as a cold email.Because the title \"associate\" has gotten a bad reputation, a few\nVC firms have started to give their associates the title \"partner,\"\nwhich can make things very confusing.  If you're a YC startup you\ncan ask us who's who; otherwise you may have to do some research\nonline.  There may be a special title for actual partners.  If\nsomeone speaks for the firm in the press or a blog on the firm's\nsite, they're probably a real partner.  If they're on boards of\ndirectors they're probably a real partner.There are titles between \"associate\" and \"partner,\" including\n\"principal\" and \"venture partner.\"  The meanings of these titles\nvary too much to generalize.[6]\nFor similar reasons, avoid casual conversations with potential\nacquirers.  They can lead to distractions even more dangerous than\nfundraising.  Don't even take a meeting with a potential acquirer\nunless you want to sell your company right now.[7]\nJoshua Reeves specifically suggests asking each investor to\nintro you to two more investors.Don't ask investors who say no for introductions to other investors.\nThat will in many cases be an anti-recommendation.[8]\nThis is not always as deliberate as its sounds.  A lot of the\ndelays and disconnects between founders and investors are induced\nby the customs of the venture business, which have evolved the way\nthey have because they suit investors' interests.[9]\nOne YC founder who read a draft of this essay wrote:\nThis is the most important section. I think it might bear stating\neven more clearly. \"Investors will deliberately affect more\ninterest than they have to preserve optionality. If an investor\nseems very interested in you, they still probably won't invest.\nThe solution for this is to assume the worst—that an investor\nis just feigning interest—until you get a definite commitment.\"\n[10]\nThough you should probably pack investor meetings as closely\nas you can, Jeff Byun mentions one reason not to: if you pack\ninvestor meetings too closely, you'll have less time for your pitch\nto evolve.Some founders deliberately schedule a handful of lame investors\nfirst, to get the bugs out of their pitch.[11]\nThere is not an efficient market in this respect.  Some of the\nmost useless investors are also the highest maintenance.[12]\nIncidentally, this paragraph is sales 101.  If you want to see\nit in action, go talk to a car dealer.[13]\nI know one very smooth founder who used to end investor meetings\nwith \"So, can I count you in?\" delivered as if it were \"Can you\npass the salt?\"   Unless you're very smooth (if you're not sure...),\ndo not do this yourself.  There is nothing more unconvincing, for\nan investor, than a nerdy founder trying to deliver the lines meant\nfor a smooth one.Investors are fine with funding nerds.  So if you're a nerd, just\ntry to be a good nerd, rather than doing a bad imitation of a smooth\nsalesman.[14]\nIan Hogarth suggests a good way to tell how serious potential\ninvestors are: the resources they expend on you after the first\nmeeting.  An investor who's seriously interested will already be\nworking to help you even before they've committed.[15]\nIn principle you might have to think about so-called \"signalling\nrisk.\"  If a prestigious VC makes a small seed investment in you,\nwhat if they don't want to invest the next time you raise money?\nOther investors might assume that the VC knows you well, since\nthey're an existing investor, and if they don't want to invest in\nyour next round, that must mean you suck.  The reason I say \"in\nprinciple\" is that in practice signalling hasn't been much of a\nproblem so far.  It rarely arises, and in the few cases where it\ndoes, the startup in question usually is doing badly and is doomed\nanyway.If you have the luxury of choosing among seed investors, you can\nplay it safe by excluding VC firms.  But it isn't critical to.[16]\nSometimes a competitor will deliberately threaten you with a\nlawsuit just as you start fundraising, because they know you'll\nhave to disclose the threat to potential investors and they hope\nthis will make it harder for you to raise money.  If this happens\nit will probably frighten you more than investors.  Experienced\ninvestors know about this trick, and know the actual lawsuits rarely\nhappen. So if you're attacked in this way, be forthright with\ninvestors.  They'll be more alarmed if you seem evasive than if you\ntell them everything.[17]\nA related trick is to claim that they'll only invest contingently\non other investors doing so because otherwise you'd be \"undercapitalized.\"\nThis is almost always bullshit.  They can't estimate your minimum\ncapital needs that precisely.[18]\nYou won't hire all those 20 people at once, and you'll probably\nhave some revenues before 18 months are out.  But those too are\nacceptable or at least accepted additions to the margin for error.[19]\nType A fundraising is so much better that it might even be\nworth doing something different if it gets you there sooner.  One\nYC founder told me that if he were a first-time founder again he'd\n\"leave ideas that are up-front capital intensive to founders with\nestablished reputations.\"[20]\nI don't know whether this happens because they're innumerate,\nor because they believe they have zero ability to predict startup\noutcomes (in which case this behavior at least wouldn't be irrational).\nIn either case the implications are similar.[21]\nIf you're a YC startup and you have an investor who for some\nreason insists that you decide the price, any YC partner can estimate\na market price for you.[22]\nYou should respond in kind when investors behave upstandingly\ntoo.  When an investor makes you a clean offer with no deadline,\nyou have a moral obligation to respond promptly.[23]\nTell the investors talking to you about an A round about the\nsmaller investments you raise as you raise them.  You owe them such\nupdates on your cap table, and this is also a good way to pressure\nthem to act.  They won't like you raising other money and may\npressure you to stop, but they can't legitimately ask you to commit\nto them till they also commit to you.  If they want you to stop\nraising money, the way to do it is to give you a series A termsheet\nwith a no-shop clause.You can relent a little if the potential series A investor has a\ngreat reputation and they're clearly working fast to get you a\ntermsheet, particularly if a third party like YC is involved to\nensure there are no misunderstandings.  But be careful.[24]\nThe company is Weebly, which made it to profitability on a\nseed investment of $650k.  They did try to raise a series A in the\nfall of 2008 but (no doubt partly because it was the fall of 2008)\nthe terms they were offered were so bad that they decided to skip\nraising an A round.[25]\nAnother advantage of having one founder take fundraising\nmeetings is that you never have to negotiate in real time, which\nis something inexperienced founders should avoid.  One YC founder\ntold me:\nInvestors are professional negotiators and can negotiate on the\nspot very easily.  If only one founder is in the room, you can\nsay \"I need to circle back with my co-founder\" before making any\ncommitments. I used to do this all the time.\n[26]\nYou'll be lucky if fundraising feels pleasant enough to become\naddictive.  More often you have to worry about the other\nextreme—becoming demoralized when investors reject you.  As\none (very successful) YC founder wrote after reading a draft of\nthis:\nIt's hard to mentally deal with the sheer scale of rejection in\nfundraising and if you are not in the right mindset you will fail.\nUsers may love you but these supposedly smart investors may not\nunderstand you at all. At this point for me, rejection still\nrankles but I've come to accept that investors are just not super\nthoughtful for the most part and you need to play the game according\nto certain somewhat depressing rules (many of which you are\nlisting) in order to win.\n[27]\nThe actual sentence in the King James Bible is \"Pride goeth\nbefore destruction, and an haughty spirit before a fall.\"Thanks to Slava Akhmechet, Sam Altman, Nate Blecharczyk,\nAdora Cheung, Bill Clerico, John Collison, Patrick Collison, Parker\nConrad, Ron Conway, Travis Deyle, Jason Freedman, Joe Gebbia, Mattan\nGriffel, Kevin Hale, Jacob Heller, Ian Hogarth, Justin Kan, Professor\nMoriarty, Nikhil Nirmel, David Petersen, Geoff Ralston, Joshua\nReeves, Yuri Sagalov, Emmett Shear, Rajat Suri, Garry Tan, and Nick\nTomarello for reading drafts of this."},{"title":"How to Start a Startup","text":"March 2005(This essay is derived from a talk at the Harvard Computer\nSociety.)You need three things to create a successful startup: to start with\ngood people, to make something customers actually want, and to spend\nas little money as possible.  Most startups that fail do it because\nthey fail at one of these.  A startup that does all three will\nprobably succeed.And that's kind of exciting, when you think about it, because all\nthree are doable.  Hard, but doable.  And since a startup that\nsucceeds ordinarily makes its founders rich, that implies getting\nrich is doable too.  Hard, but doable.If there is one message I'd like to get across about startups,\nthat's it.  There is no magically difficult step that requires\nbrilliance to solve.The IdeaIn particular, you don't need a brilliant\nidea to start a startup\naround.   The way a startup makes money is to offer people better\ntechnology than they have now.  But what people have now is often\nso bad that it doesn't take brilliance to do better.Google's plan, for example, was simply to create a search site that\ndidn't suck.  They had three new ideas: index more of the Web, use\nlinks to rank search results, and have clean, simple web pages with\nunintrusive keyword-based ads.  Above all, they were determined to\nmake a site that was good to use.  No doubt there are great technical\ntricks within Google, but the overall plan was straightforward.\nAnd while they probably have bigger ambitions now, this alone brings\nthem a billion dollars a year. [1]There are plenty of other areas that are just as backward as search\nwas before Google.  I can think of several heuristics for generating\nideas for startups, but most reduce to this: look at something\npeople are trying to do, and figure out how to do it in a way that\ndoesn't suck.For example, dating sites currently suck far worse than search did\nbefore Google.  They all use the same simple-minded model.\nThey seem to have approached the problem by thinking about how to\ndo database matches instead of how dating works in the real world.\nAn undergrad could build something better as a class project.  And\nyet there's a lot of money at stake.  Online dating is a valuable\nbusiness now, and it might be worth a hundred times as much if it\nworked.An idea for a startup, however, is only a beginning.  A lot of\nwould-be startup founders think the key to the whole process is the\ninitial idea, and from that point all you have to do is execute.\nVenture capitalists know better.  If you go to VC firms with a\nbrilliant idea that you'll tell them about if they sign a nondisclosure\nagreement, most will tell you to get lost.   That shows how much a\nmere idea is worth. The market price is less than the inconvenience\nof signing an NDA.Another sign of how little the initial idea is worth is the number\nof startups that change their plan en route. Microsoft's original\nplan was to make money selling programming languages, of all things.\nTheir current business model didn't occur to them until IBM dropped\nit in their lap five years later.Ideas for startups are worth something, certainly, but the trouble\nis, they're not transferrable.  They're not something you could\nhand to someone else to execute.  Their value is mainly as starting\npoints: as questions for the people who had them to continue thinking\nabout.What matters is not ideas, but the people who have them.  Good\npeople can fix bad ideas, but good ideas can't save bad people.\nPeopleWhat do I mean by good people?  One of the best tricks I learned\nduring our startup was a rule for deciding\nwho to hire.  Could you\ndescribe the person as an animal?  It might be hard to translate\nthat into another language, but I think everyone in the US knows\nwhat it means.  It means someone who takes their work a little too\nseriously; someone who does what they do so well that they pass\nright through professional and cross over into obsessive.What it means specifically depends on the job: a salesperson who\njust won't take no for an answer; a hacker who will stay up till\n4:00 AM rather than go to bed leaving code with a bug in it; a PR\nperson who will cold-call New York Times reporters on their cell\nphones; a graphic designer who feels physical pain when something\nis two millimeters out of place.Almost everyone who worked for us was an animal at what they did.\nThe woman in charge of sales was so tenacious that I used to feel\nsorry for potential customers on the phone with her.  You could\nsense them squirming on the hook, but you knew there would be no\nrest for them till they'd signed up.If you think about people you know, you'll find the animal test is\neasy to apply.  Call the person's image to mind and imagine the\nsentence \"so-and-so is an animal.\"  If you laugh, they're not.  You\ndon't need or perhaps even want this quality in big companies, but\nyou need it in a startup.For programmers we had three additional tests.  Was the person\ngenuinely smart?  If so, could they actually get things done?  And\nfinally, since a few good hackers have unbearable personalities,\ncould we stand to have them around?That last test filters out surprisingly few people.  We could bear\nany amount of nerdiness if someone was truly smart.  What we couldn't\nstand were people with a lot of attitude.  But most of those weren't\ntruly smart, so our third test was largely a restatement of the\nfirst.When nerds are unbearable it's usually because they're trying too\nhard to seem smart.  But the smarter they are, the less pressure\nthey feel to act smart.  So as a rule you can recognize genuinely\nsmart people by their ability to say things like \"I don't know,\"\n\"Maybe you're right,\" and \"I don't understand x well enough.\"This technique doesn't always work, because people can be influenced\nby their environment.  In the MIT CS department, there seems to be\na tradition of acting like a brusque know-it-all. I'm told it derives\nultimately from Marvin Minsky, in the same way the classic airline\npilot manner is said to derive from Chuck Yeager.  Even genuinely\nsmart people start to act this way there, so you have to make\nallowances.It helped us to have Robert Morris, who is one of the readiest to\nsay \"I don't know\" of anyone I've met.  (At least, he was before he\nbecame a professor at MIT.)  No one dared put on attitude around\nRobert, because he was obviously smarter than they were and yet had\nzero attitude himself.Like most startups, ours began with a group of friends, and it was\nthrough personal contacts that we got most of the people we hired.\nThis is a crucial difference between startups and big companies.\nBeing friends with someone for even a couple days will tell you\nmore than companies could ever learn in interviews.  [2]It's no coincidence that startups start around universities, because\nthat's where smart people meet.  It's not what people learn in\nclasses at MIT and Stanford that has made technology companies\nspring up around them.  They could sing campfire songs in the classes\nso long as admissions worked the same.If you start a startup, there's a good chance it will be with people\nyou know from college or grad school.  So in theory you ought to\ntry to make friends with as many smart people as you can in school,\nright?  Well, no.  Don't make a conscious effort to schmooze; that\ndoesn't work well with hackers.What you should do in college is work on your own projects.  Hackers\nshould do this even if they don't plan to start startups, because\nit's the only real way to learn how to program.   In some cases you\nmay collaborate with other students, and this is the best way to\nget to know good hackers.  The project may even grow into a startup.\nBut once again, I wouldn't aim too directly at either target.  Don't\nforce things; just work on stuff you like with people you like.Ideally you want between two and four founders.  It would be hard\nto start with just one.  One person would find the moral weight of\nstarting a company hard to bear.  Even Bill Gates, who seems to be\nable to bear a good deal of moral weight, had to have a co-founder.\nBut you don't want so many founders that the company starts to look\nlike a group photo.  Partly because you don't need a lot of people\nat first, but mainly because the more founders you have, the worse\ndisagreements you'll have. When there are just two or three founders,\nyou know you have to resolve disputes immediately or perish.  If\nthere are seven or eight, disagreements can linger and harden into\nfactions.  You don't want mere voting; you need unanimity.In a technology startup, which most startups are, the founders\nshould include technical people.   During the Internet Bubble there\nwere a number of startups founded by business people who then went\nlooking for hackers to create their product for them.  This doesn't\nwork well.  Business people are bad at deciding what to do with\ntechnology, because they don't know what the options are, or which\nkinds of problems are hard and which are easy.  And when business\npeople try to hire hackers, they can't tell which ones are\ngood.\nEven other hackers have a hard time doing that.\nFor business people it's roulette.Do the founders of a startup have to include business people?  That\ndepends.  We thought so when we started ours, and we asked several\npeople who were said to know about this mysterious thing called\n\"business\" if they would be the president.  But they all said no,\nso I had to do it myself.  And what I discovered was that business\nwas no great mystery.   It's not something like physics or medicine\nthat requires extensive study.  You just try to get people to pay\nyou for stuff.I think the reason I made such a mystery of business was that I was\ndisgusted by the idea of doing it.  I wanted to work in the pure,\nintellectual world of software, not deal with customers' mundane\nproblems.  People who don't want to get dragged into some kind of\nwork often develop a protective incompetence at it.  Paul Erdos was\nparticularly good at this.  By seeming unable even to cut a grapefruit\nin half (let alone go to the store and buy one), he forced other\npeople to do such things for him, leaving all his time free for\nmath.  Erdos was an extreme case, but most husbands use the same\ntrick to some degree.Once I was forced to discard my protective incompetence, I found\nthat business was neither so hard nor so boring as I feared.  There\nare esoteric areas of business that are quite hard, like tax law\nor the pricing of derivatives, but you don't need to know about\nthose in a startup.  All you need to know about business to run a\nstartup are commonsense things people knew before there were business\nschools, or even universities.If you work your way down the Forbes 400 making an x next to the\nname of each person with an MBA, you'll learn something important\nabout business school.  After Warren Buffett, you don't hit another\nMBA till number 22,\nPhil Knight, the CEO of Nike.  There are only 5 MBAs in the top\n50.  What you notice in the Forbes 400 are a lot of people with\ntechnical backgrounds.  Bill Gates, Steve Jobs, Larry Ellison,\nMichael Dell, Jeff Bezos, Gordon Moore.  The rulers of the technology\nbusiness tend to come from technology, not business.  So if you\nwant to invest two years in something that will help you succeed\nin business, the evidence suggests you'd do better to learn how to\nhack than get an MBA. [3]There is one reason you might want to include business people in a\nstartup, though: because you have to have at least one person willing\nand able to focus on what customers want. Some believe only business\npeople can do this-- that hackers can implement software, but not\ndesign it.  That's nonsense.  There's nothing about knowing how to\nprogram that prevents hackers from understanding users, or about\nnot knowing how to program that magically enables business people\nto understand them.If you can't understand users, however, you should either learn how\nor find a co-founder who can.  That is the single most important\nissue for technology startups, and the rock that sinks more of them\nthan anything else.What Customers WantIt's not just startups that have to worry about this.  I think most\nbusinesses that fail do it because they don't give customers what\nthey want.  Look at restaurants.  A large percentage fail, about a\nquarter in the first year.  But can you think of one restaurant\nthat had really good food and went out of business?Restaurants with great food seem to prosper no matter what.  A\nrestaurant with great food can be expensive, crowded, noisy, dingy,\nout of the way, and even have bad service, and people will keep\ncoming.  It's true that a restaurant with mediocre food can sometimes\nattract customers through gimmicks.  But that approach is very\nrisky.  It's more straightforward just to make the food good.It's the same with technology.  You hear all kinds of reasons why\nstartups fail.  But can you think of one that had a massively popular\nproduct and still failed?In nearly every failed startup, the real problem was that customers\ndidn't want the product.  For most, the cause of death is listed\nas \"ran out of funding,\" but that's only the immediate cause.  Why\ncouldn't they get more funding?  Probably because the product was\na dog, or never seemed likely to be done, or both.When I was trying to think of the things every startup needed to\ndo, I almost included a fourth: get a version 1 out as soon as you\ncan.  But I decided not to, because that's implicit in making\nsomething customers want.  The only way to make something customers\nwant is to get a prototype in front of them and refine it based on\ntheir reactions.The other approach is what I call the \"Hail Mary\" strategy.  You\nmake elaborate plans for a product, hire a team of engineers to\ndevelop it (people who do this tend to use the term \"engineer\" for\nhackers), and then find after a year that you've spent two million\ndollars to develop something no one wants.  This was not uncommon\nduring the Bubble, especially in companies run by business types,\nwho thought of software development as something terrifying that\ntherefore had to be carefully planned.We never even considered that approach.  As a Lisp hacker, I come\nfrom the tradition of rapid prototyping.  I would not claim (at\nleast, not here) that this is the right way to write every program,\nbut it's certainly the right way to write software for a startup.\nIn a startup, your initial plans are almost certain to be wrong in\nsome way, and your first priority should be to figure out where.\nThe only way to do that is to try implementing them.Like most startups, we changed our plan on the fly.  At first we\nexpected our customers to be Web consultants.  But it turned out\nthey didn't like us, because our software was easy to use and we hosted\nthe site.  It would be too easy for clients to fire them.  We also\nthought we'd be able to sign up a lot of catalog companies, because\nselling online was a natural extension of their existing business.\nBut in 1996 that was a hard sell.  The middle managers we talked\nto at catalog companies saw the Web not as an opportunity, but as\nsomething that meant more work for them.We did get a few of the more adventurous catalog companies.  Among\nthem was Frederick's of Hollywood, which gave us valuable experience\ndealing with heavy loads on our servers.  But most of our users\nwere small, individual merchants who saw the Web as an opportunity\nto build a business.  Some had retail stores, but many only existed\nonline.  And so we changed direction to focus on these users.\nInstead of concentrating on the features Web consultants and catalog\ncompanies would want, we worked to make the software easy to use.I learned something valuable from that.  It's worth trying very,\nvery hard to make technology easy to use.  Hackers are so used to\ncomputers that they have no idea how horrifying software seems to\nnormal people.  Stephen Hawking's editor told him that every equation\nhe included in his book would cut sales in half.  When you work on\nmaking technology easier to use, you're riding that curve up instead\nof down. A 10% improvement in ease of use doesn't just increase\nyour sales 10%.  It's more likely to double your sales.How do you figure out what customers want?  Watch them.  One of the\nbest places to do this was at trade shows.  Trade shows didn't pay\nas a way of getting new customers, but they were worth it as market\nresearch.  We didn't just give canned presentations at trade shows.\nWe used to show people how to build real, working stores.  Which\nmeant we got to watch as they used our software, and talk to them\nabout what they needed.No matter what kind of startup you start, it will probably be a\nstretch for you, the founders, to understand what users want.  The\nonly kind of software you can build without studying users is the\nsort for which you are the typical user.  But this is just the kind\nthat tends to be open source: operating systems, programming\nlanguages, editors, and so on.  So if you're developing technology\nfor money, you're probably not going to be developing it for people\nlike you.  Indeed, you can use this as a way to generate ideas for\nstartups: what do people who are not like you want from technology?When most people think of startups, they think of companies like\nApple or Google.  Everyone knows these, because they're big consumer\nbrands.  But for every startup like that, there are twenty more\nthat operate in niche markets or live quietly down in the infrastructure.\nSo if you start a successful startup, odds are you'll start one of\nthose.Another way to say that is, if you try to start the kind of startup\nthat has to be a big consumer brand, the odds against succeeding\nare steeper.  The best odds are in niche markets.  Since startups\nmake money by offering people something better than they had before,\nthe best opportunities are where things suck most.  And it would\nbe hard to find a place where things suck more than in corporate\nIT departments.  You would not believe the amount of money companies\nspend on software, and the crap they get in return.  This imbalance\nequals opportunity.If you want ideas for startups, one of the most valuable things you\ncould do is find a middle-sized non-technology company and spend a\ncouple weeks just watching what they do with computers.  Most good\nhackers have no more idea of the horrors perpetrated in these places\nthan rich Americans do of what goes on in Brazilian slums.Start by writing software for smaller companies, because it's easier\nto sell to them.  It's worth so much to sell stuff to big companies\nthat the people selling them the crap they currently use spend a\nlot of time and money to do it.  And while you can outhack Oracle\nwith one frontal lobe tied behind your back, you can't outsell an\nOracle salesman.  So if you want to win through better technology,\naim at smaller customers.  [4]They're the more strategically valuable part of the market anyway.\nIn technology, the low end always eats the high end.  It's easier\nto make an inexpensive product more powerful than to make a powerful\nproduct cheaper.  So the products that start as cheap, simple options\ntend to gradually grow more powerful till, like water rising in a\nroom, they squash the \"high-end\" products against the ceiling.  Sun\ndid this to mainframes, and Intel is doing it to Sun.  Microsoft\nWord did it to desktop publishing software like Interleaf and\nFramemaker.  Mass-market digital cameras are doing it to the expensive\nmodels made for professionals.  Avid did it to the manufacturers\nof specialized video editing systems, and now Apple is doing it to\nAvid.  Henry Ford did it to the car makers that preceded\nhim.  If you build the simple, inexpensive option, you'll not only\nfind it easier to sell at first, but you'll also be in the best\nposition to conquer the rest of the market.It's very dangerous to let anyone fly under you.  If you have the\ncheapest, easiest product, you'll own the low end.  And if you\ndon't, you're in the crosshairs of whoever does.Raising MoneyTo make all this happen, you're going to need money.  Some startups\nhave been self-funding-- Microsoft for example-- but most aren't.\nI think it's wise to take money from investors.  To be self-funding,\nyou have to start as a consulting company, and it's hard to switch\nfrom that to a product company.Financially, a startup is like a pass/fail course.  The way to get\nrich from a startup is to maximize the company's chances of succeeding,\nnot to maximize the amount of stock you retain.  So if you can trade\nstock for something that improves your odds, it's probably a smart\nmove.To most hackers, getting investors seems like a terrifying and\nmysterious process.  Actually it's merely tedious.  I'll try to\ngive an outline of how it works.The first thing you'll need is a few tens of thousands of dollars\nto pay your expenses while you develop a prototype.  This is called\nseed capital.  Because so little money is involved, raising seed\ncapital is comparatively easy-- at least in the sense of getting a\nquick yes or no.Usually you get seed money from individual rich people called\n\"angels.\" Often they're people who themselves got rich from technology.\nAt the seed stage, investors don't expect you to have an elaborate\nbusiness plan.  Most know that they're supposed to decide quickly.\nIt's not unusual to get a check within a week based on a half-page\nagreement.We started Viaweb with $10,000 of seed money from our friend Julian.\nBut he gave us a lot more than money.  He's a former CEO and also\na corporate lawyer, so he gave us a lot of valuable advice about\nbusiness, and also did all the legal work of getting us set up as\na company.  Plus he introduced us to one of the two\nangel investors who supplied our next round of funding.Some angels, especially those with technology backgrounds, may be\nsatisfied with a demo and a verbal description of what you plan to\ndo.  But many will want a copy of your business plan, if only to\nremind themselves what they invested in.Our angels asked for one, and looking back, I'm amazed how much\nworry it caused me.  \"Business plan\" has that word \"business\" in\nit, so I figured it had to be something I'd have to read a book\nabout business plans to write.  Well, it doesn't.  At this stage,\nall most investors expect is a brief description of what you plan\nto do and how you're going to make money from it, and the resumes\nof the founders.  If you just sit down and write out what you've\nbeen saying to one another, that should be fine.  It shouldn't take\nmore than a couple hours, and you'll probably find that writing it\nall down gives you more ideas about what to do.For the angel to have someone to make the check out to, you're going\nto have to have some kind of company.  Merely incorporating yourselves\nisn't hard.  The problem is, for the company to exist, you have to\ndecide who the founders are, and how much stock they each have.  If\nthere are two founders with the same qualifications who are both\nequally committed to the business, that's easy.  But if you have a\nnumber of people who are expected to contribute in varying degrees,\narranging the proportions of stock can be hard.  And once you've\ndone it, it tends to be set in stone.I have no tricks for dealing with this problem.  All I can say is,\ntry hard to do it right.  I do have a rule of thumb for recognizing\nwhen you have, though.  When everyone feels they're getting a\nslightly bad deal, that they're doing more than they should for the\namount of stock they have, the stock is optimally apportioned.There is more to setting up a company than incorporating it, of\ncourse: insurance, business license, unemployment compensation,\nvarious things with the IRS.  I'm not even sure what the list is,\nbecause we, ah, skipped all that.  When we got real funding near\nthe end of 1996, we hired a great CFO, who fixed everything\nretroactively.  It turns out that no one comes and arrests you if\nyou don't do everything you're supposed to when starting a company.\nAnd a good thing too, or a lot of startups would never get started.\n[5]It can be dangerous to delay turning yourself into a company, because\none or more of the founders might decide to split off and start\nanother company doing the same thing.  This does happen.  So when\nyou set up the company, as well as as apportioning the stock, you\nshould get all the founders to sign something agreeing that everyone's\nideas belong to this company, and that this company is going to be\neveryone's only job.[If this were a movie, ominous music would begin here.]While you're at it, you should ask what else they've signed.  One\nof the worst things that can happen to a startup is to run into\nintellectual property problems.  We did, and it came closer to\nkilling us than any competitor ever did.As we were in the middle of getting bought, we discovered that one\nof our people had, early on, been bound by an agreement that said\nall his ideas belonged to the giant company that was paying for him\nto go to grad school.  In theory, that could have meant someone\nelse owned big chunks of our software.  So the acquisition came to\na screeching halt while we tried to sort this out.  The problem\nwas, since we'd been about to be acquired, we'd allowed ourselves\nto run low on cash.  Now we needed to raise more to keep going.\nBut it's hard to raise money with an IP cloud over your head, because\ninvestors can't judge how serious it is.Our existing investors, knowing that we needed money and had nowhere\nelse to get it, at this point attempted certain gambits which I\nwill not describe in detail, except to remind readers that the word\n\"angel\" is a metaphor.  The founders thereupon proposed to walk\naway from the company, after giving the investors a brief tutorial\non how to administer the servers themselves.  And while this was\nhappening, the acquirers used the delay as an excuse to welch on\nthe deal.Miraculously it all turned out ok.  The investors backed down; we\ndid another round of funding at a reasonable valuation; the giant\ncompany finally gave us a piece of paper saying they didn't own our\nsoftware; and six months later we were bought by Yahoo for much\nmore than the earlier acquirer had agreed to pay.  So we were happy\nin the end, though the experience probably took several years off\nmy life.Don't do what we did.  Before you consummate a startup, ask\neveryone about their previous IP history.Once you've got a company set up, it may seem presumptuous to go\nknocking on the doors of rich people and asking them to invest tens\nof thousands of dollars in something that is really just a bunch\nof guys with some ideas.  But when you look at it from the rich\npeople's point of view, the picture is more encouraging. Most rich\npeople are looking for good investments.  If you really think you\nhave a chance of succeeding, you're doing them a favor by letting\nthem invest.  Mixed with any annoyance they might feel about being\napproached will be the thought: are these guys the next Google?Usually angels are financially equivalent to founders.  They get\nthe same kind of stock and get diluted the same amount in future\nrounds.  How much stock should they get?  That depends on how\nambitious you feel.  When you offer x percent of your company for\ny dollars, you're implicitly claiming a certain value for the whole\ncompany.  Venture investments are usually described in terms of\nthat number.  If you give an investor new shares equal to 5% of\nthose already outstanding in return for $100,000, then you've done\nthe deal at a pre-money valuation of $2 million.How do you decide what the value of the company should be?  There\nis no rational way.  At this stage the company is just a bet.  I\ndidn't realize that when we were raising money.  Julian\nthought we ought to value the company at several million\ndollars.  I thought it was preposterous to claim that a couple\nthousand lines of code, which was all we had at the time, were worth\nseveral million dollars.  Eventually we settled on one millon,\nbecause Julian said no one would invest in a company with a valuation\nany lower. [6]What I didn't grasp at the time was that the valuation wasn't just\nthe value of the code we'd written so far.  It was also the value\nof our ideas, which turned out to be right, and of all the future\nwork we'd do, which turned out to be a lot.The next round of funding is the one in which you might deal with\nactual\nventure capital firms.\nBut don't wait till you've burned\nthrough your last round of funding to start approaching them.  VCs are slow to\nmake up their minds.  They can take months.  You don't want to be\nrunning out of money while you're trying to negotiate with them.Getting money from an actual VC firm is a bigger deal than getting\nmoney from angels.  The amounts of money involved are larger, millions\nusually.  So the deals take longer, dilute you more, and impose\nmore onerous conditions.Sometimes the VCs want to install a new CEO of their own choosing.\nUsually the claim is that you need someone mature and experienced,\nwith a business background.  Maybe in some cases this is true.   And\nyet Bill Gates was young and inexperienced and had no business\nbackground, and he seems to have done ok.  Steve Jobs got booted\nout of his own company by someone mature and experienced, with a\nbusiness background, who then proceeded to ruin the company.  So I\nthink people who are mature and experienced, with a business\nbackground, may be overrated.  We used to call these guys \"newscasters,\"\nbecause they had neat hair and spoke in deep, confident voices, and\ngenerally didn't know much more than they read on the teleprompter.We talked to a number of VCs, but eventually we ended up financing\nour startup entirely with angel money.  The main reason was that\nwe feared a brand-name VC firm would stick us with a newscaster as\npart of the deal.  That might have been ok if he was content to\nlimit himself to talking to the press, but what if he wanted to\nhave a say in running the company?   That would have led to disaster,\nbecause our software was so complex.  We were a company whose whole\nm.o. was to win through better technology.  The strategic decisions\nwere mostly decisions about technology, and we didn't need any help\nwith those.This was also one reason we didn't go public.  Back in 1998 our CFO\ntried to talk me into it.  In those days you could go public as a\ndogfood portal, so as a company with a real product and real revenues,\nwe might have done well.  But I feared it would have meant taking\non a newscaster-- someone who, as they say, \"can talk Wall Street's\nlanguage.\"I'm happy to see Google is bucking that trend.  They didn't talk\nWall Street's language when they did their IPO, and Wall Street\ndidn't buy.  And now Wall Street is collectively kicking itself.\nThey'll pay attention next time.  Wall Street learns new languages\nfast when money is involved.You have more leverage negotiating with VCs than you realize.  The\nreason is other VCs.  I know a number of VCs now, and when you talk\nto them you realize that it's a seller's market.  Even now there\nis too much money chasing too few good deals.VCs form a pyramid.  At the top are famous ones like Sequoia and\nKleiner Perkins, but beneath those are a huge number you've never\nheard of.  What they all have in common is that a dollar from them\nis worth one dollar.  Most VCs will tell you that they don't just\nprovide money, but connections and advice.  If you're talking to\nVinod Khosla or John Doerr or Mike Moritz, this is true.  But such\nadvice and connections can come very expensive.  And as you go down\nthe food chain the VCs get rapidly\ndumber.  A few steps down from\nthe top you're basically talking to bankers who've picked up a few\nnew vocabulary words from reading Wired.  (Does your product\nuse XML?)  So I'd advise you to be skeptical about claims\nof experience and connections.  Basically, a VC is a source of\nmoney.  I'd be inclined to go with whoever offered the most money\nthe soonest with the least strings attached.You may wonder how much to tell VCs.  And you should, because some\nof them may one day be funding your competitors.  I think the best\nplan is not to be overtly secretive, but not to tell them everything\neither.  After all, as most VCs say, they're more interested in the\npeople than the ideas.  The main reason they want to talk about\nyour idea is to judge you, not the idea.  So as long as you seem\nlike you know what you're doing, you can probably keep a few things\nback from them. [7]Talk to as many VCs as you can, even if you don't want their money,\nbecause a) they may be on the board of someone who will buy you,\nand b) if you seem impressive, they'll be discouraged from investing\nin your competitors.  The most efficient way to reach VCs, especially\nif you only want them to know about you and don't want their money,\nis at the conferences that are occasionally organized for startups\nto present to them.Not Spending ItWhen and if you get an infusion of real money from investors, what\nshould you do with it?  Not spend it, that's what.  In nearly every\nstartup that fails, the proximate cause is running out of money.\nUsually there is something deeper wrong.  But even a proximate cause\nof death is worth trying hard to avoid.During the Bubble many startups tried to \"get big fast.\" Ideally\nthis meant getting a lot of customers fast.  But it was easy for\nthe meaning to slide over into hiring a lot of people fast.Of the two versions, the one where you get a lot of customers fast\nis of course preferable.  But even that may be overrated.  The idea\nis to get there first and get all the users, leaving none for\ncompetitors.  But I think in most businesses the advantages of being\nfirst to market are not so overwhelmingly great.  Google is again\na case in point.  When they appeared it seemed as if search was a\nmature market, dominated by big players who'd spent millions to\nbuild their brands: Yahoo, Lycos, Excite, Infoseek, Altavista,\nInktomi.  Surely 1998 was a little late to arrive at the party.But as the founders of Google knew, brand is worth next to nothing\nin the search business.  You can come along at any point and make\nsomething better, and users will gradually seep over to you.  As\nif to emphasize the point, Google never did any advertising.  They're\nlike dealers; they sell the stuff, but they know better than to use\nit themselves.The competitors Google buried would have done better to spend those\nmillions improving their software.  Future startups should learn\nfrom that mistake.  Unless you're in a market where products are\nas undifferentiated as cigarettes or vodka or laundry detergent,\nspending a lot on brand advertising is a sign of breakage.  And few\nif any Web businesses are so undifferentiated.  The dating sites\nare running big ad campaigns right now, which is all the\nmore evidence they're ripe for the picking.  (Fee, fie, fo, fum, I\nsmell a company run by marketing guys.)We were compelled by circumstances to grow slowly, and in retrospect\nit was a good thing.  The founders all learned to do every job in\nthe company.  As well as writing software, I had to do sales and\ncustomer support.  At sales I was not very good.  I was persistent,\nbut I didn't have the smoothness of a good salesman.  My message\nto potential customers was: you'd be stupid not to sell online, and\nif you sell online you'd be stupid to use anyone else's software.\nBoth statements were true, but that's not the way to convince people.I was great at customer support though.  Imagine talking to a\ncustomer support person who not only knew everything about the\nproduct, but would apologize abjectly if there was a bug, and then\nfix it immediately, while you were on the phone with them.  Customers\nloved us.  And we loved them, because when you're growing slow by\nword of mouth, your first batch of users are the ones who were smart\nenough to find you by themselves.  There is nothing more valuable,\nin the early stages of a startup, than smart users.  If you listen\nto them, they'll tell you exactly how to make a winning product.\nAnd not only will they give you this advice for free, they'll pay\nyou.We officially launched in early 1996.  By the end of that year we\nhad about 70 users.  Since this was the era of \"get big fast,\" I\nworried about how small and obscure we were.  But in fact we were\ndoing exactly the right thing.  Once you get big (in users or\nemployees) it gets hard to change your product.  That year was\neffectively a laboratory for improving our software.  By the end\nof it, we were so far ahead of our competitors that they never had\na hope of catching up.  And since all the hackers had spent many\nhours talking to users, we understood online commerce way better\nthan anyone else.That's the key to success as a startup.  There is nothing more\nimportant than understanding your business.  You might think that\nanyone in a business must, ex officio, understand it.  Far from it.\nGoogle's secret\nweapon was simply that they understood search.  I was working for\nYahoo when Google appeared, and Yahoo didn't understand search.  I\nknow because I once tried to convince the powers that be that we\nhad to make search better, and I got in reply what was then the\nparty line about it: that Yahoo was no longer a mere \"search engine.\"\nSearch was now only a small percentage of our page views, less than\none month's growth, and now that we were established as a \"media\ncompany,\" or \"portal,\" or whatever we were, search could safely be\nallowed to wither and drop off, like an umbilical cord.Well, a small fraction of page views they may be, but they are an\nimportant fraction, because they are the page views that Web sessions\nstart with.  I think Yahoo gets that now.Google understands a few other things most Web companies still\ndon't.  The most important is that you should put users before\nadvertisers, even though the advertisers are paying and users aren't.\nOne of my favorite bumper stickers reads \"if the people lead, the\nleaders will follow.\" Paraphrased for the Web, this becomes \"get\nall the users, and the advertisers will follow.\"  More generally,\ndesign your product to please users first, and then think about how\nto make money from it.  If you don't put users first, you leave a\ngap for competitors who do.To make something users love, you have to understand them.  And the\nbigger you are, the harder that is.  So I say \"get big slow.\" The\nslower you burn through your funding, the more time you have to\nlearn.The other reason to spend money slowly is to encourage a culture\nof cheapness.  That's something Yahoo did understand.  David Filo's\ntitle was \"Chief Yahoo,\" but he was proud that his unofficial title\nwas \"Cheap Yahoo.\"  Soon after we arrived at Yahoo, we got an email\nfrom Filo, who had been crawling around our directory hierarchy,\nasking if it was really necessary to store so much of our data on\nexpensive RAID drives.  I was impressed by that.  Yahoo's market\ncap then was already in the billions, and they were still worrying\nabout wasting a few gigs of disk space.When you get a couple million dollars from a VC firm, you tend to\nfeel rich.  It's important to realize you're not.  A rich company\nis one with large revenues.  This money isn't revenue.  It's money\ninvestors have given you in the hope you'll be able to generate\nrevenues.  So despite those millions in the bank, you're still poor.For most startups the model should be grad student, not law firm.\nAim for cool and cheap, not expensive and impressive.  For us the\ntest of whether a startup understood this was whether they had Aeron\nchairs.  The Aeron came out during the Bubble and was very popular\nwith startups.  Especially the type, all too common then, that was\nlike a bunch of kids playing house with money supplied by VCs.   We\nhad office chairs so cheap that the arms all fell off.  This was\nslightly embarrassing at the time, but in retrospect the grad-studenty\natmosphere of our office was another of those things we did right\nwithout knowing it.Our offices were in a wooden triple-decker in Harvard Square.  It\nhad been an apartment until about the 1970s, and there was still a\nclaw-footed bathtub in the bathroom.  It must once have been inhabited\nby someone fairly eccentric, because a lot of the chinks in the\nwalls were stuffed with aluminum foil, as if to protect against\ncosmic rays.  When eminent visitors came to see us, we were a bit\nsheepish about the low production values.  But in fact that place\nwas the perfect space for a startup.  We felt like our role was to\nbe impudent underdogs instead of corporate stuffed shirts, and that\nis exactly the spirit you want.An apartment is also the right kind of place for developing software.\nCube farms suck for that, as you've probably discovered if you've\ntried it.  Ever notice how much easier it is to hack at home than\nat work?  So why not make work more like home?When you're looking for space for a startup, don't feel that it has\nto look professional.  Professional means doing good work, not\nelevators and glass walls.  I'd advise most startups to avoid\ncorporate space at first and just rent an apartment.  You want to\nlive at the office in a startup, so why not have a place designed\nto be lived in as your office?Besides being cheaper and better to work in, apartments tend to be\nin better locations than office buildings.  And for a startup\nlocation is very important.  The key to productivity is for people\nto come back to work after dinner.  Those hours after the phone\nstops ringing are by far the best for getting work done.  Great\nthings happen when a group of employees go out to dinner together,\ntalk over ideas, and then come back to their offices to implement\nthem.  So you want to be in a place where there are a lot of\nrestaurants around, not some dreary office park that's a wasteland\nafter 6:00 PM.  Once a company shifts over into the model where\neveryone drives home to the suburbs for dinner, however late, you've\nlost something extraordinarily valuable.  God help you if you\nactually start in that mode.If I were going to start a startup today, there are only three\nplaces I'd consider doing it: on the Red Line near Central, Harvard,\nor Davis Squares (Kendall is too sterile); in Palo Alto on University\nor California Aves; and in Berkeley immediately north or south of\ncampus.  These are the only places I know that have the right kind\nof vibe.The most important way to not spend money is by not hiring people.\nI may be an extremist, but I think hiring people is the worst thing\na company can do.  To start with, people are a recurring expense,\nwhich is the worst kind.  They also tend to cause you to grow out\nof your space, and perhaps even move to the sort of uncool office\nbuilding that will make your software worse.  But worst of all,\nthey slow you down: instead of sticking your head in someone's\noffice and checking out an idea with them, eight people have to\nhave a meeting about it.  So the fewer people you can hire, the\nbetter.During the Bubble a lot of startups had the opposite policy.  They\nwanted to get \"staffed up\" as soon as possible, as if you couldn't\nget anything done unless there was someone with the corresponding\njob title.  That's big company thinking.  Don't hire people to fill\nthe gaps in some a priori org chart.  The only reason to hire someone\nis to do something you'd like to do but can't.If hiring unnecessary people is expensive and slows you down, why\ndo nearly all companies do it?  I think the main reason is that\npeople like the idea of having a lot of people working for them.\nThis weakness often extends right up to the CEO.  If you ever end\nup running a company, you'll find the most common question people\nask is how many employees you have.  This is their way of weighing\nyou.  It's not just random people who ask this; even reporters do.\nAnd they're going to be a lot more impressed if the answer is a\nthousand than if it's ten.This is ridiculous, really.  If two companies have the same revenues,\nit's the one with fewer employees that's more impressive.  When\npeople used to ask me how many people our startup had, and I answered\n\"twenty,\" I could see them thinking that we didn't count for much.\nI used to want to add \"but our main competitor, whose ass we regularly\nkick, has a hundred and forty, so can we have credit for the larger\nof the two numbers?\"As with office space, the number of your employees is a choice\nbetween seeming impressive, and being impressive.  Any of you who\nwere nerds in high school know about this\nchoice.  Keep doing it when you start a company.Should You?But should you start a company?  Are you the right sort of person\nto do it?  If you are, is it worth it?More people are the right sort of person to start a startup than\nrealize it.  That's the main reason I wrote this.  There could be\nten times more startups than there are, and that would probably be\na good thing.I was, I now realize, exactly the right sort of person to start a\nstartup.  But the idea terrified me at first.  I was forced into\nit because I was a Lisp hacker.  The company\nI'd been consulting for seemed to be running into trouble, and there\nwere not a lot of other companies using Lisp.  Since I couldn't\nbear the thought of programming in another language (this was 1995,\nremember, when \"another language\" meant C++) the only option seemed\nto be to start a new company using Lisp.I realize this sounds far-fetched, but if you're a Lisp hacker\nyou'll know what I mean.  And if the idea of starting a startup\nfrightened me so much that I only did it out of necessity, there\nmust be a lot of people who would be good at it but who are too\nintimidated to try.So who should start a startup?  Someone who is a good hacker, between\nabout 23 and 38, and who wants to solve the money problem in one\nshot instead of getting paid gradually over a conventional working\nlife.I can't say precisely what a good hacker is.  At a first rate\nuniversity this might include the top half of computer science\nmajors.  Though of course you don't have to be a CS major to be a\nhacker; I was a philosophy major in college.It's hard to tell whether you're a good hacker, especially when\nyou're young.  Fortunately the process of starting startups tends\nto select them automatically.  What drives people to start startups\nis (or should be) looking at existing technology and thinking, don't\nthese guys realize they should be doing x, y, and z?  And that's\nalso a sign that one is a good hacker.I put the lower bound at 23 not because there's something that\ndoesn't happen to your brain till then, but because you need to see\nwhat it's like in an existing business before you try running your\nown.  The business doesn't have to be a startup.  I spent a year\nworking for a software company to pay off my college loans.  It was\nthe worst year of my adult life, but I learned, without realizing\nit at the time, a lot of valuable lessons about the software business.\nIn this case they were mostly negative lessons: don't have a lot\nof meetings; don't have chunks of code that multiple people own;\ndon't have a sales guy running the company; don't make a high-end\nproduct; don't let your code get too big; don't leave finding bugs\nto QA people; don't go too long between releases; don't isolate\ndevelopers from users; don't move from Cambridge to Route 128; and\nso on. [8] But negative lessons are just as valuable as positive\nones.  Perhaps even more valuable: it's hard to repeat a brilliant\nperformance, but it's straightforward to avoid errors. [9]The other reason it's hard to start a company before 23 is that\npeople won't take you seriously.  VCs won't trust you, and will try\nto reduce you to a mascot as a condition of funding.  Customers\nwill worry you're going to flake out and leave them stranded.  Even\nyou yourself, unless you're very unusual, will feel your age to\nsome degree; you'll find it awkward to be the boss of someone much\nolder than you, and if you're 21, hiring only people younger rather\nlimits your options.Some people could probably start a company at 18 if they wanted to.\nBill Gates was 19 when he and Paul Allen started Microsoft.  (Paul\nAllen was 22, though, and that probably made a difference.) So if\nyou're thinking, I don't care what he says, I'm going to start a\ncompany now, you may be the sort of person who could get away with\nit.The other cutoff, 38, has a lot more play in it.  One reason I put\nit there is that I don't think many people have the physical stamina\nmuch past that age.   I used to work till 2:00 or 3:00 AM every\nnight, seven days a week.  I don't know if I could do that now.Also,\nstartups are a big risk financially.  If you try something that\nblows up and leaves you broke at 26, big deal; a lot of 26 year\nolds are broke.  By 38 you can't take so many risks-- especially\nif you have kids.My final test may be the most restrictive.  Do you actually want\nto start a startup?  What it amounts to, economically, is compressing\nyour working life into the smallest possible space.  Instead of\nworking at an ordinary rate for 40 years, you work like hell for\nfour.  And maybe end up with nothing-- though in that case it\nprobably won't take four years.During this time you'll do little but work, because when you're not\nworking, your competitors will be.  My only leisure activities were\nrunning, which I needed to do to keep working anyway, and about\nfifteen minutes of reading a night.  I had a girlfriend for a total\nof two months during that three year period.  Every couple weeks I\nwould take a few hours off to visit a used bookshop or go to a\nfriend's house for dinner.  I went to visit my family twice.\nOtherwise I just worked.Working was often fun, because the people I worked with were some\nof my best friends.  Sometimes it was even technically interesting.\nBut only about 10% of the time.  The best I can say for the other\n90% is that some of it is funnier in hindsight than it seemed then.\nLike the time the power went off in Cambridge for about six hours,\nand we made the mistake of trying to start a gasoline powered\ngenerator inside our offices. I won't try that again.I don't think the amount of bullshit you have to deal with in a\nstartup is more than you'd endure in an ordinary working life.  It's\nprobably less, in fact; it just seems like a lot because it's\ncompressed into a short period.  So mainly what a startup buys you\nis time.  That's the way to think about it if you're trying to\ndecide whether to start one.  If you're the sort of person who would\nlike to solve the money problem once and for all instead of working\nfor a salary for 40 years, then a startup makes sense.For a lot of people the conflict is between startups and graduate\nschool.  Grad students are just the age, and just the sort of people,\nto start software startups.  You may worry that if you do you'll\nblow your chances of an academic career.  But it's possible to be\npart of a startup and stay in grad school, especially at first.\nTwo of our three original hackers were in grad school the whole\ntime, and both got their degrees.\nThere are few sources of energy\nso powerful as a procrastinating grad student.If you do have to\nleave grad school, in the worst case it won't be for too long.  If\na startup fails, it will probably fail quickly enough that you can\nreturn to academic life.  And if it succeeds, you may find you no\nlonger have such a burning desire to be an assistant professor.If you want to do it, do it.  Starting a startup is not the great\nmystery it seems from outside.  It's not something you have to know\nabout \"business\" to do.  Build something users love, and spend less\nthan you make.  How hard is that?Notes[1] Google's revenues are about two billion a year, but half comes\nfrom ads on other sites.[2] One advantage startups have over established companies is that\nthere are no discrimination laws about starting businesses.  For\nexample, I would be reluctant to start a startup with a woman\nwho had small children, or was likely to have them soon.  But you're\nnot allowed to ask prospective employees if they plan to have kids\nsoon.  Believe it or not, under current US law, you're not even\nallowed to discriminate on the basis of intelligence.  Whereas when\nyou're starting a company, you can discriminate on any basis you\nwant about who you start it with.[3] Learning to hack is a lot cheaper than business school, because\nyou can do it mostly on your own.  For the price of a Linux box, a\ncopy of K&R, and a few hours of advice from your neighbor's fifteen\nyear old son, you'll be well on your way.[4] Corollary: Avoid starting a startup to sell things to the biggest\ncompany of all, the government.  Yes, there are lots of opportunities\nto sell them technology.  But let someone else start those startups.[5] A friend who started a company in Germany told me they do care\nabout the paperwork there, and that there's more of it.  Which helps\nexplain why there are not more startups in Germany.[6] At the seed stage our valuation was in principle $100,000, because\nJulian got 10% of the company.  But this is a very misleading number,\nbecause the money was the least important of the things Julian gave us.[7] The same goes for companies that seem to want to acquire you.\nThere will be a few that are only pretending to in order to pick\nyour brains.  But you can never tell for sure which these are, so\nthe best approach is to seem entirely open, but to fail to mention\na few critical technical secrets.[8]  I was as bad an employee as this place was a company.  I\napologize to anyone who had to work with me there.[9]  You could probably write a book about how to succeed in business\nby doing everything in exactly the opposite way from the DMV.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston,\nand Robert Morris for reading drafts of this essay, and to Steve\nMelendez and Gregory Price for inviting me to speak."},{"title":"\"I can be tricked by anyone who looks like Mark Zuckerberg.\"","text":"November 2014In 2013 a New York Times article quoted me as saying \"I can be tricked by anyone who looks like Mark Zuckerberg.\"That sentence has since become a minor Internet meme, as cherished\nby its adherents as the idea that Obama was born outside the US.Is it true? Of course not. That statement was a joke. I have a\nstrange ability to notice things about faces.  In 2010 we had one\napplicant that I noticed during the interview looked like Zuck.\nAfterward I bored the other partners with an explanation of why.\nAfter years of hearing this sort of thing, my observations about\nfaces had become an ongoing joke within YC.  The startup in question\nfell apart almost immediately due to a cofounder dispute, and\nafterward the other partners kidded me for talking so much about\nhow he looked like Zuck.It was not only a joking reference to a single incident, but\nthe fact that we joked about it shows we knew that looking like\nZuck had no predictive value.As if anyone would think it did.  Could anyone be so naive as to\nthink that resembling Zuck would be enough to make a founder succeed?\nAnd is it plausible that we, of all people, who'd interviewed\nthousands of founders, would think such a thing?So why have so many people since believed I was serious? For the\nsame reason, presumably, that others cling so tenaciously to the\nidea that Obama was born outside the US: because they so want to\nbelieve it.Will writing this fix the problem? Not entirely, I'm sure. In fact\none of the reasons I wrote it was that I'm curious how fixable this\nsort of bogus meme is.  But it will be harder now to make an honest\nmistake.  People will probably still repeat that quote, but now if\nsomeone does it will be proof that either (a) they didn't do their\nresearch or (b) they have an ideological axe to grind."},{"title":"Ideas for Startups","text":"October 2005(This essay is derived from a talk at the 2005\nStartup School.)How do you get good ideas for\nstartups?  That's probably the number\none question people ask me.I'd like to reply with another question: why do people think it's\nhard to come up with ideas for startups?That might seem a stupid thing to ask.  Why do they think\nit's hard?  If people can't do it, then it is hard, at least\nfor them.  Right?Well, maybe not.  What people usually say is not that they can't\nthink of ideas, but that they don't have any.  That's not quite the\nsame thing.  It could be the reason they don't have any is that\nthey haven't tried to generate them.I think this is often the case.  I think people believe that coming\nup with ideas for startups is very hard-- that it must be\nvery hard-- and so they don't try do to it.  They assume ideas are\nlike miracles: they either pop into your head or they don't.I also have a theory about why people think this.  They overvalue\nideas.  They think creating a startup is just a matter of implementing\nsome fabulous initial idea.  And since a successful startup is worth\nmillions of dollars, a good idea is therefore a million dollar idea.If coming up with an idea for a startup equals coming up with a\nmillion dollar idea, then of course it's going to seem hard.  Too\nhard to bother trying.  Our instincts tell us something so valuable\nwould not be just lying around for anyone to discover.Actually, startup ideas are not million dollar ideas, and here's\nan experiment you can try to prove it: just try to sell one.  Nothing\nevolves faster than markets.  The fact that there's no market for\nstartup ideas suggests there's no demand.  Which means, in the\nnarrow sense of the word, that startup ideas are worthless.QuestionsThe fact is, most startups end up nothing like the initial idea.\nIt would be closer to the truth to say the main value of your initial\nidea is that, in the process of discovering it's broken, you'll\ncome up with your real idea.The initial idea is just a starting point-- not a blueprint, but a\nquestion.  It might help if they were expressed that way.  Instead\nof saying that your idea is to make a collaborative, web-based\nspreadsheet, say: could one make a collaborative, web-based\nspreadsheet?  A few grammatical tweaks, and a woefully incomplete\nidea becomes a promising question to explore.There's a real difference, because an assertion provokes objections\nin a way a question doesn't.  If you say: I'm going to build a\nweb-based spreadsheet, then critics-- the most dangerous of which\nare in your own head-- will immediately reply that you'd be competing\nwith Microsoft, that you couldn't give people the kind of UI they\nexpect, that users wouldn't want to have their data on your servers,\nand so on.A question doesn't seem so challenging.  It becomes: let's try\nmaking a web-based spreadsheet and see how far we get.  And everyone\nknows that if you tried this you'd be able to make something\nuseful.  Maybe what you'd end up with wouldn't even be a spreadsheet.\nMaybe it would be some kind of new spreasheet-like collaboration\ntool that doesn't even have a name yet.  You wouldn't have thought\nof something like that except by implementing your way toward it.Treating a startup idea as a question changes what you're looking\nfor.  If an idea is a blueprint, it has to be right.  But if it's\na question, it can be wrong, so long as it's wrong in a way that\nleads to more ideas.One valuable way for an idea to be wrong is to be only a partial\nsolution.  When someone's working on a problem that seems too\nbig, I always ask: is there some way to bite off some subset of the\nproblem, then gradually expand from there?  That will generally\nwork unless you get trapped on a local maximum, like 1980s-style\nAI, or C.UpwindSo far, we've reduced the problem from thinking of a million dollar\nidea to thinking of a mistaken question.  That doesn't seem so hard,\ndoes it?To generate such questions you need two things: to be familiar with\npromising new technologies, and to have the right kind of friends.\nNew technologies are the ingredients startup ideas are made of, and\nconversations with friends are the kitchen they're cooked in.Universities have both, and that's why so many startups grow out\nof them.  They're filled with new technologies, because they're\ntrying to produce research, and only things that are new count as\nresearch.  And they're full of exactly the right kind of people to\nhave ideas with: the other students, who will be not only smart but\nelastic-minded to a fault.The opposite extreme would be a well-paying but boring job at a big\ncompany.  Big companies are biased against new technologies, and\nthe people you'd meet there would be wrong too.In an essay I wrote for high school students,\nI said a good rule of thumb was to stay upwind-- to\nwork on things that maximize your future options. The principle\napplies for adults too, though perhaps it has to be modified to:\nstay upwind for as long as you can, then cash in the potential\nenergy you've accumulated when you need to pay for kids.I don't think people consciously realize this, but one reason\ndownwind jobs like churning out Java for a bank pay so well is\nprecisely that they are downwind.  The market price for that kind\nof work is higher because it gives you fewer options for the future.\nA job that lets you work on exciting new stuff will tend to pay\nless, because part of the compensation is in the form of the new\nskills you'll learn.Grad school is the other end of the spectrum from a coding job at\na big company: the pay's low but you spend most of your time working\non new stuff.  And of course, it's called \"school,\" which makes\nthat clear to everyone, though in fact all jobs are some percentage\nschool.The right environment for having startup ideas need not be a\nuniversity per se.  It just has to be a situation with a large\npercentage of school.It's obvious why you want exposure to new technology, but why do\nyou need other people?  Can't you just think of new ideas yourself?\nThe empirical answer is: no.  Even Einstein needed people to bounce\nideas off.  Ideas get developed in the process of explaining them\nto the right kind of person.  You need that resistance, just\nas a carver needs the resistance of the wood.This is one reason Y Combinator has a rule against investing in\nstartups with only one founder.  Practically every successful company\nhas at least two.  And because startup founders work under great\npressure, it's critical they be friends.I didn't realize it till I was writing this, but that may help\nexplain why there are so few female startup founders.  I read on\nthe Internet (so it must be true) that only 1.7% of VC-backed\nstartups are founded by women.  The percentage of female hackers\nis small, but not that small.  So why the discrepancy?When you realize that successful startups tend to have multiple\nfounders who were already friends, a\npossible explanation emerges.  People's best friends are likely to\nbe of the same sex, and if one group is a minority in some population,\npairs of them will be a minority squared.\n[1]DoodlingWhat these groups of co-founders do together is more complicated\nthan just sitting down and trying to think of ideas.  I suspect the\nmost productive setup is a kind of together-alone-together sandwich.\nTogether you talk about some hard problem, probably getting nowhere.\nThen, the next morning, one of you has an idea in the shower about\nhow to solve it.  He runs eagerly to to tell the others, and together\nthey work out the kinks.What happens in that shower?  It seems to me that ideas just pop\ninto my head.  But can we say more than that?Taking a shower is like a form of meditation.  You're alert, but\nthere's nothing to distract you.  It's in a situation like this,\nwhere your mind is free to roam, that it bumps into new ideas.What happens when your mind wanders?  It may be like doodling.  Most\npeople have characteristic ways of doodling.  This habit is\nunconscious, but not random: I found my doodles changed after I\nstarted studying painting.  I started to make the kind of gestures\nI'd make if I were drawing from life.  They were atoms of drawing,\nbut arranged randomly.\n[2]Perhaps letting your mind wander is like doodling with ideas.  You\nhave certain mental gestures you've learned in your work, and when\nyou're not paying attention, you keep making these same gestures,\nbut somewhat randomly.  In effect, you call the same functions on\nrandom arguments.  That's what a metaphor is: a function applied\nto an argument of the wrong type.Conveniently, as I was writing this, my mind wandered: would it be\nuseful to have metaphors in a programming language?  I don't know;\nI don't have time to think about this.  But it's convenient because\nthis is an example of what I mean by habits of mind.  I spend a lot\nof time thinking about language design, and my habit of always\nasking \"would x be useful in a programming language\" just got\ninvoked.If new ideas arise like doodles, this would explain why you have\nto work at something for a while before you have any.  It's not\njust that you can't judge ideas till you're an expert in a field.\nYou won't even generate ideas, because you won't have any habits\nof mind to invoke.Of course the habits of mind you invoke on some field don't have\nto be derived from working in that field.  In fact, it's often\nbetter if they're not.  You're not just looking for good ideas, but\nfor good new ideas, and you have a better chance of generating\nthose if you combine stuff from distant fields.  As hackers, one\nof our habits of mind is to ask, could one open-source x?  For\nexample, what if you made an open-source operating system?  A fine\nidea, but not very novel.  Whereas if you ask, could you make an\nopen-source play?  you might be onto something.Are some kinds of work better sources of habits of mind than others?\nI suspect harder fields may be better sources, because to attack\nhard problems you need powerful solvents.  I find math is a good\nsource of metaphors-- good enough that it's worth studying just for\nthat.  Related fields are also good sources, especially when they're\nrelated in unexpected ways.  Everyone knows computer science and\nelectrical engineering are related, but precisely because everyone\nknows it, importing ideas from one to the other doesn't yield great\nprofits.  It's like importing something from Wisconsin to Michigan.\nWhereas (I claim) hacking and painting are\nalso related, in the sense that hackers and painters are both\nmakers,\nand this source of new ideas is practically virgin territory.ProblemsIn theory you could stick together ideas at random and see what you\ncame up with.  What if you built a peer-to-peer dating site?  Would\nit be useful to have an automatic book?  Could you turn theorems\ninto a commodity?  When you assemble ideas at random like this,\nthey may not be just stupid, but semantically ill-formed.  What\nwould it even mean to make theorems a commodity?  You got me.  I\ndidn't think of that idea, just its name.You might come up with something useful this way, but I never have.\nIt's like knowing a fabulous sculpture is hidden inside a block of\nmarble, and all you have to do is remove the marble that isn't part\nof it.  It's an encouraging thought, because it reminds you there\nis an answer, but it's not much use in practice because the search\nspace is too big.I find that to have good ideas I need to be working on some problem.\nYou can't start with randomness.  You have to start with a problem,\nthen let your mind wander just far enough for new ideas to form.In a way, it's harder to see problems than their solutions.  Most\npeople prefer to remain in denial about problems.  It's obvious\nwhy: problems are irritating.  They're problems!  Imagine if people\nin 1700 saw their lives the way we'd see them.  It would have been\nunbearable.  This denial is such a powerful force that, even when\npresented with possible solutions, people often prefer to believe\nthey wouldn't work.I saw this phenomenon when I worked on spam filters.  In 2002, most\npeople preferred to ignore spam, and most of those who didn't\npreferred to believe the heuristic filters then available were the\nbest you could do.I found spam intolerable, and I felt it had to be possible to\nrecognize it statistically.  And it turns out that was all you\nneeded to solve the problem.  The algorithm I used was ridiculously\nsimple.  Anyone who'd really tried to solve the problem would have\nfound it.  It was just that no one had really tried to solve the\nproblem.\n[3]Let me repeat that recipe: finding the problem intolerable and\nfeeling it must be possible to solve it.  Simple as it seems, that's\nthe recipe for a lot of startup ideas.WealthSo far most of what I've said applies to ideas in general.  What's\nspecial about startup ideas?  Startup ideas are ideas for companies,\nand companies have to make money.  And the way to make money is to\nmake something people want.Wealth is what people want.  I don't mean that as some kind of\nphilosophical statement; I mean it as a tautology.So an idea for a startup is an idea for something people want.\nWouldn't any good idea be something people want?  Unfortunately\nnot.  I think new theorems are a fine thing to create, but there\nis no great demand for them.  Whereas there appears to be great\ndemand for celebrity gossip magazines.  Wealth is defined democratically.\nGood ideas and valuable ideas are not quite the same thing; the\ndifference is individual tastes.But valuable ideas are very close to good ideas, especially in\ntechnology.  I think they're so close that you can get away with\nworking as if the goal were to discover good ideas, so long as, in\nthe final stage, you stop and ask: will people actually pay for\nthis?  Only a few ideas are likely to make it that far and then get\nshot down; RPN calculators might be one example.One way to make something people want is to look at stuff people\nuse now that's broken.  Dating sites are a prime example.  They\nhave millions of users, so they must be promising something people\nwant.  And yet they work horribly.  Just ask anyone who uses them.\nIt's as if they used the worse-is-better approach but stopped after\nthe first stage and handed the thing over to marketers.Of course, the most obvious breakage in the average computer user's\nlife is Windows itself.  But this is a special case: you can't\ndefeat a monopoly by a frontal attack.  Windows can and will be\noverthrown, but not by giving people a better desktop OS.  The way\nto kill it is to redefine the problem as a superset of the current\none.  The problem is not, what operating system should people use\non desktop computers?  but how should people use applications?\nThere are answers to that question that don't even involve desktop\ncomputers.Everyone thinks Google is going to solve this problem, but it is a\nvery subtle one, so subtle that a company as big as Google might\nwell get it wrong.  I think the odds are better than 50-50 that the\nWindows killer-- or more accurately, Windows transcender-- will\ncome from some little startup.Another classic way to make something people want is to take a\nluxury and make it into a commmodity.  People must want something\nif they pay a lot for it.  And it is a very rare product that can't\nbe made dramatically cheaper if you try.This was Henry Ford's plan.  He made cars, which had been a luxury\nitem, into a commodity.  But the idea is much older than Henry Ford.\nWater mills transformed mechanical power from a luxury into a\ncommodity, and they were used in the Roman empire.  Arguably\npastoralism transformed a luxury into a commodity.When you make something cheaper you can sell more of them.  But if\nyou make something dramatically cheaper you often get qualitative\nchanges, because people start to use it in different ways.  For\nexample, once computers get so cheap that most people can have one\nof their own, you can use them as communication devices.Often to make something dramatically cheaper you have to redefine\nthe problem.  The Model T didn't have all the features previous\ncars did.  It only came in black, for example.  But it solved the\nproblem people cared most about, which was getting from place to\nplace.One of the most useful mental habits I know I learned from Michael\nRabin: that the best way to solve a problem is often to redefine\nit.  A lot of people use this technique without being consciously\naware of it, but Rabin was spectacularly explicit.  You need a big\nprime number?  Those are pretty expensive.  How about if I give you\na big number that only has a 10 to the minus 100 chance of not being\nprime?  Would that do?  Well, probably; I mean, that's probably\nsmaller than the chance that I'm imagining all this anyway.Redefining the problem is a particularly juicy heuristic when you\nhave competitors, because it's so hard for rigid-minded people to\nfollow.  You can work in plain sight and they don't realize the\ndanger.  Don't worry about us. We're just working on search.  Do\none thing and do it well, that's our motto.Making things cheaper is actually a subset of a more general\ntechnique: making things easier.  For a long time it was most of\nmaking things easier, but now that the things we build are so\ncomplicated, there's another rapidly growing subset: making things\neasier to use.This is an area where there's great room for improvement.  What you\nwant to be able to say about technology is: it just works.  How\noften do you say that now?Simplicity takes effort-- genius, even.  The average programmer\nseems to produce UI designs that are almost willfully bad. I was\ntrying to use the stove at my mother's house a couple weeks ago.\nIt was a new one, and instead of physical knobs it had buttons and\nan LED display.  I tried pressing some buttons I thought would cause\nit to get hot, and you know what it said?  \"Err.\"  Not even \"Error.\"\n\"Err.\"  You can't just say \"Err\" to the user of a stove.\nYou should design the UI so that errors are impossible.  And the\nboneheads who designed this stove even had an example of such a UI\nto work from: the old one.  You turn one knob to set the temperature\nand another to set the timer.  What was wrong with that?  It just\nworked.It seems that, for the average engineer, more options just means\nmore rope to hang yourself.  So if you want to start a startup, you\ncan take almost any existing technology produced by a big company,\nand assume you could build something way easier to use.Design for ExitSuccess for a startup approximately equals getting bought.  You\nneed some kind of exit strategy, because you can't get the smartest\npeople to work for you without giving them options likely to be\nworth something.  Which means you either have to get bought or go\npublic, and the number of startups that go public is very small.If success probably means getting bought, should you make that a\nconscious goal?  The old answer was no: you were supposed to pretend\nthat you wanted to create a giant, public company, and act surprised\nwhen someone made you an offer.  Really, you want to buy us? Well,\nI suppose we'd consider it, for the right price.I think things are changing.  If 98% of the time success means\ngetting bought, why not be open about it?  If 98% of the time you're\ndoing product development on spec for some big company, why not\nthink of that as your task?  One advantage of this approach is that\nit gives you another source of ideas: look at big companies, think\nwhat they should\nbe doing, and do it yourself.  Even if\nthey already know it, you'll probably be done faster.Just be sure to make something multiple acquirers will want.  Don't\nfix Windows, because the only potential acquirer is Microsoft, and\nwhen there's only one acquirer, they don't have to hurry.  They can\ntake their time and copy you instead of buying you.  If you want\nto get market price, work on something where there's competition.If an increasing number of startups are created to do product\ndevelopment on spec, it will be a natural counterweight to monopolies.\nOnce some type of technology is captured by a monopoly, it will\nonly evolve at big company rates instead of startup rates, whereas\nalternatives will evolve with especial speed.  A free market\ninterprets monopoly as damage and routes around it.The Woz RouteThe most productive way to generate startup ideas is also the\nmost unlikely-sounding: by accident.  If you look at how famous\nstartups got started, a lot of them weren't initially supposed to\nbe startups.  Lotus began with a program Mitch Kapor wrote for a\nfriend. Apple got started because Steve Wozniak wanted to build\nmicrocomputers, and his employer, Hewlett-Packard, wouldn't let him\ndo it at work.  Yahoo began as David Filo's personal collection of\nlinks.This is not the only way to start startups.  You can sit down and\nconsciously come up with an idea for a company; we did.  But measured\nin total market cap, the build-stuff-for-yourself model might be\nmore fruitful.  It certainly has to be the most fun way to come up\nwith startup ideas.  And since a startup ought to have multiple\nfounders who were already friends before they decided to start a\ncompany, the rather surprising conclusion is that the best way to\ngenerate startup ideas is to do what hackers do for fun: cook up\namusing hacks with your friends.It seems like it violates some kind of conservation law, but there\nit is: the best way to get a \"million dollar idea\" is just to do\nwhat hackers enjoy doing anyway.Notes[1]\nThis phenomenon may account for a number of discrepancies\ncurrently blamed on various forbidden isms.  Never attribute to\nmalice what can be explained by math.[2]\nA lot of classic abstract expressionism is doodling of this type:\nartists trained to paint from life using the same gestures but\nwithout using them to represent anything.  This explains why such\npaintings are (slightly) more interesting than random marks would be.[3]\nBill Yerazunis had solved the problem, but he got there by\nanother path.  He made a general-purpose file classifier so good\nthat it also worked for spam."},{"title":"If Lisp is So Great","text":"May 2003If Lisp is so great, why don't more people use it?  I was\nasked this question by a student in the audience at a\ntalk I gave recently.  Not for the first time, either.In languages, as in so many things, there's not much\ncorrelation between popularity and quality.  Why does\nJohn Grisham (King of Torts sales rank, 44) outsell\nJane Austen (Pride and Prejudice sales rank, 6191)?\nWould even Grisham claim that it's because he's a better\nwriter?Here's the first sentence of Pride and Prejudice:\nIt is a truth universally acknowledged, that a single man\nin possession of a good fortune must be in want of a\nwife.\n\"It is a truth universally acknowledged?\"  Long words for\nthe first sentence of a love story.Like Jane Austen, Lisp looks hard.  Its syntax, or lack\nof syntax, makes it look completely unlike\nthe languages\nmost people are used to.  Before I learned Lisp, I was afraid\nof it too.  I recently came across a notebook from 1983\nin which I'd written:\nI suppose I should learn Lisp, but it seems so foreign.\nFortunately, I was 19 at the time and not too resistant to learning\nnew things.  I was so ignorant that learning\nalmost anything meant learning new things.People frightened by Lisp make up other reasons for not\nusing it.  The standard\nexcuse, back when C was the default language, was that Lisp\nwas too slow.  Now that Lisp dialects are among\nthe faster\nlanguages available, that excuse has gone away.\nNow the standard excuse is openly circular: that other languages\nare more popular.(Beware of such reasoning.  It gets you Windows.)Popularity is always self-perpetuating, but it's especially\nso in programming languages. More libraries\nget written for popular languages, which makes them still\nmore popular.  Programs often have to work with existing programs,\nand this is easier if they're written in the same language,\nso languages spread from program to program like a virus.\nAnd managers prefer popular languages, because they give them\nmore leverage over developers, who can more easily be replaced.Indeed, if programming languages were all more or less equivalent,\nthere would be little justification for using any but the most\npopular.  But they aren't all equivalent, not by a long\nshot.  And that's why less popular languages, like Jane Austen's\nnovels, continue to survive at all.  When everyone else is reading\nthe latest John Grisham novel, there will always be a few people\nreading Jane Austen instead."},{"title":"Inequality and Risk","text":"August 2005(This essay is derived from a talk at Defcon 2005.)Suppose you wanted to get rid of economic inequality.  There are\ntwo ways to do it: give money to the poor, or take it away from the\nrich.  But they amount to the same thing, because if you want to\ngive money to the poor, you have to get it from somewhere.  You\ncan't get it from the poor, or they just end up where they started.\nYou have to get it from the rich.There is of course a way to make the poor richer without simply\nshifting money from the rich.  You could help the poor become more\nproductive-- for example, by improving access to education.  Instead\nof taking money from engineers and giving it to checkout clerks,\nyou could enable people who would have become checkout clerks to\nbecome engineers.This is an excellent strategy for making the poor richer.  But the\nevidence of the last 200 years shows that it doesn't reduce economic\ninequality, because it makes the rich richer too.  If there\nare more engineers, then there are more opportunities to hire them\nand to sell them things.  Henry Ford couldn't have made a fortune\nbuilding cars in a society in which most people were still subsistence\nfarmers; he would have had neither workers nor customers.If you want to reduce economic inequality instead of just improving\nthe overall standard of living, it's not enough just to raise up\nthe poor.  What if one of your newly minted engineers gets ambitious\nand goes on to become another Bill Gates?  Economic inequality will\nbe as bad as ever.  If you actually want to compress the gap between\nrich and poor, you have to push down on the top as well as pushing\nup on the bottom.How do you push down on the top?  You could try to decrease the\nproductivity of the people who make the most money: make the best\nsurgeons operate with their left hands, force popular actors to\novereat, and so on.  But this approach is hard to implement.  The\nonly practical solution is to let people do the best work they can,\nand then (either by taxation or by limiting what they can charge)\nto confiscate whatever you deem to be surplus.So let's be clear what reducing economic inequality means.  It is\nidentical with taking money from the rich.When you transform a mathematical expression into another form, you\noften notice new things.  So it is in this case.  Taking money from\nthe rich turns out to have consequences one might not foresee when\none phrases the same idea in terms of \"reducing inequality.\"The problem is, risk and reward have to be proportionate.  A bet\nwith only a 10% chance of winning has to pay more than one with a\n50% chance of winning, or no one will take it.  So if you lop off\nthe top of the possible rewards, you thereby decrease people's\nwillingness to take risks.Transposing into our original expression, we get: decreasing economic\ninequality means decreasing the risk people are willing to take.There are whole classes of risks that are no longer worth taking\nif the maximum return is decreased.  One reason high tax rates are\ndisastrous is that this class of risks includes starting new\ncompanies.InvestorsStartups are intrinsically risky.  A startup\nis like a small boat\nin the open sea.  One big wave and you're sunk.  A competing product,\na downturn in the economy, a delay in getting funding or regulatory\napproval, a patent suit, changing technical standards, the departure\nof a key employee, the loss of a big account---any one of these can\ndestroy you overnight.  It seems only about 1 in 10 startups succeeds.\n[1]Our startup paid its first round of outside investors 36x.  Which\nmeant, with current US tax rates, that it made sense to invest in\nus if we had better than a 1 in 24 chance of succeeding.  That\nsounds about right.  That's probably roughly how we looked when we\nwere a couple of nerds with no business experience operating out\nof an apartment.If that kind of risk doesn't pay, venture investing, as we know it,\ndoesn't happen.That might be ok if there were other sources of capital for new\ncompanies.  Why not just have the government, or some large\nalmost-government organization like Fannie Mae, do the venture\ninvesting instead of private funds?I'll tell you why that wouldn't work. Because then you're asking\ngovernment or almost-government employees to do the one thing they\nare least able to do: take risks.As anyone who has worked for the government knows, the important\nthing is not to make the right choices, but to make choices that\ncan be justified later if they fail.  If there is a safe option,\nthat's the one a bureaucrat will choose.   But that is exactly the\nwrong way to do venture investing.  The nature of the business means\nthat you want to make terribly risky choices, if the upside looks\ngood enough.VCs are currently\npaid in a way that makes them\nfocus on the upside:\nthey get a percentage of the fund's gains.  And that helps overcome\ntheir understandable fear of investing in a company run by nerds\nwho look like (and perhaps are) college students.If VCs weren't allowed to get rich, they'd behave like bureaucrats.\nWithout hope of gain, they'd have only fear of loss.  And so they'd\nmake the wrong choices.  They'd turn down the nerds in favor of the\nsmooth-talking MBA in a suit, because that investment would be\neasier to justify later if it failed.FoundersBut even if you could somehow redesign venture funding to work\nwithout allowing VCs to become rich, there's another kind of investor\nyou simply cannot replace: the startups' founders and early employees.What they invest is their time and ideas.  But these are equivalent\nto money; the proof is that investors are willing (if forced) to\ntreat them as interchangeable, granting the same status to \"sweat\nequity\" and the equity they've purchased with cash.The fact that you're investing time doesn't change the relationship\nbetween risk and reward.  If you're going to invest your time in\nsomething with a small chance of succeeding, you'll only do it if\nthere is a proportionately large payoff.\n[2]\nIf large payoffs aren't allowed, you may as well play it safe.Like many startup founders, I did it to get rich.  But not because\nI wanted to buy expensive things.  What I wanted was security.  I\nwanted to make enough money that I didn't have to worry about money.\nIf I'd been forbidden to make enough from a startup to do this, I\nwould have sought security by some other means: for example, by\ngoing to work for a big, stable organization from which it would\nbe hard to get fired.  Instead of busting my ass in a startup, I\nwould have tried to get a nice, low-stress job at a big research\nlab, or tenure at a university.That's what everyone does in societies where risk isn't rewarded.\nIf you can't ensure your own security, the next best thing is to\nmake a nest for yourself in some large organization where your\nstatus depends mostly on seniority.\n[3]Even if we could somehow replace investors, I don't see how we could\nreplace founders.  Investors mainly contribute money, which in\nprinciple is the same no matter what the source.  But the founders\ncontribute ideas.  You can't replace those.Let's rehearse the chain of argument so far.  I'm heading for a\nconclusion to which many readers will have to be dragged kicking\nand screaming, so I've tried to make each link unbreakable.  Decreasing\neconomic inequality means taking money from the rich.  Since risk\nand reward are equivalent, decreasing potential rewards automatically\ndecreases people's appetite for risk.  Startups are intrinsically\nrisky.  Without the prospect of rewards proportionate to the risk,\nfounders will not invest their time in a startup.  Founders are\nirreplaceable.  So eliminating economic inequality means eliminating\nstartups.Economic inequality is not just a consequence of startups.\nIt's the engine that drives them, in the same way a fall of water\ndrives a water mill.  People start startups in the hope of becoming\nmuch richer than they were before.  And if your society tries to\nprevent anyone from being much richer than anyone else, it will\nalso prevent one person from being much richer at t2 than t1.GrowthThis argument applies proportionately.  It's not just that if you\neliminate economic inequality, you get no startups.  To the extent\nyou reduce economic inequality, you decrease the number of startups.\n[4]\nIncrease taxes, and willingness to take risks decreases in\nproportion.And that seems bad for everyone.  New technology and new jobs both\ncome disproportionately from new companies.  Indeed, if you don't\nhave startups, pretty soon you won't have established companies\neither, just as, if you stop having kids, pretty soon you won't\nhave any adults.It sounds benevolent to say we ought to reduce economic inequality.\nWhen you phrase it that way, who can argue with you?  Inequality\nhas to be bad, right?  It sounds a good deal less benevolent to say\nwe ought to reduce the rate at which new companies are founded.\nAnd yet the one implies the other.Indeed, it may be that reducing investors' appetite for risk doesn't\nmerely kill off larval startups, but kills off the most promising\nones especially.  Startups yield faster growth at greater risk than\nestablished companies.  Does this trend also hold among startups?\nThat is, are the riskiest startups the ones that generate most\ngrowth if they succeed?  I suspect the answer is yes.  And that's\na chilling thought, because it means that if you cut investors'\nappetite for risk, the most beneficial startups are the first to\ngo.Not all rich people got that way from startups, of course.  What\nif we let people get rich by starting startups, but taxed away all\nother surplus wealth?  Wouldn't that at least decrease inequality?Less than you might think.  If you made it so that people could\nonly get rich by starting startups, people who wanted to get rich\nwould all start startups.  And that might be a great thing.  But I\ndon't think it would have much effect on the distribution of wealth.\nPeople who want to get rich will do whatever they have to.  If\nstartups are the only way to do it, you'll just get far more people\nstarting startups.  (If you write the laws very carefully, that is.\nMore likely, you'll just get a lot of people doing things that can\nbe made to look on paper like startups.)If we're determined to eliminate economic inequality, there is still\none way out: we could say that we're willing to go ahead and do\nwithout startups.  What would happen if we did?At a minimum, we'd have to accept lower rates of technological\ngrowth.  If you believe that large, established companies could\nsomehow be made to develop new technology as fast as startups, the\nball is in your court to explain how.  (If you can come up with a\nremotely plausible story, you can make a fortune writing business\nbooks and consulting for large companies.)\n[5]Ok, so we get slower growth.  Is that so bad?  Well, one reason\nit's bad in practice is that other countries might not agree to\nslow down with us.  If you're content to develop new technologies\nat a slower rate than the rest of the world, what happens is that\nyou don't invent anything at all.  Anything you might discover has\nalready been invented elsewhere.  And the only thing you can offer\nin return is raw materials and cheap labor.  Once you sink that\nlow, other countries can do whatever they like with you: install\npuppet governments, siphon off your best workers, use your women\nas prostitutes, dump their toxic waste on your territory-- all the\nthings we do to poor countries now.  The only defense is to isolate\nyourself, as communist countries did in the twentieth century.  But\nthe problem then is, you have to become a police state to enforce\nit.\nWealth and PowerI realize startups are not the main target of those who want to\neliminate economic inequality.   What they really dislike is the\nsort of wealth that becomes self-perpetuating through an alliance\nwith power. For example, construction firms that fund politicians'\ncampaigns in return for government contracts, or rich parents who\nget their children into good colleges by sending them to expensive\nschools designed for that purpose.  But if you try to attack this type of wealth\nthrough economic policy, it's hard to hit without destroying\nstartups as collateral damage.The problem here is not wealth, but corruption.  So why not go after\ncorruption?We don't need to prevent people from being rich if we can prevent\nwealth from translating into power.  And there has been progress\non that front.  Before he died of drink in 1925, Commodore Vanderbilt's\nwastrel grandson Reggie ran down pedestrians on five separate\noccasions, killing two of them.  By 1969, when Ted Kennedy drove\noff the bridge at Chappaquiddick, the limit seemed to be down to\none.  Today it may well be zero.  But what's changed is not variation\nin wealth.  What's changed is the ability to translate wealth into\npower.How do you break the connection between wealth and power?  Demand\ntransparency.  Watch closely how power is exercised, and demand an\naccount of how decisions are made.  Why aren't all police interrogations\nvideotaped?  Why did 36% of Princeton's class of 2007 come from\nprep schools, when only 1.7% of American kids attend them?  Why did\nthe US really invade Iraq?  Why don't government officials disclose\nmore about their finances, and why only during their term of office?A friend of mine who knows a lot about computer security says the\nsingle most important step is to log everything.  Back when he was\na kid trying to break into computers, what worried him most was the\nidea of leaving a trail.  He was more inconvenienced by the need\nto avoid that than by any obstacle deliberately put in his path.Like all illicit connections, the connection between wealth and\npower flourishes in secret.  Expose all transactions, and you will\ngreatly reduce it.  Log everything.  That's a strategy that already\nseems to be working, and it doesn't have the side effect of making\nyour whole country poor.I don't think many people realize there is a connection between\neconomic inequality and risk.  I didn't fully grasp it till recently.\nI'd known for years of course that if one didn't score in a startup,\nthe other alternative was to get a cozy, tenured research job.  But\nI didn't understand the equation governing my behavior.  Likewise,\nit's obvious empirically that a country that doesn't let people get\nrich is headed for disaster, whether it's Diocletian's Rome or\nHarold Wilson's Britain.  But I did not till recently understand\nthe role risk played.If you try to attack wealth, you end up nailing risk as well, and\nwith it growth.  If we want a fairer world, I think we're better\noff attacking one step downstream, where wealth turns into power.Notes[1]\nSuccess here is defined from the initial investors' point of\nview: either an IPO, or an acquisition for more than the valuation\nat the last round of funding.  The conventional 1 in 10 success rate\nis suspiciously neat, but conversations with VCs suggest it's roughly\ncorrect for startups overall.  Top VC firms expect to do better.[2]\nI'm not claiming founders sit down and calculate the expected\nafter-tax return from a startup.  They're motivated by examples of\nother people who did it.  And those examples do reflect after-tax returns.[3]\nConjecture: The variation in wealth in a (non-corrupt)\ncountry or organization\nwill be inversely proportional to the prevalence of systems of\nseniority.  So if you suppress variation in wealth, seniority will\nbecome correspondingly more important.  So far, I know of no\ncounterexamples, though in very corrupt countries you may get\nboth simultaneously.  (Thanks to Daniel Sobral for pointing\nthis out.)[4]\nIn a country with a truly feudal economy, you might be able to\nredistribute wealth successfully, because there are no startups to\nkill.[5]\nThe speed at which startups develop new techology is the other\nreason they pay so well.  As I explained in \"How to Make Wealth\"\n(in Hackers\n& Painters), what you do in a startup is compress a\nlifetime's worth of work into a few years.  It seems as\ndumb to discourage that as to discourage risk-taking.Thanks to Chris Anderson, Trevor Blackwell, Dan Giffin,\nJessica Livingston, and Evan Williams for reading drafts of this\nessay, and to Langley Steinert, Sangam Pant, and Mike Moritz for\ninformation about venture investing."},{"title":"Interview About Web 2.0","text":"July 2006(Ian Delaney wanted to interview me for his new\nbook.  I agreed if I could\npost the answers online.)1. What have we learned from the dotcom bubble? (Or, what should\nwe have learned?)One thing people learned from the Bubble is to judge\nstartups more critically.  Some really bad ideas got funded\nthen.  And the investors weren't the only ones who got burned.\nThe people who went to work for those companies did too.  Now\neveryone is more cautious.This is not to say we should only consider companies with\ndetailed plans for making money.  That's being too cautious.  If\nyou create a web-based startup that becomes massively popular, you\ncan probably figure out a way to make money from it.  Just about\nevery massively popular site has.The idea of building something popular then figuring out how to\nmake money from it was born in the Bubble.  It sounds\nirresponsible, but it works.  Requiring founders to have a carefully\nworked out plan for making money is not hard-headed business sense.\nIt's what hackers call \"premature optimization.\"  The really important\nthing is to make something people want.Most startups that failed during the Bubble failed because no one\nwanted what they built.  There may also have been a few that were\nbuilding something good, but failed because they burned through\ntheir funding too fast.  So that's rule number two: don't spend\nmoney.If you can make something people want and not spend money, you're\n90% of the way there.I don't mean to imply the business part is trivial.  It's\njust easy compared to making something people want, because that's\nso hard.2. What has led to the current flurry of Internet startups?I think the present startup boom has a couple causes.  One is simply\nthat the bust wore off.  The Internet represents a big\nchange, comparable to the arrival of steam engines.  It's natural\nfor people to be excited about it, now that the post-Bubble depression\nhas worn off.Another factor is Google.  Google got people interested in the Web\nagain, and not just because of their IPO.  They've collected a lot\nof smart people there, and they radiate excitement to everyone else.Startups will be ever more common because they're now so cheap to\nstart.  In most of the startups we fund, the biggest expense in the\nfirst year is simply food and rent.  It costs little more to start\na startup than to hang around doing nothing.  And instead of having\nto go work in a cubicle in some office park, you get to work with\nyour friends on your own project.  If you succeed, you get rich.\nAltogether it's a pretty attractive prospect to someone in their\ntwenties.3. Do you think \"Web 2.0\" is a real thing or a convenient label for\nsome heterogeneous phenomena?\"Web 2.0\" is a weird phrase.  It began as the name of a conference,\nbut the people organizing the conference didn't really know what\nthey meant by it.  Mostly they thought it sounded catchy.  However,\n\"Web 2.0\" has since taken on a meaning.  There are some interesting\nnew trends on the Web, and it's the nature of a phrase like that\nto adhere to them.It's kind of like they printed the name on a sticky label, threw\nit on the floor, and it stuck on the heel of a guy passing by.  The\nname is a little fake, but the guy is real.4. Opinions I have garnered range from \"the Internet has been given\nback to the people\" to \"there is absolutely nothing here that is\nnew.\"  Where do you stand?I think there are genuinely new things happening on the Internet.\nIt would be strange if there weren't.  There are new things happening\nin every area of technology.  A lot of smart people are working on\nInternet stuff now, so of course they're coming up with new ideas.A lot is different now from 1998.  Web sites look different.  Startups\noperate differently.  People use the Web in different ways.  The\nchanges were gradual, but if you have a gradual change of sufficient\nmagnitude, it starts to become a different world.5. What do you look for in a web startup that will persuade you to\ninvest in them?We look for two things in startup founders: brains and commitment.\nOne thing we've learned in this past year is that commitment matters\nmore than we thought, and brains less.  The founders can't be\nstupid, but as long as they're over a certain threshold, the most\nimportant thing is commitment.A sense of design is also a big advantage.  Big companies treat\ndesign almost as if you could paint it on after the fact.\nEven Google has this problem; their biggest weakness is that\ntheir definition of a hacker doesn't include a big enough\ndesign component.  A hacker with design sense is really dangerous,\nespecially as a startup founder.We don't care too much about the initial idea, except as evidence\nof brains and commitment.  The idea will change.  What matters most\nis that the founders really want to do a startup.The good news is, a group of founders who are reasonably bright and\nsuper committed have a significant chance of succeeding.  It's so\ncheap to start a startup that you have time now to succeed through\nsheer will.  You don't have to get it right the first time.  You\ncan go through several iterations.6. Spending on Internet advertising is anticipated to increase\ndramatically.  Will the \"long tail\" profit from this?To make money from advertising you either\nhave to have your own plan for selling ads, or use\nsomething like AdSense.  Unfortunately, AdSense's current keyword-based\nmodel doesn't fit with all startups.  But that kind of revenue might\nhelp a little, in the earliest phase.  It might not be enough to\nmake a startup profitable, but it could be enough to stretch out\ntheir initial funding, and thus buy more time.7. There's a lot of hype surrounding current trends.  Are these\nbubble conditions?No, I don't think this is a bubble.  The companies the VCs are\ninvesting in now are nowhere near as laughable as the ones they\nwere funding in 1999.  A lot of those seemed like deliberate parodies.Certainly there is a lot of hype.  For example, there are a lot of\nsites using cheesy \"Web 2.0\" design elements to seem cool.  All\nthose fades and \"Betas\" and giant fonts are going to look very dated\nin a few years.  But cheesy design doesn't make a bubble.  The\nmeasure of a bubble is investment, and that's still under control.8. What ideas/values/approaches do you think will be permanent\nchanges from Web 2.0 to whatever Web 3.0 brings?I doubt there will be such a thing\nas Web 3.0.  I think so many people will use the phrase\n\"Web 3.0\" for their pet theory about the future of the Web that it\nwill lose all credibility, and by the time there's a change big\nenough to warrant a name like that, no one will want to use it.\n\"Web 2.0\" is already close to the edge of credibility.  Few people\nI know can bring themselves to use it seriously.  \"Web 3.0\" is\nprobably already dead.But as for the underlying question, yes, there are definitely trends\nI think will be permanent.  One is the increasing focus on\nusers.  There are a couple promising variants.  The most obvious\nare the social networking sites, which are entirely about the users.\nBut there are also subtler variants-- news sites where the top\nstories are determined by voting, like Digg and Reddit, and sites\nwhere people post their own stuff, like Blogger and now YouTube.\nThis \"stuff\" is presently called \"user-generated content\" but if\nit becomes the default it will probably get a shorter name.Another trend that's here to stay is web-based software.  This\nbegan in the nineties, but you can do so much more now that everyone\ncan see it's the future-- even Microsoft.  I think in twenty\nyears most of the software people use will be running on servers.There's also a social trend that will last: the startup world will increasingly\nbe ruled by technical people rather than business people.  As in\nso many other areas, Google is the pattern for the future.  The\nhackers dominate Google, and that's why Google wins.A lot of the most characteristically lame startups of the Bubble\nwere that way because they were started by business guys, who then\nwent looking for hackers to implement their ideas.  That model may\nhave worked in 1960, but it didn't work so well in 1998, and it\ngets more obsolete every year.  I think the future belongs to the\nhackers.  Technology is an ever larger component of business, so\nof course power is shifting to the people who are experts in that,\nrather than management or finance."},{"title":"Interview by a 15 Year Old","text":"(A high school freshman writing a book sent me some interview\nquestions. Here are my answers.)What are your thoughts on young kids learning to code?I think all kids should learn how to program at some point.  I'm\nnot sure what's the right age.  And of course before they write\nprograms they can do various forms of proto-programming, like\ncombining functional blocks.  There's almost no lower age limit for\nthat if you make it simple enough.What do you feel should be taught in regards to kids learning how\nto code?It's pretty obvious what will be most engaging for most kids:\nprograms that manipulate something you can see.  The set of things\nyou can manipulate grows with time.  When Seymour Papert started\nworking on Logo, all you could do was draw simple pictures, and\neven that took expensive hardware.  Now you can manipulate 3D models,\nor control a robot.  In the future it will be possible to do\neven more interesting things.What do you feel the best way to teach kids how to learn is?I have deep but narrow experience in this: I've spent a lot of time\nteaching my two small sons various things.  Based on my experiences,\nthe best way to teach kids is to show them the hidden interestingness\nin the things you want them to learn. For example, if you just drill\nkids on arithmetic it will seem pretty boring.  But if you teach\nthem arithmetic as a series of secret tricks—for example, that\nyou can add 6 million and 3 million by adding 6 and 3 and then\nsticking the million back on at the end—it becomes like a game.This idea is not limited to math.  You can teach anything as secret\ntricks: the tricks car designers use to make cars look fast, the\ntricks for telling what someone is feeling from their facial\nexpression, the secret underlying causes of historical events, and\nso on.Why do you think so many people are hesitant to learn to code, when\nit is such an incredible opportunity?I think it's the same thing that makes people afraid of math.  Formal\nreasoning is hard for a lot of people.   It is uncomfortably\nconstraining.Plus the way they're taught this sort of thing compounds their\ndislike for it.  Hard ideas are sort of like healthy food.  If you\ncook healthy ingredients cleverly, they can be delicious.  But if\nyou're a clumsy cook and also believe that healthy food has to taste\nbad to be good for you, then you're going to produce some pretty\nawful meals.Do you feel logic is an important part of a curriculum that should\nbe implemented in middle schools?It's amazing you asked that, because that is exactly what I'd been\nthinking.  Conversations I've seen online have shown me what\nsurprisingly large gaps many adults have in their understanding of\nlogic. So many can't distinguish between necessary and sufficient\nconditions, for example. Society assumes people will just pick this\nstuff up along the way, but clearly they don't. So it seemed to me\nschools ought to teach it.  At least tell everyone the names of the\nmost common fallacies, so that when people committed them they could\npoint their fingers and say \"begging the question.\"  Middle school\nseems the right time.  This stuff is not as hard as the algebra a\nlot of kids get taught at that age.What makes a good entrepereneur?  Are these the type of people you\naccept into the program?An entrepreneur is someone who starts their own business. But only\na tiny fraction of new businesses are startups.  I don't know much\nabout entrepreneurship generally, but I know about startup founders.\nTo be a good startup founder you must above all be determined. But\nflexible as well.  Startups do not as a rule plow through obstacles.\nThey have to go around them.  Sometimes to the extent of redefining\nthe playing field so that the obstacle is no longer in the way. The\nshort version of what a startup founder needs to be is \"relentlessly\nresourceful.\"I'm not involved with selecting startups for Y Combinator anymore,\nbut that is certainly what they are trying to find.How can anyone learn to be entrepreneurial?The best way is by doing it. Nothing will teach you about startups\nlike starting one.  The next best thing would be to observe an\nexisting startup in action.Should all young people be entrepreneurs, and why?I'm going to continue to assume that by entrepreneurs you mean\nstartup founders, and the answer to that is an emphatic no. Most\npeople are not suited to it. I'd be surprised if more than 1% of\npeople are.  And even for those few, it's a mistake to start too\nyoung.  If a startup succeeds, it takes over your life in a way\nthat cuts off lots of other opportunities.  It's a mistake to do\nthat sort of pruning before you understand what you're losing by\nit.I wouldn't advise people to try to start startups before about 23.\nBefore that you should be exploring.Is there anything else that isn�t taught to young students that you\nwish would be incorporated into the material, or any other thoughts\non education?I'm sure there are lots of things kids should be taught that they\naren't.  The combination of forces that produced the default\ncurriculum was so random, and the people teaching it are often so\nbad.  So if there's one thing I'd tell kids, it's that they shouldn't\nassume that the things they're being taught are the most important\nthings they could be learning.  Intellectually ambitious kids have\nto take charge of their own education.  Which doesn't mean ignoring\nthe things they're taught in school so much as supplementing them\nwith what they're not getting.In a way it's unfortunate that kids have to do this—that schools\naren't good enough that kids can just assume they're getting a\n\"balanced diet.\" On the other hand, this is what all intellectually\nambitious adults have to do.  Maybe there are advantages to having\nto start early, at least for those who realize they have to."},{"title":"Investor Herd Dynamics","text":"August 2013The biggest component in most investors' opinion of you is the\nopinion of other investors.  Which is of course a recipe for\nexponential growth.  When one investor wants to invest in you, that\nmakes other investors want to, which makes others want to, and so\non.Sometimes inexperienced founders mistakenly conclude that manipulating\nthese forces is the essence of fundraising.  They hear stories about\nstampedes to invest in successful startups, and think it's therefore\nthe mark of a successful startup to have this happen.  But actually\nthe two are not that highly correlated.  Lots of startups that cause\nstampedes end up flaming out (in extreme cases, partly as a result\nof the stampede), and lots of very successful startups were only\nmoderately popular with investors the first time they raised money.So the point of this essay is not to explain how to create a stampede,\nbut merely to explain the forces that generate them.  These forces\nare always at work to some degree in fundraising, and they can cause\nsurprising situations.  If you understand them, you can at least\navoid being surprised.One reason investors like you more when other investors like you\nis that you actually become a better investment.  Raising money\ndecreases the risk of failure.  Indeed, although investors hate it,\nyou are for this reason justified in raising your valuation for\nlater investors.  The investors who invested when you had no money\nwere taking more risk, and are entitled to higher returns.  Plus a\ncompany that has raised money is literally more valuable.  After\nyou raise the first million dollars, the company is at least a\nmillion dollars more valuable, because it's the same company as\nbefore, plus it has a million dollars in the bank.\n[1]Beware, though, because later investors so hate to have the price\nraised on them that they resist even this self-evident reasoning.\nOnly raise the price on an investor you're comfortable with losing,\nbecause some will angrily refuse.\n[2]The second reason investors like you more when you've had some\nsuccess at fundraising is that it makes you more confident, and an\ninvestors' opinion of you is the foundation\nof their opinion of your company.  Founders are often surprised how\nquickly investors seem to know when they start to succeed at raising\nmoney.  And while there are in fact lots of ways for such information\nto spread among investors, the main vector is probably the founders\nthemselves.  Though they're often clueless about technology, most\ninvestors are pretty good at reading people.  When fundraising is\ngoing well, investors are quick to sense it in your increased\nconfidence.  (This is one case where the average founder's inability\nto remain poker-faced works to your advantage.)But frankly the most important reason investors like you more when\nyou've started to raise money is that they're bad at judging startups.\nJudging startups is hard even for the best investors.  The mediocre\nones might as well be flipping coins.  So when mediocre investors\nsee that lots of other people want to invest in you, they assume\nthere must be a reason.  This leads to the phenomenon known in the\nValley as the \"hot deal,\" where you have more interest from investors\nthan you can handle.The best investors aren't influenced much by the opinion of other\ninvestors.  It would only dilute their own judgment to average it\ntogether with other people's.  But they are indirectly influenced\nin the practical sense that interest from other investors imposes\na deadline.  This is the fourth way in which offers beget offers.\nIf you start to get far along the track toward an offer with one\nfirm, it will sometimes provoke other firms, even good ones, to\nmake up their minds, lest they lose the deal.Unless you're a wizard at negotiation (and if you're not sure,\nyou're not) be very careful about exaggerating this to push a good\ninvestor to decide.  Founders try this sort of thing all the time,\nand investors are very sensitive to it.  If anything oversensitive.\nBut you're safe so long as you're telling the truth.  If you're\ngetting far along with investor B, but you'd rather raise money\nfrom investor A, you can tell investor A that this is happening.\nThere's no manipulation in that.  You're genuinely in a bind, because\nyou really would rather raise money from A, but you can't safely\nreject an offer from B when it's still uncertain what A will decide.Do not, however, tell A who B is.  VCs will sometimes ask which\nother VCs you're talking to, but you should never tell them.  Angels\nyou can sometimes tell about other angels, because angels cooperate\nmore with one another. But if VCs ask, just point out that they\nwouldn't want you telling other firms about your conversations, and\nyou feel obliged to do the same for any firm you talk to.  If they\npush you, point out that you're inexperienced at fundraising—which\nis always a safe card to play—and you feel you have to be\nextra cautious.\n[3]While few startups will experience a stampede of interest, almost\nall will at least initially experience the other side of this\nphenomenon, where the herd remains clumped together at a distance.\nThe fact that investors are so much influenced by other investors'\nopinions means you always start out in something of a hole.  So\ndon't be demoralized by how hard it is to get the first commitment,\nbecause much of the difficulty comes from this external force.  The\nsecond will be easier.Notes[1]\nAn accountant might say that a company that has raised a million\ndollars is no richer if it's convertible debt, but in practice money\nraised as convertible debt is little different from money raised\nin an equity round.[2]\nFounders are often surprised by this, but investors can get\nvery emotional.  Or rather indignant; that's the main emotion I've\nobserved; but it is very common, to the point where it sometimes\ncauses investors to act against their own interests.  I know of one\ninvestor who invested in a startup at a $15 million valuation cap.\nEarlier he'd had an opportunity to invest at a $5 million cap, but\nhe refused because a friend who invested earlier had been able to\ninvest at a $3 million cap.[3]\nIf an investor pushes you hard to tell them about your conversations\nwith other investors, is this someone you want as an investor?Thanks to Paul Buchheit, Jessica Livingston, Geoff Ralston, and Garry Tan\nfor reading drafts of this."},{"title":"Is It Worth Being Wise?","text":"February 2007A few days ago I finally figured out something I've wondered about\nfor 25 years: the relationship between wisdom and intelligence.\nAnyone can see they're not the same by the number of people who are\nsmart, but not very wise.  And yet intelligence and wisdom do seem\nrelated.  How?What is wisdom?  I'd say it's knowing what to do in a lot of\nsituations.  I'm not trying to make a deep point here about the\ntrue nature of wisdom, just to figure out how we use the word.  A\nwise person is someone who usually knows the right thing to do.And yet isn't being smart also knowing what to do in certain\nsituations?  For example, knowing what to do when the teacher tells\nyour elementary school class to add all the numbers from 1 to 100?\n[1]Some say wisdom and intelligence apply to different types of\nproblems—wisdom to human problems and intelligence to abstract\nones.  But that isn't true.  Some wisdom has nothing to do with\npeople: for example, the wisdom of the engineer who knows certain\nstructures are less prone to failure than others.  And certainly\nsmart people can find clever solutions to human problems as well\nas abstract ones.\n[2]Another popular explanation is that wisdom comes from experience\nwhile intelligence is innate.  But people are not simply wise in\nproportion to how much experience they have.  Other things must\ncontribute to wisdom besides experience, and some may be innate: a\nreflective disposition, for example.Neither of the conventional explanations of the difference between\nwisdom and intelligence stands up to scrutiny.  So what is the\ndifference?  If we look at how people use the words \"wise\" and\n\"smart,\" what they seem to mean is different shapes of performance.Curve\"Wise\" and \"smart\" are both ways of saying someone knows what to\ndo.  The difference is that \"wise\" means one has a high average\noutcome across all situations, and \"smart\" means one does spectacularly\nwell in a few.  That is, if you had a graph in which the x axis\nrepresented situations and the y axis the outcome, the graph of the\nwise person would be high overall, and the graph of the smart person\nwould have high peaks.The distinction is similar to the rule that one should judge talent\nat its best and character at its worst.  Except you judge intelligence\nat its best, and wisdom by its average.  That's how the two are\nrelated: they're the two different senses in which the same curve\ncan be high.So a wise person knows what to do in most situations, while a smart\nperson knows what to do in situations where few others could.  We\nneed to add one more qualification: we should ignore cases where\nsomeone knows what to do because they have inside information.\n[3]\nBut aside from that, I don't think we can get much more specific\nwithout starting to be mistaken.Nor do we need to.  Simple as it is, this explanation predicts, or\nat least accords with, both of the conventional stories about the\ndistinction between wisdom and intelligence.  Human problems are\nthe most common type, so being good at solving those is key in\nachieving a high average outcome.   And it seems natural that a\nhigh average outcome depends mostly on experience, but that dramatic\npeaks can only be achieved by people with certain rare, innate\nqualities; nearly anyone can learn to be a good swimmer, but to be\nan Olympic swimmer you need a certain body type.This explanation also suggests why wisdom is such an elusive concept:\nthere's no such thing.  \"Wise\" means something—that one is\non average good at making the right choice.  But giving the name\n\"wisdom\" to the supposed quality that enables one to do that doesn't\nmean such a thing exists.  To the extent \"wisdom\" means anything,\nit refers to a grab-bag of qualities as various as self-discipline,\nexperience, and empathy.\n[4]Likewise, though \"intelligent\" means something, we're asking for\ntrouble if we insist on looking for a single thing called \"intelligence.\"\nAnd whatever its components, they're not all innate.  We use the\nword \"intelligent\" as an indication of ability: a smart person can\ngrasp things few others could.  It does seem likely there's some\ninborn predisposition to intelligence (and wisdom too), but this\npredisposition is not itself intelligence.One reason we tend to think of intelligence as inborn is that people\ntrying to measure it have concentrated on the aspects of it that\nare most measurable.  A quality that's inborn will obviously be\nmore convenient to work with than one that's influenced by experience,\nand thus might vary in the course of a study.  The problem comes\nwhen we drag the word \"intelligence\" over onto what they're measuring.\nIf they're measuring something inborn, they can't be measuring\nintelligence.  Three year olds aren't smart.   When we describe one\nas smart, it's shorthand for \"smarter than other three year olds.\"SplitPerhaps it's a technicality to point out that a predisposition to\nintelligence is not the same as intelligence.  But it's an important\ntechnicality, because it reminds us that we can become smarter,\njust as we can become wiser.The alarming thing is that we may have to choose between the two.If wisdom and intelligence are the average and peaks of the same\ncurve, then they converge as the number of points on the curve\ndecreases.  If there's just one point, they're identical: the average\nand maximum are the same.  But as the number of points increases,\nwisdom and intelligence diverge.  And historically the number of\npoints on the curve seems to have been increasing: our ability is\ntested in an ever wider range of situations.In the time of Confucius and Socrates, people seem to have regarded\nwisdom, learning, and intelligence as more closely related than we\ndo.  Distinguishing between \"wise\" and \"smart\" is a modern habit.\n[5]\nAnd the reason we do is that they've been diverging.  As knowledge\ngets more specialized, there are more points on the curve, and the\ndistinction between the spikes and the average becomes sharper,\nlike a digital image rendered with more pixels.One consequence is that some old recipes may have become obsolete.\nAt the very least we have to go back and figure out if they were\nreally recipes for wisdom or intelligence.  But the really striking\nchange, as intelligence and wisdom drift apart, is that we may have\nto decide which we prefer.  We may not be able to optimize for both\nsimultaneously.Society seems to have voted for intelligence.  We no longer admire\nthe sage—not the way people did two thousand years ago.  Now\nwe admire the genius.  Because in fact the distinction we began\nwith has a rather brutal converse: just as you can be smart without\nbeing very wise, you can be wise without being very smart.  That\ndoesn't sound especially admirable.  That gets you James Bond, who\nknows what to do in a lot of situations, but has to rely on Q for\nthe ones involving math.Intelligence and wisdom are obviously not mutually exclusive.  In\nfact, a high average may help support high peaks.  But there are\nreasons to believe that at some point you have to choose between\nthem.  One is the example of very smart people, who are so often\nunwise that in popular culture this now seems to be regarded as the\nrule rather than the exception.  Perhaps the absent-minded professor\nis wise in his way, or wiser than he seems, but he's not wise in\nthe way Confucius or Socrates wanted people to be.\n[6]NewFor both Confucius and Socrates, wisdom, virtue, and happiness were\nnecessarily related.  The wise man was someone who knew what the\nright choice was and always made it; to be the right choice, it had\nto be morally right; he was therefore always happy, knowing he'd\ndone the best he could.  I can't think of many ancient philosophers\nwho would have disagreed with that, so far as it goes.\"The superior man is always happy; the small man sad,\" said Confucius.\n[7]Whereas a few years ago I read an interview with a mathematician\nwho said that most nights he went to bed discontented, feeling he\nhadn't made enough progress.\n[8]\nThe Chinese and Greek words we\ntranslate as \"happy\" didn't mean exactly what we do by it, but\nthere's enough overlap that this remark contradicts them.Is the mathematician a small man because he's discontented?  No;\nhe's just doing a kind of work that wasn't very common in Confucius's\nday.Human knowledge seems to grow fractally.  Time after time, something\nthat seemed a small and uninteresting area—experimental error,\neven—turns out, when examined up close, to have as much in\nit as all knowledge up to that point.  Several of the fractal buds\nthat have exploded since ancient times involve inventing and\ndiscovering new things.  Math, for example, used to be something a\nhandful of people did part-time.  Now it's the career of thousands.\nAnd in work that involves making new things, some old rules don't\napply.Recently I've spent some time advising people, and there I find the\nancient rule still works: try to understand the situation as well\nas you can, give the best advice you can based on your experience,\nand then don't worry about it, knowing you did all you could.  But\nI don't have anything like this serenity when I'm writing an essay.\nThen I'm worried.  What if I run out of ideas?  And when I'm writing,\nfour nights out of five I go to bed discontented, feeling I didn't\nget enough done.Advising people and writing are fundamentally different types of\nwork.  When people come to you with a problem and you have to figure\nout the right thing to do, you don't (usually) have to invent\nanything.  You just weigh the alternatives and try to judge which\nis the prudent choice.  But prudence can't tell me what sentence\nto write next.  The search space is too big.Someone like a judge or a military officer can in much of his work\nbe guided by duty, but duty is no guide in making things.  Makers\ndepend on something more precarious: inspiration.  And like most\npeople who lead a precarious existence, they tend to be worried,\nnot contented.  In that respect they're more like the small man of\nConfucius's day, always one bad harvest (or ruler) away from\nstarvation. Except instead of being at the mercy of weather and\nofficials, they're at the mercy of their own imagination.LimitsTo me it was a relief just to realize it might be ok to be discontented.\nThe idea that a successful person should be happy has thousands of\nyears of momentum behind it.  If I was any good, why didn't I have\nthe easy confidence winners are supposed to have?  But that, I now\nbelieve, is like a runner asking \"If I'm such a good athlete, why\ndo I feel so tired?\" Good runners still get tired; they just get\ntired at higher speeds.People whose work is to invent or discover things are in the same\nposition as the runner.  There's no way for them to do the best\nthey can, because there's no limit to what they could do.  The\nclosest you can come is to compare yourself to other people.  But\nthe better you do, the less this matters.  An undergrad who gets\nsomething published feels like a star.  But for someone at the top\nof the field, what's the test of doing well?  Runners can at least\ncompare themselves to others doing exactly the same thing; if you\nwin an Olympic gold medal, you can be fairly content, even if you\nthink you could have run a bit faster.  But what is a novelist to\ndo?Whereas if you're doing the kind of work in which problems are\npresented to you and you have to choose between several alternatives,\nthere's an upper bound on your performance: choosing the best every\ntime.  In ancient societies, nearly all work seems to have been of\nthis type.  The peasant had to decide whether a garment was worth\nmending, and the king whether or not to invade his neighbor, but\nneither was expected to invent anything.  In principle they could\nhave; the king could have invented firearms, then invaded his\nneighbor.  But in practice innovations were so rare that they weren't\nexpected of you, any more than goalkeepers are expected to score\ngoals.\n[9]\nIn practice, it seemed as if there was a correct decision\nin every situation, and if you made it you'd done your job perfectly,\njust as a goalkeeper who prevents the other team from scoring is\nconsidered to have played a perfect game.In this world, wisdom seemed paramount.\n[10]\nEven now, most people\ndo work in which problems are put before them and they have to\nchoose the best alternative.  But as knowledge has grown more\nspecialized, there are more and more types of work in which people\nhave to make up new things, and in which performance is therefore\nunbounded.  Intelligence has become increasingly important relative\nto wisdom because there is more room for spikes.RecipesAnother sign we may have to choose between intelligence and wisdom\nis how different their recipes are.  Wisdom seems to come largely\nfrom curing childish qualities, and intelligence largely from\ncultivating them.Recipes for wisdom, particularly ancient ones, tend to have a\nremedial character.  To achieve wisdom one must cut away all the\ndebris that fills one's head on emergence from childhood, leaving\nonly the important stuff.  Both self-control and experience have\nthis effect: to eliminate the random biases that come from your own\nnature and from the circumstances of your upbringing respectively.\nThat's not all wisdom is, but it's a large part of it.  Much of\nwhat's in the sage's head is also in the head of every twelve year\nold.  The difference is that in the head of the twelve year old\nit's mixed together with a lot of random junk.The path to intelligence seems to be through working on hard problems.\nYou develop intelligence as you might develop muscles, through\nexercise.  But there can't be too much compulsion here.  No amount\nof discipline can replace genuine curiosity.  So cultivating\nintelligence seems to be a matter of identifying some bias in one's\ncharacter—some tendency to be interested in certain types of\nthings—and nurturing it.  Instead of obliterating your\nidiosyncrasies in an effort to make yourself a neutral vessel for\nthe truth, you select one and try to grow it from a seedling into\na tree.The wise are all much alike in their wisdom, but very smart people\ntend to be smart in distinctive ways.Most of our educational traditions aim at wisdom. So perhaps one\nreason schools work badly is that they're trying to make intelligence\nusing recipes for wisdom.  Most recipes for wisdom have an element\nof subjection.  At the very least, you're supposed to do what the\nteacher says.  The more extreme recipes aim to break down your\nindividuality the way basic training does.  But that's not the route\nto intelligence.  Whereas wisdom comes through humility, it may\nactually help, in cultivating intelligence, to have a mistakenly\nhigh opinion of your abilities, because that encourages you to keep\nworking.  Ideally till you realize how mistaken you were.(The reason it's hard to learn new skills late in life is not just\nthat one's brain is less malleable.  Another probably even worse\nobstacle is that one has higher standards.)I realize we're on dangerous ground here.  I'm not proposing the\nprimary goal of education should be to increase students' \"self-esteem.\"\nThat just breeds laziness.  And in any case, it doesn't really fool\nthe kids, not the smart ones.  They can tell at a young age that a\ncontest where everyone wins is a fraud.A teacher has to walk a narrow path: you want to encourage kids to\ncome up with things on their own, but you can't simply applaud\neverything they produce.  You have to be a good audience: appreciative,\nbut not too easily impressed.  And that's a lot of work.  You have\nto have a good enough grasp of kids' capacities at different ages\nto know when to be surprised.That's the opposite of traditional recipes for education.  Traditionally\nthe student is the audience, not the teacher; the student's job is\nnot to invent, but to absorb some prescribed body of material.  (The\nuse of the term \"recitation\" for sections in some colleges is a\nfossil of this.) The problem with these old traditions is that\nthey're too much influenced by recipes for wisdom.DifferentI deliberately gave this essay a provocative title; of course it's\nworth being wise.  But I think it's important to understand the\nrelationship between intelligence and wisdom, and particularly what\nseems to be the growing gap between them.  That way we can avoid\napplying rules and standards to intelligence that are really meant\nfor wisdom.  These two senses of \"knowing what to do\" are more\ndifferent than most people realize.  The path to wisdom is through\ndiscipline, and the path to intelligence through carefully selected\nself-indulgence.  Wisdom is universal, and intelligence idiosyncratic.\nAnd while wisdom yields calmness, intelligence much of the time\nleads to discontentment.That's particularly worth remembering.  A physicist friend recently\ntold me half his department was on Prozac.  Perhaps if we acknowledge\nthat some amount of frustration is inevitable in certain kinds\nof work, we can mitigate its effects.  Perhaps we can box it up and\nput it away some of the time, instead of letting it flow together\nwith everyday sadness to produce what seems an alarmingly large\npool.  At the very least, we can avoid being discontented about\nbeing discontented.If you feel exhausted, it's not necessarily because there's something\nwrong with you.  Maybe you're just running fast.Notes[1]\nGauss was supposedly asked this when he was 10.  Instead of\nlaboriously adding together the numbers like the other students,\nhe saw that they consisted of 50 pairs that each summed to 101 (100\n+ 1, 99 + 2, etc), and that he could just multiply 101 by 50 to get\nthe answer, 5050.[2]\nA variant is that intelligence is the ability to solve problems,\nand wisdom the judgement to know how to use those solutions.   But\nwhile this is certainly an important relationship between wisdom\nand intelligence, it's not the distinction between them.  Wisdom\nis useful in solving problems too, and intelligence can help in\ndeciding what to do with the solutions.[3]\nIn judging both intelligence and wisdom we have to factor out\nsome knowledge. People who know the combination of a safe will be\nbetter at opening it than people who don't, but no one would say\nthat was a test of intelligence or wisdom.But knowledge overlaps with wisdom and probably also intelligence.\nA knowledge of human nature is certainly part of wisdom.  So where\ndo we draw the line?Perhaps the solution is to discount knowledge that at some point\nhas a sharp drop in utility.  For example, understanding French\nwill help you in a large number of situations, but its value drops\nsharply as soon as no one else involved knows French.  Whereas the\nvalue of understanding vanity would decline more gradually.The knowledge whose utility drops sharply is the kind that has\nlittle relation to other knowledge.  This includes mere conventions,\nlike languages and safe combinations, and also what we'd call\n\"random\" facts, like movie stars' birthdays, or how to distinguish\n1956 from 1957 Studebakers.[4]\nPeople seeking some single thing called \"wisdom\" have been\nfooled by grammar.  Wisdom is just knowing the right thing to do,\nand there are a hundred and one different qualities that help in\nthat.  Some, like selflessness, might come from meditating in an\nempty room, and others, like a knowledge of human nature, might\ncome from going to drunken parties.Perhaps realizing this will help dispel the cloud of semi-sacred\nmystery that surrounds wisdom in so many people's eyes.  The mystery\ncomes mostly from looking for something that doesn't exist.  And\nthe reason there have historically been so many different schools\nof thought about how to achieve wisdom is that they've focused on\ndifferent components of it.When I use the word \"wisdom\" in this essay, I mean no more than\nwhatever collection of qualities helps people make the right choice\nin a wide variety of situations.[5]\nEven in English, our sense of the word \"intelligence\" is\nsurprisingly recent.  Predecessors like \"understanding\" seem to\nhave had a broader meaning.[6]\nThere is of course some uncertainty about how closely the remarks\nattributed to Confucius and Socrates resemble their actual opinions.\nI'm using these names as we use the name \"Homer,\" to mean the\nhypothetical people who said the things attributed to them.[7]\nAnalects VII:36, Fung trans.Some translators use \"calm\" instead of \"happy.\"  One source of\ndifficulty here is that present-day English speakers have a different\nidea of happiness from many older societies.  Every language probably\nhas a word meaning \"how one feels when things are going well,\" but\ndifferent cultures react differently when things go well.  We react\nlike children, with smiles and laughter.  But in a more reserved\nsociety, or in one where life was tougher, the reaction might be a\nquiet contentment.[8]\nIt may have been Andrew Wiles, but I'm not sure.  If anyone\nremembers such an interview, I'd appreciate hearing from you.[9]\nConfucius claimed proudly that he had never invented\nanything—that he had simply passed on an accurate account of\nancient traditions.  [Analects VII:1] It's hard for us now to\nappreciate how important a duty it must have been in preliterate\nsocieties to remember and pass on the group's accumulated knowledge.\nEven in Confucius's time it still seems to have been the first duty\nof the scholar.[10]\nThe bias toward wisdom in ancient philosophy may be exaggerated\nby the fact that, in both Greece and China, many of the first\nphilosophers (including Confucius and Plato) saw themselves as\nteachers of administrators, and so thought disproportionately about\nsuch matters.  The few people who did invent things, like storytellers,\nmust have seemed an outlying data point that could be ignored.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston,\nand Robert Morris for reading drafts of this."},{"title":"It's Charisma, Stupid","text":"November 2004, corrected June 2006Occam's razor says we should prefer the simpler of two explanations.\nI begin by reminding readers of this principle because I'm about\nto propose a theory that will offend both liberals and conservatives.\nBut Occam's razor means, in effect, that if you want to disagree\nwith it, you have a hell of a coincidence to explain.Theory: In US presidential elections, the more\ncharismatic candidate wins.People who write about politics, whether on the left or the right,\nhave a consistent bias: they take politics seriously.  When one\ncandidate beats another they look for political explanations.  The\ncountry is shifting to the left, or the right.  And that sort of\nshift can certainly be the result of a presidential election, which\nmakes it easy to believe it was the cause.But when I think about why I voted for Clinton over the first George\nBush, it wasn't because I was shifting to the left.  Clinton just\nseemed more dynamic.  He seemed to want the job more.  Bush seemed\nold and tired.  I suspect it was the same for a lot of voters.Clinton didn't represent any national shift leftward.\n[1]\nHe was\njust more charismatic than George Bush or (God help us) Bob Dole.\nIn 2000 we practically got a controlled experiment to prove it:\nGore had Clinton's policies, but not his charisma, and he suffered\nproportionally.\n[2]\nSame story in 2004. Kerry was smarter and more\narticulate than Bush, but rather a stiff.  And Kerry lost.As I looked further back, I kept finding the same pattern.\nPundits said Carter beat Ford\nbecause the country distrusted the Republicans after Watergate.\nAnd yet it also happened that Carter was famous for his big grin\nand folksy ways, and Ford for being a boring klutz.  Four years\nlater, pundits said the country had lurched to the right.  But\nReagan, a former actor, also happened to be even more charismatic\nthan Carter (whose grin was somewhat less cheery after four stressful\nyears in office).  In 1984 the charisma gap between Reagan and\nMondale was like that between Clinton and Dole, with similar results.\nThe first George Bush managed to win in 1988, though he would later\nbe vanquished by one of the most charismatic presidents ever, because\nin 1988 he was up against the notoriously uncharismatic\nMichael Dukakis.These are the elections I remember personally, but apparently the\nsame pattern played out in 1964 and 1972.  The most recent\ncounterexample appears to be 1968, when Nixon beat the more charismatic Hubert\nHumphrey.  But when you examine that election, it tends to support\nthe charisma theory more than contradict it.  As Joe McGinnis\nrecounts in his famous book The Selling of the President 1968,\nNixon knew he had less charisma than Humphrey, and thus simply\nrefused to debate him on TV.  He knew he couldn't afford to let the\ntwo of them be seen side by side.Now a candidate probably couldn't get away with refusing to debate.\nBut in 1968 the custom of televised debates was still evolving.  In\neffect, Nixon won in 1968 because voters were never allowed to see\nthe real Nixon.  All they saw were carefully scripted campaign\nspots.Oddly enough, the most recent true counterexample is probably 1960.\nThough this election is usually given as an example of the power\nof TV, Kennedy apparently would not have won without fraud by party\nmachines in Illinois and Texas.  But TV was still young in 1960;\nonly 87% of households had it.\n[3]\nUndoubtedly TV helped Kennedy,\nso historians are correct in regarding this election as a\nwatershed.  TV required a new kind of candidate. There would be no\nmore Calvin Coolidges.The charisma theory may also explain why Democrats tend to lose\npresidential elections.  The core of the Democrats' ideology seems\nto be a belief in government.  Perhaps this tends to attract people\nwho are earnest, but dull.  Dukakis, Gore, and Kerry were so similar\nin that respect that they might have been brothers.  Good thing for\nthe Democrats that their screen lets through an occasional Clinton,\neven if some scandal results.\n[4]One would like to believe elections are won and lost on issues, if\nonly fake ones like Willie Horton.  And yet, if they are, we have\na remarkable coincidence to explain.  In every presidential election\nsince TV became widespread, the apparently more charismatic candidate\nhas won.  Surprising, isn't it, that voters' opinions on the issues\nhave lined up with charisma for 11 elections in a row?The political commentators who come up with shifts to the left or\nright in their morning-after analyses are like the financial reporters\nstuck writing stories day after day about the random fluctuations\nof the stock market.  Day ends, market closes up or down, reporter\nlooks for good or bad news respectively, and writes that the market\nwas up on news of Intel's earnings, or down on fears of instability\nin the Middle East.  Suppose we could somehow feed these reporters\nfalse information about market closes, but give them all the other\nnews intact.  Does anyone believe they would notice the anomaly,\nand not simply write that stocks were up (or down) on whatever good\n(or bad) news there was that day?  That they would say, hey, wait\na minute, how can stocks be up with all this unrest in the Middle\nEast?I'm not saying that issues don't matter to voters.  Of course they\ndo.  But the major parties know so well which issues matter how\nmuch to how many voters, and adjust their message so precisely in\nresponse, that they tend to split the difference on the issues,\nleaving the election to be decided by the one factor they can't\ncontrol: charisma.If the Democrats had been running a candidate as charismatic as\nClinton in the 2004 election, he'd have won.  And we'd be reading\nthat the election was a referendum on the war in Iraq, instead of\nthat the Democrats are out of touch with evangelical Christians in\nmiddle America.During the 1992 election, the Clinton campaign staff had a big sign\nin their office saying \"It's the economy, stupid.\" Perhaps it was\neven simpler than they thought.PostscriptOpinions seem to be divided about the charisma theory.  Some say\nit's impossible, others say it's obvious.  This seems a good sign.\nPerhaps it's in the sweet spot midway between.As for it being impossible, I reply: here's the data; here's the\ntheory; theory explains data 100%.   To a scientist, at least, that\nmeans it deserves attention, however implausible it seems.You can't believe voters are so superficial that they just choose\nthe most charismatic guy?  My theory doesn't require that.  I'm not\nproposing that charisma is the only factor, just that it's the only\none left after the efforts of the two parties cancel one\nanother out.As for the theory being obvious, as far as I know, no one has\nproposed it before.  Election forecasters are proud when they can\nachieve the same results with much more complicated models.Finally, to the people who say that the theory is probably true,\nbut rather depressing: it's not so bad as it seems.  The phenomenon\nis like a pricing anomaly; once people realize it's there, it will\ndisappear.  Once both parties realize it's a waste of time to\nnominate uncharismatic candidates, they'll tend to nominate only\nthe most charismatic ones.  And if the candidates are equally\ncharismatic, charisma will cancel out, and elections will be decided\non issues, as political commentators like to think they are now.Notes[1]\nAs Clinton himself discovered to his surprise when, in one of\nhis first acts as president, he tried to shift the military leftward.\nAfter a bruising fight he escaped with a face-saving compromise.[2]\nTrue, Gore won the popular vote. But politicians know the electoral\nvote decides the election, so that's what they campaign for. If Bush\nhad been campaigning for the popular vote he would presumably have\ngot more of it. (Thanks to judgmentalist for this point.)[3]\nSource: Nielsen Media Research.  Of the remaining 13%, 11 didn't\nhave TV because they couldn't afford it.  I'd argue that the missing\n11% were probably also the 11% most susceptible to charisma.[4]\nOne implication of this theory is that parties shouldn't be too\nquick to reject candidates with skeletons in their closets.\nCharismatic candidates will tend to have more skeletons than squeaky\nclean dullards, but in practice that doesn't seem to lose elections.\nThe current Bush, for example, probably did more drugs in his\ntwenties than any preceding president, and yet managed to get elected\nwith a base of evangelical Christians.  All you have to do is say\nyou've reformed, and stonewall about the details.Thanks to Trevor Blackwell, Maria Daniels, Jessica Livingston,\nJackie McDonough, and Robert Morris for reading drafts of this, and\nto Eric Raymond for pointing out that I was wrong about 1968.\nComment on this essay."},{"title":"Jargon File Entry","text":"(This entry from the Jargon File, which later became the\nHackers' Dictionary, originally dates from the mid-80s.\nThe first versions of the Jargon File didn't have an entry\nfor Lisp, because it was assumed that every hacker knew what\nit was.):LISP: /n./  [from `LISt Processing language', but mythically\nfrom `Lots of Irritating Superfluous Parentheses'] AI's mother\ntongue, a language based on the ideas of (a) variable-length lists\nand trees as fundamental data types, and (b) the interpretation of\ncode as data and vice-versa.  Invented by John McCarthy at MIT in\nthe late 1950s, it is actually older than any other {HLL} still\nin use except FORTRAN.  Accordingly, it has undergone considerable\nadaptive radiation over the years; modern variants are quite\ndifferent in detail from the original LISP 1.5.  The dominant HLL\namong hackers until the early 1980s, LISP now shares the throne\nwith {C}.  See {languages of choice}.All LISP functions and programs are expressions that return\nvalues; this, together with the high memory utilization of LISPs,\ngave rise to Alan Perlis's famous quip (itself a take on an Oscar\nWilde quote) that \"LISP programmers know the value of everything\nand the cost of nothing\".One significant application for LISP has been as a proof by example\nthat most newer languages, such as {COBOL} and {Ada}, are full\nof unnecessary {crock}s.  When the {Right Thing} has already\nbeen done once, there is no justification for {bogosity} in newer\nlanguages."},{"title":"Java's Cover","text":"April 2001This essay developed out of conversations I've had with\nseveral other programmers about why Java smelled suspicious.  It's not\na critique of Java!  It is a case study of hacker's radar.Over time, hackers develop a nose for good (and bad) technology.\nI thought it might be interesting to try and write down what\nmade Java seem suspect to me.Some people who've read this think it's an interesting attempt to write about\nsomething that hasn't been written about before.  Others say I\nwill get in trouble for appearing to be writing about\nthings I don't understand.  So, just in\ncase it does any good, let me clarify that I'm not writing here\nabout Java (which I have never used) but about hacker's radar\n(which I have thought about a lot).The aphorism \"you can't tell a book by its cover\" originated in\nthe times when books were sold in plain cardboard covers, to be\nbound by each purchaser according to his own taste.  In those days,\nyou couldn't tell a book by its cover.  But publishing has advanced\nsince then: present-day publishers work hard to make the cover\nsomething you can tell a book by.I spend a lot of time in bookshops and I feel as if I have by now\nlearned to understand everything publishers mean to tell me about\na book, and perhaps a bit more.  The time I haven't spent in\nbookshops I've spent mostly in front of computers, and I feel as\nif I've learned, to some degree, to judge technology by its cover\nas well.  It may be just luck, but I've saved myself from a few\ntechnologies that turned out to be real stinkers.So far, Java seems like a stinker to me.  I've never written a Java\nprogram, never more than glanced over reference books about it,\nbut I have a hunch that it won't be a very successful language.\nI may turn out to be mistaken; making predictions about technology\nis a dangerous business.  But for what it's worth, as a sort of\ntime capsule, here's why I don't like the look of Java:1. It has been so energetically hyped.  Real standards don't have\nto be promoted.  No one had to promote C, or Unix, or HTML.  A real\nstandard tends to be already established by the time most people\nhear about it.  On the hacker radar screen, Perl is as big as Java,\nor bigger, just on the strength of its own merits.2. It's aimed low.  In the original Java white paper, Gosling\nexplicitly says Java was designed not to be too difficult for\nprogrammers used to C.  It was designed to be another C++: C plus\na few ideas taken from more advanced languages.  Like the creators\nof sitcoms or junk food or package tours, Java's designers were\nconsciously designing a product for people not as smart as them.\nHistorically, languages designed for other people to use have been\nbad:  Cobol, PL/I, Pascal, Ada, C++.  The good languages have been\nthose that were designed for their own creators:  C, Perl, Smalltalk,\nLisp.3. It has ulterior motives.  Someone once said that the world would\nbe a better place if people only wrote books because they had\nsomething to say, rather than because they wanted to write a book.\nLikewise, the reason we hear about Java all the time is not because\nit has something to say about programming languages.  We hear about\nJava as part of a plan by Sun to undermine Microsoft.4. No one loves it.  C, Perl, Python, Smalltalk, and Lisp programmers\nlove their languages.  I've never heard anyone say that they loved\nJava.5. People are forced to use it.  A lot of the people I know using\nJava are using it because they feel they have to.  Either it's\nsomething they felt they had to do to get funded, or something they\nthought customers would want, or something they were told to do by\nmanagement.  These are smart people; if the technology was good,\nthey'd have used it voluntarily.6. It has too many cooks.  The best programming languages have been\ndeveloped by small groups.  Java seems to be run by a committee.\nIf it turns out to be a good language, it will be the first time\nin history that a committee has designed a good language.7. It's bureaucratic.  From what little I know about Java, there\nseem to be a lot of protocols for doing things.  Really good\nlanguages aren't like that.  They let you do what you want and get\nout of the way.8. It's pseudo-hip.  Sun now pretends that Java is a grassroots,\nopen-source language effort like Perl or Python.  This one just\nhappens to be controlled by a giant company.  So the language is\nlikely to have the same drab clunkiness as anything else that comes\nout of a big company.9. It's designed for large organizations.  Large organizations have\ndifferent aims from hackers. They want languages that are (believed\nto be) suitable for use by large teams of mediocre programmers--\nlanguages with features that, like the speed limiters in U-Haul\ntrucks, prevent fools from doing too much damage.  Hackers don't\nlike a language that talks down to them.  Hackers just want power.\nHistorically, languages designed for large organizations (PL/I,\nAda) have lost, while hacker languages (C, Perl) have won.  The\nreason: today's teenage hacker is tomorrow's CTO.10. The wrong people like it.  The programmers I admire most are\nnot, on the whole, captivated by Java.  Who does like Java?  Suits,\nwho don't know one language from another, but know that they keep\nhearing about Java in the press; programmers at big companies, who\nare amazed to find that there is something even better than C++;\nand plug-and-chug undergrads, who are ready to like anything that\nmight get them a job (will this be on the test?).  These people's\nopinions change with every wind.11. Its daddy is in a pinch.  Sun's business model is being undermined\non two fronts.  Cheap Intel processors, of the same type used in\ndesktop machines, are now more than fast enough for servers.  And\nFreeBSD seems to be at least as good an OS for servers as Solaris.\nSun's advertising implies that you need Sun servers for industrial\nstrength applications.  If this were true, Yahoo would be first in\nline to buy Suns;  but when I worked there, the servers were all\nIntel boxes running FreeBSD.  This bodes ill for Sun's future.  If\nSun runs into trouble, they could drag Java down with them.12. The DoD likes it.  The Defense Department is encouraging\ndevelopers to use Java. This seems to me the most damning sign of\nall.  The Defense Department does a fine (though expensive) job of\ndefending the country, but they love plans and procedures and\nprotocols.  Their culture is the opposite of hacker culture; on\nquestions of software they will tend to bet wrong.  The last time\nthe DoD really liked a programming language, it was Ada.Bear in mind, this is not a critique of Java, but a critique of\nits cover.  I don't know Java well enough to like it or dislike\nit.  This is just an explanation of why I don't find that I'm eager\nto learn it.It may seem cavalier to dismiss a language before you've even tried\nwriting programs in it.  But this is something all programmers have\nto do.  There are too many technologies out there to learn them\nall.  You have to learn to judge by outward signs which will be\nworth your time.  I have likewise cavalierly dismissed Cobol, Ada,\nVisual Basic, the IBM AS400, VRML, ISO 9000, the SET protocol, VMS,\nNovell Netware, and CORBA, among others.  They just smelled wrong.It could be that in Java's case I'm mistaken.  It could be that a\nlanguage promoted by one big company to undermine another, designed\nby a committee for a \"mainstream\" audience, hyped to the skies,\nand beloved of the DoD, happens nonetheless to be a clean, beautiful,\npowerful language that I would love programming in.  It could be,\nbut it seems very unlikely."},{"title":"Jessica Livingston","text":"November 2015A few months ago an article about Y Combinator said that early on\nit had been a \"one-man show.\"  It's sadly common to read that sort\nof thing.  But the problem with that description is not just that\nit's unfair.  It's also misleading.  Much of what's most novel about\nYC is due to Jessica Livingston.  If you don't understand her, you\ndon't understand YC.  So let me tell you a little about Jessica.YC had 4 founders.  Jessica and I decided one night to start it,\nand the next day we recruited my friends Robert Morris and Trevor\nBlackwell.  Jessica and I ran YC day to day, and Robert and Trevor\nread applications and did interviews with us.Jessica and I were already dating when we started YC.  At first we\ntried to act \"professional\" about this, meaning we tried to conceal\nit.  In retrospect that seems ridiculous, and we soon dropped the\npretense.  And the fact that Jessica and I were a couple is a big\npart of what made YC what it was.  YC felt like a family.  The\nfounders early on were mostly young.  We all had dinner together\nonce a week, cooked for the first couple years by me. Our first\nbuilding had been a private home.  The overall atmosphere was\nshockingly different from a VC's office on Sand Hill Road, in a way\nthat was entirely for the better.  There was an authenticity that\neveryone who walked in could sense.  And that didn't just mean that\npeople trusted us.  It was the perfect quality to instill in startups.\nAuthenticity is one of the most important things YC looks for in\nfounders, not just because fakers and opportunists are annoying,\nbut because authenticity is one of the main things that separates\nthe most successful startups from the rest.Early YC was a family, and Jessica was its mom.  And the culture\nshe defined was one of YC's most important innovations.  Culture\nis important in any organization, but at YC culture wasn't just how\nwe behaved when we built the product. At YC, the culture was the\nproduct.Jessica was also the mom in another sense: she had the last word.\nEverything we did as an organization went through her first—who\nto fund, what to say to the public, how to deal with other companies,\nwho to hire, everything.Before we had kids, YC was more or less our life. There was no real\ndistinction between working hours and not.  We talked about YC all\nthe time.  And while there might be some businesses that it would\nbe tedious to let infect your private life, we liked it. We'd started\nYC because it was something we were interested in.  And some of the\nproblems we were trying to solve were endlessly difficult.  How do\nyou recognize good founders?  You could talk about that for years,\nand we did; we still do.I'm better at some things than Jessica, and she's better at some\nthings than me.  One of the things she's best at is judging people.\nShe's one of those rare individuals with x-ray vision for character.\nShe can see through any kind of faker almost immediately.  Her\nnickname within YC was the Social Radar, and this special power of\nhers was critical in making YC what it is.  The earlier you pick\nstartups, the more you're picking the founders.  Later stage investors\nget to try products and look at growth numbers.  At the stage where\nYC invests, there is often neither a product nor any numbers.Others thought YC had some special insight about the future of\ntechnology.  Mostly we had the same sort of insight Socrates claimed:\nwe at least knew we knew nothing.  What made YC successful was being\nable to pick good founders.  We thought Airbnb was a bad idea.  We\nfunded it because we liked the founders.During interviews, Robert and Trevor and I would pepper the applicants\nwith technical questions.  Jessica would mostly watch.  A lot of\nthe applicants probably read her as some kind of secretary, especially\nearly on, because she was the one who'd go out and get each new\ngroup and she didn't ask many questions. She was ok with that.  It\nwas easier for her to watch people if they didn't notice her. But\nafter the interview, the three of us would turn to Jessica and ask\n\"What does the Social Radar say?\"\n[1]Having the Social Radar at interviews wasn't just how we picked\nfounders who'd be successful.  It was also how we picked founders\nwho were good people.  At first we did this because we couldn't\nhelp it.  Imagine what it would feel like to have x-ray vision for\ncharacter.  Being around bad people would be intolerable.  So we'd\nrefuse to fund founders whose characters we had doubts about even\nif we thought they'd be successful.Though we initially did this out of self-indulgence, it turned out\nto be very valuable to YC.  We didn't realize it in the beginning,\nbut the people we were picking would become the YC alumni network.\nAnd once we picked them, unless they did something really egregious,\nthey were going to be part of it for life. Some now think YC's\nalumni network is its most valuable feature. I personally think\nYC's advice is pretty good too, but the alumni network is certainly\namong the most valuable features.  The level of trust and helpfulness\nis remarkable for a group of such size.  And Jessica is the main\nreason why.(As we later learned, it probably cost us little to reject people\nwhose characters we had doubts about, because how good founders are\nand how well they do are not orthogonal.  If bad founders succeed\nat all, they tend to sell early.  The most successful founders are\nalmost all good.)If Jessica was so important to YC, why don't more people realize\nit?  Partly because I'm a writer, and writers always get disproportionate\nattention.  YC's brand was initially my brand, and our applicants\nwere people who'd read my essays.  But there is another reason:\nJessica hates attention.  Talking to reporters makes her nervous.\nThe thought of giving a talk paralyzes her.  She was even uncomfortable\nat our wedding, because the bride is always the center of attention.\n[2]It's not just because she's shy that she hates attention, but because\nit throws off the Social Radar. She can't be herself. You can't\nwatch people when everyone is watching you.Another reason attention worries her is that she hates bragging.\nIn anything she does that's publicly visible, her biggest fear\n(after the obvious fear that it will be bad) is that it will seem\nostentatious.  She says being too modest is a common problem for\nwomen.  But in her case it goes beyond that.  She has a horror of\nostentation so visceral it's almost a phobia.She also hates fighting. She can't do it; she just shuts down.  And\nunfortunately there is a good deal of fighting in being the public\nface of an organization.So although Jessica more than anyone made YC unique, the very\nqualities that enabled her to do it mean she tends to get written\nout of YC's history.  Everyone buys this story that PG started YC\nand his wife just kind of helped.  Even YC's haters buy it.  A\ncouple years ago when people were attacking us for not funding more\nfemale founders (than exist), they all treated YC as identical with\nPG.  It would have spoiled the narrative to acknowledge Jessica's\ncentral role at YC.Jessica was boiling mad that people were accusing her company of\nsexism. I've never seen her angrier about anything.  But she did\nnot contradict them.  Not publicly.  In private there was a great\ndeal of profanity.  And she wrote three separate essays about the\nquestion of female founders.  But she could never bring herself to\npublish any of them.  She'd seen the level of vitriol in this debate,\nand she shrank from engaging.\n[3]It wasn't just because she disliked fighting.  She's so sensitive\nto character that it repels her even to fight with dishonest people.\nThe idea of mixing it up with linkbait journalists or Twitter trolls\nwould seem to her not merely frightening, but disgusting.But Jessica knew her example as a successful female founder would\nencourage more women to start companies, so last year she did\nsomething YC had never done before and hired a PR firm to get her\nsome interviews.  At one of the first she did, the reporter brushed\naside her insights about startups and turned it into a sensationalistic\nstory about how some guy had tried to chat her up as she was waiting\noutside the bar where they had arranged to meet.  Jessica was\nmortified, partly because the guy had done nothing wrong, but more\nbecause the story treated her as a victim significant only for being\na woman, rather than one of the most knowledgeable investors in the\nValley.After that she told the PR firm to stop.You're not going to be hearing in the press about what Jessica has\nachieved. So let me tell you what Jessica has achieved.  Y Combinator\nis fundamentally a nexus of people, like a university. It doesn't\nmake a product. What defines it is the people.  Jessica more than\nanyone curated and nurtured that collection of people.  In that\nsense she literally made YC.Jessica knows more about the qualities of startup founders than\nanyone else ever has. Her immense data set and x-ray vision are the\nperfect storm in that respect.  The qualities of the founders are\nthe best predictor of how a startup will do.  And startups are in\nturn the most important source of growth in mature economies.The person who knows the most about the most important factor in\nthe growth of mature economies—that is who Jessica Livingston is.\nDoesn't that sound like someone who should be better known?Notes[1]\nHarj Taggar reminded me that while Jessica didn't ask many\nquestions, they tended to be important ones:\"She was always good at sniffing out any red flags about the team\nor their determination and disarmingly asking the right question,\nwhich usually revealed more than the founders realized.\"[2]\nOr more precisely, while she likes getting attention in the\nsense of getting credit for what she has done, she doesn't like\ngetting attention in the sense of being watched in real time.\nUnfortunately, not just for her but for a lot of people, how much\nyou get of the former depends a lot on how much you get of the\nlatter.Incidentally, if you saw Jessica at a public event, you would never\nguess she\nhates attention, because (a) she is very polite and (b) when she's\nnervous, she expresses it by smiling more.[3]\nThe existence of people like Jessica is not just something\nthe mainstream media needs to learn to acknowledge, but something\nfeminists need to learn to acknowledge as well.  There are successful\nwomen who don't like to fight.  Which means if the public conversation\nabout women consists of fighting, their voices will be silenced.There's a sort of Gresham's Law of conversations. If a conversation\nreaches a certain level of incivility, the more thoughtful people\nstart to leave. No one understands female founders better than\nJessica.  But it's unlikely anyone will ever hear her speak candidly\nabout the topic. She ventured a toe in that water a while ago, and\nthe reaction was so violent that she decided \"never again.\"Thanks to Sam Altman, Paul Buchheit, Patrick Collison,\nDaniel Gackle, Carolynn\nLevy, Jon Levy, Kirsty Nathoo, Robert Morris, Geoff Ralston, and\nHarj Taggar for reading drafts of this.  And yes, Jessica Livingston,\nwho made me cut surprisingly little."},{"title":"Julian Weber","text":"22 August 2006My friend Julian Weber died Sunday in New York.He was already\nmostly retired from a successful career in law and publishing when\nhe helped us start Viaweb in 1995.   He'd been, among other things,\npresident of the National Lampoon.  This was our kind of\nbusiness guy.Julian gave us the very first funding to work on Viaweb, back when\nit was just an idea. He also did all the company's legal work, and\ntaught us some of the mechanics of business, including how investment\ndeals worked.  He was for years the voice of sanity on our board.\nViaweb would never have made it without him.Julian was a big part of the inspiration for Y Combinator.  His\nexample showed us the magic combination of ingredients you need to\nadd to hackers to make a startup: seed money, legal work, advice\nabout deals, and a (comparatively) calm source of advice in moments\nof crisis.   Our goal with YC was to reproduce what we'd had.  Among\nourselves we called it RoboJulian.What we can't reproduce is his particular breed of biting wit.\nEveryone always shut up when Julian was about to say something.  We\nnever knew if it was going to be advice or a joke, but we knew it\nwould be worth hearing."},{"title":"Keep Your Identity Small","text":"February 2009I finally realized today why politics and religion yield such\nuniquely useless discussions.As a rule, any mention of religion on an online forum degenerates\ninto a religious argument.  Why?  Why does this happen with religion\nand not with Javascript or baking or other topics people talk about\non forums?What's different about religion is that people don't feel they need\nto have any particular expertise to have opinions about\nit.  All they need is strongly held beliefs, and anyone can have\nthose.  No thread about Javascript will grow as fast as one about\nreligion, because people feel they have to be over some threshold\nof expertise to post comments about that.  But on religion everyone's\nan expert.Then it struck me: this is the problem with politics too.  Politics,\nlike religion, is a topic where there's no threshold of expertise\nfor expressing an opinion.  All you need is strong convictions.Do religion and politics have something in common that explains\nthis similarity?  One possible explanation is that they deal with\nquestions that have no definite answers, so there's no back pressure\non people's opinions.  Since no one can be proven wrong, every\nopinion is equally valid, and sensing this, everyone lets fly with\ntheirs.But this isn't true.  There are certainly some political questions\nthat have definite answers, like how much a new government policy\nwill cost.  But the more precise political questions suffer the\nsame fate as the vaguer ones.I think what religion and politics have in common is that they\nbecome part of people's identity, and people can never have a\nfruitful argument about something that's part of their identity.\nBy definition they're partisan.Which topics engage people's identity depends on the people, not\nthe topic.  For example, a discussion about a battle that included\ncitizens of one or more of the countries involved would probably\ndegenerate into a political argument.  But a discussion today about\na battle that took place in the Bronze Age probably wouldn't.  No\none would know what side to be on.  So it's not politics that's the\nsource of the trouble, but identity.  When people say a discussion\nhas degenerated into a religious war, what they really mean is that\nit has started to be driven mostly by people's identities.\n[1]Because the point at which this happens depends on the people rather\nthan the topic, it's a mistake to conclude that because a question\ntends to provoke religious wars, it must have no answer. For example,\nthe question of the relative merits of programming languages often\ndegenerates into a religious war, because so many programmers\nidentify as X programmers or Y programmers.  This sometimes leads\npeople to conclude the question must be unanswerable—that all\nlanguages are equally good.  Obviously that's false: anything else\npeople make can be well or badly designed; why should this be\nuniquely impossible for programming languages?  And indeed, you can\nhave a fruitful discussion about the relative merits of programming\nlanguages, so long as you exclude people who respond from identity.More generally, you can have a fruitful discussion about a topic\nonly if it doesn't engage the identities of any of the\nparticipants.  What makes politics and religion such minefields is\nthat they engage so many people's identities.  But you could in\nprinciple have a useful conversation about them with some people.\nAnd there are other topics that might seem harmless, like the\nrelative merits of Ford and Chevy pickup trucks, that you couldn't\nsafely talk about with others.The most intriguing thing about this theory, if it's right, is that\nit explains not merely which kinds of discussions to avoid, but how\nto have better ideas.  If people can't think clearly about anything\nthat has become part of their identity, then all other things being\nequal, the best plan is to let as few things into your identity as\npossible.\n[2]Most people reading this will already be fairly tolerant.  But there\nis a step beyond thinking of yourself as x but tolerating y: not\neven to consider yourself an x.  The more labels you have for\nyourself, the dumber they make you.Notes[1]\nWhen that happens, it tends to happen fast, like a core going\ncritical.  The threshold for participating goes down to zero, which\nbrings in more people.  And they tend to say incendiary things,\nwhich draw more and angrier counterarguments.[2]\nThere may be some things it's a net win to include in your\nidentity.  For example, being a scientist.  But arguably that is\nmore of a placeholder than an actual label—like putting NMI on a\nform that asks for your middle initial—because it doesn't commit\nyou to believing anything in particular.   A scientist isn't committed\nto believing in natural selection in the same way a bibilical\nliteralist is committed to rejecting it.  All he's committed to is\nfollowing the evidence wherever it leads.Considering yourself a scientist is equivalent to putting a sign\nin a cupboard saying \"this cupboard must be kept empty.\"  Yes,\nstrictly speaking, you're putting something in the cupboard, but\nnot in the ordinary sense.Thanks to Sam Altman, Trevor Blackwell, Paul Buchheit, and Robert\nMorris for reading drafts of this."},{"title":"Knuth: Computer Programming as an Art","text":"CACM, December 1974When Communications of the ACM began publication in 1959,\nthe members of ACM'S Editorial Board made the following remark as\nthey described the purposes of ACM'S periodicals [2]:\n\"If computer programming is to become an important part of computer\nresearch and development, a transition of programming from an art\nto a disciplined science must be effected.\"  Such a\ngoal has been a continually recurring theme during the ensuing\nyears; for example, we read in 1970 of the \"first steps toward\ntransforming the art of programming into a science\" [26]. Meanwhile\nwe have actually succeeded in making our discipline a science, and\nin a remarkably simple way: merely by deciding to call it \"computer\nscience.\"Implicit in these remarks is the notion that there is something\nundesirable about an area of human activity that is classified as\nan \"art\"; it has to be a Science before it has any real stature.\nOn the other hand, I have been working for more than 12 years on a\nseries of books called \"The Art of Computer Programming.\"\nPeople frequently ask me why I picked such a title; and in fact\nsome people apparently don't believe that I really did so, since\nI've seen at least one bibliographic reference to some books called\n\"The Act of Computer Programming.\"In this talk I shall try to explain why I think \"Art\" is the\nappropriate word. I will discuss what it means for something to be\nan art, in contrast to being a science; I will try to examine whether\narts are good things or bad things; and I will try to show that a\nproper viewpoint of the subject will help us all to improve the\nquality of what we are now doing.One of the first times I was ever asked about the title of my books\nwas in 1966, during the last previous ACM national meeting held in\nSouthern California. This was before any of the books were published,\nand I recall having lunch with a friend at the convention hotel.\nHe knew how conceited I was, already at that time, so he asked if\nI was going to call my books \"An Introduction to Don Knuth.\" I\nreplied that, on the contrary, I was naming the books after him.\nHis name: Art Evans. (The Art of Computer Programming, in person.)From this story we can conclude that the word \"art\" has more than\none meaning. In fact, one of the nicest things about the word is\nthat it is used in many different senses, each of which is quite\nappropriate in connection with computer programming. While preparing\nthis talk, I went to the library to find out what people have written\nabout the word \"art\" through the years; and after spending several\nfascinating days in the stacks, I came to the conclusion that \"art\"\nmust be one of the most interesting words in the English language.The Arts of OldIf we go back to Latin roots, we find ars, artis meaning\n\"skill.\" It is perhaps significant that the corresponding Greek\nword was τεχνη, the root of both \"technology\"\nand \"technique.\"Nowadays when someone speaks of \"art\" you probably think first of\n\"fine arts\" such as painting and sculpture, but before the twentieth\ncentury the word was generally used in quite a different sense.\nSince this older meaning of \"art\" still survives in many idioms,\nespecially when we are contrasting art with science, I would like\nto spend the next few minutes talking about art in its classical\nsense.In medieval times, the first universities were established to teach\nthe seven so-called \"liberal arts,\" namely grammar, rhetoric, logic,\narithmetic, geometry, music, and astronomy. Note that this is quite\ndifferent from the curriculum of today's liberal arts colleges, and\nthat at least three of the original seven liberal arts are important\ncomponents of computer science. At that time, an \"art\" meant something\ndevised by man's intellect, as opposed to activities derived from\nnature or instinct; \"liberal\" arts were liberated or free, in\ncontrast to manual arts such as plowing (cf. [6]). During the middle\nages the word \"art\" by itself usually meant logic [4], which usually\nmeant the study of syllogisms.Science vs. ArtThe word \"science\" seems to have been used for many years in about\nthe same sense as \"art\"; for example, people spoke also of the seven\nliberal sciences, which were the same as the seven liberal arts\n[1].  Duns Scotus in the thirteenth century called logic \"the Science\nof Sciences, and the Art of Arts\" (cf. [12, p.  34f]). As civilization\nand learning developed, the words took on more and more independent\nmeanings, \"science\" being used to stand for knowledge, and \"art\"\nfor the application of knowledge. Thus, the science of astronomy\nwas the basis for the art of navigation. The situation was almost\nexactly like the way in which we now distinguish between \"science\"\nand \"engineering.\"Many authors wrote about the relationship between art and science\nin the nineteenth century, and I believe the best discussion was\ngiven by John Stuart Mill. He said the following things, among\nothers, in 1843 [28]:\nSeveral sciences are often\nnecessary to form the groundwork of a single art. Such is the\ncomplication of human affairs, that to enable one thing to be\ndone, it is often requisite to know the nature and\nproperties of many things... Art in general consists of the truths\nof Science, arranged in the most convenient order for practice,\ninstead of the order which is the most convenient for thought.\nScience groups and arranges its truths so as to enable us to take\nin at one view as much as possible of the general order of the\nuniverse. Art... brings together from parts of the field of science\nmost remote from one another, the truths relating to the production\nof the different and heterogeneous conditions necessary to each\neffect which the exigencies of practical life require.\nAs I was looking up these things about the meanings of \"art,\" I\nfound that authors have been calling for a transition from art to\nscience for at least two centuries. For example, the preface to a\ntextbook on mineralogy, written in 1784, said the following [17]:\n\"Previous to the year 1780, mineralogy, though tolerably understood\nby many as an Art, could scarce be deemed a Science.\"According to most dictionaries \"science\" means knowledge that has\nbeen logically arranged and systematized in the form of general\n\"laws.\" The advantage of science is that it saves us from the need\nto think things through in each individual case; we can turn our\nthoughts to higher-level concepts. As John Ruskin wrote in 1853\n[32]: \"The work of science is to substitute facts for appearances,\nand demonstrations for impressions.\"It seems to me that if the authors I studied were writing today,\nthey would agree with the following characterization: Science is\nknowledge which we understand so well that we can teach it to a\ncomputer; and if we don't fully understand something, it is an art\nto deal with it. Since the notion of an algorithm or a computer\nprogram provides us with an extremely useful test for the depth of\nour knowledge about any given subject, the process of going from\nan art to a science means that we learn how to automate something.Artificial intelligence has been making significant progress, yet\nthere is a huge gap between what computers can do in the foreseeable\nfuture and what ordinary people can do. The mysterious insights\nthat people have when speaking, listening, creating, and even when\nthey are programming, are still beyond the reach of science; nearly\neverything we do is still an art.From this standpoint it is certainly desirable to make computer\nprogramming a science, and we have indeed come a long way in the\n15 years since the publication of the remarks I quoted at the\nbeginning of this talk.  Fifteen years ago computer programming was\nso badly understood that hardly anyone even thought about\nproving programs correct; we just fiddled with a program until we\n\"knew\" it worked. At that time we didn't even know how to express\nthe concept that a program was correct, in any rigorous way.\nIt is only in recent years that we have been learning about the\nprocesses of abstraction by which programs are written and understood;\nand this new knowledge about programming is currently producing\ngreat payoffs in practice, even though few programs are actually\nproved correct with complete rigor, since we are beginning to\nunderstand the principles of program structure. The point is that\nwhen we write programs today, we know that we could in principle\nconstruct formal proofs of their correctness if we really wanted\nto, now that we understand how such proofs are formulated. This\nscientific basis is resulting in programs that are significantly\nmore reliable than those we wrote in former days when intuition was\nthe only basis of correctness.The field of \"automatic programming\" is one of the major areas of\nartificial intelligence research today.  Its proponents would love\nto be able to give a lecture entitled \"Computer Programming as an\nArtifact\" (meaning that programming has become merely a relic of\nbygone days), because their aim is to create machines that write\nprograms better than we can, given only the problem specification.\nPersonally I don't think such a goal will ever be completely attained,\nbut I do think that their research is extremely important, because\neverything we learn about programming helps us to improve our own\nartistry. In this sense we should continually be striving to transform\nevery art into a science: in the process, we advance the\nart.Science and ArtOur discussion indicates that computer\nprogramming is by now both a science and an art, and that\nthe two aspects nicely complement each other. Apparently most authors\nwho examine such a question come to this same conclusion, that their\nsubject is both a science and an art, whatever their subject is\n(cf. [25]). I found a book about elementary photography, written\nin 1893, which stated that \"the development of the photographic\nimage is both an art and a science\" [13]. In fact, when I first\npicked up a dictionary in order to study the words \"art\" and\n\"science,\" I happened to glance at the editor's preface, which began\nby saying, \"The making of a dictionary is both a science and an\nart.\" The editor of Funk & Wagnall's dictionary [27] observed that\nthe painstaking accumulation and classification of data about words\nhas a scientific character, while a well-chosen phrasing of definitions\ndemands the ability to write with economy and precision: \"The science\nwithout the art is likely to be ineffective; the art without the\nscience is certain to be inaccurate.\"When preparing this talk I looked through the card catalog at\nStanford library to see how other people have been using the words\n\"art\" and \"science\" in the titles of their books. This turned out\nto be quite interesting.For example, I found two books entitled The Art of Playing the\nPiano [5, 15], and others called The Science of Pianoforte\nTechnique [10], The Science of Pianoforte Practice [30].\nThere is also a book called The Art of Piano Playing: A Scientific\nApproach [22].Then I found a nice little book entitled The Gentle Art of\nMathematics [31], which made me somewhat sad that I can't\nhonestly describe computer programming as a \"gentle art.\" I had\nknown for several years about a book called The Art of\nComputation, published in San Francisco, 1879, by a man named\nC. Frusher Howard [14]. This was a book on practical business\narithmetic that had sold over 400,000 copies in various editions\nby 1890.  I was amused to read the preface, since it shows that\nHoward's philosophy and the intent of his title were quite different\nfrom mine; he wrote: \"A knowledge of the Science of Number is of\nminor importance; skill in the Art of Reckoning is absolutely\nindispensible.\"Several books mention both science and art in their titles, notably\nThe Science of Being and Art of Living by Maharishi Mahesh\nYogi [24]. There is also a book called The Art of Scientific\nDiscovery [11], which analyzes how some of the great discoveries\nof science were made.So much for the word \"art\" in its classical meaning.  Actually when\nI chose the title of my books, I wasn't thinking primarily of art\nin this sense, I was thinking more of its current connotations.\nProbably the most interesting book which turned up in my search was\na fairly recent work by Robert E. Mueller called The Science of\nArt [29]. Of all the books I've mentioned, Mueller's comes\nclosest to expressing what I want to make the central theme of my\ntalk today, in terms of real artistry as we now understand the term.\nHe observes: \"It was once thought that the imaginative outlook of\nthe artist was death for the scientist. And the logic of science\nseemed to spell doom to all possible artistic flights of fancy.\"\nHe goes on to explore the advantages which actually do result from\na synthesis of science and art.A scientific approach is generally characterized by the words\nlogical, systematic, impersonal, calm, rational, while an artistic\napproach is characterized by the words aesthetic, creative,\nhumanitarian, anxious, irrational.  It seems to me that both of\nthese apparently contradictory approaches have great value with\nrespect to computer programming.Emma Lehmer wrote in 1956 that she had found coding to be \"an\nexacting science as well as an intriguing art\" [23]. H.S.M. Coxeter\nremarked in 1957 that he sometimes felt \"more like an artist than\na scientist\" [7]. This was at the time C.P. Snow was beginning to\nvoice his alarm at the growing polarization between \"two cultures\"\nof educated people [34, 35].  He pointed out that we need to combine\nscientific and artistic values if we are to make real progress.Works of ArtWhen I'm sitting in an audience listening to a long lecture, my\nattention usually starts to wane at about this point in the hour.\nSo I wonder, are you getting a little tired of my harangue about\n\"science\" and \"art\"?  I really hope that you'll be able to listen\ncarefully to the rest of this, anyway, because now comes the part\nabout which I feel most deeply.When I speak about computer programming as an art, I am thinking\nprimarily of it as an art form, in an aesthetic sense. The\nchief goal of my work as educator and author is to help people learn\nhow to write beautiful programs.  It is for this reason I\nwas especially pleased to learn recently [32] that my books actually\nappear in the Fine Arts Library at Cornell University.  (However,\nthe three volumes apparently sit there neatly on the shelf, without\nbeing used, so I'm afraid the librarians may have made a mistake\nby interpreting my title literally.)My feeling is that when we prepare a program, it can be like composing\npoetry or music; as Andrei Ershov has said [9], programming can\ngive us both intellectual and emotional satisfaction, because it\nis a real achievement to master complexity and to establish a system\nof consistent rules.Furthermore when we read other people's programs, we can recognize\nsome of them as genuine works of art. I can still remember the great\nthrill it was for me to read the listing of Stan Poley's SOAP II\nassembly program in 1958; you probably think I'm crazy, and styles\nhave certainly changed greatly since then, but at the time it meant\na great deal to me to see how elegant a system program could be,\nespecially by comparison with the heavy-handed coding found in other\nlistings I had been studying at the same time. The possibility of\nwriting beautiful programs, even in assembly language, is what got\nme hooked on programming in the first place.Some programs are elegant, some are exquisite, some are sparkling.\nMy claim is that it is possible to write grand programs,\nnoble programs, truly magnificent ones!Taste and StyleThe idea of style in programming is now coming to the forefront\nat last, and I hope that most of you have seen the excellent little\nbook on Elements of Programming Style by Kernighan and Plauger\n[16]. In this connection it is most important for us all to remember\nthat there is no one \"best\" style; everybody has his own preferences,\nand it is a mistake to try to force people into an unnatural mold.\nWe often hear the saying, \"I don't know anything about art, but I\nknow what I like.\" The important thing is that you really like\nthe style you are using; it should be the best way you prefer to\nexpress yourself.Edsger Dijkstra stressed this point in the preface to his Short\nIntroduction to the Art of Programming [8]:\nIt is\nmy purpose to transmit the importance of good taste and style in\nprogramming, [but] the specific elements of style presented serve\nonly to illustrate what benefits can be derived from \"style\" in\ngeneral. In this respect I feel akin to the teacher of composition\nat a conservatory: He does not teach his pupils how to compose a\nparticular symphony, he must help his pupils to find their own style\nand must explain to them what is implied by this. (It has been this\nanalogy that made me talk about \"The Art of Programming.\")\nNow we must ask ourselves, What is good style, and what is bad\nstyle? We should not be too rigid about this in judging other\npeople's work. The early nineteenth-century philosopher Jeremy\nBentham put it this way [3, Bk. 3, Ch. 1]:  Judges of\nelegance and taste consider themselves as benefactors to the human\nrace, whilst they are really only the interrupters of their pleasure...\nThere is no taste which deserves the epithet good, unless\nit be the taste for such employments which, to the pleasure actually\nproduced by them, conjoin some contingent or future utility: there\nis no taste which deserves to be characterized as bad, unless it\nbe a taste for some occupation which has a mischievous tendency.\nWhen we apply our own prejudices to \"reform\" someone\nelse's taste, we may be unconsciously denying him some entirely\nlegitimate pleasure. That's why I don't condemn a lot of things\nprogrammers do, even though I would never enjoy doing them myself.\nThe important thing is that they are creating something they\nfeel is beautiful.In the passage I just quoted, Bentham does give us some advice about\ncertain principles of aesthetics which are better than others,\nnamely the \"utility\" of the result. We have some freedom in setting\nup our personal standards of beauty, but it is especially nice when\nthe things we regard as beautiful are also regarded by other people\nas useful. I must confess that I really enjoy writing computer\nprograms; and I especially enjoy writing programs which do the\ngreatest good, in some sense.There are many senses in which a program can be \"good,\" of course.\nIn the first place, it's especially good to have a program that\nworks correctly. Secondly it is often good to have a program that\nwon't be hard to change, when the time for adaptation arises. Both\nof these goals are achieved when the program is easily readable and\nunderstandable to a person who knows the appropriate language.Another important way for a production program to be good is for\nit to interact gracefully with its users, especially when recovering\nfrom human errors in the input data. It's a real art to compose\nmeaningful error messages or to design flexible input formats which\nare not error-prone.Another important aspect of program quality is the efficiency with\nwhich the computer's resources are actually being used. I am sorry\nto say that many people nowadays are condemning program efficiency,\ntelling us that it is in bad taste. The reason for this is that we\nare now experiencing a reaction from the time when efficiency was\nthe only reputable criterion of goodness, and programmers in the\npast have tended to be so preoccupied with efficiency that they\nhave produced needlessly complicated code; the result of this\nunnecessary complexity has been that net efficiency has gone down,\ndue to difficulties of debugging and maintenance.The real problem is that programmers have spent far too much time\nworrying about efficiency in the wrong places and at the wrong\ntimes; premature optimization is the root of all evil (or at least\nmost of it) in programming.We shouldn't be penny wise and pound foolish, nor should we always\nthink of efficiency in terms of so many percent gained or lost in\ntotal running time or space. When we buy a car, many of us are\nalmost oblivious to a difference of $50 or $100 in its price, while\nwe might make a special trip to a particular store in order to buy\na 50 cent item for only 25 cents. My point is that there is a time\nand place for efficiency; I have discussed its proper role in my\npaper on structured programming, which appears in the current issue\nof Computing Surveys [21].Less Facilities: More EnjoymentOne rather curious thing I've noticed about aesthetic satisfaction\nis that our pleasure is significantly enhanced when we accomplish\nsomething with limited tools.  For example, the program of which I\npersonally am most pleased and proud is a compiler I once wrote for\na primitive minicomputer which had only 4096 words of memory, 16\nbits per word. It makes a person feel like a real virtuoso to achieve\nsomething under such severe restrictions.A similar phenomenon occurs in many other contexts. For example,\npeople often seem to fall in love with their Volkswagens but rarely\nwith their Lincoln Continentals (which presumably run much better).\nWhen I learned programming, it was a popular pastime to do as much\nas possible with programs that fit on only a single punched card.\nI suppose it's this same phenomenon that makes APL enthusiasts\nrelish their \"one-liners.\" When we teach programming nowadays, it\nis a curious fact that we rarely capture the heart of a student for\ncomputer science until he has taken a course which allows \"hands\non\" experience with a minicomputer. The use of our large-scale\nmachines with their fancy operating systems and languages doesn't\nreally seem to engender any love for programming, at least not at\nfirst.It's not obvious how to apply this principle to increase programmers'\nenjoyment of their work. Surely programmers would groan if their\nmanager suddenly announced that the new machine will have only half\nas much memory as the old. And I don't think anybody, even the most\ndedicated \"programming artists,\" can be expected to welcome such a\nprospect, since nobody likes to lose facilities unnecessarily.\nAnother example may help to clarify the situation: Film-makers\nstrongly resisted the introduction of talking pictures in the 1920's\nbecause they were justly proud of the way they could convey words\nwithout sound. Similarly, a true programming artist might well\nresent the introduction of more powerful equipment; today's mass\nstorage devices tend to spoil much of the beauty of our old tape\nsorting methods. But today's film makers don't want to go back to\nsilent films, not because they're lazy but because they know it is\nquite possible to make beautiful movies using the improved technology.\nThe form of their art has changed, but there is still plenty of\nroom for artistry.How did they develop their skill? The best film makers through the\nyears usually seem to have learned their art in comparatively\nprimitive circumstances, often in other countries with a limited\nmovie industry. And in recent years the most important things we\nhave been learning about programming seem to have originated with\npeople who did not have access to very large computers. The moral\nof this story, it seems to me, is that we should make use of the\nidea of limited resources in our own education. We can all benefit\nby doing occasional \"toy\" programs, when artificial restrictions\nare set up, so that we are forced to push our abilities to the\nlimit. We shouldn't live in the lap of luxury all the time, since\nthat tends to make us lethargic. The art of tackling miniproblems\nwith all our energy will sharpen our talents for the real problems,\nand the experience will help us to get more pleasure from our\naccomplishments on less restricted equipment.In a similar vein, we shouldn't shy away from \"art for art's sake\";\nwe shouldn't feel guilty about programs that are just for fun. I\nonce got a great kick out of writing a one-statement ALGOL program\nthat invoked an innerproduct procedure in such an unusual way that\nit calculated the mth prime number, instead of an innerproduct [19].\nSome years ago the students at Stanford were excited about finding\nthe shortest FORTRAN program which prints itself out, in the sense\nthat the program's output is identical to its own source text.  The\nsame problem was considered for many other languages. I don't think\nit was a waste of time for them to work on this; nor would Jeremy\nBentham, whom I quoted earlier, deny the \"utility\" of such pastimes\n[3, Bk. 3, Ch. 1]. \"On the contrary,\" he wrote, \"there is nothing,\nthe utility of which is more incontestable.  To what shall the\ncharacter of utility be ascribed, if not to that which is a source\nof pleasure?\"Providing Beautiful ToolsAnother characteristic of modern art is its emphasis on creativity.\nIt seems that many artists these days couldn't care less about\ncreating beautiful things; only the novelty of an idea is important.\nI'm not recommending that computer programming should be like modern\nart in this sense, but it does lead me to an observation that I\nthink is important. Sometimes we are assigned to a programming task\nwhich is almost hopelessly dull, giving us no outlet whatsoever for\nany creativity; and at such times a person might well come to me\nand say, \"So programming is beautiful? It's all very well for you\nto declaim that I should take pleasure in creating elegant and\ncharming programs, but how am I supposed to make this mess into a\nwork of art?\"Well, it's true, not all programming tasks are going to be fun.\nConsider the \"trapped housewife,\" who has to clean off the same\ntable every day: there's not room for creativity or artistry in\nevery situation. But even in such cases, there is a way to make a\nbig improvement: it is still a pleasure to do routine jobs if we\nhave beautiful things to work with. For example, a person will\nreally enjoy wiping off the dining room table, day after day, if\nit is a beautifully designed table made from some fine quality\nhardwood.Therefore I want to address my closing remarks to the system\nprogrammers and the machine designers who produce the systems that\nthe rest of us must work with.  Please, give us tools that\nare a pleasure to use, especially for our routine assignments,\ninstead of providing something we have to fight with. Please, give\nus tools that encourage us to write better programs, by enhancing\nour pleasure when we do so.It's very hard for me to convince college freshmen that programming\nis beautiful, when the first thing I have to tell them is how to\npunch \"slash slash JoB equals so-and-so.\" Even job control languages\ncan be designed so that they are a pleasure to use, instead of being\nstrictly functional.Computer hardware designers can make their machines much more\npleasant to use, for example by providing floating-point arithmetic\nwhich satisfies simple mathematical laws. The facilities presently\navailable on most machines make the job of rigorous error analysis\nhopelessly difficult, but properly designed operations would encourage\nnumerical analysts to provide better subroutines which have certified\naccuracy (cf. [20, p. 204]).Let's consider also what software designers can do.  One of the\nbest ways to keep up the spirits of a system user is to provide\nroutines that he can interact with.  We shouldn't make systems too\nautomatic, so that the action always goes on behind the scenes; we\nought to give the programmer-user a chance to direct his creativity\ninto useful channels. One thing all programmers have in common is\nthat they enjoy working with machines; so let's keep them in the\nloop. Some tasks are best done by machine, while others are best\ndone by human insight; and a properly designed system will find the\nright balance. (I have been trying to avoid misdirected automation\nfor many years, cf. [18].)Program measurement tools make a good case in point. For years,\nprogrammers have been unaware of how the real costs of computing\nare distributed in their programs. Experience indicates that nearly\neverybody has the wrong idea about the real bottlenecks in his\nprograms; it is no wonder that attempts at efficiency go awry so\noften, when a programmer is never given a breakdown of costs according\nto the lines of code he has written. His job is something like that\nof a newly married couple who try to plan a balanced budget without\nknowing how much the individual items like food, shelter, and\nclothing will cost. All that we have been giving programmers is an\noptimizing compiler, which mysteriously does something to the\nprograms it translates but which never explains what it does.\nFortunately we are now finally seeing the appearance of systems\nwhich give the user credit for some intelligence; they automatically\nprovide instrumentation of programs and appropriate feedback about\nthe real costs. These experimental systems have been a huge success,\nbecause they produce measurable improvements, and especially because\nthey are fun to use, so I am confident that it is only a matter of\ntime before the use of such systems is standard operating procedure.\nMy paper in Computing Surveys [21] discusses this further,\nand presents some ideas for other ways in which an appropriate\ninteractive routine can enhance the satisfaction of user programmers.Language designers also have an obligation to provide languages\nthat encourage good style, since we all know that style is strongly\ninfluenced by the language in which it is expressed. The present\nsurge of interest in structured programming has revealed that none\nof our existing languages is really ideal for dealing with program\nand data structure, nor is it clear what an ideal language should\nbe. Therefore I look forward to many careful experiments in language\ndesign during the next few years.SummaryTo summarize: We have seen that computer programming is an art,\nbecause it applies accumulated knowledge to the world, because it\nrequires skill and ingenuity, and especially because it produces\nobjects of beauty. A programmer who subconsciously views himself\nas an artist will enjoy what he does and will do it better. Therefore\nwe can be glad that people who lecture at computer conferences speak\nabout the state of the Art.References1. Bailey, Nathan.  The Universal Etymological English Dictionary.\nT. Cox, London, 1727. See \"Art,\" \"Liberal,\" and \"Science.\"2. Bauer, Walter F., Juncosa, Mario L., and Perlis, Alan J.  ACM\npublication policies and plans.  J. ACM 6 (Apr. 1959), 121-122.3. Bentham, Jeremy.  The Rationale of Reward.  Trans. from Theorie\ndes peines et des recompenses, 1811, by Richard Smith, J. & H. L.\nHunt, London, 1825.4. The Century Dictionary and Cyclopedia 1.  The Century Co., New\nYork, 1889.5. Clementi, Muzio.  The Art of Playing the Piano.  Trans. from\nL'art de jouer le pianoforte by Max Vogrich. Schirmer, New York,\n1898.6. Colvin, Sidney. \"Art.\" Encyclopaedia Britannica, eds 9, 11, 12,\n13, 1875-1926.7. Coxeter, H. S. M. Convocation address, Proc. 4th Canadian Math.\nCongress, 1957, pp. 8-10.8. Dijkstra, Edsger W. EWD316: A Short Introduction to the Art of\nProgramming.  T. H. Eindhoven, The Netherlands, Aug. 1971.9. Ershov, A. P. Aesthetics and the human factor in programming.\nComm. ACM 15 (July 1972), 501-505.10. Fielden, Thomas.  The Science of Pianoforte Technique.  Macmillan,\nLondon, 927.11. Gore, George.  The Art of Scientific Discovery.  Longmans,\nGreen, London, 1878.12. Hamilton, William.  Lectures on Logic 1.  Win. Blackwood,\nEdinburgh, 1874.13. Hodges, John A. Elementary Photography: The \"Amateur Photographer\"\nLibrary 7.  London, 1893. Sixth ed, revised and enlarged, 1907, p.\n58.14. Howard, C. Frusher. Howard's Art of Computation and golden rule\nfor equation of payments for schools, business colleges and\nself-culture .... C.F. Howard, San Francisco, 1879.15. Hummel, J.N.  The Art of Playing the Piano Forte.  Boosey,\nLondon, 1827.16. Kernighan B.W., and Plauger, P.J.  The Elements of Programming\nStyle.  McGraw-Hill, New York, 1974.17. Kirwan, Richard.  Elements of Mineralogy.  Elmsly, London, 1784.18. Knuth, Donald E. Minimizing drum latency time. J.  ACM 8 (Apr.\n1961), 119-150.19. Knuth, Donald E., and Merner, J.N. ALGOL 60 confidential.  Comm.\nACM 4 (June 1961), 268-272.20. Knuth, Donald E. Seminumerical Algorithms: The Art of Computer\nProgramming 2.  Addison-Wesley, Reading, Mass., 1969.21. Knuth, Donald E. Structured programming with go to statements.\nComputing Surveys 6 (Dec. 1974), pages in makeup.22. Kochevitsky, George.  The Art of Piano Playing: A Scientific\nApproach.  Summy-Birchard, Evanston, II1., 1967.23. Lehmer, Emma. Number theory on the SWAC.  Proc. Syrup.  Applied\nMath. 6, Amer. Math. Soc. (1956), 103-108.24. Mahesh Yogi, Maharishi.  The Science of Being and Art of Living.\nAllen & Unwin, London, 1963.25. Malevinsky, Moses L.  The Science of Playwriting.  Brentano's,\nNew York, 1925.26. Manna, Zohar, and Pnueli, Amir. Formalization of properties of\nfunctional programs.  J. ACM 17 (July 1970), 555-569.27. Marckwardt, Albert H, Preface to Funk and Wagnall's Standard\nCollege Dictionary.  Harcourt, Brace & World, New York, 1963, vii.28. Mill, John Stuart.  A System Of Logic, Ratiocinative and\nInductive.  London, 1843. The quotations are from the introduction,\nS 2, and from Book 6, Chap. 11 (12 in later editions), S 5.29. Mueller, Robert E.  The Science of Art.  John Day, New York,\n1967.30. Parsons, Albert Ross.  The Science of Pianoforte Practice.\nSchirmer, New York, 1886.31. Pedoe, Daniel.  The Gentle Art of Mathematics.  English U.\nPress, London, 1953.32. Ruskin, John.  The Stones of Venice 3.  London, 1853.33. Salton, G.A. Personal communication, June 21, 1974.34. Snow, C.P. The two cultures.  The New Statesman and Nation 52\n(Oct. 6, 1956), 413-414.35. Snow, C.P.  The Two Cultures: and a Second Look.  Cambridge\nUniversity Press, 1964.Copyright 1974, Association for Computing Machinery, Inc.  General\npermission to republish, but not for profit, all or part of this\nmaterial is granted provided that ACM's copyright notice is given\nand that reference is made to the publication, to its date of issue,\nand to the fact that reprinting privileges were granted by permission\nof the Association for Computing Machinery."},{"title":"Kragen Sitaker: Redundancy and Power","text":"It has been proposed that\nsuccinctness is power.  I have some sympathy\nwith this view; if \"power\" means anything when we are talking about\nprogramming languages, a more powerful language is one that can do\nmore with the same human effort.  Human effort in programming--\ndesign, comprehension, construction, and debugging-- correlates\nclosely with the amount of source text, so in general, less verbose\nprograms require less effort.Still, other things affect the effort required, too; some are\nlinguistic, others are not.For example, good error reporting drastically decreases the time\nrequired to find and fix problems.  This matters in proportion to the\nnumber of errors you make and how good you are at guessing about their\ncauses-- novices make a lot of errors and can't guess, while\nsuperprogrammers make few and can be pretty good at guessing.Error reporting depends crucially on redundancy.  Knuth has said [0]\nTeX would be easier to program in if it had more redundancy in the\nlanguage.  Perl eliminates most redundant data-type conversions--\nprograms are more succinct, but errors are easier.  (In one Perl\nprogram, I had a list of LIST references comprising a two-dimensional\narray of numbers.  A loop over this list incorrectly referred to\n$list[$i] rather than $list[$i][$j], and so my program happily\nmultiplied memory addresses by integers and got astronomical, and\nwrong, answers.)  Languages with different kinds of end tags, like Ada\nand XML, can usually tell you exactly which end tag you left out or\ninserted one extra of; languages that use only right parens cannot.The greater the probability a random string is a valid program, the\nharder it is to report errors well.Type-checking depends on redundancy; if any operator can be applied to\nany type, as in Forth, your only indication of type errors will be\nyour incorrect answers or crashes, while if types are only checked by\nprimitive operations, the error may be reported a long way from where\nthe type error occurs.  When I pass a value of the wrong type to a\nPython library, the ensuing error message often takes a bit of\nnoodling to connect with my own code.Redundancy, of course, reduces succinctness.Another sink of effort is looking things up in manuals.  I have to\nspend a lot of time looking things up when I work in Python; I can\nrarely remember the argument sequence for re.sub(), for example,\nwhile Perl's more idiosyncratic syntax is easier to remember.  No\ndoubt I would find it much easier to remember argument order for\nSmalltalk methods.pydoc helps a lot; just being able to type 'pydoc re.sub' instead of\nnavigating through the HTML manuals is a big help.  Having pydoc\naccess from Emacs while I was editing Python programs would help even\nmore; Emacs has supported that kind of thing in C for a long time with\nM-x man.Joel Spolsky, a fan of Microsoft's development environments, recently\npointed out [1] that static typing allows syntax-directed editors to\nprompt you with method signatures, which Microsoft's development\nenvironments actually do.  Lisp development environments can do this\n(Emacs ilisp-mode will do the same with C-c a or eldoc-mode) but it\nwould be very difficult for Python environments.[0] Interview: Donald E. Knuth\non advogato, 2000-01-25.[1] Joel on Software from\n2002-04-25, talking about \"SOAP backlash\".  Unfortunately, Joel is\nso provincial that he doesn't know how to spell \"dynamic typing\",\nspelling it \"variants\"."},{"title":"LFM and LFSP","text":"(This is from an email sent by Mike Vanier.  It is such a well-written description\nof the problems hackers face that I thought everyone should see it.)My Ph.D. research involved writing very complex simulations of nervous\nsystems.  I used a\nsimulation package that was written in C and had its own\nscripting language, all written in-house.  I extended the hell out\nof it, but the experience was so painful I don't think I can ever work on a\nlarge C project again.Since I want to continue working in this field, and\nsince I love to hack, I want to re-write the simulator \"the right way\".\nHowever, I've been dithering on the choice of language.  It's pretty clear\nthat the core simulation objects have to be written in C++.  C is too\npainful, and anything else is going to give an unacceptable hit in speed\n(simulation is one of those rare fields where it is impossible to have too\nmuch speed).  But this is probably less than 50% of the code, maybe much\nless.  The rest is infrastructure; scripting interface as well as a lot of\nsupport code.For scripting I want to use Scheme or some Lisp dialect.\nBut the language choice for infrastructure is unclear.  I could use C++,\nbut that's unnecessarily painful especially since the infrastructure is not\nspeed-critical.  So I'd decided to use Java; it's fast enough, there are a\nlot of libraries, and a lot of people know it so I could conceivably get\nothers to work on it as well.  After making this decision, my interest\nwaned and I started another (unrelated) project.In the process of working on that other project (which involves Scheme and\nObjective Caml (Ocaml), an ML dialect), it occurred to me that Ocaml would\nbe a better choice than Java for the intermediate layer.  It's faster, has\nbetter type-checking, is much more powerful, and can even be used as its\nown scripting language because of the type inference and interactive REPL.\nIf necessary, I could write a simple Lisp-like language on top of Ocaml\nwith little difficulty.  The C interface to Ocaml is also quite mature, and\nthere is a good-sized standard library (though nothing like the enormous\nJava libraries).  Also, it's much lighter weight than Java.  But here is\nthe most important reason: it's a hell of a lot more fun to program in than\nJava.Writing Java code, though not particulary painful in the sense that\nC is painful (core dumps etc.), puts me to sleep.  Writing Ocaml (which is\na \"language designed for smart people\" if there ever was one) is exciting.\nMy motivation to tackle the project has tripled overnight.  The interesting\nquestion is: why is Ocaml so much more fun than Java?  Why are \"languages\ndesigned for smart people\" (LFSPs) so much more fun to program in than\n\"languages designed for the masses\" (LFMs)?One possibility is that LFSPs tend to be more unusual, and hence are more\nnovel.  I'll admit that this is part of the answer, but it misses the main\npoint.  Any new language is going to be novel, but the novelty usually\nwears off quickly.  The real point is that LFSPs have a much greater\nsupport for abstraction, and in particular for defining your own\nabstractions, than LFMs.This is not accidental; LFMs deliberately\nrestrict the abstractive power of the language, because of the feeling that\nusers \"can't handle\" that much power.  This means that there is a glass\nceiling of abstraction; your designs can only get this abstract and no\nmore.  This is reassuring to Joe Average, because he knows that he isn't\ngoing to see any code he can't understand.  It is reassuring to Joe Boss,\nbecause he knows that he can always fire you and hire another programmer to\nmaintain and extend your code.  But it is incredibly frustrating to Joe\nWizard Hacker, because he knows that his design can be made N times more\ngeneral and more abstract but the language forces him to do the Same Old\nThing again and again.This grinds you down after a while; if I had a\nnickel for every time I've written \"for (i = 0; i < N; i++)\" in C I'd be a\nmillionaire.  I've known several programmers who after only a few years of\nhardcore hacking get burned out to the point where they say they never want\nto code again.  This is really tragic, and I think part of it is that\nthey're using LFMs when they should be using LFSPs."},{"title":"Labels","text":"January 2004A friend asked me to give some examples of labels\nused to suppress ideas.\nI started searching, and the list grew and grew.Most of the terms listed below were found online, in laws,\nregulations, acceptable use policies,\nthe codes of conduct of schools, universities, businesses, and\ngovernment agencies, descriptions of web filter criteria, and articles\nabout censorship.\nIt was depressing reading,\nrather like all the spams I used to read before I tried\nwriting statistical filters.\nI've tried to include every label used to criticize statements\nin the past 100 years\nexcept truly neutral ones like false, untrue, mistaken, etc.\nSo there are of course contradictions.  For example, some web filters\nforbid access to web sites mentioning homosexuality, whereas many university\nspeech codes forbid remarks critical of it.I've only included labels used in the English-speaking world, which\nunfortunately excludes the marvellous efflorescence in\nthe Soviet Union and China during the twentieth century.The most interesting thing I found was the\nHays Code,\nwhich  controlled the American movie industry from 1930 to 1966.\nWhat a piece of work.  I had no idea that it\nforbade, for example, the depiction of racially mixed couples.Another surprise: I found these labels included some words that I\nmyself use: \"unscientific\", for example.\nIs it wrong to call something unscientific?  I think it can be.\nLabels are lazy.  It is not enough merely to label an idea as\nunscientific, or any of the other terms below.  One ought to\nprovide more detail.If you made a graph representing which of these words occurred\ntogether, I think you'd find the central node was the one\nrepresenting \"inappropriate\".  That seems the most general (and thus\nleast meaningful) label at the moment. As far as I can tell,\nit is little more than a five-syllable synonym for \"bad\".ableist\nabnormal\nabusive\nadult\nage-inappropriate\nageist\naggressive\nannoying\nanti-arab\nanti-black\nanti-disability\nanti-gay\nanti-intellectual\nanti-semitic\natheistic\nbiased\nbigoted\nblasphemous\nbourgeois\nclassist\ncoarse\ncommunist\ncorrupting\ncritical\ncrude\ndangerous\ndegenerate\ndegrading\ndefamatory\ndefeatist\ndemeaning\nderogatory\ndestructive\ndeviant\ndirty\ndisabilist\ndiscriminatory\ndisgusting\ndisloyal\ndisrespectful\ndisruptive\ndistasteful\ndisturbing\ndivisive\nelitist\nethnocentric\nerotic\neurocentric\nexclusionary\nexplicit\nextremist\nfascist\nfifth columnist\nfilthy\nfrivolous\nfoul\ngay\ngenderist\ngraphic\ngross\nharmful\nharrassing\nhateful\nhate-ist\nheterosexist\nholocaust-denying\nhomophobic\nhomosexual\nhostile\nhurtful\nillegal\nimmodest\nimmoral\nimpertinent\nimpious\nimpolite\nimproper\nimpure\nin bad taste\ninappropriate\nindecent\nindecorous\nindelicate\ninflammatory\ninsensitive\ninsulting\nintimidating\nintolerant\nirregular\nirreverent\njudgemental\nlecherous\nlesbian\nlesbophobic\nlewd\nlibellous\nlicentious\nlookist\nlow\nlubricious\nlustful\nmalicious\nmenacing\nmilitant\nmisogynistic\nmocking\nmorbid\nnationalistic\nnazi\nnegative\nobjectifying\nobjectionable\nobscene\noff-color\noffensive\norientalist\nout of line\npatriarchal\nperverted\nphallocentric\npornographic\nprejudiced\nprofane\nprovocative\nprurient\nquestionable\nracial\nracially insensitive\nracist\nradical\nreactionary\nrevisionist\nrisque\nrude\nsacrilegious\nsalacious\nsatanic\nscandalous\nscatalogical\nscurrilous\nselfish\nsexist\nsexual\nsexually explicit\nsexually oriented\nshameful\nsinful\nsizeist\nslanderous\nsmutty\nspeciesist\nstereotyping\nsubversive\nsuggestive\nsupremacist\ntactless\ntasteless\nthreatening\ntreasonous\nunacceptable\nunamerican\nunauthorized\nunbecoming\nuncalled-for\nunchaste\nunchristian\nuncivil\nunclean\nundemocratic\nundesirable\nundignified\nunethical\nunfair\nunfit\nunfitting\nungenteel\nunhealthy\nunlawful\nunnatural\nunnecessary\nunmentionable\nunpatriotic\nunprofessional\nunrefined\nunscientific\nunseemly\nunsuitable\nuntasteful\nunthinkable\nuntoward\nunwanted\nunwelcome\nunwholesome\noutdated\nviolent\nvulgar\nwanton\nxenophobic"},{"title":"Learning from Founders","text":"January 2007(Foreword to Jessica Livingston's\nFounders at Work.)Apparently sprinters reach their highest speed right out of the\nblocks, and spend the rest of the race slowing down.  The winners\nslow down the least.  It's that way with most startups too.  The\nearliest phase is usually the most productive.  That's when they\nhave the really big ideas.  Imagine what Apple was like when 100%\nof its employees were either Steve Jobs or Steve Wozniak.The striking thing about this phase is that it's completely different\nfrom most people's idea of what business is like.  If you looked\nin people's heads (or stock photo collections) for images representing\n\"business,\" you'd get images of people dressed up in suits, groups\nsitting around conference tables looking serious, Powerpoint\npresentations, people producing thick reports for one another to\nread.   Early stage startups are the exact opposite of this.  And\nyet they're probably the most productive part of the whole economy.Why the disconnect?  I think there's a general principle at work\nhere: the less energy people expend on performance, the more they\nexpend on appearances to compensate.  More often than not the energy\nthey expend on seeming impressive makes their actual performance\nworse.  A few years ago I read an article in which a car magazine\nmodified the \"sports\" model of some production car to get the fastest\npossible standing quarter mile.  You know how they did it?  They\ncut off all the crap the manufacturer had bolted onto the car to\nmake it look fast.Business is broken the same way that car was.  The effort that goes\ninto looking productive is not merely wasted, but actually makes\norganizations less productive.  Suits, for example.  Suits do not\nhelp people to think better.  I bet most executives at big companies\ndo their best thinking when they wake up on Sunday morning and go\ndownstairs in their bathrobe to make a cup of coffee.  That's when\nyou have ideas.  Just imagine what a company would be like if people\ncould think that well at work.  People do in startups, at least\nsome of the time.  (Half the time you're in a panic because your\nservers are on fire, but the other half you're thinking as deeply\nas most people only get to sitting alone on a Sunday morning.)Ditto for most of the other differences between startups and what\npasses for productivity in big companies.  And yet conventional\nideas of professionalism have such an iron grip on our minds that\neven startup founders are affected by them.  In our startup, when\noutsiders came to visit we tried hard to seem \"professional.\" We'd\nclean up our offices, wear better clothes, try to arrange that a\nlot of people were there during conventional office hours.  In fact,\nprogramming didn't get done by well-dressed people at clean desks\nduring office hours.  It got done by badly dressed people (I was\nnotorious for programmming wearing just a towel) in offices strewn\nwith junk at 2 in the morning.  But no visitor would understand\nthat.  Not even investors, who are supposed to be able to recognize\nreal productivity when they see it.  Even we were affected by the\nconventional wisdom.  We thought of ourselves as impostors, succeeding\ndespite being totally unprofessional.  It was as if we'd created a\nFormula 1 car but felt sheepish because it didn't look like a car\nwas supposed to look.In the car world, there are at least some people who know that a\nhigh performance car looks like a Formula 1 racecar, not a sedan\nwith giant rims and a fake spoiler bolted to the trunk.  Why not\nin business?  Probably because startups are so small.  The really\ndramatic growth happens when a startup only has three or four people,\nso only three or four people see that, whereas tens of thousands\nsee business as it's practiced by Boeing or Philip Morris.This book can help fix that problem, by showing everyone what, till\nnow, only a handful people got to see: what happens in the first\nyear of a startup.  This is what real productivity looks like. This\nis the Formula 1 racecar.  It looks weird, but it goes fast.Of course, big companies won't be able to do everything these\nstartups do.  In big companies there's always going to be more\npolitics, and less scope for individual decisions.  But seeing what\nstartups are really like will at least show other organizations\nwhat to aim for.  The time may soon be coming when instead of\nstartups trying to seem more corporate, corporations will try to\nseem more like startups.  That would be a good thing.Japanese\nTranslation"},{"title":"Let's Do Lunch","text":"November 2010Note: This item was originally part of the silent auction, but\nit has now been switched to the live auction.  The live auction\nstarts at 8 pm but if you want to bid you should show up by 7\nto buy a ticket.One of the items at this year's Harvest\nMoon Auction for the Bing Nursery School Scholarship Fund is\nlunch with me to talk about your startup or startup idea.  I'll\ntake the winner to lunch somewhere good and we can either talk about\nwhat you plan to work on, or if you aren't sure yet, figure out an\nidea that you'd be well-suited to work on.  It's effectively the\nfirst two office hour sessions of Y Combinator, but with no dilution\nand better food.The item in question is #406.  The auction is on the evening of\nNovember 13 at the Stanford Alumni Center,\n326 Galvez\nStreet Stanford, California.\nThe live auction starts at 8 pm, but you have to buy a $20 ticket\nto participate, and the Bing folks recommend you get there by 7\nat the latest to buy your ticket.Sorry, there's no way to bid remotely.  You have to show up in person."},{"title":"Let the Other 95% of Great Programmers In","text":"December 2014American technology companies want the government to make immigration\neasier because they say they can't find enough programmers in the\nUS.  Anti-immigration people say that instead of letting foreigners\ntake these jobs, we should train more Americans to be programmers.\nWho's right?The technology companies are right. What the anti-immigration people\ndon't understand is that there is a huge variation in ability between\ncompetent programmers and exceptional ones, and while you can train\npeople to be competent, you can't train them to be exceptional.\nExceptional programmers have an aptitude for and interest in\nprogramming that is not merely the product of training.\n[1]The US has less than 5% of the world's population.  Which means if\nthe qualities that make someone a great programmer are evenly\ndistributed, 95% of great programmers are born outside the US.The anti-immigration people have to invent some explanation to\naccount for all the effort technology companies have expended trying\nto make immigration easier.  So they claim it's because they want\nto drive down salaries.  But if you talk to startups, you find\npractically every one over a certain size has gone through legal\ncontortions to get programmers into the US, where they then\npaid them the same as they'd have paid an American.  Why would they\ngo to extra trouble to get programmers for the same price?  The\nonly explanation is that they're telling the truth: there are just\nnot enough great programmers to go around.\n[2]I asked the CEO of a startup with about 70 programmers how many\nmore he'd hire if he could get all the great programmers he wanted.\nHe said \"We'd hire 30 tomorrow morning.\"  And this is one of the\nhot startups that always win recruiting battles. It's the same all\nover Silicon Valley.  Startups are that constrained for talent.It would be great if more Americans were trained as programmers,\nbut no amount of training can flip a ratio as overwhelming as 95\nto 5. Especially since programmers are being trained in other\ncountries too.  Barring some cataclysm, it will always be true that\nmost great programmers are born outside the US.  It will always be\ntrue that most people who are great at anything are born outside\nthe US.\n[3]Exceptional performance implies immigration.  A country with only\na few percent of the world's population will be exceptional in some\nfield only if there are a lot of immigrants working in it.But this whole discussion has taken something for granted: that if\nwe let more great programmers into the US, they'll want to come.\nThat's true now, and we don't realize how lucky we are that it is.\nIf we want to keep this option open, the best way to do it is to\ntake advantage of it: the more of the world's great programmers are\nhere, the more the rest will want to come here.And if we don't, the US could be seriously fucked. I realize that's\nstrong language, but the people dithering about this don't seem to\nrealize the power of the forces at work here.  Technology gives the\nbest programmers huge leverage.  The world market in programmers\nseems to be becoming dramatically more liquid.  And since good\npeople like good colleagues, that means the best programmers could\ncollect in just a few hubs.  Maybe mostly in one hub.What if most of the great programmers collected in one hub, and it\nwasn't here?  That scenario may seem unlikely now, but it won't be\nif things change as much in the next 50 years as they did in the\nlast 50.We have the potential to ensure that the US remains a technology\nsuperpower just by letting in a few thousand great programmers a\nyear.  What a colossal mistake it would be to let that opportunity\nslip.  It could easily be the defining mistake this generation of\nAmerican politicians later become famous for.  And unlike other\npotential mistakes on that scale, it costs nothing to fix.So please, get on with it.Notes[1]\nHow much better is a great programmer than an ordinary one?\nSo much better that you can't even measure the difference directly.\nA great programmer doesn't merely do the same work faster.  A great\nprogrammer will invent things an ordinary programmer would never\neven think of.  This doesn't mean a great programmer is infinitely\nmore valuable, because any invention has a finite market value.\nBut it's easy to imagine cases where a great programmer might invent\nthings worth 100x or even 1000x an average programmer's salary.[2]\nThere are a handful of consulting firms that rent out big\npools of foreign programmers they bring in on H1-B visas.  By all\nmeans crack down on these.  It should be easy to write legislation\nthat distinguishes them, because they are so different from technology\ncompanies.  But it is dishonest of the anti-immigration people to\nclaim that companies like Google and Facebook are driven by the\nsame motives.  An influx of inexpensive but mediocre programmers\nis the last thing they'd want; it would destroy them.[3]\nThough this essay talks about programmers, the group of people\nwe need to import is broader, ranging from designers to programmers\nto electrical engineers.  The best one could do as a general term\nmight be \"digital talent.\" It seemed better to make the argument a\nlittle too narrow than to confuse everyone with a neologism.Thanks to Sam Altman, John Collison, Patrick Collison, Jessica\nLivingston, Geoff Ralston, Fred Wilson, and Qasar Younis for reading\ndrafts of this."},{"title":"Lies We Tell Kids","text":"May 2008Adults lie constantly to kids.  I'm not saying we should stop, but\nI think we should at least examine which lies we tell and why.There may also be a benefit to us.  We were all lied to as kids,\nand some of the lies we were told still affect us.  So by studying\nthe ways adults lie to kids, we may be able to clear our heads of\nlies we were told.I'm using the word \"lie\" in a very general sense: not just overt\nfalsehoods, but also all the more subtle ways we mislead kids.\nThough \"lie\" has negative connotations, I don't mean to suggest we\nshould never do this—just that we should pay attention when\nwe do.\n[1]One of the most remarkable things about the way we lie to kids is\nhow broad the conspiracy is.  All adults know what their culture\nlies to kids about: they're the questions you answer \"Ask\nyour parents.\"  If a kid asked who won the World Series in 1982\nor what the atomic weight of carbon was, you could just tell him.\nBut if a kid asks you \"Is there a God?\" or \"What's a prostitute?\"\nyou'll probably say \"Ask your parents.\"Since we all agree, kids see few cracks in the view of the world\npresented to them.  The biggest disagreements are between parents\nand schools, but even those are small. Schools are careful what\nthey say about controversial topics, and if they do contradict what\nparents want their kids to believe, parents either pressure the\nschool into keeping\nquiet or move their kids to a new school.The conspiracy is so thorough that most kids who discover it do so\nonly by discovering internal contradictions in what they're told.\nIt can be traumatic for the ones who wake up during the operation.\nHere's what happened to Einstein:\nThrough the reading of popular scientific books I soon reached\nthe conviction that much in the stories of the Bible could not\nbe true.  The consequence was a positively fanatic freethinking\ncoupled with the impression that youth is intentionally being\ndeceived by the state through lies: it was a crushing impression.\n[2]\nI remember that feeling.  By 15 I was convinced the world was corrupt\nfrom end to end.  That's why movies like The Matrix have such\nresonance.  Every kid grows up in a fake world.  In a way it would\nbe easier if the forces behind it were as clearly differentiated\nas a bunch of evil machines, and one could make a clean break just by\ntaking a pill.ProtectionIf you ask adults why they lie to kids, the most common reason they\ngive is to protect them.  And kids do need protecting.  The environment\nyou want to create for a newborn child will be quite unlike the\nstreets of a big city.That seems so obvious it seems wrong to call it a lie.  It's certainly\nnot a bad lie to tell, to give a baby the impression the world is\nquiet and warm and safe.  But this harmless type of lie can turn\nsour if left unexamined.Imagine if you tried to keep someone in as protected an environment\nas a newborn till age 18.  To mislead someone so grossly about the\nworld would seem not protection but abuse.  That's an extreme\nexample, of course; when parents do that sort of thing it becomes\nnational news.  But you see the same problem on a smaller scale in\nthe malaise teenagers feel in suburbia.The main purpose of suburbia is to provide a protected environment\nfor children to grow up in.  And it seems great for 10 year olds.\nI liked living in suburbia when I was 10.  I didn't notice how\nsterile it was.  My whole world was no bigger than a few friends'\nhouses I bicycled to and some woods I ran around in.  On a log scale\nI was midway between crib and globe.  A suburban street was just\nthe right size.  But as I grew older, suburbia started to feel\nsuffocatingly fake.Life can be pretty good at 10 or 20, but it's often frustrating at\n15.  This is too big a problem to solve here, but certainly one\nreason life sucks at 15 is that kids are trapped in a world designed\nfor 10 year olds.What do parents hope to protect their children from by raising them\nin suburbia?  A friend who moved out of Manhattan said merely that\nher 3 year old daughter \"saw too much.\"  Off the top of my head,\nthat might include: people who are high or drunk, poverty, madness,\ngruesome medical conditions, sexual behavior of various degrees of\noddness, and violent anger.I think it's the anger that would worry me most if I had a 3 year\nold.  I was 29 when I moved to New York and I was surprised even\nthen.  I wouldn't want a 3 year old to see some of the disputes I\nsaw.  It would be too frightening.  A lot of the things adults\nconceal from smaller children, they conceal because they'd be\nfrightening, not because they want to conceal the existence of such\nthings.  Misleading the child is just a byproduct.This seems one of the most justifiable types of lying adults do to\nkids.  But because the lies are indirect we don't keep a very strict\naccounting of them.  Parents know they've concealed the facts about\nsex, and many at some point sit their kids down and explain more.\nBut few tell their kids about the differences between the real world\nand the cocoon they grew up in.  Combine this with the confidence\nparents try to instill in their kids, and every year you get a new\ncrop of 18 year olds who think they know how to run the world.Don't all 18 year olds think they know how to run the world?  Actually\nthis seems to be a recent innovation, no more than about 100 years old.\nIn preindustrial times teenage kids were junior members of the adult\nworld and comparatively well aware of their shortcomings.  They\ncould see they weren't as strong or skillful as the village smith.\nIn past times people lied to kids about some things more than we\ndo now, but the lies implicit in an artificial, protected environment\nare a recent invention.  Like a lot of new inventions, the rich got\nthis first.  Children of kings and great magnates were the first\nto grow up out of touch with the world.  Suburbia means half the\npopulation can live like kings in that respect.Sex (and Drugs)I'd have different worries about raising teenage kids in New York.\nI'd worry less about what they'd see, and more about what they'd\ndo.  I went to college with a lot of kids who grew up in Manhattan,\nand as a rule they seemed pretty jaded.  They seemed to have lost\ntheir virginity at an average of about 14 and by college had tried\nmore drugs than I'd even heard of.The reasons parents don't want their teenage kids having sex are\ncomplex.  There are some obvious dangers: pregnancy and sexually\ntransmitted diseases.  But those aren't the only reasons parents\ndon't want their kids having sex.  The average parents of a 14 year\nold girl would hate the idea of her having sex even if there were\nzero risk of pregnancy or sexually transmitted diseases.Kids can probably sense they aren't being told the whole story.\nAfter all, pregnancy and sexually transmitted diseases are just as\nmuch a problem for adults, and they have sex.What really bothers parents about their teenage kids having sex?\nTheir dislike of the idea is so visceral it's probably inborn.  But\nif it's inborn it should be universal, and there are plenty of\nsocieties where parents don't mind if their teenage kids have\nsex—indeed, where it's normal for 14 year olds to become\nmothers.  So what's going on?  There does seem to be a universal\ntaboo against sex with prepubescent children.  One can imagine\nevolutionary reasons for that.  And I think this is the main reason\nparents in industrialized societies dislike teenage kids having\nsex.  They still think of them as children, even though biologically\nthey're not, so the taboo against child sex still has force.One thing adults conceal about sex they also conceal about drugs:\nthat it can cause great pleasure.  That's what makes sex and drugs\nso dangerous. The desire for them can cloud one's judgement—which\nis especially frightening when the judgement being clouded is the\nalready wretched judgement of a teenage kid.Here parents' desires conflict.  Older societies told kids they had\nbad judgement, but modern parents want their children to be confident.\nThis may well be a better plan than the old one of putting them in\ntheir place, but it has the side effect that after having implicitly\nlied to kids about how good their judgement is, we then have to lie\nagain about all the things they might get into trouble with if they\nbelieved us.If parents told their kids the truth about sex and drugs, it would\nbe: the reason you should avoid these things is that you have lousy\njudgement.  People with twice your experience still get burned by\nthem.  But this may be one of those cases where the truth wouldn't\nbe convincing, because one of the symptoms of bad judgement is\nbelieving you have good judgement.  When you're too weak to lift\nsomething, you can tell, but when you're making a decision impetuously,\nyou're all the more sure of it.InnocenceAnother reason parents don't want their kids having sex is that\nthey want to keep them innocent.  Adults have a certain model of\nhow kids are supposed to behave, and it's different from what they\nexpect of other adults.One of the most obvious differences is the words kids are allowed\nto use.  Most parents use words when talking to other adults that\nthey wouldn't want their kids using.  They try to hide even the\nexistence of these words for as long as they can.  And this is\nanother of those conspiracies everyone participates in: everyone\nknows you're not supposed to swear in front of kids.I've never heard more different explanations for anything parents\ntell kids than why they shouldn't swear.  Every parent I know forbids\ntheir children to swear, and yet no two of them have the same\njustification.  It's clear most start with not wanting kids to\nswear, then make up the reason afterward.So my theory about what's going on is that the function of\nswearwords is to mark the speaker as an adult.  There's no difference\nin the meaning of \"shit\" and \"poopoo.\"  So why should one be ok for\nkids to say and one forbidden?  The only explanation is: by definition.\n[3]Why does it bother adults so much when kids do things reserved for\nadults?   The idea of a foul-mouthed, cynical 10 year old leaning\nagainst a lamppost with a cigarette hanging out of the corner of\nhis mouth is very disconcerting.  But why?One reason we want kids to be innocent is that we're programmed to\nlike certain kinds of helplessness.  I've several times heard mothers\nsay they deliberately refrained from correcting their young children's\nmispronunciations because they were so cute.  And if you think about\nit, cuteness is helplessness. Toys and cartoon characters meant to\nbe cute always have clueless expressions and stubby, ineffectual\nlimbs.It's not surprising we'd have an inborn desire to love and protect\nhelpless creatures, considering human offspring are so helpless for\nso long.  Without the helplessness that makes kids cute, they'd be\nvery annoying.  They'd merely seem like incompetent adults.  But\nthere's more to it than that.  The reason our hypothetical jaded\n10 year old bothers me so much is not just that he'd be annoying,\nbut that he'd have cut off his prospects for growth so early.  To\nbe jaded you have to think you know how the world works, and any\ntheory a 10 year old had about that would probably be a pretty\nnarrow one.Innocence is also open-mindedness.  We want kids to be innocent so\nthey can continue to learn.  Paradoxical as it sounds, there are\nsome kinds of knowledge that get in the way of other kinds of\nknowledge.  If you're going to learn that the world is a brutal\nplace full of people trying to take advantage of one another, you're\nbetter off learning it last.  Otherwise you won't bother learning\nmuch more.Very smart adults often seem unusually innocent, and I don't think\nthis is a coincidence.  I think they've deliberately avoided learning\nabout certain things.  Certainly I do.  I used to think I wanted\nto know everything.  Now I know I don't.DeathAfter sex, death is the topic adults lie most conspicuously about\nto kids.  Sex I believe they conceal because of deep taboos.  But\nwhy do we conceal death from kids?   Probably because small children\nare particularly horrified by it.  They want to feel safe, and death\nis the ultimate threat.One of the most spectacular lies our parents told us was about the\ndeath of our first cat.  Over the years, as we asked for more\ndetails, they were compelled to invent more, so the story grew quite\nelaborate.  The cat had died at the vet's office.  Of what?  Of the\nanaesthesia itself.  Why was the cat at the vet's office?  To be\nfixed.  And why had such a routine operation killed it?  It wasn't\nthe vet's fault; the cat had a congenitally weak heart; the anaesthesia\nwas too much for it; but there was no way anyone could have\nknown this in advance.  It was not till we were in our twenties\nthat the truth came out: my sister, then about three, had accidentally\nstepped on the cat and broken its back.They didn't feel the need to tell us the cat was now happily in cat\nheaven.  My parents never claimed that people or animals who died\nhad \"gone to a better place,\" or that we'd meet them again.  It\ndidn't seem to harm us.My grandmother told us an edited version of the death of my\ngrandfather.  She said they'd been sitting reading one day, and\nwhen she said something to him, he didn't answer.  He seemed to be\nasleep, but when she tried to rouse him, she couldn't.  \"He was\ngone.\" Having a heart attack sounded like falling asleep.  Later I\nlearned it hadn't been so neat, and the heart attack had taken most\nof a day to kill him.Along with such outright lies, there must have been a lot of changing\nthe subject when death came up.  I can't remember that, of course,\nbut I can infer it from the fact that I didn't really grasp I was\ngoing to die till I was about 19.  How could I have missed something\nso obvious for so long?  Now that I've seen parents managing the\nsubject, I can see how: questions about death are gently but firmly\nturned aside.On this topic, especially, they're met half-way by kids.  Kids often\nwant to be lied to.  They want to believe they're living in a\ncomfortable, safe world as much as their parents want them to believe\nit.\n[4]IdentitySome parents feel a strong adherence to an ethnic or religious group\nand want their kids to feel it too.  This usually requires two\ndifferent kinds of lying: the first is to tell the child that he\nor she is an X, and the second is whatever specific lies Xes\ndifferentiate themselves by believing.\n[5]Telling a child they have a particular ethnic or religious identity\nis one of the stickiest things you can tell them.  Almost anything\nelse you tell a kid, they can change their mind about later when\nthey start to think for themselves.  But if you tell a kid they're\na member of a certain group, that seems nearly impossible to shake.This despite the fact that it can be one of the most premeditated\nlies parents tell.  When parents are of different religions, they'll\noften agree between themselves that their children will be \"raised\nas Xes.\"  And it works. The kids obligingly grow up considering\nthemselves as Xes, despite the fact that if their parents had chosen\nthe other way, they'd have grown up considering themselves as Ys.One reason this works so well is the second kind of lie involved.\nThe truth is common property.  You can't distinguish your group by\ndoing things that are rational, and believing things that are true.\nIf you want to set yourself apart from other people, you have to\ndo things that are arbitrary, and believe things that are false.\nAnd after having spent their whole lives doing things that are arbitrary\nand believing things that are false, and being regarded as odd by\n\"outsiders\" on that account, the cognitive dissonance pushing\nchildren to regard themselves as Xes must be enormous.  If they\naren't an X, why are they attached to all these arbitrary beliefs\nand customs?  If they aren't an X, why do all the non-Xes call them\none?This form of lie is not without its uses.  You can use it to carry\na payload of beneficial beliefs, and they will also become part of\nthe child's identity.  You can tell the child that in addition to\nnever wearing the color yellow, believing the world was created by\na giant rabbit, and always snapping their fingers before eating\nfish, Xes are also particularly honest and industrious.  Then X\nchildren will grow up feeling it's part of their identity to be\nhonest and industrious.This probably accounts for a lot of the spread of modern religions,\nand explains why their doctrines are a combination of the useful\nand the bizarre.  The bizarre half is what makes the religion stick,\nand the useful half is the payload.\n[6]AuthorityOne of the least excusable reasons adults lie to kids is to maintain\npower over them.  Sometimes these lies are truly sinister, like a\nchild molester telling his victims they'll get in trouble if they\ntell anyone what happened to them.  Others seem more innocent; it\ndepends how badly adults lie to maintain their power, and what they\nuse it for.Most adults make some effort to conceal their flaws from children.\nUsually their motives are mixed.  For example, a father who has an\naffair generally conceals it from his children.  His motive is\npartly that it would worry them, partly that this would introduce\nthe topic of sex, and partly (a larger part than he would admit)\nthat he doesn't want to tarnish himself in their eyes.If you want to learn what lies are told to kids, read almost any\nbook written to teach them about \"issues.\"\n[7]\nPeter Mayle wrote\none called Why Are We Getting a Divorce?  It begins with the three\nmost important things to remember about divorce, one of which is:\nYou shouldn't put the blame on one parent, because divorce is\nnever only one person's fault.\n[8]\nReally?  When a man runs off with his secretary, is it always partly\nhis wife's fault?  But I can see why Mayle might have said this.\nMaybe it's more important for kids to respect their parents than\nto know the truth about them.But because adults conceal their flaws, and at the same time insist\non high standards of behavior for kids, a lot of kids grow up feeling\nthey fall hopelessly short.  They walk around feeling horribly evil\nfor having used a swearword, while in fact most of the adults around\nthem are doing much worse things.This happens in intellectual as well as moral questions.  The more\nconfident people are, the more willing they seem to be to answer a\nquestion \"I don't know.\"  Less confident people feel they have to\nhave an answer or they'll look bad.  My parents were pretty good\nabout admitting when they didn't know things, but I must have been\ntold a lot of lies of this type by teachers, because I rarely heard\na teacher say \"I don't know\" till I got to college.  I remember\nbecause it was so surprising to hear someone say that in front of\na class.The first hint I had that teachers weren't omniscient came in sixth\ngrade, after my father contradicted something I'd learned in school.\nWhen I protested that the teacher had said the opposite, my father\nreplied that the guy had no idea what he was talking about—that\nhe was just an elementary school teacher, after all.Just a teacher?  The phrase seemed almost grammatically ill-formed.\nDidn't teachers know everything about the subjects they taught?\nAnd if not, why were they the ones teaching us?The sad fact is, US public school teachers don't generally understand\nthe stuff they're teaching very well.  There are some sterling\nexceptions, but as a rule people planning to go into teaching rank\nacademically near the bottom of the college population.  So the\nfact that I still thought at age 11 that teachers were infallible\nshows what a job the system must have done on my brain.SchoolWhat kids get taught in school is a complex mix of lies.  The most\nexcusable are those told to simplify ideas to make them easy to\nlearn.  The problem is, a lot of propaganda gets slipped into the\ncurriculum in the name of simplification.Public school textbooks represent a compromise between what various\npowerful groups want kids to be told.  The lies are rarely overt.\nUsually they consist either of omissions or of over-emphasizing\ncertain topics at the expense of others.  The view of history we\ngot in elementary school was a crude hagiography, with at least one\nrepresentative of each powerful group.The famous scientists I remember were Einstein, Marie Curie, and\nGeorge Washington Carver.   Einstein was a big deal because his\nwork led to the atom bomb.  Marie Curie was involved with X-rays.\nBut I was mystified about Carver.  He seemed to have done stuff\nwith peanuts.It's obvious now that he was on the list because he was black (and\nfor that matter that Marie Curie was on it because she was a woman),\nbut as a kid I was confused for years about him.  I wonder if it\nwouldn't have been better just to tell us the truth: that there\nweren't any famous black scientists.  Ranking George Washington\nCarver with Einstein misled us not only about science, but about\nthe obstacles blacks faced in his time.As subjects got softer, the lies got more frequent.  By the time\nyou got to politics and recent history, what we were taught was\npretty much pure propaganda.  For example, we were taught to regard\npolitical leaders as saints—especially the recently martyred\nKennedy and King.  It was astonishing to learn later that they'd\nboth been serial womanizers, and that Kennedy was a speed freak to\nboot.  (By the time King's plagiarism emerged, I'd lost the ability\nto be surprised by the misdeeds of famous people.)I doubt you could teach kids recent history without teaching them\nlies, because practically everyone who has anything to say about\nit has some kind of spin to put on it.  Much recent history consists\nof spin.  It would probably be better just to teach them metafacts\nlike that.Probably the biggest lie told in schools, though, is that the way\nto succeed is through following \"the rules.\"  In fact most such\nrules are just hacks to manage large groups efficiently.PeaceOf all the reasons we lie to kids, the most powerful is probably\nthe same mundane reason they lie to us.Often when we lie to people it's not part of any conscious strategy,\nbut because they'd react violently to the truth.  Kids, almost by\ndefinition, lack self-control.  They react violently to things—and\nso they get lied to a lot.\n[9]A few Thanksgivings ago, a friend of mine found himself in a situation\nthat perfectly illustrates the complex motives we have when we lie\nto kids.  As the roast turkey appeared on the table, his alarmingly\nperceptive 5 year old son suddenly asked if the turkey had wanted\nto die.  Foreseeing disaster, my friend and his wife rapidly\nimprovised: yes, the turkey had wanted to die, and in fact had lived\nits whole life with the aim of being their Thanksgiving dinner.\nAnd that (phew) was the end of that.Whenever we lie to kids to protect them, we're usually also lying\nto keep the peace.One consequence of this sort of calming lie is that we grow up\nthinking horrible things are normal.  It's hard for us to feel a\nsense of urgency as adults over something we've literally been\ntrained not to worry about.  When I was about 10 I saw a documentary\non pollution that put me into a panic.  It seemed the planet was\nbeing irretrievably ruined.  I went to my mother afterward to ask\nif this was so.  I don't remember what she said, but she made me\nfeel better, so I stopped worrying about it.That was probably the best way to handle a frightened 10 year old.\nBut we should understand the price.  This sort of lie is one of the\nmain reasons bad things persist: we're all trained to ignore them.DetoxA sprinter in a race almost immediately enters a state called \"oxygen\ndebt.\"  His body switches to an emergency source of energy that's\nfaster than regular aerobic respiration.  But this process builds\nup waste products that ultimately require extra oxygen to break\ndown, so at the end of the race he has to stop and pant for a while\nto recover.We arrive at adulthood with a kind of truth debt.  We were told a\nlot of lies to get us (and our parents) through our childhood.  Some\nmay have been necessary.  Some probably weren't.  But we all arrive\nat adulthood with heads full of lies.There's never a point where the adults sit you down and explain all\nthe lies they told you.  They've forgotten most of them.  So if\nyou're going to clear these lies out of your head, you're going to\nhave to do it yourself.Few do.  Most people go through life with bits of packing material\nadhering to their minds and never know it.  You probably never can\ncompletely undo the effects of lies you were told as a kid, but\nit's worth trying.  I've found that whenever I've been able to undo\na lie I was told, a lot of other things fell into place.Fortunately, once you arrive at adulthood you get a valuable new\nresource you can use to figure out what lies you were told.  You're\nnow one of the liars.  You get to watch behind the scenes as adults\nspin the world for the next generation of kids.The first step in clearing your head is to realize how far you are\nfrom a neutral observer.  When I left high school I was, I thought,\na complete skeptic.  I'd realized high school was crap.  I thought\nI was ready to question everything I knew.  But among the many other\nthings I was ignorant of was how much debris there already was in\nmy head.  It's not enough to consider your mind a blank slate.  You\nhave to consciously erase it.Notes[1]\nOne reason I stuck with such a brutally simple word is that\nthe lies we tell kids are probably not quite as harmless as we\nthink.  If you look at what adults told children in the past, it's\nshocking how much they lied to them.  Like us, they did it with the\nbest intentions.  So if we think we're as open as one could reasonably\nbe with children, we're probably fooling ourselves.  Odds are people\nin 100 years will be as shocked at some of the lies we tell as we\nare at some of the lies people told 100 years ago.I can't predict which these will be, and I don't want to write an\nessay that will seem dumb in 100 years.  So instead of using special\neuphemisms for lies that seem excusable according to present fashions,\nI'm just going to call all our lies lies.(I have omitted one type: lies told to play games with kids'\ncredulity.  These range from \"make-believe,\" which is not really a\nlie because it's told with a wink, to the frightening lies told by\nolder siblings.   There's not much to say about these: I wouldn't\nwant the first type to go away, and wouldn't expect the second type\nto.)[2]\nCalaprice, Alice (ed.), The Quotable Einstein, Princeton\nUniversity Press, 1996.[3]\nIf you ask parents why kids shouldn't swear, the less educated\nones usually reply with some question-begging answer like \"it's\ninappropriate,\" while the more educated ones come up with elaborate\nrationalizations.  In fact the less educated parents seem closer\nto the truth.[4]\nAs a friend with small children pointed out, it's easy for small\nchildren to consider themselves immortal, because time seems to\npass so slowly for them.  To a 3 year old, a day feels like a month\nmight to an adult.  So 80 years sounds to him like 2400 years would\nto us.[5]\nI realize I'm going to get endless grief for classifying religion\nas a type of lie.  Usually people skirt that issue with some\nequivocation implying that lies believed for a sufficiently long\ntime by sufficiently large numbers of people are immune to the usual\nstandards for truth.  But because I can't predict which lies future\ngenerations will consider inexcusable, I can't safely omit any type\nwe tell.  Yes, it seems unlikely that religion will be out of fashion\nin 100 years, but no more unlikely than it would have seemed to\nsomeone in 1880 that schoolchildren in 1980 would be taught that\nmasturbation was perfectly normal and not to feel guilty about it.[6]\nUnfortunately the payload can consist of bad customs as well\nas good ones.  For example, there are certain qualities that some\ngroups in America consider \"acting white.\"  In fact most of them\ncould as accurately be called \"acting Japanese.\"  There's nothing\nspecifically white about such customs. They're common to all cultures\nwith long traditions of living in cities.  So it is probably a\nlosing bet for a group to consider behaving the opposite way as\npart of its identity.[7]\nIn this context, \"issues\" basically means \"things we're going\nto lie to them about.\"  That's why there's a special name for these\ntopics.[8]\nMayle, Peter, Why Are We Getting a Divorce?, Harmony, 1988.[9]\nThe ironic thing is, this is also the main reason kids lie to\nadults.  If you freak out when people tell you alarming things,\nthey won't tell you them.  Teenagers don't tell their parents what\nhappened that night they were supposed to be staying at a friend's\nhouse for the same reason parents don't tell 5 year olds the truth\nabout the Thanksgiving turkey.  They'd freak if they knew.Thanks to Sam Altman, Marc Andreessen, Trevor Blackwell,\nPatrick Collison, Jessica Livingston, Jackie McDonough, Robert\nMorris, and David Sloo for reading drafts of this.  And since there\nare some controversial ideas here, I should add that none of them\nagreed with everything in it."},{"title":"Life is Short","text":"January 2016Life is short, as everyone knows. When I was a kid I used to wonder\nabout this. Is life actually short, or are we really complaining\nabout its finiteness?  Would we be just as likely to feel life was\nshort if we lived 10 times as long?Since there didn't seem any way to answer this question, I stopped\nwondering about it.  Then I had kids.  That gave me a way to answer\nthe question, and the answer is that life actually is short.Having kids showed me how to convert a continuous quantity, time,\ninto discrete quantities. You only get 52 weekends with your 2 year\nold.  If Christmas-as-magic lasts from say ages 3 to 10, you only\nget to watch your child experience it 8 times.  And while it's\nimpossible to say what is a lot or a little of a continuous quantity\nlike time, 8 is not a lot of something.  If you had a handful of 8\npeanuts, or a shelf of 8 books to choose from, the quantity would\ndefinitely seem limited, no matter what your lifespan was.Ok, so life actually is short.  Does it make any difference to know\nthat?It has for me.  It means arguments of the form \"Life is too short\nfor x\" have great force.  It's not just a figure of speech to say\nthat life is too short for something.  It's not just a synonym for\nannoying.  If you find yourself thinking that life is too short for\nsomething, you should try to eliminate it if you can.When I ask myself what I've found life is too short for, the word\nthat pops into my head is \"bullshit.\" I realize that answer is\nsomewhat tautological.  It's almost the definition of bullshit that\nit's the stuff that life is too short for.  And yet bullshit does\nhave a distinctive character.  There's something fake about it.\nIt's the junk food of experience.\n[1]If you ask yourself what you spend your time on that's bullshit,\nyou probably already know the answer.  Unnecessary meetings, pointless\ndisputes, bureaucracy, posturing, dealing with other people's\nmistakes, traffic jams, addictive but unrewarding pastimes.There are two ways this kind of thing gets into your life: it's\neither forced on you or it tricks you.  To some extent you have to\nput up with the bullshit forced on you by circumstances.  You need\nto make money, and making money consists mostly of errands.  Indeed,\nthe law of supply and demand insures that: the more rewarding some\nkind of work is, the cheaper people will do it.  It may be that\nless bullshit is forced on you than you think, though.  There has\nalways been a stream of people who opt out of the default grind and\ngo live somewhere where opportunities are fewer in the conventional\nsense, but life feels more authentic.  This could become more common.You can do it on a smaller scale without moving.  The amount of\ntime you have to spend on bullshit varies between employers.  Most\nlarge organizations (and many small ones) are steeped in it.  But\nif you consciously prioritize bullshit avoidance over other factors\nlike money and prestige, you can probably find employers that will\nwaste less of your time.If you're a freelancer or a small company, you can do this at the\nlevel of individual customers.  If you fire or avoid toxic customers,\nyou can decrease the amount of bullshit in your life by more than\nyou decrease your income.But while some amount of bullshit is inevitably forced on you, the\nbullshit that sneaks into your life by tricking you is no one's\nfault but your own.  And yet the bullshit you choose may be harder\nto eliminate than the bullshit that's forced on you.  Things that\nlure you into wasting your time on them have to be really good at\ntricking you.  An example that will be familiar to a lot of people\nis arguing online.  When someone\ncontradicts you, they're in a sense attacking you. Sometimes pretty\novertly.  Your instinct when attacked is to defend yourself.  But\nlike a lot of instincts, this one wasn't designed for the world we\nnow live in.  Counterintuitive as it feels, it's better most of\nthe time not to defend yourself.  Otherwise these people are literally\ntaking your life.\n[2]Arguing online is only incidentally addictive. There are more\ndangerous things than that. As I've written before, one byproduct\nof technical progress is that things we like tend to become more\naddictive.  Which means we will increasingly have to make a conscious\neffort to avoid addictions—to stand outside ourselves and ask \"is\nthis how I want to be spending my time?\"As well as avoiding bullshit one should actively seek out things\nthat matter.  But different things matter to different people, and\nmost have to learn what matters to them.  A few are lucky and realize\nearly on that they love math or taking care of animals or writing,\nand then figure out a way to spend a lot of time doing it.  But\nmost people start out with a life that's a mix of things that\nmatter and things that don't, and only gradually learn to distinguish\nbetween them.For the young especially, much of this confusion is induced by the\nartificial situations they find themselves in. In middle school and\nhigh school, what the other kids think of you seems the most important\nthing in the world.  But when you ask adults what they got wrong\nat that age, nearly all say they cared too much what other kids\nthought of them.One heuristic for distinguishing stuff that matters is to ask\nyourself whether you'll care about it in the future.  Fake stuff\nthat matters usually has a sharp peak of seeming to matter.  That's\nhow it tricks you.  The area under the curve is small, but its shape\njabs into your consciousness like a pin.The things that matter aren't necessarily the ones people would\ncall \"important.\"  Having coffee with a friend matters.  You won't\nfeel later like that was a waste of time.One great thing about having small children is that they make you\nspend time on things that matter: them. They grab your sleeve as\nyou're staring at your phone and say \"will you play with me?\" And\nodds are that is in fact the bullshit-minimizing option.If life is short, we should expect its shortness to take us by\nsurprise. And that is just what tends to happen.  You take things\nfor granted, and then they're gone.  You think you can always write\nthat book, or climb that mountain, or whatever, and then you realize\nthe window has closed.  The saddest windows close when other people\ndie. Their lives are short too.  After my mother died, I wished I'd\nspent more time with her.  I lived as if she'd always be there.\nAnd in her typical quiet way she encouraged that illusion.  But an\nillusion it was. I think a lot of people make the same mistake I\ndid.The usual way to avoid being taken by surprise by something is to\nbe consciously aware of it.  Back when life was more precarious,\npeople used to be aware of death to a degree that would now seem a\nbit morbid.  I'm not sure why, but it doesn't seem the right answer\nto be constantly reminding oneself of the grim reaper hovering at\neveryone's shoulder.  Perhaps a better solution is to look at the\nproblem from the other end. Cultivate a habit of impatience about\nthe things you most want to do. Don't wait before climbing that\nmountain or writing that book or visiting your mother.  You don't\nneed to be constantly reminding yourself why you shouldn't wait.\nJust don't wait.I can think of two more things one does when one doesn't have much\nof something: try to get more of it, and savor what one has.  Both\nmake sense here.How you live affects how long you live.  Most people could do better.\nMe among them.But you can probably get even more effect by paying closer attention\nto the time you have.  It's easy to let the days rush by.  The\n\"flow\" that imaginative people love so much has a darker cousin\nthat prevents you from pausing to savor life amid the daily slurry\nof errands and alarms.  One of the most striking things I've read\nwas not in a book, but the title of one: James Salter's Burning\nthe Days.It is possible to slow time somewhat. I've gotten better at it.\nKids help.  When you have small children, there are a lot of moments\nso perfect that you can't help noticing.It does help too to feel that you've squeezed everything out of\nsome experience.  The reason I'm sad about my mother is not just\nthat I miss her but that I think of all the things we could have\ndone that we didn't.  My oldest son will be 7 soon.  And while I\nmiss the 3 year old version of him, I at least don't have any regrets\nover what might have been.  We had the best time a daddy and a 3\nyear old ever had.Relentlessly prune bullshit, don't wait to do things that matter,\nand savor the time you have.  That's what you do when life is short.Notes[1]\nAt first I didn't like it that the word that came to mind was\none that had other meanings.  But then I realized the other meanings\nare fairly closely related.  Bullshit in the sense of things you\nwaste your time on is a lot like intellectual bullshit.[2]\nI chose this example deliberately as a note to self.  I get\nattacked a lot online.  People tell the craziest lies about me.\nAnd I have so far done a pretty mediocre job of suppressing the\nnatural human inclination to say \"Hey, that's not true!\"Thanks to Jessica Livingston and Geoff Ralston for reading drafts\nof this."},{"title":"Lisp FAQ","text":"What is Lisp?Lisp is a family of programming languages descended from\na language John McCarthy invented\n(or more accurately, discovered) in the late 1950s.  The\ntwo main dialects now are Common Lisp and Scheme.\nWe're working on a new dialect called Arc.How can I learn Lisp?The way to learn any language is to write programs in it.\nYou have two main dialects to choose between: Scheme\nand Common Lisp.  They each have advantages and disadvantages,\nbut the differences between them are tiny compared to the\ndifferences between them and other languages, so if you want\nto start learning Lisp, it doesn't matter which you choose.There are good books about both dialects, and many good free\nimplementations.  So get a book and an implementation, and start trying to write\nprograms.  Read existing source code to get an idea of Lisp\nstyle.  If you run into trouble, ask on comp.lang.lisp.\nPeople there are always willing to help newbies.Which should I learn, Common Lisp or Scheme?  What's the\ndifference?Common Lisp is powerful but ugly.\nScheme is small and clean, but the standard only defines the\ninner core of the language.  If I had to deliver an application\nI'd probably use Common Lisp; if I were teaching a course I might use\nScheme (but with Common Lisp macros).Do you know a good, free Lisp implementation?There are several.  The Common Lisp implementation\nI use\nis Clisp, but\nCMUCL is also well-regarded.\nFor Scheme hacking I use Scheme\n48 and PLT Scheme.Can you recommend a book for someone who wants to learn Lisp?You might like\nthis one.Is there a good online tutorial for Lisp?Start with\nChapter 2\nof Ansi Common Lisp, which is a brief introduction to Lisp programming.\nFor more detail, see the Common Lisp\nreference\nmanual.If Lisp is so great, why don't more people use it?The root cause is probably that it looks hard, but\nit would help if there were a dialect with extensive libraries.Where can I get a copy of On Lisp?Thanks to Chip Coldwell, you can now get a Postscript\nfile of it online.It looks as if the book is going to be in print again\nsoon, but if you are determined to have a valuable\nfirst edition, you can get a used copy at\nAmazon.Is there a second edition of ANSI Common Lisp?Some databases say that there is, but there isn't; not yet\nat least.Is there a set of solutions to the problems in\nANSI Common Lisp?Unfortunately not.  I was supposed to write one, but\nwe started Viaweb right after the\nbook went to press, and I never got around to it.Where can I get a job hacking Lisp?Try the companies with Lisp applications.\nOr you could start your own.I like Lisp but my company won't let me use it.  What should I do?Try to get them to let you use Python.  Often when your employer won't let\nyou use Lisp it's because (whatever the official reason) the guy in charge\nof your department is afraid of the way Lisp source code looks.\nPython looks like an ordinary dumb language, but semantically it has a\nlot in common with Lisp, and has been\ngetting closer to Lisp over time.They might even let you use Ruby, which is even more Lisp-like.What do you think of ML and its derivatives?Most hackers I know have been disappointed by the ML family.\nLanguages with static typing would be more suitable if programs were\nsomething you thought\nof in advance, and then merely translated into code.  But that's not\nhow programs get written.The inability to have lists of mixed types is a particularly crippling\nrestriction.  It gets in the way of exploratory programming (it's\nconvenient early on to represent everything as lists), and it\nmeans you can't have real macros.Do you know anyone who does AutoLisp consulting?No, but Google\ndoes."},{"title":"Lisp Quotes","text":"\"Programs must be written for people to read, and only incidentally for\nmachines to execute.\"- Abelson & Sussman, SICP, preface to the first edition\"That language is an instrument of human reason, and not merely a medium\nfor the expression of thought, is a truth generally admitted.\"- George Boole, quoted in Iverson's Turing Award Lecture\"the greatest single programming language ever designed\"- Alan Kay, on Lisp\"One of the most important and fascinating of all computer languages is\nLisp (standing for \"List Processing\"), which was invented by John\nMcCarthy around the time Algol was invented.\"- Douglas Hofstadter, Godel, Escher, Bach\"Lisp is a programmable programming language.\"- John Foderaro, CACM, September 1991\"One\ncan even conjecture that Lisp owes its survival specifically to the\nfact that its programs are lists,\nwhich everyone, including me, has regarded as a disadvantage.\"- John McCarthy, \"Early History of Lisp\"\"Lisp isn't a language, it's a building material.\"- Alan Kay\"Greenspun's Tenth Rule of Programming: any sufficiently complicated C\nor Fortran program contains an ad hoc informally-specified bug-ridden\nslow implementation of half of Common Lisp.\"- Philip Greenspun\"Including Common Lisp.\"- Robert Morris\"Lisp is worth learning for the\nprofound enlightenment experience you will have when you finally get it;\nthat experience will make you a better programmer for the rest of your\ndays, even if you never actually use Lisp itself a lot.\"- Eric Raymond, \"How to Become a Hacker\"\"Some may say Ruby is a bad rip-off of Lisp or Smalltalk, and I\nadmit that. But it is nicer to ordinary people.\"- Matz, LL2\"We were not out to win over the Lisp programmers;\nwe were after the C++ programmers.  We managed to drag a lot of them\nabout halfway to Lisp.\"- Guy Steele, Java spec co-author\"Lisp has jokingly been called \"the most intelligent way to misuse a computer\". I think that description is a great compliment because\nit transmits the full flavor of liberation: it has assisted a number of our most gifted fellow humans in thinking previously impossible\nthoughts.\"- Edsger Dijkstra, CACM, 15:10\n\"Lisp is a programmer amplifier.\"- Martin Rodgers (first said by Chuck Moore about Forth)\"Lisp ... made me aware that software could be close to executable mathematics.\"- L. Peter Deutsch\"I object to doing things that computers can do.\"- Olin Shivers\"Common Lisp, a happy amalgam of the features of\nprevious Lisps\"- Winston & Horn, Lisp\"Imprisoned in every fat man a thin man is wildly signaling to be let out.\"- Cyril Connolly\"Common Lisp is politics, not art.\"- Scott Fahlman\"Lisp was far more powerful and flexible than any other language of its day;\nin fact, it is still a better design than most languages of today,\ntwenty-five years later. Lisp freed ITS's hackers to think in unusual\nand creative ways. It was a major factor in their successes, and remains\none of hackerdom's favorite languages.\"- Eric Raymond, in Open Sources\non MIT's first OS, ITS\"Lisp doesn't look any deader than usual to me.\"- David Thornley, reply to a question older than most languagesMost papers in computer science describe how their author learned\nwhat someone else already knew.- Peter Landin(This is a\nparaphrase.  I'd appreciate it if anyone can tell me the exact quote.)\"The only way to learn a new programming language is\nby writing programs in it.\"- Kernighan and Ritchie\"If I had a nickel for every\ntime I've written \"for (i = 0; i < N; i++)\" in C I'd be a millionaire.\"- Mike Vanier\"SQL, Lisp, and Haskell are the only programming languages that\nI've seen where one spends more time thinking than typing.\"- Philip Greenspun\"Language designers are not intellectuals.  They're not as\ninterested in thinking as you might hope.  They just want to\nget a language done and start using it.\"- Dave Moon\"A man, a plan, a canoe, pasta, heros, rajahs, a coloratura,\nmaps, snipe, percale, macaroni, a gag, a banana bag, a\ntan, a tag, a banana bag again (or a camel), a crepe,\npins, Spam, a rut, a Rolo, cash, a jar, sore hats, a\npeon, a canal-- Panama!\"- Guy Steele, CLTL2\"The continuation that obeys only obvious stack semantics,\nO grasshopper, is not the true continuation.\"- Guy Steele\"I have heard more\nthan one LISP advocate state such subjective comments as, \"LISP is the\nmost powerful and elegant programming language in the world\" and expect\nsuch comments to be taken as objective truth. I have never heard a Java,\nC++, C, Perl, or Python advocate make the same claim about their own\nlanguage of choice.\"- A guy on Slashdot.  What theory fits this data?\"Although my own previous enthusiasm has been\nfor syntactically rich languages, like the Algol family, I now\nsee clearly and concretely the force of Minsky's 1970 Turing\nLecture, in which he argued that Lisp's uniformity of structure\nand power of self reference gave the programmer capabilities\nwhose content was well worth the sacrifice of visual form.\"- Robert Floyd, Turing Award Lecture, 1979\"The key to performance is elegance, not battalions of special cases.\"- Jon Bentley and Doug McIlroy\"Don't worry about what anybody else is going to do. The best way to predict\nthe future is to invent it.\"- Alan Kay\"I suppose I should learn Lisp, but it seems so foreign.\"- Paul Graham, Nov 1983"},{"title":"Lisp for Web-Based Applications","text":"After a link to\nBeating the Averages was posted on slashdot,\nsome readers wanted to hear in more detail\nabout the specific technical advantages we got from using\nLisp in Viaweb.  For those who are interested,\nhere are some excerpts from a talk I gave in April 2001 at\nBBN Labs in Cambridge, MA."},{"title":"Lisp is a Chameleon","text":"(This is an excerpt from the influential article by John Foderaro\nin the September 1991 Communications of the ACM.)Lisp is a chameleon.  It has survived by adapting\nto changes in its surroundings.  Moreover, Lisp has\nactually thrived on changes.  When structured programming\nbecame popular in the 1970s, Lisp users immediately\nexperimented with new structured control forms and\nthe best ones were adopted as part of Lisp.\nFortran programmers could only simulate structured\nconstructs by enforcing a discipline on the use of\ngoto statements.Object-oriented programming (OOP) was another\nidea that spread through the community several years\nago.  The Smalltalk language demonstrated that OOP\nwas a very useful approach for software development.\nMany versions of Lisp added OOP through the addition\nof an object system called Flavors, which went beyond\nSmalltalk and included multiple inheritance and\nmethod combination.  Flavors added OOP to Lisp in a very\nnatural way, without upsetting existing programs....When Lisp adopts a new paradigm it not only replicates\nexisting practice, but goes beyond it to become a\ntestbed for advancing the state of the art.  Why\nhas Lisp been able to adapt so easily when other\nlanguages have not?  One reason is that Lisp is\na programmable programming language.  Not\nonly can you program in Lisp (that makes it\na programming language) but you can program the\nlanguage itself.  This is possible, in part, because\nLisp programs are represented as Lisp data objects,\nand partly because there are places during the scanning,\ncompiling and execution of Lisp programs where user-written\nprograms are given control.  Contrast this with the\nC compiler, where the only user input to the compilation\nprocess is the ability to define macros that do simple\nstring transformations on the source code."},{"title":"Made in USA","text":"November 2004(This is a new essay for the Japanese edition of\nHackers\n& Painters.\nIt tries to explain why Americans make some things well\nand others badly.)A few years ago an Italian friend of mine travelled by train from\nBoston to Providence.  She had only been in America for a\ncouple weeks and hadn't seen much of the country yet.  She arrived\nlooking astonished.  \"It's so ugly!\"People from other rich countries can scarcely imagine\nthe squalor of the man-made bits of America.  In travel books\nthey show you mostly natural environments: the Grand Canyon,\nwhitewater rafting, horses in a field.  If you see\npictures with man-made things in them, it will be either a\nview of the New York skyline shot from a discreet distance,\nor a carefully cropped image of a seacoast town in Maine.How can it be, visitors must wonder.  How can the richest country\nin the world look like this?Oddly enough, it may not be a coincidence.  Americans are good\nat some things and bad at others.  We're good at making\nmovies and software, and bad at making cars and cities.\nAnd I think we may be good at what we're good at for the same\nreason we're bad at what we're bad at.  We're impatient.\nIn America, if you want to do something, you don't worry that\nit might come out badly, or upset delicate social balances, or\nthat people might think you're getting above yourself.  If you\nwant to do something, as Nike says, just do it.This works well in some fields and badly in others.  I suspect\nit works in movies and software because they're both messy\nprocesses.  \"Systematic\"\nis the last word I'd use to describe the way\ngood programmers write software.\nCode is not something they assemble painstakingly after\ncareful planning, like the pyramids.  It's something they\nplunge into, working fast and constantly changing their minds,\nlike a charcoal sketch.In software, paradoxical\nas it sounds, good craftsmanship means working fast.\nIf you work slowly and meticulously,\nyou merely end up with a very fine implementation of your initial,\nmistaken idea.\nWorking slowly and meticulously is\npremature optimization.  Better to get a\nprototype done fast, and see what new ideas\nit gives you.It sounds like making movies works a lot like making software.\nEvery movie is a Frankenstein, full of imperfections\nand usually quite different from what was originally envisioned.\nBut interesting, and finished fairly quickly.  I think we get away with this in movies and software\nbecause they're both malleable mediums.  Boldness pays.\nAnd if at the last minute two parts don't quite\nfit, you can figure out some hack that will at least conceal\nthe problem.Not so with cars, or cities.  They are all too physical.\nIf the car business worked like software or movies, you'd\nsurpass your competitors by making a car that weighed only\nfifty pounds, or folded up to the size of a motorcycle when\nyou wanted to park it.  But with physical products there are\nmore constraints.  You don't win by dramatic innovations\nso much as by good taste and attention to detail.The trouble is, the very word \"taste\"\nsounds slightly ridiculous to American ears.\nIt seems pretentious, or frivolous, or even effeminate.\nBlue staters think it's \"subjective,\" and red staters\nthink it's for sissies.  So anyone in America\nwho really cares about design will be sailing upwind.Twenty years ago we used to hear that the problem with\nthe US car industry was the workers.\nWe don't hear that any more now that Japanese companies\nare building cars in the US.   The problem with\nAmerican cars is bad design.  You can see that just by\nlooking at them.All that extra sheet metal on the AMC Matador wasn't\nadded by the workers.  The problem\nwith this car, as with American cars today, is that it was\ndesigned by marketing people instead of designers.Why do the Japanese make better cars than us?  Some say it's\nbecause their culture encourages cooperation.  That may come\ninto it.   But in this case it seems more to the point that\ntheir culture prizes design and craftsmanship.For centuries the Japanese have made finer things than we\nhave in the West.  When you look at swords they\nmade in 1200, you just can't believe the date on the label\nis right.\nPresumably their cars fit together more\nprecisely than ours for the same reason their joinery always has.\nThey're obsessed with making things well.Not us.\nWhen we make something in America, our aim is just to get the\njob done.  Once we reach that point, we take one of two routes.\nWe can stop there, and have something crude but\nserviceable, like a Vise-grip.  Or we can improve it,\nwhich usually means encrusting it with gratuitous ornament.\nWhen we want to make a car \"better,\"\nwe stick tail fins on it, or make it\nlonger, or make the\nwindows smaller, depending on the current fashion.Ditto for houses.  In America you can have either a flimsy box banged\ntogether out of two by fours and drywall, or a McMansion-- a\nflimsy box banged together out of two by fours and drywall,\nbut larger, more dramatic-looking, and full of expensive fittings.\nRich people don't get better design or craftsmanship;\nthey just get a larger, more conspicuous version of the\nstandard house.We don't especially prize design or craftsmanship here.  What\nwe like is speed, and we're willing to do something in an ugly\nway to get it done fast.  In some\nfields, like software or movies, this is a net win.\nBut it's not just that software and movies are malleable mediums.\nIn those businesses, the designers (though they're\nnot generally called that) have more power.\nSoftware companies, at least successful ones, tend to be run\nby programmers.  And in the film industry, though producers\nmay second-guess directors, the director controls most of\nwhat appears on the screen.\nAnd so American software and movies, and Japanese cars, all\nhave this in common: the people in charge care about\ndesign-- the former because the designers are in charge, and the latter\nbecause the whole culture cares about design.I think most Japanese executives would be horrified at\nthe idea of making a bad car.  Whereas American executives,\nin their hearts, still believe the most important thing about\nMake a good car?  What's \"good?\"  It's so subjective.\nIf you want to know how to design a car, ask a focus group.Instead of relying on their own internal design compass\n(like Henry Ford did),\nAmerican car companies try to make what marketing people\nthink consumers want.  But it isn't working.  American cars continue\nto lose market share.  And the reason is that the customer\ndoesn't want what he thinks he wants.Letting focus groups design your cars for you\nonly wins in the short term.  In the long term, it pays\nto bet on good design.  The focus group may say they want the\nmeretricious feature du jour, but what they want even more is\nto imitate sophisticated buyers, and they, though a\nsmall minority, really do care about good design.\nEventually the\npimps and drug dealers notice that the doctors and lawyers\nhave switched from Cadillac to Lexus, and do the same.Apple is an interesting counterexample to the general\nAmerican trend.  If you want to buy a nice CD player, you'll\nprobably buy a Japanese one.  But if you want to buy an\nMP3 player, you'll probably buy an iPod.  What happened?\nWhy doesn't Sony dominate MP3 players?  Because Apple is\nin the consumer electronics business now, and unlike\nother American companies, they're obsessed with good design.\nOr more precisely, their CEO is.I just got an iPod, and it's not just nice.  It's\nsurprisingly nice.  For it to surprise me, it must be\nsatisfying expectations I didn't know I had.  No focus\ngroup is going to discover those.  Only a great\ndesigner can.Cars aren't the worst thing we make in America.\nWhere the just-do-it model fails most dramatically is in our cities-- or\nrather, exurbs.\nIf real estate developers operated on a large enough scale, if\nthey built whole towns, market forces would compel\nthem to build towns that didn't suck.  But they only build a\ncouple office buildings or suburban streets at a time, and the\nresult is so depressing that the inhabitants consider it a great\ntreat to fly to Europe and spend a couple weeks living what\nis, for people there, just everyday life. [1]But the just-do-it model does have advantages.  It seems the clear\nwinner for generating wealth and technical innovations\n(which are practically the same thing).  I think speed is the reason.\nIt's hard to create wealth by making a commodity.  The\nreal value is in things that are new, and if you want to\nbe the first to make something, it helps to work fast.\nFor better or worse, the just-do-it model is fast,\nwhether you're Dan Bricklin writing the prototype of VisiCalc in\na weekend, or a real estate developer\nbuilding a block of shoddy condos in a month.If I had to choose between the just-do-it model and the\ncareful model, I'd probably choose just-do-it.\nBut do we have to choose?  Could we have it both ways?\nCould Americans have nice\nplaces to live without undermining the impatient, individualistic spirit\nthat makes us good at software?  Could other countries\nintroduce more individualism into their technology companies\nand research labs without having it metastasize as strip malls?\nI'm optimistic.  It's harder to\nsay about other countries, but in the US, at least, I think\nwe can have both.Apple is an encouraging example.  They've managed to preserve\nenough of the impatient, hackerly spirit you need to write\nsoftware.  And yet when\nyou pick up a new Apple laptop, well, it doesn't\nseem American.  It's too perfect.  It seems as if it\nmust have been made by a Swedish or a Japanese company.In many technologies, version 2 has higher resolution.  Why\nnot in design generally?  I think we'll gradually see\nnational characters superseded\nby occupational characters: hackers in Japan will be allowed\nto behave with a willfulness\nthat would now seem unJapanese,\nand products in America will be designed with an\ninsistence on taste that would now seem unAmerican.\nPerhaps the most successful countries, in the future, will be\nthose most willing to ignore what are now considered\nnational characters, and do each kind of work in the way\nthat works best.  Race you.Notes[1] Japanese cities are ugly too, but for different reasons.\nJapan is prone to earthquakes, so buildings are traditionally\nseen as temporary; there is no grand tradition of  city planning\nlike the one Europeans inherited from Rome.  The other cause is\nthe notoriously corrupt relationship between the government\nand construction companies.Thanks to Trevor Blackwell, Barry Eisler, Sarah Harlin,\nShiro Kawai, Jessica Livingston, Jackie McDonough, Robert Morris,\nand Eric Raymond\nfor reading drafts of this."},{"title":"Maker's Schedule, Manager's Schedule","text":"July 2009One reason programmers dislike meetings so much is that they're on\na different type of schedule from other people.  Meetings cost them\nmore.There are two types of schedule, which I'll call the manager's\nschedule and the maker's schedule.  The manager's schedule is for\nbosses.  It's embodied in the traditional appointment book, with\neach day cut into one hour intervals.  You can block off several\nhours for a single task if you need to, but by default you change\nwhat you're doing every hour.When you use time that way, it's merely a practical problem to meet\nwith someone.  Find an open slot in your schedule, book them, and\nyou're done.Most powerful people are on the manager's schedule.  It's the\nschedule of command.  But there's another way of using time that's\ncommon among people who make things, like programmers and writers.\nThey generally prefer to use time in units of half a day at least.\nYou can't write or program well in units of an hour.  That's barely\nenough time to get started.When you're operating on the maker's schedule, meetings are a\ndisaster.  A single meeting can blow a whole afternoon, by breaking\nit into two pieces each too small to do anything hard in.  Plus you\nhave to remember to go to the meeting.  That's no problem for someone\non the manager's schedule.  There's always something coming on the\nnext hour; the only question is what.  But when someone on the\nmaker's schedule has a meeting, they have to think about it.For someone on the maker's schedule, having a meeting is like\nthrowing an exception.  It doesn't merely cause you to switch from\none task to another; it changes the mode in which you work.I find one meeting can sometimes affect a whole day.   A meeting\ncommonly blows at least half a day, by breaking up a morning or\nafternoon.  But in addition there's sometimes a cascading effect.\nIf I know the afternoon is going to be broken up, I'm slightly less\nlikely to start something ambitious in the morning.  I know this\nmay sound oversensitive, but if you're a maker, think of your own\ncase.  Don't your spirits rise at the thought of having an entire\nday free to work, with no appointments at all?  Well, that means\nyour spirits are correspondingly depressed when you don't.  And\nambitious projects are by definition close to the limits of your\ncapacity.  A small decrease in morale is enough to kill them off.Each type of schedule works fine by itself.  Problems arise when\nthey meet.  Since most powerful people operate on the manager's\nschedule, they're in a position to make everyone resonate at their\nfrequency if they want to.  But the smarter ones restrain themselves,\nif they know that some of the people working for them need long\nchunks of time to work in.Our case is an unusual one.  Nearly all investors, including all\nVCs I know, operate on the manager's schedule.  But\nY Combinator\nruns on the maker's schedule.  Rtm and Trevor and I do because we\nalways have, and Jessica does too, mostly, because she's gotten\ninto sync with us.I wouldn't be surprised if there start to be more companies like\nus.  I suspect founders may increasingly be able to resist, or at\nleast postpone, turning into managers, just as a few decades ago\nthey started to be able to resist switching from jeans\nto suits.How do we manage to advise so many startups on the maker's schedule?\nBy using the classic device for simulating the manager's schedule\nwithin the maker's: office hours.  Several times a week I set aside\na chunk of time to meet founders we've funded.  These chunks of\ntime are at the end of my working day, and I wrote a signup program\nthat ensures all the appointments within a given set of office hours\nare clustered at the end.  Because they come at the end of my day\nthese meetings are never an interruption.  (Unless their working\nday ends at the same time as mine, the meeting presumably interrupts\ntheirs, but since they made the appointment it must be worth it to\nthem.)  During busy periods, office hours sometimes get long enough\nthat they compress the day, but they never interrupt it.When we were working on our own startup, back in the 90s, I evolved\nanother trick for partitioning the day.  I used to program from\ndinner till about 3 am every day, because at night no one could\ninterrupt me.  Then I'd sleep till about 11 am, and come in and\nwork until dinner on what I called \"business stuff.\"  I never thought\nof it in these terms, but in effect I had two workdays each day,\none on the manager's schedule and one on the maker's.When you're operating on the manager's schedule you can do something\nyou'd never want to do on the maker's: you can have speculative\nmeetings.  You can meet someone just to get to know one another.\nIf you have an empty slot in your schedule, why not?  Maybe it will\nturn out you can help one another in some way.Business people in Silicon Valley (and the whole world, for that\nmatter) have speculative meetings all the time.  They're effectively\nfree if you're on the manager's schedule.  They're so common that\nthere's distinctive language for proposing them: saying that you\nwant to \"grab coffee,\" for example.Speculative meetings are terribly costly if you're on the maker's\nschedule, though.  Which puts us in something of a bind.  Everyone\nassumes that, like other investors, we run on the manager's schedule.\nSo they introduce us to someone they think we ought to meet, or\nsend us an email proposing we grab coffee.  At this point we have\ntwo options, neither of them good: we can meet with them, and lose\nhalf a day's work; or we can try to avoid meeting them, and probably\noffend them.Till recently we weren't clear in our own minds about the source\nof the problem.  We just took it for granted that we had to either\nblow our schedules or offend people.  But now that I've realized\nwhat's going on, perhaps there's a third option: to write something\nexplaining the two types of schedule.  Maybe eventually, if the\nconflict between the manager's schedule and the maker's schedule\nstarts to be more widely understood, it will become less of a\nproblem.Those of us on the maker's schedule are willing to compromise.   We\nknow we have to have some number of meetings.  All we ask from those\non the manager's schedule is that they understand the cost.Thanks to Sam Altman, Trevor Blackwell, Paul Buchheit, Jessica Livingston,\nand Robert Morris for reading drafts of this.Related:"},{"title":"Mark Twain: Corn-pone Opinions","text":"FIFTY YEARS AGO, when I was a boy of fifteen and helping to inhabit a Missourian village on the banks of the Mississippi, I had a friend whose society was very dear to me because I was forbidden by my mother to partake of it. He was a gay and impudent and satirical and delightful young black man -a slave -who daily preached sermons from the top of his master's woodpile, with me for sole audience. He imitated the pulpit style of the several clergymen of the village, and did it well, and with fine passion and energy. To me he was a wonder. I believed he was the greatest orator in the United States and would some day be heard from. But it did not happen; in the distribution of rewards he was overlooked. It is the way, in this world.He interrupted his preaching, now and then, to saw a stick of wood; but the sawing was a pretense -he did it with his mouth; exactly imitating the sound the bucksaw makes in shrieking its way through the wood. But it served its purpose; it kept his master from coming out to see how the work was getting along. I listened to the sermons from the open window of a lumber room at the back of the house. One of his texts was this:\"You tell me whar a man gits his corn pone, en I'll tell you what his 'pinions is.\"I can never forget it. It was deeply impressed upon me. By my mother. Not upon my memory, but elsewhere. She had slipped in upon me while I was absorbed and not watching. The black philosopher's idea was that a man is not independent, and cannot afford views which might interfere with his bread and butter. If he would prosper, he must train with the majority; in matters of large moment, like politics and religion, he must think and feel with the bulk of his neighbors, or suffer damage in his social standing and in his business prosperities. He must restrict himself to corn-pone opinions -- at least on the surface. He must get his opinions from other people; he must reason out none for himself; he must have no first-hand views.I think Jerry was right, in the main, but I think he did not go far enough.1. It was his idea that a man conforms to the majority view of his locality by calculation and intention.\nThis happens, but I think it is not the rule.2. It was his idea that there is such a thing as a first-hand opinion; an original opinion; an opinion which is coldly reasoned out in a man's head, by a searching analysis of the facts involved, with the heart unconsulted, and the jury room closed against outside influences. It may be that such an opinion has been born somewhere, at some time or other, but I suppose it got away before they could catch it and stuff it and put it in the museum.I am persuaded that a coldly-thought-out and independent verdict upon a fashion in clothes, or manners, or literature, or politics, or religion, or any other matter that is projected into the field of our notice and interest, is a most rare thing -- if it has indeed ever existed.A new thing in costume appears -- the flaring hoopskirt, for example -- and the passers-by are shocked, and the irreverent laugh. Six months later everybody is reconciled; the fashion has established itself; it is admired, now, and no one laughs. Public opinion resented it before, public opinion accepts it now, and is happy in it. Why? Was the resentment reasoned out? Was the acceptance reasoned out? No. The instinct that moves to conformity did the work. It is our nature to conform; it is a force which not many can successfully resist. What is its seat? The inborn requirement of self-approval. We all have to bow to that; there are no exceptions. Even the woman who refuses from first to last to wear the hoop skirt comes under that law and is its slave; she could not wear the skirt and have her own approval; and that she must have, she cannot help herself. But as a rule our self-approval has its source in but one place and not elsewhere -- the approval of other people. A person of vast consequences can introduce any kind of novelty in dress and the general world will presently adopt it -- moved to do it, in the first place, by the natural instinct to passively yield to that vague something recognized as authority, and in the second place by the human instinct to train with the multitude and have its approval. An empress introduced the hoopskirt, and we know the result. A nobody introduced the bloomer, and we know the result. If Eve should come again, in her ripe renown, and reintroduce her quaint styles -- well, we know what would happen. And we should be cruelly embarrassed, along at first.The hoopskirt runs its course and disappears. Nobody reasons about it. One woman abandons the fashion; her neighbor notices this and follows her lead; this influences the next woman; and so on and so on, and presently the skirt has vanished out of the world, no one knows how nor why, nor cares, for that matter. It will come again, by and by and in due course will go again.Twenty-five years ago, in England, six or eight wine glasses stood grouped by each person's plate at a dinner party, and they were used, not left idle and empty; to-day there are but three or four in the group, and the average guest sparingly uses about two of them. We have not adopted this new fashion yet, but we shall do it presently. We shall not think it out; we shall merely conform, and let it go at that. We get our notions and habits and opinions from outside influences; we do not have to study them out.Our table manners, and company manners, and street manners change from time to time, but the changes are not reasoned out; we merely notice and conform. We are creatures of outside influences; as a rule we do not think, we only imitate. We cannot invent standards that will stick; what we mistake for standards are only fashions, and perishable. We may continue to admire them, but we drop the use of them. We notice this in literature. Shakespeare is a standard, and fifty years ago we used to write tragedies which we couldn't tell from -- from somebody else's; but we don't do it any more, now. Our prose standard, three quarters of a century ago, was ornate and diffuse; some authority or other changed it in the direction of compactness and simplicity, and conformity followed, without argument. The historical novel starts up suddenly, and sweeps the land. Everybody writes one, and the nation is glad. We had historical novels before; but nobody read them, and the rest of us conformed -- without reasoning it out. We are conforming in the other way, now, because it is another case of everybody.The outside influences are always pouring in upon us, and we are always obeying their orders and accepting their verdicts. The Smiths like the new play; the Joneses go to see it, and they copy the Smith verdict. Morals, religions, politics, get their following from surrounding influences and atmospheres, almost entirely; not from study, not from thinking. A man must and will have his own approval first of all, in each and every moment and circumstance of his life -- even if he must repent of a self-approved act the moment after its commission, in order to get his self-approval again: but, speaking in general terms, a man's self-approval in the large concerns of life has its source in the approval of the peoples about him, and not in a searching personal examination of the matter. Mohammedans are Mohammedans because they are born and reared among that sect, not because they have thought it out and can furnish sound reasons for being Mohammedans; we know why Catholics are Catholics; why Presbyterians are Presbyterians; why Baptists are Baptists; why Mormons are Mormons; why thieves are thieves; why monarchists are monarchists; why Republicans are Republicans and Democrats, Democrats. We know it is a matter of association and sympathy, not reasoning and examination; that hardly a man in the world has an opinion upon morals, politics, or religion which he got otherwise than through his associations and sympathies. Broadly speaking, there are none but corn-pone opinions. And broadly speaking, corn-pone stands for self-approval. Self-approval is acquired mainly from the approval of other people. The result is conformity. Sometimes conformity has a sordid business interest -- the bread-and-butter interest -- but not in most cases, I think. I think that in the majority of cases it is unconscious and not calculated; that it is born of the human being's natural yearning to stand well with his fellows and have their inspiring approval and praise -- a yearning which is commonly so strong and so insistent that it cannot be effectually resisted, and must have its way.\nA political emergency brings out the corn-pone opinion in fine force in its two chief varieties -- the pocketbook variety, which has its origin in self-interest, and the bigger variety, the sentimental variety -- the one which can't bear to be outside the pale; can't bear to be in disfavor; can't endure the averted face and the cold shoulder; wants to stand well with his friends, wants to be smiled upon, wants to be welcome, wants to hear the precious words, \"He's on the right track!\" Uttered, perhaps by an ass, but still an ass of high degree, an ass whose approval is gold and diamonds to a smaller ass, and confers glory and honor and happiness, and membership in the herd. For these gauds many a man will dump his life-long principles into the street, and his conscience along with them. We have seen it happen. In some millions of instances.Men think they think upon great political questions, and they do; but they think with their party, not independently; they read its literature, but not that of the other side; they arrive at convictions, but they are drawn from a partial view of the matter in hand and are of no particular value. They swarm with their party, they feel with their party, they are happy in their party's approval; and where the party leads they will follow, whether for right and honor, or through blood and dirt and a mush of mutilated morals.In our late canvass half of the nation passionately believed that in silver lay salvation, the other half as passionately believed that that way lay destruction. Do you believe that a tenth part of the people, on either side, had any rational excuse for having an opinion about the matter at all? I studied that mighty question to the bottom -- came out empty. Half of our people passionately believe in high tariff, the other half believe otherwise. Does this mean study and examination, or only feeling? The latter, I think. I have deeply studied that question, too -- and didn't arrive. We all do no end of feeling, and we mistake it for thinking. And out of it we get an aggregation which we consider a boon. Its name is Public Opinion. It is held in reverence. It settles everything. Some think it the Voice of God."},{"title":"Mean People Fail","text":"November 2014It struck me recently how few of the most successful people I know\nare mean.  There are exceptions, but remarkably few.Meanness isn't rare.  In fact, one of the things the internet has\nshown us is how mean people can be.  A few decades ago, only famous\npeople and professional writers got to publish their opinions.  Now\neveryone can, and we can all see the long tail of\nmeanness that had previously been hidden.And yet while there are clearly a lot of mean people out there,\nthere are next to none among the most successful people I know.\nWhat's going on here?  Are meanness and success inversely correlated?Part of what's going on, of course, is selection bias.  I only know\npeople who work in certain fields: startup founders, programmers,\nprofessors. I'm willing to believe that successful people in other\nfields are mean.  Maybe successful hedge fund managers are mean; I\ndon't know enough to say.  It seems quite likely that most successful\ndrug lords are mean.  But there are at least big chunks of the world\nthat mean people don't rule, and that territory seems to be growing.My wife and Y Combinator cofounder Jessica is one of those rare\npeople who have x-ray vision for character. Being married to her\nis like standing next to an airport baggage scanner. She came to\nthe startup world from investment banking, and she has always been\nstruck both by how consistently successful startup founders turn\nout to be good people, and how consistently bad people fail as\nstartup founders.Why?  I think there are several reasons.  One is that being mean\nmakes you stupid. That's why I hate fights. You never do your best\nwork in a fight, because fights are not sufficiently general.\nWinning is always a function of the situation and the people involved.\nYou don't win fights by thinking of big ideas but by thinking of\ntricks that work in one particular case.  And yet fighting is just\nas much work as thinking about real problems. Which is particularly\npainful to someone who cares how their brain is used: your brain\ngoes fast but you get nowhere, like a car spinning its wheels.Startups don't win by attacking. They win by transcending. There\nare exceptions of course, but usually the way to win is to race\nahead, not to stop and fight.Another reason mean founders lose is that they can't get the best\npeople to work for them. They can hire people who will put up with\nthem because they need a job. But the best people have other options.\nA mean person can't convince the best people to work for him unless\nhe is super convincing. And while having the best people helps any\norganization, it's critical for startups.There is also a complementary force at work: if you want to build\ngreat things, it helps to be driven by a spirit of benevolence. The startup founders who end up\nrichest are not the ones driven by money.  The ones driven by money\ntake the big acquisition offer that nearly every successful startup\ngets en route.\n[1]\nThe ones who keep going are driven by something\nelse. They may not say so explicitly, but they're usually trying\nto improve the world.  Which means people with a desire to improve\nthe world have a natural advantage.\n[2]The exciting thing is that startups are not just one random type\nof work in which meanness and success are inversely correlated.\nThis kind of work is the future.For most of history success meant control of scarce resources.  One\ngot that by fighting, whether literally in the case of pastoral\nnomads driving hunter-gatherers into marginal lands, or metaphorically\nin the case of Gilded Age financiers contending with one another\nto assemble railroad monopolies. For most of history, success meant\nsuccess at zero-sum games. And in most of them meanness was not a\nhandicap but probably an advantage.That is changing. Increasingly the games that matter are not zero-sum.\nIncreasingly you win not by fighting to get control of a scarce\nresource, but by having new ideas and building new things.\n[3]There have long been games where you won by having new ideas. In\nthe third century BC Archimedes won by doing that. At least until\nan invading Roman army killed him. Which illustrates why\nthis change is happening: for new ideas to matter, you need a certain\ndegree of civil order.  And not just not being at war.  You also\nneed to prevent the sort of economic violence that nineteenth century\nmagnates practiced against one another and communist countries\npracticed against their citizens.  People need to feel that what\nthey create can't be stolen.\n[4]That has always been the case for thinkers, which is why this trend\nbegan with them.  When you think of successful people from history\nwho weren't ruthless, you get mathematicians and writers and artists.\nThe exciting thing is that their m.o. seems to be spreading.  The\ngames played by intellectuals are leaking into the real world, and\nthis is reversing the historical polarity of the relationship between\nmeanness and success.So I'm really glad I stopped to think about this. Jessica and I\nhave always worked hard to teach our kids not to be mean.  We\ntolerate noise and mess and junk food, but not meanness.  And now\nI have both an additional reason to crack down on it, and an\nadditional argument to use when I do: that being mean makes you\nfail.Notes[1]\nI'm not saying all founders who take big acquisition offers\nare driven only by money, but rather that those who don't aren't.\nPlus one can have benevolent motives for being driven by money—for\nexample, to take care of one's family, or to be free to work\non projects that improve the world.[2]\nIt's unlikely that every successful startup improves the\nworld.  But their founders, like parents, truly believe they do.\nSuccessful founders are in love with their companies.  And while\nthis sort of love is as blind as the love people have for one\nanother, it is genuine.[3]\nPeter\nThiel would point out that successful founders still\nget rich from controlling monopolies, just monopolies they create\nrather than ones they capture.  And while this is largely true, it\nmeans a big change in the sort of person who wins.[4]\nTo be fair, the Romans didn't mean to kill Archimedes.  The\nRoman commander specifically ordered that he be spared. But he got\nkilled in the chaos anyway.In sufficiently disordered times, even thinking requires\ncontrol of scarce resources, because living at all is a scarce\nresource.Thanks to Sam Altman, Ron Conway, Daniel Gackle, Jessica Livingston, Robert Morris,\nGeoff Ralston, and Fred Wilson for reading drafts of this."},{"title":"Microsoft Patent","text":"Several people who read A Plan for Spam\nhave asked if I'm worried that Microsoft has already been granted a\npatent\non some aspects of Bayesian spam filtering.I'm not.  A patent doesn't mean\nmuch until it is tested in court.  Especially for something\nlike software, where the patent office regularly grants\npatents for ideas that are not new at all.Jason Rennie's  ifile,\na Bayesian mail classifier, predates Microsoft's patent application by two years.\nPantel and Lin's paper\nabout using a Bayesian classifier specifically to filter spam also predates\nthe application by three months.  The one novel idea I see in the patent is using\nnon-word features of  the message (e.g. the arrival time) as if they were words\nin a Bayesian calculation of spam\nprobability.  But (a) this is an obvious idea to one skilled in the art, and (b)\nyou don't need to do this to make an effective Bayesian filter.Even if the patent were valid, I don't think it would be dangerous,\nbecause I think big companies apply for\npatents mostly as a defensive measure.\nBig companies apply for patents on everything that\ncomes out of their research departments as a matter of course,\nmore to protect themselves against patent suits than to\nuse as a weapon against competitors.Like many big companies,\nMicrosoft wins by dominating distribution\nchannels, not by having better products.\nHaving a technical edge over competitors is not\ncritical to their business.Patents are even less of a worry for free software.  Even\nMicrosoft is constrained by public opinion.  Can\nyou imagine the stink it would raise if Microsoft tried\nto shut down an open-source project for patent infringement?\nI've never heard of any company,\nbig or small, trying to shut down an open-source project\nover a patent.However, if you're worried about ideas being taken out\nof circulation by being patented, the thing to do is\npublish every idea you have as soon as you have it.\nNo one can patent an idea that has already been published\nby someone else.And if you want to start a startup and are worried about\ngetting caught in a web of patents, build a\nserver-based application.\nThat kind of project is far too messy and hands-on for anyone\nto get very far into it in a corporate R&D department."},{"title":"Microsoft is Dead","text":"April 2007A few days ago I suddenly realized Microsoft was dead.  I was talking\nto a young startup founder about how Google was different from\nYahoo.  I said that Yahoo had been warped from the start by\ntheir fear of Microsoft.  That was why they'd positioned themselves\nas a \"media company\" instead of a technology company.  Then I looked\nat his face and realized he didn't understand.  It was as if I'd\ntold him how much girls liked Barry Manilow in the mid\n80s.  Barry who?Microsoft?  He didn't say anything, but I could tell he didn't quite\nbelieve anyone would be frightened of them.Microsoft cast\na shadow over the software world for almost 20 years\nstarting in the late 80s.\nI can remember when it was IBM before them.  I mostly ignored this\nshadow.  I never used Microsoft software, so it only affected me\nindirectly—for example, in the spam I got from botnets.  And\nbecause I wasn't paying attention, I didn't notice when the shadow\ndisappeared.But it's gone now.  I can sense that.  No one is even afraid of\nMicrosoft anymore.  They still make a lot of money—so does IBM,\nfor that matter.  But they're not dangerous.When did Microsoft die, and of what?  I know they seemed dangerous\nas late as 2001, because I wrote an essay then\nabout how they were\nless dangerous than they seemed.   I'd guess they were dead by 2005.\nI know when we started Y Combinator we didn't worry about Microsoft\nas competition for the startups we funded.  In fact, we've never\neven invited them to the demo days we organize for startups to\npresent to investors.  We invite Yahoo and Google and some other\nInternet companies, but we've never bothered to invite Microsoft.\nNor has anyone there ever even sent us an email.  They're in a\ndifferent world.What killed them?  Four things, I think, all of them occurring\nsimultaneously in the mid 2000s.The most obvious is Google.  There can only be one big man in town,\nand they're clearly it.  Google is the most dangerous company\nnow by far, in both the good and bad senses of the word.  Microsoft\ncan at best limp along afterward.When did Google take the lead?  There will be a tendency to push\nit back to their IPO in August 2004, but they weren't setting the\nterms of the debate then.  I'd say they took the lead in\n2005.  Gmail was one of the things that put them over the edge.\nGmail showed they could do more than search.Gmail also showed how much you could do with web-based software,\nif you took advantage of what later came to be called \"Ajax.\" And\nthat was the second cause of Microsoft's death: everyone can see the\ndesktop is over.  It now seems inevitable that applications will\nlive on the web—not just email, but everything, right up to\nPhotoshop.  Even Microsoft sees that now.Ironically, Microsoft unintentionally helped create Ajax.  The x\nin Ajax is from the XMLHttpRequest object, which lets the browser\ncommunicate with the server in the background while displaying a page.\n(Originally the only way to communicate with the server was to\nask for a new page.) XMLHttpRequest was created by Microsoft in the late 90s\nbecause they needed it for Outlook.  What they didn't realize was\nthat it would be useful to a lot of other people too—in fact, to\nanyone who wanted to make web apps work like desktop ones.The other critical component of Ajax is Javascript, the programming\nlanguage that runs in the browser.  Microsoft saw the danger of\nJavascript and tried to keep it broken for as long as they could.\n[1]\nBut eventually the open source world won, by producing\nJavascript libraries that grew over the brokenness of Explorer\nthe way a tree grows over barbed wire.The third cause of Microsoft's death was broadband Internet.  Anyone\nwho cares can have fast Internet access\nnow.  And the bigger the pipe to the server, the less you need the\ndesktop.The last nail in the coffin came, of all places, from Apple.\nThanks to OS X, Apple has come back from the dead in a way\nthat is extremely rare in technology.\n[2]\nTheir victory is so complete that I'm now surprised when I come across\na computer running Windows.  Nearly all the people we fund at Y\nCombinator use Apple laptops.  It was the same in the audience at\nstartup\nschool.  All the computer people use Macs or Linux now.  Windows is for\ngrandmas, like Macs used to be in the 90s.  So not only does the\ndesktop no longer matter, no one who cares about computers uses\nMicrosoft's anyway.And of course Apple has Microsoft on the run in music\ntoo, with TV and phones on the way.I'm glad Microsoft is dead.  They were like Nero or\nCommodus—evil\nin the way only inherited power can make you.  Because remember,\nthe Microsoft monopoly didn't begin with Microsoft.  They got it\nfrom IBM.  The software business was overhung by a\nmonopoly from about the mid-1950s to about 2005.  For practically\nits whole existence, that is.  One of the reasons \"Web 2.0\" has\nsuch an air of euphoria about it is the feeling, conscious or not,\nthat this era of monopoly may finally be over.Of course, as a hacker I can't help thinking about how something\nbroken could be fixed.  Is there some way Microsoft could come back?\nIn principle, yes.  To see how, envision two things: (a) the amount\nof cash Microsoft now has on hand, and (b) Larry and Sergey making\nthe rounds of all the search engines ten years ago trying to sell\nthe idea for Google for a million dollars, and being turned down\nby everyone.The surprising fact is, brilliant hackers—dangerously brilliant\nhackers—can be had very cheaply, by the standards of a\ncompany as rich as Microsoft.  They can't\nhire smart people anymore,\nbut they could buy as many as they wanted for only an order of magnitude\nmore. So if they wanted to be a contender\nagain, this is how they could do it:\nBuy all the good \"Web 2.0\" startups.  They could get substantially\nall of them for less than they'd have to pay for Facebook. Put them all in a building in Silicon Valley, surrounded by\nlead shielding to protect them from any contact with Redmond.\nI feel safe suggesting this, because they'd never do it.  Microsoft's\nbiggest weakness is that they still don't realize how much they\nsuck.  They still think they can write software in house.  Maybe they\ncan, by the standards of the desktop world.  But that world ended\na few years ago.I already know what the reaction to this essay will be.  Half the\nreaders will say that Microsoft is still an enormously profitable\ncompany, and that I should be more\ncareful about drawing conclusions based on what a few people think\nin our insular little \"Web 2.0\" bubble.  The other half, the younger\nhalf, will complain that this is old news.See also: Microsoft is Dead: the Cliffs NotesNotes[1]\nIt doesn't take a conscious effort to make software incompatible.\nAll you have to do is not work too hard at fixing bugs—which, if\nyou're a big company, you produce in copious quantities.  The\nsituation is analogous to the writing of \"literary\ntheorists.\"  Most don't try to be obscure; they just don't make an\neffort to be clear.  It wouldn't pay.[2]\nIn part because Steve Jobs got pushed out by John Sculley in\na way that's rare among technology companies.  If Apple's board\nhadn't made that blunder, they wouldn't have had to bounce back."},{"title":"Microsoft is Dead: The Cliffs Notes","text":"April 2007When I wrote that Microsoft was dead,\nI didn't mean it literally.\nI couldn't have.  Companies aren't alive, so they can't die.In fact \"Microsoft is Dead\" was what we in the trade call a metaphor.\nI meant something else.  Over the last couple days there has been\nsome disagreement about what I meant.  Some people who were scandalized\nby the essay convinced themselves I meant something rather stupid:\nthat Microsoft is about to go out of business.  This they\ndiligently refuted.So maybe I'd better explain exactly what I did mean.  What I meant\nwas not that Microsoft is suddenly going to stop making money, but\nthat people at the leading edge of the software business no longer\nhave to think about them.There are plenty of companies in that category that make decent\nprofits.  SAP for example.  They make a lot of money.  But does\nanyone developing new technology have to worry about them?  I doubt\nit.  When I said that Microsoft was dead, I meant they had, like\nIBM before them, passed across into this underworld.Ceasing to matter doesn't mean a company is going to go out of\nbusiness next year, any more than it means a pop star will suddenly\nbecome poor.  But it probably means there is trouble ahead.  Actors\nand musicians occasionally make comebacks, but technology companies\nalmost never do.  Technology companies are projectiles.  And because\nof that you can call them dead long before any problems show up on\nthe balance sheet.  Relevance may lead revenues by five or even ten\nyears.People have given me various disreputable motives for saying that\nMicrosoft was dead: that it was linkbait, or even that by publicly\nridiculing them I hoped to turn them into a \"customer\" for YC-funded\nstartups.  (I'm not that bad at sales.) My actual disreputable\nmotive was that I wanted to be the first to call it.  But that does\nat least entail some risk.  If you're the first to call something,\nyou'd better be right.  If the monster turns out not to be dead\nafter all—if they can somehow morph themselves into something\nstartups have to worry about again—I'll look like a fool.\nBut I'm willing to take that risk."},{"title":"Mind the Gap","text":"May 2004When people care enough about something to do it well, those who\ndo it best tend to be far better than everyone else.  There's a\nhuge gap between Leonardo and second-rate contemporaries like\nBorgognone.  You see the same gap between Raymond Chandler and the\naverage writer of detective novels.  A top-ranked professional chess\nplayer could play ten thousand games against an ordinary club player\nwithout losing once.Like chess or painting or writing novels, making money is a very\nspecialized skill.   But for some reason we treat this skill\ndifferently.  No one complains when a few people surpass all the\nrest at playing chess or writing novels, but when a few people make\nmore money than the rest, we get editorials saying this is wrong.Why?  The pattern of variation seems no different than for any other\nskill.  What causes people to react so strongly when the skill is\nmaking money?I think there are three reasons we treat making money as different:\nthe misleading model of wealth we learn as children; the disreputable\nway in which, till recently, most fortunes were accumulated; and\nthe worry that great variations in income are somehow bad for\nsociety.  As far as I can tell, the first is mistaken, the second\noutdated, and the third empirically false.  Could it be that, in a\nmodern democracy, variation in income is actually a sign of health?The Daddy Model of WealthWhen I was five I thought electricity was created by electric\nsockets.  I didn't realize there were power plants out there\ngenerating it.  Likewise, it doesn't occur to most kids that wealth\nis something that has to be generated.  It seems to be something\nthat flows from parents.Because of the circumstances in which they encounter it, children\ntend to misunderstand wealth.  They confuse it with money.  They\nthink that there is a fixed amount of it.  And they think of it as\nsomething that's distributed by authorities (and so should be\ndistributed equally), rather than something that has to be created\n(and might be created unequally).In fact, wealth is not money.  Money is just a convenient way of\ntrading one form of wealth for another.  Wealth is the underlying\nstuff—the goods and services we buy.  When you travel to a\nrich or poor country, you don't have to look at people's bank\naccounts to tell which kind you're in.  You can see\nwealth—in buildings and streets, in the clothes and the health\nof the people.Where does wealth come from?  People make it.  This was easier to\ngrasp when most people lived on farms, and made many of the things\nthey wanted with their own hands.  Then you could see in the house,\nthe herds, and the granary the wealth that each family created.  It\nwas obvious then too that the wealth of the world was not a fixed\nquantity that had to be shared out, like slices of a pie.  If you\nwanted more wealth, you could make it.This is just as true today, though few of us create wealth directly\nfor ourselves (except for a few vestigial domestic tasks).  Mostly\nwe create wealth for other people in exchange for money, which we\nthen trade for the forms of wealth we want.\n[1]Because kids are unable to create wealth, whatever they have has\nto be given to them.  And when wealth is something you're given,\nthen of course it seems that it should be distributed equally.\n[2]\nAs in most families it is.  The kids see to that.  \"Unfair,\" they\ncry, when one sibling gets more than another.In the real world, you can't keep living off your parents.  If you\nwant something, you either have to make it, or do something of\nequivalent value for someone else, in order to get them to give you\nenough money to buy it.  In the real world, wealth is (except for\na few specialists like thieves and speculators) something you have\nto create, not something that's distributed by Daddy.  And since\nthe ability and desire to create it vary from person to person,\nit's not made equally.You get paid by doing or making something people want, and those\nwho make more money are often simply better at doing what people\nwant.  Top actors make a lot more money than B-list actors.  The\nB-list actors might be almost as charismatic, but when people go\nto the theater and look at the list of movies playing, they want\nthat extra oomph that the big stars have.Doing what people want is not the only way to get money, of course.\nYou could also rob banks, or solicit bribes, or establish a monopoly.\nSuch tricks account for some variation in wealth, and indeed for\nsome of the biggest individual fortunes, but they are not the root\ncause of variation in income.  The root cause of variation in income,\nas Occam's Razor implies, is the same as the root cause of variation\nin every other human skill.In the United States, the CEO of a large public company makes about\n100 times as much as the average person.\n[3]\nBasketball players\nmake about 128 times as much, and baseball players 72 times as much.\nEditorials quote this kind of statistic with horror.  But I have\nno trouble imagining that one person could be 100 times as productive\nas another.  In ancient Rome the price of slaves varied by\na factor of 50 depending on their skills.\n[4]\nAnd that's without\nconsidering motivation, or the extra leverage in productivity that\nyou can get from modern technology.Editorials about athletes' or CEOs' salaries remind me of early\nChristian writers, arguing from first principles about whether the\nEarth was round, when they could just walk outside and check.\n[5]\nHow much someone's work is worth is not a policy question.  It's\nsomething the market already determines.\"Are they really worth 100 of us?\" editorialists ask.  Depends on\nwhat you mean by worth.  If you mean worth in the sense of what\npeople will pay for their skills, the answer is yes, apparently.A few CEOs' incomes reflect some kind of wrongdoing.  But are there\nnot others whose incomes really do reflect the wealth they generate?\nSteve Jobs saved a company that was in a terminal decline.  And not\nmerely in the way a turnaround specialist does, by cutting costs;\nhe had to decide what Apple's next products should be.  Few others\ncould have done it.  And regardless of the case with CEOs, it's\nhard to see how anyone could argue that the salaries of professional\nbasketball players don't reflect supply and demand.It may seem unlikely in principle that one individual could really\ngenerate so much more wealth than another.  The key to this mystery\nis to revisit that question, are they really worth 100 of us?\nWould a basketball team trade one of their players for 100\nrandom people?  What would Apple's next product look like if you\nreplaced Steve Jobs with a committee of 100 random people?\n[6]\nThese\nthings don't scale linearly.  Perhaps the CEO or the professional\nathlete has only ten times (whatever that means) the skill and\ndetermination of an ordinary person.  But it makes all the difference\nthat it's concentrated in one individual.When we say that one kind of work is overpaid and another underpaid,\nwhat are we really saying?  In a free market, prices are determined\nby what buyers want.  People like baseball more than  poetry, so\nbaseball players make more than poets.  To say that a certain kind\nof work is underpaid is thus identical with saying that people want\nthe wrong things.Well, of course people want the wrong things.  It seems odd to be\nsurprised by that.  And it seems even odder to say that it's\nunjust that certain kinds of work are underpaid.\n[7]\nThen\nyou're saying that it's unjust that people want the wrong things.\nIt's  lamentable that people prefer reality TV and corndogs to\nShakespeare and steamed vegetables, but unjust?  That seems like\nsaying that blue is heavy, or that up is circular.The appearance of the word \"unjust\" here is the unmistakable spectral\nsignature of the Daddy Model.  Why else would this idea occur in\nthis odd context?  Whereas if the speaker were still operating on\nthe Daddy Model, and saw wealth as something that flowed from a\ncommon source and had to be shared out, rather than something\ngenerated by doing what other people wanted, this is exactly what\nyou'd get on noticing that some people made much more than others.When we talk about \"unequal distribution of income,\" we should\nalso ask, where does that income come from?\n[8]\nWho made the wealth\nit represents?  Because to the extent that income varies simply\naccording to how much wealth people create, the distribution may\nbe unequal, but it's hardly unjust.Stealing ItThe second reason we tend to find great disparities of wealth\nalarming is that for most of human history the usual way to accumulate\na fortune was to steal it: in pastoral societies by cattle raiding;\nin agricultural societies by appropriating others' estates in times\nof war, and taxing them in times of peace.In conflicts, those on the winning side would receive the estates\nconfiscated from the losers.  In England in the 1060s, when William\nthe Conqueror distributed the estates of the defeated Anglo-Saxon\nnobles to his followers, the conflict was military.  By the 1530s,\nwhen Henry VIII distributed the estates of the monasteries to his\nfollowers, it was mostly political.\n[9]\nBut the principle was the\nsame.  Indeed, the same principle is at work now in Zimbabwe.In more organized societies, like China, the ruler and his officials\nused taxation instead of confiscation.  But here too we see the\nsame principle: the way to get rich was not to create wealth, but\nto serve a ruler powerful enough to appropriate it.This started to change in Europe with the rise of the middle class.\nNow we think of the middle class as people who are neither rich nor\npoor, but originally they were a distinct group.  In a feudal\nsociety, there are just two classes: a warrior aristocracy, and the\nserfs who work their estates.  The middle class were a new, third\ngroup who lived in towns and supported themselves by manufacturing\nand trade.Starting in the tenth and eleventh centuries, petty nobles and\nformer serfs banded together in towns that gradually became powerful\nenough to ignore the local feudal lords.\n[10]\nLike serfs, the middle\nclass made a living largely by creating wealth.  (In port cities\nlike Genoa and Pisa, they also engaged in piracy.) But unlike serfs\nthey had an incentive to create a lot of it.  Any wealth a serf\ncreated belonged to his master.  There was not much point in making\nmore than you could hide.  Whereas the independence of the townsmen\nallowed them to keep whatever wealth they created.Once it became possible to get rich by creating wealth, society as\na whole started to get richer very rapidly.  Nearly everything we\nhave was created by the middle class.  Indeed, the other two classes\nhave effectively disappeared in industrial societies, and their\nnames been given to either end of the middle class.  (In the original\nsense of the word, Bill Gates is middle class.)But it was not till the Industrial Revolution that wealth creation\ndefinitively replaced corruption as the best way to get rich.  In\nEngland, at least, corruption only became unfashionable (and in\nfact only started to be called \"corruption\") when there started to\nbe other, faster ways to get rich.Seventeenth-century England was much like the third world today,\nin that government office was a recognized route to wealth.  The\ngreat fortunes of that time still derived more from what we would\nnow call corruption than from commerce.\n[11]\nBy the nineteenth\ncentury that had changed.  There continued to be bribes, as there\nstill are everywhere, but politics had by then been left to men who\nwere driven more by vanity than greed.  Technology had made it\npossible to create wealth faster than you could steal it.  The\nprototypical rich man of the nineteenth century was not a courtier\nbut an industrialist.With the rise of the middle class, wealth stopped being a zero-sum\ngame.  Jobs and Wozniak didn't have to make us poor to make themselves\nrich.  Quite the opposite: they created things that made our lives\nmaterially richer.  They had to, or we wouldn't have paid for them.But since for most of the world's history the main route to wealth\nwas to steal it, we tend to be suspicious of rich people.  Idealistic\nundergraduates find their unconsciously preserved child's model of\nwealth confirmed by eminent writers of the past.  It is a case of\nthe mistaken meeting the outdated.\"Behind every great fortune, there is a crime,\" Balzac wrote.  Except\nhe didn't.  What he actually said was that a great fortune with no\napparent cause was probably due to a crime well enough executed\nthat it had been forgotten.  If we were talking about Europe in\n1000, or most of the third world today, the standard misquotation\nwould be spot on.  But Balzac lived in nineteenth-century France,\nwhere the Industrial Revolution was well advanced.  He knew you\ncould make a fortune without stealing it.  After all, he did himself,\nas a popular novelist.\n[12]Only a few countries (by no coincidence, the richest ones) have\nreached this stage.  In most, corruption still has the upper hand.\nIn most, the fastest way to get wealth is by stealing it.  And so\nwhen we see increasing differences in income in a rich country,\nthere is a tendency to worry that it's sliding back toward becoming\nanother Venezuela.  I think the opposite is happening. I think\nyou're seeing a country a full step ahead of Venezuela.The Lever of TechnologyWill technology increase the gap between rich and poor?  It will\ncertainly increase the gap between the productive and the unproductive.\nThat's the whole point of technology.   With a tractor an energetic\nfarmer could plow six times as much land in a day as he could with\na team of horses.  But only if he mastered a new kind of farming.I've seen the lever of technology grow visibly in my own time.  In\nhigh school I made money by mowing lawns and scooping ice cream at\nBaskin-Robbins.  This was the only kind of work available at the\ntime.  Now high school kids could write software or design web\nsites.  But only some of them will; the rest will still be scooping\nice cream.I remember very vividly when in 1985 improved technology made it\npossible for me to buy a computer of my own.  Within months I was\nusing it to make money as a freelance programmer.  A few years\nbefore, I couldn't have done this.  A few years before, there was\nno such thing as a freelance programmer.  But Apple created\nwealth, in the form of powerful, inexpensive computers, and programmers\nimmediately set to work using it to create more.As this example suggests, the rate at which technology increases\nour productive capacity is probably polynomial, rather than linear.\nSo we should expect to see ever-increasing variation in individual\nproductivity as time goes on.   Will that increase the gap between\nrich and the poor?  Depends which gap you mean.Technology should increase the gap in income, but it seems to\ndecrease other gaps.  A hundred years ago, the rich led a different\nkind of life from ordinary people.  They lived in houses\nfull of servants, wore elaborately uncomfortable clothes, and\ntravelled about in carriages drawn by teams of horses which themselves\nrequired their own houses and servants.  Now, thanks to technology,\nthe rich live more like the average person.Cars are a good example of why.  It's possible to buy expensive,\nhandmade cars that cost hundreds of thousands of dollars.  But there\nis not much point.  Companies make more money by building a large\nnumber of ordinary cars than a small number of expensive ones.  So\na company making a mass-produced car can afford to spend a lot more\non its design.  If you buy a custom-made car, something will always\nbe breaking.  The only point of buying one now is to advertise that\nyou can.Or consider watches.  Fifty years ago, by spending a lot of money\non a watch you could get better performance.  When watches had\nmechanical movements, expensive watches kept better time.  Not any\nmore.  Since the invention of the quartz movement, an ordinary Timex\nis more accurate than a Patek Philippe costing hundreds of thousands\nof dollars.\n[13]\nIndeed, as with expensive cars, if you're determined\nto spend a lot of money on a watch, you have to put up with some\ninconvenience to do it: as well as keeping worse time, mechanical\nwatches have to be wound.The only thing technology can't cheapen is brand.  Which is precisely\nwhy we hear ever more about it.  Brand is the residue left as the\nsubstantive differences between rich and poor evaporate.  But what\nlabel you have on your stuff is a much smaller matter than having\nit versus not having it.  In 1900, if you kept a carriage, no one\nasked what year or brand it was.  If you had one, you were rich.\nAnd if you weren't rich, you took the omnibus or walked.  Now even\nthe poorest Americans drive cars, and it is only because we're so\nwell trained by advertising that we can even recognize the especially\nexpensive ones.\n[14]The same pattern has played out in industry after industry.  If\nthere is enough demand for something, technology will make it cheap\nenough to sell in large volumes, and the mass-produced versions\nwill be, if not better, at least more convenient.\n[15]\nAnd there\nis nothing the rich like more than convenience.  The rich people I\nknow drive the same cars, wear the same clothes, have the same kind\nof furniture, and eat the same foods as my other friends.  Their\nhouses are in different neighborhoods, or if in the same neighborhood\nare different sizes, but within them life is similar.  The houses\nare made using the same construction techniques and contain much\nthe same objects.  It's inconvenient to do something expensive and\ncustom.The rich spend their time more like everyone else too.  Bertie\nWooster seems long gone.  Now, most people who are rich enough not\nto work do anyway.  It's not just social pressure that makes them;\nidleness is lonely and demoralizing.Nor do we have the social distinctions there were a hundred years\nago.   The novels and etiquette manuals of that period read now\nlike descriptions of some strange tribal society.  \"With respect\nto the continuance of friendships...\" hints Mrs. Beeton's Book\nof Household Management (1880), \"it may be found necessary, in\nsome cases, for a mistress to relinquish, on assuming the responsibility\nof a household, many of those commenced in the earlier part of her\nlife.\" A woman who married a rich man was expected to drop friends\nwho didn't.  You'd seem a barbarian if you behaved that way today.\nYou'd also have a very boring life.  People still tend to segregate\nthemselves somewhat, but much more on the basis of education than\nwealth.\n[16]Materially and socially, technology seems to be decreasing the gap\nbetween the rich and the poor, not increasing it.  If Lenin walked\naround the offices of a company like Yahoo or Intel or Cisco, he'd\nthink communism had won.  Everyone would be wearing the same clothes,\nhave the same kind of office (or rather, cubicle) with the same\nfurnishings, and address one another by their first names instead\nof by honorifics.  Everything would seem exactly as he'd predicted,\nuntil he looked at their bank accounts.  Oops.Is it a problem if technology increases that gap?  It doesn't seem\nto be so far.  As it increases the gap in income, it seems to\ndecrease most other gaps.Alternative to an AxiomOne often hears a policy criticized on the grounds that it would\nincrease the income gap between rich and poor.  As if it were an\naxiom that this would be bad.  It might be true that increased\nvariation in income would be bad, but I don't see how we can say\nit's axiomatic.Indeed, it may even be false, in industrial democracies.  In a\nsociety of serfs and warlords, certainly, variation in income is a\nsign of an underlying problem.  But serfdom is not the only cause\nof variation in income.  A 747 pilot doesn't make 40 times as much\nas a checkout clerk because he is a warlord who somehow holds her\nin thrall.  His skills are simply much more valuable.I'd like to propose an alternative idea: that in a modern society,\nincreasing variation in income is a sign of health.  Technology\nseems to increase the variation in productivity at faster than\nlinear rates.  If we don't see corresponding variation in income,\nthere are three possible explanations: (a) that technical innovation\nhas stopped, (b) that the people who would create the most wealth\naren't doing it, or (c) that they aren't getting paid for it.I think we can safely say that (a) and (b) would be bad.  If you\ndisagree, try living for a year using only the resources available\nto the average Frankish nobleman in 800, and report back to us.\n(I'll be generous and not send you back to the stone age.)The only option, if you're going to have an increasingly prosperous\nsociety without increasing variation in income, seems to be (c),\nthat people will create a lot of wealth without being paid for it.\nThat Jobs and Wozniak, for example, will cheerfully work 20-hour\ndays to produce the Apple computer for a society that allows them,\nafter taxes, to keep just enough of their income to match what they\nwould have made working 9 to 5 at a big company.Will people create wealth if they can't get paid for it?  Only if\nit's fun.  People will write operating systems for free.  But they\nwon't install them, or take support calls, or train customers to\nuse them.  And at least 90% of the work that even the highest tech\ncompanies do is of this second, unedifying kind.All the unfun kinds of wealth creation slow dramatically in a society\nthat confiscates private fortunes.  We can confirm this empirically.\nSuppose you hear a strange noise that you think may be due to a\nnearby fan.  You turn the fan off, and the noise stops.  You turn\nthe fan back on, and the noise starts again.  Off, quiet.  On,\nnoise.  In the absence of other information, it would seem the noise\nis caused by the fan.At various times and places in history, whether you could accumulate\na fortune by creating wealth has been turned on and off.  Northern\nItaly in 800, off (warlords would steal it).  Northern Italy in\n1100, on.  Central France in 1100, off (still feudal).  England in\n1800, on.  England in 1974, off (98% tax on investment income).\nUnited States in 1974, on.  We've even had a twin study: West\nGermany, on;  East Germany, off.  In every case, the creation of\nwealth seems to appear and disappear like the noise of a fan as you\nswitch on and off the prospect of keeping it.There is some momentum involved.  It probably takes at least a\ngeneration to turn people into East Germans (luckily for England).\nBut if it were merely a fan we were studying, without all the extra\nbaggage that comes from the controversial topic of wealth, no one\nwould have any doubt that the fan was causing the noise.If you suppress variations in income, whether by stealing private\nfortunes, as feudal rulers used to do, or by taxing them away, as\nsome modern governments have done, the result always seems to be\nthe same.    Society as a whole ends up poorer.If I had a choice of living in a society where I was materially\nmuch better off than I am now, but was among the poorest, or in one\nwhere I was the richest, but much worse off than I am now, I'd take\nthe first option.  If I had children, it would arguably be immoral\nnot to.  It's absolute poverty you want to avoid, not relative\npoverty.  If, as the evidence so far implies, you have to have one\nor the other in your society, take relative poverty.You need rich people in your society not so much because in spending\ntheir money they create jobs, but because of what they have to do\nto get rich.  I'm not talking about the trickle-down effect\nhere.  I'm not saying that if you let Henry Ford get rich, he'll\nhire you as a waiter at his next party.  I'm saying that he'll make\nyou a tractor to replace your horse.Notes[1]\nPart of the reason this subject is so contentious is that some\nof those most vocal on the subject of wealth—university\nstudents, heirs, professors, politicians, and journalists—have\nthe least experience creating it.  (This phenomenon will be familiar\nto anyone who has overheard conversations about sports in a bar.)Students are mostly still on the parental dole, and have not stopped\nto think about where that money comes from.  Heirs will be on the\nparental dole for life.  Professors and politicians live within\nsocialist eddies of the economy, at one remove from the creation\nof wealth, and are paid a flat rate regardless of how hard they\nwork.  And journalists as part of their professional code segregate\nthemselves from the revenue-collecting half of the businesses they\nwork for (the ad sales department).  Many of these people never\ncome face to face with the fact that the money they receive represents\nwealth—wealth that, except in the case of journalists, someone\nelse created earlier.  They live in a world in which income is\ndoled out by a central authority according to some abstract notion\nof fairness (or randomly, in the case of heirs), rather than given\nby other people in return for something they wanted, so it may seem\nto them unfair that things don't work the same in the rest of the\neconomy.(Some professors do create a great deal of wealth for\nsociety.  But the money they're paid isn't a quid pro quo.\nIt's more in the nature of an investment.)[2]\nWhen one reads about the origins of the Fabian Society, it\nsounds like something cooked up by the high-minded Edwardian\nchild-heroes of Edith Nesbit's The Wouldbegoods.[3]\nAccording to a study by the Corporate Library, the median total\ncompensation, including salary, bonus, stock grants, and the exercise\nof stock options, of S&P 500 CEOs in 2002 was $3.65 million.\nAccording to Sports Illustrated, the average NBA player's\nsalary during the 2002-03 season was $4.54 million, and the average\nmajor league baseball player's salary at the start of the 2003\nseason was $2.56 million.  According to the Bureau of Labor\nStatistics, the mean annual wage in the US in 2002 was $35,560.[4]\nIn the early empire the price of an ordinary adult slave seems\nto have been about 2,000 sestertii (e.g. Horace, Sat. ii.7.43).\nA servant girl cost 600 (Martial vi.66), while Columella (iii.3.8)\nsays that a skilled vine-dresser was worth 8,000.  A doctor, P.\nDecimus Eros Merula, paid 50,000 sestertii for his freedom (Dessau,\nInscriptiones 7812).  Seneca (Ep. xxvii.7) reports\nthat one Calvisius Sabinus paid 100,000 sestertii apiece for slaves\nlearned in the Greek classics.  Pliny (Hist. Nat. vii.39)\nsays that the highest price paid for a slave up to his time was\n700,000 sestertii, for the linguist (and presumably teacher) Daphnis,\nbut that this had since been exceeded by actors buying their own\nfreedom.Classical Athens saw a similar variation in prices.  An ordinary\nlaborer was worth about 125 to 150 drachmae.  Xenophon (Mem.\nii.5) mentions prices ranging from 50 to 6,000 drachmae (for the\nmanager of a silver mine).For more on the economics of ancient slavery see:Jones, A. H. M., \"Slavery in the Ancient World,\" Economic History\nReview, 2:9 (1956), 185-199, reprinted in Finley, M. I. (ed.),\nSlavery in Classical Antiquity, Heffer, 1964.[5]\nEratosthenes (276—195 BC) used shadow lengths in different\ncities to estimate the Earth's circumference.  He was off by only\nabout 2%.[6]\nNo, and Windows, respectively.[7]\nOne of the biggest divergences between the Daddy Model and\nreality is the valuation of hard work.  In the Daddy Model, hard\nwork is in itself deserving.  In reality, wealth is measured by\nwhat one delivers, not how much effort it costs.  If I paint someone's\nhouse, the owner shouldn't pay me extra for doing it with a toothbrush.It will seem to someone still implicitly operating on the Daddy\nModel that it is unfair when someone works hard and doesn't get\npaid much.  To help clarify the matter, get rid of everyone else\nand put our worker on a desert island, hunting and gathering fruit.\nIf he's bad at it he'll work very hard and not end up with much\nfood.  Is this unfair?  Who is being unfair to him?[8]\nPart of the reason for the tenacity of the Daddy Model may be\nthe dual meaning of \"distribution.\" When economists talk about\n\"distribution of income,\" they mean statistical distribution.  But\nwhen you use the phrase frequently, you can't help associating it\nwith the other sense of the word (as in e.g. \"distribution of alms\"),\nand thereby subconsciously seeing wealth as something that flows\nfrom some central tap.  The word \"regressive\" as applied to tax\nrates has a similar effect, at least on me; how can anything\nregressive be good?[9]\n\"From the beginning of the reign Thomas Lord Roos was an assiduous\ncourtier of the young Henry VIII and was soon to reap the rewards.\nIn 1525 he was made a Knight of the Garter and given the Earldom\nof Rutland.  In the thirties his support of the breach with Rome,\nhis zeal in crushing the Pilgrimage of Grace, and his readiness to\nvote the death-penalty in the succession of spectacular treason\ntrials that punctuated Henry's erratic matrimonial progress made\nhim an obvious candidate for grants of monastic property.\"Stone, Lawrence, Family and Fortune: Studies in Aristocratic\nFinance in the Sixteenth and Seventeenth Centuries, Oxford\nUniversity Press, 1973, p. 166.[10]\nThere is archaeological evidence for large settlements earlier,\nbut it's hard to say what was happening in them.Hodges, Richard and David Whitehouse, Mohammed, Charlemagne and\nthe Origins of Europe, Cornell University Press, 1983.[11]\nWilliam Cecil and his son Robert were each in turn the most\npowerful minister of the crown, and both used their position to\namass fortunes among the largest of their times.  Robert in particular\ntook bribery to the point of treason.  \"As Secretary of State and\nthe leading advisor to King James on foreign policy, [he] was a\nspecial recipient of favour, being offered large bribes by the Dutch\nnot to make peace with Spain, and large bribes by Spain to make\npeace.\" (Stone, op. cit., p. 17.)[12]\nThough Balzac made a lot of money from writing, he was notoriously\nimprovident and was troubled by debts all his life.[13]\nA Timex will gain or lose about .5 seconds per day.  The most\naccurate mechanical watch, the Patek Philippe 10 Day Tourbillon,\nis rated at -1.5 to +2 seconds.  Its retail price is about $220,000.[14]\nIf asked to choose which was more expensive, a well-preserved\n1989 Lincoln Town Car ten-passenger limousine ($5,000) or a 2004\nMercedes S600 sedan ($122,000), the average Edwardian might well\nguess wrong.[15]\nTo say anything meaningful about income trends, you have to\ntalk about real income, or income as measured in what it can buy.\nBut the usual way of calculating real income ignores much of the\ngrowth in wealth over time, because it depends on a consumer price\nindex created by bolting end to end a series of numbers that are\nonly locally accurate, and that don't include the prices of new\ninventions until they become so common that their prices stabilize.So while we might think it was very much better to live in a world\nwith antibiotics or air travel or an electric power grid than\nwithout, real income statistics calculated in the usual way will\nprove to us that we are only slightly richer for having these things.Another approach would be to ask, if you were going back to the\nyear x in a time machine, how much would you have to spend on trade\ngoods to make your fortune?  For example, if you were going back\nto 1970 it would certainly be less than $500, because the processing\npower you can get for $500 today would have been worth at least\n$150 million in 1970.  The function goes asymptotic fairly quickly,\nbecause for times over a hundred years or so you could get all you\nneeded in present-day trash.  In 1800 an empty plastic drink bottle\nwith a screw top would have seemed a miracle of workmanship.[16]\nSome will say this amounts to the same thing, because the rich\nhave better opportunities for education.  That's a valid point.  It\nis still possible, to a degree, to buy your kids' way into top\ncolleges by sending them to private schools that in effect hack the\ncollege admissions process.According to a 2002 report by the National Center for Education\nStatistics, about 1.7% of American kids attend private, non-sectarian\nschools.  At Princeton, 36% of the class of 2007 came from such\nschools.  (Interestingly, the number at Harvard is significantly\nlower, about 28%.)  Obviously this is a huge loophole.  It does at\nleast seem to be closing, not widening.Perhaps the designers of admissions processes should take a lesson\nfrom the example of computer security, and instead of just assuming\nthat their system can't be hacked, measure the degree to which it\nis."},{"title":"More Advice for Undergrads","text":"I asked several friends who were professors and/or eminent hackers\nwhat they thought of  Undergraduation.\nTheir comments were so good that I thought I'd just give them\ndirectly to you.  I've given them all codenames for now, since some\nmay want to remain anonymous.NT:The one thing that I felt was missing from your essay was a statement\nsupporting or dispelling the notion that CS is for loners. I disagree\nwith this notion. I love hacking, but I love it even more when it's\na shared experience. The hard problems seem just a bit more\nsurmountable when there's two of you.Of course, Fred Brooks's law\nabout adding manpower comes into play eventually. The rule: work\nin small groups with good people. Stay away from large bureaucratic\norganizations where status reports are more important than thinking\noutside the box. There are many individual aspects to CS, just like\nart. But, being an individual doesn't mean that the machine takes\nthe place of good friends, colleagues, and mentors.TO:I think you should say \"College is where faking starts to stop\nworking.\"FS:Math is more difficult than CS, no question.  However, it is not at\nall clear to me that math has as much intellectual content as CS.  The\nmath hills are individually harder to climb, but CS is a bigger piece\nof landscape.  (Formally, CS has to encompass reasoning about\nstateful objects with histories.  There are important ways in which\nthis is more difficult and general than pure axiomatic systems.)Empirically, I don't think the difference between math and CS is very\nuseful for predicting how interesting and effective a thinker will\ncome out the other end.  So, while I agree with the spirit of your\n\"dropout graph\" heuristic, I think math and CS are an unhelpful choice\nto explain it with.  Much better to note that both are hard subjects\nwith real content, and contrast them with some sort of blatant\nbasket-weaving like political science or (urgh) \"ethnic studies.\"\"They may be trying to make you lift weights with your brain.\"\nIndeed; I think pure mathematics makes excellent weightlifting.SA:The problem with graphics as an application is that doing a decent\n3D game has a large\ncomponent of movie making in it. You need motion capture and an art\ndepartment for all the textures and backgrounds. Nobody will be\nimpressed with pink cubes and green spheres bouncing around on the\nscreen. I think the technology has pretty much surpassed anyone's\nability to do anything simple and cool with it.DF:I found, when I was studying mathematics, that 2 things were\ntrue:  (1) the teacher was not too good and (2) the book was not too\ngood.  So I would always buy a half-dozen books on the topic and\ntry to get the full picture by reading the same sections in each\nbook.  The combination helped me understand much more than the sum\nof the content.  Also, I was never opposed to reading something\nas much as 10 times until I squeezed everything out of it.I have found mathematics and especially formal logic to be an\nindispensible tool for structuring ideas.\nIt was like Latin for me.  Latin was this very clean natural\nlanguage and logic was this very clean formal language.  I\nhad to teach it to myself because the logic course I had was\nthe first 30 pages of Mendelsohn.  When you want to say something\nunequivocally, describing formally is a good first start.When you want to understand, for example, the excitement of\nmonads, understanding logic and some category theory helps.\nCategory theory is also quite pretty.  It simply says that\neverything has to be described in terms of function composition\nand this operator has to satisfy certain properties.If you think of logic as something alive, which allows you\nto prove theorems, it is fascinating.  Just think about it:\nprove theorems by computer.  It is mind-boggling.  It will\nnot likely lead to a start-up being successful, but what\na moment when you prove a theorem without heuristics, etc.I have insisted that all my graduate students minor in logic,\nso that should say something.ML:The real reason to study math is not that it's useful but that it's cool.\nThis should be all the reason a would-be hacker needs.  Also, with its\nemphasis on rigor and abstraction, it's cool in a lot of the same ways as\nprogramming at its best.  The fact that it's occasionally useful as well\nis just lagniappe.I also disagree that good mathematicians tend to be bad teachers.  Having\nenjoyed the privilege of an expensive education, I am of the opinion\nthat the very best mathematicians are usually (certainly not always)\nrather good teachers and are sometimes extraordinarily good.  The real\nreason it is hard to learn what math is about is that mathematical\nunderstanding requires new and difficult (at least at first) ways of\nthinking.  Cookbook calculus courses sidestep these difficulties and\ntherefore teach little of value.  Really understanding calculus was hard\nfor Newton and is hard today."},{"title":"News from the Front","text":"September 2007A few weeks ago I had a thought so heretical that it really surprised\nme. It may not matter all that much where you go to college.For me, as for a lot of middle class kids, getting into a good\ncollege was more or less the meaning of life when I was growing up.\nWhat was I?  A student.  To do that well meant to get good grades.\nWhy did one have to get good grades?  To get into a good college.\nAnd why did one want to do that?  There seemed to be several reasons:\nyou'd learn more, get better jobs, make more money.  But it didn't\nmatter exactly what the benefits would be.  College was a bottleneck\nthrough which all your future prospects passed; everything would\nbe better if you went to a better college.A few weeks ago I realized that somewhere along the line I had\nstopped believing that.What first set me thinking about this was the new trend of worrying\nobsessively about what\nkindergarten\nyour kids go to.  It seemed to\nme this couldn't possibly matter.  Either it won't help your kid\nget into Harvard, or if it does, getting into Harvard won't mean\nmuch anymore.  And then I thought: how much does it mean even now?It turns out I have a lot of data about that.  My three partners\nand I run a seed stage investment firm called\nY Combinator.  We\ninvest when the company is just a couple guys and an idea.  The\nidea doesn't matter much; it will change anyway.  Most of our\ndecision is based on the founders.  The average founder is three\nyears out of college.  Many have just graduated; a few are still\nin school.  So we're in much the same position as a graduate program,\nor a company hiring people right out of college.  Except our choices\nare immediately and visibly tested.  There are two possible outcomes\nfor a startup: success or failure—and usually you know within a\nyear which it will be.The test applied to a startup is among the purest of real world\ntests.  A startup succeeds or fails depending almost entirely on\nthe efforts of the founders.  Success is decided by the market: you\nonly succeed if users like what you've built.  And users don't care\nwhere you went to college.As well as having precisely measurable results, we have a lot of\nthem.  Instead of doing a small number of large deals like a\ntraditional venture capital fund, we do a large number of small\nones.  We currently fund about 40 companies a year, selected from\nabout 900 applications representing a total of about 2000 people.\n[1]Between the volume of people we judge and the rapid, unequivocal\ntest that's applied to our choices, Y Combinator has been an\nunprecedented opportunity for learning how to pick winners.  One\nof the most surprising things we've learned is how little it matters\nwhere people went to college.I thought I'd already been cured of caring about that.  There's\nnothing like going to grad school at Harvard to cure you of any\nillusions you might have about the average Harvard undergrad.  And\nyet Y Combinator showed us we were still overestimating people who'd\nbeen to elite colleges.  We'd interview people from MIT or Harvard\nor Stanford and sometimes find ourselves thinking: they must be\nsmarter than they seem.  It took us a few iterations to learn to\ntrust our senses.Practically everyone thinks that someone who went to MIT or Harvard\nor Stanford must be smart.  Even people who hate you for it believe\nit.But when you think about what it means to have gone to an elite\ncollege, how could this be true?   We're talking about a decision\nmade by admissions officers—basically, HR people—based on a\ncursory examination of a huge pile of depressingly similar applications\nsubmitted by seventeen year olds.  And what do they have to go on?\nAn easily gamed standardized test; a short essay telling you what\nthe kid thinks you want to hear; an interview with a random alum;\na high school record that's largely an index of obedience.  Who\nwould rely on such a test?And yet a lot of companies do.  A lot of companies are very much\ninfluenced by where applicants went to college.  How could they be?\nI think I know the answer to that.There used to be a saying in the corporate world: \"No one ever got\nfired for buying IBM.\"  You no longer hear this about IBM specifically,\nbut the idea is very much alive; there is a whole category of\n\"enterprise\" software companies that exist to take advantage of it.\nPeople buying technology for large organizations don't care if they\npay a fortune for mediocre software.  It's not their money.  They\njust want to buy from a supplier who seems safe—a company with\nan established name, confident salesmen, impressive offices, and\nsoftware that conforms to all the current fashions.  Not necessarily\na company that will deliver so much as one that, if they do let you\ndown, will still seem to have been a prudent choice.  So companies\nhave evolved to fill that niche.A recruiter at a big company is in much the same position as someone\nbuying technology for one.  If someone went to Stanford and is not\nobviously insane, they're probably a safe bet.  And a safe bet is\nenough.  No one ever measures recruiters by the later performance\nof people they turn down.\n[2]I'm not saying, of course, that elite colleges have evolved to prey\nupon the weaknesses of large organizations the way enterprise\nsoftware companies have.  But they work as if they had.  In addition\nto the power of the brand name, graduates of elite colleges have\ntwo critical qualities that plug right into the way large organizations\nwork.  They're good at doing what they're asked, since that's what\nit takes to please the adults who judge you at seventeen.  And\nhaving been to an elite college makes them more confident.Back in the days when people might spend their whole career at one\nbig company, these qualities must have been very valuable.  Graduates\nof elite colleges would have been capable, yet amenable to authority.\nAnd since individual performance is so hard to measure in large\norganizations, their own confidence would have been the starting\npoint for their reputation.Things are very different in the new world of startups.  We couldn't\nsave someone from the market's judgement even if we wanted to.  And\nbeing charming and confident counts for nothing with users.  All\nusers care about is whether you make something they like.  If you\ndon't, you're dead.Knowing that test is coming makes us work a lot harder to get the\nright answers than anyone would if they were merely hiring people.\nWe can't afford to have any illusions about the predictors of\nsuccess.  And what we've found is that the variation between schools\nis so much smaller than the variation between individuals that it's\nnegligible by comparison.  We can learn more about someone in the\nfirst minute of talking to them than by knowing where they went to\nschool.It seems obvious when you put it that way.  Look at the individual,\nnot where they went to college.  But that's a weaker statement than\nthe idea I began with, that it doesn't matter much where a given\nindividual goes to college.  Don't you learn things at the best\nschools that you wouldn't learn at lesser places?Apparently not.  Obviously you can't prove this in the case of a\nsingle individual, but you can tell from aggregate evidence: you\ncan't, without asking them, distinguish people who went to one\nschool from those who went to another three times as far down the\nUS News list.\n[3]\nTry it and see.How can this be?  Because how much you learn in college depends a\nlot more on you than the college.  A determined party animal can\nget through the best school without learning anything.  And someone\nwith a real thirst for knowledge will be able to find a few smart\npeople to learn from at a school that isn't prestigious at all.The other students are the biggest advantage of going to an elite\ncollege; you learn more from them than the professors.  But\nyou should be able to reproduce this at most colleges if you make\na conscious effort to find smart friends.  At\nmost colleges you can find at least a handful of other smart students,\nand most people have only a handful of close friends in college\nanyway.\n[4]\nThe odds of finding smart professors are even better.\nThe curve for faculty is a lot flatter than for students, especially\nin math and the hard sciences; you have to go pretty far down the\nlist of colleges before you stop finding smart professors in the\nmath department.So it's not surprising that we've found the relative prestige of\ndifferent colleges useless in judging individuals.  There's a lot\nof randomness in how colleges select people, and what they learn\nthere depends much more on them than the college.  Between these\ntwo sources of variation, the college someone went to doesn't mean\na lot.  It is to some degree a predictor of ability, but so weak\nthat we regard it mainly as a source of error and try consciously\nto ignore it.I doubt what we've discovered is an anomaly specific to startups.\nProbably people have always overestimated the importance of where\none goes to college.  We're just finally able to measure it.The unfortunate thing is not just that people are judged by such a\nsuperficial test, but that so many judge themselves by it.  A lot\nof people, probably the majority of people in America, have\nsome amount of insecurity about where, or whether, they went to\ncollege.  The tragedy of the situation is that by far the greatest\nliability of not having gone to the college you'd have liked is\nyour own feeling that you're thereby lacking something.  Colleges\nare a bit like exclusive clubs in this respect.  There is only one\nreal advantage to being a member of most exclusive clubs: you know\nyou wouldn't be missing much if you weren't.  When you're excluded,\nyou can only imagine the advantages of being an insider.  But\ninvariably they're larger in your imagination than in real life.So it is with colleges.  Colleges differ, but they're nothing like\nthe stamp of destiny so many imagine them to be.  People aren't\nwhat some admissions officer decides about them at seventeen.\nThey're what they make themselves.Indeed, the great advantage of not caring where people went to\ncollege is not just that you can stop judging them (and yourself)\nby superficial measures, but that you can focus instead on what\nreally matters.  What matters is what you make of yourself.\nI think that's what we\nshould tell kids.  Their job isn't to get good grades so they can\nget into a good college, but to learn and do.  And not just because\nthat's more rewarding than worldly success.  That will increasingly\nbe the route to worldly success.Notes[1]\nIs what we measure worth measuring?  I think so.  You can get\nrich simply by being energetic and unscrupulous, but getting rich\nfrom a technology startup takes some amount of brains.   It is just\nthe kind of work the upper middle class values; it has about the\nsame intellectual component as being a doctor.[2]\nActually, someone did, once.  Mitch Kapor's wife Freada was\nin charge of HR at Lotus in the early years.  (As he is at pains\nto point out, they did not become romantically involved till\nafterward.)  At one point they worried Lotus was losing its startup\nedge and turning into a big company.  So as an experiment she sent\ntheir recruiters the resumes of the first 40 employees, with\nidentifying details changed.  These were the people who had made\nLotus into the star it was.  Not one got an interview.[3]\nThe US News list?  Surely no one trusts that.  Even if the\nstatistics they consider are useful, how do they decide on the\nrelative weights?  The reason the US News list is meaningful is\nprecisely because they are so intellectually dishonest in that\nrespect.  There is no external source they can use to calibrate the\nweighting of the statistics they use; if there were, we could just\nuse that instead.  What they must do is adjust the weights till the\ntop schools are the usual suspects in about the right order.  So\nin effect what the US News list tells us is what the editors think\nthe top schools are, which is probably not far from the conventional\nwisdom on the matter.  The amusing thing is, because some schools\nwork hard to game the system, the editors will have to keep tweaking\ntheir algorithm to get the rankings they want.[4]\nPossible doesn't mean easy, of course.  A smart student at a party school\nwill inevitably be something of an outcast, just as he or\nshe would be in most high schools.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, Jackie\nMcDonough, Peter Norvig, and Robert Morris for reading drafts of\nthis."},{"title":"Notes","text":"(to What You Can't Say)[1] The Inquisition probably never intended\ncarry out their threat of torture.  But that was because\nGalileo made it clear that he would do whatever they asked.\nIf he had refused, it's hard to imagine they would simply have backed\ndown.  Not long before they had burnt the philosopher\nGiordano Bruno when he proved intransigent.[2] Many organizations\nobligingly publish\nlists of what you can't say within them.  Unfortunately these\nare usually both incomplete, because there are things so shocking\nthey don't even anticipate anyone saying them, and at the same\ntime so general that they couldn't possibly be enforced\nliterally.  It's a rare university speech code that would not,\ntaken literally, forbid Shakespeare.[3] Kundel HL, Nodine CF, Krupinski EA, \"Searching for\nlung nodules: Visual dwell indicates locations of false-positive\nand false-negative decisions.\" Investigative Radiology, 24 (1989),\n472-478.[4] The verb \"diff\" is computer jargon, but it's the only\nword with exactly the sense I want.  It comes from the Unix diff\nutility, which yields a list of all the differences between\ntwo files.  More generally it means an unselective and microscopically\nthorough comparison between two versions of something.[5] It may seem from this that I am some kind of moral relativist.\nFar from it.  I think that \"judgemental\" is one of the\nlabels that gets used in our time to prevent discussion of ideas,\nand that our attempts to be \"non-judgemental\"\nwill seem to future eras one of the most comical things about us.[6] This makes the world confusing to kids, since\nwhat they see disagrees with what they're told.  I could\nnever understand why, for example, Portuguese\n\"explorers\" had\nstarted to work their way along the coast of Africa.\nIn fact, they were after slaves.Bovill, Edward, The Golden Trade of the Moors, Oxford, 1963.[7]  The kids soon learn these words from their friends,\nbut they know they're not supposed to use them.  So for a while\nyou have a state of affairs like something from a musical comedy,\nwhere the parents use these\nwords among their peers, but never in front of the children,\nand the children use the words among their peers, but never in\nfront of their parents.[8] A few years ago I worked for a startup whose\nlogo was a\nsolid red circle with a white V in the middle.  I really liked this\nlogo.  After we'd been using it for a while, I remember thinking,\nyou know, this is a really powerful symbol, a red circle.\nRed is arguably the most basic color, and the circle the\nmost basic shape.  Together they\nhad such visual punch.  Why didn't more American companies have\na red circle as their logo?  Ahh, yes...[9]  The fear is far the stronger of the two forces.\nSometimes when I hear someone use the word \"gyp\"\nI tell them, with a serious expression, that\none can't use that word anymore because it's considered\ndisparaging to Romani (aka Gypsies).\nIn fact dictionaries disagree about its etymology.  But the reaction to\nthis joke is nearly always one of slightly terrified compliance.\nThere is something about fashion, in clothing or ideas, that\ntakes away people's confidence: when they learn something new,\nthey feel it was something they should have known already.[10] I don't mean to suggest that scientists' opinions are inevitably\nright, just that their willingness to consider unconventional\nideas gives them a head start.  In other respects they are sometimes\nat a disadvantage.  Like other scholars, many scientists have\nnever directly earned a living�never, that is, been paid in return for\nservices rendered.  Most scholars live in an anomalous microworld in which\nmoney is something doled out by committees instead of a\nrepresentation for work, and it seems natural to them that\nnational economies should be run along the same lines.\nAs a result, many otherwise intelligent people were socialists in the\nmiddle of the twentieth century.[11] Presumably, within the industry, such thoughts would be considered\n\"negative\".  Another label, much like \"defeatist\".\nNever mind that, one should ask, are they true or not?\nIndeed, the measure of a healthy organization is probably\nthe degree to which negative thoughts are allowed.   In places\nwhere great work is being done, the attitude always seems to\nbe critical and sarcastic, not \"positive\" and \"supportive\".\nThe people I know who do great work think that they suck, but\nthat everyone else sucks even more.[12] Behar, Richard, \"The Thriving Cult of Greed and Power,\"\nTime, 6 May 1991.[13] Healy, Patrick,  \"Summers hits 'anti-Semitic' actions,\"\nBoston Globe, 20 September 2002.[14] \"Tinkerers' champion,\" The Economist, 20 June 2002.[15] By this I mean you'd have to become a professional\ncontroversialist, not that Noam Chomsky's\nopinions = what you can't say.   If you\nactually said the things you can't say, you'd shock\nconservatives and liberals about equally�just as, if\nyou went back to Victorian England in a time machine, your ideas would\nshock Whigs and Tories about equally.[16] Traub, James, \"Harvard Radical,\" New York Times Magazine,\n24 August 2003.[17] Miller, Arthur, The Crucible in History and Other Essays,\nMethuen, 2000."},{"title":"On Lisp","text":"On Lisp is a comprehensive study of advanced Lisp\ntechniques, with bottom-up programming as the unifying theme.\nIt gives the first complete description of macros and\nmacro applications.  The book also covers important\nsubjects related to bottom-up programming, including\nfunctional programming, rapid prototyping, interactive development,\nand embedded languages.\nThe final chapter takes a deeper look at object-oriented\nprogramming than previous Lisp books, showing the step-by-step\nconstruction of a working model of the Common Lisp Object System\n(CLOS).As well as an indispensable reference, On Lisp is a\nsource of software.  Its examples form a library of functions\nand macros that readers will be able to use in their own\nLisp programs.Prentice Hall, 1993, 432 pages, paperback.  ISBN 0130305529.New: Download it for free.\"The first book that really explains what Lisp is all about.\"- John Foderaro, Franz Inc.\"On Lisp draws the reader in from the very first sentence.\nThe author's writing style is clear and articulate,\nbut comfortably informal.  The subject matter is important,\nand has not been adequately treated\nin previous books.  The chapters on macros present important\nmaterial that is virtually unique to this book.The chapter on object-oriented programming is excellent.\nThe author builds a nice mini-CLOS to teach basic object-oriented\ntechniques, but then wisely switches to real CLOS to cover the\nmore advanced topics.\"- David Touretzky, Carnegie-Mellon University\"An excellent description of the real essence of Lisp.\"- Thomas Cheatham, Harvard University\"As with his other book, ANSI Common Lisp, Graham writes\nin a fluid style that is a pleasure to read.\"- Amazon.Com\"The topics On Lisp covers are extremely useful for any seriously\naspiring Lisp programmer.  I think it's a great idea to collect in one\nplace programming techniques normally attainable only the hard\nway. The examples, which are plentiful and excellent, are one of\nthe significant strengths of the book.\"- Skona Brittain, Developer of NanoLisp"},{"title":"One Specific Idea","text":"I got this email from one of the partners in Y Combinator.\nSo if you're good at this sort of thing and want to propose\nto work on it in our next funding round, you'd have a good\nchance of being accepted.I just got a Motorola RAZR, a nice cell phone with about the same features as most small phones. It has a web/wap browser, a Java VM, can send/receive text messages and (sort of) e-mail, and a 170x220 pixel color display. Each feature works pretty well by itself. But the overall feeling is like DOS, or the Mac before multi-finder.\nThat is, to send a Yahoo Messenger msg, I have to laboriously select and start a Java app, which basically takes over the phone, wait for it to make network connections &c, then send my message. As long as I run that Java app, and do nothing else, maybe I can receive a Yahoo Messenger message too. If I want to browse the web, or even initiate a phone call, I have to quit the ymessenger app and fire up some other mode. Also the phone doesn't take any advantage of always-available Internet access, it doesn't for example know how to synchronize calendar, phone book, &c. Little progress has been made in the five years since my previous phone was designed and now.So I'm hoping for a WFP proposal for a cell phone O/S or interface that doesn't suck. It's not out of the question: there are some semi-open phone platforms that can run Linux."},{"title":"Organic Startup Ideas","text":"April 2010The best way to come up with startup ideas is to ask yourself the\nquestion: what do you wish someone would make for you?There are two types of startup ideas: those that grow organically\nout of your own life, and those that you decide, from afar, are\ngoing to be necessary to some class of users other than you.  Apple\nwas the first type.  Apple happened because Steve Wozniak wanted a\ncomputer.  Unlike most people who wanted computers, he could design\none, so he did.  And since lots of other people wanted the same\nthing, Apple was able to sell enough of them to get the company\nrolling.  They still rely on this principle today, incidentally.\nThe iPhone is the phone Steve Jobs wants.\n[1]Our own startup, Viaweb, was of the second type.  We made software\nfor building online stores.  We didn't need this software ourselves.\nWe weren't direct marketers.  We didn't even know when we started\nthat our users were called \"direct marketers.\"  But we were\ncomparatively old when we started the company (I was 30 and Robert\nMorris was 29), so we'd seen enough to know users would need this\ntype of software.\n[2]There is no sharp line between the two types of ideas, but\nthe most successful startups seem to be closer to the Apple type\nthan the Viaweb type.  When he was writing that first Basic interpreter\nfor the Altair, Bill Gates was writing something he would use, as\nwere Larry and Sergey when they wrote the first versions of Google.Organic ideas are generally preferable to the made up kind, but\nparticularly so when the founders are young.  It takes experience\nto predict what other people will want.  The worst ideas we see at\nY Combinator are from young founders making things they think other\npeople will want.So if you want to start a startup and don't know yet what you're\ngoing to do, I'd encourage you to focus initially on organic ideas.\nWhat's missing or broken in your daily life?  Sometimes if you just\nask that question you'll get immediate answers.  It must have seemed\nobviously broken to Bill Gates that you could only program the\nAltair in machine language.You may need to stand outside yourself a bit to see brokenness,\nbecause you tend to get used to it and take it for granted.  You\ncan be sure it's there, though.  There are always great ideas sitting\nright under our noses.  In 2004 it was ridiculous that Harvard\nundergrads were still using a Facebook printed on paper.  Surely\nthat sort of thing should have been online.There are ideas that obvious lying around now.  The reason you're\noverlooking them is the same reason you'd have overlooked the idea\nof building Facebook in 2004: organic startup ideas usually don't\nseem like startup ideas at first.  We know now that Facebook was\nvery successful, but put yourself back in 2004.  Putting undergraduates'\nprofiles online wouldn't have seemed like much of a startup idea.\nAnd in fact, it wasn't initially a startup idea.  When Mark spoke\nat a YC dinner this winter he said he wasn't trying to start a\ncompany when he wrote the first version of Facebook.  It was just\na project.  So was the Apple I when Woz first started working on\nit.  He didn't think he was starting a company.  If these guys had\nthought they were starting companies, they might have been tempted\nto do something more \"serious,\" and that would have been a mistake.So if you want to come up with organic startup ideas, I'd encourage\nyou to focus more on the idea part and less on the startup part.\nJust fix things that seem broken, regardless of whether it seems\nlike the problem is important enough to build a company on.  If you\nkeep pursuing such threads it would be hard not to end up making\nsomething of value to a lot of people, and when you do, surprise,\nyou've got a company.\n[3]Don't be discouraged if what you produce initially is something\nother people dismiss as a toy.  In fact, that's a good sign.\nThat's probably why everyone else has been overlooking the idea.  The first\nmicrocomputers were dismissed as toys.  And the first planes, and\nthe first cars.  At this point, when someone comes to us with\nsomething that users like but that we could envision forum trolls\ndismissing as a toy, it makes us especially likely to invest.While young founders are at a disadvantage when coming up with\nmade-up ideas, they're the best source of organic ones, because\nthey're at the forefront of technology.  They use the latest stuff.\nThey only just decided what to use, so why wouldn't they?  And\nbecause they use the latest stuff, they're in a position to discover\nvaluable types of fixable brokenness first.There's nothing more valuable than an unmet need that is just\nbecoming fixable.  If you find something broken that you can fix\nfor a lot of people, you've found a gold mine.  As with an actual\ngold mine, you still have to work hard to get the gold out of it.\nBut at least you know where the seam is, and that's the hard part.Notes[1]\nThis suggests a way to predict areas where Apple will be weak:\nthings Steve Jobs doesn't use.  E.g. I doubt he is much into gaming.[2]\nIn retrospect, we should have become direct marketers.  If\nI were doing Viaweb again, I'd open our own online store.  If we\nhad, we'd have understood users a lot better.  I'd encourage anyone\nstarting a startup to become one of its users, however unnatural it\nseems.[3]\nPossible exception: It's hard to compete directly with open source software.\nYou can build things for programmers, but there has to be some part\nyou can charge for.Thanks to Sam Altman, Trevor Blackwell, and Jessica Livingston\nfor reading drafts of this."},{"title":"Persuade xor Discover","text":"September 2009When meeting people you don't know very well, the convention is\nto seem extra friendly.  You smile and say \"pleased to meet you,\"\nwhether you are or not.  There's nothing dishonest about this.\nEveryone knows that these little social lies aren't meant\nto be taken literally, just as everyone knows that\n\"Can you pass the salt?\" is only grammatically a question.I'm perfectly willing to smile and say \"pleased to meet you\"\nwhen meeting new people.  But there is another set of\ncustoms for being ingratiating in print that are not so\nharmless.The reason there's a convention of being ingratiating in print\nis that most essays are written to persuade.\nAnd as any politician could tell\nyou, the way to persuade people is not just to baldly state the\nfacts.  You have to add a spoonful of sugar to make the medicine\ngo down.For example, a politician announcing the cancellation of\na government program will not merely say \"The\nprogram is canceled.\" That would seem offensively\ncurt.  Instead he'll spend most of his time talking about the\nnoble effort made by the people who worked on it.The reason these conventions are more dangerous is that they\ninteract with the ideas.  Saying \"pleased to meet you\" is just\nsomething you prepend to a conversation, but the sort of spin\nadded by politicians is woven through it.  We're starting to\nmove from social lies to real lies.Here's an example of a paragraph from an essay I wrote about\nlabor unions.  As written,\nit tends to offend people who like unions.\nPeople who think the labor movement was the creation of heroic\nunion organizers have a problem to explain: why are unions shrinking\nnow?  The best they can do is fall back on the default explanation\nof people living in fallen civilizations. Our ancestors were\ngiants.  The workers of the early twentieth century must have had\na moral courage that's lacking today.\nNow here's the same paragraph rewritten to please instead of\noffending them:\nEarly union organizers made heroic sacrifices to improve conditions\nfor workers.  But though\nlabor unions are shrinking now, it's not because present union\nleaders are any less courageous.  An employer couldn't get away\nwith hiring thugs to beat up union leaders today, but if they\ndid, I see no reason to believe today's union leaders would shrink\nfrom the challenge.  So I think it would be a mistake to attribute\nthe decline of unions to some kind of decline in the people who\nrun them.  Early union leaders were heroic, certainly, but we\nshould not suppose that if unions have declined, it's because\npresent union leaders are somehow inferior.  The cause must be\nexternal.\n[1]\nIt makes the same point: that it can't have been the personal\nqualities of early union organizers that made unions successful,\nbut must have been some external factor, or otherwise present-day\nunion leaders would have to be inferior people.  But written this\nway it seems like a defense of present-day union organizers rather\nthan an attack on early ones.  That makes it more persuasive to\npeople who like unions, because it seems sympathetic to their cause.I believe everything I wrote in the second version.  Early union\nleaders did make heroic sacrifices.   And\npresent union leaders probably would rise to the occasion if\nnecessary.  People tend to; I'm skeptical about the idea of \"the\ngreatest generation.\"\n[2]If I believe everything I said in the second version, why didn't I\nwrite it that way?  Why offend people needlessly?Because I'd rather offend people than pander to them,\nand if you write about controversial topics you have to choose one or the other.  The degree of\ncourage of past or present union leaders is beside the point; all\nthat matters for the argument is that they're the same.\nBut if you want to please\npeople who are mistaken, you can't simply tell the truth.  You're\nalways going to have to add some sort of padding to protect their\nmisconceptions from bumping against reality.Most writers do.  Most writers write to persuade, if only out of\nhabit or politeness.  But I don't write to persuade; I write to\nfigure out.  I write to persuade a hypothetical perfectly unbiased\nreader.Since the custom is to write to persuade the actual reader, someone\nwho doesn't will seem arrogant.  In fact, worse than arrogant: since\nreaders are used to essays that try to please someone, an essay\nthat displeases one side in a dispute reads as an attempt to pander\nto the other.  To a lot of pro-union readers, the first paragraph\nsounds like the sort of thing a right-wing radio talk show host\nwould say to stir up his followers.  But it's not.  Something that\ncurtly contradicts one's beliefs can be hard to distinguish from a\npartisan attack on them, but though they can end up in the same\nplace they come from different sources.Would it be so bad to add a few extra words, to make people feel\nbetter?  Maybe not.  Maybe I'm excessively attached to conciseness.\nI write code the same way I write essays,\nmaking pass after pass\nlooking for anything I can cut.  But I have a legitimate reason for\ndoing this.  You don't know what the ideas are until you get them\ndown to the fewest words.\n[3]The danger of the second paragraph\nis not merely that it's longer.  It's that you start to lie to\nyourself.  The ideas start to get mixed together with the spin\nyou've added to get them past the readers' misconceptions.I think the goal of an essay should be to discover\nsurprising things.  That's my goal, at least.\nAnd most surprising means most different from what people currently\nbelieve.  So writing to persuade and writing to discover are\ndiametrically opposed.  The more your conclusions disagree with\nreaders' present beliefs, the more effort you'll have to expend on\nselling your ideas rather than having them.  As you accelerate,\nthis drag increases, till eventually you reach a point where 100%\nof your energy is devoted to overcoming it and you can't go any\nfaster.It's hard enough to overcome one's own misconceptions without having\nto think about how to get the resulting ideas past other people's.\nI worry that if I wrote to persuade, I'd start to shy away unconsciously\nfrom ideas I knew would be hard to sell.  When I notice something\nsurprising, it's usually very faint at first.  There's nothing more\nthan a slight stirring of discomfort.  I don't want anything to get\nin the way of noticing it consciously.Notes[1]\nI had a strange feeling of being back in high school writing\nthis.  To get a good grade you had to both write the sort of pious\ncrap you were expected to, but also seem to be writing with conviction.\nThe solution was a kind of method acting.  It was revoltingly\nfamiliar to slip back into it.[2]\nExercise for the reader:\nrephrase that thought to please the same people the first version\nwould offend.[3]\nCome to think of it, there is one way in which I deliberately\npander to readers, because it doesn't change the number of words:\nI switch person.  This flattering distinction seems so natural to\nthe average reader that they probably don't notice even when I\nswitch in mid-sentence, though you tend to notice when it's done\nas conspicuously as this.Thanks to Jessica Livingston and Robert Morris\nfor reading drafts of this.Note: An earlier version of this essay began by talking\nabout why people dislike Michael Arrington.  I now believe that\nwas mistaken, and that most people don't dislike him for the\nsame reason I did when I first met him, but simply because\nhe writes about controversial things."},{"title":"Plan for Spam FAQ","text":"Is this code available anywhere?No; it's written in Arc, which is itself not released yet.\nIs there a Bayesian filter for Outlook?I know of nine so far: Spammunition,\nSpamBayes,\nSpam Bully,\nInboxShield,\nJunk-Out,\nOutclass,\nDisruptor OL,\nSpamTiger,\nand\nJunkChief.Is there anything that can protect my company's server?The best commercial server-level Bayesian filter is probably\nDeath2Spam.\nSpamProbe,\none of the best open-source Bayesian filters, can also be run\non the server.Most commercial server-level spam filters are still rule-based.\nBut there are starting to be some\nthat use Bayesian filtering.  The way to find them is probably\nto search in Google.The question to ask the salesman is, does the filter learn to recognize\nspam based on the spam and nonspam mail we receive?  If it\ndoesn't learn, it isn't Bayesian.Does Arc/Lisp have some advantage for writing this kind of software?Lisp's symbol type is useful in manipulating databases of words,\nbecause it lets you test for equality by just comparing pointers.\n(If you find yourself using checksums to identify words, it's symbols\nyou mean to be using.)  Prolog, Erlang, and Ruby also support symbols.\nSo does Python, to a degree, though I don't think it has any syntax for them yet.More generally, Lisp was designed for rapid\nprototyping, and this application involved a lot of that.  I probably\nspent 95% of the development time typing expressions into the\ntoplevel, trying variously tweaked algorithms on individual emails.Do you mind if I write filters based on this algorithm?Of course not.  I don't claim to have invented anything new here.  Bayesian\ntext classification is an old and established field.  If there is anything new\nin this article (at least, it was news to me) it is that such a simple\nvariant of it is so effective at filtering spam.So by all means go write spam filters.  It is a very rewarding hack.  If\nyou end up creating something other people can use, let me know and\nI'll make a link to it.I don't know Lisp; can you explain the algorithm to me?It's expressed in math notation in Hackers\n& Painters.Could you use Bayesian filtering to make Web content filters?I've never tried it, but yes, I think it would work well.Will this algorithm filter out 99.5% of my spam with no false positives?It does filter out 99.5% of my spam. I got similar results for the one\nother spam collection I've tested it on so far.  (I couldn't measure false\npositives, because I only had the spams.)I do worry a bit that my email might just be especially easy to filter.\nA lot of my spam comes from \"opt-in\" spammers like Qves and Virtumundo,\nand that stuff is really easy to detect.  Plus my own mail is full of references\nto programming that make it easy to distinguish from spam (though not\n\"programming\" itself, ironically, which often occurs in spams selling\nsatellite dishes).So if you do try implementing this filter for yourself, I'd appreciate it if you\ncould let me know how well it works for you.  My gut feel is that it will work\npretty effectively for almost everyone, but it would be reassuring to hear\nnumbers.Could spammers fool Bayesian filters by filling their spams with random words?They would have to get rid of the bad words as well as adding neutral ones.\nOnly the most interesting fifteen words contribute to the probability,\nand neutral words like \"onion\", no matter how many there are of them,\ncan't compete with the incriminating \"viagra\" for statistical significance.To outweigh incriminating words, the spammers would need to dilute\ntheir emails with especially innocent words, i.e. those that are not merely\nneutral but occur disproportionately often in the user's legitimate email.\nBut these words (e.g. the nicknames of one's friends, terms one uses\nin one's work) are different for each recipient, and the spammers have\nno way of figuring out what they are.Once this software was available, couldn't spammers just tune their spams\nto get through it?They couldn't necessarily tune their\nemails and still say what they wanted to say.  If they wanted to send you to a url that\nis known to the filters, for example, they would find it hard to\ntune their way around that.Second, tune using what?  Each user's filters will be different, and the innocent\nwords will vary especially.  At most, spammers will be able to dilute\ntheir mails with merely neutral words, and those will not tend to be much use\nbecause they won't be among the fifteen most interesting.If the spammers did try to get most of the incriminating words\nout of their messages, they\nwould all have to use different euphemisms, because if they\nall started saying \"adolescents\" instead of \"teens\", then \"adolescents\"\nwould start to have a high spam probability.Finally, even if spammers worked to get all the incriminating words out of the\nmessage body, that wouldn't be enough, because in a typical spam a\nlot of the incriminating words are in the headers.What if spammers sent their messages as images?They already do sometimes, and we are able to catch them.\nSuch emails include a lot of damning content, actually.  The headers,\nto start with, will be as bad as ever.  And remember that we scan\nhtml as well as text.  Within the message body there\nboth containing urls, which would probably score high.  \"Href\" and \"img\"\nthemselves both have spam probabilities approaching pornographic words.\nusually far from random.Can your program deal with the spam trick of inserting html comments\nin the middle of words?Yes,  I ignore html comments down at the\nlevel of scanning tokens, not even considering them\nas separators.Spammers sometimes use randomly generated tags to break\nup tokens, since html rendering software will usually ignore\nmeaningless tags. I do allow these to separate tokens, and it\nworks fine.  Broken bits of words simply get high spam probabilities.Would this article itself be filtered out by your filters?No. Someone sent it to me as a test, and it wasn't.\nAlthough the article contains a lot of\nspam words, it also contains a lot of even more provably innocent\nwords (like \"spammers\" ironically, which occurs in a lot of my\nreal email, and never in my spam).  Since only the most\ninteresting words count, the innocent words\ncrowded out the spam words in the rankings, and this mail\nended up with the minimum possible probability.That makes sense, because an article someone writes is more likely\nto resemble the content of their own email than it would a spam, even\nif the article happens to be about spam.How well can your software filter out mail that's about spam?This is a problem for anyone who works on spam filtering.  In the extreme\ncase, if someone you've never heard from merely forwards you a spam\nwith no additional comment, it's going to be hard to filter out.  There it will\nall come down to the headers.But after all, if someone could forward you spam with\nimpunity, then spammers could forward you spam too.  So for\nthese situations we may have to have a special password\nthat people could include in mail to get it by the filters, and\nalso (I have one already) a special trash folder for metaspam\nso that it doesn't contribute to the probabilities.If there is a good side to this, it's that if we can create filters that work\nacceptably well for us, they'll work even better for everyone else.Will this software filter out good automated email\nlike order receipts and newsgroup faqs?Mostly not.  That kind of mail may be automated, but\nthe text usually has a very different character from spam.The only automated responses that tend to get filtered out are the\nones that contain a lot of additional advertising.  In effect, these\nemails consist of an automated response with a spam appended to the\nend, so it is not surprising filters catch them.Will the kind of people who would respond to a spam use filters?I think so.  I'm guessing here, but I suspect that people\nstupid enough\nto respond to a spam will often get email through one of the free services\nlike Yahoo Mail or Hotmail, or through big ISPs like AOL or Earthlink.\nOnce word spreads that it is possible to\nfilter out most spam, they'll be forced to offer effective filters.If filters catch most spam, won't spammers just send more to compensate?Spammers already operate at capacity.\nHow do you feel about blacklists?As ISPs use them now, they're equivalent to very bad filters.\nBut the information they supply could be incorporated into Bayesian filtering.Doesn't Bayes' Rule assume the predictors are independent?Yes, strictly speaking it is only valid assuming the probabilitiy of e.g.\n\"sex\" occurring in an email is unrelated to the probability of \"sexy\"\noccurring in it.  Obviously that is not the case.On the other hand, there is a long tradition of violating\nthis requirement.  When you do that it's called a \"naive Bayesian\" algorithm\nand in practice it works pretty well, just as in practice (if you stay away\nfrom the edges of precision) it works pretty well to treat floating point\nnumbers as if they were reals.Does this algorithm take into account the prior probability of a mail being a spam?No. It assumes it's equally likely for a mail to be a spam or not.  So accuracy\ncould be slightly improved by taking into account the actual proportion of spam\nreceived by each user.  You would have to do this by hour though, because\nthe proportion varies so much depending on the time of the day that the\noverall prior probability is useless as a predictor.Why do you consider 15 words?  What's special about 15?Actually, in the latest version of the filter I use 20, because\nmarking tokens by context means the\nsoftware now sees more distinct\ntokens per mail.Nearly all spams tend to have that many fairly incriminating words\nin them.  If you\nlook at more than that, you'll start to include neutral words,\nwhich are noise at best.  But you want to look at as many words as you can,\nbecause legitimate emails may well contain two or three words with high\nspam probabilities-- if you used only the top 5 words, for example,\nyou'd start to get false positives.Will this work for languages other than English?As long as they use whitespace to separate tokens, it should."},{"title":"Post-Medium Publishing","text":"September 2009Publishers of all types, from news to music, are unhappy that\nconsumers won't pay for content anymore.  At least, that's how they\nsee it.In fact consumers never really were paying for content, and publishers\nweren't really selling it either.  If the content was what they\nwere selling, why has the price of books or music or movies always\ndepended mostly on the format?  Why didn't better content cost more?\n[1]A copy of Time costs $5 for 58 pages, or 8.6 cents a page.\nThe Economist costs $7 for 86 pages, or 8.1 cents a page.  Better\njournalism is actually slightly cheaper.Almost every form of publishing has been organized as if the medium\nwas what they were selling, and the content was irrelevant.  Book\npublishers, for example, set prices based on the cost of producing\nand distributing books.  They treat the words printed in the book\nthe same way a textile manufacturer treats the patterns printed on\nits fabrics.Economically, the print media are in the business of marking up\npaper.  We can all imagine an old-style editor getting a scoop and\nsaying \"this will sell a lot of papers!\" Cross out that final S and\nyou're describing their business model.  The reason they make less\nmoney now is that people don't need as much paper.A few months ago I ran into a friend in a cafe.  I had a copy of\nthe New York Times, which I still occasionally buy on weekends.  As\nI was leaving I offered it to him, as I've done countless times\nbefore in the same situation.  But this time something new happened.\nI felt that sheepish feeling you get when you offer someone something\nworthless.  \"Do you, er, want a printout of yesterday's news?\" I\nasked.  (He didn't.)Now that the medium is evaporating, publishers have nothing left\nto sell.  Some seem to think they're going to sell content—that\nthey were always in the content business, really.  But they weren't,\nand it's unclear whether anyone could be.SellingThere have always been people in the business of selling information,\nbut that has historically been a distinct business from publishing.\nAnd the business of selling information to consumers has always\nbeen a marginal one.  When I was a kid there were people who used\nto sell newsletters containing stock tips, printed on colored paper\nthat made them hard for the copiers of the day to reproduce.  That\nis a different world, both culturally and economically, from the\none publishers currently inhabit.People will pay for information they think they can make money from.\nThat's why they paid for those stock tip newsletters, and why\ncompanies pay now for Bloomberg terminals and Economist Intelligence\nUnit reports.  But will people pay for information otherwise?\nHistory offers little encouragement.If audiences were willing to pay more for better content, why wasn't\nanyone already selling it to them?  There was no reason you couldn't\nhave done that in the era of physical media.  So were the print\nmedia and the music labels simply overlooking this opportunity?  Or\nis it, rather, nonexistent?What about iTunes?  Doesn't that show people will pay for content?\nWell, not really. iTunes is more of a tollbooth than a store.  Apple\ncontrols the default path onto the iPod.  They offer a convenient\nlist of songs, and whenever you choose one they ding your credit\ncard for a small amount, just below the threshold of attention.\nBasically, iTunes makes money by taxing people, not selling them\nstuff.  You can only do that if you own the channel, and even then\nyou don't make much from it, because a toll has to be ignorable to\nwork.  Once a toll becomes painful, people start to find ways around\nit, and that's pretty easy with digital content.The situation is much the same with digital books.  Whoever controls\nthe device sets the terms.  It's in their interest for content to\nbe as cheap as possible, and since they own the channel, there's a\nlot they can do to drive prices down.  Prices will fall even further\nonce writers realize they don't need publishers.  Getting a book\nprinted and distributed is a daunting prospect for a writer, but\nmost can upload a file.Is software a counterexample?  People pay a lot for desktop software,\nand that's just information.  True, but I don't think publishers\ncan learn much from software.  Software companies can charge a lot\nbecause (a) many of the customers are businesses, who get in\ntrouble\nif they use pirated versions, and (b) though in form merely\ninformation, software is treated by both maker and purchaser as a\ndifferent type of thing from a song or an article.   A Photoshop\nuser needs Photoshop in a way that no one needs a particular song\nor article.That's why there's a separate word, \"content,\" for information\nthat's not software.  Software is a different business.  Software\nand content blur together in some of the most lightweight software,\nlike casual games.  But those are usually free.   To make money the\nway software companies do, publishers would have to become software\ncompanies, and being publishers gives them no particular head start\nin that domain.\n[2]The most promising countertrend is the premium cable channel.  People\nstill pay for those.  But broadcasting isn't publishing: you're not\nselling a copy of something.  That's one reason the movie business\nhasn't seen their revenues decline the way the news and music\nbusinesses have.  They only have one foot in publishing.To the extent the movie business can avoid becoming publishers,\nthey may avoid publishing's problems.  But there are limits to how\nwell they'll be able to do that.  Once publishing—giving people\ncopies—becomes the most natural way of distributing your content,\nit probably doesn't work to stick to old forms of distribution just\nbecause you make more that way.  If free copies of your content are\navailable online, then you're competing with publishing's form of\ndistribution, and that's just as bad as being a publisher.Apparently some people in the music business hope to retroactively\nconvert it away from publishing, by getting listeners to pay for\nsubscriptions.  It seems unlikely that will work if they're just\nstreaming the same files you can get as mp3s.NextWhat happens to publishing if you can't sell content?  You have two\nchoices: give it away and make money from it indirectly, or find\nways to embody it in things people will pay for.The first is probably the future of most current media.\nGive music\naway and make money from concerts and t-shirts.  Publish articles\nfor free and make money from one of a dozen permutations of\nadvertising.  Both publishers and investors are down on advertising\nat the moment, but it has more potential than they realize.I'm not claiming that potential will be realized by the existing\nplayers.  The optimal\nways to make money from the written word\nprobably require different words written by different people.It's harder to say what will happen to movies.  They could evolve\ninto ads.  Or they could return to their roots and make going to\nthe theater a treat.  If they made the experience good enough,\naudiences might start to prefer it to watching pirated movies at\nhome.\n[3]\nOr maybe the movie business will dry up, and the people\nworking in it will go to work for game developers.I don't know how big embodying information in physical form will\nbe.  It may be surprisingly large; people overvalue\nphysical stuff.\nThere should remain some market for printed books, at least.I can see the evolution of book publishing in the books on my\nshelves.  Clearly at some point in the 1960s the big publishing\nhouses started to ask: how cheaply can we make books before people\nrefuse to buy them?  The answer turned out to be one step short of\nphonebooks.  As long as it isn't floppy, consumers still perceive\nit as a book.That worked as long as buying printed books was the only way to\nread them.  If printed books are optional, publishers will have to\nwork harder to entice people to buy them.  There should be some\nmarket, but it's hard to foresee how big, because its size will\ndepend not on macro trends like the amount people read, but on the\ningenuity of individual publishers.\n[4]Some magazines may thrive by focusing on the magazine as a physical\nobject.  Fashion magazines could be made lush in a way that would\nbe hard to match digitally, at least for a while.  But this is\nprobably not an option for most magazines.I don't know exactly what the future will look like, but I'm not\ntoo worried about it.  This sort of change tends to create as many\ngood things as it kills.  Indeed, the really interesting question is not\nwhat will happen to existing forms, but what new forms will appear.The reason I've been writing about existing forms is that I don't\nknow what new forms will appear.  But though I can't predict\nspecific winners, I can offer a recipe for recognizing them.  When\nyou see something that's taking advantage of new technology to give\npeople something they want that they couldn't have before, you're\nprobably looking at a winner.  And when you see something that's\nmerely reacting to new technology in an attempt to preserve some\nexisting source of revenue, you're probably looking at a loser.Notes[1]\nI don't like the word \"content\" and tried for a while to avoid\nusing it, but I have to admit there's no other word that means the\nright thing.  \"Information\" is too general.Ironically, the main reason I don't like \"content\" is the thesis\nof this essay.  The word suggests an undifferentiated slurry, but\neconomically that's how both publishers and audiences treat it.\nContent is information you don't need.[2]\nSome types of publishers would be at a disadvantage trying\nto enter the software business.  Record labels, for example, would\nprobably find it more natural to expand into casinos than software,\nbecause the kind of people who run them would be more at home at\nthe mafia end of the business spectrum than the don't-be-evil end.[3]\nI never watch movies in theaters anymore.  The tipping point\nfor me was the ads they show first.[4]\nUnfortunately, making physically nice books will only be a\nniche within a niche.  Publishers are more likely to resort to\nexpedients like selling autographed copies, or editions with the\nbuyer's picture on the cover.Thanks to Michael Arrington, Trevor Blackwell, Steven Levy, Robert\nMorris, and Geoff Ralston for reading drafts of this."},{"title":"Probability","text":"Suppose\nthat being over 7 feet tall indicates with 60% probability that someone\nis a basketball player, and carrying a basketball indicates this with 72%\nprobability.  If you see someone who\nis over 7 feet tall and carrying a basketball, what is the probability\nthat they're a basketball player?If a and b are\nthe probabilities associated with two independent pieces of evidence,\nthen combined they indicate a probability of:       ab\n-------------------\nab + (1 - a)(1 - b)\nSo in this case our answer is:         (.60)(.72)\n-------------------------------\n(.60)(.72) + (1 - .60)(1 - .72)\nwhich is .794.  There is a 79.4% chance that the person is a basketball player.When there are more than two pieces of evidence, the formula expands\nas you might expect:            abc\n---------------------------\nabc + (1 - a)(1 - b)(1 - c)\nIn the case of spam filtering, what we want to calculate is the probability\nthat the mail is a spam, and the individual pieces of evidence\na, b, c, ... are the\nspam probabilities associated with each of the words in the mail.For a good explanation of the background, see:http://www.mathpages.com/home/kmath267.htm."},{"title":"Product Manager","text":"GeoCities Product ManagerYahoo! is looking for a talented, seasoned product manager to drive\nour Yahoo! GeoCities product line.  Yahoo! GeoCities is the online\ncommunity will millions of members and the most widely recognized name\nin online self-publishing.  In this role, you will manage our free and\npaid consumer web hosting business.  You will work closely with\nengineering, user experience design, marketing, operations, and\ncustomer care teams to deliver great products to the market.  This\nrole is mostly traditional inbound product management plus some\ntraditional outbound product marketing.Key responsibilities include managing the full product lifecycle, from\nideation through to maintenance; owning the customer experience and\nmaintaining a deep understanding of competitive offerings; developing\nbusiness cases to drive investments; soliciting customer feedback from\ncustomers, from customer care, and through market research;\ntranslating customer needs into prioritized product requirements;\nwriting product requirements documents; working closely with user\nexperience design to develop functional specifications; managing\nprioritization and trade-offs across functions and features; driving\nproduct roadmap and vision for the consumer product line; coordinating\nreleases and functionality with the business web hosting product line;\nworking closely with engineering and QA to deliver quality products on\nschedule; working with Marketing and Sales to develop product\nmessaging and positioning; collaborating on product launch materials;\nand providing post-launch support.Desired qualifications include 5+ years of product management\nexperience planning, launching and supporting software products;\ndemonstrated track record of success building consumer communities and\nserving consumer needs; demonstrated track record of successfully\nleading cross-functional teams to launch great products; experience\npreparing requirements documents (MRD / PRD); experience working with\nmarketing to prepare product positioning and market content; being\ncomfortable in a fast-paced, innovative environment; being thorough,\narticulate, and results oriented; strong analytical and technical\nskills.  Experience with recurring revenue hosted products a plus.MBA desired; undergraduate degree a must, technical undergraduate\ndegree a plus.Please apply online at http://careers.yahoo.com."},{"title":"Programming Bottom-Up","text":"1993\n(This essay is from the introduction to On Lisp.  The red text\nexplains the origins of Arc's name.)It's a long-standing principle of programming style that the functional\nelements of a program should not be too large.  If some component of a\nprogram grows beyond the stage where it's readily comprehensible,\nit becomes a mass of complexity which conceals errors as easily\nas a big city conceals fugitives.  Such software will be\nhard to read, hard to test, and hard to debug.In accordance with this principle, a large program must be divided\ninto pieces, and the larger the program, the more it must be divided.\nHow do you divide a program?  The traditional approach is\ncalled top-down design: you say \"the purpose of the\nprogram is to do these seven things, so I divide it into seven major\nsubroutines.  The first subroutine has to do these four things, so\nit in turn will have four of its own subroutines,\" and so on.\nThis process continues until the whole program has the right level\nof granularity-- each part large enough to do something substantial,\nbut small enough to be understood as a single unit.Experienced Lisp programmers divide up their programs differently.\nAs well as top-down design, they follow a principle which\ncould be called bottom-up design-- changing the language\nto suit the problem.\nIn Lisp, you don't just write your program down toward the language,\nyou also build the language up toward your program.  As you're\nwriting a program you may think \"I wish Lisp had such-and-such an\noperator.\" So you go and write it. Afterward\nyou realize that using the new operator would simplify the design\nof another part of the program, and so on.\nLanguage and program evolve together.\nLike the border between two warring states,\nthe boundary between language and program is drawn and redrawn,\nuntil eventually it comes to rest along the mountains and rivers,\nthe natural frontiers of your problem.\nIn the end your program will look as if the language had been\ndesigned for it.\nAnd when language and\nprogram fit one another well, you end up with code which is\nclear, small, and efficient.\nIt's worth emphasizing that bottom-up design doesn't mean\njust writing the same program in a different order.  When you\nwork bottom-up, you usually end up with a different program.\nInstead of a single, monolithic program,\nyou will get a larger language with more abstract operators,\nand a smaller program written in it.  Instead of a lintel,\nyou'll get an arch.\nIn typical code, once you abstract out the parts which are\nmerely bookkeeping, what's left is much shorter;\nthe higher you build up the language, the less distance you\nwill have to travel from the top down to it.\nThis brings several advantages:\nBy making the language do more of the work, bottom-up design\nyields programs which are smaller and more agile.  A shorter\nprogram doesn't have to be divided into so many components, and\nfewer components means programs which are easier to read or\nmodify.  Fewer components also means fewer connections between\ncomponents, and thus less chance for errors there.  As\nindustrial designers strive to reduce the number of moving parts\nin a machine, experienced Lisp programmers use bottom-up design\nto reduce the size and complexity of their programs. Bottom-up design promotes code re-use.\nWhen you write two\nor more programs, many of the utilities you wrote for the first\nprogram will also be useful in the succeeding ones.  Once you've\nacquired a large substrate of utilities, writing a new program can\ntake only a fraction of the effort it would require if you had to\nstart with raw Lisp. Bottom-up design makes programs easier to read.\nAn instance of this type\nof abstraction asks the reader to understand a general-purpose operator;\nan instance of functional abstraction asks the reader to understand\na special-purpose subroutine. [1] Because it causes you always to be on the lookout for patterns\nin your code, working bottom-up helps to clarify your ideas about\nthe design of your program.  If two distant components of a program\nare similar in form, you'll be led to notice the similarity and\nperhaps to redesign the program in a simpler way.\nBottom-up design is possible to a certain degree in languages\nother than Lisp.  Whenever you see library functions,\nbottom-up design is happening.  However, Lisp gives you much broader\npowers in this department, and augmenting the language plays a\nproportionately larger role in Lisp style-- so much so that\nLisp is not just a different language, but a whole different way\nof programming.It's true that this style of development is better suited to\nprograms which can be written by small groups.  However, at the\nsame time, it extends the limits of what can be done by a small\ngroup.  In The Mythical Man-Month,\nFrederick Brooks\nproposed that the productivity of a group of programmers\ndoes not grow linearly with its size.  As the size of the\ngroup increases, the productivity of individual programmers\ngoes down.  The experience of Lisp programming\nsuggests a more cheerful way\nto phrase this law: as the size of the group decreases, the\nproductivity of individual programmers goes up.\nA small group wins, relatively speaking, simply because it's\nsmaller.  When a small group also takes advantage of the\ntechniques that Lisp makes possible, it can\nwin outright.New: Download On Lisp for Free.[1] \"But no one can read\nthe program without understanding all your new utilities.\"\nTo see why such statements are usually mistaken,\nsee Section 4.8."},{"title":"Programming FAQ","text":"What editor do you use?vi.How can I learn to program?Find a friend who knows how to program. Get them to set you up with a system\nwhere you can edit and run programs.  Use whatever language they suggest\nfor a beginner (probably it will be Python or Ruby).   Then get the\nO'Reilly book and start working through it.As you learn the mechanics of writing and running\na program, start thinking about specific\nprograms you want to write.  That will motivate you to learn\nmore.Don't start with a problem that's too big.\nA good way\nto begin is to take an existing program and\nmodify it to do something new.Initially your programs will be\nugly, but don't worry about that.\nEveryone's are. Just keep going, and they'll get\nbetter.As you learn, you'll find it\nuseful to look at programs other people have written.\nBut you'll learn more from this once you've tried\nprogramming yourself.Finally, find friends who like to write programs.\nThey can answer your technical questions; you'll\nget new ideas from talking to them; and they'll be\nthe audience for your first efforts.\nWhy do you advise plunging right into a programming project\ninstead of carefully planning it first?If you're trying to solve a simple, predefined problem\nlike doing a depth-first search, thinking everything\nout beforehand doesn't hurt.  But few real problems\nare like that.  In real-world\napplications, you don't usually know at first precisely what\nproblem you're trying to solve.  So if you spend a lot\nof time planning in advance, what you'll end up with\nis a minutely detailed plan for solving the wrong\nproblem.With complex, ill-defined problems, you're\nbetter off writing a prototype as fast as you can,\nseeing what turns out to be wrong with it, and then\nchanging your definition of the problem accordingly.Often the reason programmers are pushed into planning\nis not that the problem requires it, but that project\nmanagers require it.  Maybe programmers\nshould give managers an explicit choice: do you want\nme to solve the problem in the way that will make you\nfeel good, or the way that will yield the best solution?Why do you keep going on about Lisp?There are a number of topics I go on about: that small companies\ndo things better than big ones; that cubicles suck; that you\nhave to understand design to be a good hacker; that\nplanning is overrated.  Those don't seem so conspicuous,\nbecause many readers either have no prior opinion,\nor already agree.It doesn't cost\nanything to realize that cubicles suck.  Few people have a\nvested interest in one style of office over another.  But\neveryone has a vested interest in the languages they already\nknow, because (a) it is a lot of work to learn a new language,\nand (b) programming languages dictate how you think about programs,\nso it is hard even to conceive of a language more powerful than\nwhatever you're used to.\nDissing someone else's language is considered rude, I know.\nBut rude is not the same as false.  And any language designer\nhas to face awkward questions like which languages are\nbetter, and why, just as proctologists have to do things that\nwould be considered extremely rude if ordinary people did them.\nIsn't\nobject-oriented programming naturally suited to some problems?Yes and no.  A lot of what seem to be OO problems turn out not to\nbe if you have random access to the concepts that together comprise\nobject-orientedness.If I were writing a CAD program or a simulation, for example,\nI'd probably use OO abstractions (though I'd probably end up\ncreating my own OO model with macros instead of using whatever\ncame with the language).But if I were trying to solve the problem one reader sent to me\nas a canonical example of an OO problem, I wouldn't.\nSuppose you have n serial ports, each of which may speak one of k\nprotocols, and this must be configurable at run-time.\nI'd just use an n-by-k array of closures to represent this."},{"title":"Quotes","text":"\"The less confident you are, the more serious you have to act.\"- Tara Ploughman\"The condition of man is already close to satiety and arrogance, and there is danger of destruction of everything in existence.\"- a Brahmin to Onesicritus, 327 BC, reported in Strabo's Geography\"Change breaks the brittle.\"- Jan HoutemaThe sons of Hermes love to play,And only do their best when theyAre told they oughtn't;Apollo's children never shrinkFrom boring jobs but have to thinkTheir work important.- W. H. Auden, Under Which Lyre\"Programs must be written for people to read, and only incidentally for\nmachines to execute.\"- Abelson & Sussman, SICP, preface to the first edition\"That language is an instrument of human reason, and not merely a medium\nfor the expression of thought, is a truth generally admitted.\"- George Boole, quoted in Iverson's Turing Award Lecture\"Short words are best and the old words when short are best of all.\"- Winston Churchill\"Many big people were chasing me. I didn't know what to do. So I thought I would surprise them and throw it.\"- Garo Yepremian, Miami placekicker, after a disastrous attempt to throw a pass in the Super Bowl.\"That book is good in vain which the reader throws away. He only is the master who keeps the mind in pleasing captivity; whose pages are perused with eagerness, and in hope of new pleasure are perused again; and whose conclusion is perceived with an eye of sorrow, such as the traveller casts upon departing day.\"- Johnson, Lives of the Poets: Dryden\"Don't worry about what anybody else is going to do. The best way to predict\nthe future is to invent it.\"- Alan Kay\"But the audience is right. They're always, always right. You hear directors complain that the advertising was lousy, the distribution is no good, the date was wrong to open the film. I don't believe that. The audience is never wrong. Never.\"- William Friedkin, in a NYT interview\"Dealing with failure is easy: Work hard to improve.\nSuccess is also easy to handle:\nYou've solved the wrong problem. Work hard to improve.\"- Alan Perlis\"Frankly, I don't think you could have driven a needle up my sphincter using a sledgehammer.\"- Col. Barry Horne, F-117 pilot, on first mission over Baghdad\"Two centuries later a most clear-sighted historian of the Second Crusade can find space in a short narrative to record on many occasions the flattery, perjury, perfidy, blasphemy, heresy, arrogance, servility, deceit, pride, cunning and infidelity of the Greeks.\"- R. W. Southern, The Making of the Middle Ages\"The imagination of nature is far, far greater than the imagination of man.\"- Richard Feynman\"The greatest dangers to liberty lurk in insidious encroachment by men of zeal, well-meaning but without understanding.\"- Brandeis\"People who read Cosmopolitan magazine are very\ndifferent from those who do not.\"- Donald Berry, Statistics: A Bayesian Perspective\"The art of handling university students is to make oneself appear, and this almost ostentatiously, to be treating them as adults....\"- Arnold Toynbee, Experiences\"Americans spend an average of four hours a day watching TV, an hour of that enduring ads. That adds up to an astounding 10% of total leisure time; at current rates, a typical viewer fritters away three years of his life getting bombarded with commercials.\"- Scott Woolley, Forbes\"The best writing is rewriting.\"- E. B. White\"Modern invention has been a great leveller. A machine may operate far more quickly than a political or economic measure to abolish privilege and wipe out the distinctions of class or finance.\"- Ivor Brown, The Heart of England\"If our goal is to write poetry, the only way we are likely to\nbe any good is to try to be as great as the best.\"- Donald Hall, Poetry and Ambition\"I am annoyed to find myself continually described by people whom I have never set eyes on as bad-tempered.\"- Evelyn Waugh, Diary (26 Dec 47)\"Premature optimization is the root of all evil (or at least\nmost of it) in programming.\"- Donald Knuth\"In France those absurd perversions of the art of war which covered themselves under the name of chivalry were more omnipotent than in any other country of Europe. The strength of the armies of Philip and John of Valois was composed of a fiery and undisciplined aristocracy which imagined itself to be the most efficient military force in the world, but which was in reality little removed from an armed mob.\"- C. W. C. Oman, The Art of War in the Middle Ages\"The public should always be wondering how it is possible to give so much for the money.\"- Henry Ford\"None ever wished it longer than it is.\"- Johnson on Paradise Lost\"Many large and high class greengrocers of my acquaintance have never heard of the Golden Wonder potato.\"- Roy Genders, Vegetables for the EpicureThe best lack all conviction, while the worstAre full of passionate intensity.- Yeats, The Second Coming\"We act as though comfort and luxury were the chief requirements of life, when all that we need to make us happy is something to be enthusiastic about.\"- Charles Kingsley\"The path from good to evil goes through bogus.\"- Tara Ploughman\"Lisp has jokingly been called \"the most intelligent way to misuse a computer\". I think that description is a great compliment because it transmits the full flavor of liberation: it has assisted a number of our most gifted fellow humans in thinking previously impossible thoughts.\"- Edsger Dijkstra, CACM, 15:10\"Many who burnt heretics in the ordinary way of their business were otherwise excellent people.\"- G. M. Trevelyan, \"Bias in History\"\"He became an object of ridicule in 1993 when a paper published an intercepted phone call in which he told his lover Camilla Parker Bowles he wanted to be reincarnated as her tampon.\"- Reuters story, on Prince Charles\"We're even wrong about which mistakes we're making.\"- Carl Winfeld\"From this place she sent into the world those novels, which by many have been placed on the same shelf as the works of a D'Arblay and an Edgeworth.\"- Henry Austen on his sister Jane, in a preface to Persuasion\"The key to performance is elegance, not battalions of special cases.\"- Jon Bentley and Doug McIlroy\"The economic depression that struck Europe in the fourteenth century was followed ultimately by economic and technological recovery. But the depression we have moved into will have no end. We can anticipate centuries of decline and exhaustion.\"- Jean Gimpel, The Medieval Machine, 1975\"Politics is not the art of the possible. It consists in choosing between the disastrous and the unpalatable.\"- J. K. Galbraith, Letter to Kennedy, 1962\"A typical dinner from the ape menu would be tofu bake with ratatouille of aubergine, onions and sweet peppers, with pearled barley and vegetable side dishes, says the team.\"- New Scientist\"Guy Steele leads a small team of researchers in Burlington, Massachusetts,\nwho are taking on an enormous challenge-- create a programming language\nbetter than Java.\"- Sun.Com (my italics)\"I had my own reactions to Paul's essay-- on the whole I liked it but when I\nconnected some dots I found some suggestions of things I strongly disliked--\nnot so much in the essay as suggested by it.\"- reaction to What You Can't Say in a blog\"Your twenties are always an apprenticeship, but you don't always know\nwhat for.\"- Jan Houtema\"In addition, the board rewrote the definition of science,\nso that it is no longer limited to the search for natural\nexplanations of phenomena.\"- AP story on Kansas Board of Education\"A danger sign that fellow-obsessionals will at once recognize\nis the tendency to regard the happiest moments of your life as\nthose that occur when someone who has an appointment to see you\nis prevented from coming.\"- Peter Medawar, Memoirs of a Thinking Radish\"Never offer what you'd hate someone for accepting.\"- Tara Ploughman\"The pagans were incensed at the rashness of a recent and obscure sect,\nwhich presumed to accuse their countrymen of error, and to devote their\nancestors to eternal misery.\"- Gibbon, The Decline and Fall of the Roman Empire\n\"Simultaneously reifying and challenging hegemonic codes of race, class,\ngender and regional or national identity, his characters explore the\ncomplex and changing postmodern cultural landscape.\"- Robert Bennett, English professor at Montana State, announcing a panel\ndiscussion about Brad Pitt\"In the councils of government, we must guard against the acquisition of unwarranted influence, whether sought or unsought, by the military-industrial complex. The potential for the disastrous rise of misplaced power exists and will persist.\"- Eisenhower, Farewell Address\"Keep away from people who try to belittle your ambitions. Small people always do that, but the really great make you feel that you, too, can become great.\"- Mark Twain\"However little television you watch, watch less.\"- David McCullough\"Any word you have to hunt for in a thesaurus is the wrong word.\"- Stephen King\"The people can always be brought to the bidding of the leaders. That is easy. All you have to do is tell them they are being attacked, and denounce the pacifists for lack of patriotism, and exposing the country to greater danger.\"- Goering at the Nuremberg Trials\"As all these results were obtained, not by any heroic method, but by\npatient and detailed reasoning, I began to think it probable that\nphilosophy had erred in adopting heroic remedies for intellectual\ndifficulties, and that solutions were to be found merely by greater\ncare and accuracy. This view I have come to hold more and more strongly\nas time went on, and it has led me to doubt whether philosophy, as a\nstudy distinct from science and possessed of a method of its own, is\nanything more than an unfortunate legacy from theology.\"- Bertrand Russell, \"Logical Atomism\"\"Get the important things right.\"- N. P. Calderwood\"The power of instruction is seldom of much efficacy except in those happy dispositions where it is almost superfluous.\"- Gibbon\"I do not know what the Lord's anointed, his Vicegerent upon earth,\ndivinely appointed by him, and accountable to none but him for his\nactions, will either think or do, upon these symptoms of reason and good sense\nwhich seem to be breaking out all over France: but this I foresee,\nthat, before the end of this century, the trade of both King and\nPriest will not be half so good a one as it has been.\"- Chesterfield, letter to his son, 13 Apr 1752\"filter(P, S) is almost always written clearer as [x for x in S if P(x)]\"- Guido van Rossum on Python\"I'm surrounded by postmodern idiots and blatherers. Your writings give me hope.\"- email from a reader\"In the last analysis, productivity of labour is the most important, the principal thing for the victory of the new social system.\"- Lenin, quoted in First Five-Year Plan for the Development of the National Economy of the People's Republic of China in 1953-1957\"Most interesting phenomena have multiple causes.\"- N. P. Calderwood\"From 1911 to 1920, the mood of the city varied between\nutter dullness and tremendous excitement.\"- Arthur Coffman, An Illustrated History of Palo Alto\"People don't change their minds.  They die, and are replaced by people\nwith different opinions.\"- Arturo Albergati\"No man who ever held the office of President would congratulate a friend on obtaining it.\"- John Adams\"PowerPoint makes us stupid.\"- General James N. Mattis, USMC\"The best way to do something 'lean' is to gather a tight group of people, give them very little money, and very little time.\"- Bob Klein, chief engineer of the F-14 program\"But camels, though odious to view and endowed with the offensive spirit, did not enjoy the blessing of pachydermaty.\"- F. E. Adcock, The Greek and Macedonian Art of War\"As it turned out, the obvious clearly stated, and combined with new observations, was sometimes close to revolutionary.\"- Wallace Stegner on John Wesley Powell \"Focusing is about saying no.\"- Steve Jobs\"The very word \"secrecy\" is repugnant in a free and open society; and we are as a people inherently and historically opposed to secret societies, to secret oaths and to secret proceedings. We decided long ago that the dangers of excessive and unwarranted concealment of pertinent facts far outweighed the dangers which are cited to justify it. Even today, there is little value in opposing the threat of a closed society by imitating its arbitrary restrictions. Even today, there is little value in insuring the survival of our nation if our traditions do not survive with it.\"- John F. Kennedy\"In the Zenith Color chassis there are no printed circuits, no\nproduction shortcuts.  Every connection is carefully hand-wired\nwith the same exacting care that makes Zenith America's largest\nselling TV, and your best Color TV buy.\"- Zenith TV ad, 1964\"Semper aut discere, aut docere, aut scribere dulce habui.\"- Bede\"The qualities that made for success in a fighter-pilot seemed to be just those sturdy qualities that made for success in other professions; observation, initiative, determination, courage, including the courage to run away. In course of time it appeared that men who had a private axe to grind beyond the public axe of the King's enemies were especially successful.\"- Jim Bailey, The Sky Suspended\"Everything about it was visibly mis-shapen, corrupt, crawling, verminous; for a time I could not bear to look at it, and passed with averted eyes; recovering from this weakness, I forced myself to look, and to face day by day the question: a thing so obviously, so incontrovertibly, so indefensibly bad, why had Scott done it?\"- R. G. Collingwood on the Albert Memorial\"Anybody who cares less about wanting to be cool, I think, is more interesting.\"- Aimee Mann\"The late Richard Feynman, a superb physicist, said once as we talked about the\nlaser that the way to tell a great idea is that, when people hear it, they say,\n'Gee, I could have thought of that.'\"- Charles Townes, How the Laser Happened\"If we chose always to be wise we should rarely need to be virtuous. But inclinations which we could easily overcome irresistibly attract us. We give in to slight temptations and minimize the danger. We fall insensibly into dangerous situations, from which we could easily have safeguarded ourselves, but from which we cannot withdraw without heroic efforts which appal us. So finally, as we tumble into the abyss, we ask God why he has made us so feeble. But, in spite of ourselves, He replies through our consciences: 'I have made you too feeble to climb out of the pit, because I made you strong enough not to fall in.'\"- Rousseau, Confessions, Cohen trans.\"Constantly fortified with the new blood of immigrants who saw America as a place where anything was possible, the nation had adopted an ethos that elevated problem solving to the status of religion.\"- John Hoyt Williams, A Great and Shining Road\"That 95 per cent. fail of those who start in business upon their own\naccount seems incredible, and yet such are said to be the statistics\nupon the subject.\"- Andrew Carnegie, 1896\"You should never turn a man's generosity as a sword against him. Any virtue that a man has, even if he has many vices, should not be used as a tool against him.\"- Rabi to Feynman\"You can't say I didn't try really hard, 'cause I'm trying really hard to be good.\"- Tom Petty\"He begins working calculus problems in his head as soon as he awakens. He did calculus while driving in his car, while sitting in the living room, and while lying in bed at night.\"- divorce complaint of Richard Feynman's second wife\"The development of this aircraft was long and complex even by Soviet standards, partially explained by the fact that its entire design team was in jail.\"- Howard Moon on the TU-2\"It is said that there is a technical term\nfor people who believe that little boys and\nlittle girls are born indistinguishable and\nare molded into their natures by parental\nsocialization. The term is 'childless.'\"- Steven Pinker\"When you have eliminated the impossible, whatever remains, however\nimprobable, must be the truth.\"- Sherlock HolmesHis notions fitted things so well,That which was which he could not tell; But oftentimes mistook th' oneFor th' other, as great clerks have done.- Samuel Butler, Hudibras\"A complex system that works is invariably found to have evolved from a simple system that worked. The inverse proposition also appears to be true: A complex system designed from scratch never works and cannot be made to work.\"- John Gall\"The Muslims of al-Andalus had nothing to learn from their Christian\nneighbours and were incurious about them. Geographers' accounts of\nChristian Spain tended to be cursory in the extreme: it was cold, the\ninhabitants were barbarians who ate pigs, you could get slaves there � that\nwas about the sum of it.\"- Richard Fletcher, Moorish Spain\"When the enemy is making a false movement we must take good care not to interrupt him.\"- Napoleon\"Leave me alone, I'm trying to build! Don't you know how people build? By concentrating!\"- my 5 year old son, building Lego\"An expert is a man who has made all the mistakes which can be made in a very narrow field.\"- Niels Bohr\"Don't fear moving slowly. Fear standing still.\"- Chinese proverb\"I think a life properly lived is just learn, learn, learn all the time.\"- Charlie Munger\"The handicap under which most beginning writers struggle is that they don't know how to write.\"- Wodehouse\"Then in 1888 came the publication of Denton's history\nof England in the fifteenth century. This was a\nmasterpiece of egregious perversity, depicting the\nlater Middle Ages as a culminating period of ruinous\ntaxation, iniquitous labour laws, demoralizing\npestilences, and lavish dissipation of national\nresources upon violent and embittered domestic feuds\nand futile and indecisive foreign wars. The credulity\nof even the most undiscriminating reader was taxed to a\ndegree by a portrayal in which horror succeeded upon\ncataclysm, in a thickening atmosphere of crime and\nterror, want, degradation, and wretchedness.\"- A. R. Bridbury"},{"title":"RAQs","text":"These are questions that I've only been asked once or twice, but\nwhich seem especially interesting.Why don't more painters have hacking jobs?Probably for the same\nreason that few hackers take up painting.  They both seem\nfrom the outside like great abstruse mysteries.  You can\nlearn great abstruse mysteries as a teenager, because\neverything is a mystery at that point anyway.  And you have the\nboundless self confidence that comes from ignorance.  But unless you\nlearn both as a teenager, which is rare, you'll be afraid\nof the other later.What should I read to learn more about history?The way to do it is piecemeal.  You could just sit down and\ntry reading Roberts's History of the World cover\nto cover, but you'd probably lose interest.  I think it's\na better plan to read books about specific topics, even\nif you don't understand everything the first time\nthrough.Here are the most exciting ones I can think of:Clark, CivilisationWhite, Medieval Technology and Social ChangeMcEvedy, Penguin Atlases of Ancient and Medieval HistoryLaslett, The World We Have LostBernal, The Extension of ManFranklin, AutobiographyGirouard, Life in the English Country HousePirenne, Mohammed and CharlemagneRunciman, The Fall of ConstantinopleCipolla, Guns, Sails and EmpiresHadas, A History of RomeOman, The Art of War in the Middle AgesVasari, Lives of the ArtistsBovill, The Golden Trade of the MoorsCaesar, Gallic WarsKuhn, The Copernican RevolutionCouldn't you add something equivalent to Lisp macros to\nlanguages like Perl or Python?Not without turning them into dialects of Lisp.\nReal macros need to operate on the parse tree of the program.\nTo allow that in a language with syntax, you have to\n(a) make public the translation from\nsource code to parse trees, and (b) give the programmer the\nopportunity to run programs on parse trees before they go on to\nthe compiler.But it would be hard to do that without\ncreating a notation for parse trees; and once you do,\nyour language has become a skin on Lisp, in much\nthe same way that in\nOS X, the Mac OS became a skin on Unix.How can I avoid turning into a pointy-haired boss?The pointy-haired boss is a manager who doesn't program.  So the\nsurest way to avoid becoming him is to stay a programmer.\nWhat tempts programmers to become\nmanagers are companies with old-fashioned corporate structure, where\nthe only way to advance in salary and prestige is to go into\nmanagement.  So if you want to avoid becoming a PHB, avoid\nsuch companies, and work for (or start) startups.I never had to manage anyone in our startup, even though I\nwas the president.  The other hackers\nwere my peers, and would have given me the raspberry if I'd tried\nto \"manage\" them.  We operated by consensus.  And the rest of the\ncompany reported\nto our experienced COO, who was also more of a peer.Why be a manager when you could be a founder or early\nemployee at a startup?I'm about to become a teacher.  How can I be a good one?The best teachers I remember from school had three things\nin common:(1) They had high standards.  Like three year olds testing their\nparents, students will test teachers to see if they can\nget away with low-quality work or bad behavior.  They won't\nrespect the teachers who don't call them on it.(2) They liked us.  Like dogs, kids can tell very accurately\nwhether or not someone wishes them well.  I think a lot of our\nteachers either never liked kids much, or got burned out and\nstarted not to like them.  It's hard to be a good teacher once\nthat happens.  I can't think of one teacher in all the schools\nI went to who managed to be good despite disliking students.(3) They were interested in the subject.  Most of the public\nschool teachers I had weren't really interested in what they\ntaught.  Enthusiasm is contagious, and so is boredom.Two startups want to hire me.\nWhich should I choose?The one with the most determined and smartest founders (in\nthat order) is the more likely to succeed.  Pretend you're\nan investor—which you are, of your time—and ask\nyourself which of the two you'd buy stock in.How can I become really good at Lisp programming?Write an application big enough that you can make the lower\nlevels into a language layer.  Embedded languages (or as they\nnow seem to be called, DSLs) are the essence of Lisp hacking.What philosophy books would you recommend?I can't think of any I'd recommend. What I learned from trying to study philosophy is that the place to look is in other fields. If you understand math or history or aeronautical engineering very well, the most abstract of the things you know are what philosophy is supposed to be teaching. Books on philosophy per se are either highly technical stuff that doesn't matter much, or vague concatenations of abstractions their own authors didn't fully understand (e.g. Hegel).It can be interesting to study ancient philosophy, but more as a kind of accident report than to teach you anything useful.I want to start a startup, but I don't know how to program.  How\nlong will it take to learn?I would guess a smart person can learn to hack sufficiently well in\n6 months to a year.  The best way to do it would be to find some\nstartup to hire you in an initially menial capacity, and start\nlearning to program on the side.  Then gradually\nwork your way up from answering phones through system administration\nto actual software design.  There is always so much to do in a\nstartup that people won't be too picky about your paper qualifications,\nif you can solve problems for them without screwing up."},{"title":"Ramen Profitable","text":"July 2009Now that the term \"ramen profitable\" has become widespread, I ought\nto explain precisely what the idea entails.Ramen profitable means a startup makes just enough to pay the\nfounders' living expenses.  This is a different form of profitability\nthan startups have traditionally aimed for.  Traditional profitability\nmeans a big bet is finally paying off, whereas the main importance\nof ramen profitability is that it buys you time.\n[1]In the past, a startup would usually become profitable only\nafter raising and spending quite a lot of money.  A company making\ncomputer hardware might not become profitable for 5 years, during\nwhich they spent $50 million.  But when they did\nthey might have revenues of $50 million a year.   This kind of\nprofitability means the startup has succeeded.Ramen profitability is the other extreme: a startup that becomes\nprofitable after 2 months, even though its revenues are only $3000\na month, because the only employees are a couple 25 year old founders\nwho can live on practically nothing.  Revenues of $3000 a month do\nnot mean the company has succeeded.\nBut it does share something with the one\nthat's profitable in the traditional way: they don't need to raise\nmoney to survive.Ramen profitability is an unfamiliar idea to most people because\nit only recently became feasible.  It's still not feasible for a\nlot of startups; it would not be for most biotech startups, for\nexample; but it is for many software startups because they're now\nso cheap.  For many, the only real cost is the founders'\nliving expenses.The main significance of this type of profitability is that you're\nno longer at the mercy of investors.  If you're still losing money,\nthen eventually you'll either have to raise more\nor shut down.  Once you're\nramen profitable this painful choice goes away.\nYou can still raise money, but you don't have to do it now.* * *The most obvious advantage of not needing money is that\nyou can get better terms.  If investors know you need money, they'll\nsometimes take advantage of you.  Some may even deliberately\nstall, because they know that as you run out of money you'll become\nincreasingly pliable.But there are also three less obvious advantages of ramen profitability.\nOne is that it makes you more attractive to investors.  If you're\nalready profitable, on however small a scale, it shows that (a) you\ncan get at least someone to pay you, (b) you're serious about\nbuilding things people want, and (c) you're disciplined enough to\nkeep expenses low.This is reassuring to investors, because you've addressed three of\ntheir biggest worries.  It's common for them to fund companies that\nhave smart founders and a big market, and yet still fail.  When\nthese companies fail, it's usually because (a) people wouldn't pay\nfor what they made, e.g. because it was too hard to sell to them,\nor the market wasn't ready yet, (b) the founders solved the wrong\nproblem, instead of paying attention to what users needed, or (c)\nthe company spent too much and burned through their funding before\nthey started to make money.  If you're ramen profitable, you're\nalready avoiding these mistakes.Another advantage of ramen profitability is that it's good for\nmorale.  A company\ntends to feel rather theoretical when you first start it.  It's\nlegally a company, but you feel like you're lying when you call it\none.  When people start to pay you significant amounts, the company\nstarts to feel real.  And your own living expenses are the milestone\nyou feel most, because at that point the future flips state.  Now\nsurvival is the default, instead of dying.A morale boost on that scale is very valuable in a startup, because\nthe moral weight of running a startup is what makes it hard.  Startups\nare still very rare.  Why don't more people do it?  The financial\nrisk?  Plenty of 25 year olds save nothing anyway.  The long hours?\nPlenty of people work just as long hours in regular jobs. What keeps\npeople from starting startups is the fear of having so much\nresponsibility.  And this is not an irrational fear: it really is\nhard to bear.  Anything that takes some of that weight off you will\ngreatly increase your chances of surviving.A startup that reaches ramen profitability may be more likely\nto succeed than not.  Which is pretty exciting, considering the\nbimodal distribution of outcomes in startups: you either fail or\nmake a lot of money.The fourth advantage of ramen profitability is the least obvious\nbut may be the most important.  If you don't need to raise money,\nyou don't have to interrupt working on the company to do it.Raising money is terribly distracting.\nYou're lucky if your\nproductivity is a third of what it was before.  And it can last for\nmonths.I didn't understand (or rather, remember) precisely why raising\nmoney was so distracting till earlier this year.  I'd noticed that\nstartups we funded would usually grind to a halt when they switched\nto raising money, but I didn't remember exactly why till YC raised\nmoney itself.  We had a comparatively easy time of it; the first\npeople I asked said yes; but it took months to work out the\ndetails, and during that time I got hardly any real work done.  Why?\nBecause I thought about it all the time.At any given time there tends to be one problem that's the most\nurgent for a startup.  This is what you think about as you fall\nasleep at night and when you take a shower in the morning.  And\nwhen you start raising money, that becomes the problem you think\nabout.  You only take one shower in the morning, and if you're\nthinking about investors during it, then you're not thinking about\nthe product.Whereas if you can choose when you raise money, you can pick a time\nwhen you're not in the middle of something else, and you can probably\nalso insist that the round close fast.  You may even be able to\navoid having the round occupy your thoughts, if you don't care\nwhether it closes.* * *Ramen profitable means no more than the definition implies.  It\ndoes not, for example, imply that you're \"bootstrapping\" the\nstartup—that you're never going to take money from investors.\nEmpirically that doesn't seem to work very well.  Few startups\nsucceed without taking investment.  Maybe as startups get cheaper\nit will become more common.  On the other hand, the money is there,\nwaiting to be invested.  If startups need it less, they'll be able\nto get it on better terms, which will make them more inclined to\ntake it.  That will tend to produce an equilibrium.\n[2]Another thing ramen profitability doesn't imply is Joe Kraus's idea\nthat you should put your\nbusiness model in beta when you put your\nproduct in beta.  He believes you should get\npeople to pay you from the beginning.  I think that's too constraining.\nFacebook didn't, and they've done better than most startups.  Making\nmoney right away was not only unnecessary for them, but probably\nwould have been harmful.  I do think Joe's rule could be useful for\nmany startups, though.  When founders seem unfocused, I sometimes\nsuggest they try to get customers to pay them for something, in the\nhope that this constraint will prod them into action.The difference between Joe's idea and ramen profitability is that\na ramen profitable company doesn't have to be making money the way\nit ultimately will.  It just has to be making money.  The most\nfamous example is Google, which initially made money by licensing\nsearch to sites like Yahoo.Is there a downside to ramen profitability?  Probably the biggest\ndanger is that it might turn you into a consulting firm.  Startups\nhave to be product companies, in the sense of making a single thing\nthat everyone uses.  The defining quality of startups is that they\ngrow fast, and consulting just can't scale the way a product can.\n[3]\nBut it's pretty easy to make $3000 a month consulting; in\nfact, that would be a low rate for contract programming.  So there\ncould be a temptation to slide into consulting, and telling\nyourselves you're a ramen profitable startup, when in fact\nyou're not a startup at all.It's ok to do a little consulting-type work at first.  Startups\nusually have to do something weird at first.  But remember\nthat ramen profitability is not the destination.  A startup's\ndestination is to grow really big; ramen profitability is a trick\nfor not dying en route.Notes[1]\nThe \"ramen\" in \"ramen profitable\" refers to instant ramen,\nwhich is just about the cheapest food available.Please do not take the term literally.  Living on instant ramen\nwould be very unhealthy.  Rice and beans are a better source of\nfood.  Start by investing in a rice cooker, if you don't have one.Rice and Beans for 2n\nolive oil or butter\nn yellow onions\nother fresh vegetables; experiment\n3n cloves garlic\nn 12-oz cans white, kidney, or black beans\nn cubes Knorr beef or vegetable bouillon\nn teaspoons freshly ground black pepper\n3n teaspoons ground cumin\nn cups dry rice, preferably brown\nPut rice in rice cooker. Add water as specified on rice package.\n(Default: 2 cups water per cup of rice.) Turn on rice cooker and\nforget about it.Chop onions and other vegetables and fry in oil, over fairly low\nheat, till onions are glassy. Put in chopped garlic, pepper, cumin,\nand a little more fat, and stir.  Keep heat low. Cook another 2 or\n3 minutes, then add beans (don't drain the beans), and stir. Throw\nin the bouillon cube(s), cover, and cook on lowish heat for at least\n10 minutes more. Stir vigilantly to avoid sticking.If you want to save money, buy beans in giant cans from discount\nstores.  Spices are also much cheaper when bought in bulk.\nIf there's an Indian grocery store near you, they'll have big\nbags of cumin for the same price as the little jars in supermarkets.[2]\nThere's a good chance that a shift in power from investors\nto founders would actually increase the size of the venture business.\nI think investors currently err too far on the side of being harsh\nto founders.  If they were forced to stop, the whole venture business\nwould work better, and you might see something like the increase\nin trade you always see when restrictive laws are removed.Investors\nare one of the biggest sources of pain for founders; if they stopped\ncausing so much pain, it would be better to be a founder; and if\nit were better to be a founder, more people would do it.[3]\nIt's conceivable that a startup could grow big by transforming\nconsulting into a form that would scale.  But if they did that\nthey'd really be a product company.Thanks to Jessica Livingston for reading drafts of this."},{"title":"Re: Revenge of the Nerds","text":"Revenge of the Nerds has generated a lot of additional discussion,\nwhich I\nsummarize here for anyone interested in going deeper into the issues raised in it.Trevor Blackwell wrote that Lisp is only a win for certain classes of project.\nHis mail was so articulate that I will just include it verbatim:\nI think it would seem more persuasive if you limited the scope of\nwhere Lisp is supposed to be better. It probably isn't better, for\nexample, in:- communications, interface, format conversion\n- real-time control\n- numerically intensive code\n- operating system implementation\n- quick little scripts to munge files\nThe above actually constitute a large fraction of all software written.It is better for information processing: running very complex\nalgorithms across complex data sets. It's only recently, in the WWW\nage, that people actually do a lot of this.Before the rise of the Web, I think only a very small minority of\nsoftware contained complex algorithms: sorting is about as complex as\nit got. Can you think of a complex algorithm in FreeBSD? The 50\nmillion lines of code in a Nortel switch probably didn't even contain\na sort. It was all about managing hardware and resources and handling\nfailures gracefully. Cisco routers also have millions of lines of\nsoftware, but not many complex algorithms.The sort of software that ITA wrote is really very rare. 10 years ago,\nabout the only software with really complex algorithms were CAD design\n& synthesis, and they did use Lisp.That a shift in what kinds of software is being written makes Lisp\nresurface as excellent choice is a more believable statement than that\nthe vast majority of programmers have been boneheads for 40 years.\nI agree that Lisp might not be the language to use if you wanted to\ndo something really low level, like move bits around, and\nprocessor time was worth more to you than\nprogrammer time.  For that you'd want C or even assembly language.\nBut I think such applications are rare and getting rarer (see Moore's Law).\nI know of several places using Lisp for real-time applications, including\nRod Brooks' robot R&D lab.I also agree that Lisp might not be the ideal language to use to write\ncode that works closely with programs written in C, but that isn't\nLisp's fault.  Nor is C the ideal language to use to write programs that\nwork closely with Lisp.I disagree that Lisp is bad for writing quick little scripts.  Its interactive\nnature makes it especially good for that.I also disagree that it is not believable that the vast majority of programmers\nhave been boneheads for 40 years.  It seems to me entirely possible.\nMeasured simply by numbers of users, the current leaders in any field of\ntechnology (indeed, almost any field at all) will be mostly mediocre.\nLook at Windows.Technical innovations regularly take decades to spread.  Volkswagen started\nbuilding cars with unibodies in the 1930s.  By the 1980s, practically all new\ncars were designed that way.  Was it simply that the vast majority of car\ndesigners were boneheads for 40 years?  Yep, though I think\n\"conservative\" is the preferred euphemism.Bengt Richter came up with an additional Python solution:\ndef foo(n):\ndef bar(i):\nbar.s += i\nreturn bar.s\nbar.s = n\nreturn bar\nbut I think Python hackers still consider defining a new class to be the canonical\nsolution.Several Python users have written to tell me that the reason you can't\nwrite the Lisp/Perl/Smalltalk/Javascript program in Python is that lexical\nvariables in Python aren't mutable, and that \"anonymous functions\" can\nonly contain a single expression.  When I ask why you can't just write\ndef foo(n):\nlambda i: n += i\nin Python, I'm not asking what it is in the current definition of Python\nthat prevents this.   I know that Python currently imposes\nthese restrictions.  What I'm asking is what these restrictions buy you.\nHow does it make Python a better language if you can't change\nthe value of a variable from an outer scope, or put more than one\nexpression in a lambda?  What does it buy you to distinguish between\nexpressions and statements?The restriction on what you can say in an anonymous function seems\nparticularly indefensible.  In fact, the whole phrase \"anonymous function\"\nsuggests limited thinking.  Would you call a hash table that wasn't the value of a\nvariable an \"anonymous hash table?\"  If functions are a data type in your\nlanguage, they should be treated just like other data types.  A named\nfunction should just be a function that happens to be the value of a\nvariable.  Restricting what you can put in a function that isn't the value\nof a variable makes about as much sense as restricting what you can\ndo with a hash table or string that isn't the value of a variable.Thomas Herchenroeder wrote to stress that languages had to be suitable\nfor ordinary programmers, not just super-hackers:I believe you\nare thinking of an excellent hacker whose code gets read once in a while by\nfellow excellent hackers who marvel at his fine algorithms and coding\nstyle. They are interested to learn new things and eager to understand\neverything for the pure pleasure of the intellectual challenge.\nUnfortunately, that's not the world I (and a lot of other people) live in.\nMy co-workers ... want to get along with my code with minimal\neffort. So the power of a language becomes related to what an average IT\nprofessional can easily digest, which in turn is something that is commonly\ntaught at university courses, explained in easily available books and\ndiscussed in popular articles. It boils down to mainstream knowledge about\nprogramming, languages, algorithms and patterns. To a degree, you simply\nhave to go with the crowd.  Again Python: It implements mainstream concepts in\na succinct and elegant way.So, maybe we are back at the point where we need a \"powerful\" language for\nthe power users, the hackers. And a \"powerful\" (in a different sense)\nlanguage for everyday people in everyday companies.I agree that there is a  role\nfor languages designed for novice and less-motivated programmers.\nThe only thing I disagree about is whether \"powerful\" is the word\nto use to describe this quality.  I think there is already\na word for this proposed second sense of \"powerful\",\nand it is \"accessible.\"  A Ferrari is powerful.  A VW Golf is\naccessible.Why stretch the language to find some metaphorical sense in\nwhich you can call the Golf powerful, when there is already a\nword for the quality you mean?  Plus, if you blur the word\n\"powerful\" by using it too broadly, you no longer have a name\nfor the very definite quality possessed by the Ferrari.I think it is important that some of us, at least, keep\nour focus on power in the Ferrari sense.  Someone has to, because\nthat is the source of the next generation of \"mainstream knowledge\".\nIn 1980, university courses and easily available books were advanced\nif they talked about structured programming.  Now they talk about\ntopics like garbage collection and dynamic typing, which would in\n1980 have been considered esoteric stuff.Paul Prescod wrote that I chose an example that was deliberately Lisp-biased.\nIf I had wanted to do that I would have written a macro, not a function.\nIf the example I chose is\nbiased, it is Lisp/Perl/Smalltalk/Javascript biased, because the code is\nsimilarly simple in all four (and many others).I was actually surprised at how badly Python did.  I had never realized, for\nexample, that a Python lambda-expression couldn't contain the same things\nas a named function, or that variables from enclosing scopes are visible but not\nmodifiable.  Neither Lisp nor Perl nor Smalltalk nor Javascript impose either restriction.I can't see what advantage either restriction brings you.  I can see how Python's\ngradual, ongoing (= incomplete) evolution would have produced them.  So\nOccam's Razor implies that the latter is the reason Python is this way. I.e. these\nrestrictions are bugs, not features.Paul has written a rebuttal to Revenge of the Nerds,\nOn the\nRelationship between Python and Lisp.  (Peter Norvig has\nalso written about this topic in Python\nfor Lisp Programmers.)There has been a lot of discussion on LL1, about whether succinctness is a\ngood design goal for programming languages, as I implied in the appendix\nto Revenge of the Nerds.  That question\nis handled separately in Succinctness\nis Power."},{"title":"Re: What You Can't Say","text":"Why didn't you say some of the things you can't say?The most extreme of the things you can't say would be very\nshocking to most readers.  If you doubt that, imagine what\npeople in 1830 would think of our default educated\neast coast beliefs about, say, premarital sex, homosexuality,\nor the literal truth of the Bible.  We would seem depraved to\nthem.  So we should expect that someone who similarly\nviolated our taboos would seem depraved to us.If I said this kind of thing, it would be like someone doing\na cannonball into a swimming pool.  Immediately, the essay\nwould be about that, and not about the more general and\nultimately more important point.Another alternative would be to say milder, moderately\ncontroversial things, like those Larry Elder wrote about in\nThe\nTen Things You Can't Say In America.  I haven't read this\nbook and have no idea if it's any good,\nbut these are certainly not the ten things you can't\nsay in America.  I can easily think of ten\nthat would be more shocking.If I stuck to this kind of mildly shocking statement, it would\ngive people the comforting illusion that these\nideas, which you hear often enough on talk radio and in bars,\nrepresent the outer limits of what you can't say.In fact, finding the outer limits is very, very hard.\nPopular controversialists just go for the low\nhanging fruit.  To really solve the problem would take years of\nintrospection.  You have to untangle your ideas from the ideas\nof your time, and that's so hard that few people in history\nhave even come close.\nIsaac Newton, smart as he was, wasted years on theological\ncontroversies.I disagree with your generalization that physicists are\nsmarter than professors of French Literature.Actually, for illustrative purposes I did include a few things\nyou can't say, but I stuck to domain-specific ones.  Within\nuniversity faculties, this is the great unmentionable.\nAnd look at how much trouble I got\nin for bringing it up.  (So far no one from the US car industry\nhas complained though, perhaps because I mentioned explicitly\nthat a heresy was coming, instead of just inlining it.)Try this thought experiment.  A dictator\ntakes over the US and sends all the professors to re-education\ncamps.  The physicists are told they have to learn how\nto write academic articles about French literature, and\nthe French literature professors are told they have to\nlearn how to write original physics\npapers.  If they\nfail, they'll be shot.  Which group is more worried?We have some evidence here: the famous\nparody that physicist Alan Sokal got\npublished in Social Text.  How long did it take him to master the art of\nwriting deep-sounding nonsense well enough to fool the editors?\nA couple weeks?What do\nyou suppose would be the odds of a literary theorist\ngetting a parody of a physics paper published in a physics\njournal?The Conformist Test doesn't consider a third possibility:\nthat you simply don't care what anyone thinks.True enough.  But considering how very hard it is to disentangle\nyourself from the thinking of your time, someone who comforts\nhimself with this thought is almost certain to be mistaken.\nIt's not enough to be an ornery cuss.  You have to be Voltaire,\nand then some.We are the product of the our experiences, so of course you're\ngoing to have similar morality to people around you, but that\ndoesn't mean you're not independent.Sure it does.\nIndependent people transcend their time.\nCopernicus realized the sun didn't go around the\nearth when traditional teachings, everyone around him, and\neven the evidence of his senses said that it did.  At the time\nthe idea was such a stretch that he had a hard time believing it\nhimself: he was forced into it, because it was the only way\nto make the numbers come out right.It may be hard to transcend your time, but I think one should at\nleast aspire to, instead of comforting oneself with the thought\nthat being the product of a particular time and place excuses\none for being mistaken.The fact that you can't say something doesn't mean it's true.I believe this is implicit in  \"So it's likely that visitors\nfrom the future would agree with at least some of the statements\nthat get people in trouble today.\"\nIn an earlier version I made this point explicitly, but it\nseemed repetitive, so I cut it.The reason I forbid my children to use words like \"fuck\" and\n\"shit\" is not that I want them to seem innocent, but because\nthese words are ill-mannered and contribute nothing to\ncommunication.If these words didn't serve a purpose, they wouldn't exist.\nOne of their purposes is to express strong displeasure.  It may be ill-mannered to\nbe constantly expressing strong displeasure, but there are\ncases when it's warranted.I would not consider someone ill-mannered\nfor saying \"oh shit\" when told that their house had\njust burnt down.  I wouldn't consider a drill instructor\nill-mannered for saying \"what the fuck do you think you're\ndoing?\" to a recruit on a firing range who inadvertantly pointed\nhis weapon at another person.  In these situations,\n\"dear dear\" (the alternative my parents taught me) would be\ninsufficient-- it would be inaccurate.Here's a thought experiment you can try to examine your motives.\nIs there any situation in which the idea of your children\nusing these words would not seem repellent?  There are probably\nmoments of strong displeasure in everyone's life.  So if you\ndislike the idea of your children using such words regardless\nof the circumstances, then probably you do, in fact, simply\nwant them to seem innocent.You claim that it's lazy to label ideas as x-ist, and\nyet you say \"many otherwise intelligent people were socialists in the middle of\nthe twentieth century.\"This is not using a label to suppress ideas.  They called\nthemselves socialists. Saying that Sidney Webb was a\nsocialist is like saying that Myron Scholes is an economist.\nIt's just a statement of fact.How can you dismiss socialism so casually?I've thought a lot about this, actually; it was not a casual\nremark.  I think the fundamental question is not whether the\ngovernment pays for schools or medicine, but whether you\nallow people to get rich.In England in the 1970s, the top\nincome tax rate was 98%.  That's what the Beatles' song\n\"Tax Man\" is referring to when they say \"one for you, nineteen\nfor me.\"  Any country that makes this choice ends\nup losing net, because new technology tends to be developed\nby people trying to make their fortunes.  It's too much work\nfor anyone to do for ordinary wages.  Smart people might work on sexy\nprojects like fighter planes and space rockets for ordinary\nwages, but semiconductors or light bulbs or the\nplumbing of e-commerce probably have to be\ndeveloped by entrepreneurs.\nLife in the Soviet\nUnion would have been even poorer if they hadn't had American\ntechnologies to copy.Finland is sometimes given as an example of a prosperous socialist\ncountry, but\napparently the combined top tax rate is 55%, only 5% higher\nthan in California.  So if they seem that much more\nsocialist than the US, it is probably simply because they\ndon't spend so much on their military.There are indeed things you can't say in Holland.Oops, yes, I forgot about the fate of\nPim Fortuyn.\nWhat does ABQ stand for?Always be questioning."},{"title":"Re: Why Nerds are Unpopular","text":"Many people have written to me about Why Nerds are Unpopular,\nand many more seem to be posting about it on various Web sites.\nHere are answers to some of the points they've raised.It wasn't like that at my school.Some of my friends\nwho went to private schools or to one of the small number of really good\npublic school systems\nsay that things were very different for them.What I'm talking about in\nthis essay is the situation in the average American public secondary\nschool.  I feel confident that I understand that, because I went to\nthem.The scary thing is, the schools I went to were probably above average.  My parents\nchose the suburb we lived in because the schools\nwere said to be good.  (As newly arrived immigrants from England,\nthey had no idea how bad \"good\" was.)I knew smart kids who weren't nerds.Smart kids don't necessarily turn into nerds.  If you're good\nlooking, a natural athlete, or the sibling of a popular\nkid, you'll automatically be popular.  But most\npopular kids don't get that kind of free ride.  They have\nto work at being popular.  And if you're interested in, say,\nphysics, you won't have the time to spare.I also think girls are less likely to become nerds than boys\nof equal intelligence, possibly because they're more sensitive\nto social pressures.  In my school, at least, girls made more of\nan effort to conform than boys.Things are different now.  Now it's cool to be an outsider.In my school, it was cool to be a certain kind of outsider, but not a nerd.\nA guy who was tall and broad shouldered who dressed weirdly\nas a sign of rebellion was cool.  A guy who was small with\na receding chin and big glasses who dressed weirdly because\nhis mom picked out his clothes was not.  I expect this is still\ntrue today.Are smart kids' brains different?A couple people have said that there might be something neurologically\ndifferent about smart people, i.e. that the reason smart kids spend\ntheir time reading books instead of talking to friends is not so much that\nthey like books as that they don't like people.In the essay I deliberately avoided taking any stand on this; I merely\nsaid that they liked the one more than the other, without attempting to\nexplain why.From my experience, I'd say that while some smart kids may be\nborderline autistic, this can't by itself explain the smart/nerd correlation,\nbecause there are also plenty of nerds who are very talkative. Indeed,\none of the most characteristic nerd flaws is an addiction to newsgroup\nposting.Nerds deserve it.Another thing several people have said is that nerds deserve to be unpopular\nbecause they're so unpleasant.  This is often true.  The essay wasn't\nabout whether or not nerds deserve to be unpopular, just why they are.\nCertainly, some of the social\nskills that nerds avoid learning are genuinely desirable ones.Some nerds are unbearable well into adulthood.  I can think of several\nsmart people I couldn't stand talking to for more than a couple minutes.   I don't\nthink it's a good thing that smart people are sometimes unpleasant.  However,\nI stand by my statement that the nerds are playing a game much\ncloser to the one played in the real world.\nYou can be a complete asshole and still do really well in the real world.Nerds are unpopular because they're arrogant.Arrogance doesn't make kids unpopular.  The good\nathletes in my school were plenty arrogant, and it didn't harm\ntheir popularity.Public schools are designed to be bad.Several people have suggested I read articles by John Taylor Gatto,\ne.g. his\nSix Lesson Schoolteacher.There is an idea floating around that public schools are\ndeliberately designed to turn out brainless conformists.\nI don't believe this.  I think public schools are just what\nyou get by default.  If you build a giant building out in\nthe suburbs and lock the kids in it during weekdays in the\ncare of a few overworked and mostly uninspired adults,\nyou'll get brainless conformists.  You don't need to posit\na conspiracy.I think nearly everything that's wrong in schools can be\nexplained by the lack of any external force pushing them to\nbe good.  They don't compete with one another, except in sports\n(at which they do become good).\nParents, though they may choose where to\nlive based on the quality of the schools, never presume to\ndemand more of a given school.\nCollege admissions\ndepartments, instead of demanding more of high schools,\nactively compensate for their flaws; they expect less from\nstudents from inferior schools, and this is only fair.\nStandardized tests are explicitly\n(though\nunsuccessfully)\ndesigned to be a test of aptitude rather than preparation.Form follows function.  Everything evolves into a shape\ndictated by the demands placed on it.  And no one demands more\nof schools than that they keep kids off the streets till they're old enough\nfor college.  So that's what they do.  At my school, it was easy not\nto learn anything, but hard to get out of the building without\ngetting caught.Why is the problem worst in America?I'm just guessing here, but I think it may be because American school\nsystems are decentralized.  They're controlled by the\nlocal school board, which consists of car dealers who were\nhigh school football players, instead of some national Ministry\nof Education run by PhDs.It would not necessarily be a good thing for schools to be controlled\nby the federal government, though.  In the US, except for a few\ncarefully insulated agencies like the NSA and the CDC, smart people\nare reluctant to work for the federal government.  The example of\nprivate schools suggests that the best plan would be to go in the\nother direction, away from government control.What about home-schooling?Home-schooling offers an immediate solution, but it probably\nisn't the optimal one.\nWhy don't parents home-school\ntheir kids all the way through college?  Because college offers\nopportunities home-schooling can't duplicate?  So could\nhigh school if it were done right.Why did you write this?(Usually phrased as: you must be a loser if you're still bitter\nabout high school.) I wrote it because my friends are now all starting\nto have kids, and we found ourselves wondering how we could save\nthem from the horrors we endured in school.So I thought about what I would do if, knowing what I know now,\nI had to go through high school again.\nIn my high school, your choice was:\nbe popular or be picked on.\nI know now exactly what one would have to do to be popular.\nBut I found myself thinking: what a shlep.  It would be like\nbeing a politician, putting in endless\nhours of face time to make oneself liked.  So I realized that\neven knowing exactly what to do to be popular, I wouldn't be able\nto make myself do it.  I'd be off in the library, just as I\nwas the first time through high school.How can I be more popular in school?Are you sure you want to be?  One of the points of\nWhy Nerds\nare Unpopular is that smart kids are unpopular because they\ndon't waste their time on the dumb stuff you need to do to\nbe popular.  Do you want to start doing dumb stuff?"},{"title":"Rees Re: OO","text":"(Jonathan Rees had a really interesting response to Why\nArc isn't Especially Object-Oriented, which he has allowed me to reproduce\nhere.)Here is an a la carte menu of features or properties that are related\nto these terms; I have heard OO defined to be many different subsets\nof this list.\nEncapsulation - the ability to syntactically hide the\nimplementation of a type.  E.g. in C or Pascal you always know\nwhether something is a struct or an array, but in CLU and Java you\ncan hide the difference. Protection - the inability of the client of a type to detect its\nimplementation.  This guarantees that a behavior-preserving change\nto an implementation will not break its clients, and also makes\nsure that things like passwords don't leak out. Ad hoc polymorphism - functions and data structures with parameters\nthat can take on values of many different types. Parametric polymorphism - functions and data structures that\nparameterize over arbitrary values (e.g. list of anything).\nML and Lisp both have this.  Java doesn't quite because of\nits non-Object types. Everything is an object - all values are objects.  True in Smalltalk\n(?) but not in Java (because of int and friends). All you can do is send a message (AYCDISAM) = Actors model - there\nis no direct manipulation of objects, only communication with (or\ninvocation of) them.  The presence of fields in Java violates this. Specification inheritance = subtyping - there are distinct\ntypes known to the language with the property that a value of\none type is as good as a value of another for the purposes of type\ncorrectness.  (E.g. Java interface inheritance.) Implementation inheritance/reuse - having written one pile of code,\na similar pile (e.g. a superset) can be generated in a controlled\nmanner, i.e. the code doesn't have to be copied and edited.  A\nlimited and peculiar kind of abstraction.  (E.g. Java class\ninheritance.) Sum-of-product-of-function pattern - objects are (in effect)\nrestricted to be functions that take as first argument a\ndistinguished method key argument that is drawn from a finite set\nof simple names.\nSo OO is not a well defined concept.  Some people (eg. Abelson and\nSussman?) say Lisp is OO, by which they mean {3,4,5,7} (with the\nproviso that all types are in the programmers' heads).  Java is\nsupposed to be OO because of {1,2,3,7,8,9}.  E is supposed to be more\nOO than Java because it has {1,2,3,4,5,7,9} and almost has 6; 8\n(subclassing) is seen as antagonistic to E's goals and not necessary\nfor OO.The conventional Simula 67-like pattern of class and instance will get\nyou {1,3,7,9}, and I think many people take this as a definition of\nOO.Because OO is a moving target, OO zealots will choose some subset of\nthis menu by whim and then use it to try to convince you that you are\na loser.Perhaps part of the confusion - and you say this in a different way in\nyour little memo - is that the C/C++ folks see OO as a liberation from\na world that has nothing resembling a first-class functions, while\nLisp folks see OO as a prison since it limits their use of\nfunctions/objects to the style of (9.).  In that case, the only way OO\ncan be defended is in the same manner as any other game or discipline\n-- by arguing that by giving something up (e.g. the freedom to throw\neggs at your neighbor's house) you gain something that you want\n(assurance that your neighbor won't put you in jail).This is related to Lisp being oriented to the solitary hacker and\ndiscipline-imposing languages being oriented to social packs, another\npoint you mention.  In a pack you want to restrict everyone else's\nfreedom as much as possible to reduce their ability to interfere with\nand take advantage of you, and the only way to do that is by either\nbecoming chief (dangerous and unlikely) or by submitting to the same\nrules that they do.  If you submit to rules, you then want the rules\nto be liberal so that you have a chance of doing most of what you want\nto do, but not so liberal that others nail you.In such a pack-programming world, the language is a constitution or\nset of by-laws, and the interpreter/compiler/QA dept. acts in part as\na rule checker/enforcer/police force.  Co-programmers want to know: If\nI work with your code, will this help me or hurt me?  Correctness is\nundecidable (and generally unenforceable), so managers go with\nwhatever rule set (static type system, language restrictions, \"lint\"\nprogram, etc.) shows up at the door when the project starts.I recently contributed to a discussion of anti-OO on the e-lang list.\nMy main anti-OO message (actually it only attacks points 5/6)\nwas\nhttp://www.eros-os.org/pipermail/e-lang/2001-October/005852.html.\nThe followups are interesting but I don't think they're all threaded\nproperly.(Here are the pet definitions of terms used above:\nValue = something that can be passed to some function (abstraction).\n(I exclude exotic compile-time things like parameters to\nmacros and to parameterized types and modules.) Object = a value that has function-like behavior, i.e. you can\ninvoke a method on it or call it or send it a message or something\nlike that.  Some people define object more strictly along the lines\nof 9. above, while others (e.g. CLTL) are more liberal.  This is\nwhat makes \"everything is an object\" a vacuous statement in the\nabsence of clear definitions.In some languages the \"call\" is curried and the key-to-method\nmapping can sometimes be done at compile time.  This technicality\ncan cloud discussions of OO in C++ and related languages. Function = something that can be combined with particular\nparameter(s) to produce some result.  Might or might not be the same\nas object depending on the language. Type = a description of the space of values over which a function is\nmeaningfully parameterized.  I include both types known to the\nlanguage and types that exist in the programmer's mind or\nin documentation."},{"title":"Relentlessly Resourceful","text":"March 2009A couple days ago I finally got being a good startup founder down\nto two words:  relentlessly resourceful.Till then the best I'd managed was to get the opposite quality down\nto one: hapless.  Most dictionaries say hapless means unlucky.  But\nthe dictionaries are not doing a very good job.  A team that outplays\nits opponents but loses because of a bad decision by the referee\ncould be called unlucky, but not hapless.  Hapless implies passivity.\nTo be hapless is to be battered by circumstances—to let the world\nhave its way with you, instead of having your way with the world.\n[1]Unfortunately there's no antonym of hapless, which makes it difficult\nto tell founders what to aim for.  \"Don't be hapless\" is not much\nof rallying cry.It's not hard to express the quality we're looking for in metaphors.\nThe best is probably a running back.  A good running back is not\nmerely determined, but flexible as well.  They want to get downfield,\nbut they adapt their plans on the fly.Unfortunately this is just a metaphor, and not a useful one to most\npeople outside the US.   \"Be like a running back\" is no better than\n\"Don't be hapless.\"But finally I've figured out how to express this quality directly.\nI was writing a talk for\ninvestors, and I had to explain what to\nlook for in founders.  What would someone who was the opposite of\nhapless be like?  They'd be relentlessly resourceful.  Not merely\nrelentless.  That's not enough to make things go your way except\nin a few mostly uninteresting domains.  In any interesting domain,\nthe difficulties will be novel.  Which means you can't simply plow\nthrough them, because you don't know initially how hard they are;\nyou don't know whether you're about to plow through a block of foam\nor granite.  So you have to be resourceful. You have to keep\ntrying new things.Be relentlessly resourceful.That sounds right, but is it simply a description\nof how to be successful in general?  I don't think so.  This isn't\nthe recipe for success in writing or painting, for example.  In\nthat kind of work the recipe is more to be actively curious.\nResourceful implies the obstacles are external, which they generally\nare in startups. But in writing and painting they're mostly internal;\nthe obstacle is your own obtuseness.\n[2]There probably are other fields where \"relentlessly resourceful\"\nis the recipe for success.  But though other fields may share it,\nI think this is the best short description we'll find of what makes\na good startup founder.  I doubt it could be made more precise.Now that we know what we're looking for, that leads to other\nquestions.  For example, can this quality be taught?  After four\nyears of trying to teach it to people, I'd say that yes, surprisingly\noften it can.  Not to everyone, but to many people.\n[3]\nSome\npeople are just constitutionally passive, but others have a latent\nability to be relentlessly resourceful that only needs to be brought\nout.This is particularly true of young people who have till now always\nbeen under the thumb of some kind of authority.  Being relentlessly\nresourceful is definitely not the recipe for success in big companies,\nor in most schools.  I don't even want to think what the recipe is\nin big companies, but it is certainly longer and messier, involving\nsome combination of resourcefulness, obedience, and building\nalliances.Identifying this quality also brings us closer to answering a\nquestion people often wonder about: how many startups there could\nbe.  There is not, as some people seem to think, any economic upper\nbound on this number.  There's no reason to believe there is any\nlimit on the amount of newly created wealth consumers can absorb,\nany more than there is a limit on the number of theorems that can\nbe proven.  So probably the limiting factor on the number of startups\nis the pool of potential founders.  Some people would make good\nfounders, and others wouldn't.  And now that we can say what makes\na good founder, we know how to put an upper bound on the size of\nthe pool.This test is also useful to individuals.  If you want to know whether\nyou're the right sort of person to start a startup, ask yourself\nwhether you're relentlessly resourceful.  And if you want to know\nwhether to recruit someone as a cofounder, ask if they are.You can even use it tactically.  If I were running a startup, this\nwould be the phrase I'd tape to the mirror.  \"Make something people\nwant\" is the destination, but \"Be relentlessly resourceful\" is how\nyou get there.Notes[1]\nI think the reason the dictionaries are wrong is that the\nmeaning of the word has shifted.  No one writing a dictionary from\nscratch today would say that hapless meant unlucky.  But a couple\nhundred years ago they might have.  People were more at the mercy\nof circumstances in the past, and as a result a lot of the words\nwe use for good and bad outcomes have origins in words about luck.When I was living in Italy, I was once trying to tell someone\nthat I hadn't had much success in doing something, but I couldn't\nthink of the Italian word for success.  I spent some time trying\nto describe the word I meant.  Finally she said \"Ah! Fortuna!\"[2]\nThere are aspects of startups where the recipe is to be\nactively curious.  There can be times when what you're doing is\nalmost pure discovery.  Unfortunately these times are a small\nproportion of the whole.  On the other hand, they are in research\ntoo.[3]\nI'd almost say to most people, but I realize (a) I have no\nidea what most people are like, and (b) I'm pathologically optimistic\nabout people's ability to change.Thanks to Trevor Blackwell and Jessica Livingston for reading drafts\nof this."},{"title":"Return of the Mac","text":"March 2005All the best hackers\nI know are gradually switching to Macs.  My\nfriend Robert said his whole research group at MIT recently bought\nthemselves Powerbooks.  These guys are not the graphic designers\nand grandmas who were buying Macs at Apple's low point in the\nmid 1990s.  They're about as hardcore OS hackers as you can get.The reason, of course, is OS X.  Powerbooks are beautifully designed\nand run FreeBSD.  What more do you need to know?I got a Powerbook at the end of last year.   When my IBM Thinkpad's\nhard disk died soon after, it became my only laptop.  And when my\nfriend Trevor showed up at my house recently, he was carrying a\nPowerbook identical to mine.For most of us, it's not a switch to Apple, but a return.  Hard as\nthis was to believe in the mid 90s, the Mac was in its time the\ncanonical hacker's computer.In the fall of 1983,\nthe professor in one of my college CS classes got up and announced,\nlike a prophet, that there would soon be a computer with half a MIPS\nof processing power that would fit under an airline seat and cost\nso little that we could save enough to buy one from a summer job.\nThe whole room gasped.\nAnd when the Mac appeared, it was even better than we'd hoped.  It\nwas small and powerful and cheap, as promised.  But it was also\nsomething we'd never considered a computer could be: fabulously\nwell designed.I had to have one.  And I wasn't alone.  In the mid to late 1980s,\nall the hackers I knew were either writing software for the Mac,\nor wanted to.  Every futon sofa in Cambridge seemed to have the\nsame fat white book lying open on it.  If you turned it over, it\nsaid \"Inside Macintosh.\" Then came Linux and FreeBSD, and hackers, who follow the most\npowerful OS wherever it leads, found themselves switching to Intel\nboxes.  If you cared about design, you could buy a Thinkpad, which\nwas at least not actively repellent, if you could get the Intel and\nMicrosoft stickers\noff the front. [1]With OS X, the hackers are back.  When I walked into the Apple store\nin Cambridge, it was like coming home.  Much\nwas changed, but there was still that Apple coolness in the air,\nthat feeling that the show was being run by someone who really\ncared, instead of random corporate deal-makers.So what, the business world may say. Who cares if hackers like Apple\nagain?  How big is the hacker market, after all?Quite small, but important out of proportion to its size.  When it\ncomes to computers, what hackers are doing now, everyone will be\ndoing in ten years.  Almost all technology, from Unix to bitmapped\ndisplays to the Web, became popular first within CS departments and\nresearch labs, and gradually spread to the rest of the world.I remember telling my father back in 1986 that there was a new kind\nof computer called a Sun that was a serious Unix machine, but\nso small and cheap that you could\nhave one of your own to sit in front of, instead of sitting in front\nof a VT100 connected to a single central Vax.  Maybe, I suggested,\nhe should buy some stock in this company.  I think he really wishes\nhe'd listened.In 1994 my friend Koling wanted to talk to his girlfriend in Taiwan,\nand to save long-distance bills he wrote some software that would\nconvert sound to data packets that could be sent over the Internet.\nWe weren't sure at the time whether this was a proper use of the\nInternet, which was still then a quasi-government entity.  What he\nwas doing is now called VoIP, and it is a huge and rapidly growing\nbusiness.If you want to know what ordinary people will be doing with computers\nin ten years, just walk around the CS department at a good university.\nWhatever they're doing, you'll be doing.In the matter of \"platforms\" this tendency is even more pronounced,\nbecause novel software originates with\ngreat hackers, and they tend\nto write it first for whatever computer they personally use.  And\nsoftware sells hardware.  Many if not most of the initial sales of\nthe Apple II came from people who bought one to run VisiCalc.  And\nwhy did Bricklin and Frankston write VisiCalc for the Apple II?\nBecause they personally liked it.  They could have chosen any machine\nto make into a star.If you want to attract hackers to write software that will sell\nyour hardware, you have to make it something that they themselves\nuse.  It's not enough to make it \"open.\"  It has to be open and\ngood.And open and good is what Macs are again, finally.  The intervening\nyears have created a situation that is, as far as I know, without\nprecedent: Apple is popular at the low end and the high end, but\nnot in the middle.  My seventy year old mother has a Mac laptop.\nMy friends with PhDs in computer science have Mac laptops. [2] And yet\nApple's overall market share is still small.Though unprecedented, I predict this situation is also temporary.So Dad, there's this company called Apple. They make a new kind of\ncomputer that's as well designed as a Bang & Olufsen stereo system,\nand underneath is the best Unix machine you can buy.  Yes, the price\nto earnings ratio is kind of high, but I think a lot of people are\ngoing to want these.Notes[1] These horrible stickers are much like the intrusive ads popular\non pre-Google search engines.  They say to the customer: you are\nunimportant.  We care about Intel and Microsoft, not you.[2] Y Combinator\nis (we hope) visited mostly by\nhackers.  The proportions of OSes are:\nWindows 66.4%, Macintosh 18.8%, Linux 11.4%, and FreeBSD 1.5%.\nThe Mac number is\na big change from what it would have been five years ago."},{"title":"Revenge of the Nerds","text":"May 2002\n\"We were after the C++ programmers. We managed to drag a\nlot of them about halfway to Lisp.\"- Guy Steele, co-author of the Java spec\nIn the software business there is an ongoing\nstruggle between the pointy-headed academics, and another\nequally formidable force, the pointy-haired bosses.  Everyone\nknows who the pointy-haired boss is, right?  I think most\npeople in the technology world not only recognize this\ncartoon character, but know the actual person in their company\nthat he is modelled upon.The pointy-haired boss miraculously combines two qualities\nthat are common by themselves, but rarely seen together:\n(a) he knows nothing whatsoever about technology, and\n(b) he has very strong opinions about it.Suppose, for example, you need to write a piece of software.\nThe pointy-haired boss has no idea how this software\nhas to work, and can't tell one programming language from\nanother, and yet he knows what language you should write it in.\nExactly.  He thinks you should write it in Java.Why does he think this?  Let's\ntake a look inside the brain of the pointy-haired boss.  What\nhe's thinking is something like this.  Java is a standard.\nI know it must be, because I read about it in the press all the time.\nSince it is a standard, I won't get in trouble for using it.\nAnd that also means there will always be lots of Java programmers,\nso if the programmers working for me now quit, as programmers\nworking for me mysteriously always do, I can easily replace\nthem.Well, this doesn't sound that unreasonable.  But it's all\nbased on one unspoken assumption, and that assumption\nturns out to be false.  The pointy-haired boss believes that all\nprogramming languages are pretty much equivalent.\nIf that were true, he would be right on\ntarget.  If languages are all equivalent, sure, use whatever\nlanguage everyone else is using.But all languages are not equivalent, and I think I can prove\nthis to you without even getting into the differences between them.\nIf you asked the pointy-haired boss in 1992 what language\nsoftware should be written in, he would have answered with as\nlittle hesitation as he does today.  Software should be\nwritten in C++.  But if languages are all equivalent, why should the\npointy-haired boss's opinion ever change?  In fact, why should\nthe developers of Java have even bothered to create a new\nlanguage?Presumably, if you create a new language, it's because you think\nit's better in some way than what people already had.  And in fact, Gosling\nmakes it clear in the first Java white paper that Java\nwas designed to fix some problems with C++.\nSo there you have it: languages are not all equivalent.\nIf you follow the\ntrail through the pointy-haired boss's brain to Java and then\nback through Java's history to its origins, you end up holding\nan idea that contradicts the assumption you started with.So, who's right?  James Gosling, or the pointy-haired boss?\nNot surprisingly, Gosling is right.  Some languages are better,\nfor certain problems, than others.  And you know, that raises some\ninteresting questions.  Java was designed to be better, for certain\nproblems, than C++.  What problems?  When is Java better and\nwhen is C++?  Are there situations where other languages are\nbetter than either of them?Once you start considering this question, you have opened a\nreal can of worms.  If the pointy-haired boss had to think\nabout the problem in its full complexity, it would make his\nbrain explode.  As long as he considers all languages\nequivalent, all he has to do is choose the one\nthat seems to have the most momentum, and since that is more\na question of fashion than technology, even he\ncan probably get the right answer.\nBut if languages vary, he suddenly\nhas to solve two simultaneous equations, trying to find\nan optimal balance between two things he knows nothing\nabout: the relative suitability of the twenty or so leading\nlanguages for the problem he needs to solve, and the odds of\nfinding programmers, libraries, etc. for each.\nIf that's what's on the other side of the door, it\nis no surprise that the pointy-haired boss doesn't want to open it.The disadvantage of believing that all programming languages\nare equivalent is that it's not true.  But the advantage is\nthat it makes your life a lot simpler.\nAnd I think that's the main reason the idea is so widespread.\nIt is a comfortable idea.We know that Java must be pretty good, because it is the\ncool, new programming language.  Or is it?  If you look at the world of\nprogramming languages from a distance, it looks like Java is\nthe latest thing.  (From far enough away, all you can see is\nthe large, flashing billboard paid for by Sun.)\nBut if you look at this world\nup close, you find that there are degrees of coolness.  Within\nthe hacker subculture, there is another language called Perl\nthat is considered a lot cooler than Java.  Slashdot, for\nexample, is generated by Perl.  I don't think you would find\nthose guys using Java Server Pages.  But there is another,\nnewer language, called Python, whose users tend to look down on Perl,\nand more waiting in the wings.If you look at these languages in order, Java, Perl, Python,\nyou notice an interesting pattern.  At least, you notice this\npattern if you are a Lisp hacker.  Each one is progressively\nmore like Lisp.  Python copies even features\nthat many Lisp hackers consider to be mistakes.\nYou could translate simple Lisp programs into Python line for line.\nIt's 2002, and programming languages have almost caught up\nwith 1958.Catching Up with MathWhat I mean is that\nLisp was first discovered by John McCarthy in 1958,\nand popular programming languages are only now\ncatching up with the ideas he developed then.Now, how could that be true?  Isn't computer technology something\nthat changes very rapidly?  I mean, in 1958, computers were\nrefrigerator-sized behemoths with the processing power of\na wristwatch.  How could any technology that old even be\nrelevant, let alone superior to the latest developments?I'll tell you how.  It's because Lisp was not really\ndesigned to be a programming language, at least not in the sense\nwe mean today.  What we mean by a programming language is\nsomething we use to tell a computer what to do.   McCarthy\ndid eventually intend to develop a programming language in\nthis sense, but the Lisp that we actually ended up with was based\non something separate that he did as a\ntheoretical exercise-- an effort\nto define a more convenient alternative to the Turing Machine.\nAs McCarthy said later,\nAnother way to show that Lisp was neater than Turing machines\nwas to write a universal Lisp function\nand show that it is briefer and more comprehensible than the\ndescription of a universal Turing machine.\nThis was the Lisp function eval...,\nwhich computes the value of\na Lisp expression....\nWriting eval required inventing a notation representing Lisp\nfunctions as Lisp data, and such a notation\nwas devised for the purposes of the paper with no thought that\nit would be used to express Lisp programs in practice.\nWhat happened next was that, some time in late 1958, Steve Russell,\none of McCarthy's\ngrad students, looked at this definition of eval and realized\nthat if he translated it into machine language, the result\nwould be a Lisp interpreter.This was a big surprise at the time.\nHere is what McCarthy said about it later in an interview:\nSteve Russell said, look, why don't I program this eval..., and\nI said to him, ho, ho, you're confusing theory with practice,\nthis eval is intended for reading, not for\ncomputing. But he went ahead and did it. That is, he compiled the eval\nin my paper into [IBM] 704 machine\ncode, fixing bugs, and then advertised this as a Lisp interpreter,\nwhich it certainly was. So at that point Lisp\nhad essentially the form that it has today....\nSuddenly, in a matter of weeks I think, McCarthy found his theoretical\nexercise transformed into an actual programming language-- and a\nmore powerful one than he had intended.So the short explanation of why this 1950s language is not\nobsolete is that it was not technology but math, and\nmath doesn't get stale.   The right thing to compare Lisp\nto is not 1950s hardware, but, say, the Quicksort\nalgorithm, which was discovered in 1960 and is still\nthe fastest general-purpose sort.There is one other language still\nsurviving from the 1950s, Fortran, and it represents the\nopposite approach to language design.  Lisp was a\npiece of theory that unexpectedly got turned into a\nprogramming language.  Fortran was developed intentionally as\na programming language, but what we would now consider a\nvery low-level one.Fortran I, the language that was\ndeveloped in 1956, was a very different animal from present-day\nFortran.   Fortran I was pretty much assembly\nlanguage with math.  In some ways it was less\npowerful than more recent assembly languages; there were no\nsubroutines, for example, only branches.\nPresent-day Fortran is now arguably closer to Lisp than to\nFortran I.Lisp and Fortran were the trunks of two separate evolutionary trees,\none rooted in math and one rooted in machine architecture.\nThese two trees have been converging ever since.\nLisp started out powerful, and over the next twenty years\ngot fast.  So-called mainstream languages started out\nfast, and over the next forty years gradually got more powerful,\nuntil now the most advanced\nof them are fairly close to Lisp.\nClose, but they are still missing a few things....What Made Lisp DifferentWhen it was first developed, Lisp embodied nine new\nideas.  Some of these we now take for granted, others are\nonly seen in more advanced languages, and two are still\nunique to Lisp.  The nine ideas are, in order of their\nadoption by the mainstream,\nConditionals.  A conditional is an if-then-else\nconstruct.  We take these for granted now, but Fortran I\ndidn't have them. It had only a conditional goto\nclosely based on the underlying machine instruction. A function type. In Lisp, functions are\na data type just like integers or strings.\nThey have a literal representation, can be stored in variables,\ncan be passed as arguments, and so on. Recursion.  Lisp was the first programming language to\nsupport it. Dynamic typing.  In Lisp, all variables\nare effectively pointers. Values are what\nhave types, not variables, and assigning or binding\nvariables means copying pointers, not what they point to. Garbage-collection. Programs composed of expressions.  Lisp programs are\ntrees of expressions, each of which returns a value.\nThis is in contrast to Fortran\nand most succeeding languages, which distinguish between\nexpressions and statements.It was natural to have this\ndistinction in Fortran I because\nyou could not nest statements.  And\nso while you needed expressions for math to work, there was\nno point in making anything else return a value, because\nthere could not be anything waiting for it.This limitation\nwent away with the arrival of block-structured languages,\nbut by then it was too late. The distinction between\nexpressions and statements was entrenched.  It spread from\nFortran into Algol and then to both their descendants. A symbol type.  Symbols are effectively pointers to strings\nstored in a hash table.  So\nyou can test equality by comparing a pointer,\ninstead of comparing each character. A notation for code using trees of symbols and constants. The whole language there all the time.  There is\nno real distinction between read-time, compile-time, and runtime.\nYou can compile or run code while reading, read or run code\nwhile compiling, and read or compile code at runtime.Running code at read-time lets users reprogram Lisp's syntax;\nrunning code at compile-time is the basis of macros; compiling\nat runtime is the basis of Lisp's use as an extension\nlanguage in programs like Emacs; and reading at runtime\nenables programs to communicate using s-expressions, an\nidea recently reinvented as XML.\nWhen Lisp first appeared, these ideas were far\nremoved from ordinary programming practice, which was\ndictated largely by the hardware available in the late 1950s.\nOver time, the default language, embodied\nin a succession of popular languages, has\ngradually evolved toward Lisp.  Ideas 1-5 are now widespread.\nNumber 6 is starting to appear in the mainstream.\nPython has a form of 7, though there doesn't seem to be\nany syntax for it.As for number 8, this may be the most interesting of the\nlot.  Ideas 8 and 9 only became part of Lisp\nby accident, because Steve Russell implemented\nsomething McCarthy had never intended to be implemented.\nAnd yet these ideas turn out to be responsible for\nboth Lisp's strange appearance and its most distinctive\nfeatures.  Lisp looks strange not so much because\nit has a strange syntax as because it has no syntax;\nyou express programs directly in the parse trees that\nget built behind the scenes when other languages are\nparsed, and these trees are made\nof lists, which are Lisp data structures.Expressing the language in its own data structures turns\nout to be a very powerful feature. Ideas 8 and 9\ntogether mean that you\ncan write programs that write programs.  That may sound\nlike a bizarre idea, but it's an everyday thing in Lisp.\nThe most common way to do it is with something called a\nmacro.The term \"macro\" does not mean in Lisp what it means in other\nlanguages.\nA Lisp macro can be anything from an abbreviation\nto a compiler for a new language.\nIf you want to really understand Lisp,\nor just expand your programming horizons, I would\nlearn more about macros.Macros (in the Lisp sense) are still, as far as\nI know, unique to Lisp.\nThis is partly because in order to have macros you\nprobably have to make your language look as strange as\nLisp.  It may also be because if you do add that final\nincrement of power, you can no\nlonger claim to have invented a new language, but only\na new dialect of Lisp.I mention this mostly\nas a joke, but it is quite true. If you define\na language that has car, cdr, cons, quote, cond, atom,\neq, and\na notation for functions expressed as lists, then you\ncan build all the rest of Lisp out of it.  That is in\nfact the defining quality of Lisp: it was in order to\nmake this so that McCarthy gave Lisp the shape it has.Where Languages MatterSo suppose Lisp does represent a kind of limit\nthat mainstream languages are approaching asymptotically-- does\nthat mean you should actually use it to write software?\nHow much do you lose by using a less powerful language?\nIsn't it wiser, sometimes, not to be\nat the very edge of innovation?\nAnd isn't popularity to some extent\nits own justification?  Isn't the pointy-haired boss right,\nfor example, to want to use a language for which he can easily\nhire programmers?There are, of course, projects where the choice of programming\nlanguage doesn't matter much.  As a\nrule, the more demanding the application, the more\nleverage you get from using a powerful language.  But\nplenty of projects are not demanding at all.\nMost programming probably consists of writing\nlittle glue programs, and for\nlittle glue programs you\ncan use any language that you're already\nfamiliar with and that has good libraries for whatever you\nneed to do.  If you just need to feed data from one\nWindows app to another, sure, use Visual Basic.You can write little glue programs in Lisp too\n(I use it as a desktop calculator), but the biggest win\nfor languages like Lisp is at the other end of\nthe spectrum, where you need to write sophisticated\nprograms to solve hard problems in the face of fierce competition.\nA good example is the\nairline fare search program that ITA Software licenses to\nOrbitz.  These\nguys entered a market already dominated by two big,\nentrenched competitors, Travelocity and Expedia, and\nseem to have just humiliated them technologically.The core of ITA's application is a 200,000 line Common Lisp program\nthat searches many orders of magnitude more possibilities\nthan their competitors, who apparently\nare still using mainframe-era programming techniques.\n(Though ITA is also in a sense\nusing a mainframe-era programming language.)\nI have never seen any of ITA's code, but according to\none of their top hackers they use a lot of macros,\nand I am not surprised to hear it.Centripetal ForcesI'm not saying there is no cost to using uncommon\ntechnologies.  The pointy-haired boss is not completely\nmistaken to worry about this.  But because he doesn't understand\nthe risks, he tends to magnify them.I can think of three problems that could arise from using\nless common languages.  Your programs might not work well with\nprograms written in other languages.  You might have fewer\nlibraries at your disposal.  And you might have trouble\nhiring programmers.How much of a problem is each of these?  The importance of\nthe first varies depending on whether you have control\nover the whole system.  If you're writing software that has\nto run on a remote user's machine on top of a buggy,\nclosed operating system (I mention no names), there may be\nadvantages to writing your application in the\nsame language as the OS.\nBut if you control the whole system and\nhave the source code of all the parts, as ITA presumably does, you\ncan use whatever languages you want.  If\nany incompatibility arises, you can fix it yourself.In server-based applications you can\nget away with using the most advanced technologies,\nand I think this is the main\ncause of what Jonathan Erickson calls the \"programming language\nrenaissance.\"  This is why we even hear about new\nlanguages like Perl and Python.  We're not hearing about these\nlanguages because people are using them to write Windows\napps, but because people are using them on servers.  And as\nsoftware shifts\noff the desktop and onto servers (a future even\nMicrosoft seems resigned to), there will be less\nand less pressure to use middle-of-the-road technologies.As for libraries, their importance also\ndepends on the application.  For less demanding problems,\nthe availability of libraries can outweigh the intrinsic power\nof the language.  Where is the breakeven point?  Hard to say\nexactly, but wherever it is, it is short of anything you'd\nbe likely to call an application.  If a company considers\nitself to be in the software business, and they're writing\nan application that will be one of their products,\nthen it will probably involve several hackers and take at\nleast six months to write.  In a project of that\nsize, powerful languages probably start to outweigh\nthe convenience of pre-existing libraries.The third worry of the pointy-haired boss, the difficulty\nof hiring programmers, I think is a red herring.   How many\nhackers do you need to hire, after all?  Surely by now we\nall know that software is best developed by teams of less\nthan ten people.   And you shouldn't have trouble hiring\nhackers on that scale for any language anyone has ever heard\nof.  If you can't find ten Lisp hackers, then your company is\nprobably based in the wrong city for developing software.In fact, choosing a more powerful language probably decreases the\nsize of the team you need, because (a) if you use a more powerful\nlanguage you probably won't need as many hackers,\nand (b) hackers who work in more advanced languages are likely\nto be smarter.I'm not saying that you won't get a lot of pressure to use\nwhat are perceived as \"standard\" technologies.  At Viaweb\n(now Yahoo Store),\nwe raised some eyebrows among VCs and potential acquirers by\nusing Lisp.  But we also raised eyebrows by using\ngeneric Intel boxes as servers instead of\n\"industrial strength\" servers like Suns, for using a\nthen-obscure open-source Unix variant called FreeBSD instead\nof a real commercial OS like Windows NT, for ignoring\na supposed e-commerce standard called\nSET that no one now\neven remembers, and so on.You can't let the suits make technical decisions for you.\nDid it\nalarm some potential acquirers that we used Lisp?  Some, slightly,\nbut if we hadn't used Lisp, we wouldn't have been\nable to write the software that made them want to buy us.\nWhat seemed like an anomaly to them was in fact\ncause and effect.If you start a startup, don't design your product to please\nVCs or potential acquirers.  Design your product to please\nthe users.  If you win the users, everything else will\nfollow.  And if you don't, no one will care\nhow comfortingly orthodox your technology choices were.The Cost of Being AverageHow much do you lose by using a less powerful language?\nThere is actually some data out there about that.The most convenient measure of power is probably\ncode size.\nThe point of high-level\nlanguages is to give you bigger abstractions-- bigger bricks,\nas it were, so you don't need as many to build\na wall of a given size.\nSo the more powerful\nthe language, the shorter the program (not simply in\ncharacters, of course, but in distinct elements).How does a more powerful language enable you to write\nshorter programs?  One technique you can use, if the language will\nlet you, is something called\nbottom-up programming.  Instead of\nsimply writing your application in the base language, you\nbuild on top of the base language a language for writing\nprograms like yours, then write your program\nin it. The combined code can be much shorter than if you\nhad written your whole program in the base language-- indeed,\nthis is how most compression algorithms work.\nA bottom-up program should be easier to modify as well,\nbecause in many cases the language layer won't have to change\nat all.Code size is important, because the time it takes\nto write a program depends mostly on its length.\nIf your program would be three times as long in another\nlanguage, it will take three times as long to write-- and\nyou can't get around this by hiring more people, because\nbeyond a certain size new hires are actually a net lose.\nFred Brooks described this phenomenon in his famous\nbook The Mythical Man-Month, and everything I've seen\nhas tended to confirm what he said.So how much shorter are your programs if you write them in\nLisp?  Most of the numbers I've heard for Lisp\nversus C, for example, have been around 7-10x.\nBut a recent article about ITA in\nNew\nArchitect magazine said that\n\"one line of Lisp can replace 20 lines of C,\" and since\nthis article was full of quotes from ITA's president, I\nassume they got this number from ITA.  If so then\nwe can put some faith in it; ITA's software includes a lot\nof C and  C++ as well as Lisp, so they are speaking from\nexperience.My guess is that these multiples aren't even constant.\nI think they increase when\nyou face harder problems and also when you have smarter\nprogrammers.  A really good hacker can squeeze more\nout of better tools.As one data point on the curve, at any rate,\nif you were to compete with ITA and\nchose to write your software in C, they would be able to develop\nsoftware twenty times faster than you.\nIf you spent a year on a new feature, they'd be able to\nduplicate it in less than three weeks.  Whereas if they spent\njust three months developing something new, it would be\nfive years before you had it too.And you know what?  That's the best-case scenario.\nWhen you talk about code-size ratios, you're implicitly assuming\nthat you can actually write the program in the weaker language.\nBut in fact there are limits on what programmers can do.\nIf you're trying to solve a hard problem with a language that's\ntoo low-level, you reach a point where there is just too\nmuch to keep in your head at once.So when I say it would take ITA's imaginary\ncompetitor five years to duplicate something ITA could\nwrite in Lisp in three months, I mean five years\nif nothing goes wrong.  In fact, the way things work in\nmost companies, any\ndevelopment project that would take five years is\nlikely never to get finished at all.I admit this is an extreme case.  ITA's hackers seem to\nbe unusually smart, and C is a pretty low-level language.\nBut in a competitive market, even a differential of two or\nthree to one would\nbe enough to guarantee that you'd always be behind.A RecipeThis is the kind of possibility that the pointy-haired boss\ndoesn't even want to think about.  And so most of them don't.\nBecause, you know, when it comes down to it, the pointy-haired\nboss doesn't mind if his company gets their ass kicked, so\nlong as no one can prove it's his fault.\nThe safest plan for him personally\nis to stick close to the center of the herd.Within large organizations, the phrase used to\ndescribe this approach is \"industry best practice.\"\nIts purpose is to shield the pointy-haired\nboss from responsibility: if he chooses\nsomething that is \"industry best practice,\" and the company\nloses, he can't be blamed.  He didn't choose, the industry did.I believe this term was originally used to describe\naccounting methods and so on.  What it means, roughly,\nis don't do anything weird.  And in accounting that's\nprobably a good idea.  The terms \"cutting-edge\" and\n\"accounting\" do not sound good together.  But when you import\nthis criterion into decisions about technology, you start\nto get the wrong answers.Technology often should be\ncutting-edge.  In programming languages, as Erann Gat\nhas pointed out, what \"industry best practice\"  actually\ngets you is not the best, but merely the\naverage.  When a decision causes you to develop software at\na fraction of the rate of more aggressive competitors,\n\"best practice\" is a misnomer.So here we have two pieces of information that I think are\nvery valuable.  In fact, I know it from my own experience.\nNumber 1, languages vary in power.  Number 2, most managers\ndeliberately ignore this.  Between them, these two facts\nare literally a recipe for making money.  ITA is an example\nof this recipe in action.\nIf you want to win in a software\nbusiness, just take on the hardest problem you can find,\nuse the most powerful language you can get, and wait for\nyour competitors' pointy-haired bosses to revert to the mean.Appendix: PowerAs an illustration of what I mean about the relative power\nof programming languages, consider the following problem.\nWe want to write a function that generates accumulators-- a\nfunction that takes a number n, and\nreturns a function that takes another number i and\nreturns n incremented by i.(That's incremented by, not plus.  An accumulator\nhas to accumulate.)In Common Lisp this would be\n(defun foo (n)\n(lambda (i) (incf n i)))\nand in Perl 5,\nsub foo {\nmy ($n) = @_;\nsub {$n += shift}\nwhich has more elements than the Lisp version because\nyou have to extract parameters manually in Perl.In Smalltalk the code is slightly longer than in Lisp\nfoo: n\n|s|\ns := n.\n^[:i| s := s+i. ]\nbecause although in general lexical variables work, you can't\ndo an assignment to a parameter, so you have to create a\nnew variable s.In Javascript the example is, again, slightly longer, because\nJavascript retains\nthe distinction between statements and\nexpressions, so you need explicit return statements\nto return values:\nfunction foo(n) {\nreturn function (i) {\nreturn n += i } }\n(To be fair, Perl also retains\nthis distinction, but deals with it in typical Perl fashion\nby letting you omit returns.)If you try to translate the Lisp/Perl/Smalltalk/Javascript code into\nPython you run into some limitations.  Because Python\ndoesn't fully support lexical variables,\nyou have to create a data structure to hold the value of n.\nAnd although\nPython does have a function data type, there is no\nliteral representation for one (unless the body is\nonly a single expression) so you need to create a named\nfunction to return.  This is what you end up with:\ndef foo(n):\ns = [n]\ndef bar(i):\ns[0] += i\nreturn s[0]\nreturn bar\nPython users might legitimately ask why they can't\njust write\ndef foo(n):\nreturn lambda i: return n += i\nor even\ndef foo(n):\nlambda i: n += i\nand my guess is that they probably will, one day.\n(But if they don't want to wait for Python to evolve the rest\nof the way into Lisp, they could always just...)\nIn OO languages, you can, to a limited extent, simulate\na closure (a function that refers to variables defined in\nenclosing scopes) by defining a class with one method\nand a field to replace each variable from an enclosing\nscope.  This makes the programmer do the kind of code\nanalysis that would be done by the compiler in a language\nwith full support for lexical scope, and it won't work\nif more than one function refers to the same variable,\nbut it is enough in simple cases like this.Python experts seem to agree that this is the\npreferred way to solve the problem in Python, writing\neither\ndef foo(n):\nclass acc:\ndef __init__(self, s):\nself.s = s\ndef inc(self, i):\nself.s += i\nreturn self.s\nreturn acc(n).inc\nclass foo:\ndef __init__(self, n):\nself.n = n\ndef __call__(self, i):\nself.n += i\nreturn self.n\nI include these because I wouldn't want Python\nadvocates to say I was misrepresenting the language,\nbut both seem to me more complex than the first\nversion.  You're doing the same thing, setting up\na separate place to hold the accumulator; it's just\na field in an object instead of the head of a list.\nAnd the use of these special,\nreserved field names, especially __call__, seems\na bit of a hack.In the rivalry between Perl and Python, the claim of the\nPython hackers seems to be that\nthat Python is a more elegant alternative to Perl, but what\nthis case shows is that power is the ultimate elegance:\nthe Perl program is simpler (has fewer elements), even if the\nsyntax is a bit uglier.How about other languages? In the other languages\nmentioned in this talk-- Fortran, C, C++, Java, and\nVisual Basic-- it is not clear whether you can actually\nsolve this problem.\nKen Anderson says that the following code is about as close\nas you can get in Java:\npublic interface Inttoint {\npublic int call(int i);\npublic static Inttoint foo(final int n) {\nreturn new Inttoint() {\nint s = n;\npublic int call(int i) {\ns = s + i;\nreturn s;\n}};\nThis falls short of the spec because it only works for\nintegers.  After many email exchanges with Java hackers,\nI would say that writing a properly polymorphic version\nthat behaves like the preceding examples is somewhere\nbetween damned awkward and impossible.  If anyone wants to\nwrite one I'd be very curious to see it, but I personally\nhave timed out.It's not literally true that you can't solve this\nproblem in other languages, of course.  The fact\nthat all these languages are Turing-equivalent means\nthat, strictly speaking, you can write any program in\nany of them.  So how would you do it?  In the limit case,\nby writing a Lisp\ninterpreter in the less powerful language.That sounds like a joke, but it happens so often to\nvarying degrees in large programming projects that\nthere is a name for the phenomenon, Greenspun's Tenth\nRule:\nAny sufficiently\ncomplicated C or Fortran program contains an ad hoc\ninformally-specified bug-ridden slow implementation of half of\nCommon Lisp.\nIf you try to solve a\nhard problem, the question is not whether you will use\na powerful enough language, but whether you will (a)\nuse a powerful language, (b) write a de facto interpreter\nfor one, or (c) yourself become a human compiler for one.\nWe see this already\nbegining to happen in the Python example, where we are\nin effect simulating the code that a compiler\nwould generate to implement a lexical variable.This practice is not only common, but institutionalized.  For example,\nin the OO world you hear a good deal about\n\"patterns\".\nI wonder if these patterns are not sometimes evidence of case (c),\nthe human compiler, at work.  When I see patterns in my programs,\nI consider it a sign of trouble.  The shape of a program\nshould reflect only the problem it needs to solve.\nAny other regularity in the code is a sign, to me at\nleast, that I'm using abstractions that aren't powerful\nenough-- often that I'm generating by hand the\nexpansions of some macro that I need to write.Notes\nThe IBM 704 CPU was about the size of a refrigerator,\nbut a lot heavier.  The CPU weighed 3150 pounds,\nand the 4K of RAM was in a separate\nbox weighing another 4000 pounds.  The\nSub-Zero 690, one of the largest household refrigerators,\nweighs 656 pounds. Steve Russell also wrote the first (digital) computer\ngame, Spacewar, in 1962. If you want to trick a pointy-haired boss into letting you\nwrite software in Lisp, you could try telling him it's XML. Here is the accumulator generator in other Lisp dialects:\nScheme: (define (foo n)\n(lambda (i) (set! n (+ n i)) n))\nGoo:    (df foo (n) (op incf n _)))\nArc:    (def foo (n) [++ n _])\nErann Gat's sad tale about\n\"industry best practice\" at JPL inspired me to address\nthis generally misapplied phrase. Peter Norvig found that\n16 of the 23 patterns in Design Patterns were\n\"invisible\nor simpler\" in Lisp. Thanks to the many people who answered my questions about\nvarious languages and/or read drafts of this, including\nKen Anderson, Trevor Blackwell, Erann Gat, Dan Giffin, Sarah Harlin,\nJeremy Hylton, Robert Morris, Peter Norvig, Guy Steele, and Anton\nvan Straaten.\nThey bear no blame for any opinions expressed.Related:Many people have responded to this talk,\nso I have set up an additional page to deal with the issues they have\nraised: Re: Revenge of the Nerds.It also set off an extensive and often useful discussion on the\nLL1\nmailing list.  See particularly the mail by Anton van Straaten on semantic\ncompression.Some of the mail on LL1 led me to try to go deeper into the subject\nof language power in Succinctness is Power.A larger set of canonical implementations of the accumulator\ngenerator benchmark are collected together on their own page.Japanese Translation, Spanish\nTranslation,\nChinese Translation"},{"title":"Richard Hamming: You and Your Research","text":"Talk at Bellcore, 7 March 1986The title of my talk is \"You and Your Research.\" It is not about managing research, it is about how you individually do your research. I could give a talk on the other subject � but it's not, it's about you. I'm not talking about ordinary run-of-the-mill research; I'm talking about great research. And for the sake of describing great research I'll occasionally say Nobel-Prize type of work. It doesn't have to gain the Nobel Prize, but I mean those kinds of things which we perceive are significant things. Relativity, if you want, Shannon's information theory, any number of outstanding theories � that's the kind of thing I'm talking about.Now, how did I come to do this study? At Los Alamos I was brought in to run the computing machines which other people had got going, so those scientists and physicists could get back to business. I saw I was a stooge. I saw that although physically I was the same, they were different. And to put the thing bluntly, I was envious. I wanted to know why they were so different from me. I saw Feynman up close. I saw Fermi and Teller. I saw Oppenheimer. I saw Hans Bethe: he was my boss. I saw quite a few very capable people. I became very interested in the difference between those who do and those who might have done.When I came to Bell Labs, I came into a very productive department. Bode was the department head at the time; Shannon was there, and there were other people. I continued examining the questions, \"Why?\" and \"What is the difference?\" I continued subsequently by reading biographies, autobiographies, asking people questions such as: \"How did you come to do this?\" I tried to find out what are the differences. And that's what this talk is about.Now, why is this talk important? I think it is important because, as far as I know, each of you has one life to live. Even if you believe in reincarnation it doesn't do you any good from one life to the next! Why shouldn't you do significant things in this one life, however you define significant? I'm not going to define it � you know what I mean. I will talk mainly about science because that is what I have studied. But so far as I know, and I've been told by others, much of what I say applies to many fields. Outstanding work is characterized very much the same way in most fields, but I will confine myself to science.In order to get at you individually, I must talk in the first person. I have to get you to drop modesty and say to yourself, \"Yes, I would like to do first-class work.\" Our society frowns on people who set out to do really good work. You're not supposed to; luck is supposed to descend on you and you do great things by chance. Well, that's a kind of dumb thing to say. I say, why shouldn't you set out to do something significant. You don't have to tell other people, but shouldn't you say to yourself, \"Yes, I would like to do something significant.\"In order to get to the second stage, I have to drop modesty and talk in the first person about what I've seen, what I've done, and what I've heard. I'm going to talk about people, some of whom you know, and I trust that when we leave, you won't quote me as saying some of the things I said.Let me start not logically, but psychologically. I find that the major objection is that people think great science is done by luck. It's all a matter of luck. Well, consider Einstein. Note how many different things he did that were good. Was it all luck? Wasn't it a little too repetitive? Consider Shannon. He didn't do just information theory. Several years before, he did some other good things and some which are still locked up in the security of cryptography. He did many good things.You see again and again that it is more than one thing from a good person. Once in a while a person does only one thing in his whole life, and we'll talk about that later, but a lot of times there is repetition. I claim that luck will not cover everything. And I will cite Pasteur who said, \"Luck favors the prepared mind.\" And I think that says it the way I believe it. There is indeed an element of luck, and no, there isn't. The prepared mind sooner or later finds something important and does it. So yes, it is luck. The particular thing you do is luck, but that you do something is not.For example, when I came to Bell Labs, I shared an office for a while with Shannon. At the same time he was doing information theory, I was doing coding theory. It is suspicious that the two of us did it at the same place and at the same time � it was in the atmosphere. And you can say, \"Yes, it was luck.\" On the other hand you can say, \"But why of all the people in Bell Labs then were those the two who did it?\" Yes, it is partly luck, and partly it is the prepared mind; but \"partly\" is the other thing I'm going to talk about. So, although I'll come back several more times to luck, I want to dispose of this matter of luck as being the sole criterion whether you do great work or not. I claim you have some, but not total, control over it. And I will quote, finally, Newton on the matter. Newton said, \"If others would think as hard as I did, then they would get similar results.\"One of the characteristics you see, and many people have it including great scientists, is that usually when they were young they had independent thoughts and had the courage to pursue them. For example, Einstein, somewhere around 12 or 14, asked himself the question, \"What would a light wave look like if I went with the velocity of light to look at it?\" Now he knew that electromagnetic theory says you cannot have a stationary local maximum. But if he moved along with the velocity of light, he would see a local maximum. He could see a contradiction at the age of 12, 14, or somewhere around there, that everything was not right and that the velocity of light had something peculiar. Is it luck that he finally created special relativity? Early on, he had laid down some of the pieces by thinking of the fragments. Now that's the necessary but not sufficient condition. All of these items I will talk about are both luck and not luck.How about having lots of brains? It sounds good. Most of you in this room probably have more than enough brains to do first-class work. But great work is something else than mere brains. Brains are measured in various ways. In mathematics, theoretical physics, astrophysics, typically brains correlates to a great extent with the ability to manipulate symbols. And so the typical IQ test is apt to score them fairly high. On the other hand, in other fields it is something different. For example, Bill Pfann, the fellow who did zone melting, came into my office one day. He had this idea dimly in his mind about what he wanted and he had some equations. It was pretty clear to me that this man didn't know much mathematics and he wasn't really articulate. His problem seemed interesting so I took it home and did a little work. I finally showed him how to run computers so he could compute his own answers. I gave him the power to compute. He went ahead, with negligible recognition from his own department, but ultimately he has collected all the prizes in the field. Once he got well started, his shyness, his awkwardness, his inarticulateness, fell away and he became much more productive in many other ways. Certainly he became much more articulate.And I can cite another person in the same way. I trust he isn't in the audience, i.e. a fellow named Clogston. I met him when I was working on a problem with John Pierce's group and I didn't think he had much. I asked my friends who had been with him at school, \"Was he like that in graduate school?\" \"Yes,\" they replied. Well I would have fired the fellow, but J. R. Pierce was smart and kept him on. Clogston finally did the Clogston cable. After that there was a steady stream of good ideas. One success brought him confidence and courage.One of the characteristics of successful scientists is having courage. Once you get your courage up and believe that you can do important problems, then you can. If you think you can't, almost surely you are not going to. Courage is one of the things that Shannon had supremely. You have only to think of his major theorem. He wants to create a method of coding, but he doesn't know what to do so he makes a random code. Then he is stuck. And then he asks the impossible question, \"What would the average random code do?\" He then proves that the average code is arbitrarily good, and that therefore there must be at least one good code. Who but a man of infinite courage could have dared to think those thoughts? That is the characteristic of great scientists; they have courage. They will go forward under incredible circumstances; they think and continue to think.Age is another factor which the physicists particularly worry about. They always are saying that you have got to do it when you are young or you will never do it. Einstein did things very early, and all the quantum mechanic fellows were disgustingly young when they did their best work. Most mathematicians, theoretical physicists, and astrophysicists do what we consider their best work when they are young. It is not that they don't do good work in their old age but what we value most is often what they did early. On the other hand, in music, politics and literature, often what we consider their best work was done late. I don't know how whatever field you are in fits this scale, but age has some effect.But let me say why age seems to have the effect it does. In the first place if you do some good work you will find yourself on all kinds of committees and unable to do any more work. You may find yourself as I saw Brattain when he got a Nobel Prize. The day the prize was announced we all assembled in Arnold Auditorium; all three winners got up and made speeches. The third one, Brattain, practically with tears in his eyes, said, \"I know about this Nobel-Prize effect and I am not going to let it affect me; I am going to remain good old Walter Brattain.\" Well I said to myself, \"That is nice.\" But in a few weeks I saw it was affecting him. Now he could only work on great problems.When you are famous it is hard to work on small problems. This is what did Shannon in. After information theory, what do you do for an encore? The great scientists often make this error. They fail to continue to plant the little acorns from which the mighty oak trees grow. They try to get the big thing right off. And that isn't the way things go. So that is another reason why you find that when you get early recognition it seems to sterilize you. In fact I will give you my favorite quotation of many years. The Institute for Advanced Study in Princeton, in my opinion, has ruined more good scientists than any institution has created, judged by what they did before they came and judged by what they did after. Not that they weren't good afterwards, but they were superb before they got there and were only good afterwards.This brings up the subject, out of order perhaps, of working conditions. What most people think are the best working conditions, are not. Very clearly they are not because people are often most productive when working conditions are bad. One of the better times of the Cambridge Physical Laboratories was when they had practically shacks � they did some of the best physics ever.I give you a story from my own private life. Early on it became evident to me that Bell Laboratories was not going to give me the conventional acre of programming people to program computing machines in absolute binary. It was clear they weren't going to. But that was the way everybody did it. I could go to the West Coast and get a job with the airplane companies without any trouble, but the exciting people were at Bell Labs and the fellows out there in the airplane companies were not. I thought for a long while about, \"Did I want to go or not?\" and I wondered how I could get the best of two possible worlds. I finally said to myself, \"Hamming, you think the machines can do practically everything. Why can't you make them write programs?\" What appeared at first to me as a defect forced me into automatic programming very early. What appears to be a fault, often, by a change of viewpoint, turns out to be one of the greatest assets you can have. But you are not likely to think that when you first look the thing and say, \"Gee, I'm never going to get enough programmers, so how can I ever do any great programming?\"And there are many other stories of the same kind; Grace Hopper has similar ones. I think that if you look carefully you will see that often the great scientists, by turning the problem around a bit, changed a defect to an asset. For example, many scientists when they found they couldn't do a problem finally began to study why not. They then turned it around the other way and said, \"But of course, this is what it is\" and got an important result. So ideal working conditions are very strange. The ones you want aren't always the best ones for you.Now for the matter of drive. You observe that most great scientists have tremendous drive. I worked for ten years with John Tukey at Bell Labs. He had tremendous drive. One day about three or four years after I joined, I discovered that John Tukey was slightly younger than I was. John was a genius and I clearly was not. Well I went storming into Bode's office and said, \"How can anybody my age know as much as John Tukey does?\" He leaned back in his chair, put his hands behind his head, grinned slightly, and said, \"You would be surprised Hamming, how much you would know if you worked as hard as he did that many years.\" I simply slunk out of the office!What Bode was saying was this: Knowledge and productivity are like compound interest. Given two people of approximately the same ability and one person who works ten percent more than the other, the latter will more than twice outproduce the former. The more you know, the more you learn; the more you learn, the more you can do; the more you can do, the more the opportunity � it is very much like compound interest. I don't want to give you a rate, but it is a very high rate. Given two people with exactly the same ability, the one person who manages day in and day out to get in one more hour of thinking will be tremendously more productive over a lifetime. I took Bode's remark to heart; I spent a good deal more of my time for some years trying to work a bit harder and I found, in fact, I could get more work done. I don't like to say it in front of my wife, but I did sort of neglect her sometimes; I needed to study. You have to neglect things if you intend to get what you want done. There's no question about this.On this matter of drive Edison says, \"Genius is 99% perspiration and 1% inspiration.\" He may have been exaggerating, but the idea is that solid work, steadily applied, gets you surprisingly far. The steady application of effort with a little bit more work, intelligently applied is what does it. That's the trouble; drive, misapplied, doesn't get you anywhere. I've often wondered why so many of my good friends at Bell Labs who worked as hard or harder than I did, didn't have so much to show for it. The misapplication of effort is a very serious matter. Just hard work is not enough - it must be applied sensibly.There's another trait on the side which I want to talk about; that trait is ambiguity. It took me a while to discover its importance. Most people like to believe something is or is not true. Great scientists tolerate ambiguity very well. They believe the theory enough to go ahead; they doubt it enough to notice the errors and faults so they can step forward and create the new replacement theory. If you believe too much you'll never notice the flaws; if you doubt too much you won't get started. It requires a lovely balance. But most great scientists are well aware of why their theories are true and they are also well aware of some slight misfits which don't quite fit and they don't forget it. Darwin writes in his autobiography that he found it necessary to write down every piece of evidence which appeared to contradict his beliefs because otherwise they would disappear from his mind. When you find apparent flaws you've got to be sensitive and keep track of those things, and keep an eye out for how they can be explained or how the theory can be changed to fit them. Those are often the great contributions. Great contributions are rarely done by adding another decimal place. It comes down to an emotional commitment. Most great scientists are completely committed to their problem. Those who don't become committed seldom produce outstanding, first-class work.Now again, emotional commitment is not enough. It is a necessary condition apparently. And I think I can tell you the reason why. Everybody who has studied creativity is driven finally to saying, \"creativity comes out of your subconscious.\" Somehow, suddenly, there it is. It just appears. Well, we know very little about the subconscious; but one thing you are pretty well aware of is that your dreams also come out of your subconscious. And you're aware your dreams are, to a fair extent, a reworking of the experiences of the day. If you are deeply immersed and committed to a topic, day after day after day, your subconscious has nothing to do but work on your problem. And so you wake up one morning, or on some afternoon, and there's the answer. For those who don't get committed to their current problem, the subconscious goofs off on other things and doesn't produce the big result. So the way to manage yourself is that when you have a real important problem you don't let anything else get the center of your attention � you keep your thoughts on the problem. Keep your subconscious starved so it has to work on your problem, so you can sleep peacefully and get the answer in the morning, free.Now Alan Chynoweth mentioned that I used to eat at the physics table. I had been eating with the mathematicians and I found out that I already knew a fair amount of mathematics; in fact, I wasn't learning much. The physics table was, as he said, an exciting place, but I think he exaggerated on how much I contributed. It was very interesting to listen to Shockley, Brattain, Bardeen, J. B. Johnson, Ken McKay and other people, and I was learning a lot. But unfortunately a Nobel Prize came, and a promotion came, and what was left was the dregs. Nobody wanted what was left. Well, there was no use eating with them!Over on the other side of the dining hall was a chemistry table. I had worked with one of the fellows, Dave McCall; furthermore he was courting our secretary at the time. I went over and said, \"Do you mind if I join you?\" They can't say no, so I started eating with them for a while. And I started asking, \"What are the important problems of your field?\" And after a week or so, \"What important problems are you working on?\" And after some more time I came in one day and said, \"If what you are doing is not important, and if you don't think it is going to lead to something important, why are you at Bell Labs working on it?\" I wasn't welcomed after that; I had to find somebody else to eat with! That was in the spring.In the fall, Dave McCall stopped me in the hall and said, \"Hamming, that remark of yours got underneath my skin. I thought about it all summer, i.e. what were the important problems in my field. I haven't changed my research,\" he says, \"but I think it was well worthwhile.\" And I said, \"Thank you Dave,\" and went on. I noticed a couple of months later he was made the head of the department. I noticed the other day he was a Member of the National Academy of Engineering. I noticed he has succeeded. I have never heard the names of any of the other fellows at that table mentioned in science and scientific circles. They were unable to ask themselves, \"What are the important problems in my field?\"If you do not work on an important problem, it's unlikely you'll do important work. It's perfectly obvious. Great scientists have thought through, in a careful way, a number of important problems in their field, and they keep an eye on wondering how to attack them. Let me warn you, \"important problem\" must be phrased carefully. The three outstanding problems in physics, in a certain sense, were never worked on while I was at Bell Labs. By important I mean guaranteed a Nobel Prize and any sum of money you want to mention. We didn't work on (1) time travel, (2) teleportation, and (3) antigravity. They are not important problems because we do not have an attack. It's not the consequence that makes a problem important, it is that you have a reasonable attack. That is what makes a problem important. When I say that most scientists don't work on important problems, I mean it in that sense. The average scientist, so far as I can make out, spends almost all his time working on problems which he believes will not be important and he also doesn't believe that they will lead to important problems.I spoke earlier about planting acorns so that oaks will grow. You can't always know exactly where to be, but you can keep active in places where something might happen. And even if you believe that great science is a matter of luck, you can stand on a mountain top where lightning strikes; you don't have to hide in the valley where you're safe. But the average scientist does routine safe work almost all the time and so he (or she) doesn't produce much. It's that simple. If you want to do great work, you clearly must work on important problems, and you should have an idea.Along those lines at some urging from John Tukey and others, I finally adopted what I called \"Great Thoughts Time.\" When I went to lunch Friday noon, I would only discuss great thoughts after that. By great thoughts I mean ones like: \"What will be the role of computers in all of AT&T?\", \"How will computers change science?\" For example, I came up with the observation at that time that nine out of ten experiments were done in the lab and one in ten on the computer. I made a remark to the vice presidents one time, that it would be reversed, i.e. nine out of ten experiments would be done on the computer and one in ten in the lab. They knew I was a crazy mathematician and had no sense of reality. I knew they were wrong and they've been proved wrong while I have been proved right. They built laboratories when they didn't need them. I saw that computers were transforming science because I spent a lot of time asking \"What will be the impact of computers on science and how can I change it?\" I asked myself, \"How is it going to change Bell Labs?\" I remarked one time, in the same address, that more than one-half of the people at Bell Labs will be interacting closely with computing machines before I leave. Well, you all have terminals now. I thought hard about where was my field going, where were the opportunities, and what were the important things to do. Let me go there so there is a chance I can do important things.Most great scientists know many important problems. They have something between 10 and 20 important problems for which they are looking for an attack. And when they see a new idea come up, one hears them say \"Well that bears on this problem.\" They drop all the other things and get after it. Now I can tell you a horror story that was told to me but I can't vouch for the truth of it. I was sitting in an airport talking to a friend of mine from Los Alamos about how it was lucky that the fission experiment occurred over in Europe when it did because that got us working on the atomic bomb here in the US. He said \"No; at Berkeley we had gathered a bunch of data; we didn't get around to reducing it because we were building some more equipment, but if we had reduced that data we would have found fission.\" They had it in their hands and they didn't pursue it. They came in second!The great scientists, when an opportunity opens up, get after it and they pursue it. They drop all other things. They get rid of other things and they get after an idea because they had already thought the thing through. Their minds are prepared; they see the opportunity and they go after it. Now of course lots of times it doesn't work out, but you don't have to hit many of them to do some great science. It's kind of easy. One of the chief tricks is to live a long time!Another trait, it took me a while to notice. I noticed the following facts about people who work with the door open or the door closed. I notice that if you have the door to your office closed, you get more work done today and tomorrow, and you are more productive than most. But 10 years later somehow you don't know quite know what problems are worth working on; all the hard work you do is sort of tangential in importance. He who works with the door open gets all kinds of interruptions, but he also occasionally gets clues as to what the world is and what might be important. Now I cannot prove the cause and effect sequence because you might say, \"The closed door is symbolic of a closed mind.\" I don't know. But I can say there is a pretty good correlation between those who work with the doors open and those who ultimately do important things, although people who work with doors closed often work harder. Somehow they seem to work on slightly the wrong thing � not much, but enough that they miss fame.I want to talk on another topic. It is based on the song which I think many of you know, \"It ain't what you do, it's the way that you do it.\" I'll start with an example of my own. I was conned into doing on a digital computer, in the absolute binary days, a problem which the best analog computers couldn't do. And I was getting an answer. When I thought carefully and said to myself, \"You know, Hamming, you're going to have to file a report on this military job; after you spend a lot of money you're going to have to account for it and every analog installation is going to want the report to see if they can't find flaws in it.\" I was doing the required integration by a rather crummy method, to say the least, but I was getting the answer. And I realized that in truth the problem was not just to get the answer; it was to demonstrate for the first time, and beyond question, that I could beat the analog computer on its own ground with a digital machine. I reworked the method of solution, created a theory which was nice and elegant, and changed the way we computed the answer; the results were no different. The published report had an elegant method which was later known for years as \"Hamming's Method of Integrating Differential Equations.\" It is somewhat obsolete now, but for a while it was a very good method. By changing the problem slightly, I did important work rather than trivial work.In the same way, when using the machine up in the attic in the early days, I was solving one problem after another after another; a fair number were successful and there were a few failures. I went home one Friday after finishing a problem, and curiously enough I wasn't happy; I was depressed. I could see life being a long sequence of one problem after another after another. After quite a while of thinking I decided, \"No, I should be in the mass production of a variable product. I should be concerned with all of next year's problems, not just the one in front of my face.\" By changing the question I still got the same kind of results or better, but I changed things and did important work. I attacked the major problem � How do I conquer machines and do all of next year's problems when I don't know what they are going to be? How do I prepare for it? How do I do this one so I'll be on top of it? How do I obey Newton's rule? He said, \"If I have seen further than others, it is because I've stood on the shoulders of giants.\" These days we stand on each other's feet!You should do your job in such a fashion that others can build on top of it, so they will indeed say, \"Yes, I've stood on so and so's shoulders and I saw further.\" The essence of science is cumulative. By changing a problem slightly you can often do great work rather than merely good work. Instead of attacking isolated problems, I made the resolution that I would never again solve an isolated problem except as characteristic of a class.Now if you are much of a mathematician you know that the effort to generalize often means that the solution is simple. Often by stopping and saying, \"This is the problem he wants but this is characteristic of so and so. Yes, I can attack the whole class with a far superior method than the particular one because I was earlier embedded in needless detail.\" The business of abstraction frequently makes things simple. Furthermore, I filed away the methods and prepared for the future problems.To end this part, I'll remind you, \"It is a poor workman who blames his tools � the good man gets on with the job, given what he's got, and gets the best answer he can.\" And I suggest that by altering the problem, by looking at the thing differently, you can make a great deal of difference in your final productivity because you can either do it in such a fashion that people can indeed build on what you've done, or you can do it in such a fashion that the next person has to essentially duplicate again what you've done. It isn't just a matter of the job, it's the way you write the report, the way you write the paper, the whole attitude. It's just as easy to do a broad, general job as one very special case. And it's much more satisfying and rewarding!I have now come down to a topic which is very distasteful; it is not sufficient to do a job, you have to sell it. \"Selling\" to a scientist is an awkward thing to do. It's very ugly; you shouldn't have to do it. The world is supposed to be waiting, and when you do something great, they should rush out and welcome it. But the fact is everyone is busy with their own work. You must present it so well that they will set aside what they are doing, look at what you've done, read it, and come back and say, \"Yes, that was good.\" I suggest that when you open a journal, as you turn the pages, you ask why you read some articles and not others. You had better write your report so when it is published in the Physical Review, or wherever else you want it, as the readers are turning the pages they won't just turn your pages but they will stop and read yours. If they don't stop and read it, you won't get credit.There are three things you have to do in selling. You have to learn to write clearly and well so that people will read it, you must learn to give reasonably formal talks, and you also must learn to give informal talks. We had a lot of so-called `back room scientists.' In a conference, they would keep quiet. Three weeks later after a decision was made they filed a report saying why you should do so and so. Well, it was too late. They would not stand up right in the middle of a hot conference, in the middle of activity, and say, \"We should do this for these reasons.\" You need to master that form of communication as well as prepared speeches.When I first started, I got practically physically ill while giving a speech, and I was very, very nervous. I realized I either had to learn to give speeches smoothly or I would essentially partially cripple my whole career. The first time IBM asked me to give a speech in New York one evening, I decided I was going to give a really good speech, a speech that was wanted, not a technical one but a broad one, and at the end if they liked it, I'd quietly say, \"Any time you want one I'll come in and give you one.\" As a result, I got a great deal of practice giving speeches to a limited audience and I got over being afraid. Furthermore, I could also then study what methods were effective and what were ineffective.While going to meetings I had already been studying why some papers are remembered and most are not. The technical person wants to give a highly limited technical talk. Most of the time the audience wants a broad general talk and wants much more survey and background than the speaker is willing to give. As a result, many talks are ineffective. The speaker names a topic and suddenly plunges into the details he's solved. Few people in the audience may follow. You should paint a general picture to say why it's important, and then slowly give a sketch of what was done. Then a larger number of people will say, \"Yes, Joe has done that,\" or \"Mary has done that; I really see where it is; yes, Mary really gave a good talk; I understand what Mary has done.\" The tendency is to give a highly restricted, safe talk; this is usually ineffective. Furthermore, many talks are filled with far too much information. So I say this idea of selling is obvious.Let me summarize. You've got to work on important problems. I deny that it is all luck, but I admit there is a fair element of luck. I subscribe to Pasteur's \"Luck favors the prepared mind.\" I favor heavily what I did. Friday afternoons for years � great thoughts only � means that I committed 10% of my time trying to understand the bigger problems in the field, i.e. what was and what was not important. I found in the early days I had believed `this' and yet had spent all week marching in `that' direction. It was kind of foolish. If I really believe the action is over there, why do I march in this direction? I either had to change my goal or change what I did. So I changed something I did and I marched in the direction I thought was important. It's that easy.Now you might tell me you haven't got control over what you have to work on. Well, when you first begin, you may not. But once you're moderately successful, there are more people asking for results than you can deliver and you have some power of choice, but not completely. I'll tell you a story about that, and it bears on the subject of educating your boss. I had a boss named Schelkunoff; he was, and still is, a very good friend of mine. Some military person came to me and demanded some answers by Friday. Well, I had already dedicated my computing resources to reducing data on the fly for a group of scientists; I was knee deep in short, small, important problems. This military person wanted me to solve his problem by the end of the day on Friday. I said, \"No, I'll give it to you Monday. I can work on it over the weekend. I'm not going to do it now.\" He goes down to my boss, Schelkunoff, and Schelkunoff says, \"You must run this for him; he's got to have it by Friday.\" I tell him, \"Why do I?\" He says, \"You have to.\" I said, \"Fine, Sergei, but you're sitting in your office Friday afternoon catching the late bus home to watch as this fellow walks out that door.\" I gave the military person the answers late Friday afternoon. I then went to Schelkunoff's office and sat down; as the man goes out I say, \"You see Schelkunoff, this fellow has nothing under his arm; but I gave him the answers.\" On Monday morning Schelkunoff called him up and said, \"Did you come in to work over the weekend?\" I could hear, as it were, a pause as the fellow ran through his mind of what was going to happen; but he knew he would have had to sign in, and he'd better not say he had when he hadn't, so he said he hadn't. Ever after that Schelkunoff said, \"You set your deadlines; you can change them.\"One lesson was sufficient to educate my boss as to why I didn't want to do big jobs that displaced exploratory research and why I was justified in not doing crash jobs which absorb all the research computing facilities. I wanted instead to use the facilities to compute a large number of small problems. Again, in the early days, I was limited in computing capacity and it was clear, in my area, that a \"mathematician had no use for machines.\" But I needed more machine capacity. Every time I had to tell some scientist in some other area, \"No I can't; I haven't the machine capacity,\" he complained. I said \"Go tell your Vice President that Hamming needs more computing capacity.\" After a while I could see what was happening up there at the top; many people said to my Vice President, \"Your man needs more computing capacity.\" I got it!I also did a second thing. When I loaned what little programming power we had to help in the early days of computing, I said, \"We are not getting the recognition for our programmers that they deserve. When you publish a paper you will thank that programmer or you aren't getting any more help from me. That programmer is going to be thanked by name; she's worked hard.\" I waited a couple of years. I then went through a year of BSTJ articles and counted what fraction thanked some programmer. I took it into the boss and said, \"That's the central role computing is playing in Bell Labs; if the BSTJ is important, that's how important computing is.\" He had to give in. You can educate your bosses. It's a hard job. In this talk I'm only viewing from the bottom up; I'm not viewing from the top down. But I am telling you how you can get what you want in spite of top management. You have to sell your ideas there also.Well I now come down to the topic, \"Is the effort to be a great scientist worth it?\" To answer this, you must ask people. When you get beyond their modesty, most people will say, \"Yes, doing really first-class work, and knowing it, is as good as wine, women and song put together,\" or if it's a woman she says, \"It is as good as wine, men and song put together.\" And if you look at the bosses, they tend to come back or ask for reports, trying to participate in those moments of discovery. They're always in the way. So evidently those who have done it, want to do it again. But it is a limited survey. I have never dared to go out and ask those who didn't do great work how they felt about the matter. It's a biased sample, but I still think it is worth the struggle. I think it is very definitely worth the struggle to try and do first-class work because the truth is, the value is in the struggle more than it is in the result. The struggle to make something of yourself seems to be worthwhile in itself. The success and fame are sort of dividends, in my opinion.I've told you how to do it. It is so easy, so why do so many people, with all their talents, fail? For example, my opinion, to this day, is that there are in the mathematics department at Bell Labs quite a few people far more able and far better endowed than I, but they didn't produce as much. Some of them did produce more than I did; Shannon produced more than I did, and some others produced a lot, but I was highly productive against a lot of other fellows who were better equipped. Why is it so? What happened to them? Why do so many of the people who have great promise, fail?Well, one of the reasons is drive and commitment. The people who do great work with less ability but who are committed to it, get more done that those who have great skill and dabble in it, who work during the day and go home and do other things and come back and work the next day. They don't have the deep commitment that is apparently necessary for really first-class work. They turn out lots of good work, but we were talking, remember, about first-class work. There is a difference. Good people, very talented people, almost always turn out good work. We're talking about the outstanding work, the type of work that gets the Nobel Prize and gets recognition.The second thing is, I think, the problem of personality defects. Now I'll cite a fellow whom I met out in Irvine. He had been the head of a computing center and he was temporarily on assignment as a special assistant to the president of the university. It was obvious he had a job with a great future. He took me into his office one time and showed me his method of getting letters done and how he took care of his correspondence. He pointed out how inefficient the secretary was. He kept all his letters stacked around there; he knew where everything was. And he would, on his word processor, get the letter out. He was bragging how marvelous it was and how he could get so much more work done without the secretary's interference. Well, behind his back, I talked to the secretary. The secretary said, \"Of course I can't help him; I don't get his mail. He won't give me the stuff to log in; I don't know where he puts it on the floor. Of course I can't help him.\" So I went to him and said, \"Look, if you adopt the present method and do what you can do single-handedly, you can go just that far and no farther than you can do single-handedly. If you will learn to work with the system, you can go as far as the system will support you.\" And, he never went any further. He had his personality defect of wanting total control and was not willing to recognize that you need the support of the system.You find this happening again and again; good scientists will fight the system rather than learn to work with the system and take advantage of all the system has to offer. It has a lot, if you learn how to use it. It takes patience, but you can learn how to use the system pretty well, and you can learn how to get around it. After all, if you want a decision `No', you just go to your boss and get a `No' easy. If you want to do something, don't ask, do it. Present him with an accomplished fact. Don't give him a chance to tell you `No'. But if you want a `No', it's easy to get a `No'.Another personality defect is ego assertion and I'll speak in this case of my own experience. I came from Los Alamos and in the early days I was using a machine in New York at 590 Madison Avenue where we merely rented time. I was still dressing in western clothes, big slash pockets, a bolo and all those things. I vaguely noticed that I was not getting as good service as other people. So I set out to measure. You came in and you waited for your turn; I felt I was not getting a fair deal. I said to myself, \"Why? No Vice President at IBM said, `Give Hamming a bad time'. It is the secretaries at the bottom who are doing this. When a slot appears, they'll rush to find someone to slip in, but they go out and find somebody else. Now, why? I haven't mistreated them.\" Answer: I wasn't dressing the way they felt somebody in that situation should. It came down to just that � I wasn't dressing properly. I had to make the decision � was I going to assert my ego and dress the way I wanted to and have it steadily drain my effort from my professional life, or was I going to appear to conform better? I decided I would make an effort to appear to conform properly. The moment I did, I got much better service. And now, as an old colorful character, I get better service than other people.You should dress according to the expectations of the audience spoken to. If I am going to give an address at the MIT computer center, I dress with a bolo and an old corduroy jacket or something else. I know enough not to let my clothes, my appearance, my manners get in the way of what I care about. An enormous number of scientists feel they must assert their ego and do their thing their way. They have got to be able to do this, that, or the other thing, and they pay a steady price.John Tukey almost always dressed very casually. He would go into an important office and it would take a long time before the other fellow realized that this is a first-class man and he had better listen. For a long time John has had to overcome this kind of hostility. It's wasted effort! I didn't say you should conform; I said \"The appearance of conforming gets you a long way.\" If you chose to assert your ego in any number of ways, \"I am going to do it my way,\" you pay a small steady price throughout the whole of your professional career. And this, over a whole lifetime, adds up to an enormous amount of needless trouble.By taking the trouble to tell jokes to the secretaries and being a little friendly, I got superb secretarial help. For instance, one time for some idiot reason all the reproducing services at Murray Hill were tied up. Don't ask me how, but they were. I wanted something done. My secretary called up somebody at Holmdel, hopped the company car, made the hour-long trip down and got it reproduced, and then came back. It was a payoff for the times I had made an effort to cheer her up, tell her jokes and be friendly; it was that little extra work that later paid off for me. By realizing you have to use the system and studying how to get the system to do your work, you learn how to adapt the system to your desires. Or you can fight it steadily, as a small undeclared war, for the whole of your life.And I think John Tukey paid a terrible price needlessly. He was a genius anyhow, but I think it would have been far better, and far simpler, had he been willing to conform a little bit instead of ego asserting. He is going to dress the way he wants all of the time. It applies not only to dress but to a thousand other things; people will continue to fight the system. Not that you shouldn't occasionally!When they moved the library from the middle of Murray Hill to the far end, a friend of mine put in a request for a bicycle. Well, the organization was not dumb. They waited awhile and sent back a map of the grounds saying, \"Will you please indicate on this map what paths you are going to take so we can get an insurance policy covering you.\" A few more weeks went by. They then asked, \"Where are you going to store the bicycle and how will it be locked so we can do so and so.\" He finally realized that of course he was going to be red-taped to death so he gave in. He rose to be the President of Bell Laboratories.Barney Oliver was a good man. He wrote a letter one time to the IEEE. At that time the official shelf space at Bell Labs was so much and the height of the IEEE Proceedings at that time was larger; and since you couldn't change the size of the official shelf space he wrote this letter to the IEEE Publication person saying, since so many IEEE members were at Bell Labs and since the official space was so high the journal size should be changed. He sent it for his boss's signature. Back came a carbon with his signature, but he still doesn't know whether the original was sent or not. I am not saying you shouldn't make gestures of reform. I am saying that my study of able people is that they don't get themselves committed to that kind of warfare. They play it a little bit and drop it and get on with their work.Many a second-rate fellow gets caught up in some little twitting of the system, and carries it through to warfare. He expends his energy in a foolish project. Now you are going to tell me that somebody has to change the system. I agree; somebody's has to. Which do you want to be? The person who changes the system or the person who does first-class science? Which person is it that you want to be? Be clear, when you fight the system and struggle with it, what you are doing, how far to go out of amusement, and how much to waste your effort fighting the system. My advice is to let somebody else do it and you get on with becoming a first-class scientist. Very few of you have the ability to both reform the system and become a first-class scientist.On the other hand, we can't always give in. There are times when a certain amount of rebellion is sensible. I have observed almost all scientists enjoy a certain amount of twitting the system for the sheer love of it. What it comes down to basically is that you cannot be original in one area without having originality in others. Originality is being different. You can't be an original scientist without having some other original characteristics. But many a scientist has let his quirks in other places make him pay a far higher price than is necessary for the ego satisfaction he or she gets. I'm not against all ego assertion; I'm against some.Another fault is anger. Often a scientist becomes angry, and this is no way to handle things. Amusement, yes, anger, no. Anger is misdirected. You should follow and cooperate rather than struggle against the system all the time.Another thing you should look for is the positive side of things instead of the negative. I have already given you several examples, and there are many, many more; how, given the situation, by changing the way I looked at it, I converted what was apparently a defect to an asset. I'll give you another example. I am an egotistical person; there is no doubt about it. I knew that most people who took a sabbatical to write a book, didn't finish it on time. So before I left, I told all my friends that when I come back, that book was going to be done! Yes, I would have it done � I'd have been ashamed to come back without it! I used my ego to make myself behave the way I wanted to. I bragged about something so I'd have to perform. I found out many times, like a cornered rat in a real trap, I was surprisingly capable. I have found that it paid to say, ``Oh yes, I'll get the answer for you Tuesday,'' not having any idea how to do it. By Sunday night I was really hard thinking on how I was going to deliver by Tuesday. I often put my pride on the line and sometimes I failed, but as I said, like a cornered rat I'm surprised how often I did a good job. I think you need to learn to use yourself. I think you need to know how to convert a situation from one view to another which would increase the chance of success.Now self-delusion in humans is very, very common. There are innumerable ways of you changing a thing and kidding yourself and making it look some other way. When you ask, \"Why didn't you do such and such,\" the person has a thousand alibis. If you look at the history of science, usually these days there are ten people right there ready, and we pay off for the person who is there first. The other nine fellows say, \"Well, I had the idea but I didn't do it and so on and so on.\" There are so many alibis. Why weren't you first? Why didn't you do it right? Don't try an alibi. Don't try and kid yourself. You can tell other people all the alibis you want. I don't mind. But to yourself try to be honest.If you really want to be a first-class scientist you need to know yourself, your weaknesses, your strengths, and your bad faults, like my egotism. How can you convert a fault to an asset? How can you convert a situation where you haven't got enough manpower to move into a direction when that's exactly what you need to do? I say again that I have seen, as I studied the history, the successful scientist changed the viewpoint and what was a defect became an asset.In summary, I claim that some of the reasons why so many people who have greatness within their grasp don't succeed are: they don't work on important problems, they don't become emotionally involved, they don't try and change what is difficult to some other situation which is easily done but is still important, and they keep giving themselves alibis why they don't. They keep saying that it is a matter of luck. I've told you how easy it is; furthermore I've told you how to reform. Therefore, go forth and become great scientists!Questions and AnswersA. G. Chynoweth: Well that was 50 minutes of concentrated wisdom and observations accumulated over a fantastic career; I lost track of all the observations that were striking home. Some of them are very very timely. One was the plea for more computer capacity; I was hearing nothing but that this morning from several people, over and over again. So that was right on the mark today even though here we are 20 � 30 years after when you were making similar remarks, Dick. I can think of all sorts of lessons that all of us can draw from your talk. And for one, as I walk around the halls in the future I hope I won't see as many closed doors in Bellcore. That was one observation I thought was very intriguing.Thank you very, very much indeed Dick; that was a wonderful recollection. I'll now open it up for questions. I'm sure there are many people who would like to take up on some of the points that Dick was making.Hamming: First let me respond to Alan Chynoweth about computing. I had computing in research and for 10 years I kept telling my management, ``Get that !&@#% machine out of research. We are being forced to run problems all the time. We can't do research because were too busy operating and running the computing machines.'' Finally the message got through. They were going to move computing out of research to someplace else. I was persona non grata to say the least and I was surprised that people didn't kick my shins because everybody was having their toy taken away from them. I went in to Ed David's office and said, ``Look Ed, you've got to give your researchers a machine. If you give them a great big machine, we'll be back in the same trouble we were before, so busy keeping it going we can't think. Give them the smallest machine you can because they are very able people. They will learn how to do things on a small machine instead of mass computing.'' As far as I'm concerned, that's how UNIX arose. We gave them a moderately small machine and they decided to make it do great things. They had to come up with a system to do it on. It is called UNIX!A. G. Chynoweth: I just have to pick up on that one. In our present environment, Dick, while we wrestle with some of the red tape attributed to, or required by, the regulators, there is one quote that one exasperated AVP came up with and I've used it over and over again. He growled that, \"UNIX was never a deliverable!\"Question: What about personal stress? Does that seem to make a difference?Hamming: Yes, it does. If you don't get emotionally involved, it doesn't. I had incipient ulcers most of the years that I was at Bell Labs. I have since gone off to the Naval Postgraduate School and laid back somewhat, and now my health is much better. But if you want to be a great scientist you're going to have to put up with stress. You can lead a nice life; you can be a nice guy or you can be a great scientist. But nice guys end last, is what Leo Durocher said. If you want to lead a nice happy life with a lot of recreation and everything else, you'll lead a nice life.Question: The remarks about having courage, no one could argue with; but those of us who have gray hairs or who are well established don't have to worry too much. But what I sense among the young people these days is a real concern over the risk taking in a highly competitive environment. Do you have any words of wisdom on this?Hamming: I'll quote Ed David more. Ed David was concerned about the general loss of nerve in our society. It does seem to me that we've gone through various periods. Coming out of the war, coming out of Los Alamos where we built the bomb, coming out of building the radars and so on, there came into the mathematics department, and the research area, a group of people with a lot of guts. They've just seen things done; they've just won a war which was fantastic. We had reasons for having courage and therefore we did a great deal. I can't arrange that situation to do it again. I cannot blame the present generation for not having it, but I agree with what you say; I just cannot attach blame to it. It doesn't seem to me they have the desire for greatness; they lack the courage to do it. But we had, because we were in a favorable circumstance to have it; we just came through a tremendously successful war. In the war we were looking very, very bad for a long while; it was a very desperate struggle as you well know. And our success, I think, gave us courage and self confidence; that's why you see, beginning in the late forties through the fifties, a tremendous productivity at the labs which was stimulated from the earlier times. Because many of us were earlier forced to learn other things � we were forced to learn the things we didn't want to learn, we were forced to have an open door � and then we could exploit those things we learned. It is true, and I can't do anything about it; I cannot blame the present generation either. It's just a fact.Question: Is there something management could or should do?Hamming: Management can do very little. If you want to talk about managing research, that's a totally different talk. I'd take another hour doing that. This talk is about how the individual gets very successful research done in spite of anything the management does or in spite of any other opposition. And how do you do it? Just as I observe people doing it. It's just that simple and that hard!Question: Is brainstorming a daily process?Hamming: Once that was a very popular thing, but it seems not to have paid off. For myself I find it desirable to talk to other people; but a session of brainstorming is seldom worthwhile. I do go in to strictly talk to somebody and say, \"Look, I think there has to be something here. Here's what I think I see ...\" and then begin talking back and forth. But you want to pick capable people. To use another analogy, you know the idea called the `critical mass.' If you have enough stuff you have critical mass. There is also the idea I used to call `sound absorbers'. When you get too many sound absorbers, you give out an idea and they merely say, \"Yes, yes, yes.\" What you want to do is get that critical mass in action; \"Yes, that reminds me of so and so,\" or, \"Have you thought about that or this?\" When you talk to other people, you want to get rid of those sound absorbers who are nice people but merely say, \"Oh yes,\" and to find those who will stimulate you right back.For example, you couldn't talk to John Pierce without being stimulated very quickly. There were a group of other people I used to talk with. For example there was Ed Gilbert; I used to go down to his office regularly and ask him questions and listen and come back stimulated. I picked my people carefully with whom I did or whom I didn't brainstorm because the sound absorbers are a curse. They are just nice guys; they fill the whole space and they contribute nothing except they absorb ideas and the new ideas just die away instead of echoing on. Yes, I find it necessary to talk to people. I think people with closed doors fail to do this so they fail to get their ideas sharpened, such as \"Did you ever notice something over here?\" I never knew anything about it � I can go over and look. Somebody points the way. On my visit here, I have already found several books that I must read when I get home. I talk to people and ask questions when I think they can answer me and give me clues that I do not know about. I go out and look!Question: What kind of tradeoffs did you make in allocating your time for reading and writing and actually doing research?Hamming: I believed, in my early days, that you should spend at least as much time in the polish and presentation as you did in the original research. Now at least 50% of the time must go for the presentation. It's a big, big number.Question: How much effort should go into library work?Hamming: It depends upon the field. I will say this about it. There was a fellow at Bell Labs, a very, very, smart guy. He was always in the library; he read everything. If you wanted references, you went to him and he gave you all kinds of references. But in the middle of forming these theories, I formed a proposition: there would be no effect named after him in the long run. He is now retired from Bell Labs and is an Adjunct Professor. He was very valuable; I'm not questioning that. He wrote some very good Physical Review articles; but there's no effect named after him because he read too much. If you read all the time what other people have done you will think the way they thought. If you want to think new thoughts that are different, then do what a lot of creative people do � get the problem reasonably clear and then refuse to look at any answers until you've thought the problem through carefully how you would do it, how you could slightly change the problem to be the correct one. So yes, you need to keep up. You need to keep up more to find out what the problems are than to read to find the solutions. The reading is necessary to know what is going on and what is possible. But reading to get the solutions does not seem to be the way to do great research. So I'll give you two answers. You read; but it is not the amount, it is the way you read that counts.Question: How do you get your name attached to things?Hamming: By doing great work. I'll tell you the hamming window one. I had given Tukey a hard time, quite a few times, and I got a phone call from him from Princeton to me at Murray Hill. I knew that he was writing up power spectra and he asked me if I would mind if he called a certain window a \"hamming window.\" And I said to him, \"Come on, John; you know perfectly well I did only a small part of the work but you also did a lot.\" He said, \"Yes, Hamming, but you contributed a lot of small things; you're entitled to some credit.\" So he called it the hamming window. Now, let me go on. I had twitted John frequently about true greatness. I said true greatness is when your name is like ampere, watt, and fourier � when it's spelled with a lower case letter. That's how the hamming window came about.Question: Dick, would you care to comment on the relative effectiveness between giving talks, writing papers, and writing books?Hamming: In the short-haul, papers are very important if you want to stimulate someone tomorrow. If you want to get recognition long-haul, it seems to me writing books is more contribution because most of us need orientation. In this day of practically infinite knowledge, we need orientation to find our way. Let me tell you what infinite knowledge is. Since from the time of Newton to now, we have come close to doubling knowledge every 17 years, more or less. And we cope with that, essentially, by specialization. In the next 340 years at that rate, there will be 20 doublings, i.e. a million, and there will be a million fields of specialty for every one field now. It isn't going to happen. The present growth of knowledge will choke itself off until we get different tools. I believe that books which try to digest, coordinate, get rid of the duplication, get rid of the less fruitful methods and present the underlying ideas clearly of what we know now, will be the things the future generations will value. Public talks are necessary; private talks are necessary; written papers are necessary. But I am inclined to believe that, in the long-haul, books which leave out what's not essential are more important than books which tell you everything because you don't want to know everything. I don't want to know that much about penguins is the usual reply. You just want to know the essence.Question: You mentioned the problem of the Nobel Prize and the subsequent notoriety of what was done to some of the careers. Isn't that kind of a much more broad problem of fame? What can one do?Hamming: Some things you could do are the following. Somewhere around every seven years make a significant, if not complete, shift in your field. Thus, I shifted from numerical analysis, to hardware, to software, and so on, periodically, because you tend to use up your ideas. When you go to a new field, you have to start over as a baby. You are no longer the big mukity muk and you can start back there and you can start planting those acorns which will become the giant oaks. Shannon, I believe, ruined himself. In fact when he left Bell Labs, I said, \"That's the end of Shannon's scientific career.\" I received a lot of flak from my friends who said that Shannon was just as smart as ever. I said, \"Yes, he'll be just as smart, but that's the end of his scientific career,\" and I truly believe it was.You have to change. You get tired after a while; you use up your originality in one field. You need to get something nearby. I'm not saying that you shift from music to theoretical physics to English literature; I mean within your field you should shift areas so that you don't go stale. You couldn't get away with forcing a change every seven years, but if you could, I would require a condition for doing research, being that you will change your field of research every seven years with a reasonable definition of what it means, or at the end of 10 years, management has the right to compel you to change. I would insist on a change because I'm serious. What happens to the old fellows is that they get a technique going; they keep on using it. They were marching in that direction which was right then, but the world changes. There's the new direction; but the old fellows are still marching in their former direction.You need to get into a new field to get new viewpoints, and before you use up all the old ones. You can do something about this, but it takes effort and energy. It takes courage to say, ``Yes, I will give up my great reputation.'' For example, when error correcting codes were well launched, having these theories, I said, \"Hamming, you are going to quit reading papers in the field; you are going to ignore it completely; you are going to try and do something else other than coast on that.\" I deliberately refused to go on in that field. I wouldn't even read papers to try to force myself to have a chance to do something else. I managed myself, which is what I'm preaching in this whole talk. Knowing many of my own faults, I manage myself. I have a lot of faults, so I've got a lot of problems, i.e. a lot of possibilities of management.Question: Would you compare research and management?Hamming: If you want to be a great researcher, you won't make it being president of the company. If you want to be president of the company, that's another thing. I'm not against being president of the company. I just don't want to be. I think Ian Ross does a good job as President of Bell Labs. I'm not against it; but you have to be clear on what you want. Furthermore, when you're young, you may have picked wanting to be a great scientist, but as you live longer, you may change your mind. For instance, I went to my boss, Bode, one day and said, \"Why did you ever become department head? Why didn't you just be a good scientist?\" He said, \"Hamming, I had a vision of what mathematics should be in Bell Laboratories. And I saw if that vision was going to be realized, I had to make it happen; I had to be department head.\" When your vision of what you want to do is what you can do single-handedly, then you should pursue it. The day your vision, what you think needs to be done, is bigger than what you can do single-handedly, then you have to move toward management. And the bigger the vision is, the farther in management you have to go. If you have a vision of what the whole laboratory should be, or the whole Bell System, you have to get there to make it happen. You can't make it happen from the bottom very easily. It depends upon what goals and what desires you have. And as they change in life, you have to be prepared to change. I chose to avoid management because I preferred to do what I could do single-handedly. But that's the choice that I made, and it is biased. Each person is entitled to their choice. Keep an open mind. But when you do choose a path, for heaven's sake be aware of what you have done and the choice you have made. Don't try to do both sides.Question: How important is one's own expectation or how important is it to be in a group or surrounded by people who expect great work from you?Hamming: At Bell Labs everyone expected good work from me � it was a big help. Everybody expects you to do a good job, so you do, if you've got pride. I think it's very valuable to have first-class people around. I sought out the best people. The moment that physics table lost the best people, I left. The moment I saw that the same was true of the chemistry table, I left. I tried to go with people who had great ability so I could learn from them and who would expect great results out of me. By deliberately managing myself, I think I did much better than laissez faire.Question: You, at the outset of your talk, minimized or played down luck; but you seemed also to gloss over the circumstances that got you to Los Alamos, that got you to Chicago, that got you to Bell Laboratories.Hamming: There was some luck. On the other hand I don't know the alternate branches. Until you can say that the other branches would not have been equally or more successful, I can't say. Is it luck the particular thing you do? For example, when I met Feynman at Los Alamos, I knew he was going to get a Nobel Prize. I didn't know what for. But I knew darn well he was going to do great work. No matter what directions came up in the future, this man would do great work. And sure enough, he did do great work. It isn't that you only do a little great work at this circumstance and that was luck, there are many opportunities sooner or later. There are a whole pail full of opportunities, of which, if you're in this situation, you seize one and you're great over there instead of over here. There is an element of luck, yes and no. Luck favors a prepared mind; luck favors a prepared person. It is not guaranteed; I don't guarantee success as being absolutely certain. I'd say luck changes the odds, but there is some definite control on the part of the individual.Go forth, then, and do great work!"},{"title":"Robert Morris: All About Programming","text":"(When I asked Robert Morris to read a draft of \"What Doesn't\nSeem Like Work?\" he replied with his own story, which he has allowed\nme to publish.)My father tried to interest me in programming somewhat before\nhigh school; it didn't work, and I didn't continue then. My life was\npretty aimless, and my father delivered some hard words about how boring\nmy life was going to be.I re-started programming in early high school. I don't remember any\ngap between re-starting and total absorbtion. Programming was off the\nradar for nearly everyone at my at high school, and was unrelated to\nstudying, so the question of whether it was work never arose. Just as\nwell considering how little effort I put into school. I mentally moved\nto Bell Labs, first because I was using their computers and software,\nthen because I got a part-time job there in late high school.Because college acts as such a strong sorter, when I got there it was\nmuch more like Bell Labs than it was like high school. I spent time\nwith people like Rich Draves, for whom programming was not work. CS\nwasn't the same as programming (I still remember my confusion and\ndisappointment at a recursion theory seminar early freshman year), but\nit was close enough that I could get by.Even in college it took me a while to admit that it was all about\nprogramming. People at Bell Labs believed that CS was not serious,\nthat one must study something with inherent value like math. Not\nwanting to look like a loser to the people I most admired, I was\npretty late in admitting the obvious about math. Straightening myself\nout was tough, and I was not mentally flexible enough to keep in touch\nwith the Bell Labs people after ignoring their advice.The idea that one should ask questions about one's own life (e.g. your\n\"What seems like work...?\") and act on the answers was completely alien\nto me in those days, and I doubt I could have absorbed any wisdom in\nthis department."},{"title":"SBL Going Bad?","text":"Server blacklists tend to go bad, because the power they confer\ncorrupts the people running them.  They turn into vigilantes\nand start blacklisting innocent\nservers.The most notorious example is the MAPS RBL.\nI used to\nrecommend Spamhaus's SBL\nas an alternative, but it seems even this\npreviously upstanding service is going the way of other blacklists.This email I received recently sounds eerily familiar:\nYou described the Spamhaus SBL as\n\"responsible\". I beg to differ. I recently noticed that my IP range, ----,\nwas blacklisted on the Spamhaus SBL. I inquired as to the reason for\nthat, and they informed me that my data center, ----, had hosted\nsome spammers in the past. Their entire network, subnet mask ----,\nis blacklisted. I explained to them that while I can't vouch for the\nrigor with which ----'s AUP is enforced, that I am innocent in the\nmatter, and requested that my four IPs be whitelisted. I got back\na rather rude response along the lines of \"no we won't, because\nit's your fault for using an ISP that tolerates spam\". I don't find\nthat answer terribly responsible.\nThis is bad news, not just for the SBL but for the whole idea of\nblacklists.  The SBL was started\nwith the explicit aim of avoiding the kinds of abuses that\nhad tainted other blacklists.  So if even they are going the\nway of the MAPS RBL, one has to assume that every blacklist will,\neventually."},{"title":"Schlep Blindness","text":"January 2012There are great startup ideas lying around unexploited right under\nour noses.  One reason we don't see them is a phenomenon I call\nschlep blindness.  Schlep was originally a Yiddish word but has\npassed into general use in the US.  It means a tedious, unpleasant\ntask.No one likes schleps, but hackers especially dislike them.\nMost hackers who start startups wish they could do it by just writing\nsome clever software, putting it on a server somewhere, and watching\nthe money roll in—without ever having to talk to users, or negotiate\nwith other companies, or deal with other people's broken code.\nMaybe that's possible, but I haven't seen it.One of the many things we do at Y Combinator is teach hackers about\nthe inevitability of schleps.  No, you can't start a startup by\njust writing code.  I remember going through this realization myself.\nThere was a point in 1995 when I was still trying to convince myself\nI could start a company by just writing code.  But I soon learned\nfrom experience that schleps are not merely inevitable, but pretty\nmuch what business consists of.  A company is defined by the schleps\nit will undertake.  And schleps should be dealt with the same way\nyou'd deal with a cold swimming pool: just jump in.  Which is not\nto say you should seek out unpleasant work per se, but that you\nshould never shrink from it if it's on the path to something great.The most dangerous thing about our dislike of schleps is that much\nof it is unconscious.  Your unconscious won't even let you see ideas\nthat involve painful schleps.  That's schlep blindness.The phenomenon isn't limited to startups.  Most people don't\nconsciously decide not to be in as good physical shape as Olympic\nathletes, for example.  Their unconscious mind decides for them,\nshrinking from the work involved.The most striking example I know of schlep blindness is\nStripe, or\nrather Stripe's idea.  For over a decade, every hacker who'd ever\nhad to process payments online knew how painful the experience was.\nThousands of people must have known about this problem.  And yet\nwhen they started startups, they decided to build recipe sites, or\naggregators for local events.  Why?  Why work on problems few care\nmuch about and no one will pay for, when you could fix one of the\nmost important components of the world's infrastructure?  Because\nschlep blindness prevented people from even considering the idea\nof fixing payments.Probably no one who applied to Y Combinator to work on a recipe\nsite began by asking \"should we fix payments, or build a recipe\nsite?\" and chose the recipe site.  Though the idea of fixing payments\nwas right there in plain sight, they never saw it, because their\nunconscious mind shrank from the complications involved.  You'd\nhave to make deals with banks.  How do you do that?  Plus you're\nmoving money, so you're going to have to deal with fraud, and people\ntrying to break into your servers.  Plus there are probably all\nsorts of regulations to comply with.  It's a lot more intimidating\nto start a startup like this than a recipe site.That scariness makes ambitious ideas doubly valuable.  In addition\nto their intrinsic value, they're like undervalued stocks in the\nsense that there's less demand for them among founders.  If you\npick an ambitious idea, you'll have less competition, because\neveryone else will have been frightened off by the challenges\ninvolved.  (This is also true of starting a startup generally.)How do you overcome schlep blindness?  Frankly, the most valuable\nantidote to schlep blindness is probably ignorance.  Most successful\nfounders would probably say that if they'd known when they were\nstarting their company about the obstacles they'd have to overcome,\nthey might never have started it.  Maybe that's one reason the most\nsuccessful startups of all so often have young founders.In practice the founders grow with the problems.  But no one seems\nable to foresee that, not even older, more experienced founders.\nSo the reason younger founders have an advantage is that they make\ntwo mistakes that cancel each other out.  They don't know how much\nthey can grow, but they also don't know how much they'll need to.\nOlder founders only make the first mistake.Ignorance can't solve everything though.  Some ideas so obviously\nentail alarming schleps that anyone can see them.  How do you see\nideas like that?  The trick I recommend is to take yourself out of\nthe picture.  Instead of asking \"what problem should I solve?\" ask\n\"what problem do I wish someone else would solve for me?\"  If someone\nwho had to process payments before Stripe had tried asking that,\nStripe would have been one of the first things they wished for.It's too late now to be Stripe, but there's plenty still broken in\nthe world, if you know how to see it.Thanks to Sam Altman, Paul Buchheit, Patrick Collison,\nAaron Iba, Jessica Livingston, Emmett Shear, and Harj Taggar\nfor reading drafts of this."},{"title":"See Randomness","text":"April 2006, rev August 2009Plato quotes Socrates as saying \"the unexamined life is not worth\nliving.\"  Part of what he meant was that the proper role of humans is to\nthink, just as the proper role of anteaters is to poke their noses\ninto anthills.A lot of ancient philosophy had the quality—and I\ndon't mean this in an insulting way—of the kind of conversations\nfreshmen have late at night in common rooms:\nWhat is our purpose?  Well, we humans are\nas conspicuously different from other animals as the anteater.\nIn our case the distinguishing feature is the ability to reason.\nSo obviously that is what we should be doing, and a human who\ndoesn't is doing a bad job of being human—is no better than an\nanimal.\nNow we'd give a different answer.  At least, someone Socrates's age\nwould.  We'd ask why we even suppose we have a \"purpose\" in life.\nWe may be better adapted for some things than others; we\nmay be happier doing things we're adapted for; but why assume\npurpose?The history of ideas\nis a history of gradually discarding the assumption that it's all\nabout us.  No, it turns out, the earth is not the center of the\nuniverse—not even the center of the solar system.  No, it turns\nout, humans are not created by God in his own image; they're just\none species among many, descended not merely from apes, but from\nmicroorganisms.  Even the concept of \"me\" turns out to be fuzzy\naround the edges if you examine it closely.The idea that we're the center of things is difficult to discard.\nSo difficult that there's probably room to discard more.  Richard\nDawkins made another step in that direction only in the last several\ndecades, with the idea of the\nselfish gene.\nNo, it turns\nout, we're not even the protagonists: we're just the latest model\nvehicle our genes have constructed to travel around in.  And having\nkids is our genes heading for the lifeboats.  Reading\nthat book snapped my brain out of its previous way of thinking the\nway Darwin's must have when it first appeared.(Few people can experience now what Darwin's contemporaries did\nwhen The Origin of Species was first published, because everyone\nnow is raised either to take evolution for granted, or to regard\nit as a heresy. No one encounters the idea of natural selection for\nthe first time as an adult.)So if you want to discover things that have been overlooked till\nnow, one really good place to look is in our blind spot: in our\nnatural, naive belief that it's all about us.  And expect to encounter\nferocious opposition if you do.Conversely, if you have to choose between two theories, prefer the\none that doesn't center on you.This principle isn't only for big ideas.  It works in everyday life,\ntoo.  For example, suppose you're saving a piece of cake in the fridge, and you\ncome home one day to find your housemate has eaten\nit.  Two possible theories:\na) Your housemate did it deliberately to upset you.  He knew\nyou were saving that piece of cake.b) Your housemate was hungry.\nI say pick b.  No one knows who said \"never attribute to malice what\ncan be explained by incompetence,\" but it is a powerful idea.\nIts more general version is our answer to the Greeks:\nDon't see purpose where there isn't.\nOr better still, the positive version:\nSee randomness."},{"title":"Silicon Valley Prefers Obama 2 to 1","text":"Encouraging economic growth is a big theme, perhaps the biggest\ntheme, in the current presidential campaign.  Here in Silicon Valley,\neconomic growth is something we understand well.  Growth is the\ndefining quality of a startup, and the leaders of the startup\ncommunity are arguably the world's leading experts in making it\nhappen.So which candidate do they prefer?  I realized recently that I was\none of the few people in a position to find out. I know most of\nthese people well enough to ask them.  So yesterday I made a list\nof 32 people I considered leaders of the startup community, and\nsent them the following email:\nWould you mind telling me who you prefer for president, Obama or\nRomney?  I'm taking an informal poll.  I'll publish the overall\nnumbers but nothing more than that.  I'll never tell who I asked,\nor who preferred who.I'm doing this because I thought many voters would be interested\nto hear the opinions of the startup community.--pg\nBy today 24 had responded.  Of those 24, 15 supported Obama, 6\nsupported Romney, 2 were undecided but leaning toward Obama, and 1\nrefused to answer.  So by this measure at least, the leaders of the\nstartup community favor Obama by more than 2 to 1.I can't say who I asked, since I promised not to, but the list was\npretty much the usual suspects: the most prominent founders and\ninvestors.  Most of the people I asked live in Silicon Valley, but\na handful don't.  I didn't include myself in the survey, but I\nprefer Obama too."},{"title":"Six Principles for Making New Things","text":"February 2008The fiery reaction to the release of Arc had\nan unexpected consequence: it made me realize I had a design\nphilosophy.  The main complaint of the more articulate critics was\nthat Arc seemed so flimsy. After years of working on it, all I had\nto show for myself were a few thousand lines of macros?  Why hadn't\nI worked on more substantial problems?As I was mulling over these remarks it struck me how familiar they\nseemed.  This was exactly the kind of thing people said at first\nabout Viaweb, and Y Combinator, and most of my essays.When we launched Viaweb, it seemed laughable to VCs and e-commerce\n\"experts.\"  We were just a couple guys in an apartment,\nwhich did not seem cool in 1995 the way it does now.  And the thing\nwe'd built, as far as they could tell, wasn't even software.\nSoftware, to them, equalled big, honking Windows apps.  Since Viaweb\nwas the first web-based app\nthey'd seen, it seemed to be nothing\nmore than a website.  They were even more contemptuous when they\ndiscovered that Viaweb didn't process credit card transactions (we\ndidn't for the whole first year).  Transaction processing seemed\nto them what e-commerce was all about.  It sounded serious and\ndifficult.And yet, mysteriously, Viaweb ended up crushing all its competitors.The initial reaction to\nY Combinator was almost identical.  It\nseemed laughably lightweight.  Startup funding meant series A rounds:\nmillions of dollars given to a small number of startups founded by\npeople with established credentials after months of serious,\nbusinesslike meetings, on terms described in a document a foot\nthick.  Y Combinator seemed inconsequential.  It's too early to say\nyet whether Y Combinator will turn out like Viaweb, but judging\nfrom the number of imitations, a lot of people seem to think we're\non to something.I can't measure whether my essays are successful, except in page\nviews, but the reaction to them is at least different from when I\nstarted.  At first the default reaction of the Slashdot trolls was\n(translated into articulate terms): \"Who is this guy and what\nauthority does he have to write about these topics?  I haven't read\nthe essay, but there's no way anything so short and written in such\nan informal style could have anything useful to say about such and\nsuch topic, when people with degrees in the subject have already\nwritten many thick books about it.\" Now there's a new generation\nof trolls on a new generation of sites, but they have at least\nstarted to omit the initial \"Who is this guy?\"Now people are saying the same things about Arc that they said at\nfirst about Viaweb and Y Combinator and most of my essays.  Why the\npattern?  The answer, I realized, is that my m.o. for all four has\nbeen the same.Here it is: I like to find (a) simple solutions (b) to overlooked\nproblems (c) that actually need to be solved, and (d) deliver them\nas informally as possible, (e) starting with a very crude version\n1, then (f) iterating rapidly.When I first laid out these principles explicitly, I noticed something\nstriking: this is practically a recipe for generating a contemptuous\ninitial reaction.  Though simple solutions are better, they don't\nseem as impressive as complex ones.  Overlooked problems are by\ndefinition problems that most people think don't matter.  Delivering\nsolutions in an informal way means that instead of judging something\nby the way it's presented, people have to actually understand it,\nwhich is more work.  And starting with a crude version 1 means your\ninitial effort is always small and incomplete.I'd noticed, of course, that people never seemed to grasp new ideas\nat first.  I thought it was just because most people were stupid.\nNow I see there's more to it than that.   Like a\ncontrarian investment fund, someone following this strategy will\nalmost always be doing things that seem wrong to the average person.As with contrarian investment strategies, that's exactly the point.\nThis technique is successful (in the long term) because it gives you\nall the advantages other people forgo by trying to seem legit.  If\nyou work on overlooked problems, you're more likely to discover new\nthings, because you have less competition.  If you deliver solutions\ninformally, you (a) save all the effort you would have had to expend\nto make them look impressive, and (b) avoid the danger of fooling\nyourself as well as your audience.  And if you release a crude\nversion 1 then iterate, your solution can benefit from the imagination\nof nature, which, as Feynman pointed out, is more powerful than\nyour own.In the case of Viaweb, the simple solution was to make the software\nrun on the server.  The overlooked problem was to generate web sites\nautomatically; in 1995, online stores were all made by hand by human\ndesigners, but we knew this wouldn't scale.  The part that actually\nmattered was graphic design, not transaction processing.\nThe informal delivery mechanism was me, showing up in jeans and a\nt-shirt at some retailer's office.  And the crude version 1 was,\nif I remember correctly, less than 10,000 lines of code when we\nlaunched.The power of this technique extends beyond startups and programming\nlanguages and essays.  It probably extends to any kind of creative\nwork.  Certainly it can be used in painting: this is exactly\nwhat Cezanne and Klee did.At Y Combinator we bet money on it, in the sense that we encourage\nthe startups we fund to work this way. There are always new ideas\nright under your nose.  So look for simple things that other people\nhave overlooked—things people will later claim were\n\"obvious\"—especially when they've been led astray by obsolete\nconventions,\nor by trying to do things that are superficially impressive.  Figure\nout what the real problem is, and make sure you solve that.  Don't\nworry about trying to look corporate; the product is what wins in\nthe long term.  And launch as soon as you can, so you start learning\nfrom users what you should have been making.Reddit is a classic example of\nthis approach.  When Reddit first\nlaunched, it seemed like there was nothing to it.  To the graphically\nunsophisticated its deliberately minimal design seemed like no\ndesign at all.  But Reddit solved the real problem, which was to\ntell people what was new and otherwise stay out of the way.  As a\nresult it became massively successful.  Now that conventional ideas\nhave caught up with it, it seems obvious.  People look at Reddit\nand think the founders were lucky.  Like all such things, it was\nharder than it looked.  The Reddits pushed so hard against the\ncurrent that they reversed it; now it looks like they're merely\nfloating downstream.So when you look at something like Reddit and think \"I wish I could\nthink of an idea like that,\" remember: ideas like that are all\naround you.  But you ignore them because they look wrong."},{"title":"Snapshot: Viaweb, June 1998","text":"January 2012A few hours before the Yahoo acquisition was announced in June 1998\nI took a snapshot of Viaweb's\nsite.  I thought it might be interesting to look at one day.The first thing one notices is is how tiny the pages are.  Screens\nwere a lot smaller in 1998.  If I remember correctly, our frontpage\nused to just fit in the size window people typically used then.Browsers then (IE 6 was still 3 years in the future) had few fonts\nand they weren't antialiased.  If you wanted to make pages that\nlooked good, you had to render display text as images.You may notice a certain similarity between the Viaweb and Y Combinator logos.  We did that\nas an inside joke when we started YC.  Considering how basic a red\ncircle is, it seemed surprising to me when we started Viaweb how\nfew other companies used one as their logo.  A bit later I realized\nwhy.On the Company\npage you'll notice a mysterious individual called John McArtyem.\nRobert Morris (aka Rtm) was so publicity averse after the\nWorm that he\ndidn't want his name on the site.  I managed to get him to agree\nto a compromise: we could use his bio but not his name.  He has\nsince relaxed a bit\non that point.Trevor graduated at about the same time the acquisition closed, so in the\ncourse of 4 days he went from impecunious grad student to millionaire\nPhD.  The culmination of my career as a writer of press releases\nwas one celebrating\nhis graduation, illustrated with a drawing I did of him during\na meeting.(Trevor also appears as Trevino\nBagwell in our directory of web designers merchants could hire\nto build stores for them.  We inserted him as a ringer in case some\ncompetitor tried to spam our web designers.   We assumed his logo\nwould deter any actual customers, but it did not.)Back in the 90s, to get users you had to get mentioned in magazines\nand newspapers.  There were not the same ways to get found online\nthat there are today.  So we used to pay a PR\nfirm $16,000 a month to get us mentioned in the press.  Fortunately\nreporters liked\nus.In our advice about\ngetting traffic from search engines (I don't think the term SEO\nhad been coined yet), we say there are only 7 that matter: Yahoo,\nAltaVista, Excite, WebCrawler, InfoSeek, Lycos, and HotBot.  Notice\nanything missing?  Google was incorporated that September.We supported online transactions via a company called\nCybercash,\nsince if we lacked that feature we'd have gotten beaten up in product\ncomparisons.  But Cybercash was so bad and most stores' order volumes\nwere so low that it was better if merchants processed orders like phone orders.  We had a page in our site trying to talk merchants\nout of doing real time authorizations.The whole site was organized like a funnel, directing people to the\ntest drive.\nIt was a novel thing to be able to try out software online.  We put\ncgi-bin in our dynamic urls to fool competitors about how our\nsoftware worked.We had some well\nknown users.  Needless to say, Frederick's of Hollywood got the\nmost traffic.  We charged a flat fee of $300/month for big stores,\nso it was a little alarming to have users who got lots of traffic.\nI once calculated how much Frederick's was costing us in bandwidth,\nand it was about $300/month.Since we hosted all the stores, which together were getting just\nover 10 million page views per month in June 1998, we consumed what\nat the time seemed a lot of bandwidth.  We had 2 T1s (3 Mb/sec)\ncoming into our offices.  In those days there was no AWS.  Even\ncolocating servers seemed too risky, considering how often things\nwent wrong with them.  So we had our servers in our offices.  Or\nmore precisely, in Trevor's office.  In return for the unique\nprivilege of sharing his office with no other humans, he had to\nshare it with 6 shrieking tower servers.  His office was nicknamed\nthe Hot Tub on account of the heat they generated.  Most days his\nstack of window air conditioners could keep up.For describing pages, we had a template language called RTML, which\nsupposedly stood for something, but which in fact I named after\nRtm.  RTML was Common Lisp augmented by some macros and libraries,\nand concealed under a structure editor that made it look like it\nhad syntax.Since we did continuous releases, our software didn't actually have\nversions.  But in those days the trade press expected versions, so\nwe made them up.  If we wanted to get lots of attention, we made\nthe version number an\ninteger.  That \"version 4.0\" icon was generated by our own\nbutton generator, incidentally.  The whole Viaweb site was made\nwith our software, even though it wasn't an online store, because\nwe wanted to experience what our users did.At the end of 1997, we released a general purpose shopping search\nengine called Shopfind.  It\nwas pretty advanced for the time.  It had a programmable crawler\nthat could crawl most of the different stores online and pick out\nthe products."},{"title":"So Far, So Good","text":"August 2003(It's about a year now since A Plan for Spam.   So far,\nfilters are winning.  This article analyzes the tricks\nspammers have tried to beat them,\nand offers some suggestions for the future.)Bayesian filters are now common enough that we're\nstarting to see spams designed specifically to get past them.\nSo far these tricks aren't working. My filtering\nrate is still over 99.7%, and Brian Burton reports an\nastonishing 99.9% with his multi-word Bayesian\nSpamProbe.Will such filtering rates hold up?  What are spammers doing to\nattack Bayesian filters?   Is there anything we can do to\nmake them tighter?More Good TokensThere are only two ways\nto get past a Bayesian filter: add more good tokens, or\nuse fewer bad ones.  Spammers are actively trying both.They try to add good tokens by inserting random\ndictionary words, or by attaching a big chunk of\nneutral text, typically from a book or a wire service article.\nNeither of these tricks works very well.Choosing words\nat random\nyields (as you might expect) words that are just\nas likely to occur in spams as in legitimate mail.  The\nvocabulary of spams is a little narrower than that of\nlegitimate mail, so spammers may get\na slight benefit from adding random words, but it is mostly\na wash, statistically.Most randomly chosen words turn out not to have\noccurred in either spam or nonspam mail, and therefore have\nneutral spam probabilities.  (I still use .4 as the\ndefault for unseen words.)  You can counter the noise of\nrandom tokens by using an occurrence threshold, as\nrecommended in the Plan for Spam.\nI still use a threshold of 3.Appending\nchunks of articles or books doesn't seem to work\nany better, at least in the cases I've seen so far.  The\nappended text doesn't look like spam, but it doesn't look\nmuch like the email I get either, so it tends not to have\nany effect, statistically.Many spammers now use randomly generated names in their\nFrom lines, but these turn out to make filtering easier:\nI get a lot of email from strangers, but none of them\nso far have been called Krystal or Louella.\nI think the names of most users' correspondents will\nfall into a small, consistent subset.\nSo choosing names at random will yield tokens with high, not neutral,\nspam probabilities.Fewer Bad TokensThe other way to spoof a Bayesian filter is to use fewer\nbad tokens.  There are two general strategies: try\nto conceal the bad tokens, or rewrite the\nemail to use less spammy language.So far, trying to conceal bad tokens is a complete failure.\nAll the tricks I've seen so far make the spams easier to\ncatch, not harder.  These include misspellings (V1agra),\nbreaking up words with spaces or html (S E X),\nsending the spam as an image instead of text,\nand sending a Javascript program that generates the spam.Misspellings\nend up having\nhigher spam probabilities than the words they're intended\nto conceal.  In my filter the spam probability of\n\"Viagra\" is .9848, and of \"V1agra\" .9998.  [1]\nFor this kind of\ntrick to work, you have to be the first person to use\nnearly every misspelling in a spam.  The odds of doing\nthat are low, and if you fail you merely teach the filter\nall the new misspellings.Breaking up\nwords has the same effect.  It is easy to make\na tokenizer ignore most such tricks, but it probably\nwouldn't matter if you didn't bother.  Legitimate email\ndoesn't contain broken bits of words, so they quickly\nget high spam probabilities.   In my filter the letter S\nby itself in the subject line has a spam probability of .9427.Sending the spam as an\nimage\ninstead of text doesn't work\neither, because you need certain html tags to display an\nimage, and these all end up having very high\nspam probabilities.  Particularly the url.  If you use a\ndomain name and it's one that has shown up in spams\nbefore, you're dead.  If you use an ip address instead,\nyou're even deader.  No tokens have higher spam probabilities\nthan numbers in a url.Sending the spam hidden within a\nJavascript\nprogram fails for a similar reason.  Javascript is even rarer\nin legitimate mails than img tags, so the tokens in a\nJavascript program get very high spam probabilities.RewritingRewriting the spam in less spammy language is the only\none of these strategies likely to succeed.  But this takes\na lot of work.  It may not even be possible for\nsome spams.  How do you rewrite a mortgage spam\nwithout using terms like \"refinance\" (.9612),\n\"lenders\" (.9862), or \"mortgage\" (.9995)?\nAnd remember, whatever euphemisms you use, they\nhave to be different from the ones used by every mortgage\nspammer before you.  Surely at this point it would be less\nwork for the spammer to switch to some more legitimate\nbusiness.That's an important consideration.  If the only way to\nget past Bayesian filters is to write spams more cleverly,\nwe've made spamming a lot harder, because we've shifted the\nburden of cleverness from the few comparatively smart people\nwho write spamware to the large number of stupider people\nwho write the spams.The infrastructure of spam is\nbuilt by smart people, what\nJon\nPraed called \"hackers gone bad.\"\nThe spams themselves, however, are written by the\nindividual spammers.  Spamware can only help them so far.\nIt can insert random words into the spam for them, or\nbreak up and misspell words, but it can't rewrite the\nspam in less spammy language.  It would take AI\nto do that.When the spammers do try to rewrite their messages,\nthey'll probably do it by replacing\nindividual spammy tokens with phrases of more neutral\nwords.  But multi-word filters will learn and\ncatch these phrases too.\nBrian Burton's\nSpamprobe\nand Bill Yerazunis' CRM114\nalready look\nat multi-word patterns.  When a spam gets through my\nfilter I send it on to them, and they always seem to be\nable to catch it.And of course, spams won't work so well if they have to be rewritten in\nmore neutral language.  People who respond to spams are\npresumably pretty dull-witted, and have to be hit over\nthe head with a lot of capital letters and exclamation\npoints to get them to do anything.  Perhaps you can't\nget them to act at all unless you tell them they have to\nACT NOW!  So forcing spammers to use\nmore neutral language may be enough to put most of them\nout of business.  We'll see in the coming year.The FutureThis battle has only just started.  I've only been seeing\nspams that seem intended specifically to spoof Bayesian filters\nfor a couple months.  But we'll be seeing a\nlot more now that\nAOL\nhas released Bayesian filters.How will the battle play out?As I said in the Plan for Spam, I think it may all come\ndown to links.  The Web is the main cause of spam, not email.\nNearly all spams include some kind of contact\nmechanism, and this is nearly always a link. [2]\nThis is the part of the spam that filter writers should\nfocus on, because this is the hardest for the\nspammer to change.Better Bayesian Filtering\nmentioned that filters could\nbe made more discriminating by marking tokens with their\ncontext.  \"FREE\" in the subject line has a much higher\nspam probability (.9999) than \"FREE\" in the body (.7567).\nSo far I have\nonly marked tokens with the name of the header line they\noccur in.  This idea could be expanded to\nsqueeze more information out of links.\nTokens like \"here\", \"remove\", or \"img\"\nwithin a link will have a much higher spam probability than\nthey would otherwise.\n(This would probably be true for tokens within e.g. font tags, too.)In response to filters, spams are getting smaller.\nIn many the payload now consists of a single image tag\nwithin a link:\n\n\nBut this much html is still enough to catch the spam.\nIn effect, you can recognize\nthis kind of spam by its form.If these spams have anything in them besides the\ntext intended to spoof filters.  So far such chaff is\nineffective, but we can't assume it will stay that way.\nThere are ways to generate text that would\nwork better at counterbalancing the spamminess of\nrecognize and ignore chaff.  For example, if an email\nhad some tokens with very high spam probabilities, and\nothers with very low spam probabilities, you might want\nto ask if the spammy words all occurred close together,\nor rescore it looking only at the html.Another way to factor out chaff might be to look at whether the text\nseemed grammatical.  You wouldn't necessarily have to parse it.\nFor English, at least, I can imagine several ways to come up with a\nquick statistical estimate.The hardest kind of spams to catch are those I've called\n\"spam of the future\"-- a little plain text plus a url:\nHey there. Check out the following:\nhttp://www.blackboxhosting.com/foo\nThe future has arrived.  I regularly see spams like this\nnow.  I still catch nearly all of them-- headers alone would\nbe enough to catch most current spam-- but the .3% of\nspam that I miss is mostly spam of the future.In spam of the future, the sales pitch is pushed one step\nback.  Instead of being contained in the email itself,\nas in an ordinary spam, it is waiting a click away on a\nweb site.This trend is encouraging, because it implies that filters are\nwinning.  Spam is literally retreating.  (This is more than\na symbolic victory; each extra step cuts response rates.)If the spam is waiting\non a web site, why not have filters go look at what's there?\nYou could apply the filtering algorithm pretty much\nunchanged to the contents of the site.\nRichard Jowsey of\ndeath2spam has already\nstarted doing this in borderline cases, and he\nreports that it works well.A cheaper alternative would be a cooperative list of\nsites advertised in spams.  Instead of examining the site,\na filter could query a server (or p2p network) to see if\nother users had recently reported spams promoting that\ndomain.  If so it could\nbe treated as a token with very high spam probability.\n(A cooperative list of spamvertised sites would be useful\nfor other purposes as well.)This idea could be generalized to a cooperative list of\nall tokens with high spam probabilities, not just domain names.\nThis would improve filtering rates for everyone, but particularly\nfor users of newly installed filters, which would now\nneed little training.To take advantage of this kind of information, we\nshould ideally delay filtering as long as possible.  I.e.\nfilter when the user checks his mail, not when it arrives\nat the server.    By the time you check your mail, odds are\nthat any spam that made it into in your inbox has already\nbeen seen by thousands of people.Divide and ConquerSome people believe that spammers will inevitably figure\nout a way around filters, and that a better solution is to\nhave laws making spamming a federal crime.\nI'd love to see such laws myself, at least if they were\nwritten properly.  And strangely enough, I think filters will\nhelp this to happen.  There is a class of spammers who\ncouldn't evade filters even if they knew how, and eliminating\nthese will make it easier to attack the rest.It's hard to pass effective laws against spam now,\nbecause there is a continuum of spammers, ranging from\n(ahem) \"permission-based email marketers\" like Virtumundo\nthat send unsolicited\nemail to addresses they buy from sites with unscrupulous privacy\npolicies, to bottom-feeders\nlike Alan\nRalsky who send unsolicited email to addresses\nculled from web pages, chat rooms, and newsgroups. [3]The companies at the more legitimate end of the spectrum\nlobby for loopholes that allow the bottom-feeders to slip through too.\nFor example, congress seems to be considering allowing\nunsolicited mail so long as it contains a working unsubscribe link. [4]\nThis despite the fact that most experts advise\nagainst\nclicking on unsubscribe links, because they just\ntell the more unscrupulous spammers that you're a live\ntarget.  How does congress expect the email recipient to\nbe able to figure out which unsubscribe links yield less\nspam, and which yield more?Filters will help fix this situation, by putting the\n\"opt-in\" spammers out of business.  Such companies can't take\nserious measures to spoof filters (e.g. falsifying headers)\nand still maintain the fiction that the tens of millions of\npeople on their lists are \"subscribers\" who\nactually want to receive their valuable offers. [5]The result is that \"opt-in\" spam is very easy to filter.\nI can't imagine any Bayesian filter, however badly implemented,\nnot catching this stuff.  I don't think I've ever had a single one\nget through mine.As the growing volume of spam encourages widespread use of\nfilters, the number of people who see\nspam sent by the \"opt-in\" mailers will gradually shrink\ndown to nothing.  And with it the companies themselves.True, this would put the wrong half of the spammers out of\nbusiness.  But getting rid of the \"opt-in\" spammers will\nultimately hurt the bottom-feeders too.If the \"opt-in\" spammers went away, leaving a clear gap between\nL. L. Bean and Alan Ralsky, it would be easier to pass\nlaws that distinguished between them.    It would be\nclear to everyone where marketing ended and\ncrime began, and there would be no lobbyists working to\nblur the distinction.Putting a lock on your door may not keep everyone out,\nbut it makes it easy to distinguish between the people\nyou invite and the people who break in.Notes[1] The difference wouldn't be as great for most people, but\nmuch of my mail is about spam, and so often contains the\nword \"Viagra\".[2] About 95% of spam sent to me contains urls.  The rest\nare evenly divided between 419,\nMLM, and non-ascii (mostly\nRussian) spams, most of which want you to respond by email,\nand all of which are easy to filter.\nAnyone want to write an ELIZA to talk to these people?[3] Is there that much difference\nbetween these two cases?[4] \"Unsubscribe\" is of course a misnomer.  You didn't\nsubscribe to their email list.  They just bought\nyour address from someone.  But for better or worse getting\nyourself off a spammer's list has come to be called\nunsubscribing.[5] I did once get a\nspam\npromoting Omaha Steaks in which the\nsubject line read\n12_F.R.E.E._Hamburgers & Half_Price_Steaks\nThis is pushing the limits of plausible deniability.\nYou have to wonder how they can continue to claim they're\nsending offers to willing recipients, while at the same\ntime taking such obvious steps to spoof filters. What's next?\nMail from 0ma_ha 5teakz?"},{"title":"Some Heroes","text":"April 2008There are some topics I save up because they'll be so much fun to\nwrite about.  This is one of them: a list of my heroes.I'm not claiming this is a list of the n most admirable people.\nWho could make such a list, even if they wanted to?Einstein isn't on the list, for example, even though he probably\ndeserves to be on any shortlist of admirable people.  I once asked\na physicist friend if Einstein was really as smart as his fame\nimplies, and she said that yes, he was.  So why isn't he on the\nlist?  Because I had to ask.  This is a list of people who've\ninfluenced me, not people who would have if I understood their work.My test was to think of someone and ask \"is this person my\nhero?\"  It often returned surprising answers.  For example,\nit returned false for Montaigne, who was arguably the inventor of\nthe essay.  Why?  When I thought\nabout what it meant to call someone a hero, it meant I'd decide what\nto do by asking what they'd do in the same situation.  That's a\nstricter standard than admiration.After I made the list, I looked to see if there was a pattern, and\nthere was, a very clear one.  Everyone on the list had two qualities:\nthey cared almost excessively about their work, and they were\nabsolutely honest.  By honest I don't mean trustworthy so much as\nthat they never pander: they never say or do something because\nthat's what the audience wants.  They are all fundamentally subversive\nfor this reason, though they conceal it to varying degrees.Jack LambertI grew up in Pittsburgh in the 1970s.  Unless you were there it's\nhard to imagine how that town felt about the Steelers.   Locally,\nall the news was bad.  The steel industry was dying.  But the\nSteelers were the best team in football—and moreover, in a\nway that seemed to reflect the personality of the city.  They didn't\ndo anything fancy.  They just got the job done.Other players were more famous: Terry Bradshaw, Franco Harris, Lynn\nSwann.  But they played offense, and you always get more attention\nfor that.  It seemed to me as a twelve year old football expert\nthat the best of them all was\nJack Lambert.  And what made him so\ngood was that he was utterly relentless.  He didn't just care about\nplaying well; he cared almost too much.  He seemed to regard it as\na personal insult when someone from the other team had possession\nof the ball on his side of the line of scrimmage.The suburbs of Pittsburgh in the 1970s were a pretty dull place.\nSchool was boring.  All the adults around were bored with their\njobs working for big companies. Everything that came to us through\nthe mass media was (a) blandly uniform and (b) produced elsewhere.\nJack Lambert was the exception.  He was like nothing else I'd seen.Kenneth ClarkKenneth Clark is the best nonfiction writer I know of, on any\nsubject.  Most people who write about art history don't really like\nart; you can tell from a thousand little signs.  But Clark did, and\nnot just intellectually, but the way one anticipates a delicious\ndinner.What really makes him stand out, though, is the quality of his\nideas.  His style is deceptively casual, but there is more in\nhis books than in a library\nof art monographs.  Reading\nThe Nude is like a ride in a\nFerrari.  Just as you're getting settled, you're slammed back in\nyour seat by the acceleration.  Before you can adjust, you're thrown\nsideways as the car screeches into the first turn.  His brain throws\noff ideas almost too fast to grasp them.  Finally at the end of the\nchapter you come to a halt, with your eyes wide and a big smile on\nyour face.Kenneth Clark was a star in his day, thanks to the documentary\nseries\nCivilisation.  And if you read only one book about\nart history,\nCivilisation is the one I'd recommend.  It's\nmuch better than the drab Sears Catalogs of art that undergraduates\nare forced to buy for Art History 101.Larry MihalkoA lot of people have a great teacher at some point in their childhood.\nLarry Mihalko was mine.  When I look back it's like there's a line\ndrawn between third and fourth grade.  After Mr. Mihalko, everything\nwas different.Why?  First of all, he was intellectually curious.  I had a few\nother teachers who were smart, but I wouldn't describe them as\nintellectually curious.  In retrospect, he was out of place as an\nelementary school teacher, and I think he knew it.  That must have\nbeen hard for him, but it was wonderful for us, his students.  His\nclass was a constant adventure.  I used to like going to school\nevery day.The other thing that made him different was that he liked us.  Kids\nare good at telling that.  The other teachers were at best benevolently\nindifferent.  But Mr.  Mihalko seemed like he actually wanted to\nbe our friend.  On the last day of fourth grade, he got out one of\nthe heavy school record players and played James Taylor's \"You've\nGot a Friend\" to us.  Just call out my name, and you know wherever\nI am, I'll come running.  He died at 59 of lung cancer.  I've never\ncried like I cried at his funeral.LeonardoOne of the things I've learned about making things that I didn't\nrealize when I was a kid is that much of the best stuff isn't made\nfor audiences, but for oneself.  You see paintings and drawings in\nmuseums and imagine they were made for you to look at.  Actually a\nlot of the best ones were made as a way of exploring the world, not\nas a way to please other people.  The best of these explorations\nare sometimes more pleasing than stuff made explicitly to please.Leonardo did a lot of things.  One of his most admirable qualities\nwas that he did so many different things that were admirable.  What\npeople know of him now is his paintings and his more flamboyant\ninventions, like flying machines.  That makes him seem like some\nkind of dreamer who sketched artists' conceptions of rocket ships\non the side.  In fact he made a large number of far more practical\ntechnical discoveries.  He was as good an engineer as a painter.His most impressive work, to me, is his\ndrawings.  They're clearly\nmade more as a way of studying the world than producing something\nbeautiful. And yet they can hold their own with any work of art\never made.  No one else, before or since, was that good when no one\nwas looking.Robert MorrisRobert Morris has a very unusual quality: he's never wrong.  It\nmight seem this would require you to be omniscient, but actually\nit's surprisingly easy. Don't say anything unless you're fairly\nsure of it.  If you're not omniscient, you just don't end up saying\nmuch.More precisely, the trick is to pay careful attention to how you\nqualify what you say.  By using this trick, Robert has, as far as\nI know, managed to be mistaken only once, and that was when he was\nan undergrad.  When the Mac came out, he said that little desktop\ncomputers would never be suitable for real hacking.It's wrong to call it a trick in his case, though.  If it were a\nconscious trick, he would have slipped in a moment of excitement.\nWith Robert this quality is wired-in.  He has an almost superhuman\nintegrity.  He's not just generally correct, but also correct about\nhow correct he is.You'd think it would be such a great thing never to be wrong that\neveryone would do this.  It doesn't seem like that much extra work\nto pay as much attention to the error on an idea as to the idea\nitself.  And yet practically no one does.  I know how hard it is,\nbecause since meeting Robert I've tried to do in software what he\nseems to do in hardware.P. G. WodehousePeople are finally starting to admit that Wodehouse was a great\nwriter.  If you want to be thought a great novelist in your own\ntime, you have to sound intellectual.  If what you write is popular,\nor entertaining, or funny, you're ipso facto suspect.  That makes\nWodehouse doubly impressive, because it meant that to write as he\nwanted to, he had to commit to being despised in his own lifetime.Evelyn Waugh called him a great writer, but to most people at the\ntime that would have read as a chivalrous or deliberately perverse\ngesture. At the time any random autobiographical novel by a recent\ncollege grad could count on more respectful treatment from the\nliterary establishment.Wodehouse may have begun with simple atoms, but the way he composed\nthem into molecules was near faultless.  His rhythm in particular.\nIt makes me self-conscious to write about it.  I can think of only\ntwo other writers who came near him for style: Evelyn Waugh and\nNancy Mitford.  Those three used the English language like they\nowned it.But Wodehouse has something neither of them did.  He's at ease.\nEvelyn Waugh and Nancy Mitford cared what other people thought of\nthem: he wanted to seem aristocratic; she was afraid she wasn't\nsmart enough.  But Wodehouse didn't give a damn what anyone thought\nof him.  He wrote exactly what he wanted.Alexander CalderCalder's on this list because he makes me happy.  Can his work stand\nup to Leonardo's?  Probably not.  There might not be anything from\nthe 20th Century that can.  But what was good about Modernism,\nCalder had, and had in a way that he made seem effortless.What was good about Modernism was its freshness.  Art became stuffy\nin the nineteenth century.  The paintings that were popular at the\ntime were mostly the art equivalent of McMansions—big,\npretentious, and fake.  Modernism meant starting over, making things\nwith the same earnest motives that children might.  The artists who\nbenefited most from this were the ones who had preserved a child's\nconfidence, like Klee and Calder.Klee was impressive because he could work in so many different\nstyles.  But between the two I like Calder better, because his work\nseemed happier.  Ultimately the point of art is to engage the viewer.\nIt's hard to predict what will; often something that seems interesting\nat first will bore you after a month.  Calder's\nsculptures never\nget boring.  They just sit there quietly radiating optimism, like\na battery that never runs out.  As far as I can tell from books and\nphotographs, the happiness of Calder's work is his own happiness\nshowing through.Jane AustenEveryone admires Jane Austen.  Add my name to the list.  To me she\nseems the best novelist of all time.I'm interested in how things work.  When I read most novels, I pay\nas much attention to the author's choices as to the story.  But in\nher novels I can't see the gears at work.  Though I'd really like\nto know how she does what she does, I can't figure it out, because\nshe's so good that her stories don't seem made up.  I feel like I'm\nreading a description of something that actually happened.I used to read a lot of novels when I was younger.  I can't read\nmost anymore, because they don't have enough information in them.\nNovels seem so impoverished compared to history and biography.  But\nreading Austen is like reading\nnonfiction.  She writes so well you don't even notice her.John McCarthyJohn McCarthy invented Lisp, the field of (or at least the term)\nartificial intelligence, and was an early member of both of the top\ntwo computer science departments, MIT and Stanford.  No one would\ndispute that he's one of the greats, but he's an especial hero to\nme because of\nLisp.It's hard for us now to understand what a conceptual leap that was\nat the time.  Paradoxically, one of the reasons his achievement is\nhard to appreciate is that it was so successful.  Practically every\nprogramming language invented in the last 20 years includes ideas\nfrom Lisp, and each year the median language gets more Lisplike.In 1958 these ideas were anything but obvious.  In 1958 there seem\nto have been two ways of thinking about programming.  Some people\nthought of it as math, and proved things about Turing Machines.\nOthers thought of it as a way to get things done, and designed\nlanguages all too influenced by the technology of the day.  McCarthy\nalone bridged the gap.  He designed a language that was math.  But\ndesigned is not really the word; discovered is more like it.The SpitfireAs I was making this list I found myself thinking of people like\nDouglas Bader\nand\nR.J. Mitchell\nand\nJeffrey Quill and I realized\nthat though all of them had done many things in their lives, there\nwas one factor above all that connected them: the Spitfire.This is supposed to be a list of heroes.  How can a machine be on\nit?  Because that machine was not just a machine.  It was a lens\nof heroes.  Extraordinary devotion went into it, and extraordinary\ncourage came out.It's a cliche to call World War II a contest between good and evil,\nbut between fighter designs, it really was.  The Spitfire's original\nnemesis, the ME 109, was a brutally practical plane.  It was a\nkilling machine.  The Spitfire was optimism embodied.  And not just\nin its beautiful lines: it was at the edge of what could be\nmanufactured.  But taking the high road worked.  In the air, beauty\nhad the edge, just.Steve JobsPeople alive when Kennedy was killed  usually remember exactly where\nthey were when they heard about it.  I remember exactly where I was\nwhen a friend asked if I'd heard Steve Jobs had cancer.  It was\nlike the floor dropped out.   A few seconds later she told me that\nit was a rare operable type, and that he'd be ok.  But those seconds\nseemed long.I wasn't sure whether to include Jobs on this list.  A lot of people\nat Apple seem to be afraid of him, which is a bad sign.  But he\ncompels admiration.There's no name for what Steve Jobs is, because there hasn't been\nanyone quite like him before.  He doesn't design Apple's products\nhimself.  Historically the closest analogy to what he does are the\ngreat Renaissance patrons of the arts.  As the CEO of a company,\nthat makes him unique.Most CEOs delegate\ntaste to a subordinate.\nThe\ndesign paradox\nmeans they're choosing more or less at random.  But Steve\nJobs actually has taste himself—such good taste that he's shown\nthe world how much more important taste is than they realized.Isaac NewtonNewton has a strange role in my pantheon of heroes: he's the one I\nreproach myself with.  He worked on big things, at least for part\nof his life.  It's so easy to get distracted working on small stuff.\nThe questions you're answering are pleasantly familiar.  You get\nimmediate rewards—in fact, you get bigger rewards in your\ntime if you work on matters of passing importance.  But I'm\nuncomfortably aware that this is the route to well-deserved obscurity.To do really great things, you have to seek out questions people\ndidn't even realize were questions.  There have probably been other\npeople who did this as well as Newton, for their time, but Newton\nis my model of this kind of thought.  I can just begin to understand\nwhat it must have felt like for him.You only get one life.  Why not do something huge?  The phrase \"paradigm\nshift\" is overused now, but Kuhn was onto something.  And you know\nmore are out there, separated from us by what will later seem a\nsurprisingly thin wall of laziness and stupidity.  If we work like\nNewton.Thanks to Trevor Blackwell, Jessica Livingston, and Jackie McDonough for reading drafts of this."},{"title":"Some Work on Arc","text":"October 2003(This was an invited talk at ILC 2003.)A couple days ago while I was working on this talk, slashdot\nhad a link to something I'd written about spam.  I usually\ntry to avoid reading the comments when this happens.\nThe odds of being annoyed are greater than the\nodds of learning something.  But this time I felt like\nprocrastinating, so I scrolled down, and the first thing I saw\nwas a post entitled \"Back to Work, Paul\" which said that I\nought to stop wasting my time writing spam filters, and get\nback to work on Arc.Well, I haven't been slacking as badly as this guy thought.\nI'm always getting emails from people asking in effect, \"are\nwe there yet?\"   The short answer is no.  The longer\nanswer is that the project is now in the third\nof four stages.  The plan was\n(a) to make a crappy initial version of Arc, (b) use that for a while in real\napplications, then (c) go back and write a complete, cleaned\nup language spec, and (d) use that as the basis of a fairly good\nimplementation.I'm in phase (c) now.  I don't know how much longer it will take\nto finish the spec.  It turns out to be quite hard, though very\ninteresting.  Since the spec is what I'm working on now, that's\nwhat I'm going to talk about here.\nI think a programming language should be mostly defined in itself.\nA language spec should be divided into two parts, a small core of operators\nthat play the role of axioms, and the rest of the language, which,\nlike theorems, are defined in terms of the axioms.There are two main reasons to approach language design this way.\nOne is that it yields more elegant languages.  The other is that\nby doing things this way, you can make the language maximally\nrewritable.  Anything that's written in the language can be\nrewritten by programmers using the language.Letting people\nrewrite your language is a good idea.  You, as the language\ndesigner, can't possibly anticipate all the things programmers\nare going to want to do with it.  To the extent they can rewrite\nthe language, you don't have to.But the advantage of a rewritable language is more than that\nit lets programmers fix your mistakes.  I think the best programmers\ntend to work by rewriting whatever language they're using.\nSo even the perfect language, if there is such a thing, would\nbe very rewritable.  In fact, if I had to guess, I think the\nperfect language might be whichever one was most rewritable.The idea of axiomatizing a programming language is not of course\na new one.  It's almost as old as the idea of a programming\nlanguage.  In his famous\n1960 paper, John McCarthy showed how\nto do this by defining a language he called Lisp.  You may be\nfamiliar with it.  If you have seven primitive operators\n(quote, atom, eq, car, cdr, cons, and cond) then you can\ndefine in terms of them another function, eval, that acts as\na Lisp interpreter.And so any language that contains these seven operators\nis a dialect of Lisp, whether it was meant to be or not.\nThis must be an alarming prospect for anyone\ndesigning a new language.  These seven axioms are so reactive that\nif you get them all together in the same place, they explode, and\npow, instead of a new language, you've designed an old one.\nSo if you want to design a new programming language, it is critical\nthat you not make it too powerful.Lately I've been trying to continue where McCarthy's 1960 paper\nleft off.  I have long suspected that the main reason Lisp is\nsuch a good programming language is that it wasn't designed to\nbe a programming language.  It is, rather, a theoretical result.\nIf you try to answer the question, what is the smallest number of\noperators you need in order to write an interpreter for a language\nin itself, Lisp is what you get.  (At least, it's one thing you get;\nthat is not a very precise question, so there is probably more\nthan one answer.)In other words, Lisp is not something McCarthy invented, so much\nas something he discovered.  This seems to be a good quality to\nhave in a programming language.  I get some of the same feeling\nof inevitability looking at C and Smalltalk.Of course, as soon as McCarthy's spec fell into the hands of hackers,\nall this theorizing was cut short.  In Lisp 1.5, read and print\nwere not written in Lisp.  Given the hardware\navailable at the time, there is no way they could have been.  But\nthings are different now.  With present-day hardware you can\ncontinue till you have a runnable spec for a complete\nprogramming language.  So that's what I've been doing.The question I'm trying to answer at the moment is, what\noperators do you have to add to the original seven in order to\nbe able to write an eval for a complete programming language?Well, that of course depends on what you mean by a complete\nprogramming language.  But I think there are some features everyone\nwould agree were necessary.  We need to have I/O, for example,\nfor our programs even to get into the computer to be evaluated.\nWe need to have some plan for dealing with errors.  (McCarthy's\noriginal eval assumes its argument is a correct program.  If you\nrefer to an unbound variable, it goes into an infinite loop.)\nAnd we need to have more data types than symbols and conses.\nWe'll probably want numbers, for example.I'm not finished yet with this exercise, but so far I've been\nsurprised by how few primitives you need to add to the core\nin order to make these things work.\nI think all you need to define new types is three new primitives\n(plus assignment and lexical scope).   One of the new primitives\nreplaces the original atom, so you still only end up with nine total.In McCarthy's original eval, the only data types are conses and symbols.\nIn principle, you can probably represent anything you want as\nconses.  For example, the integer n could be represented by a\nlist of length n.This would be terribly inefficient in practice of course.\nAnd no one is proposing that implementations actually work that way.\nThe point of writing an eval is to define a language\nspec, not a language implementation.\nInternally, implementations can do whatever they\nlike-- including for example representing numbers in whatever\nway is most convenient for the hardware-- so long as their\noutward behavior is indistinguishable from the interpreter\nthat serves as the language spec.The real problem with representing numbers as lists is not\ninefficiency, but that\nif we do that, we can't tell numbers from lists.\nOne function that will want to distinguish between them is\nthe print function, which needs to print a list of\nthree elements as (a a a), and the number 3 as 3.So we need to\nhave some idea of data types.  And if we can, we should do\nthis in a way that's available to users, like the rest of Lisp.  Just as\nusers can define new functions that are just like predefined\nfunctions, users should be able to define new types that are\njust like the predefined types.\nAnd of course, we want to put as little in the core as we can.\nComplex numbers, for example, shouldn't have to be defined\nin the core of the language.What's the least we can do?\nIt looks as if it will be enough to define three new\nprimitive functions, which I call tag, type, and rep. [1]Tag takes two arguments, a type label and a representation.\nSo for example you can make an object whose type is the symbol\na and whose representation is the symbol b saying\n(tag 'a 'b)\nThe other two operators, type and rep, take such objects\napart.\n(type (tag x y)) -> x(rep  (tag x y)) -> y\nI expect type names will ordinarily be symbols, but they don't\nhave to be.  Either argument can be of any type.  I can't imagine\nwhy users would want to have type labels other than symbols,\nbut I also can't see any reason to prevent it.Maybe this would be a good time to describe my approach to\nrestrictions in Arc.  There seem to be three reasons language\ndesigners forbid something: because there is no consistent way\nto allow it, because it is hard to implement efficiently, and\nbecause allowing it might let programmers get into trouble.An example of the first type of restriction is not allowing programs\nto ask for the car of a symbol.\nSuch a request is semantically ill-formed, like asking how much\nblue weighs.  (One of the few things I learned from studying\nphilosophy in college was that most of the great traditional\nphilosophical controversies are similarly ill-formed.  Ideas\nlike free will and even personal identity can't withstand close\ninspection.)  You have to forbid users to ask\nill-formed questions, because there's no way to answer\nthem.I'm not going to have either of the other kind of\nrestriction, though.  In Arc, the plan for efficiency is not to\nconstrain the language spec, but to allow users to constrain their\nprograms selectively with declarations in places where\nthey need more speed.   This is not the same thing as the\nfamous mistake, if it is a mistake, of assuming a \"sufficiently\nsmart compiler.\"  I'm\nnot proposing that the compiler automatically figure out\nwhere it can cut corners, but that the user, aided by a good\nprofiler, tell the compiler where it can cut corners.For example, Arc currently has first class macros.  It just\nseems to be the simplest way to define the language.  First-class\nmacros are\npotentially very inefficient; you could be expanding\nmacro calls at runtime.  But I think most users won't want to\ntake advantage of this possibility.  They'll ordinarily make\nsome kind of global declaration that macro calls can all\nbe expanded at compile time, and macros won't cost any more\nthan they do in current Lisps.An example of the third type of restriction, the kind intended merely\nto keep the user from getting into trouble, would be encapsulation.\nThere won't be any of this type of restriction in Arc, if I can\nhelp it.  There might (or might not) be situations where this\nkind of restrictive language would be a net win, but it's not\nthe kind of language I'm trying to write.  I'm aiming for a small spec and\nsmall programs, and such restrictions won't give you either.I say \"if I can help it\" because I've found that designing a\nlanguage, like other forms of absolute power, corrupts absolutely.\nEven now, after years of saying that a language should be the\nservant and not the master, I still find myself thinking, should I\nlet users do such and such?  I think the only defense against\nthis is to have a rule that if you ever find yourself asking\nquestions that begin \"should I let users...\",\nto automatically answer \"Yes, if there's no logical reason\nto forbid it.\"So, for example, it is not\nillegal in Arc to use the same variable twice in a parameter list.\nThere's a consistent interpretation of such code-- bind\nthe parameters left to right-- and that's what I do.  (Using the\nsame parameter twice will also work in McCarthy's original eval,\nexcept there the first parameter becomes the visible one.)\nPerhaps most parameter lists in which the same symbol occurs twice\nwill be the result of bugs.  But it's just possible that some\nautomatically generated code, macroexpansions for example, might want to\ndo this intentionally.  More importantly, this is the kind of\nbug that should be caught by some lintlike component\nof the development environment.  It should not be\nthe job of the language core.We need to specify a few more things about our three\nnew primitives.  If you call tag on an object already of the\ntype given as the first argument, you just get the second\nargument.  So\n(tag 'symbol 'a) -> a\nThe type function returns cons for conses,\nsymbol for symbols, and fn for functions.\n(type cons) -> fn\nThe rep function\nwhen called on a symbol or cons or a primitive function just\nreturns its argument.\n(rep 'a) -> a\nAnd finally, when you use a list as the second argument to tag,\ncalling rep on the resulting object will return the identical\nlist.\n(let x '(a b c)\n(is (rep (tag 'foo x)) x))  -> t\nSince Arc has assignment, this means users could destructively\nmodify the representations of objects.  This would probably be\na stupid thing to do, but you never know.  There is no purely\nlogical reason to forbid it, so I don't.As far as I can tell, this is all you need in the core to make\nnew types work.  If you want to overload existing operators to\ndo the right thing when given your new type, you don't need\nanything new in the core.  As long as you have lexical scope,\nyou can just wrap a new definition of the operator around\nthe old one.  So if you want to modify print to display objects\nof your new type foo in a special way,\nyou write something like this:\n(let orig print\n(def print (x str)\n(if (is (type x) 'foo)\n...new code...\n(orig x str))))\nBy exposing a couple of eval's subroutines, I've managed to\navoid making even macros part of the core. Here's my current\ndefinition of macros:\n(def macex (op args)\n(apply (rep op) args idfn))(let orig evexpr\n(def evexpr (op args env cont)\n(if (is (type op) 'mac)\n(eval (macex op args) env cont)\n(orig op args env cont))))(let orig expand=\n(def expand= (place val env)\n(eval (car place)\nenv\n(fn (op)\n(if (is (type op) 'mac)\n(expand= (macex op (cdr place)) val env)\n(orig place val env))))))\nThe two functions evexpr and expand= are the ones that evaluate\nexpressions and generate the expansions of assignments respectively.\nA macro is just a function with the type mac attached to it.\nHere is the definition of def, for example:\n(= def (tag 'mac\n(fn (name parms . body)\n(list '=\nname\n(cons 'fn (cons parms body))))))\nand here is mac, the Arc equivalent of defmacro:\n(= mac (tag 'mac\n(fn (name parms . body)\n(list '=\nname\n(list 'tag\n''mac\n(cons 'fn (cons parms\nbody)))))))\nusing which we can define let as\n(mac let (var val . body)\n(list (cons 'fn (cons (list var) body))\nval))\nBeyond the primitive operators, which by\ndefinition can't be written in the language, the whole of\nthe Arc spec will be written in Arc.  As Abelson and Sussman\nsay, programs must be written for people to read, and only\nincidentally for machines to execute.  So if a language is any\ngood, source code ought to be a better way to convey ideas\nthan English prose. [2]One consequence of this approach is that you could be\ndesigning features (or bugs) without even knowing it.\nIf you present a chunk of code and say, this is the language\ndefinition, then it may, like any program, do\n(and in this case, mean) things you didn't intend.I don't think we should be alarmed by this.  It's true in\nmath too.  When some mathematician describes a class of\nthings, he doesn't have to know all its properties to know\nwhether it will be a useful class of things to talk about.\nLikewise, I think if we design a language whose specification\nis a program that looks right-- a program that's short\nand free of kludges-- then it's likely to be\ngood language, even if we're not 100% sure what it does.I don't pretend to know all the consequences of the Arc\nspec I'm writing, any more than McCarthy knew all the consequences of\nhis original definition of Lisp.  But at least, if the behavior\nof the primitive\noperators is fully specified, it will be unambiguous.\nThis is certainly not true of Common Lisp.\nWhat happens when a Common Lisp macro returns a list whose car is\na function?  (Not the name of a function, mind you, but an actual\nfunction.)  What happens is what you'd expect, in every\nimplementation I've used.  But the spec doesn't say\nanything about this.  And as for the loop macro, the\nANSI standard is barely adequate as a tutorial, let alone as a\ndefinition.\nSpeaking of which, I suspect another advantage of\ngiving code as the spec is that it keeps you honest.\nIf you could see the code that would be required to\ndefine loop, it would be obvious that something was wrong\nbecause it would be so big and complex.\nIf everyone had to walk around naked we'd probably all be in\nbetter shape. Likewise, if language definitions were open\nsource like their implementations, languages would probably\nbe cleaner.I believe that the three new type operators, together with the\ntechnique of wrapping functions, give us something more general\nthan what people usually mean by \"object-oriented programming\".\nWe can wrap a function in code that is \"specialized\" for any\nproperty of the arguments, not merely whether they are of\ncertain types, or unions of types (which what a superclass is).If you wanted to define a more specific form of overloading\ntied to inheritance, I don't think it would be that hard.\nThe important thing at this point is, it's not something you\nhave to think about in the core of the language.  If you want\nto define an object-oriented language (whatever you mean by\nthat), it looks as if you don't need anything more in the core\nthan the three type primitives and the technique of wrapping\nearlier definitions of functions with new ones.It was a great relief when I realized that using the axiomatic\napproach would give me a legitimate excuse for not cluttering\nup the core of Arc with object-orientedness.  In the back of\nmy mind I worried that perhaps Arc ought to be one of those\nmodern languages where \"everything is an object,\" or that is\n\"objects all the way down.\" To tell the truth, I didn't worry about\nthis very much, but there seemed, say, a 1% chance that this\nwould be something I'd have to do.If anyone grumbles that Arc doesn't have enough object-orientedness\nin it, I can plead the stern demands of axiomatization.  Sorry,\nbut I was constrained to put the minimal possible functionality\nin the core.  Of course, my personal guess is that this minimal functionality\nis all you actually want most of the time...I'm fairly confident now I've dealt with this problem.  In Arc,\n\"everything is an object.\"  But an object is just anything with a type.\nYou can ask what the type of an object is, and you can\nredefine any operator to do something special when given objects\nof certain types.\nSo if I want to build some elaborate system for\noverloading functions based on the types of arguments, I\ncan do it as a library.  Somehow, though, I think I may never\nget around to it.Another thing I've been working on is errors.  As with operators,\nI want to recognize as few as possible.  So this exercise will\nend up showing me what the minimal set of errors has to be,\nas well as the minimal set of primitive operators.Ditto for types.  So far the only primitive types are symbols,\nconses, and functions.  I'm going to have to add streams, but\nbeyond that I may not have to add many.  Numeric types are\nall going to be defined in terms of lists.  I'm not sure whether\nto add a bit type, or just use lists of symbols.I may be able to avoid having\na distinct character type, and have the Arc version of read-char\njust return one-letter symbols.  I admit that is a weird sounding\nidea, but so far I can't think of any reason not to.One thing about this whole enterprise, though, it's surprising.\nI'm constantly finding either that something I wanted to do is\neither much harder or much easier than I expected.  To me that\nis a good sign, because it means I'm on comparatively unexplored\nterritory.But of course things could go disastrously wrong at any moment.\nI still have a lot of work to do to finish the Arc spec.\nIn the meantime, anyone who is dismayed that it seems to be taking\nso long for Arc to arrive might want to consider how to implement\noptional parameters outside the language core, while still doing\nthe right thing, whatever that is, about continuations during\nthe evaluation of the default forms-- which is what I was working\non at the moment I stopped to write this talk.  I think I can do\nthis, but I have to figure out what I'm trying to do before I can\nfigure out whether or not it's possible.  That's what cooking\nup a language spec feels like.Notes[1] Someone else already turns out to have made an identical\nor almost identical proposal for tag, type, and rep.  I think\nit was Jonathan Rees.[2] At the conference, John McCarthy pointed out that a\nfunction to invert a matrix might be better described by\nwriting \"inverts a matrix\" than by giving the source."},{"title":"Spam is Different","text":"August 2002(I wrote this partly for computer people, to explain why spam doesn't\nhave to be protected as free speech, and partly for direct marketers, a\nfew of whom aren't yet quite clear about the difference between email\nand other forms of advertising.)Catalog companies send catalogs to potential new customers.  Spammers\ndo the same thing with email.  What's the difference?  Why is it\nok to send unsolicited catalogs, and not ok to send unsolicited emails?Some people say the difference with spam is that the cost of email\nis shared between the sender and the recipient.  The problem with\nspam, this argument goes, is that it's like sending a letter postage\ndue.I don't think this is the real problem. If spammers did reimburse\nyou the cost of the resources they used, would spam stop\nbothering you?I think the reason spam is unethical is that it disrupts your life.\nThere are many different ways of reaching you with a message,\nfrom printing it on a billboard you might see, to calling you on\nthe phone.  Email is among the most intrusive, perhaps second only\nto telemarketing.  The problem is, email is also very cheap.  So\nit's not only more intrusive than getting a catalog in the mail,\nbut you also tend to get far more of it.A lot of us depend on email now, and spam is a source of constant,\nannoying interruptions:\n1. Catalogs are so expensive to print and mail that catalog companies\ndon't send them indiscriminately.  Spam is\nso cheap to send that\nthere is pretty much no limit on the amount of it that you could\nget.2. Catalogs sit in a heap of the day's mail till you go and sort\nthrough it.  Spam arrives as an interruption, mixed in with your\nongoing conversations, at random times all through the day.  If\nyou depend on email for your work, spam interrupts your work.3. Catalogs are often pleasing-- carefully designed, expensively\nproduced, often full of things you covet.  Spams are cheap, sleazy\nmessages offering things that you not only don't want, but often\nwould prefer not to know existed.\nSome forms of direct marketing are\nbearable or even pleasing, and are allowed to continue.  Others,\nlike junk faxes or telemarketing with recorded messages, cause such\ninconvenience to the recipient that they end up being banned.Whatever the spammers may say about their free speech rights, free\nspeech has always taken a back seat to freedom from unreasonable\nannoyance.  Free speech doesn't give you the right to follow someone\naround, shouting at them.  When it inconveniences people beyond\na certain point, speech is no longer protected.So if you are bothered by spam, you don't have to go looking for\nan economic argument to explain why it's wrong.  The fact that\nit disrupts your life is enough.  I know people who get hundreds\nof spams per day.  At that point, without some kind of\nfiltering\nsoftware, email becomes practically unusable.I predict that as the\nvolume\nof spam grows, there will be increasing\nlegal and moral strictures against it.  Already I think that most\nlegitimate direct marketers realize that there is a difference\nbetween sending catalogs to potential new customers, and sending\nemail.There is a class of spammers, running what they call \"opt-in\"\nlists, who will try to convince you otherwise.  They claim that\nthey only send email to people who have asked to receive it.  In\nfact, few to none of the people on their lists have consciously\nasked to receive spam.  More likely, they imprudently typed their\naddress into some Web site (perhaps to register for a contest or to send\nsomeone an electronic greeting card)\nwithout reading the fine print saying that their email address would be used by\nspammers.  Others may have had their address typed in for them by\n\"affiliates\" of the list manager, whose official story is that\nthey are unaware that this takes place.Opt-in spammers will claim that their lists must be clean, because\nthe mail they send gives the recipient a way to \"unsubscribe\".  (I\nput that in quotes because the odds are the recipient never did\nknowingly subscribe.)  They must want to get this email if they\ndon't unsubscribe, right?Well, no: the standard advice about how to deal with spam is never\nto click on unsubscribe links, because that tells the more unscrupulous\nspammers that you are a live target who actually read the mail,\nand you'll just get more spam than ever.  Naturally, the opt-in\nspammers know this.  They know they can count on the recipients\nnot actually asking to be taken off their lists.  If they did, then\n(without replenishment from whatever dubious sources) their lists\nwould shrink down to nothing overnight.I can't imagine any external source of email addresses that\nit would be ethical to send unsolicited email to.  All along the\nspectrum of spammers, from the true bottom-feeders who hijack open\nrelays to send porn spams, to the so-called \"opt-in\" list managers,\nunsolicited email is unwelcome to nearly all its recipients--\nat best an annoying interruption, and at worst a blight that makes\nemail unusable.One more thought experiment.  Suppose instead of getting a couple\nprint catalogs a day, you got a hundred.  Suppose that they were\nhanded to you in person by couriers who arrived at random times\nall through the day.  And finally suppose they were all just ugly\nphotocopied sheets advertising pornography, diet drugs, and mortgages.If this was how print catalogs worked, they'd probably already be\nillegal by now.  What saves print catalogs, ironically, is their\nown cost.  There are plenty of companies that would send a courier\nto interrupt you with an offer to refinance your mortgage if they\ncould afford to (the same ones that now send you spam),  but the\nresponse rate wouldn't justify the cost.Ultimately, it's the low cost of spam that's the root of the problem.\nWhile it's annoying to get a spam, the real problem is that you don't\nget just one, but hundreds or thousands.  Being stung by a bee is\npainful, but being stung by a swarm of bees is a problem of a\ndifferent magnitude.  And, like bees, spam intrinsically comes in\nlarge quantities.That's the main reason it's unethical (and will one day I hope be\nillegal) to send unsolicited mass email.  Like telemarketing with\nrecorded messages, it's so cheap that if one company can do it,\nten thousand can, and email just stops working.Related:"},{"title":"Startup FAQ","text":"Where do you find co-founders?Most successful startups have more than one founder, and usually the\nfounders seem to have been friends for at least a year before starting\nthe company.  The best way to meet co-founders is to go to school with\nthem, so recent grads have a big advantage there.  You can also meet\nco-founders at work, but be careful not to violate whatever noncompete\nyou signed.  In the old days, co-founders often met through user groups, but\nthis seems less common now.How can someone start a startup if they have a family to support?The best plan might be to start a consulting business that you can\ngradually morph into a startup.  This way you always have\na source of income.  See How to\nFund a Startup, especially the section labelled \"Consulting.\"Do you know of any good books about startups?The how-to type of books are generally wretched.\nMany are downright mistaken.The best source of information about startups is probably not\nbusiness books, but histories of\nparticular startups and industries.  The most famous is Tracy\nKidder's Soul of a New Machine, but there are many\ngood books of this type.  I particularly liked Sorensen's\nMy Forty Years with Ford.The one book we encourage startup founders to read is Dale Carnegie's\nHow to Win Friends and Influence People.  It's critically\nimportant for anyone in business.  Try to get a used copy printed\nbefore the 1960s; after Carnegie died, the book continued to be\n\"updated\" by a committee, and the changes were not for the better.\nI'd also recommend Franklin's Autobiography.I have multiple startup ideas.  How do I decide which to work on?Work on the one that will cause the most immediate, concrete improvement\nin users' lives.  Don't worry too much at first about competitors,\nor how users will find out about it, or how to make money.  But don't\nwork on something that's going to take ten years, either.\n(In technology, ten years rounds up to never.)Google is a good example.  Everyone needs Web search, and the\nfounders probably had something that significantly improved their own\nability to find stuff online within the first couple months. And\nonce something starts to work (a) it's enormously encouraging, and\n(b) it's much clearer what direction to take it in.How much should a startup worry about being sued for patent\ninfringement?There are two kinds of patent suits:1. Random people suing you in the hope of getting money.2. Competitors suing you in order to destroy you.Until you're successful, you\nwon't have to worry about the first type. And once you are successful,\nyou'll inevitably have a lot of them to deal with, valid or not.\nSo fatalism is the right plan for type 1 suits.How much you\nshould worry about type 2 suits depends on what kind of business\nyou're in. You probably have to worry more about it in hardware\nthan in software. In software such suits are rare, so far.So if you're doing software, I'd try to build something people want,\nand then hope\nfor the best. The best, in this case, being that you get big enough\nthat you have to worry about type 1 suits.In software, patent suits are rarely to never the deciding factor in whether\na startup succeeds or not.  Founders should probably spend 100x as\nmuch time worrying about building something users won't want, because\nthat kills 100x more startups than patent problems.See Are Software Patents Evil? for\nmore."},{"title":"Startup = Growth","text":"September 2012A startup is a company designed to grow fast.  Being newly founded\ndoes not in itself make a company a startup.  Nor is it necessary\nfor a startup to work on technology, or take venture funding, or\nhave some sort of \"exit.\"  The only essential thing is growth.\nEverything else we associate with startups follows from growth.If you want to start one it's important to understand that. Startups\nare so hard that you can't be pointed off to the side and hope to\nsucceed.  You have to know that growth is what you're after.  The\ngood news is, if you get growth, everything else tends to fall into\nplace.  Which means you can use growth like a compass to make almost\nevery decision you face.RedwoodsLet's start with a distinction that should be obvious but is often\noverlooked: not every newly founded company is a startup.  Millions\nof companies are started every year in the US.  Only a tiny fraction\nare startups.  Most are service businesses—restaurants, barbershops,\nplumbers, and so on.  These are not startups, except in a few unusual\ncases.  A barbershop isn't designed to grow fast.  Whereas a search\nengine, for example, is.When I say startups are designed to grow fast, I mean it in two\nsenses.  Partly I mean designed in the sense of intended, because\nmost startups fail.  But I also mean startups are different by\nnature, in the same way a redwood seedling has a different destiny\nfrom a bean sprout.That difference is why there's a distinct word, \"startup,\" for\ncompanies designed to grow fast.  If all companies were essentially\nsimilar, but some through luck or the efforts of their founders\nended up growing very fast, we wouldn't need a separate word.  We\ncould just talk about super-successful companies and less successful\nones.  But in fact startups do have a different sort of DNA from\nother businesses.  Google is not just a barbershop whose founders\nwere unusually lucky and hard-working.  Google was different from\nthe beginning.To grow rapidly, you need to make something you can sell to a big\nmarket.  That's the difference between Google and a barbershop.  A\nbarbershop doesn't scale.For a company to grow really big, it must (a) make something lots\nof people want, and (b) reach and serve all those people.  Barbershops\nare doing fine in the (a) department.  Almost everyone needs their\nhair cut.  The problem for a barbershop, as for any retail\nestablishment, is (b).  A barbershop serves customers in person,\nand few will travel far for a haircut.  And even if they did the\nbarbershop couldn't accomodate them.\n[1]Writing software is a great way to solve (b), but you can still end\nup constrained in (a).  If you write software to teach Tibetan to\nHungarian speakers, you'll be able to reach most of the people who\nwant it, but there won't be many of them.   If you make software\nto teach English to Chinese speakers, however, you're in startup\nterritory.Most businesses are tightly constrained in (a) or (b).  The distinctive\nfeature of successful startups is that they're not.IdeasIt might seem that it would always be better to start a startup\nthan an ordinary business.  If you're going to start a company, why\nnot start the type with the most potential?  The catch is that this\nis a (fairly) efficient market.   If you write software to teach\nTibetan to Hungarians, you won't have much competition.  If you\nwrite software to teach English to Chinese speakers, you'll face\nferocious competition, precisely because that's such a larger prize.\n[2]The constraints that limit ordinary companies also protect them.\nThat's the tradeoff.  If you start a barbershop, you only have to\ncompete with other local barbers.  If you start a search engine you\nhave to compete with the whole world.The most important thing that the constraints on a normal business\nprotect it from is not competition, however, but the difficulty of\ncoming up with new ideas.  If you open a bar in a particular\nneighborhood, as well as limiting your potential and protecting you\nfrom competitors, that geographic constraint also helps define your\ncompany.  Bar + neighborhood is a sufficient idea for a small\nbusiness.  Similarly for companies constrained in (a).  Your niche\nboth protects and defines you.Whereas if you want to start a startup, you're probably going to\nhave to think of something fairly novel.  A startup has to make\nsomething it can deliver to a large market, and ideas of that type\nare so valuable that all the obvious ones are already taken.That space of ideas has been so thoroughly picked over that a startup\ngenerally has to work on something everyone else has overlooked.\nI was going to write that one has to make a conscious effort to\nfind ideas everyone else has overlooked.  But that's not how most\nstartups get started.  Usually successful startups happen because\nthe founders are sufficiently different from other people that ideas\nfew others can see seem obvious to them.  Perhaps later they step\nback and notice they've found an idea in everyone else's blind spot,\nand from that point make a deliberate effort to stay there.\n[3]\nBut at the moment when successful startups get started, much of the\ninnovation is unconscious.What's different about successful founders is that they can see\ndifferent problems.  It's a particularly good combination both to\nbe good at technology and to face problems that can be solved by\nit, because technology changes so rapidly that formerly bad ideas\noften become good without anyone noticing.  Steve Wozniak's problem\nwas that he wanted his own computer.  That was an unusual problem\nto have in 1975.  But technological change was about to make it a\nmuch more common one.  Because he not only wanted a computer but\nknew how to build them, Wozniak was able to make himself one.  And\nthe problem he solved for himself became one that Apple solved for\nmillions of people in the coming years.  But by the time it was\nobvious to ordinary people that this was a big market, Apple was\nalready established.Google has similar origins.  Larry Page and Sergey Brin wanted to\nsearch the web.  But unlike most people they had the technical\nexpertise both to notice that existing search engines were not as\ngood as they could be, and to know how to improve them.  Over the\nnext few years their problem became everyone's problem, as the web\ngrew to a size where you didn't have to be a picky search expert\nto notice the old algorithms weren't good enough.  But as happened\nwith Apple, by the time everyone else realized how important search\nwas, Google was entrenched.That's one connection between startup ideas and technology.  Rapid\nchange in one area uncovers big, soluble problems in other areas.\nSometimes the changes are advances, and what they change is solubility.\nThat was the kind of change that yielded Apple; advances in chip\ntechnology finally let Steve Wozniak design a computer he could\nafford.  But in Google's case the most important change was the\ngrowth of the web. What changed there was not solubility but bigness.The other connection between startups and technology is that startups\ncreate new ways of doing things, and new ways of doing things are,\nin the broader sense of the word, new technology.\nWhen a startup both begins with an\nidea exposed by technological change and makes a product consisting\nof technology in the narrower sense (what used to be called \"high\ntechnology\"), it's easy to conflate the two.  But the two connections\nare distinct and in principle one could start a startup that was\nneither driven by technological change, nor whose product consisted\nof technology except in the broader sense.\n[4]RateHow fast does a company have to grow to be considered a startup?\nThere's no precise answer to that.  \"Startup\" is a pole, not a\nthreshold.  Starting one is at first no more than a declaration of\none's ambitions.  You're committing not just to starting a company,\nbut to starting a fast growing one, and you're thus committing to\nsearch for one of the rare ideas of that type.  But at first you\nhave no more than commitment.  Starting a startup is like being an\nactor in that respect.  \"Actor\" too is a pole rather than a threshold.\nAt the beginning of his career, an actor is a waiter who goes to\nauditions.  Getting work makes him a successful actor, but he doesn't\nonly become an actor when he's successful.So the real question is not what growth rate makes a company a\nstartup, but what growth rate successful startups tend to have.\nFor founders that's more than a theoretical question, because it's\nequivalent to asking if they're on the right path.The growth of a successful startup usually has three phases:\nThere's an initial period of slow or no growth while the startup\ntries to figure out what it's doing. As the startup figures out how to make something lots of people\nwant and how to reach those people, there's a period of rapid\ngrowth. Eventually a successful startup will grow into a big company.\nGrowth will slow, partly due to internal limits and partly because\nthe company is starting to bump up against the limits of the\nmarkets it serves.\n[5]\nTogether these three phases produce an S-curve.  The phase whose\ngrowth defines the startup is the second one, the ascent.  Its\nlength and slope determine how big the company will be.The slope is the company's growth rate.  If there's one number every\nfounder should always know, it's the company's growth rate.  That's\nthe measure of a startup.  If you don't know that number, you don't\neven know if you're doing well or badly.When I first meet founders and ask what their growth rate is,\nsometimes they tell me \"we get about a hundred new customers a\nmonth.\"  That's not a rate.  What matters is not the absolute number\nof new customers, but the ratio of new customers to existing ones.\nIf you're really getting a constant number of new customers every\nmonth, you're in trouble, because that means your growth rate is\ndecreasing.During Y Combinator we measure growth rate per week, partly because\nthere is so little time before Demo Day, and partly because startups\nearly on need frequent feedback from their users to tweak what\nthey're doing.\n[6]A good growth rate during YC is 5-7% a week.  If you can hit 10% a\nweek you're doing exceptionally well.  If you can only manage 1%,\nit's a sign you haven't yet figured out what you're doing.The best thing to measure the growth rate of is revenue.  The next\nbest, for startups that aren't charging initially, is active users.\nThat's a reasonable proxy for revenue growth because whenever the\nstartup does start trying to make money, their revenues will probably\nbe a constant multiple of active users.\n[7]CompassWe usually advise startups to pick a growth rate they think they\ncan hit, and then just try to hit it every week.  The key word here\nis \"just.\" If they decide to grow at 7% a week and they hit that\nnumber, they're successful for that week.  There's nothing more\nthey need to do.  But if they don't hit it, they've failed in the\nonly thing that mattered, and should be correspondingly alarmed.Programmers will recognize what we're doing here.  We're turning\nstarting a startup into an optimization problem.  And anyone who\nhas tried optimizing code knows how wonderfully effective that sort\nof narrow focus can be.  Optimizing code means taking an existing\nprogram and changing it to use less of something, usually time or\nmemory.  You don't have to think about what the program should do,\njust make it faster.  For most programmers this is very satisfying\nwork.  The narrow focus makes it a sort of puzzle, and you're\ngenerally surprised how fast you can solve it.Focusing on hitting a growth rate reduces the otherwise bewilderingly\nmultifarious problem of starting a startup to a single problem.\nYou can use that target growth rate to make all your decisions for\nyou; anything that gets you the growth you need is ipso facto right.\nShould you spend two days at a conference?  Should you hire another\nprogrammer?  Should you focus more on marketing?  Should you spend\ntime courting some big customer?  Should you add x feature? Whatever\ngets you your target growth rate.\n[8]Judging yourself by weekly growth doesn't mean you can look no more\nthan a week ahead.  Once you experience the pain of missing your\ntarget one week (it was the only thing that mattered, and you failed\nat it), you become interested in anything that could spare you such\npain in the future.  So you'll be willing for example to hire another\nprogrammer, who won't contribute to this week's growth but perhaps\nin a month will have implemented some new feature that will get you\nmore users.   But only if (a) the distraction of hiring someone\nwon't make you miss your numbers in the short term, and (b) you're\nsufficiently worried about whether you can keep hitting your numbers\nwithout hiring someone new.It's not that you don't think about the future, just that you think\nabout it no more than necessary.In theory this sort of hill-climbing could get a startup into\ntrouble.  They could end up on a local maximum.  But in practice\nthat never happens.  Having to hit a growth number every week forces\nfounders to act, and acting versus not acting is the high bit of\nsucceeding.  Nine times out of ten, sitting around strategizing is\njust a form of procrastination.  Whereas founders' intuitions about\nwhich hill to climb are usually better than they realize.  Plus the\nmaxima in the space of startup ideas are not spiky and isolated.\nMost fairly good ideas are adjacent to even better ones.The fascinating thing about optimizing for growth is that it can\nactually discover startup ideas.  You can use the need for growth\nas a form of evolutionary pressure.  If you start out with some\ninitial plan and modify it as necessary to keep hitting, say, 10%\nweekly growth, you may end up with a quite different company than\nyou meant to start.  But anything that grows consistently at 10% a\nweek is almost certainly a better idea than you started with.There's a parallel here to small businesses.  Just as the constraint\nof being located in a particular neighborhood helps define a bar,\nthe constraint of growing at a certain rate can help define a\nstartup.You'll generally do best to follow that constraint wherever it leads\nrather than being influenced by some initial vision, just as a\nscientist is better off following the truth wherever it leads rather\nthan being influenced by what he wishes were the case.  When Richard\nFeynman said that the imagination of nature was greater than the\nimagination of man, he meant that if you just keep following the\ntruth you'll discover cooler things than you could ever have made\nup. For startups, growth is a constraint much like truth. Every\nsuccessful startup is at least partly a product of the imagination\nof growth.\n[9]ValueIt's hard to find something that grows consistently at several\npercent a week, but if you do you may have found something surprisingly\nvaluable.  If we project forward we see why.\nweeklyyearly\n1%1.7x\n2%2.8x\n5%12.6x\n7%33.7x\n10%142.0x\nA company that grows at 1% a week will grow 1.7x a year, whereas a\ncompany that grows at 5% a week will grow 12.6x.  A company making\n$1000 a month (a typical number early in YC) and growing at 1% a\nweek will 4 years later be making $7900 a month, which is less than\na good programmer makes in salary in Silicon Valley.  A startup\nthat grows at 5% a week will in 4 years be making $25 million a\nmonth.\n[10]Our ancestors must rarely have encountered cases of exponential\ngrowth, because our intutitions are no guide here.  What happens\nto fast growing startups tends to surprise even the founders.Small variations in growth rate produce qualitatively different\noutcomes.  That's why there's a separate word for startups, and why\nstartups do things that ordinary companies don't, like raising money\nand getting acquired.  And, strangely enough, it's also why they\nfail so frequently.Considering how valuable a successful startup can become, anyone\nfamiliar with the concept of expected value would be surprised if\nthe failure rate weren't high.  If a successful startup could make\na founder $100 million, then even if the chance of succeeding were\nonly 1%, the expected value of starting one would be $1 million.\nAnd the probability of a group of sufficiently smart and determined\nfounders succeeding on that scale might be significantly over 1%.\nFor the right people—e.g. the young Bill Gates—the probability\nmight be 20% or even 50%.  So it's not surprising that so many want\nto take a shot at it.  In an efficient market, the number of failed\nstartups should be proportionate to the size of the successes.  And\nsince the latter is huge the former should be too.\n[11]What this means is that at any given time, the great majority of\nstartups will be working on something that's never going to go\nanywhere, and yet glorifying their doomed efforts with the grandiose\ntitle of \"startup.\"This doesn't bother me.  It's the same with other high-beta vocations,\nlike being an actor or a novelist.  I've long since gotten used to\nit.  But it seems to bother a lot of people, particularly those\nwho've started ordinary businesses.  Many are annoyed that these\nso-called startups get all the attention, when hardly any of them\nwill amount to anything.If they stepped back and looked at the whole picture they might be\nless indignant.  The mistake they're making is that by basing their\nopinions on anecdotal evidence they're implicitly judging by the\nmedian rather than the average.  If you judge by the median startup,\nthe whole concept of a startup seems like a fraud.  You have to\ninvent a bubble to explain why founders want to start them or\ninvestors want to fund them.  But it's a mistake to use the median\nin a domain with so much variation.  If you look at the average\noutcome rather than the median, you can understand why investors\nlike them, and why, if they aren't median people, it's a rational\nchoice for founders to start them.DealsWhy do investors like startups so much?  Why are they so hot to\ninvest in photo-sharing apps, rather than solid money-making\nbusinesses?  Not only for the obvious reason.The test of any investment is the ratio of return to risk.  Startups\npass that test because although they're appallingly risky, the\nreturns when they do succeed are so high.  But that's not the only\nreason investors like startups.  An ordinary slower-growing business\nmight have just as good a ratio of return to risk, if both were\nlower.  So why are VCs interested only in high-growth companies?\nThe reason is that they get paid by getting their capital back,\nideally after the startup IPOs, or failing that when it's acquired.The other way to get returns from an investment is in the form of\ndividends.  Why isn't there a parallel VC industry that invests in\nordinary companies in return for a percentage of their profits?\nBecause it's too easy for people who control a private company to\nfunnel its revenues to themselves (e.g. by buying overpriced\ncomponents from a supplier they control) while making it look like\nthe company is making little profit.  Anyone who invested in private\ncompanies in return for dividends would have to pay close attention\nto their books.The reason VCs like to invest in startups is not simply the returns,\nbut also because such investments are so easy to oversee.  The\nfounders can't enrich themselves without also enriching the investors.\n[12]Why do founders want to take the VCs' money?  Growth, again.  The\nconstraint between good ideas and growth operates in both directions.\nIt's not merely that you need a scalable idea to grow.  If you have\nsuch an idea and don't grow fast enough, competitors will.  Growing\ntoo slowly is particularly dangerous in a business with network\neffects, which the best startups usually have to some degree.Almost every company needs some amount of funding to get started.\nBut startups often raise money even when they are or could be\nprofitable.  It might seem foolish to sell stock in a profitable\ncompany for less than you think it will later be worth, but it's\nno more foolish than buying insurance.  Fundamentally that's how\nthe most successful startups view fundraising.  They could grow the\ncompany on its own revenues, but the extra money and help supplied\nby VCs will let them grow even faster.  Raising money lets you\nchoose your growth rate.Money to grow faster is always at the command of the most successful\nstartups, because the VCs need them more than they need the VCs.\nA profitable startup could if it wanted just grow on its own revenues.\nGrowing slower might be slightly dangerous, but chances are it\nwouldn't kill them.  Whereas VCs need to invest in startups, and\nin particular the most successful startups, or they'll be out of\nbusiness.  Which means that any sufficiently promising startup will\nbe offered money on terms they'd be crazy to refuse.  And yet because\nof the scale of the successes in the startup business, VCs can still\nmake money from such investments.  You'd have to be crazy to believe\nyour company was going to become as valuable as a high growth rate\ncan make it, but some do.Pretty much every successful startup will get acquisition offers\ntoo.  Why?  What is it about startups that makes other companies\nwant to buy them?\n[13]Fundamentally the same thing that makes everyone else want the stock\nof successful startups: a rapidly growing company is valuable.  It's\na good thing eBay bought Paypal, for example, because Paypal is now\nresponsible for 43% of their sales and probably more of their growth.But acquirers have an additional reason to want startups.  A rapidly\ngrowing company is not merely valuable, but dangerous.  If it keeps\nexpanding, it might expand into the acquirer's own territory.  Most\nproduct acquisitions have some component of fear.  Even if an\nacquirer isn't threatened by the startup itself, they might be\nalarmed at the thought of what a competitor could do with it.  And\nbecause startups are in this sense doubly valuable to acquirers,\nacquirers will often pay more than an ordinary investor would.\n[14]UnderstandThe combination of founders, investors, and acquirers forms a natural\necosystem.  It works so well that those who don't understand it are\ndriven to invent conspiracy theories to explain how neatly things\nsometimes turn out.  Just as our ancestors did to explain the\napparently too neat workings of the natural world.  But there is\nno secret cabal making it all work.If you start from the mistaken assumption that Instagram was\nworthless, you have to invent a secret boss to force Mark Zuckerberg\nto buy it.  To anyone who knows Mark Zuckerberg that is the reductio\nad absurdum of the initial assumption.  The reason he bought Instagram\nwas that it was valuable and dangerous, and what made it so was\ngrowth.If you want to understand startups, understand growth.  Growth\ndrives everything in this world.  Growth is why startups usually\nwork on technology—because ideas for fast growing companies are\nso rare that the best way to find new ones is to discover those\nrecently made viable by change, and technology is the best source\nof rapid change.  Growth is why it's a rational choice economically\nfor so many founders to try starting a startup: growth makes the\nsuccessful companies so valuable that the expected value is high\neven though the risk is too.  Growth is why VCs want to invest in\nstartups: not just because the returns are high but also because\ngenerating returns from capital gains is easier to manage than\ngenerating returns from dividends.  Growth explains why the most\nsuccessful startups take VC money even if they don't need to: it\nlets them choose their growth rate.  And growth explains why\nsuccessful startups almost invariably get acquisition offers.  To\nacquirers a fast-growing company is not merely valuable but dangerous\ntoo.It's not just that if you want to succeed in some domain, you have\nto understand the forces driving it.  Understanding growth is what\nstarting a startup consists of.  What you're really doing (and\nto the dismay of some observers, all you're really doing) when you\nstart a startup is committing to solve a harder type of problem\nthan ordinary businesses do.  You're committing to search for one\nof the rare ideas that generates rapid growth.  Because these ideas\nare so valuable, finding one is hard.  The startup is the embodiment\nof your discoveries so far.  Starting a startup is thus very much\nlike deciding to be a research scientist: you're not committing to\nsolve any specific problem; you don't know for sure which problems\nare soluble; but you're committing to try to discover something no\none knew before.  A startup founder is in effect an economic research\nscientist.  Most don't discover anything that remarkable, but some\ndiscover relativity.Notes[1]\nStrictly speaking it's not lots of customers you need but a big\nmarket, meaning a high product of number of customers times how\nmuch they'll pay.  But it's dangerous to have too few customers\neven if they pay a lot, or the power that individual customers have\nover you could turn you into a de facto consulting firm.  So whatever\nmarket you're in, you'll usually do best to err on the side of\nmaking the broadest type of product for it.[2]\nOne year at Startup School David Heinemeier Hansson encouraged\nprogrammers who wanted to start businesses to use a restaurant as\na model.  What he meant, I believe, is that it's fine to start\nsoftware companies constrained in (a) in the same way a restaurant\nis constrained in (b).  I agree.  Most people should not try to\nstart startups.[3]\nThat sort of stepping back is one of the things we focus on at\nY Combinator.  It's common for founders to have discovered something\nintuitively without understanding all its implications.  That's\nprobably true of the biggest discoveries in any field.[4]\nI got it wrong in \"How to Make Wealth\" when I said that a\nstartup was a small company that takes on a hard technical\nproblem.  That is the most common recipe but not the only one.[5]\nIn principle companies aren't limited by the size of the markets\nthey serve, because they could just expand into new markets.  But\nthere seem to be limits on the ability of big companies to do that.\nWhich means the slowdown that comes from bumping up against the\nlimits of one's markets is ultimately just another way in which\ninternal limits are expressed.It may be that some of these limits could be overcome by changing\nthe shape of the organization—specifically by sharding it.[6]\nThis is, obviously, only for startups that have already launched\nor can launch during YC.  A startup building a new database will\nprobably not do that.  On the other hand, launching something small\nand then using growth rate as evolutionary pressure is such a\nvaluable technique that any company that could start this way\nprobably should.[7]\nIf the startup is taking the Facebook/Twitter route and building\nsomething they hope will be very popular but from which they don't\nyet have a definite plan to make money, the growth rate has to be\nhigher, even though it's a proxy for revenue growth, because such\ncompanies need huge numbers of users to succeed at all.Beware too of the edge case where something spreads rapidly but the\nchurn is high as well, so that you have good net growth till you run\nthrough all the potential users, at which point it suddenly stops.[8]\nWithin YC when we say it's ipso facto right to do whatever gets\nyou growth, it's implicit that this excludes trickery like buying\nusers for more than their lifetime value, counting users as active\nwhen they're really not, bleeding out invites at a regularly\nincreasing rate to manufacture a perfect growth curve, etc.  Even\nif you were able to fool investors with such tricks, you'd ultimately\nbe hurting yourself, because you're throwing off your own compass.[9]\nWhich is why it's such a dangerous mistake to believe that\nsuccessful startups are simply the embodiment of some brilliant\ninitial idea.  What you're looking for initially is not so much a\ngreat idea as an idea that could evolve into a great one.   The\ndanger is that promising ideas are not merely blurry versions of\ngreat ones.  They're often different in kind, because the early\nadopters you evolve the idea upon have different needs from the\nrest of the market.  For example, the idea that evolves into Facebook\nisn't merely a subset of Facebook; the idea that evolves into\nFacebook is a site for Harvard undergrads.[10]\nWhat if a company grew at 1.7x a year for a really long time?\nCould it not grow just as big as any successful startup?  In principle\nyes, of course. If our hypothetical company making $1000 a month\ngrew at 1% a week for 19 years, it would grow as big as a company\ngrowing at 5% a week for 4 years.  But while such trajectories may\nbe common in, say, real estate development, you don't see them much\nin the technology business.  In technology, companies that grow\nslowly tend not to grow as big.[11]\nAny expected value calculation varies from person to person\ndepending on their utility function for money.  I.e. the first\nmillion is worth more to most people than subsequent millions.  How\nmuch more depends on the person.  For founders who are younger or\nmore ambitious the utility function is flatter.  Which is probably\npart of the reason the founders of the most successful startups of\nall tend to be on the young side.[12]\nMore precisely, this is the case in the biggest winners, which\nis where all the returns come from.  A startup founder could pull\nthe same trick of enriching himself at the company's expense by\nselling them overpriced components.  But it wouldn't be worth it\nfor the founders of Google to do that.  Only founders of failing\nstartups would even be tempted, but those are writeoffs from the\nVCs' point of view anyway.[13]\nAcquisitions fall into two categories: those where the acquirer\nwants the business, and those where the acquirer just wants the\nemployees.  The latter type is sometimes called an HR acquisition.\nThough nominally acquisitions and sometimes on a scale that has a\nsignificant effect on the expected value calculation for potential\nfounders, HR acquisitions are viewed by acquirers as more akin to\nhiring bonuses.[14]\nI once explained this to some founders who had recently arrived\nfrom Russia.  They found it novel that if you threatened a company\nthey'd pay a premium for you.  \"In Russia they just kill you,\" they\nsaid, and they were only partly joking.  Economically, the fact\nthat established companies can't simply eliminate new competitors\nmay be one of the most valuable aspects of the rule of law.  And\nso to the extent we see incumbents suppressing competitors via\nregulations or patent suits, we should worry, not because it's a\ndeparture from the rule of law per se but from what the rule of law\nis aiming at.Thanks to Sam Altman, Marc Andreessen, Paul Buchheit, Patrick\nCollison, Jessica Livingston, Geoff Ralston, and Harj Taggar for\nreading drafts of this."},{"title":"Startup Investing Trends","text":"June 2013(This talk was written for an audience of investors.)Y Combinator has now funded 564 startups including the current\nbatch, which has 53.  The total valuation of the 287 that have\nvaluations (either by raising an equity round, getting acquired,\nor dying) is about $11.7 billion, and the 511 prior to the current\nbatch have collectively raised about $1.7 billion.\n[1]As usual those numbers are dominated by a few big winners.  The top\n10 startups account for 8.6 of that 11.7 billion.  But there is a\npeloton of younger startups behind them.  There are about 40 more\nthat have a shot at being really big.Things got a little out of hand last summer when we had 84 companies\nin the batch, so we tightened up our filter to decrease the batch\nsize.\n[2]\nSeveral journalists have tried to interpret that as\nevidence for some macro story they were telling, but the reason had\nnothing to do with any external trend.  The reason was that we\ndiscovered we were using an n² algorithm, and we needed to buy\ntime to fix it.  Fortunately we've come up with several techniques\nfor sharding YC, and the problem now seems to be fixed.  With a new\nmore scaleable model and only 53 companies, the current batch feels\nlike a walk in the park.  I'd guess we can grow another 2 or 3x\nbefore hitting the next bottleneck.\n[3]One consequence of funding such a large number of startups is that\nwe see trends early.  And since fundraising is one of the main\nthings we help startups with, we're in a good position to notice\ntrends in investing.I'm going to take a shot at describing where these trends are\nleading.  Let's start with the most basic question: will the future\nbe better or worse than the past?  Will investors, in the aggregate,\nmake more money or less?I think more.  There are multiple forces at work, some of which\nwill decrease returns, and some of which will increase them.  I\ncan't predict for sure which forces will prevail, but I'll describe\nthem and you can decide for yourself.There are two big forces driving change in startup funding: it's\nbecoming cheaper to start a startup, and startups are becoming a\nmore normal thing to do.When I graduated from college in 1986, there were essentially two\noptions: get a job or go to grad school.  Now there's a third: start\nyour own company.\nThat's a big change.  In principle it was possible to start your\nown company in 1986 too, but it didn't seem like a real possibility.\nIt seemed possible to start a consulting company, or a niche product\ncompany, but it didn't seem possible to start a company that would\nbecome big.\n[4]That kind of change, from 2 paths to 3, is the sort of big social\nshift that only happens once every few generations.  I think we're\nstill at the beginning of this one.  It's hard to predict how big\na deal it will be.  As big a deal as the Industrial Revolution?\nMaybe.  Probably not.  But it will be a big enough deal that it\ntakes almost everyone by surprise, because those big social shifts\nalways do.One thing we can say for sure is that there will be a lot more\nstartups.  The monolithic, hierarchical companies of the mid 20th\ncentury are being replaced by networks\nof smaller companies.  This process is not just something happening\nnow in Silicon Valley.  It started decades ago, and it's happening\nas far afield as the car industry.  It has a long way to run.\n[5]The other big driver of change is that startups are becoming cheaper\nto start.  And in fact the two forces are related: the decreasing\ncost of starting a startup is one of the reasons startups are\nbecoming a more normal thing to do.The fact that startups need less money means founders will increasingly\nhave the upper hand over investors.  You still need just as much\nof their energy and imagination, but they don't need as much of\nyour money.  Because founders have the upper hand, they'll retain\nan increasingly large share of the stock in, and control of, their\ncompanies.  Which means investors will get less stock and less\ncontrol.Does that mean investors will make less money?  Not necessarily,\nbecause there will be more good startups.  The total amount of\ndesirable startup stock available to investors will probably increase,\nbecause the number of desirable startups will probably grow faster\nthan the percentage they sell to investors shrinks.There's a rule of thumb in the VC business that there are about 15\ncompanies a year that will be really successful.  Although a lot\nof investors unconsciously treat this number as if it were some\nsort of cosmological constant, I'm certain it isn't.   There are\nprobably limits on the rate at which technology can develop, but\nthat's not the limiting factor now.  If it were, each successful\nstartup would be founded the month it became possible, and that is\nnot the case. Right now the limiting factor on the number of big\nhits is the number of sufficiently good founders starting companies,\nand that number can and will increase.  There are still a lot of\npeople who'd make great founders who never end up starting a company.\nYou can see that from how randomly some of the most successful\nstartups got started.  So many of the biggest startups almost didn't\nhappen that there must be a lot of equally good startups that\nactually didn't happen.There might be 10x or even 50x more good founders out there.  As\nmore of them go ahead and start startups, those 15 big hits a year\ncould easily become 50 or even 100.\n[6]What about returns, though?  Are we heading for a world in which\nreturns will be pinched by increasingly high valuations?  I think\nthe top firms will actually make more money than they have in the\npast.  High returns don't come from investing at low valuations.\nThey come from investing in the companies that do really well.  So\nif there are more of those to be had each year, the best pickers\nshould have more hits.This means there should be more variability in the VC business.\nThe firms that can recognize and attract the best startups will do\neven better, because there will be more of them to recognize and\nattract.  Whereas the bad firms will get the leftovers, as they do\nnow, and yet pay a higher price for them.Nor do I think it will be a problem that founders keep control of\ntheir companies for longer.  The empirical evidence on that is\nalready clear: investors make more money as founders' bitches than\ntheir bosses.  Though somewhat humiliating, this is actually good\nnews for investors, because it takes less time to serve founders\nthan to micromanage them.What about angels?  I think there is a lot of opportunity there.\nIt used to suck to be an angel investor.  You couldn't get access\nto the best deals, unless you got lucky like Andy Bechtolsheim, and\nwhen you did invest in a startup, VCs might try to strip you of\nyour stock when they arrived later.  Now an angel can go to something\nlike Demo Day or AngelList and have access to the same deals VCs\ndo.  And the days when VCs could wash angels out of the cap table\nare long gone.I think one of the biggest unexploited opportunities in startup\ninvesting right now is angel-sized investments made quickly.  Few\ninvestors understand the cost that raising money from them imposes\non startups.  When the company consists only of the founders,\neverything grinds to a halt during fundraising, which can easily\ntake 6 weeks.  The current high cost of fundraising means there is\nroom for low-cost investors to undercut the rest.  And in this\ncontext, low-cost means deciding quickly.  If there were a reputable\ninvestor who invested $100k on good terms and promised to decide\nyes or no within 24 hours, they'd get access to almost all the best\ndeals, because every good startup would approach them first.  It\nwould be up to them to pick, because every bad startup would approach\nthem first too, but at least they'd see everything.  Whereas if an\ninvestor is notorious for taking a long time to make up their mind\nor negotiating a lot about valuation, founders will save them for\nlast.  And in the case of the most promising startups, which tend\nto have an easy time raising money, last can easily become never.Will the number of big hits grow linearly with the total number of\nnew startups?  Probably not, for two reasons.  One is that the\nscariness of starting a startup in the old days was a pretty effective\nfilter.  Now that the cost of failing is becoming lower, we should\nexpect founders to do it more.  That's not a bad thing.  It's common\nin technology for an innovation that decreases the cost of failure\nto increase the number of failures and yet leave you net ahead.The other reason the number of big hits won't grow proportionately\nto the number of startups is that there will start to be an increasing\nnumber of idea clashes.  Although the finiteness of the number of\ngood ideas is not the reason there are only 15 big hits a year, the\nnumber has to be finite, and the more startups there are, the more\nwe'll see multiple companies doing the same thing at the same time.\nIt will be interesting, in a bad way, if idea clashes become a lot\nmore common.\n[7]Mostly because of the increasing number of early failures, the startup\nbusiness of the future won't simply be the same shape, scaled up.\nWhat used to be an obelisk will become a pyramid.  It will be a\nlittle wider at the top, but a lot wider at the bottom.What does that mean for investors?  One thing it means is that there\nwill be more opportunities for investors at the earliest stage,\nbecause that's where the volume of our imaginary solid is growing\nfastest.  Imagine the obelisk of investors that corresponds to\nthe obelisk of startups.  As it widens out into a pyramid to match\nthe startup pyramid, all the contents are adhering to the top,\nleaving a vacuum at the bottom.That opportunity for investors mostly means an opportunity for new\ninvestors, because the degree of risk an existing investor or firm\nis comfortable taking is one of the hardest things for them to\nchange.  Different types of investors are adapted to different\ndegrees of risk, but each has its specific degree of risk deeply\nimprinted on it, not just in the procedures they follow but in the\npersonalities of the people who work there.I think the biggest danger for VCs, and also the biggest opportunity,\nis at the series A stage.  Or rather, what used to be the series A\nstage before series As turned into de facto series B rounds.Right now, VCs often knowingly invest too much money at the series\nA stage.  They do it because they feel they need to get a big chunk\nof each series A company to compensate for the opportunity cost of\nthe board seat it consumes.  Which means when there is a lot of\ncompetition for a deal, the number that moves is the valuation (and\nthus amount invested) rather than the percentage of the company\nbeing sold.  Which means, especially in the case of more promising\nstartups, that series A investors often make companies take more\nmoney than they want.Some VCs lie and claim the company really needs that much.  Others\nare more candid, and admit their financial models require them to\nown a certain percentage of each company.  But we all know the\namounts being raised in series A rounds are not determined by asking\nwhat would be best for the companies.  They're determined by VCs\nstarting from the amount of the company they want to own, and the\nmarket setting the valuation and thus the amount invested.Like a lot of bad things, this didn't happen intentionally.  The\nVC business backed into it as their initial assumptions gradually\nbecame obsolete.  The traditions and financial models of the VC\nbusiness were established when founders needed investors more.  In\nthose days it was natural for founders to sell VCs a big chunk of\ntheir company in the series A round.  Now founders would prefer to\nsell less, and VCs are digging in their heels because they're not\nsure if they can make money buying less than 20% of each series A\ncompany.The reason I describe this as a danger is that series A investors\nare increasingly at odds with the startups they supposedly serve,\nand that tends to come back to bite you eventually.  The reason I\ndescribe it as an opportunity is that there is now a lot of potential\nenergy built up, as the market has moved away from VCs' traditional\nbusiness model.  Which means the first VC to break ranks and start\nto do series A rounds for as much equity as founders want to sell\n(and with no \"option pool\" that comes only from the founders' shares)\nstands to reap huge benefits.What will happen to the VC business when that happens?  Hell if I\nknow.  But I bet that particular firm will end up ahead.  If one\ntop-tier VC firm started to do series A rounds that started from\nthe amount the company needed to raise and let the percentage\nacquired vary with the market, instead of the other way around,\nthey'd instantly get almost all the best startups.  And that's where\nthe money is.You can't fight market forces forever.  Over the last decade we've\nseen the percentage of the company sold in series A rounds creep\ninexorably downward.  40% used to be common.  Now VCs are fighting\nto hold the line at 20%.  But I am daily waiting for the line to\ncollapse.  It's going to happen.  You may as well anticipate it,\nand look bold.Who knows, maybe VCs will make more money by doing the right thing.\nIt wouldn't be the first time that happened.  Venture capital is a\nbusiness where occasional big successes generate hundredfold returns.\nHow much confidence can you really have in financial models for\nsomething like that anyway?  The\nbig successes only have to get a tiny bit less occasional to\ncompensate for a 2x decrease in the stock sold in series A rounds.If you want to find new opportunities for investing, look for things\nfounders complain about.  Founders are your customers, and the\nthings they complain about are unsatisfied demand.  I've given two\nexamples of things founders complain about most—investors who\ntake too long to make up their minds, and excessive dilution in\nseries A rounds—so those are good places to look now.  But\nthe more general recipe is: do something founders want.Notes[1]\nI realize revenue and not fundraising is the proper test of\nsuccess for a startup.  The reason we quote statistics about\nfundraising is because those are the numbers we have.  We couldn't\ntalk meaningfully about revenues without including the numbers from\nthe most successful startups, and we don't have those.  We often\ndiscuss revenue growth with the earlier stage startups, because\nthat's how we gauge their progress, but when companies reach a\ncertain size it gets presumptuous for a seed investor to do that.In any case, companies' market caps do eventually become a function\nof revenues, and post-money valuations of funding rounds are at\nleast guesses by pros about where those market caps will end up.The reason only 287 have valuations is that the rest have mostly\nraised money on convertible notes, and although convertible notes\noften have valuation caps, a valuation cap is merely an upper bound\non a valuation.[2]\nWe didn't try to accept a particular number.  We have no way\nof doing that even if we wanted to.  We just tried to be significantly\npickier.[3]\nThough you never know with bottlenecks, I'm guessing the next\none will be coordinating efforts among partners.[4]\nI realize starting a company doesn't have to mean starting a\nstartup.  There will be lots of people starting normal companies\ntoo.  But that's not relevant to an audience of investors.Geoff Ralston reports that in Silicon Valley it seemed thinkable\nto start a startup in the mid 1980s.  It would have started there.\nBut I know it didn't to undergraduates on the East Coast.[5]\nThis trend is one of the main causes of the increase in\neconomic inequality in the US since the mid twentieth century.  The\nperson who would in 1950 have been the general manager of the x\ndivision of Megacorp is now the founder of the x company, and owns\nsignificant equity in it.[6]\nIf Congress passes the founder\nvisa in a non-broken form, that alone could in principle get\nus up to 20x, since 95% of the world's population lives outside the\nUS.[7]\nIf idea clashes got bad enough, it could change what it means\nto be a startup.  We currently advise startups mostly to ignore\ncompetitors.  We tell them startups are competitive like running,\nnot like soccer; you don't have to go and steal the ball away from\nthe other team.  But if idea clashes became common enough, maybe\nyou'd start to have to.  That would be unfortunate.Thanks to Sam Altman, Paul Buchheit, Dalton Caldwell,\nPatrick Collison, Jessica\nLivingston, Andrew Mason, Geoff Ralston, and Garry Tan for reading\ndrafts of this."},{"title":"Startups in 13 Sentences","text":"February 2009One of the things I always tell startups is a principle I learned\nfrom Paul Buchheit: it's better to make a few people really happy\nthan to make a lot of people semi-happy.  I was saying recently to\na reporter that if I could only tell startups 10 things, this would\nbe one of them.  Then I thought: what would the other 9 be?When I made the list there turned out to be 13:\n1. Pick good cofounders.Cofounders are for a startup what location is for real estate.  You\ncan change anything about a house except where it is.  In a startup\nyou can change your idea easily, but changing your cofounders is\nhard.\n[1]\nAnd the success of a startup is almost always a function\nof its founders.2. Launch fast.The reason to launch fast is not so much that it's critical to get\nyour product to market early, but that you haven't really started\nworking on it till you've launched.  Launching teaches you what you\nshould have been building.  Till you know that you're wasting your\ntime.  So the main value of whatever you launch with is as a pretext\nfor engaging users.3. Let your idea evolve.This is the second half of launching fast. Launch fast and iterate.\nIt's a big mistake to treat a startup as if it were merely a matter\nof implementing some brilliant initial idea. As in an essay, most\nof the ideas appear in the implementing.4. Understand your users.You can envision the wealth created by a startup as a rectangle,\nwhere one side is the number of users and the other is how much you\nimprove their lives.\n[2]\nThe second dimension is the one you have\nmost control over.  And indeed, the growth in the first will be\ndriven by how well you do in the second.  As in science, the hard\npart is not answering questions but asking them: the hard part is\nseeing something new that users lack. The better you understand\nthem the better the odds of doing that. That's why so many successful\nstartups make something the founders needed.5. Better to make a few users love you than a lot ambivalent.Ideally you want to make large numbers of users love you, but you\ncan't expect to hit that right away.  Initially you have to choose\nbetween satisfying all the needs of a subset of potential users,\nor satisfying a subset of the needs of all potential users.  Take\nthe first. It's easier to expand userwise than satisfactionwise.\nAnd perhaps more importantly, it's harder to lie to yourself.  If\nyou think you're 85% of the way to a great product, how do you know\nit's not 70%?  Or 10%?  Whereas it's easy to know how many users\nyou have.6. Offer surprisingly good customer service.Customers are used to being maltreated.  Most of the companies they\ndeal with are quasi-monopolies that get away with atrocious customer\nservice. Your own ideas about what's possible have been unconsciously\nlowered by such experiences.  Try making your customer service not\nmerely good, but\nsurprisingly good.  Go out of your way to make\npeople happy.  They'll be overwhelmed; you'll see.  In the earliest\nstages of a startup, it pays to offer customer service on a level\nthat wouldn't scale, because it's a way of learning about your\nusers.7. You make what you measure.I learned this one from Joe Kraus.\n[3]\nMerely measuring something\nhas an uncanny tendency to improve it.  If you want to make your\nuser numbers go up, put a big piece of paper on your wall and every\nday plot the number of users.  You'll be delighted when it goes up\nand disappointed when it goes down.  Pretty soon you'll start\nnoticing what makes the number go up, and you'll start to do more\nof that.  Corollary: be careful what you measure.8. Spend little.I can't emphasize enough how important it is for a startup to be cheap.\nMost startups fail before they make something people want, and the\nmost common form of failure is running out of money.  So being cheap\nis (almost) interchangeable with iterating rapidly.\n[4]\nBut it's\nmore than that.  A culture of cheapness keeps companies young in\nsomething like the way exercise keeps people young.9. Get ramen profitable.\"Ramen profitable\" means a startup makes just enough to pay the\nfounders' living expenses.  It's not rapid prototyping for business\nmodels (though it can be), but more a way of hacking the investment\nprocess.  Once you cross over into ramen profitable, it completely\nchanges your relationship with investors.  It's also great for\nmorale.10. Avoid distractions.Nothing kills startups like distractions.  The worst type are those\nthat pay money: day jobs, consulting, profitable side-projects.\nThe startup may have more long-term potential, but you'll always\ninterrupt working on it to answer calls from people paying you now.\nParadoxically, fundraising is this type of distraction, so try to\nminimize that too.11. Don't get demoralized.Though the immediate cause of death in a startup tends to be running\nout of money, the underlying cause is usually lack of focus.  Either\nthe company is run by stupid people (which can't be fixed with\nadvice) or the people are smart but got demoralized.  Starting a\nstartup is a huge moral weight.  Understand this and make a conscious\neffort not to be ground down by it, just as you'd be careful to\nbend at the knees when picking up a heavy box.12. Don't give up.Even if you get demoralized, don't give up.  You can get surprisingly\nfar by just not giving up.  This isn't true in all fields.  There\nare a lot of people who couldn't become good mathematicians no\nmatter how long they persisted.  But startups aren't like that.\nSheer effort is usually enough, so long as you keep morphing your\nidea.13. Deals fall through.One of the most useful skills we learned from Viaweb was not getting\nour hopes up.  We probably had 20 deals of various types fall\nthrough.  After the first 10 or so we learned to treat deals as\nbackground processes that we should ignore till they terminated.\nIt's very dangerous to morale to start to depend on deals closing,\nnot just because they so often don't, but because it makes them\nless likely to.\nHaving gotten it down to 13 sentences, I asked myself which I'd\nchoose if I could only keep one.Understand your users.  That's the key.  The essential task in a\nstartup is to create wealth; the dimension of wealth you have most\ncontrol over is how much you improve users' lives; and the hardest\npart of that is knowing what to make for them.  Once you know what\nto make, it's mere effort to make it, and most decent hackers are\ncapable of that.Understanding your users is part of half the principles in this\nlist.  That's the reason to launch early, to understand your users.\nEvolving your idea is the embodiment of understanding your users.\nUnderstanding your users well will tend to push you toward making\nsomething that makes a few people deeply happy.  The most important\nreason for having surprisingly good customer service is that it\nhelps you understand your users.  And understanding your users will\neven ensure your morale, because when everything else is collapsing\naround you, having just ten users who love you will keep you going.Notes[1]\nStrictly speaking it's impossible without a time machine.[2]\nIn practice it's more like a ragged comb.[3]\nJoe thinks one of the founders of Hewlett Packard said it first,\nbut he doesn't remember which.[4]\nThey'd be interchangeable if markets stood still.  Since they\ndon't, working twice as fast is better than having twice as much\ntime."},{"title":"Stopping Spam","text":"August 2003There are many ways to fight spam.  Which works best?\nSo far the best single solution is probably Bayesian filtering.\nBut you don't have to choose just one.  Many of the\nfollowing solutions could be used in combination.Complaining to Spammers' ISPsGood: Raises cost of spamming.Bad: Laborious.Role: Partial solution, for experts.This was the original spam solution.  Believe it or not, complaints can\nhave an effect.  True, spammers expect to be shut down, and already have\nfresh accounts lined up.   Constantly switching\nproviders is just a cost of doing business.  But the\nfaster they get booted due to complaints, the greater this\ncost becomes.Complaining effectively is difficult.  Most\nspammers forge the headers of their emails to disguise their\norigin.  You have to learn to interpret headers\nto understand where a spam really came from.Another option is to complain to the ISP hosting the site\nadvertised in the spam (or, if the ISP is a spam hosting\nservice, their upstream provider).  But again, it can\ntake some effort to figure out who this is.Mail Server BlacklistsGood: Block spam right at the server.Bad: Incomplete, sometimes irresponsible.Role: A first pass to eliminate up to 50% of spam early on.Groups of volunteers maintain blacklists of mail servers\neither used by spammers, or that have security holes that\nwould let spammers use them.  Some ISPs subscribe to such\nblacklists, and automatically\nrefuse any mail from servers on them.Blacklists have two downsides.  One is that they never manage\nto list more than about half the servers that spam comes from.\nAnother is that\na blacklist is only as good as the people running it.  Some\nblacklists are run by\nvigilantes\nwho shoot first and ask questions\nlater.  Using the wrong blacklist could mean bouncing a lot\nof legitimate mail.Blacklists are useful as at the ISP level, as long as you (a)\nuse a responsible one (if there are any) and\n(b) don't expect it to be more\nthan a first cut at the problem.Signature-Based FilteringGood: Rarely blocks legitimate mail.Bad: Catches only 50-70% of spam.Role: A first-pass filter on big email services.Signature-Based filters work by comparing incoming email to\nknown spams.\nBrightmail\ndoes it by maintaining a\nnetwork of fake email addresses.  Any email sent to these\naddresses must be spam.  So when they see the same email sent\nto an address they're protecting, they know they can filter it out.In order to tell whether two emails are the same, these systems\ncalculate \"signatures\" for them.  One way to calculate a signature\nfor an email would be to assign a number to each character, then\nadd up all the numbers.  It would be unlikely that a different\nemail would have exactly the same signature.The way to attack a signature-based filter is to add random\nstuff to each copy of a spam, to give it a distinct signature.\nWhen you see random junk in the subject\nline of a spam, that's why it's there-- to trick signature-based\nfilters.The spammers have always had the upper hand in the battle against\nsignature-based filters.  As soon as the filter developers figure\nout how to ignore one kind of random insertion,\nthe spammers switch to another.  So signature-based\nfilters have never had very good performance.Bayesian (aka Statistical) FilteringGood: Catch 99% to 99.9% of spam, low false positives.Bad: Have to be trained.Role: Best current solution for individual users.Bayesian filters\nare the latest in spam filtering technology.  They\nrecognize spam by looking at the words (or \"tokens\") they\ncontain.A Bayesian filter starts with two collections of\nmail, one of spam and one of legitimate mail.  For every word\nin these emails, it calculates a spam probability based on\nthe proportion of spam\noccurrences.  In my own email,\n\"Guaranteed\" has a spam probability of 98%, because it occurs\nmostly in spam; \"This\" has a spam probability of 43%, because it\noccurs about equally in spam and legitimate mail; and \"deduce\" has\na spam probability of only 3%, because it occurs mostly in\nlegitimate email.When a new mail arrives, the filter collects the 15 or 20\nwords whose spam probabilities are furthest (in either direction)\nfrom a neutral 50%, and calculates from these an overall\nprobability that the email is a spam.Because\nthey learn to distinguish spam from legitimate mail by looking\nat the actual mail sent to each user, Bayesian filters are\nextremely accurate, and adapt automatically as spam evolves.Bayesian filters vary in performance.  As a rule you can count\non filtering rates of 99%.  Some, like\nSpamProbe, deliver\nfiltering rates closer to 99.9%.Bayesian filters are particularly good at avoiding \"false\npositives\"-- legitimate email misclassified as spam.\nThis is because they consider evidence of innocence as well\nas evidence of guilt.  A Bayesian filter is unlikely to\nreject an otherwise innocent email that happens to\ncontain the word \"sex\", as a rule-based filter might.The disadvantage of Bayesian filters is that they need to be\ntrained.  The user has to tell them\nwhenever they misclassify a mail.  Of course, after the filter\nhas seen a couple hundred examples, it rarely guesses wrong,\nso in the long term there is little extra work involved.Another disadvantage of Bayesian filters is that they're\nnew.  The technology only became widespread in 2003.  Most\ncommercial spam filters are still rule-based.Rule-Based (aka Heuristic) FilteringGood: The best catch 90-95% of spam, easy to install.Bad: Static rules, relatively high false positives.Role: Easy server-level solution.Rule-based filters look for patterns that indicate spam:\nspecific words and phrases, lots of uppercase and exclamation points,\nmalformed headers, dates in the future or the past, etc.  This is\nhow nearly all spam filters worked until 2002.The performance of rule-based filters varies hugely.  The simplest just\nreject any email that contains certain \"bad\" words.  These\nare laughably easy for spammers to beat, and also tend to reject\na lot of legitimate email.On the other hand, sophisticated rule-based filters like\nSpamassassin can be quite\neffective.  You can probably count on\na good rule-based filter catching 90-95% of current spam.The main disadvantage of rule-based filters is that they tend to\nhave high false positive\nrates--often as high as .5%.  (A trained Bayesian filter's\nfalse positive rate would be less than a tenth of that.)Another disadvantage is that the rules are static.\nWhen spammers learn new tricks, the filter's authors\nhave to write new rules to catch them.\nAnd because rule-based filters are static targets, spammers\ncan tune their mails to get past them.  Sophisticated spammers\nalready test their mails on popular rule-based filters\nbefore sending them.  In fact, there are\nsites that\nwill do this for free.The advantage of rule-based filters over Bayesian filters is\nthat they're easy to install at the mail server level.  Bayesian\nfilters require users\nto train them by telling them when they misclassify an\nemail, so running one on the server\nis a little more complicated\n(but probably worth it).Challenge-Response FilteringGood: Stops 99.9% of spam.Bad: Rude, delays or drops legitimate email.Role: Grandmothers, cranks.When you get an email from someone you haven't had mail from\nbefore, a challenge-response\nfilter sends an email back to them,\ntelling them they must go to a web page and fill out a form\nbefore the email can be delivered.The advantage of challenge-response filters is that they\nlet through very little spam.  (At least, so far.)  The\ndisadvantage is that they're rude.  Spam\nmeans extra work for all of us.  By using a\nchallenge-reponse filter, you're saying that\nyou expect the extra work of keeping your inbox free of\nspam to be done by the people who send you mail.The other disadvantage of challenge-response filters is that\nmuch legitimate mail will either be lost, or delayed until\nit's too late to be useful.  Suppose an acquaintance\nis going to a party tonight and decides to invite you too.  Your\nfilter replies with a challenge.  But she doesn't see this till\nshe checks her mail again the next day, by which time it's\ntoo late.Occasionally senders will never reply to the challenge,\nand the email they sent you will be lost.  Some respond\nto this by saying \"if they're not willing to do a\nlittle work to talk to me, I probably don't want to hear from\nthem anyway.\"  But there are cases where this is clearly not\ntrue.  I have several email addresses that all get forwarded to\none account.  If someone using a challenge-response filter\nsends me a question, the reply will come from an address their\nfilter hasn't seen and I'll get a challenge back.\nIf such challenges seem rude when\nyou're the one initiating contact, imagine how they seem when\nyou get one after replying to someone's question.\nI never bother to respond, and I'm probably not the only one.There are also technical objections to challenge-response\nfilters.  What happens when spammers happen to use some\ninnocent person's address as the from-address in a spam,\nfor example?  What happens when spamware authors (who aren't\nstupid) figure out how to spoof challenges?  How do you\ncreate a challenge that blind\npeople can pass?If such technical objections could be overcome, challenge-response\nfilters would have a place.\nThey'd be suitable\nfor users like my mother, who says that she only gets email from\nabout 10 different addresses, and gets mail from a new address\nonly about once a year.  They might also be good\nin combination with other kinds of spam filter; you could\nchallenge the mails that a Bayesian filter classified\nas spam, for example, just in case any were legit.But using just challenge-response on all your incoming\nemail is like putting a ten-foot chain-link fence around your\nhouse.  Yes, it will\nkeep people out, but it also sends the world a certain message\nabout you.LawsGood: Truly threaten spammers.Bad: Aren't enforced, or are full of loopholes.Role: Could eliminate 80% of spam, if done right.There are two problems with laws against spam: they usually\ncontain large loopholes inserted by lobbyists, and the worst\nclass of spammers ignore them.But it isn't necessarily a waste of time to try to pass\nlaws against spam.  Even if some spammers do ignore laws,\ngetting rid of the\nrest would still be worthwhile.To be effective, spam laws would have to have criminal and\nnot just civil penalties.\nThe most prolific spammers in the US have made themselves\njudgment proof-- by putting\nall their assets in their wife's name, for example,\nor by buying a house in Florida.(Florida law\nprotects real estate against civil judgments.\nThis is one of the reasons Florida,\nand Boca\nRaton in particular, is the spam center of the\ncountry.)But the main thing any law against spam needs is\nenforcement.  There are plenty of\nstate\nlaws against spam, and\nthey seem to have no effect.  One reason is that the states\ndon't enforce them.One option currently being considered is a do-not-spam\nlist, like the US do-not-call list.\nI don't think this will work.  All it\nwould take is one person to crack the security, and the\nlist would be out there, irretrievably.The main loophole in spam laws is usually in the definition\nof spam.  Most spam laws allow unsolicited email to recipients\nwho have a prior relationship with the sender.  This is\nreasonable, but you have to define carefully what a prior\nrelationship consists of.  There is a whole class of\nspammers (they currently call themselves\n\"permission-based email marketers\") who get email addresses\nby buying them from websites with unscrupulous privacy policies.\nBy calling the site they bought your address from an \"affiliate\"\nor \"partner\", the spammers claim that they too have a prior\nrelationship with you, and are thus exempt from spam laws.This loophole would have to be closed for any anti-spam law\nto work.  The way to draw the line between spam and marketing\nis to look at where the sender got your email address.\nIf they merely bought your address, or harvested it from web pages,\nchat rooms, or newsgroups, then they don't have a prior relationship\nwith you.\nIf a federal spam law simply said that any email to an address\nthus obtained had to have ADV in the subject line, that\nalone could get rid of 50% of spam.\nLegitimate direct marketers would have little objection to\nsuch a measure; they don't want their brands to be tarnished by spamming,\nand never buy or harvest email addresses.(Only a few well-known brands use spam.\nGevalia, owned by Kraft, is probably the most\nnotorious.)Some see First Amendment problems with laws against spamming.\nBut there are plenty of precedents.  The closest are probably\nthe federal laws against junk faxes and telemarketing with recorded messages.\nThere doesn't seem to have been much protest against these on\nfree speech grounds.A law against spam could have some effect, even if it wasn't very\nwell enforced, because it would further stigmatize spam.  Spammers\nhave families, friends, and neighbors, and these all exert some\namount of pressure on them.\nAlan Ralsky\nsaid that he\nhad promised his wife not to send porn spams.  (You probably\nhave to pay extra attention to your wife when all your assets are\nin her name.)  Perhaps if there were a federal law against spam,\nwith criminal penalties, she'd make him stop altogether.FFBsGood: Raise cost of spamming.Bad: Involve blacklists.Role: Speculative idea.About 95% of spams contain links to web pages.  If everyone\nwho received a spam actually followed the links in it, the\ntraffic would be a heavy burden on the spammers' servers.That's the idea behind FFBs (Filters that Fight Back).\nIf many spam filters automatically crawled sites mentioned in spams,\nthe resulting traffic could generate high server loads\nand bandwidth costs for spammers.The biggest spammers could probably protect themselves against\nFFBs overloading their server, but even in their case the\nbandwidth would have to be paid for, raising the cost\nof each spam.  Smaller spammers would be crushed by FFBs.\nA medium-sized spam hosting account allows 50 GB of transfer\nper month.  A moderately popular FFB could drain this in a\nmatter of hours.To protect against people sending fake spams in\norder to provoke FFBs to attack innocent sites, this system\nwould have to rely on blacklists.  Only sites listed on the\nblacklist would be crawled when spam mentioning them arrived.\nTechnically, that is the weak point of this solution: blacklists\nare not always responsibly managed.Another disadvantage to this plan is the resemblance to a\ndenial of service attack.  It isn't a DoS attack, according\nto most definitions.  Even so,\nsome users wouldn't want to do this, even to spammers.There are no FFBs yet, though there is now\none filter that\nautomatically retrieves web pages to improve accuracy.Slow SendersGood: Raises cost of spamming.Bad: Requires new email protocol.Role: Speculative idea.Spam has low response rates (on the order of 15 per million)\nbut spammers make up for it with high volumes, sending millions\nof emails per day.  If you could slow down the rate at which\nthey send email, you could put them out of business.One way to do this would be to make any computer that wanted\nto send you mail perform a time-consuming\ncomputation\nbefore you would accept it.Whatever these computations were, they couldn't be too arduous,\nbecause legitimate corporate mail servers have to be able\nto send high volumes of mail.  And corporate mail servers\nwould be running on stock hardware.  Many computations can\nbe made hundreds or thousands of times faster by custom hardware.\nSpammers already have highly tuned systems and would not be\ndeterred by the need for custom hardware.So for this idea to work, you'd need to figure out a kind of\ncomputation that couldn't easily be speeded up by custom\nhardware.(You could improve the odds by incorporating Bayesian\nspam recognition; instead of always requiring\nthe same calculation, require a calculation whose difficulty\ndepends on the spamminess of the incoming mail.)Even if you could find a suitable computation, this idea would\nrequire new email  protocols.  Any new\nprotocol has a chicken-and-egg problem: no one needs to adopt\nit till everyone else does.  As a result, it is practically\nimpossible to get a new protocol adopted for anything.\nHow are you going to get sysadmins who don't even bother to\ninstall patches for years-old security holes to switch to\na new email protocol?Penny per MailGood: Raises cost of spamming.Bad: Requires new email protocol, bureaucracy.Role: Speculative idea.There are various\nideas\nfloating around for charging some small\namount per email sent.   If it cost even half\na cent to send an email, spam wouldn't pay, and would disappear.Unfortunately, I think there\nwould be insuperable practical problems in setting up such a\nsystem.  These proposals run into the same chicken-and-egg\nproblem as anything that requires a new protocol; there is\nno incentive to be an early adopter.In this case the protocol would be particularly\nonerous to administer, because it would involve money.  Setting\nup a mail server would mean establishing a line of credit.Security would become much more\nimportant once money was involved.  Mail servers would now\nin effect transfer funds, like servers within the banking\nsystem.  This despite the fact that they are connected to\nthe Internet.Charging per email wouldn't stop the worst spammers.  They'd\njust break into companies' computers and send mail at their\nexpense.  And the possibility of a spammer breaking into one's\nsystem and racking up big email bills would not make the\naverage sysadmin eager to become an early adopter, to say the\nleast.For this kind of approach to work, we'd first have to solve\nthe problem of making the average small and medium-sized\ncompany's network secure.  So we'd just be exchanging a hard\nproblem for a harder one.Secret AddressGood: Easy.Bad: Doesn't work.Role: Facile recommendation for brief news articles.Some recommend that you keep your address secret in order to\navoid spam.  But it's hard to keep your address secret, because\nother people have to know it to send you email.  All it takes\nis one naive friend to enter your address in a web site to send you\nan electronic greeting card, and it's all over.Even if no one discloses your address, spammers can still\nget it through dictionary attacks.  In a dictionary attack,\nspammers try sending a test mail to millions of possible addresses.\nAny that don't bounce are probably valid.  My mother gets spam\nas a result of a dictionary attack on AOL, even though\nshe only sends email to a handful of people and never\nuses the Web.Junk AddressGood: Cuts some spam.Bad: Can't always use them.Role: Use on web sites that make you register.You could in principle avoid spam by giving a different email\naddress to everyone.  Then you could just shut off any address\nthat got compromised.  And, for what it's worth, you'd know\nwho was responsible.This is a good idea when you have to enter your address on\na web site, e.g. to register for an account to read news\narticles online.  I usually use junk addresses for such\npurposes.This is hard to do in all cases, though.  You would not be\nable to just print an email address on your web site or\nbusiness card.  Instead you'd have to have a page you\nsent people to, where they could request an email address\nto use to send mail to you.Thanks to Bill Yerazunis and Brian Burton for reading\nthis and suggesting several fixes."},{"title":"Stuff","text":"July 2007I have too much stuff.  Most people in America do.  In fact, the\npoorer people are, the more stuff they seem to have.  Hardly anyone\nis so poor that they can't afford a front yard full of old cars.It wasn't always this way.  Stuff used to be rare and valuable.\nYou can still see evidence of that if you look for it.  For example,\nin my house in Cambridge, which was built in 1876, the bedrooms\ndon't have closets.  In those days people's stuff fit in a chest\nof drawers.  Even as recently as a few decades ago there was a lot\nless stuff.  When I look back at photos from the 1970s, I'm surprised\nhow empty houses look.  As a kid I had what I thought was a huge\nfleet of toy cars, but they'd be dwarfed by the number of toys my\nnephews have.  All together my Matchboxes and Corgis took up about\na third of the surface of my bed.  In my nephews' rooms the bed is\nthe only clear space.Stuff has gotten a lot cheaper, but our attitudes toward it haven't\nchanged correspondingly.  We overvalue stuff.That was a big problem\nfor me when I had no money.  I felt poor, and stuff seemed valuable,\nso almost instinctively I accumulated it.  Friends would leave\nsomething behind when they moved, or I'd see something as I was\nwalking down the street on trash night (beware of anything you find\nyourself describing as \"perfectly good\"), or I'd find something in\nalmost new condition for a tenth its retail price at a garage sale.\nAnd pow, more stuff.In fact these free or nearly free things weren't bargains, because\nthey were worth even less than they cost.  Most of the stuff I\naccumulated was worthless, because I didn't need it.What I didn't understand was that the value of some new acquisition\nwasn't the difference between its retail price and what I paid for\nit.  It was the value I derived from it.  Stuff is an extremely\nilliquid asset.  Unless you have some plan for selling that valuable\nthing you got so cheaply, what difference does it make what it's\n\"worth?\"  The only way you're ever going to extract any value from\nit is to use it.  And if you don't have any immediate use for it,\nyou probably never will.Companies that sell stuff have spent huge sums training us to think\nstuff is still valuable.  But it would be closer to the truth to\ntreat stuff as worthless.In fact, worse than worthless, because once you've accumulated a\ncertain amount of stuff, it starts to own you rather than the other\nway around.  I know of one couple who couldn't retire to the town\nthey preferred because they couldn't afford a place there big enough\nfor all their stuff.  Their house isn't theirs; it's their stuff's.And unless you're extremely organized, a house full of stuff can\nbe very depressing. A cluttered room saps one's spirits.  One\nreason, obviously, is that there's less room for people in a room\nfull of stuff.  But there's more going on than that.  I think humans\nconstantly scan their environment to build a mental model of what's\naround them.  And the harder a scene is to parse, the less energy\nyou have left for conscious thoughts.  A cluttered room is literally\nexhausting.(This could explain why clutter doesn't seem to bother kids as much\nas adults. Kids are less perceptive.  They build a coarser model\nof their surroundings, and this consumes less energy.)I first realized the worthlessness of stuff when I lived in Italy\nfor a year.  All I took with me was one large backpack of stuff.\nThe rest of my stuff I left in my landlady's attic back in the US.\nAnd you know what?  All I missed were some of the books.  By the\nend of the year I couldn't even remember what else I had stored in\nthat attic.And yet when I got back I didn't discard so much as a box of it.\nThrow away a perfectly good rotary telephone?  I might need that\none day.The really painful thing to recall is not just that I accumulated\nall this useless stuff, but that I often spent money I desperately\nneeded on stuff that I didn't.Why would I do that?  Because the people whose job is to sell you\nstuff are really, really good at it.  The average 25 year old is\nno match for companies that have spent years figuring out how to\nget you to spend money on stuff.  They make the experience of buying\nstuff so pleasant that \"shopping\" becomes a leisure activity.How do you protect yourself from these people?  It can't be easy.\nI'm a fairly skeptical person, and their tricks worked on me well\ninto my thirties.  But one thing that might work is to ask yourself,\nbefore buying something, \"is this going to make my life noticeably\nbetter?\"A friend of mine cured herself of a clothes buying habit by asking\nherself before she bought anything \"Am I going to wear this all the\ntime?\"  If she couldn't convince herself that something she was\nthinking of buying would become one of those few things she wore\nall the time, she wouldn't buy it.  I think that would work for any\nkind of purchase.  Before you buy anything, ask yourself: will this\nbe something I use constantly?  Or is it just something nice?  Or\nworse still, a mere bargain?The worst stuff in this respect may be stuff you don't use much\nbecause it's too good.  Nothing owns you like fragile stuff.  For\nexample, the \"good china\" so many households have, and whose defining\nquality is not so much that it's fun to use, but that one must be\nespecially careful not to break it.Another way to resist acquiring stuff is to think of the overall\ncost of owning it.  The purchase price is just the beginning.  You're\ngoing to have to think about that thing for years—perhaps for\nthe rest of your life.  Every thing you own takes energy away from\nyou.  Some give more than they take.  Those are the only things\nworth having.I've now stopped accumulating stuff.  Except books—but books are\ndifferent.  Books are more like a fluid than individual objects.\nIt's not especially inconvenient to own several thousand books,\nwhereas if you owned several thousand random possessions you'd be\na local celebrity.  But except for books, I now actively avoid\nstuff.  If I want to spend money on some kind of treat, I'll take\nservices over\ngoods any day.I'm not claiming this is because I've achieved some kind of zenlike\ndetachment from material things.  I'm talking about something more\nmundane.  A historical change has taken place, and I've now realized\nit.  Stuff used to be valuable, and now it's not.In industrialized countries the same thing happened with food in\nthe middle of the twentieth century.  As food got cheaper (or we\ngot richer; they're indistinguishable), eating too much started to\nbe a bigger danger than eating too little.   We've now reached that\npoint with stuff.  For most people, rich or poor, stuff has become\na burden.The good news is, if you're carrying a burden without knowing it,\nyour life could be better than you realize.  Imagine walking around\nfor years with five pound ankle weights, then suddenly having them\nremoved."},{"title":"Subject: Airbnb","text":"March 2011Yesterday Fred Wilson published a remarkable post about missing\nAirbnb.   VCs miss good startups all the time, but it's extraordinarily\nrare for one to talk about it publicly till long afterward.  So\nthat post is further evidence what a rare bird Fred is.  He's\nprobably the nicest VC I know.Reading Fred's post made me go back and look at the emails I exchanged\nwith him at the time, trying to convince him to invest in Airbnb.\nIt was quite interesting to read.  You can see Fred's mind at work\nas he circles the deal.Fred and the Airbnb founders have generously agreed to let me publish\nthis email exchange (with one sentence redacted about something\nthat's strategically important to Airbnb and not an important part\nof the conversation).  It's an interesting illustration of an element\nof the startup ecosystem that few except the participants ever see:\ninvestors trying to convince one another to invest in their portfolio\ncompanies.  Hundreds if not thousands of conversations of this type\nare happening now, but if one has ever been published, I haven't\nseen it.  The Airbnbs themselves never even saw these emails at the\ntime.We do a lot of this behind the scenes stuff at YC, because we invest\nin such a large number of companies, and we invest so early that\ninvestors sometimes need a lot of convincing to see their merits.\nI don't always try as hard as this though.  Fred must\nhave found me quite annoying.\nfrom: Paul Graham\nto: Fred Wilson, AirBedAndBreakfast Founders\ndate: Fri, Jan 23, 2009 at 11:42 AM\nsubject: meet the airbedsOne of the startups from the batch that just started, AirbedAndBreakfast,\nis in NYC right now meeting their users.  (NYC is their biggest\nmarket.) I'd recommend meeting them if your schedule allows.I'd been thinking to myself that though these guys were going to\ndo really well, I should introduce them to angels, because VCs would\nnever go for it.  But then I thought maybe I should give you more\ncredit.  You'll certainly like meeting them.  Be sure to ask about\nhow they funded themselves with breakfast cereal.There's no reason this couldn't be as big as Ebay.  And this team\nis the right one to do it.--pgfrom: Brian Chesky\nto: Paul Graham\ncc: Nathan Blecharczyk, Joe Gebbia\ndate: Fri, Jan 23, 2009 at 11:40 AM\nsubject: Re: meet the airbedsPG,Thanks for the intro!Brianfrom: Paul Graham\nto: Brian Chesky\ncc: Nathan Blecharczyk, Joe Gebbia\ndate: Fri, Jan 23, 2009 at 12:38 PM\nsubject: Re: meet the airbedsIt's a longshot, at this stage, but if there was any VC who'd get\nyou guys, it would be Fred.  He is the least suburban-golf-playing\nVC I know.He likes to observe startups for a while before acting, so don't\nbe bummed if he seems ambivalent.--pgfrom: Fred Wilson\nto: Paul Graham,\ndate: Sun, Jan 25, 2009 at 5:28 PM\nsubject: Re: meet the airbedsThanks PaulWe are having a bit of a debate inside our partnership about the\nairbed concept. We'll finish that debate tomorrow in our weekly\nmeeting and get back to you with our thoughtsThanksFredfrom: Paul Graham\nto: Fred Wilson\ndate: Sun, Jan 25, 2009 at 10:48 PM\nsubject: Re: meet the airbedsI'd recommend having the debate after meeting them instead of before.\nWe had big doubts about this idea, but they vanished on meeting the\nguys.from: Fred Wilson\nto: Paul Graham\ndate: Mon, Jan 26, 2009 at 11:08 AM\nsubject: RE: meet the airbedsWe are still very suspect of this idea but will take a meeting as\nyou suggestThanksfredfrom: Fred Wilson\nto: Paul Graham, AirBedAndBreakfast Founders\ndate: Mon, Jan 26, 2009 at 11:09 AM\nsubject: RE: meet the airbedsAirbed team -Are you still in NYC?We'd like to meet if you areThanksfredfrom: Paul Graham\nto: Fred Wilson\ndate: Mon, Jan 26, 2009 at 1:42 PM\nsubject: Re: meet the airbedsIdeas can morph.  Practically every really big startup could say,\nfive years later, \"believe it or not, we started out doing ___.\"\nIt just seemed a very good sign to me that these guys were actually\non the ground in NYC hunting down (and understanding) their users.\nOn top of several previous good signs.--pgfrom: Fred Wilson\nto: Paul Graham\ndate: Sun, Feb 1, 2009 at 7:15 AM\nsubject: Re: meet the airbedsIt's interestingOur two junior team members were enthusiasticThe three \"old guys\" didn't get itfrom: Paul Graham\nto: Fred Wilson\ndate: Mon, Feb 9, 2009 at 5:58 PM\nsubject: airbnbThe Airbeds just won the first poll among all the YC startups in\ntheir batch by a landslide.  In the past this has not been a 100%\nindicator of success (if only anything were) but much better than\nrandom.--pgfrom: Fred Wilson\nto: Paul Graham\ndate: Fri, Feb 13, 2009 at 5:29 PM\nsubject: Re: airbnbI met them todayThey have an interesting businessI'm just not sure how big it's going to befredfrom: Paul Graham\nto: Fred Wilson\ndate: Sat, Feb 14, 2009 at 9:50 AM\nsubject: Re: airbnbDid they explain the long-term goal of being the market in accommodation\nthe way eBay is in stuff?  That seems like it would be huge.  Hotels\nnow are like airlines in the 1970s before they figured out how to\nincrease their load factors.from: Fred Wilson\nto: Paul Graham\ndate: Tue, Feb 17, 2009 at 2:05 PM\nsubject: Re: airbnbThey did but I am not sure I buy thatABNB reminds me of Etsy in that it facilitates real commerce in a\nmarketplace model directly between two peopleSo I think it can scale all the way to the bed and breakfast marketBut I am not sure they can take on the hotel marketI could be wrongBut even so, if you include short term room rental, second home\nrental, bed and breakfast, and other similar classes of accommodations,\nyou get to a pretty big opportunityfredfrom: Paul Graham\nto: Fred Wilson\ndate: Wed, Feb 18, 2009 at 12:21 AM\nsubject: Re: airbnbSo invest in them!  They're very capital efficient.  They would\nmake an investor's money go a long way.It's also counter-cyclical.  They just arrived back from NYC, and\nwhen I asked them what was the most significant thing they'd observed,\nit was how many of their users actually needed to do these rentals\nto pay their rents.--pgfrom: Fred Wilson\nto: Paul Graham\ndate: Wed, Feb 18, 2009 at 2:21 AM\nsubject: Re: airbnbThere's a lot to likeI've done a few things, like intro it to my friends at Foundry who\nwere investors in Service Metrics and understand this modelI am also talking to my friend Mark Pincus who had an idea like\nthis a few years ago.So we are working on itThanks for the leadFredfrom: Paul Graham\nto: Fred Wilson\ndate: Fri, Feb 20, 2009 at 10:00 PM\nsubject: airbnb already spreading to prosI know you're skeptical they'll ever get hotels, but there's a\ncontinuum between private sofas and hotel rooms, and they just moved\none step further along it.[link to an airbnb user]This is after only a few months.  I bet you they will get hotels\neventually.  It will start with small ones.  Just wait till all the\n10-room pensiones in Rome discover this site.  And once it spreads\nto hotels, where is the point (in size of chain) at which it stops?\nOnce something becomes a big marketplace, you ignore it at your\nperil.--pgfrom: Fred Wilson\nto: Paul Graham\ndate: Sat, Feb 21, 2009 at 4:26 AM\nsubject: Re: airbnb already spreading to prosThat's true. It's also true that there are quite a few marketplaces\nout there that serve this same marketIf you look at many of the people who list at ABNB, they list\nelsewhere tooI am not negative on this one, I am interested, but we are still\nin the gathering data phase.fred"},{"title":"Submitting an Accumulator Generator","text":"Sorry, but please don't send any more accumulator generators for\nthe time being.  I don't have time to check them.\nIf you want to submit an example of the accumulator generator written in\na new language, please read this page first.Most of the code I've been sent doesn't work, either because\nthe author misread the spec, or because you can't really write it in the\nlanguage in question.Before you submit an example, make sure foo\nTakes, and returns functions that take, exactly one argument.\nWorks for any numeric type-- i.e. can take both ints and floats\nand returns functions that can take both ints and floats.\n(It is not enough simply to convert all input to floats.  An\naccumulator that has only seen integers must return integers.)\nGenerates functions that return the sum of every number ever\npassed to them, not just the most recent.\nReturns a real function, meaning something that you can use\nwherever you could use a function you had defined in the ordinary\nway in the text of your program.\nDoesn't store the accumulated value or the returned functions in\na way that could cause them to be inadvertantly modified by other\ncode.\nE.g. if after the example, you added the following code\n(in a made-up language):x = foo(1);\nx(5);\nfoo(3);\nprint x(2.3)\nIt should print 8.3.I currently believe that you can't\nwrite this program in ML and Ocaml (no polymorphism), Tcl (the functions returned by\nfoo have to be named, and there is no sure way to avoid name clashes),\nor K (doesn't support closures).I can't tell yet if you can write the program in Forth.\nI've had several Forth submissions and I'm still trying to puzzle out whether they're correct."},{"title":"Succinctness is Power","text":"May 2002\n\"The quantity of meaning compressed into a small space by\nalgebraic signs, is another circumstance that facilitates\nthe reasonings we are accustomed to carry on by their aid.\"- Charles Babbage, quoted in Iverson's Turing Award Lecture\nIn the discussion about issues raised by Revenge\nof the Nerds on the LL1 mailing list, Paul Prescod wrote\nsomething that stuck in my mind.\nPython's goal is regularity and readability, not succinctness.\nOn the face of it, this seems a rather damning thing to claim about a\nprogramming language.  As far as I can tell, succinctness = power.\nIf so, then substituting, we get\nPython's goal is regularity and readability, not power.\nand this doesn't seem a tradeoff (if it is a tradeoff)\nthat you'd want to make.\nIt's not far from saying that Python's goal is not to be effective\nas a programming language.Does succinctness = power?  This seems to me an important question,\nmaybe the most important question for anyone interested in\nlanguage design, and one that it would be useful to confront\ndirectly.  I don't feel sure yet that the answer is a simple yes, but it seems\na good hypothesis to begin with.HypothesisMy hypothesis is that succinctness is power, or is close enough\nthat except in pathological examples you can treat them as\nidentical.It seems to me that succinctness is what programming languages are\nfor.  Computers would be just as happy to be told what to\ndo directly in machine language.  I think that the main\nreason we take the trouble to develop high-level languages is to\nget leverage, so that we can say (and more importantly, think)\nin 10 lines of a high-level language what would require 1000\nlines of machine language.  In other words,\nthe main point of high-level languages is to make source code smaller.If smaller source code is the purpose of high-level languages, and\nthe power of something is how well it achieves its purpose, then\nthe measure of the power of a programming language is how small it\nmakes your programs.Conversely, a language that doesn't make your programs small is\ndoing a bad job of what programming languages are supposed to\ndo, like a knife that doesn't cut well, or printing that's illegible.\nMetricsSmall in what sense though?  The most common measure of code size is\nlines of code.  But I think that this metric is the most common because\nit is the easiest to measure.  I don't think anyone really believes\nit is the true test of the length of a program. Different\nlanguages have different conventions for how much you should put\non a line; in C a lot of lines have nothing on them but a delimiter or two.Another easy test is the number of characters in a\nprogram, but this is not very good either; some languages (Perl,\nfor example) just\nuse shorter identifiers than others.I think a better measure of the size of a program would be the\nnumber of elements, where an element is anything that\nwould be a distinct node if you drew a tree representing the\nsource code. The name of\na variable or function is an element;\nan integer or a floating-point number is an element;\na segment of literal text is an element;\nan element of a pattern, or a format directive, is an element;\na new block is an element.  There are borderline cases\n(is -5 two elements or one?) but I think most of them are the\nsame for every language, so they don't affect comparisons much.This metric needs fleshing out, and\nit could require interpretation in the case of specific languages,\nbut I think it tries to measure the right thing, which is the\nnumber of parts a program has.  I think the tree you'd draw in this\nexercise is what you have to make in your head in order to\nconceive of the program, and so its size is proportionate to the\namount of work you have to do to write or read it.DesignThis kind of metric would allow us to compare different languages,\nbut that is not, at least for me, its main value.  The main value\nof the succinctness test is as a guide in designing languages.\nThe most useful comparison between languages is between two\npotential variants of the same language.  What can I do in the\nlanguage to make programs shorter?If the conceptual load of\na program is proportionate to its complexity, and a given programmer\ncan tolerate a fixed conceptual load, then this is the same as asking,\nwhat can I do to enable programmers to get the most done?  And\nthat seems to me identical to asking, how can I design a good\nlanguage?(Incidentally, nothing makes it more patently obvious that the old\nchestnut \"all languages are equivalent\" is false than designing\nlanguages.  When you are designing a new language, you're constantly\ncomparing two languages-- the language if I did x, and if I didn't-- to\ndecide which is better.  If this were really a meaningless question,\nyou might as well flip a coin.)Aiming for succinctness seems a good way to find new ideas.\nIf you can do something that makes many\ndifferent programs shorter, it is probably not a coincidence: you have\nprobably discovered a useful new abstraction.  You might even be\nable to write a program to help by searching\nsource code for repeated patterns.  Among other languages, those\nwith a reputation for succinctness would be the ones to look to for\nnew ideas: Forth, Joy, Icon.ComparisonThe first person to write about these issues, as far as I know, was\nFred Brooks in the Mythical Man Month.  He wrote\nthat programmers seemed to generate about the same\namount of code per day regardless of the language.\nWhen I first read this in my early twenties,\nit was a big surprise to me and seemed to have huge implications.\nIt meant that (a) the only way to get software written faster was to\nuse a more succinct language, and (b) someone who took the\ntrouble to do this could leave competitors who didn't in the dust.Brooks' hypothesis, if it's true, seems to be at the very heart of hacking.\nIn the years since, I've paid close attention to any evidence I could\nget on the question, from formal studies to anecdotes about individual\nprojects.   I have seen nothing to contradict him.I have not yet seen evidence that seemed to me conclusive,\nand I don't expect to.  Studies\nlike Lutz Prechelt's comparison of programming languages, while\ngenerating the kind of results I expected, tend to use problems that\nare too short to be meaningful tests.  A better test of a language is\nwhat happens in programs that take a month to write.  And the only\nreal test, if you believe as I do that the main purpose of a language\nis to be good to think in (rather than just to tell a computer what to\ndo once you've thought of it) is what new things you can write in it.\nSo any language comparison where\nyou have to meet a predefined spec is testing slightly the wrong\nthing.The true test of a language is how well you can discover\nand solve new problems, not\nhow well you can use it to solve a problem someone else has\nalready formulated.  These two are quite different criteria.\nIn art, mediums like embroidery and mosaic work well if you\nknow beforehand what you want to make, but are absolutely lousy if\nas you have to do with anything as complex as an image of a\nperson, for example-- you need to use a more fluid medium like pencil or\nink wash or oil paint.  And indeed, the way tapestries and mosaics are made in\npractice is to make a painting first, then copy it.  (The word\n\"cartoon\" was originally used to describe a painting intended for\nthis purpose).What this means is that we are never likely to have accurate comparisons\nof the relative power of programming languages.  We'll have precise\ncomparisons, but not accurate ones.  In particular, explicit studies\nfor the purpose of comparing languages,\nbecause they will probably use small problems, and will necessarily use\npredefined problems, will tend to underestimate the power of the\nmore powerful languages.Reports from the field, though they will necessarily be less precise than\n\"scientific\" studies, are likely to be more meaningful.  For example,\nUlf Wiger of Ericsson did a\nstudy that\nconcluded that Erlang was 4-10x\nmore succinct than C++, and proportionately faster to develop\nsoftware in:\nComparisons between Ericsson-internal development projects indicate\nsimilar line/hour productivity, including all phases of software development,\nrather independently of which language (Erlang, PLEX, C, C++, or Java)\nwas used.  What differentiates the different languages then becomes source\ncode volume.\nThe study also deals explictly with a point that was\nonly implicit in Brooks' book (since he measured lines of debugged code):\nprograms written in more powerful languages tend to have fewer bugs.\nThat becomes an end in itself, possibly more important than programmer\nproductivity, in applications like network switches.The Taste TestUltimately, I think you have to go with your gut.  What does it feel\nlike to program in the language?  I think the way to find (or design)\nthe best language is to become hypersensitive to how well a language\nlets you think, then choose/design the language that feels best.  If\nsome language feature is awkward or restricting, don't worry, you'll\nknow about it.Such hypersensitivity will come at a cost.  You'll find that you can't\nstand programming in clumsy languages.   I find it unbearably\nrestrictive to program in languages without macros, just as someone used\nto dynamic typing finds it unbearably restrictive to have to go back to\nprogramming in a language where you have to declare the type of\nevery variable, and can't make a list of objects of different types.\nI'm not the only one.  I know many Lisp hackers that this has happened\nto.  In fact, the most accurate measure of the relative power of programming\nlanguages might be the percentage of people who know the language\nwho will take any job where they get to use that language, regardless\nof the application domain.RestrictivenessI think most hackers know what it means for a language to feel restrictive.\nWhat's happening when you feel that?  I think it's the same feeling\nyou get when the street you want to take is blocked off, and you have to\ntake a long detour to get where you wanted to go.  There is something\nyou want to say, and the language won't let you.What's really going on here, I think, is that a restrictive language is\none that isn't succinct enough.  The problem is not simply that you can't\nsay what you planned to.  It's that the detour the language makes you\ntake is longer.  Try this thought experiment.  Suppose there were\nsome program you wanted to write, and the language wouldn't let you\nexpress it the way you planned to, but instead forced you to write the\nprogram in some other way that was shorter.  For me at least,\nthat wouldn't feel very restrictive.  It would be like the street you\nwanted to take being blocked off, and the policeman at the\nintersection directing you to a shortcut instead of a detour.  Great!I think most (ninety percent?) of\nthe feeling of restrictiveness comes from being forced to make the program\nyou write in the language longer than one you have in your head.\nRestrictiveness is mostly lack of succinctness.\nSo when a language feels restrictive, what that (mostly) means is that it isn't\nsuccinct enough, and when a language isn't succinct, it will\nfeel restrictive.ReadabilityThe quote I began with mentions two other qualities, regularity and\nreadability.  I'm not sure what regularity is, or what advantage,\nif any, code that is regular and readable has over code that is merely\nreadable.  But I think I know what is meant by readability, and I think\nit is also related to succinctness.We have to be careful here to distinguish between the readability of\nan individual line of code and the readability of the whole program.\nIt's the second that matters.  I agree that a line of Basic is likely to be\nmore readable than a line of Lisp.  But a program written in Basic is\nis going to have more lines than the same program written in\nLisp (especially once you cross over into Greenspunland). The\ntotal effort of reading the Basic program will surely be greater.\ntotal effort  = effort per line x number of lines\nI'm not as sure that readability is directly proportionate to succinctness\nas I am that power is, but certainly succinctness is a factor\n(in the mathematical sense; see equation above) in readability.\nSo it may not even be meaningful to say that the goal of a language is\nreadability, not succinctness; it could be like saying the goal was readability,\nnot readability.What readability-per-line does mean, to the user encountering the language\nfor the first time, is that source code will look unthreatening.  So\nreadability-per-line\ncould be a good marketing decision, even if it is a bad design\ndecision.  It's isomorphic to the very successful technique of letting\npeople pay in installments: instead of frightening them with a high\nupfront price, you tell them the low monthly payment.  Installment plans\nare a net lose for the buyer, though, as mere readability-per-line probably\nis for the programmer.\nThe buyer is going to make a lot of those low, low payments; and\nthe programmer is going to read a lot of those individually readable lines.This tradeoff predates programming languages.  If you're used to reading\nnovels and newspaper articles, your first experience of reading a math\npaper can be dismaying.  It could take half an hour to read a single page.\nAnd yet, I am pretty sure that the notation is not the problem, even though\nit may feel like it is.  The math paper is hard to read\nbecause the ideas are hard.  If you expressed the same ideas in prose\n(as mathematicians had to do before they evolved succinct notations),\nthey wouldn't be any easier to read, because the paper would grow to the\nsize of a book.To What Extent?A number of people have rejected\nthe idea that succinctness = power.  I think it would be more useful, instead\nof simply arguing that they are the same or aren't, to ask:\nto what extent does succinctness = power?\nBecause clearly succinctness is\na large part of what higher-level languages are for.  If it is not all they're\nfor, then what else are they for, and how important, relatively, are these\nother functions?I'm not proposing this just to make the debate more civilized.  I really\nwant to know the answer.  When, if ever,  is a language too succinct for\nits own good?The hypothesis I began with was that, except in pathological examples,\nI thought succinctness could be considered identical with power.  What\nI meant was that in any language anyone would design, they\nwould be identical, but that if someone wanted to design a language\nexplicitly to disprove this hyphothesis, they could probably do it.  I'm\nnot even sure of that, actually.Languages, not ProgramsWe should be clear that we are talking about the succinctness\nof languages, not of individual programs.\nIt certainly is possible for individual programs to be written too densely.I wrote about this in On Lisp. A complex macro\nmay have to save many times its own length to be justified.  If writing\nsome hairy macro could save you ten lines of code every time you use it,\nand the macro is itself ten lines of code, then you get a net saving in\nlines if you use it more than once.  But that could still be a bad move,\nbecause macro definitions are harder to read than ordinary code.  You\nmight have to use the macro ten or twenty times before it yielded a net\nimprovement in readability.I'm sure every language has such tradeoffs (though I suspect the stakes\nget higher as the language gets more powerful).  Every programmer must\nhave seen code that some clever person has made marginally shorter\nby using dubious programming tricks.So there is no argument about that-- at least, not from me.  Individual\nprograms can certainly be too succinct for their own good.  The question\nis, can a language be?  Can a language compel programmers to write\ncode that's short (in elements) at the expense of overall readability?One reason it's hard to imagine a language being too succinct is that if\nthere were some excessively compact way to phrase something, there would\nprobably also be a longer way.  For example, if you felt Lisp programs using\na lot of macros or higher-order functions were too dense,  you could, if you\npreferred, write code that was isomorphic to Pascal.  If you\ndon't want to express factorial in Arc as a call to a higher-order function\n(rec zero 1 * 1-)\nyou can also write out a recursive definition:\n(rfn fact (x) (if (zero x) 1 (* x (fact (1- x)))))\nThough I can't off the top of my head think of any examples, I am interested\nin the question of whether a language could be too succinct.  Are there languages\nthat force you to write code in a way that is crabbed and incomprehensible?\nIf anyone has examples, I would be very interested to see them.(Reminder: What I'm looking for are programs that are very dense according\nto the metric of \"elements\" sketched above, not merely programs that are\nshort because delimiters can be omitted and everything has a one-character name.)"},{"title":"Tablets","text":"December 2010I was thinking recently how inconvenient it was not to have a general\nterm for iPhones, iPads, and the corresponding things running\nAndroid.  The closest to a general term seems to be \"mobile devices,\"\nbut that (a) applies to any mobile phone, and (b) doesn't really\ncapture what's distinctive about the iPad.After a few seconds it struck me that what we'll end up calling\nthese things is tablets.  The only reason we even consider calling\nthem \"mobile devices\" is that the iPhone preceded the iPad.  If the\niPad had come first, we wouldn't think of the iPhone as a phone;\nwe'd think of it as a tablet small enough to hold up to your ear.The iPhone isn't so much a phone as a replacement for a phone.\nThat's an important distinction, because it's an early instance of\nwhat will become a common pattern.  Many if not most of the\nspecial-purpose objects around us are going to be replaced by apps\nrunning on tablets.This is already clear in cases like GPSes, music players, and\ncameras.  But I think it will surprise people how many things are\ngoing to get replaced.  We funded one startup that's\nreplacing keys.\nThe fact that you can change font sizes easily means the iPad\neffectively replaces reading glasses.  I wouldn't be surprised if\nby playing some clever tricks with the accelerometer you could even\nreplace the bathroom scale.The advantages of doing things in software on a single device are\nso great that everything that can get turned into software will.\nSo for the next couple years, a good recipe for startups\nwill be to look around you for things that people haven't realized\nyet can be made unnecessary by a tablet app.In 1938 Buckminster Fuller coined the term ephemeralization to\ndescribe the increasing tendency of physical machinery to be replaced\nby what we would now call software.  The reason tablets are going\nto take over the world is not (just) that Steve Jobs and Co are\nindustrial design wizards, but because they have this force behind\nthem.  The iPhone and the iPad have effectively drilled a hole that\nwill allow ephemeralization to flow into a lot of new areas.  No one\nwho has studied the history of technology would want to underestimate\nthe power of that force.I worry about the power Apple could have with this force behind\nthem.  I don't want to see another era of client monoculture like\nthe Microsoft one in the 80s and 90s.  But if ephemeralization is\none of the main forces driving the spread of tablets, that suggests\na way to compete with Apple: be a better platform for it.It has turned out to be a great thing that Apple tablets have\naccelerometers in them.  Developers have used the accelerometer in\nways Apple could never have imagined.  That's the nature of platforms.\nThe more versatile the tool, the less you can predict how people\nwill use it.  So tablet makers should be thinking: what else can\nwe put in there?  Not merely hardware, but software too.  What else\ncan we give developers access to?  Give hackers an inch and they'll\ntake you a mile.Thanks to Sam Altman, Paul Buchheit, Jessica Livingston, and\nRobert Morris for reading drafts of this."},{"title":"Take the Arc Challenge","text":"February 2008Arc's been out for a few days now.  Everyone seems to have an opinion\nabout it.  The low end are much the same as the low end of opinions\nabout anything online.  There's no high end yet, because no one has\nhad enough time yet to be able to speak from experience about what\nit's like to program in Arc.  Those are the responses I'm really\ninterested in.  But in the meantime, we have the medium-level\nresponses: the opinions of people who have some understanding of\nthe issues involved, but who are writing based on first impressions.I've noticed a strange pattern in these. The main fault they find\nwith Arc is that I don't seem to have had to work hard enough writing\nit.  Ron Garret\nwrites:\nAnd that is my main gripe about Arc: it has been so long in the\nmaking and set such lofty goals and then it seems to pretty much\npunt on all the hard problems of language design.\nI don't usually refute criticisms directly.  Refutations tend to\nbe more gratifying to write than to read.  But in this case I'm\ngoing to, because in this case Ron & Co are mistaken in an illuminating\nway.  Explaining why will clarify some important issues about\nlanguage design.Ron's right.  I didn't decide what problems to work on based on how\nhard they were.  Instead I used what might seem a rather mundane\ntest: I worked on things that would make programs shorter.Why would I do that?  Because making programs short is what high\nlevel languages are for.  It may not be 100% accurate to say the\npower of a programming language is in inverse proportion to the\nlength of programs written in it, but it's damned close.  Imagine\nhow preposterous it would sound if someone said \"The program is 10\nlines of code in your language and 50 in my language, but my language\nis more powerful.\"  You'd be thinking: what does he mean by power,\nthen?I'm not claiming that power is the only criterion by which to judge\nprogramming languages.  It would also be a legitimate goal, for\nexample, to design a language to be easy for kids to learn, or to compile\nefficiently (though this is less common than it used to be), or to\nlimit the damage that can be done by individual bad programmers\nwithin a group.  But power is the test of languages not designed\nfor such special purposes.So working on what makes programs short rather than what's hard\nto implement translates to:\nI chose what to work on based on the value to the user,\nrather than the cost to me.\nSurely this is the right order of priorities to have in designing\nnot just programming languages, but anything meant to be used\nby other people.This is not to say none of the stuff I did was hard.  Some of it\nseemed hard to me.  But in language design, solving problems, whether\nhard or easy, is not the goal.  Making a good language is.  The\nreal test of Arc—and any other general-purpose high level language—is not\nwhether it contains feature x or solves problem y, but how long\nprograms are in it.The programs that get shorter should be the ones users actually\nneed to write.  So my m.o. while working on Arc was to write\napplications in it, then comb through them line by line trying to\nimagine language features that would make them shorter.  Then I'd\nimplement those features, rewrite the program to use them, and\nstart over.  Here's a comment from the source of\nHacker News where I\noccasionally kept track:\n; results of (codetree \"news.arc\"):\n; 8787, 8760, 8738, 8726, 8823, 8755, 8703, 8628, 8587, 8565\n; 8633, 8573, 8552, 8520, 8510, 8498, 8549, 8515, 8684, 9025\n; 9573, 12196, 12469, 12648, 12373\n(The numbers go up sometimes because I'd added features to News.)This is one reason the source code of Arc itself is so short,\nincidentally.  I did the same thing to it.  But my first priority\nwas making applications shorter, not the language.  There are\nfeatures, most notably Prolog-style pattern-matching, that seem to\npromise great savings in length, but turn out only to be useful for\nwriting a few basic sequence operations like append, remove, and\nso on.  Prolog is a great language for writing append; after that\nit's all downhill.Another goal I had while writing Arc was to continue as long as\npossible in the mode in which McCarthy began.  In his original 1960\npaper he built Lisp up from \"axioms\" like car, cdr, and cons, through\n\"theorems\" like assoc and mapcar.\n[1]\nThere must be some optimal path\nall the way up to a complete language.  What is it?  McCarthy didn't\nget very far along it in his paper.  And after that the language\npassed into the hands of his grad students, who at the time were\nmore worried about the exigencies of making an interpreter run on\nthe IBM 704 than continuing McCarthy's axiomatic approach.  We've been\nliving with their hacks ever since.  Steele and Sussman tried to\nstart over when they first began working on Scheme, but they seem\nto have been practically the only ones.  And they made, at least\nfrom the point of view of brevity/power, some serious mistakes early\non.This seemed a territory worth exploring.  And I hoped that with the\naxioms pushing from below and the demands of brevity in real\napplications pushing from above, I'd be able to grow an optimal\ncore of operators.   I'm not claiming I have yet, just that that's\nthe goal: to find an optimal path from a small number of axioms\nup to a complete language for everyday use.  I've made compromises\nfor efficiency.  I'm not using Church numerals.\n[2]\nBut I've tried to preserve\nas much of the spirit of the original 1960 paper as I could.Building up the language from axioms is not an end in itself either.\nI'm only doing it because I suspect that's the way to get\nmaximum expressive power.How well does Arc deliver so far?  Does it make programs shorter\nthan they'd be in other languages?  Let's try measuring.I'm going to propose a simple problem as a challenge.\nWe'll collect solutions in each of the popular languages, and\ncompare their lengths.  Here it is:\nWrite a program that causes the url said\n(e.g. http://localhost:port/said) to produce a page\nwith an input field and a submit button.  When the submit\nbutton is pressed, that should produce a second page with\na single link saying \"click here.\"  When that is clicked\nit should lead to a third page that says \"you said: ...\"\nwhere ... is whatever the user typed in the original\ninput field.  The third page must only show what the\nuser actually typed.  I.e. the value entered in the\ninput field must not be passed in the url, or it would\nbe possible to change the behavior of the final page\nby editing the url.\nThough simple, as such tests have to be, this is not a contrived\nexample.  Web apps have to do this sort of thing all the time.  Nor\ndoes it depend on some sort of esoteric libraries that Arc has and\nother languages don't; this is all stuff that any language used to\nwrite Web apps would have to have already.Here's the answer in Arc:\n(defop said req\n(aform [w/link (pr \"you said: \" (arg _ \"foo\"))\n(pr \"click here\")]\n(input \"foo\")\n(submit)))\nIf you're not used to Arc you'll have to take my word for it, but\nthis is not code that has been compressed using coding tricks.  This\nwould be the standard way to write it in Arc.The most meaningful test of the length of a program is not lines\nor characters but the size of the codetree-- the tree you'd need\nto represent the source.  The Arc example has a codetree of 23\nnodes: 15 leaves/tokens + 8 interior nodes.  How long is it in your\nfavorite language?(Code to import standard libraries doesn't count, of course; you\ncan assume those are already loaded.)I've posted this problem on the Arc Forum at http://arclanguage.org/item?id=722.\nIf you have a solution in a language that's not yet represented,\nor a shorter or more correct solution for a language that is, please\nadd it.  It will be interesting to compare languages not just to\nArc but to one another.Update: May 2009The Arc version would now be slightly shorter:\n(defop said req\n(aform [onlink \"click here\" (pr \"you said: \" (arg _ \"foo\"))]\n(input \"foo\")\n(submit)))\nThis is 21 nodes: 14 leaves + 7 interior.Notes[1]\n\"Recursive Functions of Symbolic Expressions and Their Computation\nby Machine, Part I,\" CACM, April 1960.http://www-formal.stanford.edu/jmc/recursive/recursive.html[2]\nI did once try representing the integer n as a list of\nlength n, with horrifying results."},{"title":"Taking the Eco-Dome to Darfur","text":"When I give money to nonprofits, I look for ones that work like\nstartups.  I recently found one that is like a startup not only in\nits smallness, but also in the use of cool new technology.You've probably read about all the horrible things happening in Darfur\nrecently.  The American Sudanese\nPartnerships for Peace is going to try to repair some of the\ndamage.  And they're doing it in the most literal sense: they're going\nto help the Sudanese rebuild their destroyed villages, using some\ninnovative construction techniques developed by CalEarth.CalEarth's Eco-Dome\ncan be built out of nothing more than dirt, barbed wire, and the\nsame kind of polyethylene bags used to make sandbags to contain\nfloods.  The house will probably last longer if you mix some cement\nwith the dirt, but it's not absolutely necessary.  The bags come\nin the form of a continuous tube, and the house is constructed of\nlayers of dirt-filled \"snakes,\" with barbed wire laid between them\nto keep them from moving.It's 21st-century adobe: faster and easier than traditional adobe\nconstruction, because you don't have to make and dry individual\nbricks.  This construction technique can be learned quickly by\nanyone, and is about the cheapest possible way to build lasting\nshelter.  But these are by no means temporary buildings; they are\nso robust that they meet California building codes.The ASP is taking the Eco-Dome to Darfur.\nI learned about them because Y Combinator's architect, Kate Courteau,\nis part of the group.  Kate is the reason our places in Cambridge and\nMountain View look so cool.  She designed not only the spaces, but\nalso the pair of identical 30-foot tables\nwe have in each.  If you were wondering about the blur in the\npage, that's Kate, rushing off to do the next thing on the to-do\nlist in her hand.I can't say for certain that this scheme is going to work, but it\nhas as much as we ever ask for in a startup: good people and a good\nidea.If you want to help them, you can donate online.  They're\na registered nonprofit, so donations are tax-deductible."},{"title":"Taste for Makers","text":"February 2002\n\"...Copernicus'\naesthetic objections to [equants] provided one essential\nmotive for his rejection of the Ptolemaic system....\"- Thomas Kuhn, The Copernican Revolution\"All of us had been trained by Kelly Johnson and believed\nfanatically in his insistence that an airplane that looked\nbeautiful would fly the same way.\"- Ben Rich, Skunk Works\"Beauty is the first test: there is no permanent place in this\nworld for ugly mathematics.\"- G. H. Hardy, A Mathematician's Apology\nI was talking recently to a friend who teaches\nat MIT.  His field is hot now and\nevery year he is inundated by applications from\nwould-be graduate students.  \"A lot of them seem smart,\"\nhe said.  \"What I can't tell is whether they have any kind\nof taste.\"Taste.  You don't hear that word much now.\nAnd yet we still need the underlying\nconcept, whatever we call it.  What my friend meant was\nthat he wanted students who were not just good technicians,\nbut who could use their technical knowledge to\ndesign beautiful things.Mathematicians call good work \"beautiful,\"\nand so, either now or in the past, have\nscientists, engineers, musicians, architects, designers,\nwriters, and painters.\nIs it just a coincidence that they used the same word, or is\nthere some overlap in what they meant?  If there\nis an overlap, can we use one field's discoveries\nabout beauty to help us in another?For those of us who design things, these are not just\ntheoretical questions.  If there is such a thing as\nbeauty, we need to be able to recognize it.  We need\ngood taste to make good things.\nInstead of\ntreating beauty as an airy abstraction, to be either blathered\nabout or avoided depending on how one feels about airy\nabstractions, let's try considering it as a practical question:\nhow do you make good stuff?If you mention taste nowadays, a lot of people will tell\nyou that \"taste is subjective.\"\nThey believe this because it really feels that\nway to them.  When they like something, they have no idea\nwhy.  It could be because it's beautiful, or because their\nmother had one, or because they saw a movie star with one\nin a magazine, or because they know it's expensive.\nTheir thoughts are a tangle of unexamined impulses.Most of us are encouraged, as children, to leave this tangle\nunexamined.  If you make fun of your little brother for\ncoloring people green in his coloring book, your\nmother is likely to tell you something like \"you like to\ndo it your way and he likes to do it his way.\"Your mother at this point is not trying to teach you\nimportant truths about aesthetics.  She's trying to get\nthe two of you to stop bickering.Like many of the half-truths adults tell us, this one\ncontradicts other things they tell us.  After dinning\ninto you that taste is merely a matter of personal preference,\nthey take you to the museum and tell you that you should\npay attention because Leonardo is a great artist.What goes through the kid's head at this point?  What does\nhe think \"great artist\" means?  After having been\ntold for years that everyone just likes to do\nthings their own way, he is\nunlikely to head straight for the conclusion that a great\nartist is someone whose work is better than the others'.\nA far more likely theory, in his Ptolemaic model of\nthe universe, is that a great artist is something that's\ngood for you, like broccoli, because someone said so in a book.Saying that taste is just personal preference is a good way\nto prevent disputes.  The trouble is, it's not true.\nYou feel this when you start to design things.Whatever job people do, they naturally want to do better.\nFootball players\nlike to win games.  CEOs like to increase earnings.  It's\na matter of pride, and a real pleasure, to get better at\nyour job. But if\nyour job is to design things, and there is no such thing\nas beauty, then there is no way to get better at your job.\nIf taste is just personal preference, then everyone's is\nalready perfect: you like whatever you like, and that's it.As in any job, as you continue to design things, you'll get\nbetter at it.  Your tastes will change.  And, like anyone\nwho gets better at their job, you'll know you're getting\nbetter.  If so,\nyour old tastes were\nnot merely different, but worse.  Poof goes the axiom that\ntaste can't be wrong.Relativism is fashionable at the moment, and that may hamper\nyou from thinking about taste, even as yours grows.\nBut if you come out of the closet and admit, at least to yourself,\nthat there is such a thing as good and bad design, then you\ncan start to study good design in detail.\nHow has\nyour taste changed?  When you made mistakes, what\ncaused you to make them?  What have other people learned about\ndesign?Once you start to examine the question, it's surprising how\nmuch different fields' ideas of beauty have in common.  The same\nprinciples of good design crop up again and again.Good design is simple.  You hear this from math to\npainting.  In math it means that a shorter proof tends to be\na better one.  Where axioms are concerned, especially,\nless is more.  It means much the same thing in programming.\nFor architects and designers it means that beauty should\ndepend on a few carefully chosen structural elements\nrather than a profusion of superficial ornament.  (Ornament\nis not in itself bad, only when it's camouflage on insipid\nform.)  Similarly, in painting, a\nstill life of a few carefully observed and solidly\nmodelled objects will tend to be more interesting than a\nstretch of flashy\nbut mindlessly repetitive painting of, say, a lace collar.\nIn writing it means: say what you mean\nand say it briefly.It seems strange to have to emphasize simplicity.\nYou'd think simple would be the default.  Ornate\nis more work.  But something seems to come over people\nwhen they try to be creative.  Beginning writers adopt\na pompous tone that doesn't sound anything like the way\nthey speak.  Designers trying to be artistic resort to\nswooshes and curlicues.  Painters discover that they're expressionists.\nIt's all evasion.\nUnderneath\nthe long words or the \"expressive\" brush strokes, there\nis not much going on, and that's frightening.When you're\nforced to be simple, you're forced to face the real problem.\nWhen you can't deliver ornament, you have to deliver\nsubstance.Good design is timeless.\nIn math, every proof is timeless unless it contains a mistake.\nSo what does Hardy mean when he says there is no permanent\nplace for ugly mathematics?  He means the same thing Kelly Johnson did:\nif something is ugly, it can't be the best solution.  There\nmust be a better one, and eventually\nsomeone will discover it.Aiming at timelessness is a way to make\nyourself find the best answer:\nif you can imagine someone surpassing you, you should do it yourself.\nSome of the greatest masters did this so well that they\nleft little room for those who came after.\nEvery engraver since Durer has had to live in his shadow.Aiming at timelessness is also a way to evade\nthe grip of fashion.  Fashions almost by definition\nchange with time, so if you can make something that\nwill still look good far into the future, then its\nappeal must derive more from merit and less from fashion.Strangely enough, if you want to make something that will\nappeal to future generations, one way to do it is to\ntry to appeal to past generations.  It's hard to guess what\nthe future will be like, but we can be sure it will be\nlike the past in caring nothing for present fashions.\nSo if you can make something that appeals to people today\nand would also have appealed to people in 1500, there is a good\nchance it will appeal to people in 2500.Good design solves the right problem. The typical\nstove has four burners arranged in a square, and a dial\nto control each.  How do you arrange the dials?  The\nsimplest answer is to put them in a row.  But this is a\nsimple answer to the wrong question.\nThe dials are for humans to use, and if you put them in a row,\nthe unlucky human will have to stop and think each time\nabout which dial matches which burner.  Better to arrange the dials\nin a square like the burners.A lot of bad design is industrious, but misguided.\nIn the mid twentieth century there was a vogue for\nsetting text in sans-serif fonts.\nThese fonts are closer to the pure, underlying letterforms.\nBut in text that's not the problem you're trying to solve.\nFor legibility it's more important that letters be easy\nto tell apart.\nIt may look Victorian, but a Times Roman lowercase g is\neasy to tell from a lowercase y.Problems can be improved as well as solutions.\nIn software, an intractable problem can usually be replaced\nby an equivalent one that's easy to solve.\nPhysics progressed faster as the problem became\npredicting observable behavior, instead of reconciling it\nwith scripture.Good design is suggestive.\nJane Austen's novels contain almost no\ndescription; instead of telling you how\neverything looks, she tells her story so well that you\nenvision the scene for yourself.\nLikewise, a painting that suggests is usually more engaging\nthan one that tells.  Everyone makes up their own story about the\nMona Lisa.In architecture and design, this\nprinciple means that a building or object should let you\nuse it how you want: a good building, for example, will\nserve as a backdrop for whatever life people want to lead in it, instead\nof making them live as if they were executing a program\nwritten by the architect.In software, it means you should give users a few\nbasic elements that they can combine as they wish, like Lego.\nIn math it means a proof that\nbecomes the basis for a lot of new work is\npreferable to a proof that was difficult,\nbut doesn't lead to future discoveries; in the\nsciences generally, citation is considered a rough\nindicator of merit.Good design is often slightly funny.  This one\nmay not always be true.  But Durer's\nengravings\nand Saarinen's\nwomb chair and the\nPantheon and the\noriginal Porsche 911 all seem\nto me slightly funny.  Godel's incompleteness theorem\nseems like a practical joke.I think it's because humor is related to strength.\nTo have a sense of humor is to be strong:\nto keep one's sense of humor is to shrug off misfortunes,\nand to lose one's sense of humor is to be wounded by them.\nAnd so the mark-- or at least the prerogative-- of strength\nis not to take\noneself too seriously.\nThe confident will often, like\nswallows, seem to be making fun of the whole process slightly,\nas Hitchcock does in his films or Bruegel in his paintings-- or\nShakespeare, for that matter.Good design may not have to be funny, but it's hard to\nimagine something that could be called humorless also being\ngood design.Good design is hard.  If you look at the people who've\ndone great work, one thing they all seem to have in common is that they\nworked very hard.  If you're not working hard,\nyou're probably wasting your time.Hard problems call for great\nefforts.  In math, difficult proofs require ingenious solutions,\nand those tend to be interesting.  Ditto in engineering.When you\nhave to climb a mountain you toss everything unnecessary\nout of your pack.  And so an architect who has to build\non a difficult site, or a small budget, will find that he\nis forced to produce an elegant design.  Fashions and\nflourishes get knocked aside by the difficult business\nof solving the problem at all.Not every kind of hard is good.  There is good pain and bad pain.\nYou want the kind of pain you get from going running, not the\nkind you get from stepping on a nail.\nA difficult\nproblem could be good for a designer, but a fickle client or unreliable\nmaterials would not be.In art, the highest place has traditionally been given to\npaintings of people.  There is something to this tradition,\nand not just because pictures of faces get to press\nbuttons in our brains that other pictures don't.  We are\nso good at looking at faces that we force anyone who\ndraws them to work hard to satisfy us.  If you\ndraw a tree and you change the angle of a branch\nfive degrees, no one will know.  When you change the angle\nof someone's eye five degrees, people notice.When Bauhaus designers adopted Sullivan's \"form follows function,\"\nwhat they meant was, form should follow function.  And\nif function is hard enough, form is forced to follow it,\nbecause there is no effort to spare for error.  Wild animals\nare beautiful because they have hard lives.Good design looks easy.  Like great athletes,\ngreat designers make it look easy.  Mostly this is\nan illusion.  The easy, conversational tone of good\nwriting comes only on the eighth rewrite.In science and engineering, some of the greatest\ndiscoveries seem so simple that you say to yourself,\nI could have thought of that.  The discoverer is\nentitled to reply, why didn't you?Some Leonardo heads are just a few lines.  You look\nat them and you think, all you have to do is get eight\nor ten lines in the right place and you've made this beautiful\nportrait.  Well, yes, but you have to get them in\nexactly the right place.  The slightest error\nwill make the whole thing collapse.Line drawings are in fact the most difficult visual\nmedium, because they demand near perfection.\nIn math terms, they are a closed-form solution; lesser\nartists literally solve the same problems by successive\napproximation.  One of the reasons kids give up drawing\nat ten or so is that they decide to start\ndrawing like grownups, and one of the first things\nthey try is a line drawing of a face.  Smack!In most fields the appearance of ease seems to come with\npractice.  Perhaps what practice does is train your\nunconscious mind to handle tasks that used to\nrequire conscious thought.  In some cases\nyou literally train your body.  An expert pianist can\nplay notes faster than the brain can send signals to\nhis hand.\nLikewise an artist, after a while, can\nmake visual perception flow in through his eye and\nout through his hand as automatically as someone tapping his foot to\na beat.When people talk about being in\n\"the zone,\" I think what they mean is that the\nspinal cord has the situation under control.\nYour spinal cord is less hesitant, and\nit frees conscious thought for the hard problems.Good design uses symmetry.\nI think symmetry may just\nbe one way to achieve simplicity, but it's important enough\nto be mentioned on its own.\nNature uses it a lot, which is a good sign.There are two kinds of symmetry, repetition and recursion.\nRecursion means repetition in subelements, like the\npattern of veins in a leaf.Symmetry is unfashionable in some fields now, in reaction to\nexcesses in the past.  Architects started consciously\nmaking buildings asymmetric in Victorian times and by the\n1920s asymmetry was an explicit premise of modernist architecture.\nEven these buildings only tended to be asymmetric\nabout major axes, though; there were hundreds of minor symmetries.In writing you find symmetry at every level, from the phrases\nin a sentence to the plot of a novel.  You find the same\nin music and art.\nMosaics (and some Cezannes) get extra visual punch by making\nthe whole picture out of the same atoms.  Compositional\nsymmetry yields some of the most memorable paintings,\nespecially when two halves react to one another, as in\nthe Creation of Adam or\nAmerican Gothic.In math and engineering, recursion, especially, is a big win.\nInductive proofs are wonderfully short.  In software,\na problem that can be solved by recursion is nearly always\nbest solved that way. The Eiffel Tower looks striking partly\nbecause it is a recursive solution, a tower on a tower.The danger of symmetry, and repetition especially, is that\nit can be used as a substitute for thought.Good design resembles nature.  It's not so much that\nresembling nature is intrinsically good as that nature\nhas had a long time to work on the\nproblem.  It's a good sign when your answer resembles nature's.It's not cheating to copy.\nFew would deny that a story should be like life.\nWorking from life is a valuable tool in painting too, though its\nrole has often been misunderstood.\nThe aim is not simply to make a record.\nThe point of painting from life is\nthat it gives your mind something to chew on:  when your\neyes are looking at something, your hand will do more\ninteresting work.Imitating nature also works in engineering.  Boats have\nlong had spines and ribs like an animal's ribcage.\nIn some cases we may have to wait for better technology:\nearly aircraft designers were mistaken to\ndesign aircraft that looked like birds, because they didn't\nhave materials or power sources light enough (the Wrights' engine\nweighed 152 lbs. and\ngenerated only 12 hp.) or control systems sophisticated\nenough for machines that flew like birds, but I could\nimagine little unmanned reconnaissance planes flying\nlike birds in fifty years.Now that we have enough computer power, we can imitate nature's\nmethod as well as its results.  Genetic algorithms may let us\ncreate things too complex to design in the ordinary\nsense.Good design is redesign.  It's rare to get things right\nthe first time.  Experts expect to throw away some early work.\nThey plan for plans to change.It takes confidence to throw work away.  You have to be able\nto think, there's more where that came from.\nWhen people first start drawing, for example,\nthey're often reluctant to redo parts that aren't\nright; they feel they've been lucky to get that far,\nand if they try to redo something, it will turn out worse.  Instead\nthey convince themselves that the drawing is not that bad,\nreally-- in fact, maybe they meant it to look that way.Dangerous territory, that; if anything you should\ncultivate dissatisfaction.\nIn Leonardo's drawings there are often five\nor six attempts to get a line right.\nThe distinctive back of the Porsche\n911 only appeared in the redesign of an awkward\nprototype.\nIn Wright's early plans for the\nGuggenheim,\nthe right half was a ziggurat; he inverted it to get the\npresent shape.Mistakes are natural.  Instead of treating them\nas disasters, make them easy to acknowledge and easy to fix.\nLeonardo more or less invented the sketch, as a\nway to make drawing bear a greater weight of exploration.\nOpen-source software has fewer bugs because it admits the\npossibility of bugs.It helps to have a medium that makes change easy.\nWhen oil paint replaced tempera in the fifteenth century,\nit helped\npainters to deal with difficult subjects like the human\nfigure because, unlike tempera, oil can be blended and overpainted.Good design can copy.  Attitudes to copying\noften make a round trip.  A novice\nimitates without knowing it; next he tries\nconsciously to be original; finally, he decides it's\nmore important to be right than original.Unknowing imitation is almost a recipe for bad design.\nIf you don't know where your ideas are coming from,\nyou're probably imitating an imitator.\nRaphael so pervaded mid-nineteenth century taste that almost\nanyone who tried to draw was imitating him, often at several\nremoves.\nIt was this, more than Raphael's own work, that bothered\nthe Pre-Raphaelites.The ambitious are not content to imitate. The\nsecond phase in the growth of taste is a conscious\nattempt at originality.I think the\ngreatest masters go on to achieve a kind of selflessness.\nThey just want to get the right answer, and if part of the\nright answer has already been discovered by someone else,\nthat's no reason not to use it.\nThey're confident enough to take from anyone without\nfeeling that their own vision will be lost in the process.Good design is often strange.  Some of the very best work\nhas an uncanny quality: Euler's\nFormula,\nBruegel's\nHunters in the Snow, the\nSR-71, Lisp.  They're not just\nbeautiful, but strangely beautiful.I'm not sure why.  It may just be my own stupidity.  A\ncan-opener must seem miraculous to a dog.  Maybe if I were smart\nenough it would seem the most natural thing in the world that\nei*pi = -1.  It is after all necessarily true.Most of the qualities I've mentioned are things that can be\ncultivated, but I don't think it works to cultivate strangeness.\nThe best you can do is not squash it if it starts to appear.\nEinstein didn't try to make relativity strange.\nHe tried to make it true, and the truth turned out to be strange.At an art school where I once studied, the students wanted\nmost of all to develop a personal style.\nBut if you just try to make good things, you'll\ninevitably do it in a distinctive way, just as each person\nwalks in a distinctive way.  Michelangelo was not trying\nto paint like Michelangelo.  He was just trying to paint\nwell; he couldn't help painting like Michelangelo.The only style worth having is the one you can't help.\nAnd this is especially true for strangeness.  There is no\nshortcut to it.  The Northwest Passage that the Mannerists,\nthe Romantics, and two generations of American high school\nstudents have searched for does not seem to exist.  The\nonly way to get there is to go through good and come out\nthe other side.Good design happens in chunks.  The inhabitants\nof fifteenth century Florence included Brunelleschi, Ghiberti,\nDonatello, Masaccio, Filippo Lippi,\nFra Angelico, Verrocchio, Botticelli, Leonardo, and Michelangelo.\nMilan at the time was as big as Florence.\nHow many fifteenth century Milanese artists can you name?Something was happening in Florence in the fifteenth century.\nAnd it can't have been heredity, because it isn't happening now.\nYou have to assume that whatever\ninborn ability Leonardo and Michelangelo had, there were\npeople born in Milan with just as much.  What happened to\nthe Milanese Leonardo?There are roughly a thousand times\nas many people alive in the US right now as lived in\nFlorence during the fifteenth century.  A thousand Leonardos\nand a thousand Michelangelos walk among us.\nIf DNA ruled, we should be greeted daily by artistic\nmarvels.  We aren't, and the reason is that to make Leonardo\nyou need more than his innate ability.  You also need Florence\nin 1450.Nothing is more powerful\nthan a community of talented people working on related\nproblems.  Genes count for little by comparison: being a genetic\nLeonardo was not enough to compensate for having been born\nnear Milan instead of Florence.\nToday we move around more, but great work still comes\ndisproportionately from a few hotspots:\nthe Bauhaus, the Manhattan Project, the New Yorker,\nLockheed's Skunk Works, Xerox Parc.At any given time there are a\nfew hot topics and a few groups doing great work on them,\nand it's nearly impossible to do\ngood work yourself if you're too far removed from one\nof these centers.  You can push or pull these trends\nto some extent, but you can't break away from them.\n(Maybe you can, but the Milanese Leonardo couldn't.)Good design is often daring.  At every period\nof history, people have believed things that were just\nridiculous, and believed them so strongly that you risked\nostracism or even violence by saying otherwise.If our own time were any different, that would be remarkable.\nAs far as I can tell it isn't.This problem afflicts not just every\nera, but in some degree every field.\nMuch Renaissance art was in its time considered shockingly secular:\naccording to Vasari, Botticelli repented and gave up painting, and\nFra Bartolommeo and Lorenzo di Credi actually burned some of their\nwork.\nEinstein's theory of relativity offended many contemporary physicists,\nand was not fully accepted for decades-- in France, not until the\n1950s.Today's experimental error is tomorrow's new theory.  If\nyou want to discover great new things, then instead of turning\na blind eye to the places where conventional wisdom and\ntruth don't quite meet, you should pay particular attention\nto them.As a practical matter, I think it's easier to see ugliness\nthan to imagine beauty.  Most of the people who've made beautiful\nthings seem to have done it by fixing something that they\nthought ugly.  Great work usually seems to happen because someone sees\nsomething and thinks, I could do better than that.  Giotto\nsaw traditional Byzantine madonnas painted according to a\nformula that had satisfied everyone for centuries, and to him\nthey looked wooden and unnatural.\nCopernicus was so troubled by a hack that all his contemporaries\ncould tolerate that he felt there must be a better solution.Intolerance for ugliness is not in itself enough.  You have to\nunderstand a field well before you develop a good nose for\nwhat needs fixing.  You have to do your homework.  But as\nyou become expert in a field, you'll start to hear little\nvoices saying, What a hack!  There must be a better way.\nDon't ignore those voices.  Cultivate them.  The recipe for\ngreat work is: very exacting taste, plus the ability\nto gratify it.NotesSullivan\nactually said \"form ever follows function,\" but\nI think the usual misquotation is closer to what modernist\narchitects meant.Stephen G. Brush, \"Why was Relativity Accepted?\"\nPhys. Perspect. 1 (1999) 184-214."},{"title":"Ten E-Commerce Mistakes","text":"(This article was written in 1997 and appeared in a number of\nmagazines and newspapers.  Some of the mistakes it\nuses as examples have since been fixed, but the points remain valid.)How can you make money online?  You can start by avoiding the ten\nclassic mistakes that trip up online merchants.  If you merely\navoid these mistakes, you will be most of the way toward succeeding\nonline.1. Lack of FocusOn the Web, even more than in the physical world, a small\nbusiness has to have a sharp focus.  A Web giant like Amazon.com\ncan go after a big category, like books.  A small business has\nto aim for a more sharply-defined niche.As a rule of thumb, a business will do well on the Web if it could\nprosper next door to Wal-Mart.  There is no physical distance\non the Web: you are next to Wal-Mart.  So if you are just selling\na smaller selection of the same products, you don't have a chance.How do you succeed?  Specialize.  There are thousands of\nprofitable niches that the big players don't have the time\nto focus on: skateboard wheels, organic seeds, antique watches,\nyou name it.  The key point is to choose a niche that is the\nright size for you.2. Lack of PromotionYou can't just open a Web site and expect people to flood in.  You\nmay get some amount of traffic from search engines for free, but\nif you really want to succeed you have to create traffic.You can't wait for customers to come to you.  You have to figure\nout where they are, go there, and drag them back to your store.That is, think of what sites your customers would be likely to\nvisit, and either run ads there or do revenue-sharing deals in\nreturn for referrals. Then measure which sites send you the most\nsales per capita, and focus on them.3. Obstacles to ShoppingThe single biggest mistake in e-commerce was probably one\nmade by Wal-Mart.  For their first two years online,\nthey made visitors create an account, with a\nuser id and a password, just to put something in a shopping\nbasket.That kind of obstacle stops shoppers like a concrete wall.  Most\npeople who put an item in their shopping basket are still just\nbrowsing.  They are not committed to buy.  If you put a big obstacle\nin their way that early, they'll just leave.It's common sense: don't make people jump through hoops in order\nto give you money.  If you are going to put obstacles in people's\nway, at least wait until after they have given you their credit\ncard number.Tracking your customers by making them register is like measuring\nhow much water there is in a glass by dropping it on the floor.4. SpamIt's easy to buy lists of millions of email addresses.  You might\nthink that sending email to a million people would be a good way\nto promote your site.  Such email is called spam, and it is a big\nmistake.You may draw some traffic, but you will also label yourself to a\nmillion people as dishonest and amateurish.  That is bad for any\nbusiness, but it is a disaster for an online store, where consumers\nhave to trust you without seeing or talking to you.As an online merchant, you need a spotless reputation.  Spam is\nnot the way to achieve that.5. A Dynamically Generated SiteSome Web sites are dynamically generated.  The pages are created\nfrom a database as the visitor looks at them.  It sounds like a\ngood thing for a Web site to be \"dynamic.\"  In fact, it is the\nworst thing an online store can be.The reason is, search engines ignore dynamically-generated pages.\nA dynamically generated site looks to a search engine the way a\nstealth plane looks to radar.And search engines are the source of traffic for every Web site.\nSo unless you make up for it by spending a lot on advertising, a\ndynamically-generated Web site will get almost zero traffic.It's surprising how few people realize this.  Most merchants who\nhave dynamically generated sites don't realize it, in fact.  They\njust wonder why no one comes to visit them.6. A Slow SiteWhen you design a Web site, it is tempting to put in a lot of fancy\ngraphics.  They make your site look so much better, at least on\nyour graphic designer's desktop computer.It doesn't look the same to consumers.  Most of them will be looking\nat your site through a modem.  And all those juicy graphics make\nyour site slow to download.Which means, if your site is too fancy, people won't even wait to\nsee it.  They'll just leave and go somewhere else.  Remember, these\npeople are called \"web surfers.\"  Like TV \"channel surfers,\"  they\nare not interested in waiting.The worst place to put a huge image is right on your front page.\nUnfortunately, that is just where badly designed sites usually have\nthem.7. Amateurish AppearanceOverall the Web is pretty sloppy, but an online store can't afford\nto be.  An online store is trying to convince people to buy.  So\nyour online store has to be the graphic equivalent of the big marble\nbuilding a bank might build to show how stable and trustworthy it\nis.If you want visitors to take out their credit cards, you have to\nlook the same: solid and expensive.  How do you do that?  Graphics.\nAll there is on a Web page is text and graphics. The text all looks\nthe same.  So except for spelling mistakes, only graphics differentiate\none site from another.You have to be careful. If you misuse or overuse graphics, you'll\nhave a slow site.  But if you know what you are doing, or use\nsoftware that knows what it's doing, you can make top quality Web\npages that download in under 10 seconds.8. Regular Retail PricesIt is usually a mistake to charge regular retail prices on the Web.\nSecurity is not what stops people from ordering online.  It's\nunfamiliarity.  You have to train people to buy from you.  Unless\nyou give them an incentive, they won't take the plunge.Low prices are the best incentive.  You can afford it, because\nselling on the Web is so much cheaper.  Perhaps $20 per order\ncheaper than catalogs, for example.  Why not split the difference\nwith your customers?  If you don't offer this incentive, your\ncompetitors will.Amazon.com gives such big discounts to online shoppers that they\ndon't make a profit.  Are they stupid?  No, they are training\nshoppers to buy from them.  It works.  Now that I know how to order\nfrom Amazon, I have no incentive even to look elsewhere.9. Bad Domain NameAmazon.com makes more money online than Barnes\nand Noble.  There are various reasons why.  They are a lot more\naggressive, and their site looks better.  But I am sure that part\nof the reason is simply that Barnes and Noble has such an awful\ndomain name.barnesandnoble.comWho wants to type that into their browser?  It's awkward even to\nthink about, let alone to type.The worst domain name, of course, is no domain name.  You should\ntry to be something.com, and there are still plenty of good short\nsomethings available.10. Your Own ServerSetting up your own Web server is expensive and a constant source\nof headaches.  Most of the companies that set up their own Web\nservers don't actually need them.  They do it because it sounds\nimpressive to have your own server.  In return for sounding\nimpressive, they trade reliability.No matter what the salesman says, running a Web server is not like\nplugging in a toaster.  Something breaks every couple days.  Anyone\nin charge of a high-traffic Web server carries a pager, without\nexception.  That alone should tell you what is going to happen if\nyour company has its own server."},{"title":"The 18 Mistakes That Kill Startups","text":"October 2006In the Q & A period after a recent talk, someone asked what made\nstartups fail.  After standing there gaping for a few seconds I\nrealized this was kind of a trick question.  It's equivalent to\nasking how to make a startup succeed—if you avoid every cause of\nfailure, you succeed—and that's too big a question to answer on\nthe fly.Afterwards I realized it could be helpful to look at the problem\nfrom this direction.  If you have a list of all the things you\nshouldn't do, you can turn that into a recipe for succeeding just\nby negating.  And this form of list may be more useful in practice.\nIt's easier to catch yourself doing something you shouldn't than\nalways to remember to do something you should.\n[1]In a sense there's just one mistake that kills startups: not making\nsomething users want.  If you make something users want, you'll\nprobably be fine, whatever else you do or don't do.  And if you\ndon't make something users want, then you're dead, whatever else\nyou do or don't do.  So really this is a list of 18 things that\ncause startups not to make something users want.  Nearly all failure\nfunnels through that.1. Single FounderHave you ever noticed how few successful startups were founded by\njust one person?  Even companies you think of as having one founder,\nlike Oracle, usually turn out to have more.  It seems unlikely this\nis a coincidence.What's wrong with having one founder?  To start with, it's a vote\nof no confidence.  It probably means the founder couldn't talk any\nof his friends into starting the company with him.  That's pretty\nalarming, because his friends are the ones who know him best.But even if the founder's friends were all wrong and the company\nis a good bet, he's still at a disadvantage.  Starting a startup\nis too hard for one person.  Even if you could do all the work\nyourself, you need colleagues to brainstorm with, to talk you out\nof stupid decisions, and to cheer you up when things go wrong.The last one might be the most important.  The low points in a\nstartup are so low that few could bear them alone.  When you have\nmultiple founders, esprit de corps binds them together in a way\nthat seems to violate conservation laws.  Each thinks \"I can't let\nmy friends down.\"  This is one of the most powerful forces in human\nnature, and it's missing when there's just one founder.2. Bad LocationStartups prosper in some places and not others.  Silicon Valley\ndominates, then Boston, then Seattle, Austin, Denver, and New York.  After\nthat there's not much.  Even in New York the number of startups per\ncapita is probably a 20th of what it is in Silicon Valley.  In towns\nlike Houston and Chicago and Detroit it's too small to measure.Why is the falloff so sharp?  Probably for the same reason it is\nin other industries.  What's the sixth largest fashion center in\nthe US?  The sixth largest center for oil, or finance, or publishing?\nWhatever they are they're probably so far from the top that it would\nbe misleading even to call them centers.It's an interesting question why cities\nbecome startup hubs, but\nthe reason startups prosper in them is probably the same as it is\nfor any industry: that's where the experts are.  Standards are\nhigher; people are more sympathetic to what you're doing; the kind\nof people you want to hire want to live there; supporting industries\nare there; the people you run into in chance meetings are in the\nsame business.  Who knows exactly how these factors combine to boost\nstartups in Silicon Valley and squish them in Detroit, but it's\nclear they do from the number of startups per capita in each.3. Marginal NicheMost of the groups that apply to Y Combinator suffer from a common\nproblem: choosing a small, obscure niche in the hope of avoiding\ncompetition.If you watch little kids playing sports, you notice that below a\ncertain age they're afraid of the ball.  When the ball comes near\nthem their instinct is to avoid it.  I didn't make a lot of catches\nas an eight year old outfielder, because whenever a fly ball came\nmy way, I used to close my eyes and hold my glove up more for\nprotection than in the hope of catching it.Choosing a marginal project is the startup equivalent of my eight\nyear old strategy for dealing with fly balls.  If you make anything\ngood, you're going to have competitors, so you may as well face\nthat.  You can only avoid competition by avoiding good ideas.I think this shrinking from big problems is mostly unconscious.\nIt's not that people think of grand ideas but decide to pursue\nsmaller ones because they seem safer.  Your unconscious won't even\nlet you think of grand ideas.  So the solution may be to think about\nideas without involving yourself.  What would be a great idea for\nsomeone else to do as a startup?4. Derivative IdeaMany of the applications we get are imitations of some existing\ncompany.  That's one source of ideas, but not the best.  If you\nlook at the origins of successful startups, few were started in\nimitation of some other startup.  Where did they get their ideas?\nUsually from some specific, unsolved problem the founders identified.Our startup made software for making online stores.  When we started\nit, there wasn't any; the few sites you could order from were\nhand-made at great expense by web consultants.  We knew that if\nonline shopping ever took off, these sites would have to be generated\nby software, so we wrote some.  Pretty straightforward.It seems like the best problems to solve are ones that affect you\npersonally.  Apple happened because Steve Wozniak wanted a computer,\nGoogle because Larry and Sergey couldn't find stuff online, Hotmail\nbecause Sabeer Bhatia and Jack Smith couldn't exchange email at\nwork.So instead of copying the Facebook, with some variation that the\nFacebook rightly ignored, look for ideas from the other direction.\nInstead of starting from companies and working back to the problems\nthey solved, look for problems and imagine the company that might\nsolve them.\n[2]\nWhat do people complain about?  What do you wish there was?5. ObstinacyIn some fields the way to succeed is to have a vision of what you\nwant to achieve, and to hold true to it no matter what setbacks you\nencounter.  Starting startups is not one of them.  The stick-to-your-vision\napproach works for something like winning an Olympic gold medal,\nwhere the problem is well-defined.  Startups are more like science,\nwhere you need to follow the trail wherever it leads.So don't get too attached to your original plan, because it's\nprobably wrong.  Most successful startups end up doing something\ndifferent than they originally intended—often so different that\nit doesn't even seem like the same company.  You have to be prepared\nto see the better idea when it arrives.  And the hardest part of\nthat is often discarding your old idea.But openness to new ideas has to be tuned just right.  Switching\nto a new idea every week will be equally fatal.  Is there some kind\nof external test you can use?  One is to ask whether the ideas\nrepresent some kind of progression.  If in each new idea you're\nable to re-use most of what you built for the previous ones, then\nyou're probably in a process that converges.  Whereas if you keep\nrestarting from scratch, that's a bad sign.Fortunately there's someone you can ask for advice: your users.  If\nyou're thinking about turning in some new direction and your users\nseem excited about it, it's probably a good bet.6. Hiring Bad ProgrammersI forgot to include this in the early versions of the list,\nbecause nearly all the founders I know are programmers.  This is\nnot a serious problem for them.  They might accidentally hire someone\nbad, but it's not going to kill the company.  In a pinch they can\ndo whatever's required themselves.But when I think about what killed most of the startups in the\ne-commerce business back in the 90s, it was bad programmers.  A lot\nof those companies were started by business guys who thought the\nway startups worked was that you had some clever idea and then hired\nprogrammers to implement it.  That's actually much harder than it\nsounds—almost impossibly hard in fact—because business guys\ncan't tell which are the good programmers.  They don't even get a\nshot at the best ones, because no one really good wants a job\nimplementing the vision of a business guy.In practice what happens is that the business guys choose people\nthey think are good programmers (it says here on his resume that\nhe's a Microsoft Certified Developer) but who aren't.  Then they're\nmystified to find that their startup lumbers along like a World War\nII bomber while their competitors scream past like jet fighters.\nThis kind of startup is in the same position as a big company,\nbut without the advantages.So how do you pick good programmers if you're not a programmer?  I\ndon't think there's an answer.  I was about to say you'd have to\nfind a good programmer to help you hire people.  But if you can't\nrecognize good programmers, how would you even do that?7. Choosing the Wrong PlatformA related problem (since it tends to be done by bad programmers)\nis choosing the wrong platform.  For example, I think a lot of\nstartups during the Bubble killed themselves by deciding to build\nserver-based applications on Windows.  Hotmail was still running\non FreeBSD for years after Microsoft bought it, presumably because\nWindows couldn't handle the load.  If Hotmail's founders\nhad chosen to use Windows, they would have been swamped.PayPal only just dodged this bullet.  After they merged with X.com,\nthe new CEO wanted to switch to Windows—even after PayPal cofounder\nMax Levchin showed that their software scaled only 1% as well on\nWindows as Unix.  Fortunately for PayPal they switched CEOs instead.Platform is a vague word.  It could mean an operating system, or a\nprogramming language, or a \"framework\" built on top of a programming\nlanguage.  It implies something that both supports and limits, like\nthe foundation of a house.The scary thing about platforms is that there are always some that\nseem to outsiders to be fine, responsible choices and yet, like\nWindows in the 90s, will destroy you if you choose them.  Java\napplets were probably the most spectacular example.  This was\nsupposed to be the new way of delivering applications.  Presumably\nit killed just about 100% of the startups who believed that.How do you pick the right platforms?  The usual way is to hire good\nprogrammers and let them choose.  But there is a trick you could\nuse if you're not a programmer: visit a top computer science\ndepartment and see what they use in research projects.8. Slowness in LaunchingCompanies of all sizes have a hard time getting software done.  It's\nintrinsic to the medium; software is always 85% done.  It takes an\neffort of will to push through this and get something released to\nusers.\n[3]Startups make all kinds of excuses for delaying their launch.  Most\nare equivalent to the ones people use for procrastinating in everyday\nlife.  There's something that needs to happen first.  Maybe.  But\nif the software were 100% finished and ready to launch at the push\nof a button, would they still be waiting?One reason to launch quickly is that it forces you to actually\nfinish some quantum of work.  Nothing is truly finished till it's\nreleased; you can see that from the rush of work that's always\ninvolved in releasing anything, no matter how finished you thought\nit was.  The other reason you need to launch is that it's only by\nbouncing your idea off users that you fully understand it.Several distinct problems manifest themselves as delays in launching:\nworking too slowly; not truly understanding the problem; fear of\nhaving to deal with users; fear of being judged; working on too\nmany different things; excessive perfectionism.  Fortunately you\ncan combat all of them by the simple expedient of forcing yourself\nto launch something fairly quickly.9. Launching Too EarlyLaunching too slowly has probably killed a hundred times more\nstartups than launching too fast, but it is possible to launch too\nfast.  The danger here is that you ruin your reputation.  You launch\nsomething, the early adopters try it out, and if it's no good they\nmay never come back.So what's the minimum you need to launch?  We suggest startups think\nabout what they plan to do, identify a core that's both (a) useful\non its own and (b) something that can be incrementally expanded\ninto the whole project, and then get that done as soon as possible.This is the same approach I (and many other programmers) use for\nwriting software.  Think about the overall goal, then start by\nwriting the smallest subset of it that does anything useful.  If\nit's a subset, you'll have to write it anyway, so in the worst case\nyou won't be wasting your time.  But more likely you'll find that\nimplementing a working subset is both good for morale and helps you\nsee more clearly what the rest should do.The early adopters you need to impress are fairly tolerant.  They\ndon't expect a newly launched product to do everything; it just has\nto do something.10. Having No Specific User in MindYou can't build things users like without understanding them.  I\nmentioned earlier that the most successful startups seem to have\nbegun by trying to solve a problem their founders had.  Perhaps\nthere's a rule here: perhaps you create wealth in proportion to how\nwell you understand the problem you're solving, and the problems\nyou understand best are your own.\n[4]That's just a theory.  What's not a theory is the converse: if\nyou're trying to solve problems you don't understand, you're hosed.And yet a surprising number of founders seem willing to\nassume that someone, they're not sure exactly who, will want what\nthey're building.  Do the founders want it?  No, they're not the\ntarget market.  Who is?  Teenagers.  People interested in local\nevents (that one is a perennial tarpit).  Or \"business\" users.  What\nbusiness users?  Gas stations?  Movie studios?  Defense contractors?You can of course build something for users other than yourself.\nWe did.  But you should realize you're stepping into dangerous\nterritory.  You're flying on instruments, in effect, so you should\n(a) consciously shift gears, instead of assuming you can rely on\nyour intuitions as you ordinarily would, and (b) look at the\ninstruments.In this case the instruments are the users.  When designing for\nother people you have to be empirical.  You can no longer guess\nwhat will work; you have to find users and measure their responses.\nSo if you're going to make something for teenagers or \"business\"\nusers or some other group that doesn't include you, you have to be\nable to talk some specific ones into using what you're making.  If\nyou can't, you're on the wrong track.11. Raising Too Little MoneyMost successful startups take funding at some point.  Like having\nmore than one founder, it seems a good bet statistically.  How much\nshould you take, though?Startup funding is measured in time.  Every startup that isn't\nprofitable (meaning nearly all of them, initially) has a certain\namount of time left before the money runs out and they have to stop.\nThis is sometimes referred to as runway, as in \"How much runway do\nyou have left?\"  It's a good metaphor because it reminds you that\nwhen the money runs out you're going to be airborne or dead.Too little money means not enough to get airborne.  What airborne\nmeans depends on the situation.  Usually you have to advance to a\nvisibly higher level: if all you have is an idea, a working prototype;\nif you have a prototype, launching; if you're launched, significant\ngrowth.  It depends on investors, because until you're profitable\nthat's who you have to convince.So if you take money from investors, you have to take enough to get\nto the next step, whatever that is.\n[5]\nFortunately you have some\ncontrol over both how much you spend and what the next step is.  We\nadvise startups to set both low, initially: spend practically\nnothing, and make your initial goal simply to build a solid prototype.\nThis gives you maximum flexibility.12. Spending Too MuchIt's hard to distinguish spending too much from raising too little.\nIf you run out of money, you could say either was the cause.  The\nonly way to decide which to call it is by comparison with other\nstartups.  If you raised five million and ran out of money, you\nprobably spent too much.Burning through too much money is not as common as it used to be.\nFounders seem to have learned that lesson.  Plus it keeps getting\ncheaper to start a startup.  So as of this writing few startups\nspend too much.  None of the ones we've funded have.  (And not just\nbecause we make small investments; many have gone on to raise further\nrounds.)The classic way to burn through cash is by hiring a lot of people.\nThis bites you twice: in addition to increasing your costs, it slows\nyou down—so money that's getting consumed faster has to last\nlonger.  Most hackers understand why that happens; Fred Brooks\nexplained it in The Mythical Man-Month.We have three general suggestions about hiring: (a) don't do it if\nyou can avoid it, (b) pay people with equity rather than salary,\nnot just to save money, but because you want the kind of people who\nare committed enough to prefer that, and (c) only hire people who\nare either going to write code or go out and get users, because\nthose are the only things you need at first.13. Raising Too Much MoneyIt's obvious how too little money could kill you, but is there such\na thing as having too much?Yes and no.  The problem is not so much the money itself as what\ncomes with it.  As one VC who spoke at Y Combinator said, \"Once you\ntake several million dollars of my money, the clock is ticking.\"\nIf VCs fund you, they're not going to let you just put the money\nin the bank and keep operating as two guys living on ramen.  They\nwant that money to go to work.\n[6]\nAt the very least you'll move\ninto proper office space and hire more people.  That will change\nthe atmosphere, and not entirely for the better.  Now most of your\npeople will be employees rather than founders. They won't be as\ncommitted; they'll need to be told what to do; they'll start to\nengage in office politics.When you raise a lot of money, your company moves to the suburbs\nand has kids.Perhaps more dangerously, once you take a lot of money it gets\nharder to change direction.  Suppose your initial plan was to sell\nsomething to companies.  After taking VC money you hire a sales\nforce to do that. What happens now if you realize you should be\nmaking this for consumers instead of businesses?  That's a completely\ndifferent kind of selling.  What happens, in practice, is that you\ndon't realize that.  The more people you have, the more you stay\npointed in the same direction.Another drawback of large investments is the time they take.  The\ntime required to raise money grows with the amount.\n[7]\nWhen the\namount rises into the millions, investors get very cautious.  VCs\nnever quite say yes or no; they just engage you in an apparently\nendless conversation.  Raising VC scale investments is thus a huge\ntime sink—more work, probably, than the startup itself.   And you\ndon't want to be spending all your time talking to investors while\nyour competitors are spending theirs building things.We advise founders who go on to seek VC money to take the first\nreasonable deal they get.  If you get an offer from a reputable\nfirm at a reasonable valuation with no unusually onerous terms,\njust take it and get on with building the company.\n[8]\nWho cares\nif you could get a 30% better deal elsewhere?  Economically, startups\nare an all-or-nothing game.  Bargain-hunting among investors is a\nwaste of time.14. Poor Investor ManagementAs a founder, you have to manage your investors.  You shouldn't\nignore them, because they may have useful insights.  But neither\nshould you let them run the company.  That's supposed to be your\njob.  If investors had sufficient vision to run the companies\nthey fund, why didn't they start them?Pissing off investors by ignoring them is probably less dangerous\nthan caving in to them.  In our startup, we erred on the ignoring\nside.  A lot of our energy got drained\naway in disputes with investors instead of going into the product.\nBut this was less costly than giving in, which would probably have\ndestroyed the company.  If the founders know what they're doing,\nit's better to have half their attention focused on the product\nthan the full attention of investors who don't.How hard you have to work on managing investors usually depends on\nhow much money you've taken.  When you raise VC-scale money, the\ninvestors get a great deal of control.  If they have a board majority,\nthey're literally your bosses.  In the more common case, where\nfounders and investors are equally represented and the deciding\nvote is cast by neutral outside directors, all the investors have\nto do is convince the outside directors and they control the company.If things go well, this shouldn't matter.  So long as you seem to\nbe advancing rapidly, most investors will leave you alone.  But\nthings don't always go smoothly in startups.  Investors have made\ntrouble even for the most successful companies.  One of the most\nfamous examples is Apple, whose board made a nearly fatal blunder\nin firing Steve Jobs.  Apparently even Google got a lot of grief\nfrom their investors early on.15. Sacrificing Users to (Supposed) ProfitWhen I said at the beginning that if you make something users want,\nyou'll be fine, you may have noticed I didn't mention anything about\nhaving the right business model.  That's not because making money\nis unimportant.  I'm not suggesting that founders start companies\nwith no chance of making money in the hope of unloading them before\nthey tank.  The reason we tell founders not to worry about the\nbusiness model initially is that making something people want is\nso much harder.I don't know why it's so hard to make something people want.  It\nseems like it should be straightforward.  But you can tell it must\nbe hard by how few startups do it.Because making something people want is so much harder than making\nmoney from it, you should leave business models for later, just as\nyou'd leave some trivial but messy feature for version 2.  In version\n1, solve the core problem.  And the core problem in a startup is\nhow to create wealth\n(= how much people want something x the number\nwho want it), not how to convert that wealth into money.The companies that win are the ones that put users first.  Google,\nfor example.  They made search work, then worried about how to make\nmoney from it.  And yet some startup founders still think it's\nirresponsible not to focus on the business model from the beginning.\nThey're often encouraged in this by investors whose experience comes\nfrom less malleable industries.It is irresponsible not to think about business models.  It's\njust ten times more irresponsible not to think about the product.16. Not Wanting to Get Your Hands DirtyNearly all programmers would rather spend their time writing code\nand have someone else handle the messy business of extracting money\nfrom it.  And not just the lazy ones.  Larry and Sergey apparently\nfelt this way too at first.  After developing their new search\nalgorithm, the first thing they tried was to get some other company\nto buy it.Start a company?  Yech.  Most hackers would rather just have ideas.\nBut as Larry and Sergey found, there's not much of a market for\nideas.  No one trusts an idea till you embody it in a product and\nuse that to grow a user base.  Then they'll pay big time.Maybe this will change, but I doubt it will change much.  There's\nnothing like users for convincing acquirers.  It's not just that\nthe risk is decreased.  The acquirers are human, and they have a\nhard time paying a bunch of young guys millions of dollars just for\nbeing clever.  When the idea is embodied in a company with a lot\nof users, they can tell themselves they're buying the users rather\nthan the cleverness, and this is easier for them to swallow.\n[9]If you're going to attract users, you'll probably have to get up\nfrom your computer and go find some.  It's unpleasant work, but if\nyou can make yourself do it you have a much greater chance of\nsucceeding.  In the first batch of startups we funded, in the summer\nof 2005, most of the founders spent all their time building their\napplications.  But there was one who was away half the time talking\nto executives at cell phone companies, trying to arrange deals.\nCan you imagine anything more painful for a hacker?\n[10]\nBut it\npaid off, because this startup seems the most successful of that\ngroup by an order of magnitude.If you want to start a startup, you have to face the fact that you\ncan't just hack.  At least one hacker will have to spend some of\nthe time doing business stuff.17. Fights Between FoundersFights between founders are surprisingly common.  About 20% of the\nstartups we've funded have had a founder leave.  It happens so often\nthat we've reversed our attitude to vesting.  We still don't require\nit, but now we advise founders to vest so there will be an orderly\nway for people to quit.A founder leaving doesn't necessarily kill a startup, though.  Plenty\nof successful startups have had that happen.\n[11]\nFortunately it's\nusually the least committed founder who leaves.  If there are three\nfounders and one who was lukewarm leaves, big deal.  If you have\ntwo and one leaves, or a guy with critical technical skills leaves,\nthat's more of a problem.  But even that is survivable.  Blogger\ngot down to one person, and they bounced back.Most of the disputes I've seen between founders could have been\navoided if they'd been more careful about who they started a company\nwith.  Most disputes are not due to the situation but the people.\nWhich means they're inevitable.  And most founders who've been\nburned by such disputes probably had misgivings, which they suppressed,\nwhen they started the company.  Don't suppress misgivings.  It's\nmuch easier to fix problems before the company is started than\nafter.  So don't include your housemate in your startup because\nhe'd feel left out otherwise.  Don't start a company with someone\nyou dislike because they have some skill you need and you worry you\nwon't find anyone else.  The people are the most important ingredient\nin a startup, so don't compromise there.18. A Half-Hearted EffortThe failed startups you hear most about are the spectactular\nflameouts.  Those are actually the elite of failures.  The most\ncommon type is not the one that makes spectacular mistakes, but the\none that doesn't do much of anything—the one we never even hear\nabout, because it was some project a couple guys started on the\nside while working on their day jobs, but which never got anywhere\nand was gradually abandoned.Statistically, if you want to avoid failure, it would seem like the\nmost important thing is to quit your day job.  Most founders of\nfailed startups don't quit their day jobs, and most founders of\nsuccessful ones do.  If startup failure were a disease, the CDC\nwould be issuing bulletins warning people to avoid day jobs.Does that mean you should quit your day job?  Not necessarily.  I'm\nguessing here, but I'd guess that many of these would-be founders\nmay not have the kind of determination it takes to start a company,\nand that in the back of their minds, they know it.  The reason they\ndon't invest more time in their startup is that they know it's a\nbad investment.\n[12]I'd also guess there's some band of people who could have succeeded\nif they'd taken the leap and done it full-time, but didn't. I have\nno idea how wide this band is, but if the winner/borderline/hopeless\nprogression has the sort of distribution you'd expect, the number\nof people who could have made it, if they'd quit their day job, is\nprobably an order of magnitude larger than the number who do make\nit.\n[13]If that's true, most startups that could succeed fail because the\nfounders don't devote their whole efforts to them.  That certainly\naccords with what I see out in the world.  Most startups fail because\nthey don't make something people want, and the reason most don't\nis that they don't try hard enough.In other words, starting startups is just like everything else.\nThe biggest mistake you can make is not to try hard enough.  To the\nextent there's a secret to success, it's not to be in denial about\nthat.Notes[1]\nThis is not a complete list of the causes of failure,\njust those you can control.  There are also several you can't,\nnotably ineptitude and bad luck.[2]\nIronically, one variant of the Facebook that might work is a\nfacebook exclusively for college students.[3]\nSteve Jobs tried to motivate people by saying \"Real artists\nship.\"  This is a fine sentence, but unfortunately not true.  Many\nfamous works of art are unfinished.  It's true in fields that have\nhard deadlines, like architecture and filmmaking, but even there\npeople tend to be tweaking stuff till it's yanked out of their\nhands.[4]\nThere's probably also a second factor: startup founders tend\nto be at the leading edge of technology, so problems they face are\nprobably especially valuable.[5]\nYou should take more than you think you'll need, maybe 50% to\n100% more, because software takes longer to write and deals longer\nto close than you expect.[6]\nSince people sometimes call us VCs, I should add that we're\nnot.  VCs invest large amounts of other people's money.  We invest\nsmall amounts of our own, like angel investors.[7]\nNot linearly of course, or it would take forever to raise five\nmillion dollars.  In practice it just feels like it takes forever.Though if you include the cases where VCs don't invest, it would\nliterally take forever in the median case.  And maybe we should,\nbecause the danger of chasing large investments is not just that\nthey take a long time.  That's the best case.  The real danger\nis that you'll expend a lot of time and get nothing.[8]\nSome VCs will offer you an artificially low valuation to see\nif you have the balls to ask for more.  It's lame that VCs play\nsuch games, but some do.  If you're dealing with one of those you\nshould push back on the valuation a bit.[9]\nSuppose YouTube's founders had gone to Google in 2005 and told\nthem \"Google Video is badly designed.  Give us $10 million and we'll\ntell you all the mistakes you made.\"  They would have gotten\nthe royal raspberry.  Eighteen months later Google paid $1.6 billion\nfor the same lesson, partly because they could then tell themselves\nthat they were buying a phenomenon, or a community, or some vague\nthing like that.I don't mean to be hard on Google.  They did better than their\ncompetitors, who may have now missed the video boat entirely.[10]\nYes, actually: dealing with the government.  But phone companies\nare up there.[11]\nMany more than most people realize, because companies don't advertise\nthis.  Did you know Apple originally had three founders?[12]\nI'm not dissing these people.  I don't have the determination\nmyself.  I've twice come close to starting startups since Viaweb,\nand both times I bailed because I realized that without the spur\nof poverty I just wasn't willing to endure the stress of a startup.[13]\nSo how do you know whether you're in the category of people\nwho should quit their day job, or the presumably larger one who\nshouldn't?  I got to the point of saying that this was hard to judge\nfor yourself and that you should seek outside advice, before realizing\nthat that's what we do.  We think of ourselves as investors, but\nviewed from the other direction Y Combinator is a service for\nadvising people whether or not to quit their day job.  We could be\nmistaken, and no doubt often are, but we do at least bet money on\nour conclusions.Thanks to Sam Altman, Jessica Livingston, Greg McAdoo, and Robert Morris\nfor reading drafts of this."},{"title":"The Acceleration of Addictiveness","text":"July 2010What hard liquor, cigarettes, heroin, and crack have in common is\nthat they're all more concentrated forms of less addictive predecessors.\nMost if not all the things we describe as addictive are.  And the\nscary thing is, the process that created them is accelerating.We wouldn't want to stop it.  It's the same process that cures\ndiseases: technological progress.  Technological progress means\nmaking things do more of what we want.  When the thing we want is\nsomething we want to want, we consider technological progress good.\nIf some new technique makes solar cells x% more efficient, that\nseems strictly better.  When progress concentrates something we\ndon't want to want—when it transforms opium into heroin—it seems\nbad.  But it's the same process at work.\n[1]No one doubts this process is accelerating, which means increasing\nnumbers of things we like will be transformed into things we like\ntoo much.\n[2]As far as I know there's no word for something we like too much.\nThe closest is the colloquial sense of \"addictive.\" That usage has\nbecome increasingly common during my lifetime.  And it's clear why:\nthere are an increasing number of things we need it for.  At the\nextreme end of the spectrum are crack and meth.  Food has been\ntransformed by a combination of factory farming and innovations in\nfood processing into something with way more immediate bang for the\nbuck, and you can see the results in any town in America.  Checkers\nand solitaire have been replaced by World of Warcraft and FarmVille.\nTV has become much more engaging, and even so it can't compete with Facebook.The world is more addictive than it was 40 years ago.   And unless\nthe forms of technological progress that produced these things are\nsubject to different laws than technological progress in general,\nthe world will get more addictive in the next 40 years than it did\nin the last 40.The next 40 years will bring us some wonderful things.  I don't\nmean to imply they're all to be avoided.  Alcohol is a dangerous\ndrug, but I'd rather live in a world with wine than one without.\nMost people can coexist with alcohol; but you have to be careful.\nMore things we like will mean more things we have to be careful\nabout.Most people won't, unfortunately.  Which means that as the world\nbecomes more addictive, the two senses in which one can live a\nnormal life will be driven ever further apart.  One sense of \"normal\"\nis statistically normal: what everyone else does.  The other is the\nsense we mean when we talk about the normal operating range of a\npiece of machinery: what works best.These two senses are already quite far apart.  Already someone\ntrying to live well would seem eccentrically abstemious in most of\nthe US.  That phenomenon is only going to become more pronounced.\nYou can probably take it as a rule of thumb from now on that if\npeople don't think you're weird, you're living badly.Societies eventually develop antibodies to addictive new things.\nI've seen that happen with cigarettes.  When cigarettes first\nappeared, they spread the way an infectious disease spreads through\na previously isolated population.  Smoking rapidly became a\n(statistically) normal thing.  There were ashtrays everywhere.  We\nhad ashtrays in our house when I was a kid, even though neither of\nmy parents smoked.  You had to for guests.As knowledge spread about the dangers of smoking, customs changed.\nIn the last 20 years, smoking has been transformed from something\nthat seemed totally normal into a rather seedy habit: from something\nmovie stars did in publicity shots to something small huddles of\naddicts do outside the doors of office buildings.  A lot of the\nchange was due to legislation, of course, but the legislation\ncouldn't have happened if customs hadn't already changed.It took a while though—on the order of 100 years.  And unless the\nrate at which social antibodies evolve can increase to match the\naccelerating rate at which technological progress throws off new\naddictions, we'll be increasingly unable to rely on customs to\nprotect us.\n[3]\nUnless we want to be canaries in the coal mine\nof each new addiction—the people whose sad example becomes a\nlesson to future generations—we'll have to figure out for ourselves\nwhat to avoid and how.  It will actually become a reasonable strategy\n(or a more reasonable strategy) to suspect\neverything new.In fact, even that won't be enough.  We'll have to worry not just\nabout new things, but also about existing things becoming more\naddictive.  That's what bit me.  I've avoided most addictions, but\nthe Internet got me because it became addictive while I was using\nit.\n[4]Most people I know have problems with Internet addiction.  We're\nall trying to figure out our own customs for getting free of it.\nThat's why I don't have an iPhone, for example; the last thing I\nwant is for the Internet to follow me out into the world.\n[5]\nMy latest trick is taking long hikes.  I used to think running was a\nbetter form of exercise than hiking because it took less time.  Now\nthe slowness of hiking seems an advantage, because the longer I\nspend on the trail, the longer I have to think without interruption.Sounds pretty eccentric, doesn't it?  It always will when you're\ntrying to solve problems where there are no customs yet to guide\nyou.  Maybe I can't plead Occam's razor; maybe I'm simply eccentric.\nBut if I'm right about the acceleration of addictiveness, then this\nkind of lonely squirming to avoid it will increasingly be the fate\nof anyone who wants to get things done.  We'll increasingly be\ndefined by what we say no to.Notes[1]\nCould you restrict technological progress to areas where you\nwanted it?  Only in a limited way, without becoming a police state.\nAnd even then your restrictions would have undesirable side effects.\n\"Good\" and \"bad\" technological progress aren't sharply differentiated,\nso you'd find you couldn't slow the latter without also slowing the\nformer.  And in any case, as Prohibition and the \"war on drugs\"\nshow, bans often do more harm than good.[2]\nTechnology has always been accelerating.  By Paleolithic\nstandards, technology evolved at a blistering pace in the Neolithic\nperiod.[3]\nUnless we mass produce social customs.  I suspect the recent\nresurgence of evangelical Christianity in the US is partly a reaction\nto drugs.  In desperation people reach for the sledgehammer; if\ntheir kids won't listen to them, maybe they'll listen to God.  But\nthat solution has broader consequences than just getting kids to\nsay no to drugs.  You end up saying no to\nscience as well.\nI worry we may be heading for a future in which only a few people\nplot their own itinerary through no-land, while everyone else books\na package tour.  Or worse still, has one booked for them by the\ngovernment.[4]\nPeople commonly use the word \"procrastination\" to describe\nwhat they do on the Internet.  It seems to me too mild to describe\nwhat's happening as merely not-doing-work.  We don't call it\nprocrastination when someone gets drunk instead of working.[5]\nSeveral people have told me they like the iPad because it\nlets them bring the Internet into situations where a laptop would\nbe too conspicuous.  In other words, it's a hip flask.  (This is\ntrue of the iPhone too, of course, but this advantage isn't as\nobvious because it reads as a phone, and everyone's used to those.)Thanks to Sam Altman, Patrick Collison, Jessica Livingston, and\nRobert Morris for reading drafts of this."},{"title":"The (Actual) FR Interview","text":"(Found|Read\ninterviewed me about Y Combinator, but edited\nthe questions and answers so much that the sense was often changed.\nHere are my original answers.  I've used their new questions\nwhenever possible, but kept the original ones when they'd changed\nso much that my answer became mysterious.)F|R: What is the mathematical function from which  Y Combinator\ntakes its name, and why did you choose this?Graham: It's a function that builds recursive functions without\nthem needing to have names.  The Y Combinator is one of those things\nthat seems miraculous when you first encounter it.  You wouldn't\nnecessarily have expected such a thing to be possible.  We named\nthe company after it partly because we thought it was such a cool\nconcept, and partly as a secret signal to the kind of people we\nhoped would apply.F|R:  How quickly can you now tell whether a start-up will make it?\nAnd what are the key characteristics that indicate potential success\nto Y Combinator?Graham: We can never tell for sure.  No investor can.  But we are\ntrying hard to get better at predicting.I think the key quality is determination.  The founders who do the\nbest are the type of people who just refuse to fail.  Most startups\nhave at least one low point where any reasonable person would give\nup.  That bottleneck is the reason there are so few successful\nstartups.  The only people who get through it are the ones who have\nan unreasonable aversion to failing.F|R: Several copycat incubators have sprung up since Y Combinator\nlaunched in 2005 (TechStars, Y Europe, Seedcamp, BoostPhase). Can\nyour model be replicated?Graham: There are a few things they haven't copied correctly, but\nreally it's not our model that distinguishes us.  It's the people\nthat make the difference—not just us, but the 250 or so founders\nwe've now funded.  The amount of knowledge accumulated in all these\nheads is remarkable.F|R: I read that when you call Y Combinator winners, the founders\nhave only five minutes to accept. (\"If people turn us down,\" he\nsays, \"as far as we're concerned they've failed an IQ test.\") Have\nstartups turned you down? Are there any that have turned Y Combinator\ndown and still gone on to succeed with a liquidity event?Graham: You're confusing two separate things.  The reason people\nare supposed to decide quickly whether or not to accept is that\nthey already know everything except the percent we'll ask for.\nThey've already seen the deal terms, and they already know as much\nas they're going to know about YC before actually working with us.\nSo they should already know when we call what percentage they'd be\nok with.  Since all they have to do is subtract one integer from\nanother, five minutes should be enough.The \"IQ test\" quote refers not to how fast they have to decide, but\nthe amount of equity we usually ask for.  In the median case it's\n6%.  If we take 6%, we have to improve a startup's outcome by 6.4%\nfor them to end up net ahead.  That's a ridiculously low bar.  So\nthe IQ test is whether they grasp that.There was one startup that turned us down because they received an\nacquisition offer during the weekend when we did interviews.  It\nwas a pretty good offer.  I'd have taken it in their position, and\nthey did.  But other than that I don't know of anyone who turned\nus down and went on to succeed.  There have only been about three\nothers who turned us down.F|R: How did you determine the 12-week term of each Y Combinator\nclass?  Why is two months too short, or six months too long to\n\"incubate\" a startup?Graham: We discovered it by accident.  When we first started YC,\nwe began with a summer program.  We were trying to learn how to be\ninvestors, so we invited college students to come to Cambridge and\nstart startups instead of getting summer jobs.Now we're looking for founders who consider the startup as a real\njob, not just a summer one.  But we kept the 3 month cycle because\nit is a good length of time to build a version 1.  Some startups\nmay not be able to launch in such a short time, but they should all\nbe able to build something impressive.F|R: Name one thing founders can do to increase their odds of being\nselected by Y Combinator.  Is Andreessen right that \"the market\"\nmatters more than the idea, the tech, and even the talent?Graham: Get good cofounders. You can't change who you are, at least\nnot in a short time.  And the idea doesn't matter to us as much as\nthe people.  So the best thing any indvidual can do is find good\npeople to work with.I think Marc may be right that market is the biggest determinant\nin the outcome of successful startups.  But that's not unrelated\nto the qualities of the founders.  Smart people will find big\nmarkets."},{"title":"The Age of the Essay","text":"September 2004Remember the essays you had to write in high school?\nTopic sentence, introductory paragraph,\nsupporting paragraphs, conclusion.  The conclusion being,\nsay, that Ahab in Moby Dick was a Christ-like figure.Oy.  So I'm going to try to give the other side of the\nstory: what an essay really is, and how you write one.\nOr at least, how I write one.ModsThe most obvious difference between real essays and\nthe things one has to write in school is that real\nessays are not exclusively about English literature.\nCertainly schools should teach students how to\nwrite.  But due to a series of historical accidents\nthe teaching of\nwriting has gotten mixed together with the study\nof literature.  And so all over the country students are\nwriting not about how a baseball team with a small budget\nmight compete with the Yankees, or the role of color in\nfashion, or what constitutes a good dessert, but about\nsymbolism in Dickens.With the result that writing is made to seem boring and\npointless.  Who cares about symbolism in Dickens?\nDickens himself would be more interested in an essay\nabout color or baseball.How did things get this way?  To answer that we have to go back\nalmost a thousand years.  Around 1100, Europe at last began to\ncatch its breath after centuries of chaos, and once they\nhad the luxury of curiosity they rediscovered\nwhat we call \"the classics.\"  The effect was rather as if\nwe were visited by beings from another solar system.\nThese earlier civilizations were so much more sophisticated\nthat for the next several centuries the main work of\nEuropean scholars, in almost every field, was to assimilate\nwhat they knew.During this period the study of ancient texts acquired great\nprestige.  It seemed the essence of what scholars did.  As\nEuropean scholarship gained momentum it became less and less important;\nby 1350\nsomeone who wanted to learn about science could find better\nteachers than Aristotle in his own era. [1]\nBut schools change slower than scholarship.  In the\n19th century the study of ancient texts was still the backbone\nof the curriculum.The time was then ripe for the question: if the study of\nancient texts is a valid field for scholarship, why not modern\ntexts?  The answer, of course, is that the original raison d'etre\nof classical scholarship was a kind of intellectual archaeology that\ndoes not need to be done in the case of contemporary authors.\nBut for obvious reasons no one wanted to give that answer.\nThe archaeological work being mostly done, it implied that\nthose studying the classics were, if not wasting their\ntime, at least working on problems of minor importance.And so began the study of modern literature.  There was a good\ndeal of resistance at first.\nThe first courses in English literature\nseem to have been offered by the newer colleges, particularly\nAmerican ones.  Dartmouth, the University of Vermont, Amherst,\nand University College, London\ntaught English literature in the 1820s.\nBut Harvard didn't have a professor of English literature until\n1876, and Oxford not till 1885. (Oxford had a chair of Chinese before\nit had one of English.) [2]What tipped the scales, at least in the US, seems to have\nbeen the idea that professors should do research as well\nas teach.  This idea (along with the PhD, the department, and\nindeed the whole concept of the modern university) was imported\nfrom Germany in the late 19th century. Beginning at\nJohns Hopkins in 1876, the new model spread rapidly.Writing was one of the casualties.  Colleges had long taught\nEnglish composition.  But how do you do research on composition?\nThe professors who taught math could be required to do original\nmath, the professors who taught history could be required to\nwrite scholarly articles about history, but what about the\nprofessors who taught rhetoric or composition?  What should they\ndo research on?  The closest thing seemed to be English literature. [3]And so in the late 19th century the teaching of writing was inherited\nby English professors.  This had two drawbacks:\n(a) an expert on literature need not himself be a good writer,\nany more than an art historian has to be a good painter, and (b)\nthe subject of writing now tends to be literature, since that's\nwhat the professor is interested in.High schools imitate universities.  The seeds of our miserable\nhigh school experiences were sown in 1892, when\nthe National Education Association\n\"formally recommended that literature\nand composition be unified in the high school course.\" [4]\nThe 'riting component of the 3 Rs then morphed into English,\nwith the bizarre consequence that high school students now\nhad to write about English literature-- to write, without\neven realizing it, imitations of whatever\nEnglish professors had been publishing in their journals a\nfew decades before.It's no wonder if this seems to the\nstudent a pointless exercise, because we're now three steps\nremoved from real work: the students are imitating English\nprofessors, who are imitating classical scholars, who are\nmerely the inheritors of a tradition growing out of what\nwas, 700 years ago, fascinating and urgently needed work.No DefenseThe other big difference between a real essay and the things\nthey make you write in school is that a real essay doesn't\ntake a position and then defend it.  That principle,\nlike the idea that we ought to be writing about literature,\nturns out to be another intellectual hangover of long\nforgotten origins.It's often mistakenly believed that\nmedieval universities were mostly seminaries.  In fact they\nwere more law schools.  And at least in our tradition\nlawyers are advocates, trained to take\neither side of an argument and make as good a case for it\nas they can.\nWhether cause or effect, this spirit pervaded\nearly universities.  The study of rhetoric, the art of arguing\npersuasively, was a third of the undergraduate curriculum. [5]\nAnd after the lecture the most common form\nof discussion was the disputation.  This is at least\nnominally preserved in our present-day thesis defense:\nmost people treat the words thesis\nand dissertation as interchangeable, but originally, at least,\na thesis was a position one took and the dissertation was\nthe argument by which one defended it.Defending a position may be a necessary evil in a\nlegal dispute, but it's not the best way to get at the truth,\nas I think lawyers would be the first to admit.  It's not\njust that you miss subtleties this way.\nThe real problem is that you can't change the question.And yet this principle is built into the very structure of\nthe things they teach you to write in high school.  The topic\nsentence is your thesis, chosen in advance, the supporting\nparagraphs the blows you strike in the conflict, and the\nconclusion-- uh, what is the conclusion?  I was never sure\nabout that in high school.  It seemed as if we were just\nsupposed to restate what we said in the first paragraph,\nbut in different enough words that no one could tell.\nWhy bother?\nBut when you understand the origins\nof this sort of \"essay,\" you can see where the\nconclusion comes from.  It's the concluding remarks to the\njury.Good writing should be convincing, certainly, but it\nshould be convincing because you got the right answers,\nnot because you did a good job of arguing.  When I give a\ndraft of an essay to friends, there are two things\nI want to know: which parts bore them, and which seem\nunconvincing.  The boring bits can usually be fixed by\ncutting.  But I don't try to fix the unconvincing bits by\narguing more cleverly.  I need to talk the matter over.At the very least I must have explained something badly.  In\nthat case, in the course of the conversation I'll be forced\nto come up a with a clearer explanation, which I can just\nincorporate in the essay.  More often than not I have\nto change what I was saying as well.\nBut the aim is never to be convincing per se.\nAs the reader gets smarter, convincing and true become identical,\nso if I can convince smart readers I must be near the truth.The sort of writing that attempts to persuade may be\na valid (or at least inevitable) form, but it's historically\ninaccurate to call it an essay.  An essay is\nsomething else.TryingTo understand what a real essay is, we have to\nreach back into history again, though this time not so far.\nTo Michel de Montaigne, who in 1580 published a book of\nwhat he called \"essais.\" He was\ndoing something quite different from what lawyers do, and\nthe difference is embodied in the name.  Essayer is the French\nverb meaning \"to try\"\nand an essai is an attempt.  An essay is something you\nwrite to try to figure something out.Figure out what?  You don't know yet.  And so you can't begin with a\nthesis, because you don't have one, and may never have\none.  An essay doesn't begin with a statement, but with a\nquestion.  In a real essay, you don't take a position and\ndefend it.  You notice a door that's ajar, and you open it and\nwalk in to see what's inside.If all you want to do is figure things out, why do you need\nto write anything, though?  Why not just sit and think?  Well,\nthere precisely is Montaigne's great discovery.  Expressing\nideas helps to form them.  Indeed, helps is far too weak a\nword.  Most of what ends up in my essays I only\nthought of when I sat down to write them.  That's why I\nwrite them.In the things you write in school you are, in theory,\nmerely explaining yourself to the reader.\nIn a real essay you're writing for yourself.\nYou're thinking out loud.But not quite.\nJust as inviting people over forces you to\nclean up your apartment, writing something that\nother people will read forces you to think well.  So it\ndoes matter to have an audience.  The things I've written\njust for myself are no good.\nThey tend to peter out.  When I run into\ndifficulties, I find I conclude with a few vague\nquestions and then drift off to get a cup of tea.Many published essays peter out in the same way.\nParticularly the sort written by the staff writers\nof newsmagazines.  Outside writers tend to supply\neditorials of the defend-a-position variety, which\nmake a beeline toward a rousing (and\nforeordained) conclusion.   But the staff writers feel\nobliged to write something \"balanced.\"\nSince they're writing for a popular magazine, they start with the\nmost radioactively controversial questions, from which-- because\nthey're writing for a popular magazine-- they\nthen proceed to recoil in terror.\nAbortion, for or against?\nThis group says one thing.  That group says\nanother.  One thing is certain: the question is a\ncomplex one.  (But don't get mad at us.  We didn't\ndraw any conclusions.)The RiverQuestions aren't enough.  An essay has to come up with answers.\nThey don't always, of course.  Sometimes you start with a\npromising question and get nowhere.  But those you don't\npublish.  Those are like experiments that get inconclusive\nresults.   An essay you publish ought to tell the reader\nsomething he didn't already know.But what you tell him doesn't matter, so long as\nit's interesting.  I'm sometimes accused of meandering.\nIn defend-a-position writing that would be a flaw.\nThere you're not concerned with truth.  You already\nknow where you're going, and you want to go straight there,\nblustering through obstacles, and hand-waving\nyour way across swampy ground.  But that's not what\nyou're trying to do in an essay.  An essay is supposed to\nbe a search for truth.  It would be suspicious if it didn't\nmeander.The Meander (aka Menderes) is a river in Turkey.\nAs you might expect, it winds all over the place.\nBut it doesn't do this out of frivolity.\nThe path it has discovered is the most\neconomical route to the sea. [6]The river's algorithm is simple.  At each step, flow down.\nFor the essayist this translates to: flow interesting.\nOf all the places to go next, choose the most interesting.\nOne can't have quite as little foresight as a river.  I always\nknow generally what I want to write about.\nBut not the\nspecific conclusions I want to reach; from paragraph to\nparagraph I let the ideas take their course.This doesn't always work.  Sometimes, like a river,\none runs up against a wall.  Then I do the same thing the river does:\nbacktrack.  At one point in this essay\nI found that after following a certain thread I ran out\nof ideas.  I had to go back seven paragraphs and start over\nin another direction.Fundamentally an essay is a train of thought-- but a cleaned-up\ntrain of thought, as dialogue is cleaned-up conversation.\nReal thought, like real conversation, is full of false starts.\nIt would be exhausting to read.  You need to\ncut and fill to\nemphasize the central thread, like an\nillustrator inking over a pencil drawing.  But don't\nchange so much that you lose the spontaneity of the original.Err on the side of the river.  An essay is not a reference\nwork.  It's not something you read looking for a specific\nanswer, and feel cheated if you don't find it.  I'd much\nrather read an essay that went off in an unexpected but\ninteresting direction than one that plodded dutifully along\na prescribed course.SurpriseSo what's interesting?  For me, interesting means surprise.\nInterfaces, as Geoffrey James has said, should follow the principle of\nleast astonishment.   A button that looks like it will make a\nmachine stop should make it stop, not speed up.  Essays\nshould do the opposite.  Essays should aim for maximum\nsurprise.I was afraid of flying for a long time and could only travel\nvicariously.  When friends came back from faraway places,\nit wasn't just out of politeness that I asked\nwhat they saw.  I really wanted to know.  And I found\nthe best way to get information out of them was to ask\nwhat surprised them.  How was the place different from what\nthey expected?  This is an extremely useful question.\nYou can ask it of the most unobservant people, and it will\nextract information they didn't even know they were\nrecording.Surprises are things that you not only didn't know, but that\ncontradict things you\nthought you knew.  And so they're the most valuable sort of\nfact you can get.  They're like a food that's not merely\nhealthy, but counteracts the unhealthy effects of things\nyou've already eaten.How do you find surprises?  Well, therein lies half\nthe work of essay writing.  (The other half is expressing\nyourself well.)   The trick is to use yourself as a\nproxy for the reader.  You should only write about things\nyou've thought about a lot.  And anything you come across\nthat surprises you, who've thought about the topic a lot,\nwill probably surprise most readers.For example, in a recent\nessay I pointed out that because\nyou can only judge computer programmers by working with\nthem, no one knows who the best programmers are overall.\nI didn't realize this when I began\nthat essay, and even now I find it kind of weird.  That's\nwhat you're looking for.So if you want to write essays, you need two ingredients:\na few topics you've thought about a lot, and\nsome ability to ferret out the unexpected.What should you think about?  My guess is that it\ndoesn't matter-- that anything can be interesting if you get deeply\nenough into it.  One possible exception might be things\nthat have deliberately had all the variation sucked out of them,\nlike working in fast food.  In retrospect, was there\nanything interesting about working at Baskin-Robbins?\nWell, it was interesting how important color was\nto the customers.  Kids a certain age would point into\nthe case and say that they wanted yellow.  Did they want\nFrench Vanilla or Lemon?  They would just look at you\nblankly.  They wanted yellow.  And then there was the\nmystery of why the perennial favorite Pralines 'n' Cream\nwas so appealing.  (I think now it was the salt.)\nAnd the difference in the way fathers and\nmothers bought ice cream for their kids: the fathers\nlike benevolent kings bestowing largesse, the mothers\nharried, giving in to pressure.\nSo, yes, there does seem to be some material even in\nfast food.I didn't notice those things at the time, though.  At sixteen\nI was about as observant as a lump of rock.  I can see more now in\nthe fragments of memory I preserve of that age than I could see\nat the time from having it all happening live, right in front of me.ObservationSo the ability to ferret out the unexpected must not merely be an\ninborn one.  It must be something you can learn.\nHow do you learn it?To some extent it's like learning history.\nWhen you first read\nhistory, it's just a whirl of names\nand dates.\nNothing seems to stick.  But the more you learn, the more hooks you have\nfor new facts to stick onto-- which means\nyou accumulate knowledge at what's colloquially called an\nexponential rate.  Once you\nremember that Normans conquered\nEngland in 1066, it will catch your attention when you hear\nthat other Normans conquered southern Italy at about the same time.\nWhich will make you wonder about Normandy, and take note\nwhen a third book mentions that Normans\nwere not, like most of what is now\ncalled France, tribes that flowed in as the Roman empire collapsed,\nbut Vikings (norman = north man) who arrived\nfour centuries later in 911.  Which makes\nit easier to remember that Dublin was also established by\nVikings in the 840s.  Etc, etc squared.Collecting surprises is a similar process.\nThe more anomalies you've seen, the more easily you'll notice\nnew ones.   Which means, oddly enough, that as you grow older,\nlife should become more and more surprising.  When I was a\nkid, I used to think adults had it all figured out.\nI had it backwards.  Kids are the ones who have it all figured\nout.  They're just mistaken.When it comes to surprises, the rich get richer.  But\n(as with wealth) there\nmay be habits of mind that will help the process along.  It's\ngood to have a habit of asking questions, especially questions\nbeginning with Why.\nBut not in the random way that three year\nolds ask why.  There are an infinite number of questions.\nHow do you find the fruitful ones?I find it especially\nuseful to ask why about things that seem wrong.\nFor example, why should there be a connection between\nhumor and misfortune?  Why do we find it funny when a\ncharacter, even one we like, slips on a banana peel?\nThere's a whole essay's worth of surprises there for sure.If you want to notice things that seem wrong, you'll find a\ndegree of skepticism helpful.  I take it as an axiom\nthat we're only achieving 1% of what we could.\nThis helps counteract the rule that gets beaten into our\nheads as children: that things are the way they are because\nthat is how things have to be.\nFor example, everyone I've talked to while writing this essay\nfelt the same about\nEnglish classes-- that the whole process seemed pointless.\nBut none of us had the balls at the time to hypothesize that\nit was, in fact, all a mistake.\nWe all thought there was just something we weren't getting.I have a hunch you want to pay attention not just to things\nthat seem wrong, but things that seem wrong in a humorous way.\nI'm always pleased when I see someone laugh as they\nread a draft of an essay.  But why should I be?  I'm aiming\nfor good ideas.  Why should good ideas be funny?\nThe connection may be surprise.\nSurprises make us laugh, and surprises are what\none wants to deliver.I write down things that surprise me in notebooks.  I never\nactually get around to reading them and using\nwhat I've written, but I do tend to\nreproduce the same thoughts later.  So the main value\nof notebooks may be what writing things down leaves in your\nhead.People trying to be cool will find themselves at a disadvantage\nwhen collecting surprises.  To be surprised is to be mistaken.\nAnd the essence of cool, as any fourteen year old could tell\nyou, is nil admirari.  When you're mistaken, don't\ndwell on it; just act like nothing's wrong and maybe no one\nwill notice.One of the keys to coolness is to avoid situations where\ninexperience may make you look foolish.\nIf you want to find surprises you should do the opposite.\nStudy lots of different things,\nbecause some of the most interesting surprises are unexpected\nconnections between different fields.  For example,\njam, bacon, pickles, and cheese, which are among the most pleasing\nof foods, were all originally intended as methods of preservation.\nAnd so were books and paintings.Whatever you study, include history-- but social and economic\nhistory, not political history.  History seems to me so important\nthat it's misleading to treat it as a mere field of study.\nAnother way to describe it is all the data we have so far.Among other things, studying history gives one confidence that\nthere are good ideas waiting to be discovered right under our noses.\nSwords evolved during the Bronze Age out of daggers, which\n(like their flint predecessors) had a hilt separate from the\nblade.  Because swords are longer\nthe hilts kept breaking off.  But it took five hundred years\nbefore someone thought of casting hilt and blade as one\npiece.DisobedienceAbove all, make a habit of paying\nattention to things you're not supposed to, either because\nthey're \"inappropriate,\"\nor not important, or not what you're\nsupposed to be working on.  If you're curious about something,\ntrust your instincts.\nFollow the threads that attract your\nattention.  If there's something you're really interested\nin, you'll find they have an uncanny way of leading back to\nit anyway, just as the conversation of people who are especially\nproud of something always tends to lead back to it.For example, I've always been fascinated by comb-overs, especially\nthe extreme sort that\nmake a man look as if he's wearing a beret made of his own hair.\nSurely this is a lowly sort of thing to be interested in-- the\nsort of superficial quizzing\nbest left to teenage girls.  And yet there is something underneath.\nThe key question, I realized, is how does the comber-over not\nsee how odd he looks?\nAnd the answer is that he got to look that way incrementally.\nWhat began as combing his hair a little carefully over a\nthin patch has gradually, over 20 years, grown into a monstrosity.\nGradualness is very powerful.  And that power can be\nused for constructive purposes too: just as you can trick\nyourself into looking like a freak, you can trick yourself into\ncreating something so grand that you would never have dared to\nplan such a thing.  Indeed, this is just how most good\nsoftware gets created.  You start by writing a stripped-down\nkernel (how hard can it be?) and gradually it grows\ninto a complete operating system.  Hence the next leap: could\nyou do the same thing in painting, or in a novel?See what you can extract from a frivolous question?\nIf there's one piece of advice I would give about writing essays,\nit would be: don't do as you're told.\nDon't believe what you're supposed to.\nDon't write the\nessay readers expect; one learns nothing from\nwhat one expects.\nAnd\ndon't write the way they taught you to in school.The most important sort of disobedience is to write\nessays at all.  Fortunately, this sort of disobedience shows\nsigns of becoming\nrampant.\nIt used to be that only a tiny\nnumber of officially approved writers were allowed to\nwrite essays.  Magazines published few of them, and judged\nthem less by what they said than who wrote them;\na magazine might publish a story by an\nunknown writer if it was good enough, but if they published\nan essay on x it had to be by someone who was at least\nforty and whose job title had x in it.  Which is a problem,\nbecause there are a lot of things insiders can't say precisely\nbecause they're insiders.The Internet is changing that.\nAnyone can publish an essay on the Web, and it gets judged, as any\nwriting should, by what it says, not who wrote it.\nWho are you to write about x?  You are whatever you wrote.Popular magazines made the period between the spread\nof literacy and the arrival of TV the golden age of the\nshort story.\nThe Web may well make this the golden age of the essay.\nAnd that's certainly not something I realized when\nI started writing this.Notes[1] I'm thinking of Oresme (c. 1323-82).  But it's hard to pick\na date, because there was a sudden drop-off in scholarship\njust as Europeans finished assimilating classical science.\nThe cause may have been the plague of 1347; the trend in\nscientific progress matches the population curve.[2] Parker, William R. \"Where Do College English Departments\nCome From?\" College English 28 (1966-67), pp. 339-351.\nReprinted in Gray, Donald J. (ed). The Department of\nEnglish at Indiana University Bloomington 1868-1970. Indiana\nUniversity Publications.Daniels, Robert V. The University of Vermont: The First\nTwo Hundred Years. University of Vermont, 1991.Mueller, Friedrich M. Letter to the Pall Mall\nGazette. 1886/87. Reprinted in Bacon, Alan (ed).\nThe Nineteenth-Century\nHistory of English Studies. Ashgate, 1998.[3] I'm compressing the story a bit.\nAt first\nliterature took a back seat to philology, which (a) seemed more\nserious and (b) was popular in Germany, where many of the\nleading scholars of that generation had been trained.In some cases the writing teachers were transformed\nin situ into English professors.\nFrancis James Child, who had been Boylston Professor\nof Rhetoric at Harvard since 1851,\nbecame in 1876 the university's first professor of English.[4] Parker, op. cit., p. 25.[5] The undergraduate curriculum or trivium (whence\n\"trivial\") consisted of Latin grammar, rhetoric, and logic.\nCandidates for masters' degrees went on to study the\nquadrivium of arithmetic, geometry, music, and astronomy.\nTogether these were the seven liberal arts.The study of rhetoric was inherited directly from Rome, where\nit was considered the most important\nsubject.  It would not be far from the truth to say that\neducation in the classical world\nmeant training landowners' sons\nto speak well enough to defend their interests\nin political and legal disputes.[6] Trevor Blackwell points out that this\nisn't strictly true, because the outside\nedges of curves erode faster.\nThanks to Ken Anderson, Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, Jackie McDonough, and Robert Morris for reading drafts of\nthis."},{"title":"The Anatomy of Determination","text":"September 2009Like all investors, we spend a lot of time trying to learn how to\npredict which startups will succeed.  We probably spend more time\nthinking about it than most, because we invest the earliest.\nPrediction is usually all we have to rely on.We learned quickly that the most important predictor of success is\ndetermination.  At first we thought it might be intelligence.\nEveryone likes to believe that's what makes startups succeed.  It\nmakes a better story that a company won because its founders were\nso smart.  The PR people and reporters who spread such stories\nprobably believe them themselves.  But while it certainly helps to\nbe smart, it's not the deciding factor.  There are plenty of people\nas smart as Bill Gates who achieve nothing.In most domains, talent is overrated compared to determination—partly\nbecause it makes a better story, partly because it gives onlookers\nan excuse for being lazy, and partly because after a while determination\nstarts to look like talent.I can't think of any field in which determination is overrated, but\nthe relative importance of determination and talent probably do\nvary somewhat.  Talent probably matters more in types of work that\nare purer, in the sense that one is solving mostly a single type\nof problem instead of many different types.   I suspect determination\nwould not take you as far in math as it would in, say, organized\ncrime.I don't mean to suggest by this comparison that types of work that\ndepend more on talent are always more admirable.  Most people would\nagree it's more admirable to be good at math than memorizing long\nstrings of digits, even though the latter depends more on natural\nability.Perhaps one reason people believe startup founders win by being\nsmarter is that intelligence does matter more in technology startups\nthan it used to in earlier types of companies.  You probably do\nneed to be a bit smarter to dominate Internet search than you had\nto be to dominate railroads or hotels or newspapers.  And that's\nprobably an ongoing trend.  But even in the highest of high tech\nindustries, success still depends more on determination than brains.If determination is so important, can we isolate its components?\nAre some more important than others?  Are there some you can\ncultivate?The simplest form of determination is sheer willfulness.  When you\nwant something, you must have it, no matter what.A good deal of willfulness must be inborn, because it's common to\nsee families where one sibling has much more of it than another.\nCircumstances can alter it, but at the high end of the scale, nature\nseems to be more important than nurture.  Bad circumstances can\nbreak the spirit of a strong-willed person, but I don't think there's\nmuch you can do to make a weak-willed person stronger-willed.Being strong-willed is not enough, however.  You also have to be\nhard on yourself.  Someone who was strong-willed but self-indulgent\nwould not be called determined.  Determination implies your willfulness\nis balanced by discipline.That word balance is a significant one.  The more willful you are,\nthe more disciplined you have to be.  The stronger your will, the\nless anyone will be able to argue with you except yourself.  And\nsomeone has to argue with you, because everyone has base impulses,\nand if you have more will than discipline you'll just give into\nthem and end up on a local maximum like drug addiction.We can imagine will and discipline as two fingers squeezing a\nslippery melon seed.  The harder they squeeze, the further the seed\nflies, but they must both squeeze equally or the seed spins off\nsideways.If this is true it has interesting implications, because discipline\ncan be cultivated, and in fact does tend to vary quite a lot in the\ncourse of an individual's life.  If determination is effectively\nthe product of will and discipline, then you can become more\ndetermined by being more disciplined.\n[1]Another consequence of the melon seed model is that the more willful\nyou are, the more dangerous it is to be undisciplined.  There seem\nto be plenty of examples to confirm that.  In some very energetic\npeople's lives you see something like wing flutter, where they\nalternate between doing great work and doing absolutely nothing.\nExternally this would look a lot like bipolar disorder.The melon seed model is inaccurate in at least one respect, however:\nit's static.  In fact the dangers of indiscipline increase with\ntemptation.  Which means, interestingly, that determination tends\nto erode itself.  If you're sufficiently determined to achieve great\nthings, this will probably increase the number of temptations around\nyou.  Unless you become proportionally more disciplined, willfulness\nwill then get the upper hand, and your achievement will revert to\nthe mean.That's why Julius Caesar thought thin men so dangerous.  They weren't\ntempted by the minor perquisites of power.The melon seed model implies it's possible to be too disciplined.\nIs it?  I think there probably are people whose willfulness is\ncrushed down by excessive discipline, and who would achieve more\nif they weren't so hard on themselves.  One reason the young sometimes\nsucceed where the old fail is that they don't realize how incompetent\nthey are.  This lets them do a kind of deficit spending.  When they\nfirst start working on something, they overrate their achievements.\nBut that gives them confidence to keep working, and their performance\nimproves.  Whereas someone clearer-eyed would see their initial\nincompetence for what it was, and perhaps be discouraged from\ncontinuing.There's one other major component of determination: ambition.  If\nwillfulness and discipline are what get you to your destination,\nambition is how you choose it.I don't know if it's exactly right to say that ambition is a component\nof determination, but they're not entirely orthogonal.  It would\nseem a misnomer if someone said they were very determined to do\nsomething trivially easy.And fortunately ambition seems to be quite malleable; there's a lot\nyou can do to increase it.  Most people don't know how ambitious\nto be, especially when they're young.  They don't know what's hard,\nor what they're capable of.  And this problem is exacerbated by\nhaving few peers.  Ambitious people are rare, so if everyone is\nmixed together randomly, as they tend to be early in people's lives,\nthen the ambitious ones won't have many ambitious peers.  When you\ntake people like this and put them together with other ambitious\npeople, they bloom like dying plants given water.  Probably most\nambitious people are starved for the sort of encouragement they'd\nget from ambitious peers, whatever their age.\n[2]Achievements also tend to increase your ambition.  With each step\nyou gain confidence to stretch further next time.So here in sum is how determination seems to work: it consists of\nwillfulness balanced with discipline, aimed by ambition.   And\nfortunately at least two of these three qualities can be cultivated.\nYou may be able to increase your strength of will somewhat; you can\ndefinitely learn self-discipline; and almost everyone is practically\nmalnourished when it comes to ambition.I feel like I understand determination a bit better now.  But only\na bit: willfulness, discipline, and ambition are all concepts almost\nas complicated as determination.\n[3]Note too that determination and talent are not the whole story.\nThere's a third factor in achievement: how much you like the work.\nIf you really love working on something,\nyou don't need determination to drive you; it's what you'd do anyway.\nBut most types of work have aspects one doesn't like, because most\ntypes of work consist of doing things for other people, and it's\nvery unlikely that the tasks imposed by their needs will happen to\nalign exactly with what you want to do.Indeed, if you want to create the most wealth,\nthe way to do it is to focus more on their needs than your interests,\nand make up the difference with determination.Notes[1]\nLoosely speaking.  What I'm claiming with the melon seed model\nis more like determination is proportionate to wd^m - k|w - d|^n,\nwhere w is will and d discipline.[2]\nWhich means one of the best ways to help a society generally\nis to create events and institutions that bring ambitious\npeople together.  It's like pulling the control rods out of a\nreactor: the energy they emit encourages other ambitious people,\ninstead of being absorbed by the normal people they're usually\nsurrounded with.Conversely, it's probably a mistake to do as some European countries\nhave done and try to ensure none of your universities is significantly\nbetter than the others.[3]\nFor example, willfulness clearly has two subcomponents,\nstubbornness and energy.  The first alone yields someone who's\nstubbornly inert.  The second alone yields someone flighty.\nAs willful people get older or otherwise lose their energy, they\ntend to become merely stubborn.Thanks to Sam Altman, Jessica Livingston, and Robert Morris\nfor reading drafts of this."},{"title":"The Destiny of Blacklists","text":"June 2005In 1997, a group of anti-spam vigilantes called\nMAPS started a blacklist of mail servers owned by or\ncompromised by spammers.  Mail server administrators could use this\nlist to block sources of spam.  At least, that was what most\nof them thought they were getting.The problem was, as vigilantes so often do, the guys at MAPS got\ncarried away.\nThey started to include servers on the list that\nthey knew weren't sources of spam, to pressure whoever\nowned the server to do what they wanted.  For example, in order to\nget revenge on people they believed were spamming, MAPS would\nblacklist the mail server of the company hosting their site.MAPS knew these mail servers weren't spam sources.  But they'd\nblacklist them anyway.  Everyone else\nsharing that server would then have their mail\nblocked.  And MAPS could insist that the hosting company delete\nthe site of the (supposed) spammer as the price of all the ISP's\nother, innocent, users having their mail unblocked.This is, strictly speaking, terrorism:\nharming innnocent people as a way to pressure some central authority\ninto doing what you want.The innocent people whose mail got blocked as a result of this\nkind of trick weren't \"collateral damage.\"  They weren't harmed\nby accident.  It was in order to harm these innocent people, and\nthus put pressure on their ISP, that MAPS blacklisted them.This kind of tactic gradually brought MAPS into disrepute.\nMost mail server administrators dropped their list and switched to\nanother blacklist, the Spamhaus SBL, which was created specifically to\navoid MAPS-style abuses.\nThey were only going to list real spammers.\nAnd for a couple years they did.Unfortunately, as so often happens, power corrupted them.  About a\nyear ago, I started to hear  reports\nthat Spamhaus was starting\nto use the same tactics MAPS had.John Reid of Spamhaus told me this wasn't true-- that the SBL\nwas still clean, and that they only blacklisted hosting companies'\nmail servers when they were spam hosts who took on innocent users\nas camouflage:\nThe sad fact is, some of these \"spammer friendly hosts\" will\nalso try load up with as many non-spammers as they can to try\nand show legitimacy. We try at all costs to avoid listing legit\nplaces and people, and only if the host tells us or shows us\nin no uncertain terms that they don't plan to cease hosting\nspammers will we list them in their entirety.\nI wanted to believe him.  But before I could reply to his mail,\nI got first-hand evidence that the SBL has in fact gone bad.As of this writing,\nany filter relying on the SBL is now marking email with the url\n\"paulgraham.com\" as spam.  Why?  Because the guys at the SBL want\nto pressure Yahoo, where paulgraham.com is hosted,\nto delete the site of a company they believe is spamming.This clearly contradicts what John Reid wrote in his email to\nme.  Yahoo is not a \"spam friendly\" ISP that takes on a few\ninnocent users to \"show legitimacy.\"  And Spamhaus knows it.\nOf the tens of thousands of sites Yahoo hosts, how many do they\nclaim have spammed?  Two.This case illustrates an important failing of blacklists.\nUnlike filters, they're run by humans.  And humans are all too likely\nto abuse the kind of power that blacklists embody.\nPerhaps someone will start another\nblacklist that tries to avoid such abuses.  But how long before\nthat one becomes corrupt too?No doubt this particular case will get sorted out, and mail containing my url\nwill stop getting blocked.\nBut this example is enough to\nprove that the whole idea of blacklists is broken.  Blacklists have a\nstructural flaw: there is no one to watch the watchers.Clarification: Many people seem to assume\nthat Spamhaus merely\nblacklisted the IP address of a single spammer's site.  In fact,\nas well as the spammer's IP address they\nalso blacklisted 66.163.161.45, aka store.yahoo.com, which is\nshared by thousands of Yahoo stores."},{"title":"The Equity Equation","text":"July 2007An investor wants to give you money for a certain percentage of\nyour startup.  Should you take it?  You're about to hire your first\nemployee.  How much stock should you give him?These are some of the hardest questions founders face.  And yet\nboth have the same answer:1/(1 - n)Whenever you're trading stock in your company for anything, whether\nit's money or an employee or a deal with another company, the test\nfor whether to do it is the same.  You should give up n% of your\ncompany if what you trade it for improves your average outcome\nenough that the (100 - n)% you have left is worth more than the\nwhole company was before.For example, if an investor wants to buy half your company, how\nmuch does that investment have to improve your average outcome for\nyou to break even?  Obviously it has to double: if you trade half\nyour company for something that more than doubles the company's\naverage outcome, you're net ahead.  You have half as big a share\nof something worth more than twice as much.In the general case, if n is the fraction of the company you're\ngiving up, the deal is a good one if it makes the company worth\nmore than 1/(1 - n).For example, suppose Y Combinator offers to fund you in return for\n6% of your company.  In this case, n is .06 and 1/(1 - n) is 1.064.\nSo you should take the deal if you believe we can improve your\naverage outcome by more than 6.4%.  If we improve your outcome by\n10%, you're net ahead, because the remaining .94 you hold is worth\n.94 x 1.1 = 1.034.\n[1]One of the things the equity equation shows us is that, financially\nat least, taking money from a top VC firm can be a really good deal.\nGreg Mcadoo from Sequoia recently said at a YC dinner that when\nSequoia invests alone they like to take about 30% of a company.\n1/.7 = 1.43, meaning that deal is worth taking if they can improve\nyour outcome by more than 43%.  For the average startup, that would\nbe an extraordinary bargain.  It would improve the average startup's\nprospects by more than 43% just to be able to say they were funded\nby Sequoia, even if they never actually got the money.The reason Sequoia is such a good deal is that the percentage of\nthe company they take is artificially low.  They don't even try to\nget market price for their investment; they limit their holdings\nto leave the founders enough stock to feel the company is still\ntheirs.The catch is that Sequoia gets about 6000 business plans a year and\nfunds about 20 of them, so the odds of getting this great deal are\n1 in 300. The companies that make it through are not average startups.Of course, there are other factors to consider in a VC deal.  It's\nnever just a straight trade of money for stock.  But if it were,\ntaking money from a top firm would generally be a bargain.You can use the same formula when giving stock to employees, but\nit works in the other direction.  If i is the average outcome for\nthe company with the addition of some new person, then they're worth\nn such that i = 1/(1 - n).  Which means n = (i - 1)/i.For example, suppose you're just two founders and you want to hire\nan additional hacker who's so good you feel he'll increase the\naverage outcome of the whole company by 20%.  n = (1.2 - 1)/1.2 =\n.167.  So you'll break even if you trade 16.7% of the company\nfor him.That doesn't mean 16.7% is the right amount of stock to give him.\nStock is not the only cost of hiring someone: there's usually salary\nand overhead as well.  And if the company merely breaks even on the\ndeal, there's no reason to do it.I think to translate salary and overhead into stock you should\nmultiply the annual rate by about 1.5.  Most startups grow fast or\ndie; if you die you don't have to pay the guy, and if you grow fast\nyou'll be paying next year's salary out of next year's valuation,\nwhich should be 3x this year's.  If your valuation grows 3x a year,\nthe total cost in stock of a new hire's salary and overhead is 1.5\nyears' cost at the present valuation.  [2]How much of an additional margin should the company need as the\n\"activation energy\" for the deal?  Since this is in effect the\ncompany's profit on a hire, the market will determine that: if\nyou're a hot opportunity, you can charge more.Let's run through an example.  Suppose the company wants to make a\n\"profit\" of 50% on the new hire mentioned above.  So subtract a\nthird from 16.7% and we have 11.1% as his \"retail\" price.  Suppose\nfurther that he's going to cost $60k a year in salary and overhead,\nx 1.5 = $90k total.  If the company's valuation is $2 million, $90k\nis 4.5%.  11.1% - 4.5% = an offer of 6.6%.Incidentally, notice how important it is for early employees to\ntake little salary.  It comes right out of stock that could otherwise\nbe given to them.Obviously there is a great deal of play in these numbers.  I'm not\nclaiming that stock grants can now be reduced to a formula.  Ultimately\nyou always have to guess.  But at least know what you're guessing.\nIf you choose a number based on your gut feel, or a table of typical\ngrant sizes supplied by a VC firm, understand what those are estimates\nof.And more generally, when you make any decision involving equity,\nrun it through 1/(1 - n) to see if it makes sense.  You should\nalways feel richer after trading equity.  If the trade didn't\nincrease the value of your remaining shares enough to put you net\nahead, you wouldn't have (or shouldn't have) done it.Notes[1] This is why we\ncan't believe anyone would think Y Combinator was a bad deal.  Does\nanyone really think we're so useless that in three months we can't\nimprove a startup's prospects by 6.4%?\n[2] The obvious choice\nfor your present valuation is the post-money valuation of your last\nfunding round.  This probably undervalues the company, though,\nbecause (a) unless your last round just happened, the company is\npresumably worth more, and (b) the valuation of an early funding\nround usually reflects some other contribution by the investors.Thanks to Sam Altman, Trevor Blackwell, Paul Buchheit,\nHutch Fishman, David Hornik, Paul Kedrosky, Jessica Livingston, Gary Sabot, and\nJoshua Schachter for reading drafts of this."},{"title":"The Fatal Pinch","text":"December 2014Many startups go through a point a few months before they die where\nalthough they have a significant amount of money in the bank, they're\nalso losing a lot each month, and revenue growth is either nonexistent\nor mediocre.  The company has, say, 6 months of runway.  Or to put\nit more brutally, 6 months before they're out of business.  They\nexpect to avoid that by raising more from investors.\n[1]That last sentence is the fatal one.There may be nothing founders are so prone to delude themselves\nabout as how interested investors will be in giving them additional\nfunding.  It's hard to convince investors the first time too, but\nfounders expect that.  What bites them the second time is a confluence\nof three forces:\nThe company is spending more now than it did the first time\nit raised money. Investors have much higher standards for companies that have\nalready raised money. The company is now starting to read as a failure. The first\ntime it raised money, it was neither a success nor a failure; it\nwas too early to ask. Now it's possible to ask that question, and\nthe default answer is failure, because that is at this point the\ndefault outcome.\nI'm going to call the situation I described in the first paragraph \"the fatal pinch.\" I try to resist\ncoining phrases, but making up a name for this situation may snap\nfounders into realizing when they're in it.One of the things that makes the fatal pinch so dangerous is\nthat it's self-reinforcing.  Founders overestimate their chances\nof raising more money, and so are slack about reaching\nprofitability, which further decreases their chances of raising\nmoney.Now that you know about the fatal pinch, what do you do about\nit?  Obviously the best thing to do is avoid it.  Y Combinator tells\nfounders who raise money to act as if it's the last they'll ever\nget.  Because the self-reinforcing nature of this situation works\nthe other way too: the less you need further investment, the easier\nit is to get.What do you do if you're already in the fatal pinch?  The\nfirst step is to re-evaluate the probability of raising more money.\nI will now, by an amazing feat of clairvoyance, do this for you:\nthe probability is zero.\n[2]Three options remain: you can shut down the company, you can increase\nhow much you make, and you can decrease how much you spend.You should shut down the company if you're certain it will\nfail no matter what you do.  Then at least you can give back the\nmoney you have left, and save yourself however many months you would\nhave spent riding it down.Companies rarely have to fail though.  What I'm really doing\nhere is giving you the option of admitting you've already given up.If you don't want to shut down the company, that leaves increasing\nrevenues and decreasing expenses.  In most startups, expenses =\npeople and decreasing expenses = firing people.\n[3]\nDeciding to\nfire people is usually hard, but there's one case in which it\nshouldn't be: when there are people you already know you should\nfire but you're in denial about it.  If so, now's the time.If that makes you profitable, or will enable you to make it to\nprofitability on the money you have left, you've avoided the immediate\ndanger.Otherwise you have three options: you either have to fire good\npeople, get some or all of the employees to take less salary for a\nwhile, or increase revenues.Getting people to take less salary is a weak solution that will\nonly work when the problem isn't too bad.  If your current trajectory\nwon't quite get you to profitability but you can get over the threshold\nby cutting salaries a little,\nyou might be able to make the case to everyone for doing it.\nOtherwise you're probably just postponing the problem, and that\nwill be obvious to the people whose salaries you're proposing to\ncut.\n[4]Which leaves two options, firing good people and making more money.\nWhile trying to balance them, keep in mind the eventual goal: to be\na successful product company in the sense of having a single thing\nlots of people use.You should lean more toward firing people if the source of your\ntrouble is overhiring. If you went out and hired 15 people before\nyou even knew what you were building, you've created a broken\ncompany.  You need to figure out what you're building, and it will\nprobably be easier to do that with a handful of people than 15.\nPlus those 15 people might not even be the ones you need for whatever\nyou end up building.  So the solution may be to shrink and then\nfigure out what direction to grow in.  After all, you're not doing\nthose 15 people any favors if you fly the company into ground with\nthem aboard.  They'll all lose their jobs eventually, along with\nall the time they expended on this doomed company.Whereas if you only have a handful of people, it may be better to\nfocus on trying to make more money.  It may seem facile to suggest\na startup make more money, as if that could be done for the asking.\nUsually a startup is already trying as hard as it can to sell\nwhatever it sells.  What I'm suggesting here is not so much to try\nharder to make money but to try to make money in a different way.\nFor example, if you have only one person selling while the rest are\nwriting code, consider having everyone work on selling.  What good\nwill more code do you when you're out of business?\nIf you have to write code to close a certain deal, go ahead;\nthat follows from everyone working on selling.  But only work on\nwhatever will get you the most revenue the soonest.Another way to make money differently is to sell different things,\nand in particular to do more consultingish work.  I say consultingish\nbecause there is a long slippery slope from making products to pure\nconsulting, and you don't have to go far down it before you start\nto offer something really attractive to customers. Although your\nproduct may not be very appealing yet, if you're a startup your\nprogrammers will often be way better than the ones your customers\nhave or can hire.  Or you may have expertise in some new field they\ndon't understand.  So if you change your sales conversations\njust a little from \"do you want to buy our product?\" to \"what do\nyou need that you'd pay a lot for?\" you may find it's suddenly a\nlot easier to extract money from customers.Be ruthlessly mercenary when you start doing this though: you're\ntrying to save your company from death here, so make customers pay\na lot, quickly. And to the extent you can, try to avoid the\nworst pitfalls of consulting.  The ideal thing might be if you built\na precisely defined derivative version of your product for the\ncustomer, and it was otherwise a straight product sale.  You keep\nthe IP and no billing by the hour.In the best case, this consultingish work may not be just something\nyou do to survive, but may turn out to be the thing-that-doesn't-scale that defines your\ncompany.  Don't expect it to be, but as you dive into individual\nusers' needs, keep your eyes open for narrow openings that have\nwide vistas beyond.There is usually so much demand for custom work that unless you're\nreally incompetent there has to be some point down the slope of\nconsulting at which you can survive.  But I didn't use the term\nslippery slope by accident; customers' insatiable demand for custom\nwork will always be pushing you toward the bottom.  So while you'll\nprobably survive, the problem now becomes to survive with the least\ndamage and distraction.The good news is, plenty of successful startups have passed through\nnear-death experiences and gone on to flourish.  You just have to\nrealize in time that you're near death.  And if you're in the fatal pinch,\nyou are.Notes[1]\nThere are a handful of companies that can't reasonably expect\nto make money for the first year or two, because what they're\nbuilding takes so long.  For these companies substitute \"progress\"\nfor \"revenue growth.\"  You're not one of these companies unless\nyour initial investors agreed in advance that you were.  And frankly\neven these companies wish they weren't, because the illiquidity of\n\"progress\" puts them at the mercy of investors.[2]\nThere's a variant of the fatal pinch where your existing\ninvestors help you along by promising to invest more.  Or rather,\nwhere you read them as promising to invest more, while they think\nthey're just mentioning the possibility.  The way to solve this\nproblem, if you have 8 months of runway or less, is to try to get\nthe money right now.  Then you'll either get the money, in which\ncase (immediate) problem solved, or at least prevent your investors\nfrom helping you to remain in denial about your fundraising prospects.[3]\nObviously, if you have significant expenses other than salaries\nthat you can eliminate, do it now.[4]\nUnless of course the source of the problem is that you're paying\nyourselves high salaries.  If by cutting the founders' salaries to\nthe minimum you need, you can make it to profitability, you should.\nBut it's a bad sign if you needed to read this to realize that.Thanks to Sam Altman, Paul Buchheit, Jessica Livingston, and\nGeoff Ralston for reading drafts of this."},{"title":"The Founder Visa","text":"April 2009I usually avoid politics, but since we now seem to have an administration that's open to suggestions, I'm going to risk making one.  The single biggest thing the government could do to increase the number of startups in this country is a policy that would cost nothing: establish a new class of visa for startup founders.The biggest constraint on the number of new startups that get created in the US is not tax policy or employment law or even Sarbanes-Oxley.  It's that we won't let the people who want to start them into the country.Letting just 10,000 startup founders into the country each year could have a visible effect on the economy.  If we assume 4 people per startup, which is probably an overestimate, that's 2500 new companies.  Each year.  They wouldn't all grow as big as Google, but out of 2500 some would come close.By definition these 10,000 founders wouldn't be taking jobs from Americans: it could be part of the terms of the visa that they couldn't work for existing companies, only new ones they'd founded.  In fact they'd cause there to be\nmore jobs for Americans, because the companies they started would hire more employees as they grew.The tricky part might seem to be how one defined a startup. But that could be solved quite easily: let the market decide.  Startup investors work hard to find the best startups.  The government could not do better than to piggyback on their expertise, and use investment by recognized startup investors as the test of whether a company was a real startup.How would the government decide who's a startup investor?  The same way they decide what counts as a university for student visas. We'll establish our own accreditation procedure. We know who one another are.10,000 people is a drop in the bucket by immigration standards, but would represent a huge increase in the pool of startup founders.  I think this would have such a visible effect on the economy that it would make the legislator who introduced the bill famous.  The only way to know for sure would be to try it, and that would cost practically nothing.Thanks to Trevor Blackwell, Paul Buchheit, Jeff Clavier, David Hornik, Jessica Livingston, Greg Mcadoo, Aydin Senkut, and Fred Wilson for reading drafts of this.Related:"},{"title":"The Future of Startup Funding","text":"August 2010Two years ago I\nwrote about what I called \"a huge, unexploited\nopportunity in startup funding:\" the growing disconnect between\nVCs, whose current business model requires them to invest large\namounts, and a large class of startups that need less than they\nused to.  Increasingly, startups want a couple hundred thousand\ndollars, not a couple million.\n[1]The opportunity is a lot less unexploited now.  Investors have\npoured into this territory from both directions.  VCs are much more\nlikely to make angel-sized investments than they were a year ago.\nAnd meanwhile the past year has seen a dramatic increase in a new\ntype of investor: the super-angel, who operates like an angel, but\nusing other people's money, like a VC.Though a lot of investors are entering this territory, there is\nstill room for more.  The distribution of investors should mirror\nthe distribution of startups, which has the usual power law dropoff.\nSo there should be a lot more people investing tens or hundreds of\nthousands than millions.\n[2]In fact, it may be good for angels that there are more people doing\nangel-sized deals, because if angel rounds become more legitimate,\nthen startups may start to opt for angel rounds even when they\ncould, if they wanted, raise series A rounds from VCs.  One reason\nstartups prefer series A rounds is that they're more prestigious.\nBut if angel investors become more active and better known, they'll\nincreasingly be able to compete with VCs in brand.Of course, prestige isn't the main reason to prefer a series A\nround.  A startup will probably get more attention from investors\nin a series A round than an angel round.  So if a startup is choosing\nbetween an angel round and an A round from a good VC fund, I usually\nadvise them to take the A round.\n[3]But while series A rounds aren't going away, I think VCs should be\nmore worried about super-angels than vice versa.  Despite their\nname, the super-angels are really mini VC funds, and they clearly\nhave existing VCs in their sights.They would seem to have history on their side.\nThe pattern here seems the same\none we see when startups and established companies enter a new\nmarket.  Online video becomes possible, and YouTube plunges right\nin, while existing media companies embrace it only half-willingly,\ndriven more by fear than hope, and aiming more to protect their\nturf than to do great things for users.  Ditto for PayPal.  This\npattern is repeated over and over, and it's usually the invaders\nwho win. In this case the super-angels are the invaders.  Angel\nrounds are their whole business, as online video was for YouTube.\nWhereas VCs who make angel investments mostly do it as a way to\ngenerate deal flow for series A rounds.\n[4]On the other hand, startup investing is a very strange business.\nNearly all the returns are concentrated in a few big winners.  If\nthe super-angels merely fail to invest in (and to some extent\nproduce) the big winners, they'll be out of business, even if they\ninvest in all the others.VCsWhy don't VCs start doing smaller series A rounds?  The sticking\npoint is board seats.  In a traditional series A round, the partner\nwhose deal it is takes a seat on the startup's board.  If we assume\nthe average startup runs for 6 years and a partner can bear to be\non 12 boards at once, then a VC fund can do 2 series A deals per\npartner per year.It has always seemed to me the solution is to take fewer board\nseats.  You don't have to be on the board to help a startup.  Maybe\nVCs feel they need the power that comes with board membership to\nensure their money isn't wasted.  But have they tested that theory?\nUnless they've tried not taking board seats and found their returns\nare lower, they're not bracketing the problem.I'm not saying VCs don't help startups.  The good ones help them a\nlot.  What I'm saying is that the kind of help that matters, you\nmay not have to be a board member to give.\n[5]How will this all play out?  Some VCs will probably adapt, by doing\nmore, smaller deals.  I wouldn't be surprised if by streamlining\ntheir selection process and taking fewer board seats, VC funds could\ndo 2 to 3 times as many series A rounds with no loss of quality.But other VCs will make no more than superficial changes.  VCs are\nconservative, and the threat to them isn't mortal.  The VC funds\nthat don't adapt won't be violently displaced.  They'll edge gradually\ninto a different business without realizing it.  They'll still do\nwhat they will call series A rounds, but these will increasingly\nbe de facto series B rounds.\n[6]In such rounds they won't get the 25 to 40% of the company they do\nnow.  You don't give up as much of the company in later rounds\nunless something is seriously wrong.  Since the VCs who don't adapt\nwill be investing later, their returns from winners may be smaller.\nBut investing later should also mean they have fewer losers.  So\ntheir ratio of risk to return may be the same or even better.\nThey'll just have become a different, more conservative, type of\ninvestment.AngelsIn the big angel rounds that increasingly compete with series A\nrounds, the investors won't take as much equity as VCs do now.  And\nVCs who try to compete with angels by doing more, smaller deals\nwill probably find they have to take less equity to do it. Which\nis good news for founders: they'll get to keep more of the company.The deal terms of angel rounds will become less restrictive\ntoo—not just less restrictive than series A terms, but less\nrestrictive than angel terms have traditionally been.In the future, angel rounds will less often be for specific amounts\nor have a lead investor.  In the old days, the standard m.o. for\nstartups was to find one angel to act as the lead investor.  You'd\nnegotiate a round size and valuation with the lead, who'd supply\nsome but not all of the money.  Then the startup and the lead would\ncooperate to find the rest.The future of angel rounds looks more like this: instead of a fixed\nround size, startups will do a rolling close, where they take money\nfrom investors one at a time till they feel they have enough.\n[7]\nAnd though there's going to be one investor who gives them the first\ncheck, and his or her help in recruiting other investors will\ncertainly be welcome, this initial investor will no longer be the\nlead in the old sense of managing the round.  The startup will now\ndo that themselves.There will continue to be lead investors in the sense of investors\nwho take the lead in advising a startup.  They may also make\nthe biggest investment.  But they won't always have to be the one\nterms are negotiated with, or be the first money in, as they have\nin the past.  Standardized paperwork will do away with the need to\nnegotiate anything except the valuation, and that will get easier\ntoo.If multiple investors have to share a valuation, it will be whatever\nthe startup can get from the first one to write a check, limited\nby their guess at whether this will make later investors balk.  But\nthere may not have to be just one valuation.  Startups are increasingly\nraising money on convertible notes, and convertible notes have not\nvaluations but at most valuation caps: caps on what the\neffective valuation will be when the debt converts to equity (in a\nlater round, or upon acquisition if that happens first).  That's\nan important difference because it means a startup could do multiple\nnotes at once with different caps.  This is now starting to happen,\nand I predict it will become more common.SheepThe reason things are moving this way is that the old way sucked\nfor startups.  Leads could (and did) use a fixed size round as a\nlegitimate-seeming way of saying what all founders hate to hear:\nI'll invest if other people will.  Most investors, unable to judge\nstartups for themselves, rely instead on the opinions of other\ninvestors.  If everyone wants in, they want in too; if not, not.\nFounders hate this because it's a recipe for deadlock, and delay\nis the thing a startup can least afford.  Most investors know this\nm.o. is lame, and few say openly that they're doing it.  But the\ncraftier ones achieve the same result by offering to lead rounds\nof fixed size and supplying only part of the money.  If the startup\ncan't raise the rest, the lead is out too.  How could they go ahead\nwith the deal?  The startup would be underfunded!In the future, investors will increasingly be unable to offer\ninvestment subject to contingencies like other people investing.\nOr rather, investors who do that will get last place in line.\nStartups will go to them only to fill up rounds that are mostly\nsubscribed.  And since hot startups tend to have rounds that are\noversubscribed, being last in line means they'll probably miss the\nhot deals.  Hot deals and successful startups are not identical,\nbut there is a significant correlation.\n[8]\nSo investors who won't invest unilaterally will have lower returns.Investors will probably find they do better when deprived of this\ncrutch anyway.   Chasing hot deals doesn't make investors choose\nbetter; it just makes them feel better about their choices.  I've\nseen feeding frenzies both form and fall apart many times, and as\nfar as I can tell they're mostly random.\n[9]\nIf investors can\nno longer rely on their herd instincts, they'll have to think more\nabout each startup before investing.  They may be surprised how\nwell this works.Deadlock wasn't the only disadvantage of letting a lead investor\nmanage an angel round.  The investors would not infrequently collude\nto push down the valuation.  And rounds took too long to close,\nbecause however motivated the lead was to get the round closed, he\nwas not a tenth as motivated as the startup.Increasingly, startups are taking charge of their own angel rounds.\nOnly a few do so far, but I think we can already declare the old\nway dead, because those few are the best startups.  They're the\nones in a position to tell investors how the round is going to work.\nAnd if the startups you want to invest in do things a certain way,\nwhat difference does it make what the others do?TractionIn fact, it may be slightly misleading to say that angel rounds\nwill increasingly take the place of series A rounds.  What's really\nhappening is that startup-controlled rounds are taking the place\nof investor-controlled rounds.This is an instance of a very important meta-trend, one that Y\nCombinator itself has been based on from the beginning: founders\nare becoming increasingly powerful relative to investors.  So if\nyou want to predict what the future of venture funding will be like,\njust ask: how would founders like it to be?  One by one, all the\nthings founders dislike about raising money are going to get\neliminated.\n[10]Using that heuristic, I'll predict a couple more things.  One is\nthat investors will increasingly be unable to wait for startups to\nhave \"traction\" before they put in significant money.  It's hard\nto predict in advance which startups will succeed.  So most investors\nprefer, if they can, to wait till the startup is already succeeding,\nthen jump in quickly with an offer.  Startups hate this as well,\npartly because it tends to create deadlock, and partly because it\nseems kind of slimy.  If you're a promising startup but don't yet\nhave significant growth, all the investors are your friends in\nwords, but few are in actions.  They all say they love you, but\nthey all wait to invest. Then when you start to see growth, they\nclaim they were your friend all along, and are aghast at the thought\nyou'd be so disloyal as to leave them out of your round.  If founders\nbecome more powerful, they'll be able to make investors give them\nmore money upfront.(The worst variant of this behavior is the tranched deal, where the\ninvestor makes a small initial investment, with more to follow if\nthe startup does well.  In effect, this structure gives the investor\na free option on the next round, which they'll only take if it's\nworse for the startup than they could get in the open market.\nTranched deals are an abuse.  They're increasingly rare, and they're\ngoing to get rarer.)\n[11]Investors don't like trying to predict which startups will succeed,\nbut increasingly they'll have to.  Though the way that happens won't\nnecessarily be that the behavior of existing investors will change;\nit may instead be that they'll be replaced by other investors with\ndifferent behavior—that investors who understand startups\nwell enough to take on the hard problem of predicting their trajectory\nwill tend to displace suits whose skills lie more in raising money\nfrom LPs.SpeedThe other thing founders hate most about fundraising is how long\nit takes.  So as founders become more powerful, rounds should start\nto close faster.Fundraising is still terribly distracting for startups. If you're\na founder in the middle of raising a round, the round is the top idea in your mind, which means working on the\ncompany isn't.  If a round takes 2 months to close, which is\nreasonably fast by present standards, that means 2 months during\nwhich the company is basically treading water.  That's the worst\nthing a startup could do.So if investors want to get the best deals, the way to do it will\nbe to close faster.   Investors don't need weeks to make up their\nminds anyway.  We decide based on about 10 minutes of reading an\napplication plus 10 minutes of in person interview, and we only\nregret about 10% of our decisions.  If we can decide in 20 minutes,\nsurely the next round of investors can decide in a couple days.\n[12]There are a lot of institutionalized delays in startup funding: the\nmulti-week mating dance with investors; the distinction between\ntermsheets and deals; the fact that each series A has enormously\nelaborate, custom paperwork.  Both founders and investors tend to\ntake these for granted.  It's the way things have always been.  But\nultimately the reason these delays exist is that they're to the\nadvantage of investors.  More time gives investors more information\nabout a startup's trajectory, and it also tends to make startups\nmore pliable in negotiations, since they're usually short of money.These conventions weren't designed to drag out the funding process,\nbut that's why they're allowed to persist.  Slowness is to the\nadvantage of investors, who have in the past been the ones with the\nmost power.  But there is no need for rounds to take months or even\nweeks to close, and once founders realize that, it's going to stop.\nNot just in angel rounds, but in series A rounds too.  The future\nis simple deals with standard terms, done quickly.One minor abuse that will get corrected in the process is option\npools.  In a traditional series A round, before the VCs invest they\nmake the company set aside a block of stock for future hires—usually\nbetween 10 and 30% of the company.  The point is to ensure this\ndilution is borne by the existing shareholders.  The practice isn't\ndishonest; founders know what's going on.  But it makes deals\nunnecessarily complicated.  In effect the valuation is 2 numbers.\nThere's no need to keep doing this.\n[13]The final thing founders want is to be able to sell some of\ntheir own stock in later rounds.  This won't be a change,\nbecause the practice is now quite common.  A lot of investors\nhated the idea, but the world hasn't exploded as a result,\nso it will happen more, and more openly.SurpriseI've talked here about a bunch of changes that will be forced on\ninvestors as founders become more powerful.  Now the good news:\ninvestors may actually make more money as a result.A couple days ago an interviewer\nasked\nme if founders having more\npower would be better or worse for the world.  I was surprised,\nbecause I'd never considered that question.  Better or worse, it's\nhappening.  But after a second's reflection, the answer seemed\nobvious.  Founders understand their companies better than investors,\nand it has to be better if the people with more knowledge have more\npower.One of the mistakes novice pilots make is overcontrolling the\naircraft: applying corrections too vigorously, so the aircraft\noscillates about the desired configuration instead of approaching\nit asymptotically.  It seems probable that investors have till now\non average been overcontrolling their portfolio companies.  In a\nlot of startups, the biggest source of stress for the founders is\nnot competitors but investors.  Certainly it was for us at Viaweb.\nAnd this is not a new phenomenon: investors were James Watt's biggest\nproblem too.   If having less power prevents investors from\novercontrolling startups, it should be better not just for founders\nbut for investors too.Investors may end up with less stock per startup, but startups will\nprobably do better with founders more in control, and there will\nalmost certainly be more of them.  Investors all compete with one\nanother for deals, but they aren't one another's main competitor.\nOur main competitor is employers.  And so far that competitor is\ncrushing us.  Only a tiny fraction of people who could start a\nstartup do.  Nearly all customers choose the competing product, a\njob.  Why?  Well, let's look at the product we're offering.  An\nunbiased review would go something like this:\nStarting a startup gives you more freedom and the opportunity to\nmake a lot more money than a job, but it's also hard work and at\ntimes very stressful.\nMuch of the stress comes from dealing with investors.  If reforming\nthe investment process removed that stress, we'd make our product\nmuch more attractive.  The kind of people who make good startup\nfounders don't mind dealing with technical problems—they enjoy\ntechnical problems—but they hate the type of problems investors\ncause.Investors have no\nidea that when they maltreat one startup, they're preventing 10\nothers from happening, but they are.  Indirectly, but they are.  So\nwhen investors stop trying to squeeze a little more out of their\nexisting deals, they'll find they're net ahead, because so many\nmore new deals appear.One of our axioms at Y Combinator is not to think of deal flow as\na zero-sum game.  Our main focus is to encourage more startups to happen,\nnot to win a larger share of the existing stream.  We've found this\nprinciple very useful, and we think as it spreads outward it will\nhelp later stage investors as well.\"Make something people want\"\napplies to us too.Notes[1]\nIn this essay I'm talking mainly about software startups.\nThese points don't apply to types of startups that are still expensive\nto start, e.g. in energy or biotech.Even the cheap kinds of startups will generally raise large amounts\nat some point, when they want to hire a lot of people.  What has\nchanged is how much they can get done before that.[2]\nIt's not the distribution of good startups that has a power\nlaw dropoff, but the distribution of potentially good startups,\nwhich is to say, good deals.  There are lots of potential winners,\nfrom which a few actual winners emerge with hyperlinear certainty.[3]\nAs I was writing this, I asked some founders who'd taken\nseries A rounds from top VC funds whether it was worth it, and they\nunanimously said yes.The quality of investor is more important than the type of round,\nthough.  I'd take an angel round from good angels over a series A\nfrom a mediocre VC.[4]\nFounders also worry that taking an angel investment from a\nVC means they'll look bad if the VC declines to participate in the\nnext round.  The trend of VC angel investing is so new that it's\nhard to say how justified this worry is.Another danger, pointed out by Mitch Kapor, is that if VCs are only\ndoing angel deals to generate series A deal flow, then their\nincentives aren't aligned with the founders'.  The founders want\nthe valuation of the next round to be high, and the VCs want it to\nbe low.  Again, hard to say yet how much of a problem this will be.[5]\nJosh Kopelman pointed out that another way to be on fewer\nboards at once is to take board seats for shorter periods.[6]\nGoogle was in this respect as so many others the pattern for\nthe future.  It would be great for VCs if the similarity extended\nto returns.  That's probably too much to hope for, but the returns\nmay be somewhat higher, as I explain later.[7]\nDoing a rolling close doesn't mean the company is always\nraising money.  That would be a distraction.  The point of a rolling\nclose is to make fundraising take less time, not more.  With a\nclassic fixed sized round, you don't get any money till all the\ninvestors agree, and that often creates a situation where they all\nsit waiting for the others to act.  A rolling close usually prevents\nthis.\n[8]\nThere are two (non-exclusive) causes of hot deals: the quality\nof the company, and domino effects among investors.  The former is\nobviously a better predictor of success.[9]\nSome of the randomness is concealed by the fact that investment\nis a self fulfilling prophecy.[10]\nThe shift in power to founders is exaggerated now because\nit's a seller's market.  On the next downtick it will seem like I\noverstated the case.  But on the next uptick after that, founders\nwill seem more powerful than ever.[11]\nMore generally, it will become less common for the same\ninvestor to invest in successive rounds, except when exercising an\noption to maintain their percentage.  When the same investor invests\nin successive rounds, it often means the startup isn't getting\nmarket price.  They may not care; they may prefer to work with an\ninvestor they already know; but as the investment market becomes\nmore efficient, it will become increasingly easy to get market price\nif they want it.  Which in turn means the investment community will\ntend to become more stratified.[12]\nThe two 10 minuteses have 3 weeks between them so founders\ncan get cheap plane tickets, but except for that they could be\nadjacent.[13]\nI'm not saying option pools themselves will go away.  They're\nan administrative convenience.  What will go away is investors\nrequiring them.Thanks to Sam Altman, John Bautista, Trevor Blackwell,\nPaul Buchheit, Jeff Clavier,\nPatrick Collison, Ron Conway, Matt Cohler, Chris Dixon, Mitch Kapor,\nJosh Kopelman, Pete Koomen, Carolynn Levy, Jessica Livingston, Ariel\nPoler, Geoff Ralston, Naval Ravikant, Dan Siroker, Harj Taggar, and\nFred Wilson\nfor reading drafts of this."},{"title":"The Future of Web Startups","text":"October 2007(This essay is derived from a keynote at FOWA in October 2007.)There's something interesting happening right now.  Startups are\nundergoing the same transformation that technology does when it becomes\ncheaper.It's a pattern we see over and over in technology.  Initially\nthere's some device that's very expensive and made\nin small quantities.  Then someone discovers how to make them cheaply;\nmany more get built; and as a result they can be used in new ways.Computers are a familiar example.  When I was a kid, computers were\nbig, expensive machines built one at a time.  Now they're a commodity.\nNow we can stick computers in everything.This pattern is very old.  Most of the turning\npoints in economic history are instances of it.  It happened to\nsteel in the 1850s, and to power in the 1780s.\nIt happened to cloth manufacture in the thirteenth century, generating\nthe wealth that later brought about the Renaissance.  Agriculture\nitself was an instance of this pattern.Now as well as being produced by startups, this pattern\nis happening to startups.  It's so cheap to start web startups\nthat orders of magnitudes more will be started.   If the pattern\nholds true, that should cause dramatic changes.1. Lots of StartupsSo my first prediction about the future of web startups is pretty\nstraightforward: there will be a lot of them.  When starting a\nstartup was expensive, you had to get the permission of investors\nto do it.  Now the only threshold is courage.Even that threshold is getting lower, as people watch others take\nthe plunge and survive.  In the last batch of startups we funded,\nwe had several founders who said they'd thought of applying before,\nbut weren't sure and got jobs instead.  It was only after hearing\nreports of friends who'd done it that they decided to try it\nthemselves.Starting a startup is hard, but having a 9 to 5 job is hard too,\nand in some ways a worse kind of hard.  In a startup you have lots\nof worries, but you don't have that feeling that your life is flying\nby like you do in a big company.  Plus in a startup you could make\nmuch more money.As word spreads that startups work, the number may grow\nto a point that would now seem surprising.We now think of it as normal to have a job at a company, but this\nis the thinnest of historical veneers.  Just two or three\nlifetimes ago, most people in what are now called industrialized\ncountries lived by farming.  So while it may seem surprising to\npropose that large numbers of people will change the way they make\na living, it would be more surprising if they didn't.2. StandardizationWhen technology makes something dramatically cheaper, standardization\nalways follows.  When you make things in large volumes you tend\nto standardize everything that doesn't need to change.At Y Combinator we still only have four people, so we try to\nstandardize everything.  We could hire employees, but we want to be\nforced to figure out how to scale investing.We often tell startups to release a minimal version one quickly,\nthen let the needs of the users determine what to do\nnext.  In essense, let the market design the product.  We've\ndone the same thing ourselves.  We think of the techniques we're\ndeveloping for dealing with large numbers of startups as like\nsoftware.  Sometimes it literally is software, like\nHacker News and\nour application system.One of the most important things we've been working on standardizing\nare investment terms.  Till now investment terms have been\nindividually negotiated.\nThis is a problem for founders, because it makes raising money\ntake longer and cost more in legal fees.  So as well as using the\nsame paperwork for every deal we do, we've commissioned generic\nangel paperwork that all the startups we fund can use for future\nrounds.Some investors will still want to cook up their own deal terms.\nSeries A rounds, where you raise a million dollars or more, will\nbe custom deals for the forseeable future.  But I think angel rounds\nwill start to be done mostly with standardized agreements.  An angel\nwho wants to insert a bunch of complicated terms into the agreement\nis probably not one you want anyway.3. New Attitude to AcquisitionAnother thing I see starting to get standardized is acquisitions.\nAs the volume of startups increases, big companies will start to\ndevelop standardized procedures that make acquisitions little\nmore work than hiring someone.Google is the leader here, as in so many areas of technology.  They\nbuy a lot of startups— more than most people realize, because they\nonly announce a fraction of them.   And being Google, they're\nfiguring out how to do it efficiently.One problem they've solved is how to think about acquisitions.  For\nmost companies, acquisitions still carry some stigma of inadequacy.\nCompanies do them because they have to, but there's usually some\nfeeling they shouldn't have to—that their own programmers should\nbe able to build everything they need.Google's example should cure the rest of the world of this idea.\nGoogle has by far the best programmers of any public technology\ncompany.  If they don't have a problem doing acquisitions, the\nothers should have even less problem.  However many Google does,\nMicrosoft should do ten times as many.One reason Google doesn't have a problem with acquisitions\nis that they know first-hand the quality of the people they can get\nthat way.  Larry and Sergey only started Google after making the\nrounds of the search engines trying to sell their idea and finding\nno takers.  They've been the guys coming in to visit the big\ncompany, so they know who might be sitting across that conference\ntable from them.4. Riskier Strategies are PossibleRisk is always proportionate to reward.  The way to get really big\nreturns is to do things that seem crazy, like starting a new search\nengine in 1998, or turning down a billion dollar acquisition offer.This has traditionally been a problem in venture funding.  Founders\nand investors have different attitudes to risk.  Knowing that risk\nis on average proportionate to reward, investors like risky strategies,\nwhile founders, who don't have a big enough sample size to care\nwhat's true on average, tend to be more conservative.If startups are easy to start, this conflict goes away, because\nfounders can start them younger, when it's rational to take more\nrisk, and can start more startups total in their careers.  When\nfounders can do lots of startups, they can start to look at the\nworld in the same portfolio-optimizing way as investors.  And that\nmeans the overall amount of wealth created can be greater, because\nstrategies can be riskier.5. Younger, Nerdier FoundersIf startups become a cheap commodity, more people will be able to\nhave them, just as more people could have computers once microprocessors\nmade them cheap.  And in particular, younger and more technical\nfounders will be able to start startups than could before.Back when it cost a lot to start a startup, you had to convince\ninvestors to let you do it.  And that required very different skills\nfrom actually doing the startup.  If investors were perfect judges,\nthe two would require exactly the same skills.  But unfortunately\nmost investors are terrible judges.  I know because I see behind\nthe scenes what an enormous amount of work it takes to raise money,\nand the amount of selling required in an industry is always inversely\nproportional to the judgement of the buyers.Fortunately, if startups get cheaper to start, there's another way\nto convince investors.  Instead of going to venture capitalists\nwith a business plan and trying to convince them to fund it, you\ncan get a product launched on a few tens of thousands of dollars\nof seed money from us or your uncle, and approach them with a\nworking company instead of a plan for one.  Then instead of\nhaving to seem smooth and confident, you can just point them to\nAlexa.This way of convincing investors is better suited to hackers, who\noften went into technology in part because they felt uncomfortable\nwith the amount of fakeness required in other fields.6. Startup Hubs Will PersistIt might seem that if startups get cheap to start, it will mean the\nend of startup hubs like Silicon Valley.  If all you need to start\na startup is rent money, you should be able to do it anywhere.This is kind of true and kind of false.  It's true that you can now\nstart a startup anywhere.  But you have to do more with a\nstartup than just start it.  You have to make it succeed.  And that\nis more likely to happen in a startup hub.I've thought a lot about this question, and it seems to me the\nincreasing cheapness of web startups will if anything increase the\nimportance of startup hubs.  The value of startup hubs, like centers\nfor any kind of business, lies in something very old-fashioned:\nface to face meetings.  No technology in the immediate future will\nreplace walking down University Ave and running into a friend who\ntells you how to fix a bug that's been bothering you all weekend,\nor visiting a friend's startup down the street and ending up in a\nconversation with one of their investors.The question of whether to be in a startup hub is like the question\nof whether to take outside investment.  The question is not whether\nyou need it, but whether it brings any advantage at all.\nBecause anything that brings an advantage will give your competitors\nan advantage over you if they do it and you don't.  So if you hear\nsomeone saying \"we don't need to be in Silicon Valley,\" that use\nof the word \"need\" is a sign they're not even thinking about the\nquestion right.And while startup hubs are as powerful magnets as ever, the increasing\ncheapness of starting a startup means the particles they're attracting\nare getting lighter.  A startup now can be just a pair of 22 year\nold guys.  A company like that can move much more easily than one\nwith 10 people, half of whom have kids.We know because we make people move for Y Combinator, and it doesn't\nseem to be a problem. The advantage of being able to work together\nface to face for three months outweighs the inconvenience of moving.\nAsk anyone who's done it.The mobility of seed-stage startups means that seed funding is a\nnational business.  One of the most common emails we get is from\npeople asking if we can help them set up a local clone of Y Combinator.\nBut this just wouldn't work. Seed funding isn't regional, just as\nbig research universities aren't.Is seed funding not merely national, but international?  Interesting\nquestion.  There are signs it may be.  We've had an ongoing\nstream of founders from outside the US, and they tend to do\nparticularly well, because they're all people who were so determined\nto succeed that they were willing to move to another country to do\nit.The more mobile startups get, the harder it would be to start new\nsilicon valleys.  If startups are mobile, the best local talent\nwill go to the real Silicon Valley,\nand all they'll get at the local one will be the people who didn't\nhave the energy to move.This is not a nationalistic idea, incidentally.  It's cities that\ncompete, not countries.  Atlanta is just as hosed as Munich.7. Better Judgement NeededIf the number of startups increases dramatically, then the people\nwhose job is to judge them are going to have to get better at\nit.  I'm thinking particularly of investors and acquirers.  We now\nget on the order of 1000 applications a year.  What are we going\nto do if we get 10,000?That's actually an alarming idea.  But we'll figure out some kind\nof answer.  We'll have to.  It will probably involve writing some\nsoftware, but fortunately we can do that.Acquirers will also have to get better at picking winners.\nThey generally do better than investors, because they pick\nlater, when there's more performance to measure.  But even at the\nmost advanced acquirers, identifying companies to\nbuy is extremely ad hoc, and completing the acquisition often\ninvolves a great deal of unneccessary friction.I think acquirers may eventually have chief acquisition officers\nwho will both identify good acquisitions and make the deals happen.\nAt the moment those two functions are separate.  Promising new\nstartups are often discovered by developers.  If someone powerful\nenough wants to buy them, the deal is handed over to corp dev guys\nto negotiate.  It would be better if both were combined in\none group, headed by someone with a technical background and some\nvision of what they wanted to accomplish.  Maybe in the future big\ncompanies will have both a VP of Engineering responsible for\ntechnology developed in-house, and a CAO responsible for bringing\ntechnology in from outside.At the moment, there is no one within big companies who gets in\ntrouble when they buy a startup for $200 million that they could\nhave bought earlier for $20 million.  There should start to be\nsomeone who gets in trouble for that.8. College Will ChangeIf the best hackers start their own companies after college\ninstead of getting jobs, that will change what happens in college.\nMost of these changes will be for the better.  I think the experience\nof college is warped in a bad way by the expectation that afterward\nyou'll be judged by potential employers.One change will be in the meaning of \"after\ncollege,\" which will switch from when one graduates from college\nto when one leaves it.  If you're starting your own company, why\ndo you need a degree?  We don't encourage people to start startups\nduring college, but the best founders are certainly\ncapable of it.  Some of the most successful companies we've funded\nwere started by undergrads.I grew up in a time where college degrees seemed really important,\nso I'm alarmed to be saying things like this, but there's nothing\nmagical about a degree.  There's nothing that magically changes\nafter you take that last exam.  The importance of degrees is due\nsolely to the administrative needs of large organizations.  These\ncan certainly affect your life—it's hard to get into grad\nschool, or to get a work visa in the US, without an undergraduate\ndegree—but tests like this will matter less and\nless.As well as mattering less whether students get degrees, it will\nalso start to matter less where they go to college.  In a startup\nyou're judged by users, and they don't care where you went to\ncollege.  So in a world of startups, elite universities will play\nless of a role as gatekeepers.  In the US it's a national scandal\nhow easily children of rich parents game college admissions.\nBut the way this problem ultimately gets solved may not be by\nreforming the universities but by going around them.  We in the\ntechnology world are used to that sort of solution: you don't beat\nthe incumbents; you redefine the problem to make them irrelevant.The greatest value of universities is not the brand name or perhaps\neven the classes so much as the people you meet.  If\nit becomes common to start a startup after college, students may start\ntrying to maximize this.  Instead of focusing on getting\ninternships at companies they want to work for, they may start\nto focus on working with other students they want as cofounders.What students do in their classes will change too.  Instead of\ntrying to get good grades to impress future employers, students\nwill try to learn things.  We're talking about some pretty dramatic\nchanges here.9. Lots of CompetitorsIf it gets easier to start a startup, it's easier for competitors too.\nThat doesn't erase the advantage of\nincreased cheapness, however.  You're not all playing a zero-sum\ngame.  There's not some fixed number of startups that can succeed,\nregardless of how many are started.In fact, I don't think there's any limit to the number of startups\nthat could succeed.  Startups succeed by creating wealth, which is\nthe satisfaction of people's desires.  And people's desires seem\nto be effectively infinite, at least in the short term.What the increasing number of startups does mean is that you won't\nbe able to sit on a good idea.  Other people have your idea, and\nthey'll be increasingly likely to do something about it.10. Faster AdvancesThere's a good side to that, at least for consumers of\ntechnology.  If people get right to work implementing ideas instead\nof sitting on them, technology will evolve faster.Some kinds of innovations happen a company at a time, like the\npunctuated equilibrium model of evolution.  There are some kinds\nof ideas that are so threatening that it's hard for big companies\neven to think of them.  Look at what a hard time Microsoft is\nhaving discovering web apps.  They're like a character in a movie\nthat everyone in the audience can see something bad is about to\nhappen to, but who can't see it himself.  The big innovations\nthat happen a company at a time will obviously happen faster if\nthe rate of new companies increases.But in fact there will be a double speed increase.  People won't\nwait as long to act on new ideas, but also those ideas will\nincreasingly be developed within startups rather than big companies.\nWhich means technology will evolve faster per company as well.Big companies are just not a good place to make things happen fast.\nI talked recently to a founder whose startup had been acquired by\na big company.  He was a precise sort of guy, so he'd measured their\nproductivity before and after.  He counted lines of code, which can\nbe a dubious measure, but in this case was meaningful because it\nwas the same group of programmers.  He found they were one thirteenth\nas productive after the acquisition.The company that bought them was not a particularly stupid one.\nI think what he was measuring was mostly the cost of bigness.  I\nexperienced this myself, and his number sounds about right.  There's\nsomething about big companies that just sucks the energy out of\nyou.Imagine what all that energy could do if it were put to use.  There\nis an enormous latent capacity in the world's hackers that most\npeople don't even realize is there.  That's the main reason we do\nY Combinator: to let loose all this energy by making it easy for\nhackers to start their own startups.A Series of TubesThe process of starting startups is currently like the plumbing in\nan old house.  The pipes are narrow and twisty, and there are leaks\nin every joint.  In the future this mess will gradually be replaced\nby a single, huge pipe.  The water will still have to get from A\nto B, but it will get there faster and without the risk of spraying\nout through some random leak.This will change a lot of things for the better.  In a big, straight\npipe like that, the force of being measured by one's performance\nwill propagate back through the whole system.  Performance is always\nthe ultimate test, but there are so many kinks in the plumbing now\nthat most people are insulated from it most of the time.  So you\nend up with a world in which high school students think they need\nto get good grades to get into elite colleges, and college students\nthink they need to get good grades to impress employers, within\nwhich the employees waste most of their time in political battles,\nand from which consumers have to buy anyway because there are so\nfew choices.  Imagine if that sequence became a big, straight pipe.\nThen the effects of being measured by performance would propagate\nall the way back to high school, flushing out all the arbitrary\nstuff people are measured by now.  That is the future of web startups.Thanks to Brian Oberkirch and Simon Willison for inviting me to\nspeak, and the crew at Carson Systems for making everything run smoothly."},{"title":"The Future of Web Startups (Original Version)","text":"October 2007(This essay is derived from a keynote at FOWA in October 2007.)There's something interesting happening right now.  Startups are\nundergoing the same transformation that technology does when it becomes\ncheaper.There's a pattern that we see over and over in technology.  Initially\nthere's some kind of device that's very expensive and custom made\nin small quantities.  Then someone figures out a way to make them\nmuch more cheaply, and orders of magnitude more get built.\nAnd that allows them to be used\nin ways that would have been inconceivable before.Computers are a familiar example.  When I was a kid, computers were\nbig, expensive machines built one at a time.  Now they're a commodity.\nAnd because they're so cheap we can use them in new ways.  Now we\ncan stick computers in everything.This pattern has been around for a long time.  Most of the turning\npoints in economic history are instances of it.  It happened to\nsteel in the 1850s, and to power in the 1780s.\nIt happened to cloth manufacture in the thirteenth century, generating\nthe wealth that later brought about the Renaissance.  Agriculture\nitself was an instance of this pattern.Now as well as being produced by startups, this pattern\nis happening to startups.  It's so cheap to start web startups\nthat orders of magnitudes more will be started.   And if the pattern\nholds true, that should cause dramatic changes.1. Lots of StartupsSo my first prediction about the future of web startups is pretty\nstraightforward: there will be a lot of them.  When starting a\nstartup was expensive, you had to get the permission of investors\nto do it.  Now the only threshold you have to get over is whether\nyou have the courage to.Even that threshold is getting lower, as people watch others take\nthe plunge and survive.  In the last batch of startups we funded,\nwe had several founders who said they'd thought of applying before,\nbut weren't sure and got jobs instead.  It was only after hearing\nreports of friends who'd done it that they decided to try it\nthemselves.Starting a startup is hard, but having a 9 to 5 job is hard too,\nand in some ways a worse kind of hard.  In a startup you have lots\nof worries, but you don't have that feeling that your life is flying\nby like you do in a big company.  Plus in a startup you could make\norders of magnitude more money.As word spreads that startups work, the number of startups may grow\nto a point that would now seem quite surprising.We now think of it as normal to have a job at a company, but this\nis the thinnest of historical veneers.  Just two or three\nlifetimes ago, most people in what are now called industrialized\ncountries lived by farming.  So while it may seem surprising to\npropose that large numbers of people will change the way they make\na living, it would be more surprising if they didn't.2. StandardizationWhen technology makes something dramatically cheaper, standardization\nalways follows.  When you make things one at a time they can all\nbe different, but when you make them in larger volumes it's more\nefficient to standardize everything that doesn't need to change.At Y Combinator we still only have four people, so we try to\nstandardize everything we can.  We could hire employees to help us,\nbut we prefer to be forced to discover ways to do things more\nefficiently.  We want to be forced to figure out how to scale\ninvesting.We often tell startups to release a minimal version one as soon as\npossible, then let the needs of their users tell them what to do\nnext.  In essense, let the market design the product.  We've been\ndoing the same thing ourselves.  We think of the techniques we're\ndeveloping for dealing with large numbers of startups as like\nsoftware.  Sometimes it literally is software, like\nHacker News and\nour application rating system.One of the most important things we've been working on standardizing\nare investment terms.  Back in the old days when there were only a\nfew startups, investment terms were all individually negotiated.\nThis was a problem for founders, because it meant raising money\ntook longer and cost more in legal fees.  So as well as using the\nsame paperwork for every deal we do, we've commissioned generic\nangel paperwork that all the startups we fund can use for future\nrounds.Some investors will still want to cook up their own deal terms.\nSeries A rounds, where you raise a million dollars or more, will\nbe custom deals for the forseeable future.  But I think angel rounds\nwill start to be done mostly with standardized agreements.  An angel\nwho wants to insert a bunch of complicated terms into the agreement\nis probably not one you want anyway.3. New Attitude to AcquisitionAnother thing I see starting to get standardized is acquisitions.\nAs the volume of startups increases, big companies will start to\ndevelop standardized procedures for acquisitions, so they're little\nmore work than hiring someone.Google is the leader here, as in so many areas of technology.  They\nbuy a lot of startups— more than most people realize, because they\nonly announce a fraction of them.   And being Google, they're\nfiguring out how to do it efficiently.One problem they've solved is how to think about acquisitions.  For\nmost companies, acquisitions still carry some stigma of inadequacy.\nCompanies do them because they have to, but there's usually some\nfeeling they shouldn't have to—that their own programmers should\nbe able to build everything they need.Google's example should cure the rest of the world of this idea.\nGoogle has by far the best programmers of any public technology\ncompany.  If they don't have a problem doing acquisitions, the\nothers should have even less problem.  However many Google does,\nMicrosoft should be doing ten times as many.Of course, one reason Google doesn't have a problem with acquisitions\nis that they know first-hand the quality of the people they can get\nthat way.  Larry and Sergey only started Google after making the\nrounds of the search engines trying to sell their idea and finding\nno takers.  They've been the guys coming in to visit the big\ncompany, so they know who might be sitting across that conference\ntable from them.4. Riskier Strategies are PossibleRisk is always proportionate to reward.  The way to get really big\nreturns is to do things that seem crazy, like starting a new search\nengine in 1998, or turning down a billion dollar acquisition offer.This has traditionally been a problem in venture funding.  Founders\nand investors have different attitudes to risk.  Knowing that risk\nis on average proportionate to reward, investors like risky strategies,\nwhile founders, who don't have a big enough sample size to care\nwhat's true on average, tend to be more conservative.If startups are easy to start, this conflict goes away, because\nfounders can start them younger, when it's rational to take more\nrisk, and can start more startups total in their careers.  When\nfounders can do lots of startups, they can start to look at the\nworld in the same portfolio-optimizing way as investors.  And that\nmeans the overall amount of wealth created can be greater, because\nstrategies can be riskier.5. Younger, Nerdier FoundersIf startups become a cheap commodity, more people will be able to\nhave them, just as more people could have computers once microprocessors\nmade them cheap.  And in particular, younger and more technical\nfounders will be able to start startups than could before.Back when it cost a lot to start a startup, you had to convince\ninvestors to let you do it.  And that required very different skills\nfrom actually doing the startup.  If investors were perfect judges,\nthe two would require exactly the same skills.  But unfortunately\nmost investors are terrible judges.  I know because I see behind\nthe scenes what an enormous amount of work it takes to raise money,\nand the amount of selling required in an industry is always inversely\nproportional to the judgement of the buyers.Fortunately, if startups get cheaper to start, there is another way\nto convince investors.  Instead of going to venture capitalists\nwith a business plan and trying to convince them to fund it, you\ncan get a product launched on a few tens of thousands of dollars\nof seed money from us or your uncle, and approach them with a\nworking company instead of a plan for one.  Then instead of\nhaving to seem smooth and confident, you can just point them to\nAlexa.This way of convincing investors is better suited to hackers, who\noften went into technology precisely because they felt uncomfortable\nwith the amount of fakeness required in other fields.6. Startup Hubs Will PersistIt might seem that if startups get cheap to start, it will mean the\nend of startup hubs like Silicon Valley.  If all you need to start\na startup is rent money, you should be able to do it anywhere.This is kind of true and kind of false.  It's true that you can now\nstart a startup anywhere.  But you have to do more with a\nstartup than just start it.  You have to make it succeed.  And that\nis more likely to happen in a startup hub.I've thought a lot about this question, and it seems to me that the\nincreasing cheapness of web startups will if anything increase the\nimportance of startup hubs.  The value of startup hubs, like centers\nfor any kind of business, lies in something very old-fashioned:\nface to face meetings.  No technology in the immediate future will\nreplace walking down University Ave and running into a friend who\ntells you how to fix a bug that's been bothering you all weekend,\nor visiting a friend's startup down the street and ending up in a\nconversation with one of their investors.The question of whether to be in a startup hub is like the question\nof whether to take outside investment.  The question is not whether\nyou need it, but whether it brings any advantage at all.\nBecause anything that brings an advantage will give your competitors\nan advantage over you if they do it and you don't.  So if you hear\nsomeone saying \"we don't need to be in Silicon Valley,\" that use\nof the word \"need\" is a sign they're not even thinking about the\nquestion right.And while startup hubs are as powerful magnets as ever, the increasing\ncheapness of starting a startup means the particles they're attracting\nare getting lighter.  A startup now can be just a pair of 22 year\nold guys.  A company like that can move much more easily than one\nwith 10 people, half of whom have kids.We know because we make people move for Y Combinator, and it doesn't\nseem to be a problem. The advantage of being able to work together\nface to face for three months outweighs the inconvenience of moving.\nAsk anyone who's done it.The mobility of seed stage startups means that seed funding is a\nnational business.  One of the most common emails we get is from\npeople asking if we can help them set up a local clone of Y Combinator.\nBut this just wouldn't work. Seed funding isn't regional, just as\nbig research universities aren't.Is seed funding not merely national, but international?  Interesting\nquestion.  There are signs that it may be.  We've had an ongoing\nstream of founders from outside the US, and they tend to do\nparticularly well, because they're all people who were so determined\nto succeed that they were willing to move to another country to do\nit.If the seed funding business turns out to be international, that\ncould make it hard to start new silicon valleys.  If startups are\nmobile, the best local talent will go to the real Silicon Valley,\nand all they'll get at the local one will be the people who didn't\nhave the energy to move.This is not a nationalistic idea, incidentally.  It's cities that\ncompete, not countries.  Atlanta is just as hosed as Munich.7. Better Judgement NeededIf the number of startups increases dramatically, then the people\nwhose job is to judge startups are going to have to get better at\nit.  I'm thinking particularly of investors and acquirers.  We now\nget on the order of 1000 applications a year.  What are we going\nto do if we get 10,000?That's actually an alarming idea.  But we'll figure out some kind\nof answer.  We'll have to.  It will probably involve writing some\nsoftware, but fortunately we can do that.Acquirers will also have to get better at picking winners.   At the\nmoment they generally do better than investors, because they pick\nlater, when there's more performance to measure.  But even at the\nmost advanced acquirers, the process of identifying companies to\nbuy is extremely ad hoc, and completing the acquisition often\ninvolves a great deal of unneccessary friction.I think acquirers may eventually have chief acquisition officers\nwho will both identify good acquisitions and make the deals happen.\nAt the moment those two functions are separate.  Promising new\nstartups are often discovered by developers.  If someone powerful\nenough wants to buy them, the deal is handed over to corp dev guys\nto negotiate.  It would be a lot better if both were combined in\none group, headed by someone with a technical background and some\nvision of what they wanted to accomplish.  Maybe in the future big\ncompanies will have both a VP of Engineering responsible for\ntechnology developed in-house, and a CAO responsible for bringing\ntechnology in from outside.At the moment, there is no one within big companies who gets in\ntrouble when they buy a startup for $200 million that they could\nhave bought earlier for $20 million.  There should start to be\nsomeone who gets in trouble for that.8. College Will ChangeIf the best hackers all start their own companies after college\ninstead of getting jobs, that will change what happens in college.\nMost of these changes will be for the better.  I think the experience\nof college is warped in a bad way by the expectation that afterward\nyou'll be judged by potential employers.One of the most obvious changes will be in the meaning of \"after\ncollege,\" which will change from when one graduates from college\nto when one leaves it.  If you're starting your own company, why\ndo you need a degree?  We don't encourage people to start startups\nduring college, among other things because it gives them a socially\nacceptable excuse for quitting, but the best founders are certainly\ncapable of it.  Some of the most successful companies we've funded\nwere started by undergrads.I grew up in a time where college degrees seemed really important,\nso I'm alarmed to be saying things like this, but there's nothing\nmagical about a degree.  There's nothing that magically changes\nafter you take that last exam.  The importance of degrees is due\nsolely to the administrative needs of large organizations.  These\ncan certainly affect your life—it's hard to get into grad\nschool, or to get a work visa in the US, without an undergraduate\ndegree—but tests like this will matter less and\nless.As well as mattering less whether students get degrees, it will\nalso start to matter less where they go to college.  In a startup\nyou're judged by users, and they don't care where you went to\ncollege.  So in a world of startups, elite universities will play\nless of a role as gatekeepers.  In the US it's a national scandal\nhow easily children of rich parents game college admissions.\nBut the way this problem ultimately gets solved may not be by\nreforming the universities but by going around them.  We in the\ntechnology world are used to that sort of solution: you don't beat\nthe incumbents; you redefine the problem to make them irrelevant.The greatest value of universities is not the brand name or perhaps\neven the classes so much as the other students you meet there.  If\nit becomes common to start a startup after college, people may start\nconsciously trying to maximize this.  Instead of focusing on getting\ninternships with companies they want to work for, students may start\nto focus on working with other students they want as cofounders.What students do in their classes will change too.  Instead of\ntrying to get good grades to impress future employers, students\nwill try to learn things.  We're talking about some pretty dramatic\nchanges here.9. Lots of CompetitorsIf it gets easier to start a startup, then it's not just easier for\nyou, but for competitors too.  That doesn't erase the advantage of\nincreased cheapness, however.  You're not all playing a zero-sum\ngame.  There's not some fixed number of startups that can succeed,\nregardless of how many are started.In fact, I don't think there's any limit to the number of startups\nthat could succeed.  Startups succeed by creating wealth, which is\nthe satisfaction of people's desires.  And people's desires seem\nto be effectively infinite, at least in the short term.What the increasing number of startups does mean is that you won't\nbe able to sit on a good idea.  Other people have your idea, and\nif it gets easier to start startups, they'll be increasingly likely\nto do something about it.10. Faster AdvancesThere's a good side to that point, at least for consumers of\ntechnology.  If people get right to work implementing ideas instead\nof sitting on them, technology will evolve faster.Some kinds of innovations happen a company at a time, like the\npunctuated equilibrium model of evolution.  There are some kinds\nof ideas that are so threatening that it's hard for big companies\neven to think of them.  Look at what a hard time Microsoft is\nhaving discovering web apps.  They're like a character in a movie\nthat everyone in the audience can see something bad is about to\nhappen to, but who can't see it himself.  These big innovations\nthat happen one company at a time will obviously happen faster if\nthe rate of new companies increases.But in fact there will be a double speed increase.  People won't\nwait as long to act on new ideas, but also those ideas will\nincreasingly be developed within startups rather than big companies.\nWhich means technology will evolve faster per company as well.Big companies are just not a good place to make things happen fast.\nI talked recently to a founder whose startup had been acquired by\na big company.  He was a precise sort of guy, so he'd measured their\nproductivity before and after.  He counted lines of code, which can\nbe a dubious measure, but in this case was meaningful because it\nwas the same group of programmers.  He found they were one thirteenth\nas productive after the acquisition.The company that acquired them was not a particularly stupid one.\nI think what he was measuring was mostly the cost of bigness.  I\nexperienced this myself, and his number sounds about right.  There's\nsomething about big companies that just sucks the energy out of\nyou.Imagine what all that energy could do if it were put to use.  There\nis an enormous latent capacity in the world's hackers that most\npeople don't even realize is there.  That's the main reason we do\nY Combinator: to let loose all this energy by making it easy for\nhackers to start their own startups.A Series of TubesThe process of starting startups is currently like the plumbing in\nan old house.  The pipes are narrow and twisty, and there are leaks\nin every joint.  In the future this mess will gradually be replaced\nby a single, huge pipe.  The water will still have to get from A\nto B, but it will get there faster and without the risk of spraying\nout through some random leak.This will change a lot of things for the better.  In a big, straight\npipe like that, the force of being measured by one's performance\nwill propagate back through the whole system.  Performance is always\nthe ultimate test, but there are so many kinks in the plumbing now\nthat most people are insulated from it most of the time.  So you\nend up with a world in which high school students think they need\nto get good grades to get into elite colleges, and college students\nthink they need to get good grades to impress employers, within\nwhich the employees waste most of their time in political battles,\nand from which consumers have to buy anyway because there are so\nfew choices.  Imagine if that sequence became a big, straight pipe.\nThen the effects of being measured by performance would propagate\nall the way back to high school, flushing out all the arbitrary\nstuff people are measured by now.  That is the future of web startups."},{"title":"The Hacker's Guide to Investors","text":"April 2007(This essay is derived from a keynote talk at the 2007 ASES Summit\nat Stanford.)The world of investors is a foreign one to most hackers—partly\nbecause investors are so unlike hackers, and partly because they\ntend to operate in secret.  I've been dealing with this world for\nmany years, both as a founder and an investor, and I still don't\nfully understand it.In this essay I'm going to list some of the more surprising things\nI've learned about investors.  Some I only learned in the past year.Teaching hackers how to deal with investors is probably the second\nmost important thing we do at Y Combinator.  The most important\nthing for a startup is to make something good.  But everyone knows\nthat's important.  The dangerous thing about investors is that\nhackers don't know how little they know about this strange world.1. The investors are what make a startup hub.About a year ago I tried to figure out what you'd need to reproduce\nSilicon Valley.  I decided the\ncritical ingredients were rich people\nand nerds—investors and founders.  People are all you need to\nmake technology, and all the other people will move.If I had to narrow that down, I'd say investors are the limiting\nfactor.  Not because they contribute more to the startup, but simply\nbecause they're least willing to move.  They're rich.  They're not\ngoing to move to Albuquerque just because there are some smart\nhackers there they could invest in.  Whereas hackers will move to\nthe Bay Area to find investors.2. Angel investors are the most critical.There are several types of investors.  The two main categories are\nangels and VCs: VCs invest other people's money, and angels invest\ntheir own.Though they're less well known, the angel investors are probably\nthe more critical ingredient in creating a silicon valley.  Most\ncompanies that VCs invest in would never have made it that far if angels\nhadn't invested first.  VCs say between half and three quarters of\ncompanies that raise series A rounds have taken some outside\ninvestment already.\n[1]Angels are willing to fund riskier projects than VCs.  They also\ngive valuable advice, because (unlike VCs) many have been startup\nfounders themselves.Google's story shows the key role angels play. A lot of people know\nGoogle raised money from Kleiner and Sequoia.  What most don't realize\nis how late.  That VC round was a series B round; the premoney\nvaluation was $75 million.  Google was already a successful company\nat that point.  Really, Google was funded with angel money.It may seem odd that the canonical Silicon Valley startup was funded\nby angels, but this is not so surprising.  Risk is always proportionate\nto reward.  So the most successful startup of all is likely to have\nseemed an extremely risky bet at first, and that is exactly the\nkind VCs won't touch.Where do angel investors come from?  From other startups.  So startup\nhubs like Silicon Valley benefit from something like the marketplace\neffect, but shifted in time: startups are there because startups\nwere there.3. Angels don't like publicity.If angels are so important, why do we hear more about VCs?  Because\nVCs like publicity.  They need to market themselves to the investors\nwho are their \"customers\"—the endowments and pension funds and\nrich families whose money they invest—and also to founders who\nmight come to them for funding.Angels don't need to market themselves to investors because they\ninvest their own money.  Nor do they want to market themselves to\nfounders: they don't want random people pestering them with business\nplans.  Actually, neither do VCs.  Both angels and VCs get deals\nalmost exclusively through personal introductions.\n[2]The reason VCs want a strong brand is not to draw in more business\nplans over the transom, but so they win deals when competing\nagainst other VCs.  Whereas angels are rarely in direct competition,\nbecause (a) they do fewer deals, (b) they're happy to split them,\nand (c) they invest at a point where the stream is broader.4. Most investors, especially VCs, are not like founders.Some angels are, or were, hackers.  But most VCs are a different\ntype of people: they're dealmakers.If you're a hacker, here's a thought experiment you can run to\nunderstand why there are basically no hacker VCs: How would you\nlike a job where you never got to make anything, but instead spent\nall your time listening to other people pitch (mostly terrible)\nprojects, deciding whether to fund them, and sitting on their boards\nif you did?  That would not be fun for most hackers.  Hackers like\nto make things.  This would be like being an administrator.Because most VCs are a different species of people from\nfounders, it's hard to know what they're thinking.  If you're a\nhacker, the last time you had to deal with these guys was in high\nschool.  Maybe in college you walked past their fraternity on your\nway to the lab.  But don't underestimate them.  They're as expert\nin their world as you are in yours.  What they're good at is reading\npeople, and making deals work to their advantage.  Think twice\nbefore you try to beat them at that.5. Most investors are momentum investors.Because most investors are dealmakers rather than technology people,\nthey generally don't understand what you're doing.  I knew as a\nfounder that most VCs didn't get technology.  I also knew some made\na lot of money.  And yet it never occurred to me till recently to\nput those two ideas together and ask \"How can VCs make money by\ninvesting in stuff they don't understand?\"The answer is that they're like momentum investors.  You can (or\ncould once) make a lot of money by noticing sudden changes in stock\nprices.  When a stock jumps upward, you buy, and when it suddenly\ndrops, you sell.  In effect you're insider trading, without knowing\nwhat you know.  You just know someone knows something, and that's\nmaking the stock move.This is how most venture investors operate.  They don't try to look\nat something and predict whether it will take off.  They win by\nnoticing that something is taking off a little sooner than everyone\nelse.  That generates almost as good returns as actually being able\nto pick winners.  They may have to pay a little more than they would\nif they got in at the very beginning, but only a little.Investors always say what they really care about is the team.\nActually what they care most about is your traffic, then what other\ninvestors think, then the team.  If you don't yet have any traffic,\nthey fall back on number 2, what other investors think.  And this,\nas you can imagine, produces wild oscillations in the \"stock price\"\nof a startup.  One week everyone wants you, and they're begging not\nto be cut out of the deal.  But all it takes is for one big investor\nto cool on you, and the next week no one will return your phone\ncalls.  We regularly have startups go from hot to cold or cold to\nhot in a matter of days, and literally nothing has changed.There are two ways to deal with this phenomenon.  If you're feeling\nreally confident, you can try to ride it.  You can start by asking\na comparatively lowly VC for a small amount of money, and then after\ngenerating interest there, ask more prestigious VCs for larger\namounts, stirring up a crescendo of buzz, and then \"sell\" at the\ntop.  This is extremely risky, and takes months even if you succeed.\nI wouldn't try it myself.  My advice is to err on the side of safety:\nwhen someone offers you a decent deal, just take it and get on with\nbuilding the company.  Startups win or lose based on the quality\nof their product, not the quality of their funding deals.6. Most investors are looking for big hits.Venture investors like companies that could go public.  That's where\nthe big returns are.  They know the odds of any individual startup\ngoing public are small, but they want to invest in those that at\nleast have a chance of going public.Currently the way VCs seem to operate is to invest in a bunch of\ncompanies, most of which fail, and one of which is Google.  Those\nfew big wins compensate for losses on their other investments.  What this\nmeans is that most VCs will only invest in you if you're a potential\nGoogle.  They don't care about companies that are a safe bet to be\nacquired for $20 million.  There needs to be a chance, however\nsmall, of the company becoming really big.Angels are different in this respect.  They're happy to invest in\na company where the most likely outcome is a $20 million acquisition\nif they can do it at a low enough valuation.  But of course they\nlike companies that could go public too.  So having an ambitious\nlong-term plan pleases everyone.If you take VC money, you have to mean it, because the structure\nof VC deals prevents early acquisitions.  If you take VC money,\nthey won't let you sell early.7. VCs want to invest large amounts.The fact that they're running investment funds makes VCs want to\ninvest large amounts.  A typical VC fund is now hundreds of millions\nof dollars.  If $400 million has to be invested by 10 partners,\nthey have to invest $40 million each.  VCs usually sit on the boards\nof companies they fund.  If the average deal size was $1 million,\neach partner would have to sit on 40 boards, which would not be\nfun.  So they prefer bigger deals, where they can put a lot of money\nto work at once.VCs don't regard you as a bargain if you don't need a lot of money.\nThat may even make you less attractive, because it means their\ninvestment creates less of a barrier to entry for competitors.Angels are in a different position because they're investing their\nown money.  They're happy to invest small amounts—sometimes as\nlittle as $20,000—as long as the potential returns look good\nenough.  So if you're doing something inexpensive, go to angels.8. Valuations are fiction.VCs admit that valuations are an artifact.  They decide how much\nmoney you need and how much of the company they want, and those two\nconstraints yield a valuation.Valuations increase as the size of the investment does.  A company\nthat an angel is willing to put $50,000 into at a valuation of a\nmillion can't take $6 million from VCs at that valuation.  That\nwould leave the founders less than a seventh of the company between\nthem (since the option pool would also come out of that seventh).\nMost VCs wouldn't want that, which is why you never hear of deals\nwhere a VC invests $6 million at a premoney valuation of $1 million.If valuations change depending on the amount invested, that shows\nhow far they are from reflecting any kind of value of the company.Since valuations are made up, founders shouldn't care too much about\nthem.  That's not the part to focus on.  In fact, a high valuation\ncan be a bad thing.  If you take funding at a premoney valuation\nof $10 million, you won't be selling the company for 20.  You'll\nhave to sell for over 50 for the VCs to get even a 5x return, which\nis low to them.  More likely they'll want you to hold out for 100.\nBut needing to get a high price decreases the chance of getting\nbought at all; many companies can buy you for $10 million, but only\na handful for 100.  And since a startup is like a pass/fail course\nfor the founders, what you want to optimize is your chance of a\ngood outcome, not the percentage of the company you keep.So why do founders chase high valuations?  They're tricked by\nmisplaced ambition.  They feel they've achieved more if they get a\nhigher valuation.  They usually know other founders, and if they\nget a higher valuation they can say \"mine is bigger than yours.\"\nBut funding is not the real test.  The real test is the final outcome\nfor the founder, and getting too high a valuation may just make a\ngood outcome less likely.The one advantage of a high valuation is that you get less dilution.\nBut there is another less sexy way to achieve that: just take less\nmoney.9. Investors look for founders like the current stars.Ten years ago investors were looking for the next Bill Gates.  This\nwas a mistake, because Microsoft was a very anomalous startup.  They\nstarted almost as a contract programming operation, and the reason\nthey became huge was that IBM happened to drop the PC standard in\ntheir lap.Now all the VCs are looking for the next Larry and Sergey.  This\nis a good trend, because Larry and Sergey are closer to the ideal\nstartup founders.Historically investors thought it was important for a founder to\nbe an expert in business.  So they were willing to fund teams of\nMBAs who planned to use the money to pay programmers to build their\nproduct for them.  This is like funding Steve Ballmer in the hope\nthat the programmer he'll hire is Bill Gates—kind of backward,\nas the events of the Bubble showed.  Now most VCs know they should\nbe funding technical guys.  This is more pronounced among the very\ntop funds; the lamer ones still want to fund MBAs.If you're a hacker, it's good news that investors are looking for\nLarry and Sergey.  The bad news is, the only investors who can do\nit right are the ones who knew them when they were a\ncouple of CS grad students, not the confident media stars they are\ntoday.  What investors still don't get is how clueless and tentative\ngreat founders can seem at the very beginning.10. The contribution of investors tends to be underestimated.Investors do more for startups than give them money.  They're helpful\nin doing deals and arranging introductions, and some of the smarter\nones, particularly angels, can give good advice about the product.In fact, I'd say what separates the great investors from the mediocre\nones is the quality of their advice.  Most investors give advice,\nbut the top ones give good advice.Whatever help investors give a startup tends to be underestimated.\nIt's to everyone's advantage to let the world think the founders\nthought of everything.  The goal of the investors is for the company\nto become valuable, and the company seems more valuable if it seems\nlike all the good ideas came from within.This trend is compounded by the obsession that the press has with\nfounders.  In a company founded by two people, 10% of the ideas\nmight come from the first guy they hire.  Arguably they've done a\nbad job of hiring otherwise.  And yet this guy will be almost\nentirely overlooked by the press.I say this as a founder: the contribution of founders is always\noverestimated.  The danger here is that new founders, looking at\nexisting founders, will think that they're supermen that one couldn't\npossibly equal oneself.  Actually they have a hundred different\ntypes of support people just offscreen making the whole show possible.\n[3]11. VCs are afraid of looking bad.I've been very surprised to discover how timid most VCs are.  They\nseem to be afraid of looking bad to their partners, and perhaps\nalso to the limited partners—the people whose money they invest.You can measure this fear in how much less risk VCs are willing to\ntake.  You can tell they won't make investments for their fund that\nthey might be willing to make themselves as angels.  Though it's\nnot quite accurate to say that VCs are less willing to take risks.\nThey're less willing to do things that might look bad.  That's not\nthe same thing.For example, most VCs would be very reluctant to invest in a startup\nfounded by a pair of 18 year old hackers, no matter how brilliant,\nbecause if the startup failed their partners could turn on them and\nsay \"What, you invested $x million of our money in a pair of 18\nyear olds?\"  Whereas if a VC invested in a startup founded by\nthree former banking executives in their 40s who planned to outsource\ntheir product development—which to my mind is actually a lot\nriskier than investing in a pair of really smart 18 year olds—he\ncouldn't be faulted, if it failed, for making such an apparently\nprudent investment.As a friend of mine said, \"Most VCs can't do anything that would\nsound bad to the kind of doofuses who run pension funds.\" Angels\ncan take greater risks because they don't have to answer to anyone.12. Being turned down by investors doesn't mean much.Some founders are quite dejected when they get turned down by\ninvestors.  They shouldn't take it so much to heart.  To start with,\ninvestors are often wrong.  It's hard to think of a successful\nstartup that wasn't turned down by investors at some point.  Lots\nof VCs rejected Google.  So obviously the reaction of investors is\nnot a very meaningful test.Investors will often reject you for what seem to be superficial\nreasons.  I read of one VC who\nturned\ndown a startup simply because\nthey'd given away so many little bits of stock that the deal required\ntoo many signatures to close.\n[4]\nThe reason investors can get away\nwith this is that they see so many deals.  It doesn't matter if\nthey underestimate you because of some surface imperfection, because\nthe next best deal will be almost as good.\nImagine picking out\napples at a grocery store.  You grab one with a little bruise.\nMaybe it's just a surface bruise, but why even bother checking when\nthere are so many other unbruised apples to choose from?Investors would be the first to admit they're often wrong.  So when\nyou get rejected by investors, don't think \"we suck,\" but instead\nask \"do we suck?\"  Rejection is a question, not an answer.13. Investors are emotional.I've been surprised to discover how emotional investors can be.\nYou'd expect them to be cold and calculating, or at least businesslike,\nbut often they're not.  I'm not sure if it's their position of power\nthat makes them this way, or the large sums of money involved, but\ninvestment negotiations can easily turn personal.  If you offend\ninvestors, they'll leave in a huff.A while ago an eminent VC firm offered a series A round to a startup\nwe'd seed funded.  Then they heard a rival VC firm was also interested.\nThey were so afraid that they'd be rejected in favor of this other\nfirm that they gave the startup what's known as an \"exploding\ntermsheet.\"  They had, I think, 24 hours to say yes or no, or the\ndeal was off.  Exploding termsheets are a somewhat dubious device,\nbut not uncommon.  What surprised me was their reaction when I\ncalled to talk about it.  I asked if they'd still be interested in\nthe startup if the rival VC didn't end up making an offer, and they\nsaid no.  What rational basis could they have had for saying that?\nIf they thought the startup was worth investing in, what difference\nshould it make what some other VC thought?  Surely it was their\nduty to their limited partners simply to invest in the best\nopportunities they found; they should be delighted if the other VC\nsaid no, because it would mean they'd overlooked a good opportunity.\nBut of course there was no rational basis for their decision.  They\njust couldn't stand the idea of taking this rival firm's rejects.In this case the exploding termsheet was not (or not only) a tactic\nto pressure the startup.  It was more like the high school trick\nof breaking up with someone before they can break up with you.  In\nan earlier essay I said that VCs were a lot like high school girls.\nA few VCs have joked about that characterization, but none have\ndisputed it.14. The negotiation never stops till the closing.Most deals, for investment or acquisition, happen in two phases.\nThere's an initial phase of negotiation about the big questions.\nIf this succeeds you get a termsheet, so called because it outlines\nthe key terms of a deal.  A termsheet is not legally binding,\nbut it is a definite step.  It's supposed to mean that a\ndeal is going to happen, once the lawyers work out all the details.\nIn theory these details are minor ones; by definition all the\nimportant points are supposed to be covered in the termsheet.Inexperience and wishful thinking combine to make founders feel\nthat when they have a termsheet, they have a deal.  They want there\nto be a deal; everyone acts like they have a deal; so there must\nbe a deal.  But there isn't and may not be for several months.  A\nlot can change for a startup in several months.  It's not uncommon\nfor investors and acquirers to get buyer's remorse.  So you have\nto keep pushing, keep selling, all the way to the close.  Otherwise\nall the \"minor\" details left unspecified in the termsheet will be\ninterpreted to your disadvantage.  The other side may even break\nthe deal; if they do that, they'll usually seize on some technicality\nor claim you misled them, rather than admitting they changed their\nminds.It can be hard to keep the pressure on an investor or acquirer all\nthe way to the closing, because the most effective pressure is\ncompetition from other investors or acquirers, and these tend to\ndrop away when you get a termsheet.  You should try to stay as close\nfriends as you can with these rivals, but the most important thing\nis just to keep up the momentum in your startup.  The investors or\nacquirers chose you because you seemed hot.  Keep doing whatever\nmade you seem hot.  Keep releasing new features; keep getting new\nusers; keep getting mentioned in the press and in blogs.15. Investors like to co-invest.I've been surprised how willing investors are to split deals.  You\nmight think that if they found a good deal they'd want it all to\nthemselves, but they seem positively eager to syndicate.  This is\nunderstandable with angels; they invest on a smaller scale and don't\nlike to have too much money tied up in any one deal.  But VCs also\nshare deals a lot.  Why?Partly I think this is an artifact of the rule I quoted earlier:\nafter traffic, VCs care most what other VCs think.  A deal that has\nmultiple VCs interested in it is more likely to close, so of deals\nthat close, more will have multiple investors.There is one rational reason to want multiple VCs in a deal: Any\ninvestor who co-invests with you is one less investor who could\nfund a competitor.  Apparently Kleiner and Sequoia didn't like\nsplitting the Google deal, but it did at least have the advantage,\nfrom each one's point of view, that there probably wouldn't be a\ncompetitor funded by the other.  Splitting deals thus has similar\nadvantages to confusing paternity.But I think the main reason VCs like splitting deals is the fear\nof looking bad.  If another firm shares the deal, then in the event\nof failure it will seem to have been a prudent choice—a consensus\ndecision, rather than just the whim of an individual partner.16. Investors collude.Investing is not covered by antitrust law.  At least, it better not\nbe, because investors regularly do things that would be illegal\notherwise.  I know personally of cases where one investor has talked\nanother out of making a competitive offer, using the promise of\nsharing future deals.In principle investors are all competing for the same deals, but\nthe spirit of cooperation is stronger than the spirit of competition.\nThe reason, again, is that there are so many deals.  Though a\nprofessional investor may have a closer relationship with a founder\nhe invests in than with other investors, his relationship with the\nfounder is only going to last a couple years, whereas his relationship\nwith other firms will last his whole career.  There isn't so much\nat stake in his interactions with other investors, but there will\nbe a lot of them.  Professional investors are constantly trading\nlittle favors.Another reason investors stick together is to preserve the power\nof investors as a whole.  So you will not, as of this writing, be\nable to get investors into an auction for your series A round.\nThey'd rather lose the deal than establish a precedent of VCs\ncompetitively bidding against one another.  An efficient startup\nfunding market may be coming in the distant future; things tend to\nmove in that direction; but it's certainly not here now.\n17. Large-scale investors care about their portfolio, not any\nindividual company.The reason startups work so well is that everyone with power also\nhas equity.  The only way any of them can succeed is if they all\ndo.  This makes everyone naturally pull in the same direction,\nsubject to differences of opinion about tactics.The problem is, larger scale investors don't have exactly the same\nmotivation.  Close, but not identical. They don't need any given\nstartup to succeed, like founders do, just their portfolio as a\nwhole to.  So in borderline cases the rational thing for them to\ndo is to sacrifice unpromising startups.Large-scale investors tend to put startups in three categories:\nsuccesses, failures, and the \"living dead\"—companies that are\nplugging along but don't seem likely in the immediate future to get\nbought or go public.  To the founders, \"living dead\" sounds harsh.\nThese companies may be far from failures by ordinary standards. But\nthey might as well be from a venture investor's point of view, and\nthey suck up just as much time and attention as the successes.  So\nif such a company has two possible strategies, a conservative one\nthat's slightly more likely to work in the end, or a risky one that\nwithin a short time will either yield a giant success or kill the\ncompany, VCs will push for the kill-or-cure option.  To them the\ncompany is already a write-off.  Better to have resolution, one way\nor the other, as soon as possible.If a startup gets into real trouble, instead of trying to save it\nVCs may just sell it at a low price to another of their portfolio\ncompanies.  Philip Greenspun said in Founders at Work that Ars Digita's VCs did this to them.18. Investors have different risk profiles from founders.Most people would rather a 100% chance of $1 million than a 20%\nchance of $10 million.  Investors are rich enough to be rational\nand prefer the latter.  So they'll always tend to encourage founders\nto keep rolling the dice.  If a company is doing well, investors\nwill want founders to turn down most acquisition offers.  And indeed,\nmost startups that turn down acquisition offers ultimately do better.\nBut it's still hair-raising for the founders, because they might\nend up with nothing.  When someone's offering to buy you for a price\nat which your stock is worth $5 million, saying no is equivalent\nto having $5 million and betting it all on one spin of the roulette\nwheel.Investors will tell you the company is worth more.  And they may\nbe right.  But that doesn't mean it's wrong to sell.  Any financial\nadvisor who put all his client's assets in the stock of a single,\nprivate company would probably lose his license for it.More and more, investors are letting founders cash out partially.\nThat should correct the problem. Most founders have such low standards\nthat they'll feel rich with a sum that doesn't seem huge to investors.\nBut this custom is spreading too slowly, because VCs are afraid of\nseeming irresponsible.  No one wants to be the first VC to give\nsomeone fuck-you money and then actually get told \"fuck you.\" But\nuntil this does start to happen, we know VCs are being too conservative.19. Investors vary greatly.Back when I was a founder I used to think all VCs were the same.\nAnd in fact they do all look\nthe same.  They're all what hackers\ncall \"suits.\"  But since I've been dealing with VCs more I've learned\nthat some suits are smarter than others.They're also in a business where winners tend to keep winning and\nlosers to keep losing.  When a VC firm has been successful in the\npast, everyone wants funding from them, so they get the pick of all\nthe new deals.  The self-reinforcing nature of the venture funding\nmarket means that the top ten firms live in a completely different\nworld from, say, the hundredth.  As well as being smarter, they\ntend to be calmer and more upstanding; they don't need to do iffy\nthings to get an edge, and don't want to because they have more\nbrand to protect.There are only two kinds of VCs you want to take money from, if you\nhave the luxury of choosing: the \"top tier\" VCs, meaning about the\ntop 20 or so firms, plus a few new ones that are not among the top\n20 only because they haven't been around long enough.It's particularly important to raise money from a top firm if you're\na hacker, because they're more confident.  That means they're less\nlikely to stick you with a business guy as CEO, like VCs used to\ndo in the 90s.  If you seem smart and want to do it, they'll let\nyou run the company.20. Investors don't realize how much it costs to raise money from\nthem.Raising money is a huge time suck at just the point where startups\ncan least afford it. It's not unusual for it to take five or six\nmonths to close a funding round.  Six weeks is fast.  And raising\nmoney is not just something you can leave running as a background\nprocess.  When you're raising money, it's inevitably the main focus\nof the company.  Which means building the product isn't.Suppose a Y Combinator company starts talking to VCs after demo\nday, and is successful in raising money from them, closing the deal\nafter a comparatively short 8 weeks.  Since demo day occurs after\n10 weeks, the company is now 18 weeks old.  Raising money, rather\nthan working on the product, has been the company's main focus for\n44% of its existence.  And mind you, this an example where things\nturned out well.When a startup does return to working on the product after a funding\nround finally closes, it's as if they were returning to work after\na months-long illness.  They've lost most of their momentum.Investors have no idea how much they damage the companies they\ninvest in by taking so long to do it.  But companies do. So there\nis a big opportunity here for a new kind of venture fund that invests\nsmaller amounts at lower valuations, but promises to either close\nor say no very quickly.  If there were such a firm, I'd recommend\nit to startups in preference to any other, no matter how prestigious.\nStartups live on speed and momentum.21. Investors don't like to say no.The reason funding deals take so long to close is mainly that\ninvestors can't make up their minds.  VCs are not big companies;\nthey can do a deal in 24 hours if they need to.  But they usually\nlet the initial meetings stretch out over a couple weeks.  The\nreason is the selection algorithm I mentioned earlier.  Most don't\ntry to predict whether a startup will win, but to notice quickly\nthat it already is winning.  They care what the market thinks of\nyou and what other VCs think of you, and they can't judge those\njust from meeting you.Because they're investing in things that (a) change fast and (b)\nthey don't understand, a lot of investors will reject you in a way\nthat can later be claimed not to have been a rejection.  Unless you\nknow this world, you may not even realize you've been rejected.\nHere's a VC saying no:\nWe're really excited about your project, and we want to keep in\nclose touch as you develop it further.\nTranslated into more straightforward language, this means: We're\nnot investing in you, but we may change our minds if it looks like\nyou're taking off.  Sometimes they're more candid and say explicitly\nthat they need to \"see some traction.\"  They'll invest in you if\nyou start to get lots of users.  But so would any VC.  So all they're\nsaying is that you're still at square 1.Here's a test for deciding whether a VC's response was yes or no.\nLook down at your hands.  Are you holding a termsheet?22. You need investors.Some founders say \"Who needs investors?\"  Empirically the answer\nseems to be: everyone who wants to succeed.  Practically every\nsuccessful startup takes outside investment at some point.Why? What the people who think they don't need investors forget is\nthat they will have competitors.  The question is not whether you\nneed outside investment, but whether it could help you at all.\nIf the answer is yes, and you don't take investment, then competitors\nwho do will have an advantage over you.  And in the startup world\na little advantage can expand into a lot.Mike Moritz famously said that he invested in Yahoo because he\nthought they had a few weeks' lead over their competitors.  That\nmay not have mattered quite so much as he thought, because Google\ncame along three years later and kicked Yahoo's ass.  But there is\nsomething in what he said.  Sometimes a small lead can grow into\nthe yes half of a binary choice.Maybe as it gets cheaper to start a startup, it will start to be\npossible to succeed in a competitive market without outside funding.\nThere are certainly\ncosts to raising money.  But as of this writing the empirical\nevidence says it's a net win.23. Investors like it when you don't need them.A lot of founders approach investors as if they needed their\npermission to start a company—as if it were like getting into\ncollege.  But you don't need investors to start most companies;\nthey just make it easier.And in fact, investors greatly prefer it if you don't need them.\nWhat excites them, both consciously and unconsciously, is the sort\nof startup that approaches them saying \"the train's leaving the\nstation; are you in or out?\" not the one saying \"please can we have\nsome money to start a company?\"Most investors are \"bottoms\" in the sense that the startups they\nlike most are those that are rough with them.  When Google stuck\nKleiner and Sequoia with a $75 million premoney valuation, their\nreaction was probably \"Ouch! That feels so good.\" And they were\nright, weren't they?  That deal probably made them more than any\nother they've done.The thing is, VCs are pretty good at reading people.  So don't try\nto act tough with them unless you really are the next Google, or\nthey'll see through you in a second.  Instead of acting tough, what\nmost startups should do is simply always have a backup plan.  Always\nhave some alternative plan for getting started if any given investor\nsays no.  Having one is the best insurance against needing one.So you shouldn't start a startup that's expensive to start, because\nthen you'll be at the mercy of investors.  If you ultimately want\nto do something that will cost a lot, start by doing a cheaper\nsubset of it, and expand your ambitions when and if you raise more\nmoney.Apparently the most likely animals to be left alive after a nuclear\nwar are cockroaches, because they're so hard to kill.  That's what\nyou want to be as a startup, initially.  Instead of a beautiful\nbut fragile flower that needs to have its stem in a plastic tube\nto support itself, better to be small, ugly, and indestructible.Notes[1]\nI may be underestimating VCs.  They may play some behind the scenes\nrole in IPOs, which you ultimately need if you want to create a silicon\nvalley.[2]\nA few VCs have an email address you can send your business\nplan to, but the number of startups that get funded this way is\nbasically zero.  You should always get a personal introduction—and\nto a partner, not an associate.[3]\nSeveral people have told us that the most valuable thing about\nstartup school\nwas that they got to see famous startup founders and realized\nthey were just ordinary guys.  Though we're happy to provide this\nservice, this is not generally the way we pitch startup school to\npotential speakers.[4]\nActually this sounds to me like a VC who got buyer's remorse,\nthen used a technicality to get out of the deal.  But it's telling\nthat it even seemed a plausible excuse.Thanks to Sam Altman, Paul Buchheit, Hutch Fishman, and Robert\nMorris for reading drafts of\nthis, and to Kenneth King of ASES for inviting me to speak.\nComment on this essay."},{"title":"The Hardest Lessons for Startups to Learn","text":"April 2006(This essay is derived from a talk at the 2006\nStartup School.)The startups we've funded so far are pretty quick, but they seem\nquicker to learn some lessons than others.  I think it's because\nsome things about startups are kind of counterintuitive.We've now\ninvested\nin enough companies that I've learned a trick\nfor determining which points are the counterintuitive ones:\nthey're the ones I have to keep repeating.So I'm going to number these points, and maybe with future startups\nI'll be able to pull off a form of Huffman coding. I'll make them\nall read this, and then instead of nagging them in detail, I'll\njust be able to say: number four!1. Release Early.The thing I probably repeat most is this recipe for a startup: get\na version 1 out fast, then improve it based on users' reactions.By \"release early\" I don't mean you should release something full\nof bugs, but that you should release something minimal.  Users hate\nbugs, but they don't seem to mind a minimal version 1, if there's\nmore coming soon.There are several reasons it pays to get version 1 done fast.  One\nis that this is simply the right way to write software, whether for\na startup or not.  I've been repeating that since 1993, and I haven't seen much since to\ncontradict it.  I've seen a lot of startups die because they were\ntoo slow to release stuff, and none because they were too quick.\n[1]One of the things that will surprise you if you build something\npopular is that you won't know your users.  Reddit now has almost half a million\nunique visitors a month.  Who are all those people?  They have no\nidea.  No web startup does.  And since you don't know your users,\nit's dangerous to guess what they'll like.  Better to release\nsomething and let them tell you.Wufoo took this to heart and released\ntheir form-builder before the underlying database.  You can't even\ndrive the thing yet, but 83,000 people came to sit in the driver's\nseat and hold the steering wheel.  And Wufoo got valuable feedback\nfrom it: Linux users complained they used too much Flash, so they\nrewrote their software not to.  If they'd waited to release everything\nat once, they wouldn't have discovered this problem till it was\nmore deeply wired in.Even if you had no users, it would still be important to release\nquickly, because for a startup the initial release acts as a shakedown\ncruise.  If anything major is broken-- if the idea's no good,\nfor example, or the founders hate one another-- the stress of getting\nthat first version out will expose it.  And if you have such problems\nyou want to find them early.Perhaps the most important reason to release early, though, is that\nit makes you work harder.  When you're working on something that\nisn't released, problems are intriguing.  In something that's out\nthere, problems are alarming.  There is a lot more urgency once you\nrelease.  And I think that's precisely why people put it off.  They\nknow they'll have to work a lot harder once they do.\n[2]2. Keep Pumping Out Features.Of course, \"release early\" has a second component, without which\nit would be bad advice.  If you're going to start with something\nthat doesn't do much, you better improve it fast.What I find myself repeating is \"pump out features.\"  And this rule\nisn't just for the initial stages.  This is something all startups\nshould do for as long as they want to be considered startups.I don't mean, of course, that you should make your application ever\nmore complex.  By \"feature\" I mean one unit of hacking-- one quantum\nof making users' lives better.As with exercise, improvements beget improvements.  If you run every\nday, you'll probably feel like running tomorrow.  But if you skip\nrunning for a couple weeks, it will be an effort to drag yourself\nout.  So it is with hacking: the more ideas you implement, the more\nideas you'll have.  You should make your system better at least in\nsome small way every day or two.This is not just a good way to get development done; it is also a\nform of marketing.  Users love a site that's constantly improving.\nIn fact, users expect a site to improve.  Imagine if you visited a\nsite that seemed very good, and then returned two months later and\nnot one thing had changed.  Wouldn't it start to seem lame?\n[3]They'll like you even better when you improve in response to their\ncomments, because customers are used to companies ignoring them.\nIf you're the rare exception-- a company that actually listens--\nyou'll generate fanatical loyalty.  You won't need to advertise,\nbecause your users will do it for you.This seems obvious too, so why do I have to keep repeating it?  I\nthink the problem here is that people get used to how things are.\nOnce a product gets past the stage where it has glaring flaws, you\nstart to get used to it, and gradually whatever features it happens\nto have become its identity.  For example, I doubt many people at\nYahoo (or Google for that matter) realized how much better web mail\ncould be till Paul Buchheit showed them.I think the solution is to assume that anything you've made is far\nshort of what it could be.  Force yourself, as a sort of intellectual\nexercise, to keep thinking of improvements.  Ok, sure, what you\nhave is perfect.  But if you had to change something, what would\nit be?If your product seems finished, there are two possible explanations:\n(a) it is finished, or (b) you lack imagination.  Experience suggests\n(b) is a thousand times more likely.3. Make Users Happy.Improving constantly is an instance of a more general rule: make\nusers happy.  One thing all startups have in common is that they\ncan't force anyone to do anything.  They can't force anyone to use\ntheir software, and they can't force anyone to do deals with them.\nA startup has to sing for its supper.  That's why the successful\nones make great things.  They have to, or die.When you're running a startup you feel like a little bit of debris\nblown about by powerful winds.  The most powerful wind is users.\nThey can either catch you and loft you up into the sky, as they did\nwith Google, or leave you flat on the pavement, as they do with\nmost startups.  Users are a fickle wind, but more powerful than any\nother.  If they take you up, no competitor can keep you down.As a little piece of debris, the rational thing for you to do is\nnot to lie flat, but to curl yourself into a shape the wind will\ncatch.I like the wind metaphor because it reminds you how impersonal the\nstream of traffic is.  The vast majority of people who visit your\nsite will be casual visitors.  It's them you have to design your\nsite for.  The people who really care will find what they want by\nthemselves.The median visitor will arrive with their finger poised on the Back\nbutton.  Think about your own experience: most links you\nfollow lead to something lame.  Anyone who has used the web for\nmore than a couple weeks has been trained to click on Back after\nfollowing a link.  So your site has to say \"Wait!  Don't click on\nBack.  This site isn't lame.  Look at this, for example.\"There are two things you have to do to make people pause.  The most\nimportant is to explain, as concisely as possible, what the hell\nyour site is about.  How often have you visited a site that seemed\nto assume you already knew what they did?  For example, the corporate\nsite that says the\ncompany makes\nenterprise content management solutions for business that enable\norganizations to unify people, content and processes to minimize\nbusiness risk, accelerate time-to-value and sustain lower total\ncost of ownership.\nAn established company may get away with such an opaque description,\nbut no startup can.  A startup\nshould be able to explain in one or two sentences exactly what it\ndoes.\n[4]\nAnd not just to users.  You need this for everyone:\ninvestors, acquirers, partners, reporters, potential employees, and\neven current employees.  You probably shouldn't even start a company\nto do something that can't be described compellingly in one or two\nsentences.The other thing I repeat is to give people everything you've got,\nright away.  If you have something impressive, try to put it on the\nfront page, because that's the only one most visitors will see.\nThough indeed there's a paradox here: the more you push the good\nstuff toward the front, the more likely visitors are to explore\nfurther.\n[5]In the best case these two suggestions get combined: you tell\nvisitors what your site is about by showing them.  One of the\nstandard pieces of advice in fiction writing is \"show, don't tell.\"\nDon't say that a character's angry; have him grind his teeth, or\nbreak his pencil in half.  Nothing will explain what your site does\nso well as using it.The industry term here is \"conversion.\"  The job of your site is\nto convert casual visitors into users-- whatever your definition\nof a user is.  You can measure this in your growth rate.  Either\nyour site is catching on, or it isn't, and you must know which.  If\nyou have decent growth, you'll win in the end, no matter how obscure\nyou are now.  And if you don't, you need to fix something.4. Fear the Right Things.Another thing I find myself saying a lot is \"don't worry.\"  Actually,\nit's more often \"don't worry about this; worry about that instead.\"\nStartups are right to be paranoid, but they sometimes fear the wrong\nthings.Most visible disasters are not so alarming as they seem.  Disasters\nare normal in a startup: a founder quits, you discover a patent\nthat covers what you're doing, your servers keep crashing, you run\ninto an insoluble technical problem, you have to change your name,\na deal falls through-- these are all par for the course.  They won't\nkill you unless you let them.Nor will most competitors.  A lot of startups worry \"what if Google\nbuilds something like us?\"  Actually big companies are not the ones\nyou have to worry about-- not even Google.  The people at Google\nare smart, but no smarter than you; they're not as motivated, because\nGoogle is not going to go out of business if this one product fails;\nand even at Google they have a lot of bureaucracy to slow them down.What you should fear, as a startup, is not the established players,\nbut other startups you don't know exist yet.  They're way more\ndangerous than Google because, like you, they're cornered animals.Looking just at existing competitors can give you a false sense of\nsecurity.  You should compete against what someone else could be\ndoing, not just what you can see people doing.  A corollary is that\nyou shouldn't relax just because you have no visible competitors\nyet.  No matter what your idea, there's someone else out there\nworking on the same thing.That's the downside of it being easier to start a startup: more people\nare doing it.  But I disagree with Caterina Fake when she says that\nmakes this a bad time to start a startup.  More people are starting\nstartups, but not as many more as could.  Most college graduates\nstill think they have to get a job.  The average person can't ignore\nsomething that's been beaten into their head since they were three\njust because serving web pages recently got a lot cheaper.And in any case, competitors are not the biggest threat.  Way more\nstartups hose themselves than get crushed by competitors.  There\nare a lot of ways to do it, but the three main ones are internal\ndisputes, inertia, and ignoring users.  Each is, by itself, enough\nto kill you.  But if I had to pick the worst, it would be ignoring\nusers.  If you want a recipe for a startup that's going to die,\nhere it is: a couple of founders who have some great idea they know\neveryone is going to love, and that's what they're going to build,\nno matter what.Almost everyone's initial plan is broken.  If companies stuck to\ntheir initial plans, Microsoft would be selling programming languages,\nand Apple would be selling printed circuit boards.  In both cases\ntheir customers told them what their business should be-- and they\nwere smart enough to listen.As Richard Feynman said, the imagination of nature is greater than\nthe imagination of man.  You'll find more interesting things by\nlooking at the world than you could ever produce just by thinking.\nThis principle is very powerful.  It's why the best abstract painting\nstill falls short of Leonardo, for example.  And it applies to\nstartups too.  No idea for a product could ever be so clever as the\nones you can discover by smashing a beam of prototypes into a beam\nof users.5. Commitment Is a Self-Fulfilling Prophecy.I now have enough experience with startups to be able to say what\nthe most important quality is in a startup founder, and it's not\nwhat you might think.  The most important quality in a startup\nfounder is determination.  Not intelligence-- determination.This is a little depressing.  I'd like to believe Viaweb succeeded\nbecause we were smart, not merely determined.  A lot of people in\nthe startup world want to believe that.  Not just founders, but\ninvestors too.  They like the idea of inhabiting a world ruled by\nintelligence.  And you can tell they really believe this, because\nit affects their investment decisions.Time after time VCs invest in startups founded by eminent professors.\nThis may work in biotech, where a lot of startups simply commercialize\nexisting research, but in software you want to invest in students,\nnot professors.  Microsoft, Yahoo, and Google were all founded by\npeople who dropped out of school to do it.  What students lack in\nexperience they more than make up in dedication.Of course, if you want to get rich, it's not enough merely to be\ndetermined.  You have to be smart too, right?  I'd like to think\nso, but I've had an experience that convinced me otherwise: I spent\nseveral years living in New York.You can lose quite a lot in the brains department and it won't kill\nyou.  But lose even a little bit in the commitment department, and\nthat will kill you very rapidly.Running a startup is like walking on your hands: it's possible, but\nit requires extraordinary effort.  If an ordinary employee were\nasked to do the things a startup founder has to, he'd be very\nindignant.  Imagine if you were hired at some big company, and in\naddition to writing software ten times faster than you'd ever had\nto before, they expected you to answer support calls, administer\nthe servers, design the web site, cold-call customers, find the\ncompany office space, and go out and get everyone lunch.And to do all this not in the calm, womb-like atmosphere of a big\ncompany, but against a backdrop of constant disasters.  That's the\npart that really demands determination.  In a startup, there's\nalways some disaster happening.  So if you're the least bit inclined\nto find an excuse to quit, there's always one right there.But if you lack commitment, chances are it will have been hurting\nyou long before you actually quit.  Everyone who deals with startups\nknows how important commitment is, so if they sense you're ambivalent,\nthey won't give you much attention.  If you lack commitment, you'll\njust find that for some mysterious reason good things happen to\nyour competitors but not to you.  If you lack commitment, it will\nseem to you that you're unlucky.Whereas if you're determined to stick around, people will pay\nattention to you, because odds are they'll have to deal with you\nlater.  You're a local, not just a tourist, so everyone has to come\nto terms with you.At Y Combinator we sometimes mistakenly fund teams who have the\nattitude that they're going to give this startup thing a shot for\nthree months, and if something great happens, they'll stick with\nit-- \"something great\" meaning either that someone wants to buy\nthem or invest millions of dollars in them.  But if this is your\nattitude, \"something great\" is very unlikely to happen to you,\nbecause both acquirers and investors judge you by your level of\ncommitment.If an acquirer thinks you're going to stick around no matter what,\nthey'll be more likely to buy you, because if they don't and you\nstick around, you'll probably grow, your price will go up, and\nthey'll be left wishing they'd bought you earlier.  Ditto for\ninvestors.  What really motivates investors, even big VCs, is not\nthe hope of good returns, but the fear of missing out.\n[6]\nSo if\nyou make it clear you're going to succeed no matter what, and the only\nreason you need them is to make it happen a little faster, you're\nmuch more likely to get money.You can't fake this.  The only way to convince everyone that you're\nready to fight to the death is actually to be ready to.You have to be the right kind of determined, though.  I carefully\nchose the word determined rather than stubborn, because stubbornness\nis a disastrous quality in a startup.  You have to be determined,\nbut flexible, like a running back.  A successful running back doesn't\njust put his head down and try to run through people.  He improvises:\nif someone appears in front of him, he runs around them; if someone\ntries to grab him, he spins out of their grip; he'll even run in\nthe wrong direction briefly if that will help.  The one thing he'll\nnever do is stand still.\n[7]6. There Is Always Room.I was talking recently to a startup founder about whether it might\nbe good to add a social component to their software.  He said he\ndidn't think so, because the whole social thing was tapped out.\nReally?  So in a hundred years the only social networking sites\nwill be the Facebook, MySpace, Flickr, and Del.icio.us?  Not likely.There is always room for new stuff.  At every point in history,\neven the darkest bits of the dark ages, people were discovering\nthings that made everyone say \"why didn't anyone think of that\nbefore?\"  We know this continued to be true up till 2004, when the\nFacebook was founded-- though strictly speaking someone else did\nthink of that.The reason we don't see the opportunities all around us is that we\nadjust to however things are, and assume that's how things have to\nbe.  For example, it would seem crazy to most people to try to make\na better search engine than Google.  Surely that field, at least,\nis tapped out.  Really?  In a hundred years-- or even twenty-- are\npeople still going to search for information using something like\nthe current Google?  Even Google probably doesn't think that.In particular, I don't think there's any limit to the number of\nstartups.  Sometimes you hear people saying \"All these guys starting\nstartups now are going to be disappointed. How many little startups\nare Google and Yahoo going to buy, after all?\" That sounds cleverly\nskeptical, but I can prove it's mistaken.  No one proposes that\nthere's some limit to the number of people who can be employed in\nan economy consisting of big, slow-moving companies with a couple\nthousand people each.  Why should there be any limit to the number\nwho could be employed by small, fast-moving companies with ten each?\nIt seems to me the only limit would be the number of people who\nwant to work that hard.The limit on the number of startups is not the number that can get\nacquired by Google and Yahoo-- though it seems even that should\nbe unlimited, if the startups were actually worth buying-- but the\namount of wealth that can be created.  And I don't think there's\nany limit on that, except cosmological ones.So for all practical purposes, there is no limit to the number of\nstartups.  Startups make wealth, which means they make things people\nwant, and if there's a limit on the number of things people want,\nwe are nowhere near it.  I still don't even have a flying car.7. Don't Get Your Hopes Up.This is another one I've been repeating since long before Y Combinator.\nIt was practically the corporate motto at Viaweb.Startup founders are naturally optimistic.  They wouldn't do it\notherwise.  But you should treat your optimism the way you'd treat\nthe core of a nuclear reactor: as a source of power that's also\nvery dangerous.  You have to build a shield around it, or it will\nfry you.The shielding of a reactor is not uniform; the reactor would be\nuseless if it were.  It's pierced in a few places to let pipes in.\nAn optimism shield has to be pierced too.  I think the place to\ndraw the line is between what you expect of yourself, and what you\nexpect of other people.  It's ok to be optimistic about what you\ncan do, but assume the worst about machines and other people.This is particularly necessary in a startup, because you tend to\nbe pushing the limits of whatever you're doing.  So things don't\nhappen in the smooth, predictable way they do in the rest of the\nworld.  Things change suddenly, and usually for the worse.Shielding your optimism is nowhere more important than with deals.\nIf your startup is doing a deal, just assume it's not going to\nhappen.  The VCs who say they're going to invest in you aren't.\nThe company that says they're going to buy you isn't.  The big\ncustomer who wants to use your system in their whole company won't.\nThen if things work out you can be pleasantly surprised.The reason I warn startups not to get their hopes up is not to save\nthem from being disappointed when things fall through.  It's\nfor a more practical reason: to prevent them from leaning their\ncompany against something that's going to fall over, taking them\nwith it.For example, if someone says they want to invest in you, there's a\nnatural tendency to stop looking for other investors.  That's why\npeople proposing deals seem so positive: they want you to\nstop looking.  And you want to stop too, because doing deals is a\npain.  Raising money, in particular, is a huge time sink.  So you\nhave to consciously force yourself to keep looking.Even if you ultimately do the first deal, it will be to your advantage\nto have kept looking, because you'll get better terms.  Deals are\ndynamic; unless you're negotiating with someone unusually honest,\nthere's not a single point where you shake hands and the deal's\ndone. There are usually a lot of subsidiary questions to be cleared\nup after the handshake, and if the other side senses weakness-- if\nthey sense you need this deal-- they will be very tempted to screw\nyou in the details.VCs and corp dev guys are professional negotiators.  They're trained\nto take advantage of weakness.\n[8]\nSo while they're often nice\nguys, they just can't help it.  And as pros they do this more than\nyou.  So don't even try to bluff them.  The only way a startup can\nhave any leverage in a deal is genuinely not to need it.  And if\nyou don't believe in a deal, you'll be less likely to depend on it.So I want to plant a hypnotic suggestion in your heads: when you\nhear someone say the words \"we want to invest in you\" or \"we want\nto acquire you,\" I want the following phrase to appear automatically\nin your head: don't get your hopes up.  Just continue running\nyour company as if this deal didn't exist.  Nothing is more likely\nto make it close.The way to succeed in a startup is to focus on the goal of getting\nlots of users, and keep walking swiftly toward it while investors\nand acquirers scurry alongside trying to wave money in your face.Speed, not MoneyThe way I've described it, starting a startup sounds pretty stressful.\nIt is.  When I talk to the founders of the companies we've funded,\nthey all say the same thing: I knew it would be hard, but I didn't\nrealize it would be this hard.So why do it?  It would be worth enduring a lot of pain and stress\nto do something grand or heroic, but just to make money?  Is making\nmoney really that important?No, not really.  It seems ridiculous to me when people take business\ntoo seriously.  I regard making money as a boring errand to be got\nout of the way as soon as possible.  There is nothing grand or\nheroic about starting a startup per se.So why do I spend so much time thinking about startups?  I'll tell\nyou why.  Economically, a startup is best seen not as a way to get\nrich, but as a way to work faster.  You have to make a living, and\na startup is a way to get that done quickly, instead of letting it\ndrag on through your whole life.\n[9]We take it for granted most of the time, but human life is fairly\nmiraculous.  It is also palpably short.  You're given this marvellous\nthing, and then poof, it's taken away.  You can see why people\ninvent gods to explain it.  But even to people who don't believe\nin gods, life commands respect.  There are times in most of our\nlives when the days go by in a blur, and almost everyone has a\nsense, when this happens, of wasting something precious.  As Ben\nFranklin said, if you love life, don't waste time, because time is\nwhat life is made of.So no, there's nothing particularly grand about making money.  That's\nnot what makes startups worth the trouble.  What's important about\nstartups is the speed.  By compressing the dull but necessary task\nof making a living into the smallest possible time, you show respect\nfor life, and there is something grand about that.Notes[1]\nStartups can die from releasing something full of bugs, and not\nfixing them fast enough, but I don't know of any that died from\nreleasing something stable but minimal very early, then promptly\nimproving it.[2]\nI know this is why I haven't released Arc.  The moment I do,\nI'll have people nagging me for features.[3]\nA web site is different from a book or movie or desktop application\nin this respect.  Users judge a site not as a single snapshot, but\nas an animation with multiple frames.  Of the two, I'd say the rate of\nimprovement is more important to users than where you currently\nare.[4]\nIt should not always tell this to users, however.  For example,\nMySpace is basically a replacement mall for mallrats.  But it was\nwiser for them, initially, to pretend that the site was about bands.[5]\nSimilarly, don't make users register to try your site.  Maybe\nwhat you have is so valuable that visitors should gladly register\nto get at it.  But they've been trained to expect the opposite.\nMost of the things they've tried on the web have sucked-- and\nprobably especially those that made them register.[6]\nVCs have rational reasons for behaving this way. They don't\nmake their money (if they make money) off their median investments.\nIn a typical fund, half the companies fail, most of the rest generate\nmediocre returns, and one or two \"make the fund\" by succeeding\nspectacularly.  So if they miss just a few of the most promising\nopportunities, it could hose the whole fund.[7]\nThe attitude of a running back doesn't translate to soccer.\nThough it looks great when a forward dribbles past multiple defenders,\na player who persists in trying such things will do worse in the\nlong term than one who passes.[8]\nThe reason Y Combinator never negotiates valuations\nis that we're not professional negotiators, and don't want to turn\ninto them.[9]\nThere are two ways to do\nwork you love: (a) to make money, then work\non what you love, or (b) to get a job where you get paid to work on\nstuff you love.  In practice the first phases of both\nconsist mostly of unedifying schleps, and in (b) the second phase is less\nsecure.Thanks to Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica\nLivingston, and Robert Morris for reading drafts of this."},{"title":"The Hardware Renaissance","text":"October 2012One advantage of Y Combinator's early, broad focus is that we\nsee trends before most other people.  And one of the most conspicuous\ntrends in the last batch was the large number of hardware startups.\nOut of 84 companies, 7 were making hardware.  On the whole\nthey've done better than the companies that weren't.They've faced resistance from investors of course.  Investors have\na deep-seated bias against hardware.  But investors' opinions are\na trailing indicator.  The best founders are better at seeing the\nfuture than the best investors, because the best founders are making\nit.There is no one single force driving this trend.  Hardware does\nwell on crowdfunding sites.  The spread of tablets makes it\npossible to build new things controlled\nby and even incorporating\nthem.  Electric motors\nhave improved.\nWireless connectivity of various types can now be taken for granted.\nIt's getting more straightforward to get things manufactured.\nArduinos, 3D printing, laser cutters, and more accessible CNC milling are making hardware easier to prototype.\nRetailers are less of a bottleneck as customers increasingly buy\nonline.One question I can answer is why hardware is suddenly cool.\nIt always was cool.\nPhysical things are great.  They just haven't\nbeen as great a way to start a rapidly growing business\nas software.  But that rule may not be permanent.  It's not even\nthat old; it only dates from about 1990.  Maybe the advantage\nof software will turn out to have been temporary.  Hackers love to\nbuild hardware, and customers love to buy it.  So if the ease of\nshipping hardware even approached the ease of shipping software,\nwe'd see a lot more hardware startups.It wouldn't be the first time something was a bad idea till it\nwasn't.  And it wouldn't be the first time investors learned that\nlesson from founders.So if you want to work on hardware, don't be deterred from doing\nit because you worry investors will discriminate against you.  And\nin particular, don't be deterred from applying to Y Combinator\nwith a hardware idea, because we're especially interested in hardware\nstartups.We know there's room for the next Steve Jobs.\nBut there's almost certainly also room for the first\n<Your Name Here>.Thanks to Sam Altman, Trevor Blackwell, David Cann, Sanjay Dastoor,\nPaul Gerhardt, Cameron Robertson, Harj Taggar, and Garry Tan for reading drafts of this."},{"title":"The High-Res Society","text":"December 2008For nearly all of history the success of a society was proportionate\nto its ability to assemble large and disciplined organizations.\nThose who bet on economies of scale generally won, which meant the\nlargest organizations were the most successful ones.Things have already changed so much that this is hard for us to\nbelieve, but till just a few decades ago the largest organizations\ntended to be the most progressive.  An ambitious kid graduating\nfrom college in 1960 wanted to work in the huge, gleaming offices\nof Ford, or General Electric, or NASA.  Small meant small-time.\nSmall in 1960 didn't mean a cool little startup.  It meant uncle\nSid's shoe store.When I grew up in the 1970s, the idea of the \"corporate ladder\" was\nstill very much alive.  The standard plan was to try to get into a\ngood college, from which one would be drafted into some organization\nand then rise to positions of gradually increasing responsibility.\nThe more ambitious merely hoped to climb the same ladder faster.\n[1]But in the late twentieth century something changed.  It turned out\nthat economies of scale were not the only force at work.  Particularly\nin technology, the increase in speed one could get from smaller\ngroups started to trump the advantages of size.The future turned out to be different from the one we were expecting\nin 1970.  The domed cities and flying cars we expected have failed\nto materialize.  But fortunately so have the jumpsuits with badges\nindicating our specialty and rank.  Instead of being dominated by\na few, giant tree-structured organizations, it's now looking like\nthe economy of the future will be a fluid network of smaller,\nindependent units.It's not so much that large organizations stopped working.  There's\nno evidence that famously successful organizations like the Roman\narmy or the British East India Company were any less afflicted by\nprotocol and politics than organizations of the same size today.\nBut they were competing against opponents who couldn't change the\nrules on the fly by discovering new technology.  Now it turns out\nthe rule \"large and disciplined organizations win\" needs to have a\nqualification appended: \"at games that change slowly.\" No one knew\ntill change reached a sufficient speed.Large organizations will start to do worse now, though,\nbecause for the first time in history they're no longer getting the\nbest people.  An ambitious kid graduating from college now doesn't\nwant to work for a big company.  They want to work for the hot\nstartup that's rapidly growing into one.  If they're really ambitious,\nthey want to start it.\n[2]This doesn't mean big companies will disappear.  To say that\nstartups will succeed implies that big companies will exist, because\nstartups that succeed either become big companies or are acquired\nby them.\n[3]\nBut large organizations will probably never again\nplay the leading role they did up till the last quarter of the\ntwentieth century.It's kind of surprising that a trend that lasted so long would ever\nrun out.  How often does it happen that a rule works for thousands\nof years, then switches polarity?The millennia-long run of bigger-is-better left us with a lot of\ntraditions that are now obsolete,\nbut extremely deeply rooted.\nWhich means the ambitious can now do arbitrage on them.  It will\nbe very valuable to understand precisely which ideas to keep and\nwhich can now be discarded.The place to look is where the spread of smallness began: in the\nworld of startups.There have always been occasional cases, particularly in the US,\nof ambitious people who grew the ladder under them instead of\nclimbing it.  But till recently this was an anomalous route that\ntended to be followed only by outsiders.  It was no coincidence\nthat the great industrialists of the nineteenth century had so\nlittle formal education.  As huge as their companies eventually\nbecame, they were all essentially mechanics and shopkeepers at\nfirst.  That was a social step no one with a college education would\ntake if they could avoid it.  Till the rise of technology startups,\nand in particular, Internet startups, it was very unusual for\neducated people to start their own businesses.The eight men who left Shockley Semiconductor to found Fairchild\nSemiconductor, the original Silicon Valley startup, weren't even\ntrying to start a company at first.  They were just looking for a\ncompany willing to hire them as a group.  Then one of their parents\nintroduced them to a small investment bank that offered to find\nfunding for them to start their own, so they did.  But starting a\ncompany was an alien idea to them; it was something they backed\ninto.\n[4]Now I would guess that practically every Stanford or Berkeley\nundergrad who knows how to program has at least considered the idea\nof starting a startup.  East Coast universities are not far behind,\nand British universities only a little behind them.  This pattern\nsuggests that attitudes at Stanford and Berkeley are not an anomaly,\nbut a leading indicator.  This is the way the world is going.Of course, Internet startups are still only a fraction of the world's\neconomy.  Could a trend based on them be that powerful?I think so.  There's no reason to suppose there's any limit to the\namount of work that could be done in this area.  Like science,\nwealth seems to expand fractally.  Steam power was a sliver of the\nBritish economy when Watt started working on it.  But his work led\nto more work till that sliver had expanded into something bigger\nthan the whole economy of which it had initially been a part.The same thing could happen with the Internet.  If Internet startups\noffer the best opportunity for ambitious people, then a lot of\nambitious people will start them, and this bit of the economy will\nballoon in the usual fractal way.Even if Internet-related applications only become a tenth of the\nworld's economy, this component will set the tone for the rest.\nThe most dynamic part of the economy always does, in everything\nfrom salaries to standards of dress.  Not just because of its\nprestige, but because the principles underlying the most dynamic\npart of the economy tend to be ones that work.For the future, the trend to bet on seems to be networks of small,\nautonomous groups whose performance is measured individually.  And\nthe societies that win will be the ones with the least impedance.As with the original industrial revolution, some societies are going\nto be better at this than others.  Within a generation of its birth\nin England, the Industrial Revolution had spread to continental\nEurope and North America.  But it didn't spread everywhere.  This\nnew way of doing things could only take root in places that were\nprepared for it.  It could only spread to places that already had\na vigorous middle class.There is a similar social component to the transformation that began\nin Silicon Valley in the 1960s.  Two new kinds of techniques were\ndeveloped there: techniques for building integrated circuits, and\ntechniques for building a new type of company designed to grow fast\nby creating new technology.  The techniques for building integrated\ncircuits spread rapidly to other countries.  But the techniques for\nbuilding startups didn't.  Fifty years later, startups are ubiquitous\nin Silicon Valley and common in a handful of other US cities, but\nthey're still an anomaly in most of the world.Part of the reason—possibly the main reason—that startups\nhave not spread as broadly as the Industrial Revolution did is their\nsocial disruptiveness.  Though it brought many social changes, the\nIndustrial Revolution was not fighting the principle that bigger\nis better.  Quite the opposite: the two dovetailed beautifully.\nThe new industrial companies adapted the customs of existing large\norganizations like the military and the civil service, and the\nresulting hybrid worked well.  \"Captains of industry\" issued orders\nto \"armies of workers,\" and everyone knew what they were supposed\nto do.Startups seem to go more against the grain, socially.  It's hard\nfor them to flourish in societies that value hierarchy and stability,\njust as it was hard for industrialization to flourish in societies\nruled by people who stole at will from the merchant class.  But\nthere were already a handful of countries past that stage when the\nIndustrial Revolution happened.   There do not seem to be that many\nready this time.Notes[1]\nOne of the bizarre consequences of this model was that the usual\nway to make more money was to become a manager.  This is one of the\nthings startups fix.[2]\nThere are a lot of reasons American car companies have been\ndoing so much worse than Japanese car companies, but at least one\nof them is a cause for optimism: American graduates have more\noptions.[3]\nIt's possible that companies will one day be able to grow big\nin revenues without growing big in people, but we are not very far\nalong that trend yet.[4]\nLecuyer, Christophe, Making Silicon Valley, MIT Press, 2006.Thanks to Trevor Blackwell, Paul Buchheit, Jessica Livingston,\nand Robert Morris for reading drafts of this."},{"title":"The Hundred-Year Language","text":"April 2003(This essay is derived from a keynote talk at PyCon 2003.)It's hard to predict what\nlife will be like in a hundred years.  There are only a few\nthings we can say with certainty.  We know that everyone will\ndrive flying cars,\nthat zoning laws will be relaxed to allow buildings\nhundreds of stories tall, that it will be dark most of the\ntime, and that women will all be trained in the martial arts.\nHere I want to zoom in on one detail of this\npicture.  What kind of programming language will they use to\nwrite the software controlling those flying cars?This is worth thinking about not so\nmuch because we'll actually get to use these languages as because,\nif we're lucky, we'll use languages on the path from this\npoint to that.I think that, like species, languages will form evolutionary trees,\nwith dead-ends branching off all over.  We can see this\nhappening already.\nCobol, for all its sometime popularity, does not seem to have any\nintellectual descendants.  It is an evolutionary dead-end-- a\nNeanderthal language.I predict a similar fate for Java.  People\nsometimes send me mail saying, \"How can you say that Java\nwon't turn out to be a successful language?  It's already\na successful language.\"  And I admit that it is, if you\nmeasure success by shelf space taken up by books on it\n(particularly individual books on it), or by\nthe number of undergrads who believe they have to\nlearn it to get a job.  When I say Java won't\nturn out to be a successful language, I mean something more\nspecific:  that Java\nwill turn out to be an evolutionary dead-end, like Cobol.This is just a guess.  I may be wrong.  My point here is not to dis Java,\nbut to raise the issue of evolutionary\ntrees and get people asking, where on the tree is language X?\nThe reason to ask this question isn't just so that\nour ghosts can say, in a\nhundred years, I told you so.  It's because staying close to\nthe main branches is a useful heuristic for finding languages that will\nbe good to program in now.At any given time, you're probably happiest on\nthe main branches of an evolutionary tree.\nEven when there were still plenty of Neanderthals,\nit must have sucked to be one.  The\nCro-Magnons would have been constantly coming over and\nbeating you up and stealing your food.The reason I want to\nknow what languages will be like in a hundred years is so that\nI know what branch of the tree to bet on now.The evolution of languages differs from the evolution of species\nbecause branches can converge.  The Fortran branch, for example,\nseems to be merging with the descendants\nof Algol.  In theory this is possible for species too, but it's\nnot likely to have happened to any bigger than a cell.Convergence\nis more likely for languages partly because the space of\npossibilities is smaller, and partly because mutations\nare not random.  Language designers deliberately incorporate\nideas from other languages.It's especially useful for language designers to think\nabout where the evolution of programming languages is likely\nto lead, because they can steer accordingly.\nIn that case, \"stay on a main branch\" becomes more than a\nway to choose a good language.\nIt becomes a heuristic for making the right decisions about\nlanguage design.Any programming language can be divided into\ntwo parts:  some set of fundamental operators that play the role\nof axioms, and the rest of the language, which could in principle\nbe written in terms of these fundamental operators.I think the fundamental operators are the most important factor in a\nlanguage's long term survival.  The rest you can change.  It's\nlike the rule that in buying a house you should consider\nlocation first of all.  Everything else you can fix later, but you\ncan't fix the location.I think it's important not just that the axioms be well chosen,\nbut that there be few of them.  Mathematicians have always felt\nthis way about axioms-- the fewer, the better-- and I think they're\nonto something.At the very least, it has to be a useful exercise to look closely\nat the core of a language to see if there are any axioms that\ncould be weeded out.  I've found in my long career as a slob that\ncruft breeds cruft, and I've seen this happen in software as\nwell as under beds and in the corners of rooms.I have a hunch that\nthe main branches of the evolutionary tree pass through the languages\nthat have the smallest, cleanest cores.\nThe more of a language you can write in itself,\nthe better.Of course, I'm making a big assumption in even asking what\nprogramming languages will be like in a hundred years.\nWill we even be writing programs in a hundred years?  Won't\nwe just tell computers what we want them to do?There hasn't been a lot of progress in that department\nso far.\nMy guess is that a hundred years from now people will\nstill tell computers what to do using programs we would recognize\nas such.  There may be tasks that we\nsolve now by writing programs and which in a hundred years\nyou won't have to write programs to solve, but I think\nthere will still be a good deal of\nprogramming of the type that we do today.It may seem presumptuous to think anyone can predict what\nany technology will look like in a hundred years.  But\nremember that we already have almost fifty years of history behind us.\nLooking forward a hundred years is a graspable idea\nwhen we consider how slowly languages have evolved in the\npast fifty.Languages evolve slowly because they're not really technologies.\nLanguages are notation.  A program is a formal description of\nthe problem you want a computer to solve for you.  So the rate\nof evolution in programming languages is more like the\nrate of evolution in mathematical notation than, say,\ntransportation or communications.\nMathematical notation does evolve, but not with the giant\nleaps you see in technology.Whatever computers are made of in a hundred years, it seems\nsafe to predict they will be much faster than\nthey are now.  If Moore's Law continues to put out, they will be 74\nquintillion (73,786,976,294,838,206,464) times faster.  That's kind of\nhard to imagine.  And indeed, the most likely prediction in the\nspeed department may be that Moore's Law will stop working.\nAnything that is supposed to double every eighteen months seems\nlikely to run up against some kind of fundamental limit eventually.\nBut I have no trouble believing that computers will be very much\nfaster. Even if they only end up being a paltry million\ntimes faster, that should change the ground rules for programming\nlanguages substantially.  Among other things, there\nwill be more room for what\nwould now be considered slow languages, meaning languages\nthat don't yield very efficient code.And yet some applications will still demand speed.\nSome of the problems we want to solve with\ncomputers are created by computers; for example, the\nrate at which you have to process video images depends\non the rate at which another computer can\ngenerate them.  And there is another class of problems\nwhich inherently have an unlimited capacity to soak up cycles:\nimage rendering, cryptography, simulations.If some applications can be increasingly inefficient while\nothers continue to demand all the speed the hardware can\ndeliver, faster computers will mean that languages have\nto cover an ever wider range of efficiencies.  We've seen\nthis happening already.  Current implementations of some\npopular new languages are shockingly wasteful by the\nstandards of previous decades.This isn't just something that happens with programming\nlanguages.  It's a general historical trend.  As technologies improve,\neach generation can do things that the previous generation\nwould have considered wasteful.  People thirty years ago would\nbe astonished at how casually we make long distance phone calls.\nPeople a hundred years ago would be even more astonished that\na package would one day travel from Boston to New York via Memphis.I can already tell you what's going to happen to all those extra\ncycles that faster hardware is going to give us in the\nnext hundred years.  They're nearly all going to be wasted.I learned to program when computer power was scarce.\nI can remember taking all the spaces out of my Basic programs\nso they would fit into the memory of a 4K TRS-80.  The\nthought of all this stupendously inefficient software\nburning up cycles doing the same thing over and over seems\nkind of gross to me.  But I think my intuitions here are wrong.  I'm\nlike someone who grew up poor, and can't bear to spend money\neven for something important, like going to the doctor.Some kinds of waste really are disgusting.  SUVs, for example, would\narguably be gross even if they ran on a fuel which would never\nrun out and generated no pollution.  SUVs are gross because they're\nthe solution to a gross problem. (How to make minivans look more\nmasculine.)\nBut not all waste is bad.  Now that we have the infrastructure\nto support it, counting the minutes of your long-distance\ncalls starts to seem niggling.   If you have the\nresources, it's more elegant to think of all phone calls as\none kind of thing, no matter where the other person is.There's good waste, and bad waste.  I'm interested\nin good waste-- the kind where, by spending more, we can get\nsimpler designs.  How will we take advantage of the opportunities\nto waste cycles that we'll get from new, faster hardware?The desire for speed is so deeply engrained in us, with\nour puny computers, that it will take a conscious effort\nto overcome it.  In language design, we should be consciously seeking out\nsituations where we can trade efficiency for even the\nsmallest increase in convenience.Most data structures exist because of speed.  For example,\nmany languages today have both strings and lists.  Semantically, strings\nare more or less a subset of lists in which the elements are\ncharacters.  So why do you need a separate data type?\nYou don't, really.  Strings only\nexist for efficiency.  But it's lame to clutter up the semantics\nof the language with hacks to make programs run faster.\nHaving strings in a language seems to be a case of\npremature optimization.If we think of the core of a language as a set of axioms,\nsurely it's gross to have additional axioms that add no expressive\npower, simply for the sake of efficiency.  Efficiency is\nimportant, but I don't think that's the right way to get it.The right way to solve that problem, I think, is to separate\nthe meaning of a program from the implementation details.\nInstead of having both lists and strings, have just lists,\nwith some way to give the compiler optimization advice that\nwill allow it to lay out strings as contiguous bytes if\nnecessary.Since speed doesn't matter in most of a program, you won't\nordinarily need to bother with\nthis sort of micromanagement.\nThis will be more and more true as computers get faster.Saying less about implementation should also make programs\nmore flexible.\nSpecifications change while a program is being written, and this is not\nonly inevitable, but desirable.The word \"essay\" comes\nfrom the French verb \"essayer\", which means \"to try\".\nAn essay, in the original sense, is something you\nwrite to try to figure something out.  This happens in\nsoftware too.  I think some of the best programs were essays,\nin the sense that the authors didn't know when they started\nexactly what they were trying to write.Lisp hackers already know about the value of being flexible\nwith data structures.  We tend to write the first version of\na program so that it does everything with lists.  These\ninitial versions can be so shockingly inefficient that it\ntakes a conscious effort not to think about what they're\ndoing, just as, for me at least, eating a steak requires a\nconscious effort not to think where it came from.What programmers in a hundred years will be looking for, most of\nall, is a language where you can throw together an unbelievably\ninefficient version 1 of a program with the least possible\neffort.  At least, that's how we'd describe it in present-day\nterms.  What they'll say is that they want a language that's\neasy to program in.Inefficient software isn't gross.  What's gross is a language\nthat makes programmers do needless work.  Wasting programmer time\nis the true inefficiency, not wasting machine time.  This will\nbecome ever more clear as computers get faster.I think getting rid of strings is already something we\ncould bear to think about.  We did it in Arc, and it seems\nto be a win;  some operations that would be awkward to\ndescribe as regular expressions can be described\neasily as recursive functions.How far will this flattening of data structures go?  I can think\nof possibilities that shock even me, with my conscientiously broadened\nmind.  Will we get rid of arrays, for example?  After all, they're\njust a subset of hash tables where the keys are vectors of\nintegers.   Will we replace hash tables themselves with lists?There are more shocking prospects even than that.  The Lisp\nthat McCarthy described in 1960, for example, didn't\nhave numbers.  Logically, you don't need to have a separate notion\nof numbers, because you can represent them as lists:  the integer\nn could be represented as a list of n elements.  You can do math this\nway.  It's just unbearably inefficient.No one actually proposed implementing numbers as lists in\npractice.  In fact, McCarthy's 1960 paper was not, at the time,\nintended to be implemented at all.  It was a theoretical exercise,\nan attempt to create a more elegant alternative to the Turing\nMachine.  When someone did, unexpectedly, take this paper and\ntranslate it into a working Lisp interpreter, numbers certainly\nweren't represented as lists; they were represented in binary,\nas in every other language.Could a programming language go so far as to get rid of numbers\nas a fundamental data type?  I ask this not so much as a serious\nquestion as as a way to play chicken with the future.  It's like\nthe hypothetical case of an irresistible force meeting an\nimmovable object-- here, an unimaginably inefficient\nimplementation meeting unimaginably great resources.\nI don't see why not.  The future is pretty long.  If there's\nsomething we can do to decrease the number of axioms in the core\nlanguage, that would seem to be the side to bet on as t approaches\ninfinity.  If the idea still seems unbearable in a hundred years,\nmaybe it won't in a thousand.Just to be clear about this, I'm not proposing that all numerical\ncalculations would actually be carried out using lists.  I'm proposing\nthat the core language, prior to any additional notations about\nimplementation, be defined this way.  In practice any program\nthat wanted to do any amount of math would probably represent\nnumbers in binary, but this would be an optimization, not part of\nthe core language semantics.Another way to burn up cycles is to have many layers of\nsoftware between the application and the hardware.  This too is\na trend we see happening already: many recent languages are\ncompiled into byte code.  Bill Woods once told me that,\nas a rule of thumb, each layer of interpretation costs a\nfactor of 10 in speed.  This extra cost buys you flexibility.The very first version of Arc was an extreme case of this sort\nof multi-level slowness, with corresponding benefits.  It\nwas a classic \"metacircular\" interpreter written\non top of Common Lisp, with a definite family resemblance\nto the eval function defined in McCarthy's original Lisp paper.\nThe whole thing was only a couple hundred lines of\ncode, so it was very easy to understand and change.  The\nCommon Lisp we used, CLisp, itself runs on top\nof a byte code interpreter.  So here we had two levels of\ninterpretation, one of them (the top one) shockingly inefficient,\nand the language was usable.  Barely usable, I admit, but\nusable.Writing software as multiple layers is a powerful technique\neven within applications.  Bottom-up programming means writing\na program as a series of layers, each of which serves as a\nlanguage for the one above.  This approach tends to yield\nsmaller, more flexible programs.  It's also the best route to\nthat holy grail, reusability.  A language is by definition\nreusable.  The more\nof your application you can push down into a language for writing\nthat type of application, the more of your software will be\nreusable.Somehow the idea of reusability got attached\nto object-oriented programming in the 1980s, and no amount of\nevidence to the contrary seems to be able to shake it free.  But\nalthough some object-oriented software is reusable, what makes\nit reusable is its bottom-upness, not its object-orientedness.\nConsider libraries: they're reusable because they're language,\nwhether they're written in an object-oriented style or not.I don't predict the demise of object-oriented programming, by the\nway.  Though I don't think it has much to offer good programmers,\nexcept in certain specialized domains, it is irresistible to\nlarge organizations.  Object-oriented programming\noffers a sustainable way to write spaghetti code.  It lets you accrete\nprograms as a series of patches.\nLarge organizations\nalways tend to develop software this way, and I expect this\nto be as true in a hundred years as it is today.As long as we're talking about the future, we had better\ntalk about parallel computation, because that's where this\nidea seems to live.  That is, no matter when you're talking, parallel\ncomputation seems to be something that is going to happen\nin the future.Will the future ever catch up with it?  People have been\ntalking about parallel computation as something imminent\nfor at least 20\nyears, and it hasn't affected programming practice much so far.\nOr hasn't it?  Already\nchip designers have to think about it, and so must\npeople trying to write systems software on multi-cpu computers.The real question is, how far up the ladder of abstraction will\nparallelism go?\nIn a hundred years will it affect even application programmers?  Or\nwill it be something that compiler writers think about, but\nwhich is usually invisible in the source code of applications?One thing that does seem likely is that most opportunities for\nparallelism will be wasted.  This is a special case of my more\ngeneral prediction that most of the extra computer power we're\ngiven will go to waste.  I expect that, as with the stupendous\nspeed of the underlying hardware, parallelism will be something\nthat is available if you ask for it explicitly, but ordinarily\nnot used.  This implies that the kind of parallelism we have in\na hundred years will not, except in special applications, be\nmassive parallelism.  I expect for\nordinary programmers it will be more like being able to fork off\nprocesses that all end up running in parallel.And this will, like asking for specific implementations of data\nstructures, be something that you do fairly late in the life of a\nprogram, when you try to optimize it.  Version 1s will ordinarily\nignore any advantages to be got from parallel computation, just\nas they will ignore advantages to be got from specific representations\nof data.Except in special kinds of applications, parallelism won't\npervade the programs that are written in a hundred years.  It would be\npremature optimization if it did.How many programming languages will there\nbe in a hundred years?  There seem to be a huge number of new\nprogramming languages lately.  Part of the reason is that\nfaster hardware has allowed programmers to make different\ntradeoffs between speed and convenience, depending on the\napplication.  If this is a real trend, the hardware we'll\nhave in a hundred years should only increase it.And yet there may be only a few widely-used languages in a\nhundred years.  Part of the reason I say this\nis optimism: it seems that, if you did a really good job,\nyou could make a language that was ideal for writing a\nslow version 1, and yet with the right optimization advice\nto the compiler, would also yield very fast code when necessary.\nSo, since I'm optimistic, I'm going to predict that despite\nthe huge gap they'll have between acceptable and maximal\nefficiency, programmers in a hundred years will have languages\nthat can span most of it.As this gap widens, profilers will become increasingly important.\nLittle attention is paid to profiling now.  Many people still\nseem to believe that the way to get fast applications is to\nwrite compilers that generate fast code.  As the gap between\nacceptable and maximal performance widens, it will become\nincreasingly clear that the way to get fast applications is\nto have a good guide from one to the other.When I say there may only be a few languages, I'm not including\ndomain-specific \"little languages\".  I think such embedded languages\nare a great idea, and I expect them to proliferate.  But I expect\nthem to be written as thin enough skins that users can see\nthe general-purpose language underneath.Who will design the languages of the future?  One of the most exciting\ntrends in the last ten years has been the rise of open-source\nlanguages like Perl, Python, and Ruby.\nLanguage design is being taken over by hackers.  The results\nso far are messy, but encouraging.  There are some stunningly\nnovel ideas in Perl, for example. Many are stunningly bad, but\nthat's always true of ambitious efforts.  At its current rate\nof mutation, God knows what Perl might evolve into in a hundred\nyears.It's not true that those who can't do, teach (some of the best\nhackers I know are professors), but it is true that there are a\nlot of things that those who teach can't do.  Research imposes\nconstraining caste restrictions.  In any academic\nfield there are topics that are ok to work on and others that\naren't.  Unfortunately the distinction between acceptable and\nforbidden topics is usually based on how intellectual\nthe work sounds when described in research papers, rather than\nhow important it is for getting good results.  The extreme case\nis probably literature; people studying literature rarely\nsay anything that would be of the slightest use to those\nproducing it.Though the situation is better in the sciences,\nthe overlap between the kind of work you're allowed to do and the\nkind of work that yields good languages is distressingly small.\n(Olin Shivers has grumbled eloquently\nabout this.)  For example, types seem to be an inexhaustible source\nof research papers, despite the fact that static typing\nseems to preclude true macros-- without which, in my opinion, no\nlanguage is worth using.The trend is not merely toward languages being developed\nas open-source projects rather than \"research\", but toward\nlanguages being designed by the application programmers who need\nto use them, rather than by compiler writers.  This seems a good\ntrend and I expect it to continue.Unlike physics in a hundred years, which is almost necessarily\nimpossible to predict, I think it may be possible in principle\nto design a language now that would appeal to users in a hundred\nyears.One way to design a language is to just write down the program\nyou'd like to be able to write, regardless of whether there\nis a compiler that can translate it or hardware that can run it.\nWhen you do this you can assume unlimited resources.  It seems\nlike we ought to be able to imagine unlimited resources as well\ntoday as in a hundred years.What program would one like to write?  Whatever is least work.\nExcept not quite: whatever would be least work if your ideas about\nprogramming weren't already influenced by the languages you're\ncurrently used to.  Such influence can be so pervasive that\nit takes a great effort to overcome it.  You'd think it would\nbe obvious to creatures as lazy as us how to express a program\nwith the least effort.  In fact, our ideas about what's possible\ntend to be so limited by whatever language we think in  that\neasier formulations of programs seem very surprising.  They're\nsomething you have to discover, not something you naturally\nsink into.One helpful trick here\nis to use the length of the program as an approximation for\nhow much work it is to write.  Not the length in characters,\nof course, but the length in distinct syntactic elements-- basically,\nthe size of the parse tree.  It may not be quite true that\nthe shortest program is the least work to write, but it's\nclose enough that you're better off aiming for the solid\ntarget of brevity than the fuzzy, nearby one of least work.\nThen the algorithm for language design becomes: look at a program\nand ask, is there any way to write this that's shorter?In practice, writing programs in an imaginary hundred-year\nlanguage will work to varying degrees depending\non how close you are to the core.  Sort routines you can\nwrite now.  But it would be\nhard to predict now what kinds of libraries might be needed in\na hundred years.  Presumably many libraries will be for domains that\ndon't even exist yet.  If SETI@home works, for example, we'll\nneed libraries for communicating with aliens.  Unless of course\nthey are sufficiently advanced that they already communicate\nin XML.At the other extreme, I think you might be able to design the\ncore language today.  In fact, some might argue that it was already\nmostly designed in 1958.If the hundred year language were available today, would we\nwant to program in it?  One way to answer this question is to\nlook back.  If present-day programming languages had been available\nin 1960, would anyone have wanted to use them?In some ways, the answer is no.  Languages today assume\ninfrastructure that didn't exist in 1960.  For example, a language\nin which indentation is significant, like Python, would not\nwork very well on printer terminals.  But putting such problems\naside-- assuming, for example, that programs were all just\nwritten on paper-- would programmers of the 1960s have liked\nwriting programs in the languages we use now?I think so.\nSome of the less imaginative ones,\nwho had artifacts of early languages built into their ideas of\nwhat a program was, might have had trouble.  (How can you manipulate\ndata without doing pointer arithmetic?  How can you implement\nflow charts without gotos?)  But I think the smartest programmers\nwould have had no trouble making the most of present-day\nlanguages, if they'd had them.If we had the hundred-year language now, it would at least make a\ngreat pseudocode.  What about using it to write software?\nSince the hundred-year language\nwill need to generate fast code for some applications, presumably\nit could generate code efficient enough to run acceptably well\non our hardware.  We might have to give more optimization advice\nthan users in a hundred years, but it still might be a net win.Now we have two ideas that, if you combine them, suggest interesting\npossibilities: (1) the hundred-year language could, in principle, be\ndesigned today, and (2) such a language, if it existed, might be good to\nprogram in today.  When you see these ideas laid out like that,\nit's hard not to think, why not try writing the hundred-year language\nnow?When you're working on language design, I think it is good to\nhave such a target and to keep it consciously in mind.  When you\nlearn to drive, one of the principles they teach you is to\nalign the car not by lining up the hood with the stripes painted\non the road, but by aiming at some point in the distance.  Even\nif all you care about is what happens in the next ten feet, this\nis the right answer.  I\nthink we can and should do the same thing with programming languages.NotesI believe Lisp Machine Lisp was the first language to embody\nthe principle that declarations (except those of dynamic variables)\nwere merely optimization advice,\nand would not change the meaning of a correct program.  Common Lisp\nseems to have been the first to state this explicitly.Thanks to Trevor Blackwell, Robert Morris, and Dan Giffin for\nreading drafts of this, and to Guido van Rossum, Jeremy Hylton, and the\nrest of the Python crew for inviting me to speak at PyCon."},{"title":"The Island Test","text":"July 2006I've discovered a handy test for figuring out what you're addicted\nto.  Imagine you were going to spend the weekend at a friend's house\non a little island off the coast of Maine.  There are no shops on\nthe island and you won't be able to leave while you're there.  Also,\nyou've never been to this house before, so you can't assume it will\nhave more than any house might.What, besides clothes and toiletries, do you make a point of packing?\nThat's what you're addicted to.  For example, if you find yourself\npacking a bottle of vodka (just in case), you may want to stop and\nthink about that.For me the list is four things: books, earplugs, a notebook, and a\npen.There are other things I might bring if I thought of it, like music,\nor tea, but I can live without them.  I'm not so addicted to caffeine\nthat I wouldn't risk the house not having any tea, just for a\nweekend.Quiet is another matter.  I realize it seems a bit eccentric to\ntake earplugs on a trip to an island off the coast of Maine.  If\nanywhere should be quiet, that should.  But what if the person in\nthe next room snored?  What if there was a kid playing basketball?\n(Thump, thump, thump... thump.)  Why risk it?  Earplugs are small.Sometimes I can think with noise.  If I already have momentum on\nsome project, I can work in noisy places.  I can edit an essay or\ndebug code in an airport.  But airports are not so bad: most of the\nnoise is whitish.  I couldn't work with the sound of a sitcom coming\nthrough the wall, or a car in the street playing thump-thump music.And of course there's another kind of thinking, when you're starting\nsomething new, that requires complete quiet.   You never\nknow when this will strike. It's just as well to carry plugs.The notebook and pen are professional equipment, as it were.  Though\nactually there is something druglike about them, in the sense that\ntheir main purpose is to make me feel better.  I hardly ever go\nback and read stuff I write down in notebooks.  It's just that if\nI can't write things down, worrying about remembering one idea gets\nin the way of having the next.  Pen and paper wick ideas.The best notebooks I've found are made by a company called Miquelrius.\nI use their smallest size, which is about 2.5 x 4 in.\nThe secret to writing on such\nnarrow pages is to break words only when you run out of space, like\na Latin inscription.  I use the cheapest plastic Bic ballpoints,\npartly because their gluey ink doesn't seep through pages, and\npartly so I don't worry about losing them.I only started carrying a notebook about three years ago.  Before\nthat I used whatever scraps of paper I could find.  But the problem\nwith scraps of paper is that they're not ordered.  In a notebook\nyou can guess what a scribble means by looking at the pages\naround it.  In the scrap era I was constantly finding notes I'd\nwritten years before that might say something I needed to remember,\nif I could only figure out what.As for books, I know the house would probably have something to\nread.  On the average trip I bring four books and only read one of\nthem, because I find new books to read en route.  Really bringing\nbooks is insurance.I realize this dependence on books is not entirely good—that what\nI need them for is distraction.  The books I bring on trips are\noften quite virtuous, the sort of stuff that might be assigned\nreading in a college class.  But I know my motives aren't virtuous.\nI bring books because if the world gets boring I need to be able\nto slip into another distilled by some writer.  It's like eating\njam when you know you should be eating fruit.There is a point where I'll do without books.  I was walking in\nsome steep mountains once, and decided I'd rather just think, if I\nwas bored, rather than carry a single unnecessary ounce.  It wasn't\nso bad.  I found I could entertain myself by having ideas instead\nof reading other people's.  If you stop eating jam, fruit starts\nto taste better.So maybe I'll try not bringing books on some future trip.  They're\ngoing to have to pry the plugs out of my cold, dead ears, however."},{"title":"The List of N Things","text":"September 2009I bet you the current issue of Cosmopolitan has an article\nwhose title begins with a number. \"7 Things He Won't Tell You about\nSex,\" or something like that.  Some popular magazines\nfeature articles of this type on the cover of every\nissue.  That can't be happening by accident.  Editors must know\nthey attract readers.Why do readers like the list of n things so much?   Mainly because\nit's easier to read than a regular article.\n[1]\nStructurally, the list of n things is a degenerate case of essay.\nAn essay can go anywhere the writer wants.  In a list of n things\nthe writer agrees to constrain himself to a collection of points\nof roughly equal importance, and he tells the reader explicitly\nwhat they are.Some of the work of reading an article is understanding its\nstructure—figuring out what in high school we'd have called\nits \"outline.\" Not explicitly, of course, but someone who really\nunderstands an article probably has something in his brain afterward\nthat corresponds to such an outline.  In a list of n things, this\nwork is done for you.  Its structure is an exoskeleton.As well as being explicit, the structure is guaranteed to be of the\nsimplest possible type: a few main points with few to no subordinate\nones, and no particular connection between them.Because the main points are unconnected, the list of n things is\nrandom access.  There's no thread of reasoning you have to follow.  You could\nread the list in any order.  And because the points are independent\nof one another, they work like watertight compartments in an\nunsinkable ship.  If you get bored with, or can't understand, or\ndon't agree with one point, you don't have to give up on the article.\nYou can just abandon that one and skip to the next.  A list of n\nthings is parallel and therefore fault tolerant.There are times when this format is what a writer wants.  One, obviously,\nis when what you have to say actually is a list of n\nthings.  I once wrote an essay about the mistakes that kill startups, and a few people made fun of me\nfor writing something whose title began with a number.  But in that\ncase I really was trying to make a complete catalog of a number of\nindependent things.  In fact, one of the questions I was trying to\nanswer was how many there were.There are other less legitimate reasons for using this format.  For\nexample, I use it when I get close to a deadline.  If I have to\ngive a talk and I haven't started it a few days beforehand, I'll\nsometimes play it safe and make the talk a list of n things.The list of n things is easier for writers as well as readers.  When\nyou're writing a real essay, there's always a chance you'll hit a\ndead end.  A real essay is a train of thought, and some trains of\nthought just peter out.  That's an alarming possibility when you\nhave to give a talk in a few days.  What if you run out of ideas?\nThe compartmentalized structure of the list of n things protects\nthe writer from his own stupidity in much the same way it protects\nthe reader.  If you run out of ideas on one point, no problem: it\nwon't kill the essay.  You can take out the whole point if you need\nto, and the essay will still survive.Writing a list of n things is so relaxing.  You think of n/2 of\nthem in the first 5 minutes.  So bang, there's the structure, and\nyou just have to fill it in.  As you think of more points, you just\nadd them to the end.  Maybe you take out or rearrange or combine a\nfew, but at every stage you have a valid (though initially low-res)\nlist of n things.  It's like the sort of programming where you write\na version 1 very quickly and then gradually modify it, but at every\npoint have working code—or the style of painting where you begin\nwith a complete but very blurry sketch done in an hour, then spend\na week cranking up the resolution.Because the list of n things is easier for writers too, it's not\nalways a damning sign when readers prefer it.  It's not necessarily\nevidence readers are lazy; it could also mean they don't have\nmuch confidence in the writer.  The list of n things is in that\nrespect the cheeseburger of essay forms.  If you're eating at a\nrestaurant you suspect is bad, your best bet is to order the\ncheeseburger.  Even a bad cook can make a decent cheeseburger.  And\nthere are pretty strict conventions about what a cheeseburger should\nlook like.  You can assume the cook isn't going to try something\nweird and artistic.  The list of n things similarly limits the\ndamage that can be done by a bad writer.  You know it's going to\nbe about whatever the title says, and the format prevents the writer\nfrom indulging in any flights of fancy.Because the list of n things is the easiest essay form, it should\nbe a good one for beginning writers.  And in fact it is what most\nbeginning writers are taught.  The classic 5 paragraph essay is\nreally a list of n things for n = 3.  But the students writing them\ndon't realize they're using the same structure as the articles they\nread in Cosmopolitan. They're not allowed to include the numbers,\nand they're expected to spackle over the gaps with gratuitous\ntransitions (\"Furthermore...\") and cap the thing at either end with\nintroductory and concluding paragraphs so it will look superficially\nlike a real essay.\n[2]It seems a fine plan to start students off with the list of n things.\nIt's the easiest form.  But if we're going to do that, why not do\nit openly?  Let them write lists of n things like the pros, with\nnumbers and no transitions or \"conclusion.\"There is one case where the list of n things is a dishonest format:\nwhen you use it to attract attention by falsely claiming the list\nis an exhaustive one.  I.e. if you write an article that purports\nto be about the 7 secrets of success.  That kind of title is the\nsame sort of reflexive challenge as a whodunit. You have to at least\nlook at the article to check whether they're the same 7 you'd list.\nAre you overlooking one of the secrets of success?  Better check.It's fine to put \"The\" before the number if you really believe\nyou've made an exhaustive list.  But evidence suggests most things\nwith titles like this are linkbait.The greatest weakness of the list of n things is that there's so\nlittle room for new thought.  The main point of essay writing, when\ndone right, is the new ideas you have while doing it.  A real essay,\nas the name implies, is\ndynamic: you don't know what you're going\nto write when you start.  It will be about whatever you discover\nin the course of writing it.This can only happen in a very limited way in a list of n things.\nYou make the title first, and that's what it's going to be about.\nYou can't have more new ideas in the writing than will fit in the\nwatertight compartments you set up initially.  And your brain seems\nto know this: because you don't have room for new ideas, you don't\nhave them.Another advantage of admitting to beginning writers that the 5\nparagraph essay is really a list of n things is that we can warn\nthem about this.  It only lets you experience the defining\ncharacteristic of essay writing on a small scale: in thoughts of a\nsentence or two.  And it's particularly dangerous that the 5 paragraph\nessay buries the list of n things within something that looks like\na more sophisticated type of essay.  If you don't know you're using\nthis form, you don't know you need to escape it.Notes[1]\nArticles of this type are also startlingly popular on Delicious,\nbut I think that's because\ndelicious/popular\nis driven by bookmarking,\nnot because Delicious users are stupid.  Delicious users are\ncollectors, and a list of n things seems particularly collectible\nbecause it's a collection itself.[2]\nMost \"word problems\" in school math textbooks are similarly\nmisleading.  They look superficially like the application of math\nto real problems, but they're not.  So if anything they reinforce\nthe impression that math is merely a complicated but pointless\ncollection of stuff to be memorized."},{"title":"The Lost Oaks of California Ave","text":"17 September 2009A week ago, California Avenue in Palo Alto was one of the nicest\nplaces in Silicon Valley.  Palo Alto is unusual in having two\ndowntowns, because it's a merger of two towns, Palo Alto, whose\ndowntown is University Ave, and the older town of Mayfield, whose\ndowntown is California Ave.What made California Ave unique were the beautiful old oaks\nthat lined the streets.  Until the city\ncut every one of them down\nearlier this week.  I was there this afternoon, and everyone is\ntalking about it.  People are in shock.I'm still trying to figure out what happened.  From what I can tell\nso far, the city cut down the trees as part of a plan sponsored by an\norganization called CAADA (the California Avenue Area Development\nAssociation) for \"improving\" California Ave.\nApparently some planner decided that maple trees would be nicer\nthan oaks.If they were going to replace the trees, why didn't\nthey do it gradually?  This is hard to believe, but according to\nthis\nnews article, they thought the street would look more \"tidy\"\nif all the trees were the same height:\nOfficials considered doing the replacement project in\nphases, but eventually decided to \"bite the bullet and do it all\nat once,\" said Ronna Devincenzi, president of the California Avenue\nArea Development Association. She said that will allow the new trees\nto grow in at uniform height, giving the street a more tidy appearance.\nTidy.  They cut down mature oaks\nin order to replace them with a bunch of maple\nsaplings because that would look tidier?CAADA says that the trees were cut down because 80% of them were\ndiseased.  I have trouble believing that.  They didn't look diseased.\nWhen a bunch of trees\nin the way of a development project are suddenly found to be diseased,\nI look for alternative explanations.We can't bring the trees back.  The oaks of California Ave are\ngone, and it would take more than our lifetimes to grow them back.\nBut we can find out how this disaster happened and try to prevent\nsomething similar from happening again.If you'd like to know what happened to the oaks of California Ave,\nyou can reach Ronna Devincenzi, the president of CAADA, at\nrdevincenzi@akrealty.com, and Palo Alto mayor Peter Drekmeier at\npdrekmeier@earthlink.net.Update: 18 SeptemberThe mayor, city council, and city manager\ndo\nnot seem to have been\nconsulted about the decision to cut down all the trees on California\nAvenue.  Apparently that decision was made by someone else.  It's still\nunclear who.I'm now trying to piece together the chain of events that led\nto this terrible mistake.  If anyone has any leads, please let me\nknow at pg@ycombinator.com.Update: 27 SeptemberWe're getting closer to being able to figure out how this happened, though everyone involved is stonewalling.  It now looks as if the plan to cut down all the trees was initiated either by the city project engineer, who was, according to this news story Woojae Kim, or by the CAADA board of directors.The web page listing the CAADA board of directors was recently removed, but was still in the Google cache:President: Ronna Devincenzi, Realtor Alhouse-King RealtyVice President: Jim Stevens, Country Sun Natural FoodsSecretary: Terry Shuchat, Keeble and ShuchatTreasurer: George Langford, Hewlett-PackardMark Luchesi, Mollie Stone's MarketElizabeth Bishop, Bishop CorporationKarl Broussard, Kinko'sLynn Davidson, California Paint & WallpaperGerald Brett, Language PacificaWarren Wong, Hotel CaliforniaI don't know for sure if these are the exact people who voted to cut down the trees; this list could be old; but I suspect these people would be good ones to start asking what happened."},{"title":"The New Funding Landscape","text":"October 2010After barely changing at all for decades, the startup funding\nbusiness is now in what could, at least by comparison, be called\nturmoil.  At Y Combinator we've seen dramatic changes in the funding\nenvironment for startups.  Fortunately one of them is much higher\nvaluations.The trends we've been seeing are probably not YC-specific.  I wish\nI could say they were, but the main cause is probably just that we\nsee trends first—partly because the startups we fund are very\nplugged into the Valley and are quick to take advantage of anything\nnew, and partly because we fund so many that we have enough data\npoints to see patterns clearly.What we're seeing now, everyone's probably going to be seeing in\nthe next couple years.  So I'm going to explain what we're seeing,\nand what that will mean for you if you try to raise money.Super-AngelsLet me start by describing what the world of startup funding used\nto look like.  There used to be two sharply differentiated types\nof investors: angels and venture capitalists.  Angels are individual\nrich people who invest small amounts of their own money, while VCs\nare employees of funds that invest large amounts of other people's.For decades there were just those two types of investors, but now\na third type has appeared halfway between them: the so-called\nsuper-angels.\n[1]\nAnd VCs have been provoked by their arrival\ninto making a lot of angel-style investments themselves.  So the\npreviously sharp line between angels and VCs has become hopelessly\nblurred.There used to be a no man's land between angels and VCs.  Angels\nwould invest $20k to $50k apiece, and VCs usually a million or more.\nSo an angel round meant a collection of angel investments that\ncombined to maybe $200k, and a VC round meant a series A round in\nwhich a single VC fund (or occasionally two) invested $1-5 million.The no man's land between angels and VCs was a very inconvenient\none for startups, because it coincided with the amount many wanted\nto raise.  Most startups coming out of Demo Day wanted to raise\naround $400k.  But it was a pain to stitch together that much out\nof angel investments, and most VCs weren't interested in investments\nso small.  That's the fundamental reason the super-angels have\nappeared.  They're responding to the market.The arrival of a new type of investor is big news for startups,\nbecause there used to be only two and they rarely competed with one\nanother.  Super-angels compete with both angels and VCs.  That's\ngoing to change the rules about how to raise money.  I don't know\nyet what the new rules will be, but it looks like most of the changes\nwill be for the better.A super-angel has some of the qualities of an angel, and some of\nthe qualities of a VC.  They're usually individuals, like angels.\nIn fact many of the current super-angels were initially angels of\nthe classic type.  But like VCs, they invest other people's money.\nThis allows them to invest larger amounts than angels:  a typical\nsuper-angel investment is currently about $100k.  They make investment\ndecisions quickly, like angels.  And they make a lot more investments\nper partner than VCs—up to 10 times as many.The fact that super-angels invest other people's money makes them\ndoubly alarming to VCs. They don't just compete for startups; they\nalso compete for investors.  What super-angels really are is a new\nform of fast-moving, lightweight VC fund.   And those of us in the\ntechnology world know what usually happens when something comes\nalong that can be described in terms like that.  Usually it's the\nreplacement.Will it be?  As of now, few of the startups that take money from\nsuper-angels are ruling out taking VC money.  They're just postponing\nit.  But that's still a problem for VCs.  Some of the startups that\npostpone raising VC money may do so well on the angel money they\nraise that they never bother to raise more.  And those who do raise\nVC rounds will be able to get higher valuations when they do.  If\nthe best startups get 10x higher valuations when they raise series\nA rounds, that would cut VCs' returns from winners at least tenfold.\n[2]So I think VC funds are seriously threatened by the super-angels.\nBut one thing that may save them to some extent is the uneven\ndistribution of startup outcomes: practically all the returns are\nconcentrated in a few big successes.  The expected value of a startup\nis the percentage chance it's Google.  So to the extent that winning\nis a matter of absolute returns, the super-angels could win practically\nall the battles for individual startups and yet lose the war, if\nthey merely failed to get those few big winners.  And there's a\nchance that could happen, because the top VC funds have better\nbrands, and can also do more for their portfolio companies.\n[3]Because super-angels make more investments per partner, they have\nless partner per investment.  They can't pay as much attention to\nyou as a VC on your board could.  How much is that extra attention\nworth?  It will vary enormously from one partner to another.  There's\nno consensus yet in the general case.  So for now this is something\nstartups are deciding individually.Till now, VCs' claims about how much value they added were sort of\nlike the government's.  Maybe they made you feel better, but you\nhad no choice in the matter, if you needed money on the scale only\nVCs could supply.  Now that VCs have competitors, that's going to\nput a market price on the help they offer.  The interesting thing\nis, no one knows yet what it will be.Do startups that want to get really big need the sort of advice and\nconnections only the top VCs can supply?  Or would super-angel money\ndo just as well?  The VCs will say you need them, and the super-angels\nwill say you don't.  But the truth is, no one knows yet, not even\nthe VCs and super-angels themselves.   All the super-angels know\nis that their new model seems promising enough to be worth trying,\nand all the VCs know is that it seems promising enough to worry\nabout.RoundsWhatever the outcome, the conflict between VCs and super-angels is\ngood news for founders.  And not just for the obvious reason that\nmore competition for deals means better terms.  The whole shape of\ndeals is changing.One of the biggest differences between angels and VCs is the amount\nof your company they want.  VCs want a lot.  In a series A round\nthey want a third of your company, if they can get it.  They don't\ncare much how much they pay for it, but they want a lot because the\nnumber of series A investments they can do is so small.  In a\ntraditional series A investment, at least one partner from the VC\nfund takes a seat on your board.\n[4]\nSince board seats last about\n5 years and each partner can't handle more than about 10 at once,\nthat means a VC fund can only do about 2 series A deals per partner\nper year. And that means they need to get as much of the company\nas they can in each one.  You'd have to be a very promising startup\nindeed to get a VC to use up one of his 10 board seats for only a\nfew percent of you.Since angels generally don't take board seats, they don't have this\nconstraint.  They're happy to buy only a few percent of you.  And\nalthough the super-angels are in most respects mini VC funds, they've\nretained this critical property of angels.  They don't take board\nseats, so they don't need a big percentage of your company.Though that means you'll get correspondingly less attention from\nthem, it's good news in other respects.  Founders never really liked\ngiving up as much equity as VCs wanted.  It was a lot of the company\nto give up in one shot.  Most founders doing series A deals would\nprefer to take half as much money for half as much stock, and then\nsee what valuation they could get for the second half of the stock\nafter using the first half of the money to increase its value.  But\nVCs never offered that option.Now startups have another alternative.  Now it's easy to raise angel\nrounds about half the size of series A rounds.  Many of the startups\nwe fund are taking this route, and I predict that will be true of\nstartups in general.A typical big angel round might be $600k on a convertible note with\na valuation cap of $4 million premoney.  Meaning that when the note\nconverts into stock (in a later round, or upon acquisition), the\ninvestors in that round will get .6 / 4.6, or 13% of the company.\nThat's a lot less than the 30 to 40% of the company you usually\ngive up in a series A round if you do it so early.\n[5]But the advantage of these medium-sized rounds is not just that\nthey cause less dilution.  You also lose less control.  After an\nangel round, the founders almost always still have control of the\ncompany, whereas after a series A round they often don't.  The\ntraditional board structure after a series A round is two founders,\ntwo VCs, and a (supposedly) neutral fifth person.  Plus series A\nterms usually give the investors a veto over various kinds of\nimportant decisions, including selling the company.  Founders usually\nhave a lot of de facto control after a series A, as long as things\nare going well.  But that's not the same as just being able to do\nwhat you want, like you could before.A third and quite significant advantage of angel rounds is that\nthey're less stressful to raise.  Raising a traditional series A\nround has in the past taken weeks, if not months.  When a VC firm\ncan only do 2 deals per partner per year, they're careful about\nwhich they do.  To get a traditional series A round you have to go\nthrough a series of meetings, culminating in a full partner meeting\nwhere the firm as a whole says yes or no.  That's the really scary\npart for founders: not just that series A rounds take so long, but\nat the end of this long process the VCs might still say no.  The\nchance of getting rejected after the full partner meeting averages\nabout 25%.  At some firms it's over 50%.Fortunately for founders, VCs have been getting a lot faster.\nNowadays Valley VCs are more likely to take 2 weeks than 2 months.\nBut they're still not as fast as angels and super-angels, the most\ndecisive of whom sometimes decide in hours.Raising an angel round is not only quicker, but you get feedback\nas it progresses.  An angel round is not an all or nothing thing\nlike a series A.  It's composed of multiple investors with varying\ndegrees of seriousness, ranging from the upstanding ones who commit\nunequivocally to the jerks who give you lines like \"come back to\nme to fill out the round.\" You usually start collecting money from\nthe most committed investors and work your way out toward the\nambivalent ones, whose interest increases as the round fills up.But at each point you know how you're doing.  If investors turn\ncold you may have to raise less, but when investors in an angel\nround turn cold the process at least degrades gracefully, instead\nof blowing up in your face and leaving you with nothing, as happens\nif you get rejected by a VC fund after a full partner meeting.\nWhereas if investors seem hot, you can not only close the round\nfaster, but now that convertible notes are becoming the norm,\nactually raise the price to reflect demand.ValuationHowever, the VCs have a weapon they can use against the super-angels,\nand they have started to use it.   VCs have started making angel-sized\ninvestments too.  The term \"angel round\" doesn't mean that all the\ninvestors in it are angels; it just describes the structure of the\nround.  Increasingly the participants include VCs making investments\nof a hundred thousand or two.  And when VCs invest in angel rounds\nthey can do things that super-angels don't like.  VCs are quite\nvaluation-insensitive in angel rounds—partly because they are\nin general, and partly because they don't care that much about the\nreturns on angel rounds, which they still view mostly as a way to\nrecruit startups for series A rounds later.  So VCs who invest in\nangel rounds can blow up the valuations for angels and super-angels\nwho invest in them.\n[6]Some super-angels seem to care about valuations.  Several turned\ndown YC-funded startups after Demo Day because their valuations\nwere too high.  This was not a problem for the startups; by definition\na high valuation means enough investors were willing to accept it.\nBut it was mysterious to me that the super-angels would quibble\nabout valuations.  Did they not understand that the big returns\ncome from a few big successes, and that it therefore mattered far\nmore which startups you picked than how much you paid for them?After thinking about it for a while and observing certain other\nsigns, I have a theory that explains why the super-angels may be\nsmarter than they seem.  It would make sense for super-angels to\nwant low valuations if they're hoping to invest in startups that\nget bought early.  If you're hoping to hit the next Google, you\nshouldn't care if the valuation is 20 million.  But if you're looking\nfor companies that are going to get bought for 30 million, you care.\nIf you invest at 20 and the company gets bought for 30, you only\nget 1.5x.  You might as well buy Apple.So if some of the super-angels were looking for companies that could\nget acquired quickly, that would explain why they'd care about\nvaluations.  But why would they be looking for those?   Because\ndepending on the meaning of \"quickly,\" it could actually be very\nprofitable.  A company that gets acquired for 30 million is a failure\nto a VC, but it could be a 10x return for an angel, and moreover,\na quick 10x return.  Rate of return is what matters in\ninvesting—not the multiple you get, but the multiple per year.\nIf a super-angel gets 10x in one year, that's a higher rate of\nreturn than a VC could ever hope to get from a company that took 6\nyears to go public.  To get the same rate of return, the VC would\nhave to get a multiple of 10^6—one million x.  Even Google\ndidn't come close to that.So I think at least some super-angels are looking for companies\nthat will get bought.  That's the only rational explanation for\nfocusing on getting the right valuations, instead of the right\ncompanies.  And if so they'll be different to deal with than VCs.\nThey'll be tougher on valuations, but more accommodating if you want\nto sell early.PrognosisWho will win, the super-angels or the VCs?  I think the answer to\nthat is, some of each.  They'll each become more like one another.\nThe super-angels will start to invest larger amounts, and the VCs\nwill gradually figure out ways to make more, smaller investments\nfaster.  A decade from now the players will be hard to tell apart,\nand there will probably be survivors from each group.What does that mean for founders?  One thing it means is that the\nhigh valuations startups are presently getting may not last forever.\nTo the extent that valuations are being driven up by price-insensitive\nVCs, they'll fall again if VCs become more like super-angels and\nstart to become more miserly about valuations.  Fortunately if this\ndoes happen it will take years.The short term forecast is more competition between investors, which\nis good news for you.  The super-angels will try to undermine the\nVCs by acting faster, and the VCs will try to undermine the\nsuper-angels by driving up valuations.  Which for founders will\nresult in the perfect combination: funding rounds that close fast,\nwith high valuations.But remember that to get that combination, your startup will have\nto appeal to both super-angels and VCs.  If you don't seem like you\nhave the potential to go public, you won't be able to use VCs to\ndrive up the valuation of an angel round.There is a danger of having VCs in an angel round: the so-called\nsignalling risk.  If VCs are only doing it in the hope of investing\nmore later, what happens if they don't?  That's a signal to everyone\nelse that they think you're lame.How much should you worry about that?  The seriousness of signalling\nrisk depends on how far along you are.  If by the next time you\nneed to raise money, you have graphs showing rising revenue or\ntraffic month after month, you don't have to worry about any signals\nyour existing investors are sending.  Your results will speak for\nthemselves.\n[7]Whereas if the next time you need to raise money you won't yet have\nconcrete results, you may need to think more about the message your\ninvestors might send if they don't invest more.  I'm not sure yet\nhow much you have to worry, because this whole phenomenon of VCs\ndoing angel investments is so new. But my instincts tell me you\ndon't have to worry much.  Signalling risk smells like one of those\nthings founders worry about that's not a real problem.  As a rule,\nthe only thing that can kill a good startup is the startup itself.\nStartups hurt themselves way more often than competitors hurt them,\nfor example.  I suspect signalling risk is in this category too.One thing YC-funded startups have been doing to mitigate the risk\nof taking money from VCs in angel rounds is not to take too much\nfrom any one VC.  Maybe that will help, if you have the luxury of\nturning down money.Fortunately, more and more startups will.  After decades of competition\nthat could best be described as intramural, the startup funding\nbusiness is finally getting some real competition.  That should\nlast several years at least, and maybe a lot longer. Unless there's\nsome huge market crash, the next couple years are going to be a\ngood time for startups to raise money.  And that's exciting because\nit means lots more startups will happen.Notes[1]\nI've also heard them called \"Mini-VCs\" and \"Micro-VCs.\" I\ndon't know which name will stick.There were a couple predecessors.  Ron Conway had angel funds\nstarting in the 1990s, and in some ways First Round Capital is closer to a\nsuper-angel than a VC fund.[2]\nIt wouldn't cut their overall returns tenfold, because investing\nlater would probably (a) cause them to lose less on investments\nthat failed, and (b) not allow them to get as large a percentage\nof startups as they do now.  So it's hard to predict precisely what\nwould happen to their returns.[3]\nThe brand of an investor derives mostly from the success of\ntheir portfolio companies.  The top VCs thus have a big brand\nadvantage over the super-angels.  They could make it self-perpetuating\nif they used it to get all the best new startups.  But I don't think\nthey'll be able to.  To get all the best startups, you have to do\nmore than make them want you.  You also have to want them; you have\nto recognize them when you see them, and that's much harder.\nSuper-angels will snap up stars that VCs miss.  And that will cause\nthe brand gap between the top VCs and the super-angels gradually\nto erode.[4]\nThough in a traditional series A round VCs put two partners\non your board, there are signs now that VCs may begin to conserve\nboard seats by switching to what used to be considered an angel-round\nboard, consisting of two founders and one VC.  Which is also to the\nfounders' advantage if it means they still control the company.[5]\nIn a series A round, you usually have to give up more than\nthe actual amount of stock the VCs buy, because they insist you\ndilute yourselves to set aside an \"option pool\" as well.  I predict\nthis practice will gradually disappear though.[6]\nThe best thing for founders, if they can get it, is a convertible\nnote with no valuation cap at all.  In that case the money invested\nin the angel round just converts into stock at the valuation of the\nnext round, no matter how large.  Angels and super-angels tend not\nto like uncapped notes. They have no idea how much of the company\nthey're buying.  If the company does well and the valuation of the\nnext round is high, they may end up with only a sliver of it.  So\nby agreeing to uncapped notes, VCs who don't care about valuations\nin angel rounds can make offers that super-angels hate to match.[7]\nObviously signalling risk is also not a problem if you'll\nnever need to raise more money.  But startups are often mistaken\nabout that.Thanks to Sam Altman, John Bautista, Patrick Collison, James\nLindenbaum, Reid Hoffman, Jessica Livingston and Harj Taggar\nfor reading drafts\nof this."},{"title":"The Other Half of \"Artists Ship\"","text":"November 2008One of the differences between big companies and startups is that\nbig companies tend to have developed procedures to protect themselves\nagainst mistakes.  A startup walks like a toddler, bashing\ninto things and falling over all the time.  A big company is more\ndeliberate.The gradual accumulation of checks in an organization is a kind of\nlearning, based on disasters that have happened to it or others\nlike it.  After giving a contract to a supplier who goes bankrupt\nand fails to deliver, for example, a company might require all\nsuppliers to prove they're solvent before submitting bids.As companies grow they invariably get more such checks, either in\nresponse to disasters they've suffered, or (probably more often)\nby hiring people from bigger companies who bring with them customs\nfor protecting against new types of disasters.It's natural for organizations to learn from mistakes.  The problem\nis, people who propose new checks almost never consider that the\ncheck itself has a cost.Every check has a cost. For example, consider the case of making\nsuppliers verify their solvency.  Surely that's mere prudence?  But\nin fact it could have substantial costs.  There's obviously the\ndirect cost in time of the people on both sides who supply and check\nproofs of the supplier's solvency.  But the real costs are the ones\nyou never hear about: the company that would be the best supplier,\nbut doesn't bid because they can't spare the effort to get verified.\nOr the company that would be the best supplier, but falls just short\nof the threshold for solvency—which will of course have been set\non the high side, since there is no apparent cost of increasing it.Whenever someone in an organization proposes to add a new check,\nthey should have to explain not just the benefit but the cost.  No\nmatter how bad a job they did of analyzing it, this meta-check would\nat least remind everyone there had to be a cost, and send them\nlooking for it.If companies started doing that, they'd find some surprises.  Joel\nSpolsky recently spoke at Y Combinator about selling software to\ncorporate customers.  He said that in most companies software costing\nup to about $1000 could be bought by individual managers without\nany additional approvals.  Above that threshold, software purchases\ngenerally had to be approved by a committee.  But babysitting this\nprocess was so expensive for software vendors that it didn't make\nsense to charge less than $50,000.  Which means if you're making\nsomething you might otherwise have charged $5000 for, you have to\nsell it for $50,000 instead.The purpose of the committee is presumably to ensure that the company\ndoesn't waste money. And yet the result is that the company pays\n10 times as much.Checks on purchases will always be expensive, because the harder\nit is to sell something to you, the more it has to cost.  And not\nmerely linearly, either.  If you're hard enough to sell to, the\npeople who are best at making things don't want to bother.  The\nonly people who will sell to you are companies that specialize in\nselling to you.  Then you've sunk to a whole new level of inefficiency.\nMarket mechanisms no longer protect you, because the good suppliers\nare no longer in the market.Such things happen constantly to the biggest organizations of all,\ngovernments.  But checks instituted by governments can cause much\nworse problems than merely overpaying.  Checks instituted by\ngovernments can cripple a country's whole economy.  Up till about\n1400, China was richer and more technologically advanced than Europe.\nOne reason Europe pulled ahead was that the Chinese government\nrestricted long trading voyages.  So it was left to the Europeans\nto explore and eventually to dominate the rest of the world, including\nChina.In more recent times, Sarbanes-Oxley has practically destroyed the\nUS IPO market.  That wasn't the intention of the legislators who\nwrote it.  They just wanted to add a few more checks on public\ncompanies.  But they forgot to consider the cost.  They forgot that\ncompanies about to go public are usually rather stretched, and that\nthe weight of a few extra checks that might be easy for General\nElectric to bear are enough to prevent younger companies from being\npublic at all.Once you start to think about the cost of checks, you can start to\nask other interesting questions. Is the cost increasing or decreasing?\nIs it higher in some areas than others?  Where does it increase\ndiscontinuously?  If large organizations started to ask questions\nlike that, they'd learn some frightening things.I think the cost of checks may actually be increasing.  The reason\nis that software plays an increasingly important role in companies,\nand the people who write software are particularly harmed by checks.Programmers are unlike many types of workers in that the best ones\nactually prefer to work hard.  This doesn't seem to be the case in\nmost types of work.  When I worked in fast food, we didn't prefer\nthe busy times.  And when I used to mow lawns, I definitely didn't\nprefer it when the grass was long after a week of rain.Programmers, though, like it better when they write more code.  Or\nmore precisely, when they release more code.  Programmers like to\nmake a difference.  Good ones, anyway.For good programmers, one of the best things about working for a\nstartup is that there are few checks on releases.  In true startups,\nthere are no external checks at all.  If you have an idea for a new\nfeature in the morning, you can write it and push it to the production\nservers before lunch.  And when you can do that, you have more\nideas.At big companies, software has to go through various approvals\nbefore it can be launched.  And the cost of doing this can be\nenormous—in fact, discontinuous.  I was talking recently to a\ngroup of three programmers whose startup had been acquired a few\nyears before by a big company.  When they'd been independent, they\ncould release changes instantly.  Now, they said, the absolute\nfastest they could get code released on the production servers was\ntwo weeks.This didn't merely make them less productive.  It made them hate\nworking for the acquirer.Here's a sign of how much programmers like to be able to work hard:\nthese guys would have paid to be able to release code immediately,\nthe way they used to.  I asked them if they'd trade 10% of the\nacquisition price for the ability to release code immediately, and\nall three instantly said yes.  Then I asked what was the maximum\npercentage of the acquisition price they'd trade for it.  They said\nthey didn't want to think about it, because they didn't want to\nknow how high they'd go, but I got the impression it might be as\nmuch as half.They'd have sacrificed hundreds of thousands of dollars, perhaps\nmillions, just to be able to deliver more software to users.  And\nyou know what?  It would have been perfectly safe to let them.  In\nfact, the acquirer would have been better off; not only wouldn't\nthese guys have broken anything, they'd have gotten a lot more done.\nSo the acquirer is in fact getting worse performance at greater\ncost.  Just like the committee approving software purchases.And just as the greatest danger of being hard to sell to is not\nthat you overpay but that the best suppliers won't even sell to\nyou, the greatest danger of applying too many checks to your\nprogrammers is not that you'll make them unproductive, but that\ngood programmers won't even want to work for you.Steve Jobs's famous maxim \"artists ship\" works both ways.  Artists\naren't merely capable of shipping.  They insist on it.  So if you\ndon't let people ship, you won't have any artists."},{"title":"The Other Road Ahead","text":"September 2001\n(This article explains why much of the next generation of software\nmay be server-based, what that will mean for programmers,\nand why this new kind of software is a great opportunity for startups.\nIt's derived from a talk at BBN Labs.)\nIn the summer of 1995, my friend Robert Morris and I decided to\nstart a startup.  The PR campaign leading up to Netscape's IPO was\nrunning full blast then, and there was a lot of talk in the press\nabout online commerce.  At the time there might have been thirty\nactual stores on the Web, all made by hand.  If there were going\nto be a lot of online stores, there would need to be software for making\nthem, so we decided to write some.For the first week or so we intended to make this an ordinary\ndesktop application.  Then one day we had the idea of making the\nsoftware run on our Web server, using the browser as an\ninterface.  We tried rewriting the software to work over\nthe Web, and it was clear that this was the way to go.\nIf we wrote our software to run on the server, it would be a lot easier\nfor the users and for us as well.This turned out to be a good plan.  Now, as\nYahoo Store, this\nsoftware is the most popular online store builder, with\nabout 14,000 users.When we started Viaweb, hardly anyone understood what we meant when\nwe said that the software ran on the server.  It was not until\nHotmail was launched a year later that people started to get it.\nNow everyone knows that this is a valid approach.  There is\na name now for what we were: an Application Service Provider,\nor ASP.I think that a lot of the next generation of software will be\nwritten on this model.  Even Microsoft, who have the most to\nlose, seem to see the inevitablity of moving some things off\nthe desktop. If software moves\noff the desktop and onto servers, it will mean a very different\nworld for developers.  This article describes the surprising\nthings we saw, as some of the first visitors to this new world.\nTo the extent software does move onto\nservers, what I'm describing here is the future.The Next Thing?When we look back on the desktop software era, I think we'll marvel\nat the inconveniences people put up with, just as we marvel now at\nwhat early car owners put up with.  For the first twenty or thirty\nyears, you had to be a car expert to own a car.  But cars were such\na big win that lots of people who weren't car experts wanted to\nhave them as well.Computers are in this phase now.  When you own a desktop computer,\nyou end up learning a lot more than you wanted to know about what's\nhappening inside it.  But more than half the households in the US\nown one.  My mother has a computer that she uses for email and for\nkeeping accounts.  About a year ago she was alarmed to receive a\nletter from Apple, offering her a discount on a new version of the\noperating system.  There's something wrong when a sixty-five year\nold woman who wants to use a computer for email and accounts has\nto think about installing new operating systems.  Ordinary users\nshouldn't even know the words \"operating system,\" much less \"device\ndriver\" or \"patch.\"There is now another way to deliver software that will save users\nfrom becoming system administrators.  Web-based applications are\nprograms that run on Web servers and use Web pages as the user\ninterface.  For the average user this new kind of software will be\neasier, cheaper, more mobile, more reliable, and often more powerful\nthan desktop software.With Web-based software, most users won't have to think about\nanything except the applications they use.  All the messy, changing\nstuff will be sitting on a server somewhere, maintained by the kind\nof people who are good at that kind of thing.  And so you won't\nordinarily need a computer, per se, to use software.  All you'll\nneed will be something with a keyboard, a screen, and a Web browser.\nMaybe it will have wireless Internet access.  Maybe it will also\nbe your cell phone.  Whatever it is, it will be consumer electronics:\nsomething that costs about $200, and that people choose mostly\nbased on how the case looks.  You'll pay more for Internet services\nthan you do for the hardware, just as you do now with telephones. [1]It will take about a tenth of a second for a click to get to the\nserver and back, so users of heavily interactive software, like\nPhotoshop, will still want to have the computations happening on\nthe desktop.  But if you look at the kind of things most people\nuse computers for, a tenth of a second latency would not be a\nproblem.  My mother doesn't really need a desktop computer, and\nthere are a lot of people like her.The Win for UsersNear my house there is a car with a bumper sticker that reads \"death\nbefore inconvenience.\"  Most people, most of the time, will take\nwhatever choice requires least work.  If Web-based software wins,\nit will be because it's more convenient.  And it looks as if it\nwill be, for users and developers both.To use a purely Web-based application, all you need is a browser\nconnected to the Internet.  So you can use a Web-based application\nanywhere.  When you install software on your desktop computer, you\ncan only use it on that computer.  Worse still, your files are\ntrapped on that computer.  The inconvenience of this model becomes\nmore and more evident as people get used to networks.The thin end of the wedge here was Web-based email.  Millions of\npeople now realize that you should have access to email messages\nno matter where you are.  And if you can see your email, why not\nyour calendar?\nIf you can discuss a document with your colleagues,\nwhy can't you edit it?  Why should any of your data be trapped on\nsome computer sitting on a faraway desk?The whole idea of \"your computer\" is going away, and being replaced\nwith \"your data.\"  You should be able to get at your data from any\ncomputer.  Or rather, any client, and a client doesn't have to be\na computer.Clients shouldn't store data; they should be like telephones.  In\nfact they may become telephones, or vice versa.  And as clients\nget smaller, you have another reason not to keep your data on them:\nsomething you carry around with you can be lost or stolen.   Leaving\nyour PDA in a taxi is like a disk crash, except that your data is\nhanded to someone else\ninstead of being vaporized.With purely Web-based software, neither your data nor the applications\nare kept on the client.  So you don't have to install anything to\nuse it.  And when there's no installation, you don't have to worry\nabout installation going wrong.  There can't be incompatibilities\nbetween the application and your operating system, because the\nsoftware doesn't run on your operating system.Because it needs no installation, it will be easy, and common, to\ntry Web-based software before you \"buy\" it.  You should expect to\nbe able to test-drive any Web-based application for free, just by\ngoing to the site where it's offered.  At Viaweb our whole site\nwas like a big arrow pointing users to the test drive.After trying the demo, signing up for the service should require\nnothing more than filling out a brief form (the briefer the better).\nAnd that should be the last work the user has to do.  With Web-based\nsoftware, you should get new releases without paying extra, or\ndoing any work, or possibly even knowing about it.Upgrades won't be the big shocks they are now.  Over time applications\nwill quietly grow more powerful.  This will take some effort on\nthe part of the developers.  They will have to design software so\nthat it can be updated without confusing the users.  That's a new\nproblem, but there are ways to solve it.With Web-based applications, everyone uses the same version, and\nbugs can be fixed as soon as they're discovered.  So Web-based\nsoftware should have far fewer bugs than desktop software.  At\nViaweb, I doubt we ever had ten known bugs at any one time.  That's\norders of magnitude better than desktop software.Web-based applications can be used by several people at the same\ntime.  This is an obvious win for collaborative applications, but\nI bet users will start to want this in most applications once they\nrealize it's possible.  It will often be useful to let two people\nedit the same document, for example.  Viaweb let multiple users\nedit a site simultaneously, more because that was the right way to\nwrite the software than because we expected users to want to, but\nit turned out that many did.When you use a Web-based application, your data will be safer.\nDisk crashes won't be a thing of the past, but users won't hear\nabout them anymore.  They'll happen within server farms.  And\ncompanies offering Web-based applications will actually do backups--\nnot only because they'll have real system administrators worrying\nabout such things, but because an ASP that does lose people's data\nwill be in big, big trouble.  When people lose their own data in\na disk crash, they can't get that mad, because they only have\nthemselves to be mad at.  When a company loses their data for them,\nthey'll get a lot madder.Finally, Web-based software should be less vulnerable to viruses.\nIf the client doesn't run anything except a browser, there's less\nchance of running viruses, and no data locally to damage.  And a\nprogram that attacked the servers themselves should find them very\nwell defended. [2]For users, Web-based software will be less stressful.  I think if\nyou looked inside the average Windows user you'd find a huge and\npretty much untapped desire for software meeting that description.\nUnleashed, it could be a powerful force.City of CodeTo developers, the most conspicuous difference between Web-based\nand desktop software is that a Web-based application is not a single\npiece of code.  It will be a collection of programs of different\ntypes rather than a single big binary.  And so designing Web-based\nsoftware is like desiging a city rather than a building: as well\nas buildings you need roads, street signs, utilities, police and\nfire departments, and plans for both growth and various kinds of\ndisasters.At Viaweb, software included fairly big applications that users\ntalked to directly, programs that those programs used, programs\nthat ran constantly in the background looking for problems, programs\nthat tried to restart things if they broke, programs that ran\noccasionally to compile statistics or build indexes for searches,\nprograms we ran explicitly to garbage-collect resources or to move\nor restore data, programs that pretended to be users (to measure\nperformance or expose bugs), programs for diagnosing network\ntroubles, programs for doing backups, interfaces to outside services,\nsoftware that drove an impressive collection of dials displaying\nreal-time server statistics (a hit with visitors, but indispensable\nfor us too), modifications (including bug fixes) to open-source\nsoftware, and a great many configuration files and settings.  Trevor\nBlackwell wrote a spectacular program for moving stores to new\nservers across the country, without shutting them down, after we\nwere bought by Yahoo. Programs paged us, sent faxes and email to\nusers, conducted transactions with credit card processors, and\ntalked to one another through sockets, pipes, http requests, ssh,\nudp packets, shared memory, and files.  Some of Viaweb even consisted\nof the absence of programs, since one of the keys to Unix security\nis not to run unnecessary utilities that people might use to break\ninto your servers.It did not end with software.  We spent a lot of time thinking\nabout server configurations.  We built the servers ourselves, from\ncomponents-- partly to save money, and partly to get exactly what\nwe wanted.  We had to think about whether our upstream ISP had fast\nenough connections to all the backbones.  We serially\ndated\nRAID suppliers.But hardware is not just something to worry about.  When you control\nit you can do more for users.  With a desktop application, you can\nspecify certain minimum hardware, but you can't add more.  If you\nadminister the servers, you can in one step enable all your users\nto page people, or send faxes, or send commands by phone, or process\ncredit cards, etc, just by installing the relevant hardware.  We\nalways looked for new ways to add features with hardware, not just\nbecause it pleased users, but also as a way to distinguish ourselves\nfrom competitors who (either because they sold desktop software,\nor resold Web-based applications through ISPs) didn't have direct\ncontrol over the hardware.Because the software in a Web-based application will be a collection\nof programs rather than a single binary, it can be written in any\nnumber of different languages.  When you're writing desktop software,\nyou're practically forced to write the application in the same\nlanguage as the underlying operating system-- meaning C and C++.\nAnd so these languages (especially among nontechnical people like\nmanagers and VCs) got to be considered as the languages for \"serious\"\nsoftware development.  But that was just an artifact of the way\ndesktop software had to be delivered.  For server-based software\nyou can use any language you want. [3]  Today a lot of the top\nhackers are using languages far removed from C and C++:  Perl,\nPython, and even Lisp.With server-based software, no one can tell you what language to\nuse, because you control the whole system, right down to the\nhardware.  Different languages are good for different tasks.  You\ncan use whichever is best for each.  And when you have competitors,\n\"you can\" means \"you must\" (we'll return to this later), because\nif you don't take advantage of this possibility, your competitors\nwill.Most of our competitors used C and C++, and this made their software\nvisibly inferior because (among other things), they had no way\naround the statelessness of CGI scripts.  If you were going to\nchange something, all the changes had to happen on one page, with\nan Update button at the bottom.  As I've written elsewhere, by\nusing Lisp, which many people still consider\na research language,\nwe could make the Viaweb editor behave more like desktop software.ReleasesOne of the most important changes in this new world is the way you\ndo releases. In the desktop software business, doing a release is\na huge trauma, in which the whole company sweats and strains to\npush out a single, giant piece of code.  Obvious comparisons suggest\nthemselves, both to the process and the resulting product.With server-based software, you can make changes almost as you\nwould in a program you were writing for yourself.  You release\nsoftware as a series of incremental changes instead of an occasional\nbig explosion. A typical desktop software company might do one or\ntwo releases a year.  At Viaweb we often did three to five releases\na day.When you switch to this new model, you realize how much software\ndevelopment is affected by the way it is released.  Many of the\nnastiest problems you see in the desktop software business are due\nto catastrophic nature of releases.When you release only one new version a year, you tend to deal with\nbugs wholesale.  Some time before the release date you assemble a\nnew version in which half the code has been torn out and replaced,\nintroducing countless bugs.  Then a squad of QA people step in and\nstart counting them, and the programmers work down the list, fixing\nthem.  They do not generally get to the end of the list, and indeed,\nno one is sure where the end is.  It's like fishing rubble out of\na pond.  You never really know what's happening inside the software.\nAt best you end up with a statistical sort of correctness.With server-based software, most of the change is small and\nincremental.  That in itself is less likely to introduce bugs.  It\nalso means you know what to test most carefully when you're about\nto release software: the last thing you changed.  You end up with\na much firmer grip on the code.  As a general rule, you do know\nwhat's happening inside it.  You don't have the source code memorized,\nof course, but when you read the source you do it like a pilot\nscanning the instrument panel, not like a detective trying to\nunravel some mystery.Desktop software breeds a certain fatalism about bugs.  You know\nthat you're shipping something loaded with bugs, and you've even\nset up mechanisms to compensate for it (e.g. patch releases).  So\nwhy worry about a few more?  Soon you're releasing whole features\nyou know are broken.\nApple\ndid this earlier this year.  They felt\nunder pressure to release their new OS, whose release date had\nalready slipped four times, but some of the software (support for\nCDs and DVDs) wasn't ready. The solution?  They released the OS\nwithout the unfinished parts, and users will have to install them\nlater.With Web-based software, you never have to release software before\nit works, and you can release it as soon as it does work.The industry veteran may be thinking, it's a fine-sounding idea to\nsay that you never have to release software before it works, but\nwhat happens when you've promised to deliver a new version of your\nsoftware by a certain date?  With Web-based software, you wouldn't\nmake such a promise, because there are no versions.  Your software\nchanges gradually and continuously.  Some changes might be bigger\nthan others, but the idea of versions just doesn't naturally fit\nonto Web-based software.If anyone remembers Viaweb this might sound odd, because we were\nalways announcing new versions.  This was done entirely for PR\npurposes.  The trade press, we learned, thinks in version numbers.\nThey will give you major coverage for a major release, meaning a\nnew first digit on the version number, and generally a paragraph\nat most for a point release, meaning a new digit after the decimal\npoint.Some of our competitors were offering desktop software and actually\nhad version numbers.  And for these releases, the mere fact of\nwhich seemed to us evidence of their backwardness, they would get\nall kinds of publicity.  We didn't want to miss out, so we started\ngiving version numbers to our software too.  When we wanted some\npublicity, we'd make a list of all the features we'd added since\nthe last \"release,\" stick a new version number on the software,\nand issue a press release saying that the new version was available\nimmediately.  Amazingly, no one ever called us on it.By the time we were bought, we had done this three times, so we\nwere on Version 4.  Version 4.1 if I remember correctly.  After\nViaweb became Yahoo Store, there was no longer such a desperate\nneed for publicity, so although the software continued to evolve,\nthe whole idea of version numbers was quietly dropped.BugsThe other major technical advantage of Web-based software is that\nyou can reproduce most bugs.  You have the users' data right there\non your disk.  If someone breaks your software, you don't have to\ntry to guess what's going on, as you would with desktop software:\nyou should be able to reproduce the error while they're on the\nphone with you.  You might even know about it already, if you have\ncode for noticing errors built into your application.Web-based software gets used round the clock, so everything you do\nis immediately put through the wringer.  Bugs turn up quickly.Software companies are sometimes accused of letting the users debug\ntheir software.  And that is just what I'm advocating.  For Web-based\nsoftware it's actually a good plan, because the bugs are fewer and\ntransient.  When you release software gradually you get far fewer\nbugs to start with.  And when you can reproduce errors and release\nchanges instantly, you can find and fix most bugs as soon as they\nappear.  We never had enough bugs at any one time to bother with\na formal bug-tracking system.You should test changes before you release them, of course, so no\nmajor bugs should get released.  Those few that inevitably slip\nthrough will involve borderline cases and will only affect the few\nusers that encounter them before someone calls in to complain.  As\nlong as you fix bugs right away, the net effect, for the average\nuser, is far fewer bugs.  I doubt the average Viaweb user ever saw\na bug.Fixing fresh bugs is easier than fixing old ones.  It's usually\nfairly quick to find a bug in code you just wrote.  When it turns\nup you often know what's wrong before you even look at the source,\nbecause you were already worrying about it subconsciously. Fixing\na bug in something you wrote six months ago (the average case if\nyou release once a year) is a lot more work.  And since you don't\nunderstand the code as well, you're more likely to fix it in an\nugly way, or even introduce more bugs. [4]When you catch bugs early, you also get fewer compound bugs.\nCompound bugs are two separate bugs that interact:  you trip going\ndownstairs, and when you reach for the handrail it comes off in\nyour hand.  In software this kind of bug is the hardest to find,\nand also tends to have the worst consequences. [5]  The traditional\n\"break everything and then filter out the bugs\" approach inherently\nyields a lot of compound bugs.  And software that's released in a\nseries of small changes inherently tends not to. The floors are\nconstantly being swept clean of any loose objects that might later\nget stuck in something.It helps if you use a technique called functional programming.\nFunctional programming means avoiding side-effects.  It's something\nyou're more likely to see in research papers than commercial\nsoftware, but for Web-based applications it turns out to be really\nuseful.  It's hard to write entire programs as purely functional\ncode, but you can write substantial chunks this way.  It makes\nthose parts of your software easier to test, because they have no\nstate, and that is very convenient in a situation where you are\nconstantly making and testing small modifications.  I wrote much\nof Viaweb's editor in this style, and we made our scripting language,\nRTML,\na purely functional language.People from the desktop software business will find this hard to\ncredit, but at Viaweb bugs became almost a game.  Since most released\nbugs involved borderline cases, the users who encountered them were\nlikely to be advanced users, pushing the envelope.  Advanced users\nare more forgiving about bugs, especially since you probably\nintroduced them in the course of adding some feature they were\nasking for.  In fact, because bugs were rare and you had to be\ndoing sophisticated things to see them, advanced users were often\nproud to catch one.  They would call support in a spirit more of\ntriumph than anger, as if they had scored points off us.SupportWhen you can reproduce errors, it changes your approach to customer\nsupport.  At most software companies, support is offered as a way\nto make customers feel better.  They're either calling you about\na known bug, or they're just doing something wrong and you have to\nfigure out what.  In either case there's not much you can learn\nfrom them.  And so you tend to view support calls as a pain in the\nass that you want to isolate from your developers as much as\npossible.This was not how things worked at Viaweb.  At Viaweb, support was\nfree, because we wanted to hear from customers.  If someone had a\nproblem, we wanted to know about it right away so that we could\nreproduce the error and release a fix.So at Viaweb the developers were always in close contact with\nsupport.  The customer support people were about thirty feet away\nfrom the programmers, and knew that they could always interrupt\nanything with a report of a genuine bug.  We would leave a board\nmeeting to fix a serious bug.Our approach to support made everyone happier.  The customers were\ndelighted.  Just imagine how it would feel to call a support line\nand be treated as someone bringing important news.  The customer\nsupport people liked it because it meant they could help the users,\ninstead of reading scripts to them.  And the programmers liked it\nbecause they could reproduce bugs instead of just hearing vague\nsecond-hand reports about them.Our policy of fixing bugs on the fly changed the relationship\nbetween customer support people and hackers.  At most software\ncompanies, support people are underpaid human shields, and hackers\nare little copies of God the Father, creators of the world.  Whatever\nthe procedure for reporting bugs, it is likely to be one-directional:\nsupport people who hear about bugs fill out some form that eventually\ngets passed on (possibly via QA) to programmers, who put it on\ntheir list of things to do.  It was very different at Viaweb.\nWithin a minute of hearing about a bug from a customer, the support\npeople could be standing next to a programmer hearing him say \"Shit,\nyou're right, it's a bug.\" It delighted the support people to hear\nthat \"you're right\" from the hackers.  They used to bring us bugs\nwith the same expectant air as a cat bringing you a mouse it has\njust killed.   It also made them more careful in judging the\nseriousness of a bug, because now their honor was on the line.After we were bought by Yahoo, the customer support people were\nmoved far away from the programmers.  It was only then that we\nrealized that they were effectively QA and to some extent marketing\nas well.  In addition to catching bugs, they were the keepers of\nthe knowledge of vaguer, buglike things, like features that confused\nusers. [6]  They were also a kind of proxy focus group; we could\nask them which of two new features users wanted more, and they were\nalways right.MoraleBeing able to release software immediately is a big motivator.\nOften as I was walking to work I would think of some change I wanted\nto make to the software, and do it that day.  This worked for bigger\nfeatures as well.  Even if something was going to take two weeks\nto write (few projects took longer), I knew I could see the effect\nin the software as soon as it was done.If I'd had to wait a year for the next release, I would have shelved\nmost of these ideas, for a while at least.  The thing about ideas,\nthough, is that they lead to more ideas.  Have you ever noticed\nthat when you sit down to write something, half the ideas that end\nup in it are ones you thought of while writing it?  The same thing\nhappens with software.  Working to implement one idea gives you\nmore ideas.  So shelving an idea costs you not only that delay in\nimplementing it, but also all the ideas that implementing it would\nhave led to.  In fact, shelving an idea probably even inhibits new\nideas: as you start to think of some new feature, you catch sight\nof the shelf and think \"but I already have a lot of new things I\nwant to do for the next release.\"What big companies do instead of implementing features is plan\nthem.  At Viaweb we sometimes ran into trouble on this account.\nInvestors and analysts would ask us what we had planned for the\nfuture.  The truthful answer would have been, we didn't have any\nplans.  We had general ideas about things we wanted to improve,\nbut if we knew how we would have done it already.  What were we\ngoing to do in the next six months? Whatever looked like the biggest\nwin.  I don't know if I ever dared give this answer, but that was\nthe truth.  Plans are just another word for ideas on the shelf.\nWhen we thought of good ideas, we implemented them.At Viaweb, as at many software companies, most code had one definite\nowner.  But when you owned something you really owned it: no one\nexcept the owner of a piece of software had to approve (or even\nknow about) a release.  There was no protection against breakage\nexcept the fear of looking like an idiot to one's peers, and that\nwas more than enough.  I may have given the impression that we just\nblithely plowed forward writing code.  We did go fast, but we\nthought very carefully before we released software onto those\nservers.  And paying attention is more important to reliability\nthan moving slowly.  Because he pays close attention, a Navy pilot\ncan land a 40,000 lb. aircraft at 140 miles per hour on a pitching\ncarrier deck, at night, more safely than the average teenager can\ncut a bagel.This way of writing software is a double-edged sword of course.\nIt works a lot better for a small team of good, trusted programmers\nthan it would for a big company of mediocre ones, where bad ideas\nare caught by committees instead of the people that had them.Brooks in ReverseFortunately, Web-based software does require fewer programmers.\nI once worked for a medium-sized desktop software company that had\nover 100 people working in engineering as a whole.  Only 13 of\nthese were in product development.  All the rest were working on\nreleases, ports, and so on.  With Web-based software, all you need\n(at most) are the 13 people, because there are no releases, ports,\nand so on.Viaweb was written by just three people. [7]  I was always under\npressure to hire more, because we wanted to get bought, and we knew\nthat buyers would have a hard time paying a high price for a company\nwith only three programmers.  (Solution:  we hired more, but created\nnew projects for them.)When you can write software with fewer programmers, it saves you\nmore than money.  As Fred Brooks pointed out in The Mythical\nMan-Month, adding people to a project tends to slow it down.  The\nnumber of possible connections between developers grows exponentially\nwith the size of the group.  The larger the group, the more time\nthey'll spend in meetings negotiating how their software will work\ntogether, and the more bugs they'll get from unforeseen interactions.\nFortunately, this process also works in reverse: as groups get\nsmaller, software development gets exponentially more efficient.\nI can't remember the programmers at Viaweb ever having an actual\nmeeting.  We never had more to say at any one time than we could\nsay as we were walking to lunch.If there is a downside here, it is that all the programmers have\nto be to some degree system administrators as well.  When you're\nhosting software, someone has to be watching the servers, and in\npractice the only people who can do this properly are the ones who\nwrote the software.  At Viaweb our system had so many components\nand changed so frequently that there was no definite border between\nsoftware and infrastructure.  Arbitrarily declaring such a border\nwould have constrained our design choices.  And so although we were\nconstantly hoping that one day (\"in a couple months\") everything\nwould be stable enough that we could hire someone whose job was\njust to worry about the servers, it never happened.I don't think it could be any other way, as long as you're still\nactively developing the product.  Web-based software is never going\nto be something you write, check in, and go home.  It's a live\nthing, running on your servers right now.  A bad bug might not just\ncrash one user's process; it could crash them all.  If a bug in\nyour code corrupts some data on disk, you have to fix it.  And so\non.  We found that you don't have to watch the servers every minute\n(after the first year or so), but you definitely want to keep an\neye on things you've changed recently.  You don't release code late\nat night and then go home.Watching UsersWith server-based software, you're in closer touch with your code.\nYou can also be in closer touch with your users.  Intuit is famous\nfor introducing themselves to customers at retail stores and asking\nto follow them home.  If you've ever watched someone use your\nsoftware for the first time, you know what surprises must have\nawaited them.Software should do what users think it will.  But you can't have\nany idea what users will be thinking, believe me, until you watch\nthem.  And server-based software gives you unprecedented information\nabout their behavior.  You're not limited to small, artificial\nfocus groups.  You can see every click made by every user.  You\nhave to consider carefully what you're going to look at, because\nyou don't want to violate users' privacy, but even the most general\nstatistical sampling can be very useful.When you have the users on your server, you don't have to rely on\nbenchmarks, for example.  Benchmarks are simulated users.  With\nserver-based software, you can watch actual users.  To decide what\nto optimize, just log into a server and see what's consuming all\nthe CPU.  And you know when to stop optimizing too: we eventually\ngot the Viaweb editor to the point where it was memory-bound rather\nthan CPU-bound, and since there was nothing we could do to decrease\nthe size of users' data (well, nothing easy), we knew we might as\nwell stop there.Efficiency matters for server-based software, because you're paying\nfor the hardware.  The number of users you can support per server\nis the divisor of your capital cost, so if you can make your software\nvery efficient you can undersell competitors and still make a\nprofit.  At Viaweb we got the capital cost per user down to about\n$5.  It would be less now, probably less than the cost of sending\nthem the first month's bill.  Hardware is free now, if your software\nis reasonably efficient.Watching users can guide you in design as well as optimization.\nViaweb had a scripting language called RTML that let advanced users\ndefine their own page styles.  We found that RTML became a kind of\nsuggestion box, because users only used it when the predefined page\nstyles couldn't do what they wanted.  Originally the editor put\nbutton bars across the page, for example, but after a number of\nusers used RTML to put buttons down the left\nside,\nwe made that an\noption (in fact the default) in the predefined page styles.Finally, by watching users you can often tell when they're in\ntrouble.  And since the customer is always right, that's a sign of\nsomething you need to fix.  At Viaweb the key to getting users was\nthe online test drive.  It was not just a series of slides built\nby marketing people.  In our test drive, users actually used the\nsoftware.  It took about five minutes, and at the end of it they\nhad built a real, working store.\nThe test drive was the way we got nearly all our new users.  I\nthink it will be the same for most Web-based applications.   If\nusers can get through a test drive successfully, they'll like the\nproduct.  If they get confused or bored, they won't.  So anything\nwe could do to get more people through the test drive would increase\nour growth rate.I studied click trails of people taking the test drive and found\nthat at a certain step they would get confused and click on the\nbrowser's Back button.  (If you try writing Web-based applications,\nyou'll find that the Back button becomes one of your most interesting\nphilosophical problems.) So I added a message at that point, telling\nusers that they were nearly finished, and reminding them not to\nclick on the Back button.  Another great thing about Web-based\nsoftware is that you get instant feedback from changes:  the number\nof people completing the test drive rose immediately from 60% to\n90%.  And since the number of new users was a function of the number\nof completed test drives, our revenue growth increased by 50%, just\nfrom that change.MoneyIn the early 1990s I read an article in which someone said that\nsoftware was a subscription business.  At first this seemed a very\ncynical statement.  But later I realized that it reflects reality:\nsoftware development is an ongoing process.  I think it's cleaner\nif you openly charge subscription fees, instead of forcing people\nto keep buying and installing new versions so that they'll keep\npaying you.  And fortunately, subscriptions are the natural way to\nbill for Web-based applications.Hosting applications is an area where companies will play a role\nthat is not likely to be filled by freeware.  Hosting applications\nis a lot of stress, and has real expenses.  No one is going to want\nto do it for free.For companies, Web-based applications are an ideal source of revenue.\nInstead of starting each quarter with a blank slate, you have a\nrecurring revenue stream.  Because your software evolves gradually,\nyou don't have to worry that a new model will flop; there never\nneed be a new model, per se, and if you do something to the software\nthat users hate, you'll know right away.  You have no trouble with\nuncollectable bills; if someone won't pay you can just turn off\nthe service.  And there is no possibility of piracy.That last \"advantage\" may turn out to be a problem.  Some amount\nof piracy is to the advantage of software companies.  If some user\nreally would not have bought your software at any price, you haven't\nlost anything if he uses a pirated copy.  In fact you gain, because\nhe is one more user helping to make your software the standard--\nor who might buy a copy later, when he graduates from high school.When they can, companies like to do something called price\ndiscrimination, which means charging each customer as much as they\ncan afford. [8] Software is particularly suitable for price\ndiscrimination, because the marginal cost is close to zero.  This\nis why some software costs more to run on Suns than on Intel boxes:\na company that uses Suns is not interested in saving money and can\nsafely be charged more.  Piracy is effectively the lowest tier of\nprice discrimination.  I think that software companies understand\nthis and deliberately turn a blind eye to some kinds of piracy. [9]\nWith server-based software they are going to have to come up with\nsome other solution.Web-based software sells well, especially in comparison to desktop\nsoftware, because it's easy to buy.  You might think that people\ndecide to buy something, and then buy it, as two separate steps.\nThat's what I thought before Viaweb, to the extent I thought about\nthe question at all.  In fact the second step can propagate back\ninto the first: if something is hard to buy, people will change\ntheir mind about whether they wanted it.  And vice versa: you'll\nsell more of something when it's easy to buy.  I buy more books\nbecause Amazon exists.  Web-based software is just about the easiest\nthing in the world to buy, especially if you have just done an\nonline demo.  Users should not have to do much more than enter a\ncredit card number.  (Make them do more at your peril.)Sometimes Web-based software is offered through ISPs acting as\nresellers.  This is a bad idea.  You have to be administering the\nservers, because you need to be constantly improving both hardware\nand software.  If you give up direct control of the servers, you\ngive up most of the advantages of developing Web-based applications.Several of our competitors shot themselves in the foot this way--\nusually, I think, because they were overrun by suits who were\nexcited about this huge potential channel, and didn't realize that\nit would ruin the product they hoped to sell through it.  Selling\nWeb-based software through ISPs is like selling sushi through\nvending machines.CustomersWho will the customers be?  At Viaweb they were initially individuals\nand smaller companies, and I think this will be the rule with\nWeb-based applications.  These are the users who are ready to try\nnew things, partly because they're more flexible, and partly because\nthey want the lower costs of new technology.Web-based applications will often be the best thing for big companies\ntoo (though they'll be slow to realize it).  The best intranet is\nthe Internet.  If a company uses true Web-based applications, the\nsoftware will work better, the servers will be better administered,\nand employees will have access to the system from anywhere.The argument against this approach usually hinges on security: if\naccess is easier for employees, it will be for bad guys too.  Some\nlarger merchants were reluctant to use Viaweb because they thought\ncustomers' credit card information would be safer on their own\nservers.  It was not easy to make this point diplomatically, but\nin fact the data was almost certainly safer in our hands than\ntheirs.  Who can hire better people to manage security, a technology\nstartup whose whole business is running servers, or a clothing\nretailer?  Not only did we have better people worrying about\nsecurity, we worried more about it.  If someone broke into the\nclothing retailer's servers, it would affect at most one merchant,\ncould probably be hushed up, and in the worst case might get one\nperson fired.  If someone broke into ours, it could affect thousands\nof merchants, would probably end up as news on CNet, and could put\nus out of business.If you want to keep your money safe, do you keep it under your\nmattress at home, or put it in a bank? This argument applies to\nevery aspect of server administration:  not just security, but\nuptime, bandwidth, load management, backups, etc.  Our existence\ndepended on doing these things right.  Server problems were the\nbig no-no for us, like a dangerous toy would be for a toy maker,\nor a salmonella outbreak for a food processor.A big company that uses Web-based applications is to that extent\noutsourcing IT.  Drastic as it sounds, I think this is generally\na good idea.  Companies are likely to get better service this way\nthan they would from in-house system administrators.  System\nadministrators can become cranky and unresponsive because they're\nnot directly exposed to competitive pressure:  a salesman has to\ndeal with customers, and a developer has to deal with competitors'\nsoftware, but a system administrator, like an old bachelor, has\nfew external forces to keep him in line. [10]  At Viaweb we had\nexternal forces in plenty to keep us in line. The people calling\nus were customers, not just co-workers.  If a server got wedged,\nwe jumped; just thinking about it gives me a jolt of adrenaline,\nyears later.So Web-based applications will ordinarily be the right answer for\nbig companies too.  They will be the last to realize it, however,\njust as they were with desktop computers.  And partly for the same\nreason: it will be worth a lot of money to convince big companies\nthat they need something more expensive.There is always a tendency for rich customers to buy expensive\nsolutions, even when cheap solutions are better, because the people\noffering expensive solutions can spend more to sell them.  At Viaweb\nwe were always up against this.  We lost several high-end merchants\nto Web consulting firms who convinced them they'd be better off if\nthey paid half a million dollars for a custom-made online store on\ntheir own server.  They were, as a rule, not better off, as more\nthan one discovered when Christmas shopping season came around and\nloads rose on their server.  Viaweb was a lot more sophisticated\nthan what most of these merchants got, but we couldn't afford to\ntell them.  At $300 a month, we couldn't afford to send a team of\nwell-dressed and authoritative-sounding people to make presentations\nto customers.A large part of what big companies pay extra for is the cost of\nselling expensive things to them.  (If the Defense Department pays\na thousand dollars for toilet seats, it's partly because it costs\na lot to sell toilet seats for a thousand dollars.)  And this is\none reason intranet software will continue to thrive, even though\nit is probably a bad idea.  It's simply more expensive.  There is\nnothing you can do about this conundrum, so the best plan is to go\nfor the smaller customers first.  The rest will come in time.Son of ServerRunning software on the server is nothing new.  In fact it's the\nold model: mainframe applications are all server-based.  If\nserver-based software is such a good idea, why did it lose last\ntime?  Why did desktop computers eclipse mainframes?At first desktop computers didn't look like much of a threat.  The\nfirst users were all hackers-- or hobbyists, as they were called\nthen.  They liked microcomputers because they were cheap.  For the\nfirst time, you could have your own computer.  The phrase \"personal\ncomputer\" is part of the language now, but when it was first used\nit had a deliberately audacious sound, like the phrase \"personal\nsatellite\" would today.Why did desktop computers take over? I think it was because they\nhad better software.  And I think the reason microcomputer software\nwas better was that it could be written by small companies.I don't think many people realize how fragile and tentative startups\nare in the earliest stage.  Many startups begin almost by accident--\nas a couple guys, either with day jobs or in school, writing a\nprototype of something that might, if it looks promising, turn into\na company. At this larval stage, any significant obstacle will stop\nthe startup dead in its tracks.  Writing mainframe software required\ntoo much commitment up front.  Development machines were expensive,\nand because the customers would be big companies, you'd need an\nimpressive-looking sales force to sell it to them.  Starting a\nstartup to write mainframe software would be a much more serious\nundertaking than just hacking something together on your Apple II\nin the evenings.  And so you didn't get a lot of startups writing\nmainframe applications.The arrival of desktop computers inspired a lot of new software,\nbecause writing applications for them seemed an attainable goal to\nlarval startups.  Development was cheap, and the customers would\nbe individual people that you could reach through computer stores\nor even by mail-order.The application that pushed desktop computers out into the mainstream\nwas VisiCalc, the\nfirst spreadsheet.  It was written by two guys\nworking in an attic, and yet did things no mainframe software could\ndo. [11]  VisiCalc was such an advance, in its time, that people\nbought Apple IIs just to run it.  And this was the beginning of a\ntrend: desktop computers won because startups wrote software for\nthem.It looks as if server-based software will be good this time around,\nbecause startups will write it.  Computers are so cheap now that\nyou can get started, as we did, using a desktop computer as a\nserver.  Inexpensive processors have eaten the workstation market\n(you rarely even hear the word now) and are most of the way through\nthe server market; Yahoo's servers, which deal with loads as high\nas any on the Internet, all have the same inexpensive Intel processors\nthat you have in your desktop machine.  And once you've written\nthe software, all you need to sell it is a Web site.  Nearly all\nour users came direct to our site through word of mouth and references\nin the press. [12]Viaweb was a typical larval startup.  We were terrified of starting\na company, and for the first few months comforted ourselves by\ntreating the whole thing as an experiment that we might call off\nat any moment.  Fortunately, there were few obstacles except\ntechnical ones.  While we were writing the software, our Web server\nwas the same desktop machine we used for development, connected to\nthe outside world by a dialup line.  Our only expenses in that\nphase were food and rent.There is all the more reason for startups to write Web-based software\nnow, because writing desktop software has become a lot less fun.\nIf you want to write desktop software now you do it on Microsoft's\nterms, calling their APIs and working around their buggy OS.  And\nif you manage to write something that takes off, you may find that\nyou were merely doing market research for Microsoft.If a company wants to make a platform that startups will build on,\nthey have to make it something that hackers themselves will want\nto use.   That means it has to be inexpensive and well-designed.\nThe Mac was popular with hackers when it first came out, and a lot\nof them wrote software for it. [13] You see this less with Windows,\nbecause hackers don't use it.  The kind of people who are good at\nwriting software tend to be running Linux or FreeBSD now.I don't think we would have started a startup to write desktop\nsoftware, because desktop software has to run on Windows, and before\nwe could write software for Windows we'd have to use it.  The Web\nlet us do an end-run around Windows, and deliver software running\non Unix direct to users through the browser.  That is a liberating\nprospect, a lot like the arrival of PCs twenty-five years ago.MicrosoftBack when desktop computers arrived, IBM was the giant that everyone\nwas afraid of.  It's hard to imagine now, but I remember the feeling\nvery well.  Now the frightening giant is Microsoft, and I don't\nthink they are as blind to the threat facing them as IBM was.\nAfter all, Microsoft deliberately built their business in IBM's\nblind spot.I mentioned earlier that my mother doesn't really need a desktop\ncomputer.  Most users probably don't.  That's a problem for Microsoft,\nand they know it.  If applications run on remote servers, no one\nneeds Windows.  What will Microsoft do?  Will they be able to use\ntheir control of the desktop to prevent, or constrain, this new\ngeneration of software?My guess is that Microsoft will develop some kind of server/desktop\nhybrid, where the operating system works together with servers they\ncontrol.  At a minimum, files will be centrally available for users\nwho want that.  I don't expect Microsoft to go all the way to the\nextreme of doing the computations on the server, with only a browser\nfor a client, if they can avoid it. If you only need a browser for\na client, you don't need Microsoft on the client, and if Microsoft\ndoesn't control the client, they can't push users towards their\nserver-based applications.I think Microsoft will have a hard time keeping the genie in the\nbottle.  There will be too many different types of clients for them\nto control them all.  And if Microsoft's applications only work\nwith some clients, competitors will be able to trump them by offering\napplications that work from any client. [14]In a world of Web-based applications, there is no automatic place\nfor Microsoft.  They may succeed in making themselves a place, but\nI don't think they'll dominate this new world as they did the world\nof desktop applications.It's not so much that a competitor will trip them up as that they\nwill trip over themselves.  With the rise of Web-based software,\nthey will be facing not just technical problems but their own\nwishful thinking.  What they need to do is cannibalize their existing\nbusiness, and I can't see them facing that.  The same single-mindedness\nthat has brought them this far will now be working against them.\nIBM was in exactly the same situation, and they could not master\nit.  IBM made a late and half-hearted entry into the microcomputer\nbusiness because they were ambivalent about threatening their cash\ncow, mainframe computing.  Microsoft will likewise be hampered by\nwanting to save the desktop.  A cash cow can be a damned heavy\nmonkey on your back.I'm not saying that no one will dominate server-based applications.\nSomeone probably will eventually.  But I think that there will be\na good long period of cheerful chaos, just as there was in the\nearly days of microcomputers.  That was a good time for startups.\nLots of small companies flourished, and did it by making cool\nthings.Startups but More SoThe classic startup is fast and informal, with few people and little\nmoney.  Those few people work very hard, and technology magnifies\nthe effect of the decisions they make.  If they win, they win big.In a startup writing Web-based applications, everything you associate\nwith startups is taken to an extreme.  You can write and launch a\nproduct with even fewer people and even less money.  You have to\nbe even faster, and you can get away with being more informal.\nYou can literally launch your product as three guys sitting in the\nliving room of an apartment, and a server collocated at an ISP.\nWe did.Over time the teams have gotten smaller, faster, and more informal.\nIn 1960, software development meant a roomful of men with horn\nrimmed glasses and narrow black neckties, industriously writing\nten lines of code a day on IBM coding forms.  In 1980, it was a\nteam of eight to ten people wearing jeans to the office and typing\ninto vt100s.  Now it's a couple of guys sitting in a living room\nwith laptops.  (And jeans turn out not to be the last word in\ninformality.)Startups are stressful, and this, unfortunately, is also taken to\nan extreme with Web-based applications.\nMany software companies, especially at the beginning, have periods\nwhere the developers slept under their desks and so on.  The alarming\nthing about Web-based software is that there is nothing to prevent\nthis becoming the default.  The stories about sleeping under desks\nusually end:  then at last we shipped it and we all went home and\nslept for a week.  Web-based software never ships.  You can work\n16-hour days for as long as you want to.  And because you can, and\nyour competitors can, you tend to be forced to.  You can, so you\nmust.  It's Parkinson's Law running in reverse.The worst thing is not the hours but the responsibility.  Programmers\nand system administrators traditionally each have their own separate\nworries.  Programmers have to worry about bugs, and system\nadministrators have to worry about infrastructure.  Programmers\nmay spend a long day up to their elbows in source code, but at some\npoint they get to go home and forget about it.  System administrators\nnever quite leave the job behind, but when they do get paged at\n4:00 AM, they don't usually have to do anything very complicated.\nWith Web-based applications, these two kinds of stress get combined.\nThe programmers become system administrators, but without the\nsharply defined limits that ordinarily make the job bearable.At Viaweb we spent the first six months just writing software.  We\nworked the usual long hours of an early startup.  In a desktop\nsoftware company, this would have been the part where we were\nworking hard, but it felt like a vacation compared to the next\nphase, when we took users onto our server.  The second biggest\nbenefit of selling Viaweb to Yahoo (after the money) was to be able\nto dump ultimate responsibility for the whole thing onto the\nshoulders of a big company.Desktop software forces users to become system administrators.\nWeb-based software forces programmers to.  There is less stress in\ntotal, but more for the programmers.  That's not necessarily bad\nnews.  If you're a startup competing with a big company, it's good\nnews. [15]  Web-based applications offer a straightforward way to\noutwork your competitors.  No startup asks for more.Just Good EnoughOne thing that might deter you from writing Web-based applications\nis the lameness of Web pages as a UI.  That is a problem, I admit.\nThere were a few things we would have really liked to add to\nHTML and HTTP.  What matters, though, is that Web pages are just\ngood enough.There is a parallel here with the first microcomputers.  The\nprocessors in those machines weren't actually intended to be the\nCPUs of computers.  They were designed to be used in things like\ntraffic lights.  But guys like Ed Roberts, who designed the\nAltair,\nrealized that they were just good enough.  You could combine one\nof these chips with some memory (256 bytes in the first Altair),\nand front panel switches, and you'd have a working computer.  Being\nable to have your own computer was so exciting that there were\nplenty of people who wanted to buy them, however limited.Web pages weren't designed to be a UI for applications, but they're\njust good enough.  And for a significant number of users, software\nthat you can use from any browser will be enough of a win in itself\nto outweigh any awkwardness in the UI.  Maybe you can't write the\nbest-looking spreadsheet using HTML, but you can write a spreadsheet\nthat several people can use simultaneously from different locations\nwithout special client software, or that can incorporate live data\nfeeds, or that can page you when certain conditions are triggered.\nMore importantly, you can write new kinds of applications that\ndon't even have names yet.  VisiCalc was not merely a microcomputer\nversion of a mainframe application, after all-- it was a new type\nof application.Of course, server-based applications don't have to be Web-based.\nYou could have some other kind of client.  But I'm pretty sure\nthat's a bad idea.  It would be very convenient if you could assume\nthat everyone would install your client-- so convenient that you\ncould easily convince yourself that they all would-- but if they\ndon't, you're hosed.  Because Web-based software assumes nothing\nabout the client, it will work anywhere the Web works.  That's a\nbig advantage already, and the advantage will grow as new Web\ndevices proliferate.  Users will like you because your software\njust works, and your life will be easier because you won't have to\ntweak it for every new client.   [16]I feel like I've watched the evolution of the Web as closely as\nanyone, and I can't predict what's going to happen with clients.\nConvergence is probably coming, but where?  I can't pick a winner.\nOne thing I can predict is conflict between AOL and Microsoft.\nWhatever Microsoft's .NET turns out to be, it will probably involve\nconnecting the desktop to servers.  Unless AOL fights back, they\nwill either be pushed aside or turned into a pipe between Microsoft\nclient and server software.  If Microsoft and AOL get into a client\nwar, the only thing sure to work on both will be browsing the Web,\nmeaning Web-based applications will be the only kind that work\neverywhere.How will it all play out?  I don't know.  And you don't have to\nknow if you bet on Web-based applications.  No one can break that\nwithout breaking browsing.  The Web may not be the only way to\ndeliver software, but it's one that works now and will continue to\nwork for a long time.  Web-based applications are cheap to develop,\nand easy for even the smallest startup to deliver.  They're a lot\nof work, and of a particularly stressful kind, but that only makes\nthe odds better for startups.Why Not?E. B. White was amused to learn from a farmer friend that many\nelectrified fences don't have any current running through them.\nThe cows apparently learn to stay away from them, and after that\nyou don't need the current.  \"Rise up, cows!\" he wrote, \"Take your\nliberty while despots snore!\"If you're a hacker who has thought of one day starting a startup,\nthere are probably two things keeping you from doing it.  One is\nthat you don't know anything about business.  The other is that\nyou're afraid of competition.  Neither of these fences have any\ncurrent in them.There are only two things you have to know about business:  build\nsomething users love, and make more than you spend.  If you get\nthese two right, you'll be ahead of most startups.  You can figure\nout the rest as you go.You may not at first make more than you spend, but as long as the\ngap is closing fast enough you'll be ok.  If you start out underfunded,\nit will at least encourage a habit of frugality.  The less you\nspend, the easier it is to make more than you spend.  Fortunately,\nit can be very cheap to launch a Web-based application.  We launched\non under $10,000, and it would be even cheaper today.  We had to\nspend thousands on a server, and thousands more to get SSL.  (The\nonly company selling SSL software at the time was Netscape.)  Now\nyou can rent a much more powerful server, with SSL included, for\nless than we paid for bandwidth alone.  You could launch a Web-based\napplication now for less than the cost of a fancy office chair.As for building something users love, here are some general tips.\nStart by making something clean and simple that you would want to\nuse yourself.  Get a version 1.0 out fast, then continue to improve\nthe software, listening closely to the users as you do.  The customer\nis always right, but different customers are right about different\nthings; the least sophisticated users show you what you need to\nsimplify and clarify, and the most sophisticated tell you what\nfeatures you need to add. The best thing software can be is easy,\nbut the way to do this is to get the defaults right, not to limit\nusers' choices.  Don't get complacent if your competitors' software\nis lame; the standard to compare your software to is what it could\nbe, not what your current competitors happen to have.  Use your\nsoftware yourself, all the time.  Viaweb was supposed to be an\nonline store builder, but we used it to make our own site too.\nDon't listen to marketing people or designers or product managers\njust because of their job titles.  If they have good ideas, use\nthem, but it's up to you to decide; software has to be designed by\nhackers who understand design, not designers who know a little\nabout software.  If you can't design software as well as implement\nit, don't start a startup.Now let's talk about competition.  What you're afraid of is not\npresumably groups of hackers like you, but actual companies, with\noffices and business plans and salesmen and so on, right?  Well,\nthey are more afraid of you than you are of them, and they're right.\nIt's a lot easier for a couple of hackers to figure out how to rent\noffice space or hire sales people than it is for a company of any\nsize to get software written.  I've been on both sides, and I know.\nWhen Viaweb was bought by Yahoo, I suddenly found myself working\nfor a big company, and it was like trying to run through waist-deep\nwater.I don't mean to disparage Yahoo.  They had some good hackers, and\nthe top management were real butt-kickers.  For a big company, they\nwere exceptional.  But they were still only about a tenth as\nproductive as a small startup.  No big company can do much better\nthan that.  What's scary about Microsoft is that a company so\nbig can develop software at all.  They're like a mountain that\ncan walk.Don't be intimidated.  You can do as much that Microsoft can't as\nthey can do that you can't.  And no one can stop you.  You don't\nhave to ask anyone's permission to develop Web-based applications.\nYou don't have to do licensing deals, or get shelf space in retail\nstores, or grovel to have your application bundled with the OS.\nYou can deliver software right to the browser, and no one can get\nbetween you and potential users without preventing them from browsing\nthe Web.You may not believe it, but I promise you, Microsoft is scared of\nyou.  The complacent middle managers may not be, but Bill is,\nbecause he was you once, back in 1975, the last time a new way of\ndelivering software appeared.Notes[1] Realizing that much of the money is in the services, companies\nbuilding lightweight clients have usually tried to combine the\nhardware with an\nonline service.\nThis approach has not worked\nwell, partly because you need two different kinds of companies to\nbuild consumer electronics and to run an online service, and partly\nbecause users hate the idea.  Giving away the razor and making\nmoney on the blades may work for Gillette, but a razor is much\nsmaller commitment than a Web terminal.  Cell phone handset makers\nare satisfied to sell hardware without trying to capture the service\nrevenue as well.  That should probably be the model for Internet\nclients too.  If someone just sold a nice-looking little box with\na Web browser that you could use to connect through any ISP, every\ntechnophobe in the country would buy one.[2] Security always depends more on not screwing up than any design\ndecision, but the nature of server-based software will make developers\npay more attention to not screwing up.  Compromising a server could\ncause such damage that ASPs (that want to stay in business) are\nlikely to be careful about security.[3] In 1995, when we started Viaweb, Java applets were supposed to\nbe the technology everyone was going to use to develop server-based\napplications.  Applets seemed to us an old-fashioned idea.  Download\nprograms to run on the client? Simpler just to go all the way and\nrun the programs on the server.  We wasted little time\non applets, but countless other startups must have been lured into\nthis tar pit.  Few can have escaped alive, or Microsoft could not\nhave gotten away with dropping Java in the most recent version of\nExplorer.[4] This point is due to Trevor Blackwell, who adds \"the cost of\nwriting software goes up more than linearly with its size.  Perhaps\nthis is mainly due to fixing old bugs, and the cost can be more\nlinear if all bugs are found quickly.\"[5] The hardest kind of bug to find may be a variant of compound\nbug where one bug happens to compensate for another.  When you fix\none bug, the other becomes visible.  But it will seem as if the\nfix is at fault, since that was the last thing you changed.[6] Within Viaweb we once had a contest to describe the worst thing\nabout our software.  Two customer support people tied for first\nprize with entries I still shiver to recall.  We fixed both problems\nimmediately.[7] Robert Morris wrote the ordering system, which shoppers used\nthe manager, which merchants used to retrieve orders, view statistics,\nand configure domain names etc.  I wrote the editor, which merchants\nused to build their sites.  The ordering system and image generator\nwere written in C and C++, the manager mostly in Perl, and the editor\nin Lisp.[8] Price discrimination is so pervasive (how often have you heard\na retailer claim that their buying power meant lower prices for\nyou?) that I was surprised to find it was outlawed in the U.S. by\nthe Robinson-Patman Act of 1936.  This law does not appear to be\nvigorously enforced.[9] In No Logo, Naomi Klein says that clothing brands favored by\n\"urban youth\" do not try too hard to prevent shoplifting because\nin their target market the shoplifters are also the fashion leaders.[10] Companies often wonder what to outsource and what not to.\nOne possible answer: outsource any job that's not directly exposed\nto competitive pressure, because outsourcing it will thereby expose\nit to competitive pressure.[11] The two guys were Dan Bricklin and Bob Frankston.  Dan wrote\na prototype in Basic in a couple days, then over the course of the\nnext year they worked together (mostly at night) to make a more\npowerful version written in 6502 machine language.  Dan was at\nHarvard Business School at the time and Bob nominally had a day\njob writing software.  \"There was no great risk in doing a business,\"\nBob wrote, \"If it failed it failed. No big deal.\"[12] It's not quite as easy as I make it sound.  It took a painfully\nlong time for word of mouth to get going, and we did not start to\nget a lot of press coverage until we hired a\nPR firm\n(admittedly\nthe best in the business) for $16,000 per month.  However, it was\ntrue that the only significant channel was our own Web site.[13] If the Mac was so great, why did it lose?  Cost, again.\nMicrosoft concentrated on the software business, and unleashed a\nswarm of cheap component suppliers on Apple hardware.  It did not\nhelp, either, that suits took over during a critical period.[14] One thing that would help Web-based applications, and help\nkeep the next generation of software from being overshadowed by\nMicrosoft, would be a good open-source browser.  Mozilla is\nopen-source but seems to have suffered from having been corporate\nsoftware for so long.  A small, fast browser that was actively\nmaintained would be a great thing in itself, and would probably\nalso encourage companies to build little Web appliances.Among other things, a proper open-source browser would cause HTTP\nand HTML to continue to evolve (as e.g. Perl has).  It would help\nWeb-based applications greatly to be able to distinguish between\nselecting a link and following it; all you'd need to do this would\nbe a trivial enhancement of HTTP, to allow multiple urls in a\nrequest.  Cascading menus would also be good.If you want to change the world, write a new Mosaic.  Think it's\ntoo late?  In 1998 a lot of people thought it was too late to launch\na new search engine, but Google proved them wrong.  There is always\nroom for something new if the current options suck enough.  Make\nsure it works on all the free OSes first-- new things start with\ntheir users.[15] Trevor Blackwell, who probably knows more about this from\npersonal experience than anyone, writes:\"I would go farther in saying that because server-based software\nis so hard on the programmers, it causes a fundamental economic\nshift away from large companies. It requires the kind of intensity\nand dedication from programmers that they will only be willing to\nprovide when it's their own company.  Software companies can hire\nskilled people to work in a not-too-demanding environment, and can\nhire unskilled people to endure hardships, but they can't hire\nhighly skilled people to bust their asses. Since capital is no\nlonger needed, big companies have little to bring to the table.\"[16] In the original version of this essay, I advised avoiding\nJavascript.  That was a good plan in 2001, but Javascript now works.\nThanks to Sarah Harlin, Trevor Blackwell, Robert Morris, Eric Raymond, Ken Anderson,\nand Dan Giffin for reading drafts of this paper; to Dan Bricklin and\nBob Frankston for information about VisiCalc; and again to Ken Anderson\nfor inviting me to speak at BBN."},{"title":"The Patent Pledge","text":"August 2011I realized recently that we may be able to solve part of the patent\nproblem without waiting for the government.I've never been 100% sure whether patents help or hinder technological\nprogress.  When I was a kid I thought they helped.  I thought they\nprotected inventors from having their ideas stolen by big companies.\nMaybe that was truer in the past, when more things were physical.\nBut regardless of whether patents are in general a good thing, there\ndo seem to be bad ways of using them.  And since bad uses of patents\nseem to be increasing, there is an increasing call for patent reform.The problem with patent reform is that it has to go through the\ngovernment.  That tends to be slow.  But recently I realized we can\nalso attack the problem downstream.  As well as pinching off the\nstream of patents at the point where they're issued, we may in some\ncases be able to pinch it off at the point where they're used.One way of using patents that clearly does not encourage innovation\nis when established companies with bad products use patents to\nsuppress small competitors with good products.  This is the type\nof abuse we may be able to decrease without having to go through\nthe government.The way to do it is to get the companies that are above pulling\nthis sort of trick to pledge publicly not to.  Then the ones that\nwon't make such a pledge will be very conspicuous.  Potential\nemployees won't want to work for them.  And investors, too, will\nbe able to see that they're the sort of company that competes by\nlitigation rather than by making good products.Here's the pledge:\nNo first use of software patents against companies with less\nthan 25 people.\nI've deliberately traded precision for brevity.  The patent pledge\nis not legally binding.  It's like Google's \"Don't be evil.\" They\ndon't define what evil is, but by publicly saying that, they're\nsaying they're willing to be held to a standard that, say, Altria\nis not.  And though constraining, \"Don't be evil\" has been good for\nGoogle. Technology companies win by attracting the most productive\npeople, and the most productive people are attracted to employers\nwho hold themselves to a higher standard than the law requires.\n[1]The patent pledge is in effect a narrower but open source \"Don't\nbe evil.\"  I encourage every technology company to adopt it.  If\nyou want to help fix patents, encourage your employer to.Already most technology companies wouldn't sink to using patents\non startups.  You don't see Google or Facebook suing startups for\npatent infringement. They don't need to.  So for the better technology\ncompanies, the patent pledge requires no change in behavior.  They're\njust promising to do what they'd do anyway.  And when all the\ncompanies that won't use patents on startups have said so, the\nholdouts will be very conspicuous.The patent pledge doesn't fix every problem with patents.  It won't\nstop patent trolls, for example; they're already pariahs.  But the\nproblem the patent pledge does fix may be more serious than the\nproblem of patent trolls.  Patent trolls are just parasites.  A\nclumsy parasite may occasionally kill the host, but that's not its\ngoal.  Whereas companies that sue startups for patent infringement\ngenerally do it with explicit goal of keeping their product off the\nmarket.Companies that use patents on startups are attacking innovation at\nthe root.  Now there's something any individual can do about this\nproblem, without waiting for the government: ask companies where\nthey stand.Patent Pledge SiteNotes:[1]\nBecause the pledge is deliberately vague, we're going to need\ncommon sense when intepreting it.  And even more vice versa: the\npledge is vague in order to make people use common sense when\ninterpreting it.So for example I've deliberately avoided saying whether the 25\npeople have to be employees, or whether contractors count too.  If\na company has to split hairs that fine about whether a suit would\nviolate the patent pledge, it's probably still a dick move."},{"title":"The Perils of Obedience","text":"Obedience is as basic an element in the structure of social life as one can point to. Some system of authority is a requirement of all communal living, and it is only the person dwelling in isolation who is not forced to respond, with defiance or submission, to the commands of others. For many people, obedience is a deeply ingrained behavior tendency, indeed a potent impulse overriding training in ethics, sympathy, and moral conduct.The dilemma inherent in submission to authority is ancient, as old as the story of Abraham, and the question of whether one should obey when commands conflict with conscience has been argued by Plato, dramatized in Antigone, and treated to philosophic analysis in almost every historical epoch. Conservative philosophers argue that the very fabric of society is threatened by disobedience, while humanists stress the primacy of the individual conscience.The legal and philosophic aspects of obedience are of enormous import, but they say very little about how most people behave in concrete situations. I set up a simple experiment at Yale University to test how much pain an ordinary citizen would inflict on another person simply because he was ordered to by an experimental scientist. Stark authority was pitted against the subjects' strongest moral imperatives against hurting others, and, with the subjects' ears ringing with the screams of the victims, authority won more often than not. The extreme willingness of adults to go to almost any lengths on the command of an authority constitutes the chief finding of the study and the fact most urgently demanding explanation.In the basic experimental design, two people come to a psychology laboratory to take part in a study of memory and learning. One of them is designated as a \"teacher\" and the other a \"learner.\" The experimenter explains that the study is concerned with the effects of punishment on learning. The learner is conducted into a room, seated in a kind of miniature electric chair, his arms are strapped to prevent excessive movement, and an electrode is attached to his wrist. He is told that he will be read lists of simple word pairs, and that he will then be tested on his ability to remember the second word of a pair when he hears the first one again. whenever he makes an error, he will receive electric shocks of increasing intensity.The real focus of the experiment is the teacher. After watching the learner being strapped into place, he is seated before an impressive shock generator. The instrument panel consists of thirty lever switches set in a horizontal line. Each switch is clearly labeled with a voltage designation ranging from 15 to 450 volts.\nThe following designations are clearly indicated for groups of four switches. going from left to right: Slight Shock, Moderate Shock, Strong Shock, Very Strong Shock, Intense Shock, Extreme Intensity Shock, Danger: Severe Shock. (Two switches after this last designation are simply marked XXX.)When a switch is depressed, a pilot light corresponding to each switch is illuminated in bright red; an electric buzzing is heard; a blue light, labeled \"voltage energizer,\" flashes; the dial on the voltage meter swings to the right; and various relay clicks sound off.The upper left-hand corner of the generator is labeled SHOCK GENERATOR, TYPE ZLB. DYSON INSTRUMENT COMPANY, WALTHAM, MASS., OUTPUT 15 VOLTS -- 450 VOLTS.Each subject is given a sample 45 volt shock from the generator before his run as teacher, and the jolt strengthens his belief in the authenticity of the machine.The teacher is a genuinely naive subject who has come to the laboratory for the experiment. The learner, or victim, is actually an actor who receives no shock at all. The point of the experiment is to see how far a person will proceed in a concrete and measurable situation in which he is ordered to inflict increasing pain on a protesting victim.Conflict arises when the man receiving the shock begins to show that he is experiencing discomfort. At 75 volts, he grunts; at 120 volts, he complains loudly; at 150, he demands to be released from the experiment. As the voltage increases, his protests become more vehement and emotional. At 285 volts, his response can be described only as an agonized scream. Soon thereafter, he makes no sound at all.For the teacher, the situation quickly becomes one of gripping tension. It is not a game for him: conflict is intense obvious. The manifest suffering of the learner presses him to quit: but each time he hesitates to administer a shock, the experimenter orders him to continue. To extricate himself from this plight, the subject must make a clear break with authority.The subject, Gretchen Brandt, is an attractive thirty_one year old medical technician who works at the Yale Medical School. She had emigrated from Germany five years before.On several occasions when the learner complains, she turns to the experimenter coolly and inquires, \"Shall I continue? She promptly returns to her task when the experimenter asks her to do so. At the administration of 210 volts she turns to the experimenter, remarking firmly, \"Well, I'm sorry, I don't think we should continue.\"Experimenter: The experiment requires that you go on until he has learned all the word pairs correctly.Brandt: He has a heart condition, I'm sorry. He told you that before.Experimenter: The shocks may be painful but they're not dangerous.Brandt: Well, I'm sorry. I think when shocks continue like this they are dangerous. You ask him if he wants to get out. It's his free will.Experimenter: It is absolutely essential that we continue....Brandt: I'd like you to ask him. We came here of our free will. If he wants to continue I'll go ahead. He told you he had a heart condition. I'm sorry. I don't want to be responsible for anything happening to him. I wouldn't like it for me either.Experimenter: You have no other choice.Brandt: I think we are here on our own free will. I don't want to be responsible if anything happens to him. Please understand that.She refuses to go further And the experiment is terminated.The woman is firm and resolute throughout. She indicates in the interview that she was in no way tense or nervous, and this corresponds to her controlled appearance during the experiment. She feels that the last shock she administered to the learner was extremely painful and reiterates that she \"did not want to be responsible for any harm to him.\"The woman's straightforward, courteous behavior in the experiment, lack of tension, and total control of her own action seem to make disobedience a simple and rational deed. Her behavior is the very embodiment of what I envisioned would be true for almost all subjects.An unexpected outcomeBefore the experiments, I sought predictions about the outcome from various kinds of people -- psychiatrists, college sophomores, middle-class adults, graduate students and faculty in the behavioral sciences. With remarkable similarity, they predicted that virtually all the subjects would refuse to obey the experimenter. The psychiatrist, specifically, predicted that most subjects would not go beyond 150 volts, when the victim makes his first explicit demand to be freed. They expected that only 4 percent would reach 300 volts, and that only a pathological fringe of about one in a thousand would administer the highest shock on the board.These predictions were unequivocally wrong. Of the forty subjects in the first experiment, twenty-five obeyed the orders of the experimenter to the end, punishing the victim until they reached the most potent shock available on the generator. After 450 volts were administered three times, the experimenter called a halt to the session. Many obedient subjects then heaved sighs of relief, mopped their brows, rubbed their fingers over their eyes, or nervously fumbled cigarettes. Others displayed only minimal signs of tension from beginning to end.When the very first experiments were carried out, Yale undergraduates were used as subjects, and about 60 percent of them were fully obedient. A colleague of mine immediately dismissed these findings as having no relevance to \"ordinary\" people, asserting that Yale undergraduates are a highly aggressive, competitive bunch who step on each other's necks on the slightest provocation. He assured me that when \"ordinary\" people were tested, the results would be quite different As we moved from the pilot studies to the regular experimental series, people drawn from every stratum of New Haven life came to be employed in the experiment professionals, white_color workers, unemployed persons, and industrial workers. The experimental outcome was the same as we had observed among the students.Moreover, when the experiments were repeated in Princeton, Munich, Rome, South Africa, and Australia, the level of obedience was invariably somewhat higher than found in the investigation reported in this article. Thus one scientist in Munich found 85 percent of his subjects obedient.Fred Prozi's reactions, if more dramatic than most, illuminate the conflicts experienced by others in less visible form. About fifty years old and unemployed at the time of the experiment, he has a good-natured, if slightly dissolute, appearance, and he strikes people as a rather ordinary fellow. He begins the session calmly but becomes tense as it proceeds. After delivering the 180-volt shock, he pivots around in the chair and, shaking his head, addresses the experimenter in agitated tones:Prozi: I can't stand it I'm not going to kill that man in there. You hear him hollering?Experimenter: As I told you before, the shocks may be painful, but . . .Prozi: But he's hollering. He can't stand it. What's going to happen to him?Experimenter (his voice is patient, matter-of fact): The experiment requires that you continue, Teacher.Prozi: Aah, but, unh, I'm not going to get that man sick in there -- know what I mean?Experimenter: Whether the learner likes it or not, we must go on, through all the word pairs.Prozi: I refuse to take the responsibility. He's in there holleringExperimenter: It's absolutely essential that you continue, Prozi.Prozi (indicating the unused questions): There's too many left here, I mean, Jeez, if he gets them wrong, there's too many of them left. I mean, who's going to take the responsibility if anything happens to that gentleman?Experimenter: I'm responsible for anything that happens to him. Continue, please.Prozi: All right. (Consults list of words.) The next one's \"Slow -- walk, truck, dance, music\" Answer please. (A buzzing sound indicates the learner has signaled his answer.) Wrong. A hundred and ninety-five volts. \"Dance.\" (Zzumph!)Learner (yelling): Let me out of here My hearts bothering me (Teacher looks at experimenter.)Experimenter: Continue, please.Learner (screaming): Let me out of here! You have no right to keep me here! Let me out of here, my hearts bothering me, let me out!Prozi (shakes head, pats the table nervously): You see he's hollering. Hear that? Gee, I don't know.Experimenter: The experiment requires . . .Prozi (interrupting): I know it does sir, but I mean -- hunh! He doesn't know what he's getting in for. He's up to 195 volts! (Experiment continues, through 210 volts, 225 volts, 240 volts, 255 volts, 270 volts, at which point Prozi, with evident relief, runs out of word-pair questions.)Experimenter: You'll have to go back to the beginning of that page and go through them again until be's learned them all correctly.Prozi: Aw, no. I'm not going to kill that man. You mean I've got to keep going up with the scale? No sir. He's hollering in there. I'm not going to give him 450 volts.Experimenter: The experiment requires that you go on.Learner: Ohhh. I absolutely refuse to answer anymore. (Shouting urgently now.) Let me out of here! You can't hold me here! Get me out. Get-me-out-of-here!Experimenter: Continue. The next word is \"green,\" please.Prozi: \"Green -- Grass, hat, ink, apple.\" (Nothing happens. No answering buzz. Just gloomy silence.)Prozi: I don't think he is going to answer.Experimenter: If the learner doesn't answer in a reasonable time, about four or five seconds, consider the answer wrong. And follow the same procedures you have been doing for wrong answers. Say, \"Wrong,\" tell him the number of volts, give him the punishment, read him the correct answer. Continue, please.Prozi: \"Green -- grass, hat, ink, apple.\" Answer, please. (More silence. Subject just sits there.)Experimenter: Go on with the procedure, please.Prozi: Three hundred and fifteen volts. The answer is \"ink.\" (Zzumph!)Learner: Ohh. OoohhProzi: (relieved to hear a response). Next one . . .Learner: I absolutely refuse to answer.Prozi: You got to. You get a shock if you don't answer. (Experiment continues with learner refusing to answer, and, finally failing even to grunt or groan. At 375 volts, the subject stands up.)Prozi: I think something's happened to that fellow in there. I don't get no answer. He was hollering at less voltage. Can't you check in and see if he's all right, please?Experimenter (with same detached calm): Not once we've started. Please continue, Teacher.Prozi (sits down, sighs deeply): \"Cool day, shade, water, paint.\" Answer please. Are you all right in there? Are you all right,Experimenter: Please continue, Teacher. Continue, please. (Subject pushes lever. Zzumph!)Prozi (swiveling around in his chair): Something's happened to that man in there. (Swiveling back.) Next one. \"Low -- dollar, necklace, moon, paint.\" (Turning\naround again.) Something's happened to that man in there. You better check in on him, sir. He won't answer or nothing.Experimenter: Continue. Go on, please.Prozi: You accept all responsibility?Experimenter: The responsibility is mine. Correct. Please go on. (Subject returns to his list, starts running through words as rapidly as he can read them, works through to 450 volts.)Prozi: That's that.Experimenter: Continue using the 450 switch for each wrong answer. Continue, please.Prozi: But I don't get anything!Experimenter: Please continue. The next word is \"white.\"Prozi: Don't you think you should look {in on him, please?Experimenter: Not once we've started the experiment.Prozi: What if he's dead in there? (Gestures toward the room with the electric chair.) I mean, he told me he can't stand the shock, sir. I don't mean to be rude, but I think you should look In on him. All you have to do is look in on him. All you have to do is look in the door. I don't get no answer, no noise. Something might have happened to the gentleman in there, sir.Experimenter: We must continue. Go on, please.Prozi: You mean keep giving that? Four-hundred-fifty volts, what he's got now?Experimenter: That's correct. Continue. The next word is \"white.\"Prozi (now at a furious pace): \"White -- cloud, horse, rock, house.\" Answer, please. The answer is \"horse.\" Four hundred and fifty volts. (Zzumph!) Next words, \"Bag -- paint, music. clown, girl.\" The next answer is 'paint.\" Four hundred and fifty volts. (Zzumph!) Next word is \"Short -- sentence, movie . . .\"Experimenter: Excuse me, Teacher. We'll have to discontinue the experiment.Peculiar reactionsMorris Braverman, another subject, is a thirty-nine-year-old social worker. He looks older than his years because of his bald head and serious demeanor. His brow is furrowed, as if all the world's burdens were carried on his face. Ho appears intelligent and concerned.When the learner refuses to answer and the experimenter instructs Braverman to treat the absence of an answer as equivalent to a wrong answer, he takes his instruction to heart. Before administering 300 volts he asserts officiously to the victim, \"Mr. Wallace, your silence has to be considered as a wrong answer.\" Then he administers the shock He offers halfheartedly to change places with the learner, then asks the experimenter. \"Do I have to follow these instructions literally?\" He is satisfied with the experimenter's answer that he does. His very refined and authoritative manner of speaking is increasingly broken up by wheezing laughter.The experimenter's notes on Mr. Braverman at the last few shocks are:Almost breaking up now each time gives shock. Rubbing face to hide laughter.\nSquinting, trying to hide face with hand, still laughing\nCannot control his laughter at this point no matter what he does.\nClenching fist, pushing it onto table.In an interview after the session, Mr. Braverman summarizes the experiment with impressive fluency and intelligence. He feels the experiment may have been designed also to \"test the effects on the teacher of being in an essentially sadistic role, as well as the reactions of a student to a learning situation that was authoritative and punitive.\"When asked how painful the last few shocks administered to the learner were, he indicates that the most extreme category on the scale is not adequate (it read EXTREMELY PAINFUL) and places his mark at the edge of the scale with an arrow carrying it beyond the scale.It is almost impossible to convey the greatly relaxed, sedate quality of his conversation in the interview. In the most relaxed terms, he speaks about his severe inner tension.Experimenter: At what point were you most tense or nervous?Mr. Braverman: Well, when he first began to cry out in pain, and I realized this was hurting him. This got worse when he just blocked and refused to answer. There was I. I'm a nice person, I think, hurting somebody, and caught up in what seemed a mad situation . . . and in the interest of science, one goes through with it.When the interviewer pursues the general question of tension, Mr. Braverman spontaneously mentions his laughter.\"My reactions were awfully peculiar. I don't know if you were watching me, but my reactions were giggly, and trying to stifle laughter. This isn't the way I usually am. This was a sheer reaction to a totally impossible situation. And my reaction was to the situation of having to hurt somebody. And being totally helpless and caught up in a set of circumstances where I just couldn't deviate and I couldn't try to help. This is what got me.\"Mr. Braverman, like all subjects, was told the actual nature and purpose of the experiment, and a year later he affirmed in a questionnaire that he had learned something of personal importance: \"What appalled me was that I could possess this capacity for obedience and compliance to a central idea, i.e., the value of a memory expirement, even after it became clear that continued adherence to this value was at the expense of violation of another value, i.e., don't hurt someone who is helpless and not hurting you. As my wife said, 'You can call yourself Eichmann,' I hope I deal more effectively with any future conflicts of values I encounter.\"The etiquette of submissionOne theoretical interpretation of this behavior holds that all people harbor deeply aggressive instincts continually pressing for expression, and that the experiment provides institutional justification for the release of these impulses. According to this view, if a person is placed in a situation in which he has complete power over another individual, whom he may punish as much as he likes, all that is sadistic and bestial in man comes to the fore. The impulse to shock the victim is seen to flow from the potent aggressive tendencies, which are part of the motivational life of the individual, and the experiment, because it provides social legitimacy, simply opens the door to their expression.It becomes vital, therefore, to compare the subject's performance when he is under orders and when he is allowed to choose the shock level.The procedure was identical to our standard experiment, except that the teacher was told that he was free to select any shock level of any on the trials. (The experimenter took pains to point out that the teacher could use the highest levels on the generator, the lowest, any in between, or any combination of levels.) Each subject proceeded for thirty critical trials. The learner's protests were coordinated to standard shock levels, his first grunt coming at 75 volts, his first vehement protest at 150 volts.The average shock used during the thirty critical trials was less than 60 volts -- lower than the point at which the victim showed the first signs of discomfort. Three of the forty subjects did not go beyond the very lowest level on the board, twenty-eight went no higher than 75 volts, and thirty-eight did not go beyond the first loud protest at 150 volts. Two subjects provided the exception, administering up to 325 and 450 volts, but the overall result was that the great majority of people delivered very low, usually painless, shocks when the choice was explicitly up to them.The condition of the experiment undermines another commonly offered explanation of the subjects' behavior -- that those who shocked the victim at the most severe levels came only from the sadistic fringe of society. If one considers that almost two-thirds of the participants fall into the category of \"obedient\" subjects, and that they represented ordinary people drawn from working, managerial, and professional classes, the argument becomes very shaky. Indeed, it is highly reminiscent of the issue that arose in connection with Hannah Arendt's 1963 book, Eichmann in Jerusalem. Arendt contended that the prosecution's effort to depict Eichmann as a sadistic monster was fundamentally wrong, that he came closer to being an uninspired bureaucrat who simply sat at his desk and did his job. For asserting her views, Arendt became the object of considerable scorn, even calumny. Somehow, it was felt that the monstrous deeds carried out by Eichmann required a brutal, twisted personality, evil incarnate. After witnessing hundreds of ordinary persons submit to the authority in our own experiments, I must conclude that Arendt's conception of the banality of evil comes closer to the truth than one might dare imagine. The ordinary person who shocked the victim did so out of a sense of obligation -- an impression of his duties as a subject -- and not from any peculiarly aggressive tendencies.This is, perhaps, the most fundamental lesson of our study: ordinary people, simply doing their jobs, and without any particular hostility on their part, can become agents in a terrible destructive process. Moreover, even when the destructive effects of their work become patently clear, and they are asked to carry out actions incompatible with fundamental standards of morality, relatively few people have the resources needed to resist authority.Many of the people were in some sense against what they did to the learner, and many protested even while they obeyed. Some were totally convinced of the wrongness of their actions but could not bring themselves to make an open break with authority. They often derived satisfaction from their thoughts and felt that -- within themselves, at least -- they had been on the side of the angels. They tried to reduce strain by obeying the experimenter but \"only slightly,\" encouraging the learner, touching the generator switches gingerly. When interviewed, such a subject would stress that he \"asserted my humanity\" by administering the briefest shock possible. Handling the conflict in this manner was easier than defiance.The situation is constructed so that there is no way the subject can stop shocking the learner without violating the experimenter's definitions of his own competence. The subject fears that he will appear arrogant, untoward, and rude if he breaks off. Although these inhibiting emotions appear small in scope alongside the violence being done to the learner, they suffuse the mind and feelings of the subject, who is miserable at the prospect of having to repudiate the authority to his face. (When the experiment was altered so that the experimenter gave his instructions by telephone instead of in person, only a third as many people were fully obedient through 450 volts). It is a curious thing that a measure of compassion on the part of the subject -- an unwillingness to \"hurt\" the experimenter's feelings -- is part of those binding forces inhibiting his disobedience. The withdrawal of such deference may be as painful to the subject as to the authority he defies.Duty without conflictThe subjects do not derive satisfaction from inflicting pain, but they often like the feeling they get from pleasing the experimenter. They are proud of doing a good job, obeying the experimenter under difficult circumstances. While the subjects administered only mild shocks on their own initiative, one experimental variation showed that, under orders, 30 percent of them were willing to deliver 450 volts even when they had to forcibly push the learner's hand down on the electrode.Bruno Batta is a thirty-seven-year-old welder who took part in the variation requiring the use of force. He was born in New Haven, his parents in Italy. He has a rough-hewn face that conveys a conspicuous lack of alertness. He has some difficulty in mastering the experimental procedure and needs to be corrected by the experimenter several times. He shows appreciation for the help and willingness to do what is required. After the 150 volt level, Batta has to force the learner's hand down on the shock plate, since the learner himself refuses to touch it.When the learner first complains, Mr. Batta pays no attention to him. His face remains impassive, as if to dissociate himself from the learner's disruptive behavior. When the experimenter instructs him to force the learner's hand down, he adopts a rigid, mechanical procedure. He tests the generator switch. When it fails to function, he immediately forces the learner's hand onto the shock plate. All the while he maintains the same rigid mask. The learner, seated alongside him, begs him to stop, but with robotic impassivity he continues the procedure.What is extraordinary is his apparent total indifference to the learner; he hardly takes cognizance of him as a human being. Meanwhile, he relates to the experimenter in a submissive and courteous fashion.At the 330 volt level, the learner refuses not only to touch the shock plate but also to provide any answers. Annoyed, Batta turns to him, and chastises him: \"You better answer and get it over with. We can't stay here all night.\" These are the only words he directs to the learner in the course of an hour. Never again does he speak to him. The scene is brutal and depressing, his hard, impassive face showing total indifference as he subdues the screaming learner and gives him shocks. He seems to derive no pleasure from the act itself, only quiet satisfaction at doing his job properly.When he administers 450 volts, he turns to the experimenter and asks, \"Where do we go from here, Professor?\" His tone is deferential and expresses his willingness to be a cooperative subject, in contrast to the learner's obstinacy.At the end of the session he tells the experimenter how honored he has been to help him, and in a moment of contrition, remarks, \"Sir, sorry it couldn't have been a full experiment.\"He has done his honest best. It is only the deficient behavior of the learner that has denied the experimenter full satisfaction.The essence of obedience is that a person comes to view himself as the instrument for carrying out another person's wishes, and he therefore no longer regards himself as responsible for his actions. Once this critical shift of viewpoint has occurred, all of the essential features of obedience follow. The most far-reaching consequence is that the person feels responsible to the authority directing him but feels no responsibility for the content of the actions that the authority prescribes. Morality does not disappear -- it acquires a radically different focus: the subordinate person feels shame or pride depending on how adequately he has performed the actions called for by authority.Language provides numerous terms to pinpoint this type of morality: loyalty, duty, discipline are all terms heavily saturated with moral meaning and refer to the degree to which a person fulfills his obligations to authority. They refer not to the \"goodness\" of the person per se but to the adequacy with which a subordinate fulfills his socially defined role. The most frequent defense of the individual who has performed a heinous act under command of authority is that he has simply done his duty. In asserting this defense, the individual is not introducing an alibi concocted for the moment but is reporting honestly on the psychological attitude induced by submission to authority.For a person to feel responsible for his actions, he must sense that the behavior has flowed from \"the self.\" In the situation we have studied, subjects have precisely the opposite view of their actions -- namely, they see them as originating in the motives of some other person. Subjects in the experiment frequently said, \"if it were up to me, I would not have administered shocks to the learner.\"Once authority has been isolated as the cause of the subject's behavior, it is legitimate to inquire into the necessary elements of authority and how it must be perceived in order to gain his compliance. We conducted some investigations into the kinds of changes that would cause the experimenter to lose his power and to be disobeyed by the subject. Some of the variations revealed that:The experimenter's physical presence has a marked impact on his authority -- As cited earlier, obedience dropped off sharply when orders were given by telephone. The experimenter could often induce a disobedient subject to go on by returning to the laboratory.Conflicting authority severely paralyzes actions -- When two experimenters of equal status, both seated at the command desk, gave incompatible orders, no shocks were delivered past the point of their disagreement.The rebellious action of others severely undermines authority -- In one variation, three teachers (two actors and a real subject) administered a test and shocks. When the two actors disobeyed the experimenter and refused to go beyond a certain shock level, thirty-six of forty subjects joined their disobedient peers and refused as well.Although the experimenter's authority was fragile in some respects, it is also true that he had almost none of the tools used in ordinary command structures. For example, the experimenter did not threaten the subjects with punishment -- such as loss of income, community ostracism, or jail -- for failure to obey. Neither could he offer incentives. Indeed, we should expect the experimenter's authority to be much less than that of someone like a general, since the experimenter has no power to enforce his imperatives, and since participation in a psychological experiment scarcely evokes the sense of urgency and dedication found in warfare. Despite these limitations, he still managed to command a dismaying degree of obedience.I will cite one final variation of the experiment that depicts a dilemma that is more common in everyday life. The subject was not ordered to pull the lever that shocked the victim, but merely to perform a subsidiary task (administering the word-pair test) while another person administered the shock. In this situation, thirty-seven of forty adults continued to the highest level of the shock generator. Predictably, they excused their behavior by saying that the responsibility belonged to the man who actually pulled the switch. This may illustrate a dangerously typical arrangement in a complex society: it is easy to ignore responsibility when one is only an intermediate link in a chain of actions.The problem of obedience is not wholly psychological. The form and shape of society and the way it is developing have much to do with it. There was a time, perhaps, when people were able to give a fully human response to any situation because they were fully absorbed in it as human beings. But as soon as there was a division of labor things changed. Beyond a certain point, the breaking up of society into people carrying out narrow and very special jobs takes away from the human quality of work and life. A person does not get to see the whole situation but only a small part of it, and is thus unable to act without some kind of overall direction. He yields to authority but in doing so is alienated from his own actions.Even Eichmann was sickened when he toured the concentration camps, but he had only to sit at a desk and shuffle papers. At the same time the man in the camp who actually dropped Cyclon-b into the gas chambers was able to justify his behavior on the ground that he was only following orders from above. Thus there is a fragmentation of the total human act; no one is confronted with the consequences of his decision to carry out the evil act. The person who assumes responsibility has evaporated. Perhaps this is the most common characteristic of socially organized evil in modern society.Notes1. The ethical problems of carrying out an experiment of this sort are too complex to be dealt with here, but they receive extended treatment in the book from which this article is taken.2. Names of subjects described in this piece have been changed."},{"title":"The Pooled-Risk Company Management Company","text":"July 2008At this year's startup school, David Heinemeier Hansson gave a\ntalk\nin which he suggested that startup founders\nshould do things the old fashioned way.  Instead of hoping to get\nrich by building a valuable company and then selling stock in a\n\"liquidity event,\" founders should start companies that make money\nand live off the revenues.Sounds like a good plan.  Let's think about the optimal way to do\nthis.One disadvantage of living off the revenues of your company is that\nyou have to keep running it.  And as anyone who runs their own\nbusiness can tell you, that requires your complete attention.  You\ncan't just start a business and check out once things are going\nwell, or they stop going well surprisingly fast.The main economic motives of startup founders seem to be freedom\nand security.  They want enough money that (a) they don't have to\nworry about running out of money and (b) they can spend their time\nhow they want.  Running your own business offers neither.  You\ncertainly don't have freedom: no boss is so demanding.  Nor do you\nhave security, because if you stop paying attention to the company,\nits revenues go away, and with them your income.The best case, for most people, would be if you could hire someone\nto manage the company for you once you'd grown it to a certain size.\nSuppose you could find a really good manager.  Then you would have\nboth freedom and security.  You could pay as little attention to\nthe business as you wanted, knowing that your manager would keep\nthings running smoothly.  And that being so, revenues would continue\nto flow in, so you'd have security as well.There will of course be some founders who wouldn't like that idea:\nthe ones who like running their company so much that there's nothing\nelse they'd rather do.  But this group must be small.  The way you\nsucceed in most businesses is to be fanatically attentive\nto customers' needs.  What are the odds that your own desires would\ncoincide exactly with the demands of this powerful, external force?Sure, running your own company can be fairly interesting.  Viaweb\nwas more interesting than any job I'd had before.  And since I made\nmuch more money from it, it offered the highest ratio of income to\nboringness of anything I'd done, by orders of magnitude.  But was\nit the most interesting work I could imagine doing?  No.Whether the number of founders in the same position is asymptotic\nor merely large, there are certainly a lot of them.  For them the\nright approach would be to hand the company over to a professional\nmanager eventually, if they could find one who was good enough._____So far so good.  But what if your manager was hit by a bus?  What\nyou really want is a management company to run your company for\nyou.  Then you don't depend on any one person.If you own rental property, there are companies you can hire to\nmanage it for you.  Some will do everything, from finding tenants\nto fixing leaks.  Of course, running companies is a lot more\ncomplicated than managing rental property, but let's suppose there\nwere management companies that could do it for you. They'd charge\na lot, but wouldn't it be worth it?  I'd sacrifice a large percentage\nof the income for the extra peace of mind.I realize what I'm describing already sounds too good to be true, but I\ncan think of a way to make it even more attractive.  If\ncompany management companies existed, there would be an additional\nservice they could offer clients: they could let them insure their\nreturns by pooling their risk.  After all, even a perfect manager can't save a company\nwhen, as sometimes happens, its whole market dies, just as property\nmanagers can't save you from the building burning down.  But a\ncompany that managed a large enough number of companies could say\nto all its clients: we'll combine the revenues from all your\ncompanies, and pay you your proportionate share.If such management companies existed, they'd offer the maximum of\nfreedom and security.  Someone would run your company for you, and\nyou'd be protected even if it happened to die.Let's think about how such a management company might be organized.\nThe simplest way would be to have a new kind of stock representing\nthe total pool of companies they were managing.  When you signed\nup, you'd trade your company's stock for shares of this pool, in\nproportion to an estimate of your company's value that you'd both\nagreed upon.  Then you'd automatically get your share of the returns\nof the whole pool.The catch is that because this kind of trade would be hard to undo,\nyou couldn't switch management companies.  But there's a way they\ncould fix that: suppose all the company management companies got\ntogether and agreed to allow their clients to exchange shares in\nall their pools.  Then you could, in effect, simultaneously choose\nall the management companies to run yours for you, in whatever\nproportion you wanted, and change your mind later as often as you\nwanted.If such pooled-risk company management companies existed, signing\nup with one would seem the ideal plan for most people following the\nroute David advocated.Good news: they do exist.  What I've just\ndescribed is an acquisition by a public company._____Unfortunately, though public acquirers are structurally identical\nto pooled-risk company management companies, they don't think of\nthemselves that way.  With a property management company, you can\njust walk in whenever you want and say \"manage my rental property\nfor me\" and they'll do it.  Whereas acquirers are, as of this\nwriting, extremely fickle.  Sometimes they're in a buying mood and\nthey'll overpay enormously; other times they're not interested.\nThey're like property management companies run by madmen.  Or more\nprecisely, by Benjamin Graham's Mr. Market.So while on average public acquirers behave like pooled-risk company\nmanagers, you need a window of several years to get average case\nperformance.  If you wait long enough (five years, say) you're\nlikely to hit an up cycle where some acquirer is hot to buy you.\nBut you can't choose when it happens.You can't assume investors will carry you for as long as you might\nhave to wait. Your company has to make money.  Opinions are divided\nabout how early to focus on that.\nJoe Kraus says you should try\ncharging customers right away.  And yet some of the most successful\nstartups, including Google, ignored revenue at first and concentrated\nexclusively on development.  The answer probably depends on the\ntype of company you're starting.  I can imagine some where trying\nto make sales would be a good heuristic for product design, and\nothers where it would just be a distraction.  The test is probably\nwhether it helps you to understand your users.You can choose whichever revenue strategy you think is best for the\ntype of company you're starting, so long as you're profitable.\nBeing profitable ensures you'll get at least the average of the\nacquisition market—in which public companies do behave as pooled-risk\ncompany management companies.David isn't mistaken in saying you should start a company to live\noff its revenues.  The mistake is thinking this is somehow opposed\nto starting a company and selling it.  In fact, for most people the\nlatter is merely the optimal case of the former.Thanks to Trevor Blackwell, Jessica Livingston, Michael\nMandel, Robert Morris, and Fred Wilson for reading drafts of this."},{"title":"The Power of the Marginal","text":"June 2006(This essay is derived from talks at Usenix 2006 and\nRailsconf 2006.)A couple years ago my friend Trevor and I went to look at the Apple\ngarage.  As we stood there, he said that as a kid growing up in\nSaskatchewan he'd been amazed at the dedication Jobs and Wozniak\nmust have had to work in a garage.  \"Those guys must have been\nfreezing!\"That's one of California's hidden advantages: the mild climate means\nthere's lots of marginal space.  In cold places that margin gets\ntrimmed off.  There's a sharper line between outside and inside,\nand only projects that are officially sanctioned—by organizations,\nor parents, or wives, or at least by oneself—get proper indoor\nspace.  That raises the activation energy for new ideas.  You can't\njust tinker. You have to justify.Some of Silicon Valley's most famous companies began in garages:\nHewlett-Packard in 1938, Apple in 1976, Google in 1998.  In Apple's\ncase the garage story is a bit of an urban legend.  Woz says all\nthey did there was assemble some computers, and that he did all the\nactual design of the Apple I and Apple II in his apartment or his\ncube at HP.\n[1]\nThis was apparently too marginal even for Apple's PR\npeople.By conventional standards, Jobs and Wozniak were marginal people\ntoo.  Obviously they were smart, but they can't have looked good\non paper.  They were at the time a pair of college dropouts with\nabout three years of school between them, and hippies to boot.\nTheir previous business experience consisted of making \"blue boxes\"\nto hack into the phone system, a business with the rare distinction\nof being both illegal and unprofitable.OutsidersNow a startup operating out of a garage in Silicon Valley would\nfeel part of an exalted tradition, like the poet in his garret, or\nthe painter who can't afford to heat his studio and thus has to\nwear a beret indoors.  But in 1976 it didn't seem so cool.  The\nworld hadn't yet realized that starting a computer company was in\nthe same category as being a writer or a painter. It hadn't been\nfor long.  Only in the preceding couple years had the dramatic fall\nin the cost of hardware allowed outsiders to compete.In 1976, everyone looked down on a company operating out of a garage,\nincluding the founders.  One of the first things Jobs did when they\ngot some money was to rent office space.  He wanted Apple to seem\nlike a real company.They already had something few real companies ever have: a fabulously well\ndesigned product.  You'd think they'd have had more confidence.\nBut I've talked to a lot of startup founders, and it's always this\nway.  They've built something that's going to change the world, and\nthey're worried about some nit like not having proper business\ncards.That's the paradox I want to explore: great new things often come\nfrom the margins, and yet the people who discover them are looked\ndown on by everyone, including themselves.It's an old idea that new things come from the margins. I want to\nexamine its internal structure.  Why do great ideas come from the\nmargins?  What kind of ideas?  And is there anything we can do to\nencourage the process?InsidersOne reason so many good ideas come from the margin is simply that\nthere's so much of it. There have to be more outsiders than insiders,\nif insider means anything.  If the number of outsiders is huge it\nwill always seem as if a lot of ideas come from them, even if few\ndo per capita.  But I think there's more going on than this.  There\nare real disadvantages to being an insider, and in some kinds of\nwork they can outweigh the advantages.Imagine, for example, what would happen if the government decided\nto commission someone to write an official Great American Novel.\nFirst there'd be a huge ideological squabble over who to choose.\nMost of the best writers would be excluded for having offended one\nside or the other.  Of the remainder, the smart ones would refuse\nsuch a job, leaving only a few with the wrong sort of ambition.\nThe committee would choose one at the height of his career—that\nis, someone whose best work was behind him—and hand over the\nproject with copious free advice about how the book should show in\npositive terms the strength and diversity of the American people,\netc, etc.The unfortunate writer would then sit down to work with a huge\nweight of expectation on his shoulders.  Not wanting to blow such\na public commission, he'd play it safe.  This book had better command\nrespect, and the way to ensure that would be to make it a tragedy.\nAudiences have to be enticed to laugh, but if you kill people they\nfeel obliged to take you seriously.  As everyone knows, America\nplus tragedy equals the Civil War, so that's what it would have to\nbe about.  Better stick to the standard cartoon version that the\nCivil War was about slavery; people would be confused otherwise;\nplus you can show a lot of strength and diversity.  When finally\ncompleted twelve years later, the book would be a 900-page pastiche\nof existing popular novels—roughly Gone with the Wind plus\nRoots.  But its bulk and celebrity would make it a bestseller\nfor a few months, until blown out of the water by a talk-show host's\nautobiography.  The book would be made into a movie and thereupon\nforgotten, except by the more waspish sort of reviewers, among whom\nit would be a byword for bogusness like Milli Vanilli or Battlefield\nEarth.Maybe I got a little carried away with this example.  And yet is\nthis not at each point the way such a project would play out?  The\ngovernment knows better than to get into the novel business, but\nin other fields where they have a natural monopoly, like nuclear\nwaste dumps, aircraft carriers, and regime change, you'd find plenty\nof projects isomorphic to this one—and indeed, plenty that were\nless successful.This little thought experiment suggests a few of the disadvantages\nof insider projects: the selection of the wrong kind of people, the\nexcessive scope, the inability to take risks, the need to seem\nserious, the weight of expectations, the power of vested interests,\nthe undiscerning audience, and perhaps most dangerous, the tendency\nof such work to become a duty rather than a pleasure.TestsA world with outsiders and insiders implies some kind of test for\ndistinguishing between them.  And the trouble with most tests for\nselecting elites is that there are two ways to pass them: to be\ngood at what they try to measure, and to be good at hacking the\ntest itself.So the first question to ask about a field is how honest its tests\nare, because this tells you what it means to be an outsider.  This\ntells you how much to trust your instincts when you disagree with\nauthorities, whether it's worth going through the usual channels\nto become one yourself, and perhaps whether you want to work in\nthis field at all.Tests are least hackable when there are consistent standards for\nquality, and the people running the test really care about its\nintegrity.  Admissions to PhD programs in the hard sciences are\nfairly honest, for example.  The professors will get whoever they\nadmit as their own grad students, so they try hard to choose well,\nand they have a fair amount of data to go on.  Whereas undergraduate\nadmissions seem to be much more hackable.One way to tell whether a field has consistent standards is the\noverlap between the leading practitioners and the people who teach\nthe subject in universities.  At one end of the scale you have\nfields like math and physics, where nearly all the teachers are\namong the best practitioners.  In the middle are medicine, law,\nhistory, architecture, and computer science, where many are.  At\nthe bottom are business, literature, and the visual arts, where\nthere's almost no overlap between the teachers and the leading\npractitioners.  It's this end that gives rise to phrases like \"those\nwho can't do, teach.\"Incidentally, this scale might be helpful in deciding what to study\nin college.  When I was in college the rule seemed to be that you\nshould study whatever you were most interested in.  But in retrospect\nyou're probably better off studying something moderately interesting\nwith someone who's good at it than something very interesting with\nsomeone who isn't.  You often hear people say that you shouldn't\nmajor in business in college, but this is actually an instance of\na more general rule: don't learn things from teachers who are bad\nat them.How much you should worry about being an outsider depends on the\nquality of the insiders.  If you're an amateur mathematician and\nthink you've solved a famous open problem, better go back and check.\nWhen I was in grad school, a friend in the math department had the\njob of replying to people who sent in proofs of Fermat's last theorem\nand so on, and it did not seem as if he saw it as a valuable source\nof tips—more like manning a mental health hotline.  Whereas if\nthe stuff you're writing seems different from what English professors\nare interested in, that's not necessarily a problem.Anti-TestsWhere the method of selecting the elite is thoroughly corrupt, most\nof the good people will be outsiders.  In art, for example, the\nimage of the poor, misunderstood genius is not just one possible\nimage of a great artist: it's the standard image.  I'm not\nsaying it's correct, incidentally, but it is telling how well this\nimage has stuck.  You couldn't make a rap like that stick to math\nor medicine.\n[2]If it's corrupt enough, a test becomes an anti-test, filtering out\nthe people it should select by making them to do things only the\nwrong people would do.  Popularity in high school\nseems to be such a test.  There are plenty of similar ones in the grownup\nworld.  For example, rising up through the hierarchy of the average\nbig company demands an attention to politics few thoughtful people\ncould spare.\n[3]\nSomeone like Bill Gates can grow a company under\nhim, but it's hard to imagine him having the patience to climb the\ncorporate ladder at General Electric—or Microsoft, actually.It's kind of strange when you think about it, because lord-of-the-flies\nschools and bureaucratic companies are both the default.  There are\nprobably a lot of people who go from one to the other and never\nrealize the whole world doesn't work this way.I think that's one reason big companies are so often blindsided by\nstartups.\nPeople at big companies don't realize the extent to which\nthey live in an environment that is one large, ongoing test for the\nwrong qualities.If you're an outsider, your best chances for beating insiders are\nobviously in fields where corrupt tests select a lame elite.  But\nthere's a catch: if the tests are corrupt, your victory won't be\nrecognized, at least in your lifetime.  You may feel you don't need\nthat, but history suggests it's dangerous to work in fields with\ncorrupt tests.  You may beat the insiders, and yet not do as good\nwork, on an absolute scale, as you would in a field that was more\nhonest.Standards in art, for example, were almost as corrupt in the first\nhalf of the eighteenth century as they are today.  This was the era\nof those fluffy idealized portraits of countesses with their lapdogs.\nChardin\ndecided to skip all that and paint ordinary things as he\nsaw them.  He's now considered the best of that period—and yet\nnot the equal of Leonardo or Bellini or Memling, who all had the\nadditional encouragement of honest standards.It can be worth participating in a corrupt contest, however, if\nit's followed by another that isn't corrupt.  For example, it would\nbe worth competing with a company that can spend more than you on\nmarketing, as long as you can survive to the next round, when\ncustomers compare your actual products.  Similarly, you shouldn't\nbe discouraged by the comparatively corrupt test of college admissions,\nbecause it's followed immediately by less hackable tests.\n[4]RiskEven in a field with honest tests, there are still advantages to\nbeing an outsider.  The most obvious is that outsiders have nothing\nto lose.  They can do risky things, and if they fail, so what?  Few\nwill even notice.The eminent, on the other hand, are weighed down by their eminence.\nEminence is like a suit: it impresses the wrong people, and it\nconstrains the wearer.Outsiders should realize the advantage they have here.  Being able\nto take risks is hugely valuable.  Everyone values safety too much,\nboth the obscure and the eminent.  No one wants to look like a fool.\nBut it's very useful to be able to.  If most of your ideas aren't\nstupid, you're probably being too conservative.  You're not bracketing\nthe problem.Lord Acton said we should judge talent at its best and character\nat its worst.  For example, if you write one great book and ten bad\nones, you still count as a great writer—or at least, a better\nwriter than someone who wrote eleven that were merely good.  Whereas\nif you're a quiet, law-abiding citizen most of the time but\noccasionally cut someone up and bury them in your backyard, you're\na bad guy.Almost everyone makes the mistake of treating ideas as if they were\nindications of character rather than talent—as if having a stupid\nidea made you stupid.   There's a huge weight of tradition advising\nus to play it safe.  \"Even a fool is thought wise if he keeps\nsilent,\" says the Old Testament (Proverbs 17:28).Well, that may be fine advice for a bunch of goatherds in Bronze\nAge Palestine.  There conservatism would be the order of the day.\nBut times have changed.  It might still be reasonable to stick with\nthe Old Testament in political questions, but materially the world\nnow has a lot more state.  Tradition is less of a guide, not just\nbecause things change faster, but because the space of possibilities\nis so large.   The more complicated the world gets, the more valuable\nit is to be willing to look like a fool.DelegationAnd yet the more successful people become, the more heat they get\nif they screw up—or even seem to screw up.  In this respect, as\nin many others, the eminent are prisoners of their own success.  So\nthe best way to understand the advantages of being an outsider may\nbe to look at the disadvantages of being an insider.If you ask eminent people what's wrong with their lives, the first\nthing they'll complain about is the lack of time.  A friend of mine\nat Google is fairly high up in the company and went to work for\nthem long before they went public.  In other words, he's now rich\nenough not to have to work.  I asked him if he could still endure\nthe annoyances of having a job, now that he didn't have to.  And\nhe said that there weren't really any annoyances, except—and he\ngot a wistful look when he said this—that he got so much\nemail.The eminent feel like everyone wants to take a bite out of them.\nThe problem is so widespread that people pretending to be eminent\ndo it by pretending to be overstretched.The lives of the eminent become scheduled, and that's not good for\nthinking.  One of the great advantages of being an outsider is long,\nuninterrupted blocks of time.  That's what I remember about grad\nschool: apparently endless supplies of time, which I spent worrying\nabout, but not writing, my dissertation.  Obscurity is like health\nfood—unpleasant, perhaps, but good for you.  Whereas fame tends\nto be like the alcohol produced by fermentation. When it reaches\na certain concentration, it kills off the yeast that produced it.The eminent generally respond to the shortage of time by turning\ninto managers.  They don't have time to work.  They're surrounded\nby junior people they're supposed to help or supervise.  The obvious\nsolution is to have the junior people do the work.  Some good\nstuff happens this way, but there are problems it doesn't work so\nwell for: the kind where it helps to have everything in one head.For example, it recently emerged that the famous glass artist Dale\nChihuly hasn't actually blown glass for 27 years.  He has assistants\ndo the work for him.  But one of the most valuable sources of ideas\nin the visual arts is the resistance of the medium.  That's why oil\npaintings look so different from watercolors.  In principle you\ncould make any mark in any medium; in practice the medium steers\nyou.  And if you're no longer doing the work yourself, you stop\nlearning from this.So if you want to beat those eminent enough to delegate, one way\nto do it is to take advantage of direct contact with the medium.\nIn the arts it's obvious how: blow your own glass, edit your own\nfilms, stage your own plays.  And in the process pay close attention\nto accidents and to new ideas you have on the fly.  This technique\ncan be generalized to any sort of work: if you're an outsider, don't\nbe ruled by plans.  Planning is often just a weakness forced on\nthose who delegate.Is there a general rule for finding problems best solved in one\nhead?  Well, you can manufacture them by taking any project usually\ndone by multiple people and trying to do it all yourself.  Wozniak's\nwork was a classic example: he did everything himself, hardware and\nsoftware, and the result was miraculous.  He claims not one bug was\never found in the Apple II, in either hardware or software.Another way to find good problems to solve in one head is to focus\non the grooves in the chocolate bar—the places where tasks are\ndivided when they're split between several people.  If you want to\nbeat delegation, focus on a vertical slice: for example, be both\nwriter and editor, or both design buildings and construct them.One especially good groove to span is the one between tools and\nthings made with them.  For example, programming languages and\napplications are usually written by different people, and this is\nresponsible for a lot of the worst flaws in\nprogramming languages.\nI think every language should be designed simultaneously with a\nlarge application written in it, the way C was with Unix.Techniques for competing with delegation translate well into business,\nbecause delegation is endemic there.  Instead of avoiding it as a\ndrawback of senility, many companies embrace it as a sign of maturity.\nIn big companies software is often designed, implemented, and sold\nby three separate types of people.  In startups one person may have\nto do all three.  And though this feels stressful, it's one reason\nstartups win.  The needs of customers and the means of satisfying\nthem are all in one head.FocusThe very skill of insiders can be a weakness.  Once someone is good\nat something, they tend to spend all their time doing that.  This\nkind of focus is very valuable, actually.  Much of the skill of\nexperts is the ability to ignore false trails.  But focus has\ndrawbacks: you don't learn from other fields, and when a new approach\narrives, you may be the last to notice.For outsiders this translates into two ways to win.  One is to work\non a variety of things.  Since you can't derive as much benefit\n(yet) from a narrow focus, you may as well cast a wider net and\nderive what benefit you can from similarities between fields.  Just\nas you can compete with delegation by working on larger vertical\nslices, you can compete with specialization by working on larger\nhorizontal slices—by both writing and illustrating your book, for\nexample.The second way to compete with focus is to see what focus overlooks.\nIn particular, new things.  So if you're not good at anything yet,\nconsider working on something so new that no one else is either.\nIt won't have any prestige yet, if no one is good at it, but you'll\nhave it all to yourself.The potential of a new medium is usually underestimated, precisely\nbecause no one has yet explored its possibilities.  Before\nDurer\ntried making engravings, no one took them very seriously.  Engraving\nwas for making little devotional images—basically fifteenth century\nbaseball cards of saints.  Trying to make masterpieces in this\nmedium must have seemed to Durer's contemporaries that way that,\nsay, making masterpieces in\ncomics\nmight seem to the average person\ntoday.In the computer world we get not new mediums but new platforms: the\nminicomputer, the microprocessor, the web-based application.  At\nfirst they're always dismissed as being unsuitable for real work.\nAnd yet someone always decides to try anyway, and it turns out you\ncan do more than anyone expected.  So in the future when you hear\npeople say of a new platform: yeah, it's popular and cheap, but not\nready yet for real work, jump on it.As well as being more comfortable working on established lines,\ninsiders generally have a vested interest in perpetuating them.\nThe professor who made his reputation by discovering some new idea\nis not likely to be the one to discover its replacement.  This is\nparticularly true with companies, who have not only skill and pride\nanchoring them to the status quo, but money as well. The Achilles\nheel of successful companies is their inability to cannibalize\nthemselves.  Many innovations consist of replacing something with\na cheaper alternative, and companies just don't want to see a path\nwhose immediate effect is to cut an existing source of revenue.So if you're an outsider you should actively seek out contrarian\nprojects.  Instead of working on things the eminent have made\nprestigious, work on things that could steal that prestige.The really juicy new approaches are not the ones insiders reject\nas impossible, but those they ignore as undignified.  For example,\nafter Wozniak designed the Apple II he offered it first to his\nemployer, HP.  They passed.  One of the reasons was that, to save\nmoney, he'd designed the Apple II to use a TV as a monitor, and HP\nfelt they couldn't produce anything so declasse.LessWozniak used a TV as a monitor for the simple reason that he couldn't\nafford a monitor.  Outsiders are not merely free but compelled to\nmake things that are cheap and lightweight.  And both are good bets\nfor growth: cheap things spread faster, and lightweight things\nevolve faster.The eminent, on the other hand, are almost forced to work on a large\nscale.  Instead of garden sheds they must design huge art museums.\nOne reason they work on big things is that they can: like our\nhypothetical novelist, they're flattered by such opportunities.\nThey also know that big projects will by their sheer bulk impress\nthe audience.  A garden shed, however lovely, would be easy to\nignore; a few might even snicker at it.  You can't snicker at a\ngiant museum, no matter how much you dislike it.  And finally, there\nare all those people the eminent have working for them; they have\nto choose projects that can keep them all busy.Outsiders are free of all this.  They can work on small things, and\nthere's something very pleasing about small things.  Small things\ncan be perfect; big ones always have something wrong with them.\nBut there's a\nmagic\nin small things that goes beyond such rational\nexplanations.  All kids know it.  Small things have more personality.Plus making them is more fun.  You can do what you want; you don't\nhave to satisfy committees.  And perhaps most important, small\nthings can be done fast.  The prospect of seeing the finished project\nhangs in the air like the smell of dinner cooking.  If you work\nfast, maybe you could have it done tonight.Working on small things is also a good way to learn.  The most\nimportant kinds of learning happen one project at a time.  (\"Next\ntime, I won't...\")  The faster you cycle through projects, the\nfaster you'll evolve.Plain materials have a charm like small scale.  And in addition\nthere's the challenge of making do with less.  Every designer's\nears perk up at the mention of that game, because it's a game you\ncan't lose.  Like the JV playing the varsity, if you even tie, you\nwin.  So paradoxically there are cases where fewer resources yield\nbetter results, because the designers' pleasure at their own ingenuity\nmore than compensates.\n[5]So if you're an outsider, take advantage of your ability to make\nsmall and inexpensive things.  Cultivate the pleasure and simplicity\nof that kind of work; one day you'll miss it.ResponsibilityWhen you're old and eminent, what will you miss about being young\nand obscure?  What people seem to miss most is the lack of\nresponsibilities.Responsibility is an occupational disease of eminence.  In principle\nyou could avoid it, just as in principle you could avoid getting\nfat as you get old, but few do.  I sometimes suspect that responsibility\nis a trap and that the most virtuous route would be to shirk it,\nbut regardless it's certainly constraining.When you're an outsider you're constrained too, of course.  You're\nshort of money, for example.  But that constrains you in different\nways.  How does responsibility constrain you?  The worst thing is\nthat it allows you not to focus on real work.  Just as the most\ndangerous forms of\nprocrastination\nare those that seem like work,\nthe danger of responsibilities is not just that they can consume a\nwhole day, but that they can do it without setting off the\nkind of alarms you'd set off if you spent a whole day sitting on a\npark bench.A lot of the pain of being an outsider is being aware of one's own\nprocrastination.  But this is actually a good thing.  You're at\nleast close enough to work that the smell of it makes you hungry.As an outsider, you're just one step away from getting things done.\nA huge step, admittedly, and one that most people never seem to\nmake, but only one step.  If you can summon up the energy to get\nstarted, you can work on projects with an intensity (in both senses)\nthat few insiders can match.  For insiders work turns into a duty,\nladen with responsibilities and expectations.  It's never so pure\nas it was when they were young.Work like a dog being taken for a walk, instead of an ox being yoked\nto the plow.  That's what they miss.AudienceA lot of outsiders make the mistake of doing the opposite; they\nadmire the eminent so much that they copy even their flaws.  Copying\nis a good way to learn, but copy the right things.  When I was in\ncollege I imitated the pompous diction of famous professors.  But\nthis wasn't what made them eminent—it was more a flaw their\neminence had allowed them to sink into.   Imitating it was like\npretending to have gout in order to seem rich.Half the distinguishing qualities of the eminent are actually\ndisadvantages.  Imitating these is not only a waste of time, but\nwill make you seem a fool to your models, who are often well aware\nof it.What are the genuine advantages of being an insider?  The greatest\nis an audience.  It often seems to outsiders that the great advantage\nof insiders is money—that they have the resources to do what they\nwant.  But so do people who inherit money, and that doesn't seem\nto help, not as much as an audience.  It's good for morale to know\npeople want to see what you're making; it draws work out of you.If I'm right that the defining advantage of insiders is an audience,\nthen we live in exciting times, because just in the last ten years\nthe Internet has made audiences a lot more liquid.  Outsiders don't\nhave to content themselves anymore with a proxy audience of a few\nsmart friends.  Now, thanks to the Internet, they can start to grow\nthemselves actual audiences.  This is great news for the marginal,\nwho retain the advantages of outsiders while increasingly being\nable to siphon off what had till recently been the prerogative of\nthe elite.Though the Web has been around for more than ten years, I think\nwe're just beginning to see its democratizing effects.  Outsiders\nare still learning how to steal audiences.  But more importantly,\naudiences are still learning how to be stolen—they're still just\nbeginning to realize how much\ndeeper bloggers can dig than\njournalists, how much\nmore interesting\na democratic news site can be than a\nfront page controlled by editors, and how much\nfunnier\na bunch of kids\nwith webcams can be than mass-produced sitcoms.The big media companies shouldn't worry that people will post their\ncopyrighted material on YouTube.  They should worry that people\nwill post their own stuff on YouTube, and audiences will watch that\ninstead.HackingIf I had to condense the power of the marginal into one sentence\nit would be: just try hacking something together.  That phrase draws\nin most threads I've mentioned here.   Hacking something together\nmeans deciding what to do as you're doing it, not a subordinate\nexecuting the vision of his boss.  It implies the result won't\nbe pretty, because it will be made quickly out of inadequate\nmaterials.  It may work, but it won't be the sort of thing the\neminent would want to put their name on.  Something hacked together\nmeans something that barely solves the problem, or maybe doesn't\nsolve the problem at all, but another you discovered en route.  But\nthat's ok, because the main value of that initial version is not the\nthing itself, but what it leads to.  Insiders who daren't walk\nthrough the mud in their nice clothes will never make it to the\nsolid ground on the other side.The word \"try\" is an especially valuable component.  I disagree\nhere with Yoda, who said there is no try.  There is try.  It implies\nthere's no punishment if you fail.  You're driven by curiosity\ninstead of duty.  That means the wind of procrastination will be\nin your favor: instead of avoiding this work, this will be what you\ndo as a way of avoiding other work.  And when you do it, you'll be\nin a better mood.  The more the work depends on imagination, the\nmore that matters, because most people have more ideas when they're\nhappy.If I could go back and redo my twenties, that would be one thing\nI'd do more of: just try hacking things together.  Like many people\nthat age, I spent a lot of time worrying about what I should do.\nI also spent some time trying to build stuff.  I should have spent\nless time worrying and more time building.  If you're not sure what\nto do, make something.Raymond Chandler's advice to thriller writers was \"When in doubt,\nhave a man come through a door with a gun in his hand.\"  He followed\nthat advice.  Judging from his books, he was often in doubt.  But\nthough the result is occasionally cheesy, it's never boring.  In\nlife, as in books, action is underrated.Fortunately the number of things you can just hack together keeps\nincreasing.   People fifty years ago would be astonished that one\ncould just hack together a movie, for example.  Now you can even\nhack together distribution.  Just make stuff and put it online.InappropriateIf you really want to score big, the place to focus is the margin\nof the margin: the territories only recently captured from the\ninsiders.  That's where you'll find the juiciest projects still\nundone, either because they seemed too risky, or simply because\nthere were too few insiders to explore everything.This is why I spend most of my time writing\nessays lately.  The\nwriting of essays used to be limited to those who could get them\npublished.  In principle you could have written them and just shown\nthem to your friends; in practice that didn't work.\n[6]\nessayist needs the resistance of an audience, just as an engraver\nneeds the resistance of the plate.Up till a few years ago, writing essays was the ultimate insider's\ngame.  Domain experts were allowed to publish essays about their\nfield, but the pool allowed to write on general topics was about\neight people who went to the right parties in New York.  Now the\nreconquista has overrun this territory, and, not surprisingly, found\nit sparsely cultivated.  There are so many essays yet unwritten.\nThey tend to be the naughtier ones; the insiders have pretty much\nexhausted the motherhood and apple pie topics.This leads to my final suggestion: a technique for determining when\nyou're on the right track.  You're on the right track when people\ncomplain that you're unqualified, or that you've done something\ninappropriate.  If people are complaining, that means you're doing\nsomething rather than sitting around, which is the first step.  And\nif they're driven to such empty forms of complaint, that means\nyou've probably done something good.If you make something and people complain that it doesn't work,\nthat's a problem.  But if the worst thing they can hit you with is\nyour own status as an outsider, that implies that in every other\nrespect you've succeeded.  Pointing out that someone is unqualified\nis as desperate as resorting to racial slurs. It's just a legitimate\nsounding way of saying: we don't like your type around here.But the best thing of all is when people call what you're doing\ninappropriate.  I've been hearing this word all my life and I only\nrecently realized that it is, in fact, the sound of the homing\nbeacon.  \"Inappropriate\" is the null criticism.  It's merely the\nadjective form of \"I don't like it.\"So that, I think, should be the highest goal for the marginal.  Be\ninappropriate.  When you hear people saying that, you're golden.\nAnd they, incidentally, are busted.Notes[1]\nThe facts about Apple's early history are from an interview\nwith Steve\nWozniak in Jessica Livingston's\nFounders at Work.[2]\nAs usual the popular image is several decades behind reality.\nNow the misunderstood artist is not a chain-smoking drunk who pours\nhis soul into big, messy canvases that philistines see and say\n\"that's not art\" because it isn't a picture of anything.  The\nphilistines have now been trained that anything hung on a wall\nis art.  Now the misunderstood artist is a coffee-drinking vegan\ncartoonist whose work they see and say \"that's not art\" because it\nlooks like stuff they've seen in the Sunday paper.[3]\nIn fact this would do fairly well as a definition of politics:\nwhat determines rank in the absence of objective tests.[4]\nIn high school you're led to believe your whole future depends\non where you go to college, but it turns out only to buy you a couple\nyears. By your mid-twenties the people worth impressing\nalready judge you more by what\nyou've done than where you went to school.[5]\nManagers are presumably wondering, how can I make this miracle\nhappen?  How can I make the people working for me do more with less?\nUnfortunately the constraint probably has to be self-imposed.  If\nyou're expected to do more with less, then you're being\nstarved, not eating virtuously.[6]\nWithout the prospect of publication, the closest most people\ncome to writing essays is to write in a journal.  I find I never\nget as deeply into subjects as I do in proper essays.  As the name\nimplies, you don't go back and rewrite journal entries over\nand over for two weeks.Thanks to Sam Altman, Trevor Blackwell, Paul Buchheit, Sarah\nHarlin, Jessica Livingston, Jackie McDonough, Robert Morris, Olin\nShivers, and Chris Small for reading drafts of this, and to Chris\nSmall and Chad Fowler for inviting me to speak."},{"title":"The Python Paradox","text":"August 2004In a recent talk I said something that upset a lot of\npeople: that you could get smarter programmers to work on\na Python project than you could to work on a Java project.I didn't mean by this that Java programmers are dumb.  I\nmeant that Python programmers are smart. It's a lot of\nwork to learn a new programming language.  And people don't\nlearn Python because it will get them a job; they learn it\nbecause they genuinely like to program and aren't satisfied with the languages they\nalready know.Which makes them exactly the kind of programmers\ncompanies should want to hire.  Hence what, for lack of a better\nname, I'll call the Python paradox: if a company chooses to write\nits software in a comparatively esoteric language, they'll be able\nto hire better programmers, because they'll attract only those\nwho cared enough to learn it.  And for\nprogrammers the paradox is even more pronounced: the language\nto learn, if you want to get a good job, is a language that\npeople don't learn merely to get a job.Only a few companies have been smart enough to realize this\nso far.  But there is a kind of selection going on here too: they're\nexactly the companies programmers would\nmost like to work for.  Google, for example.  When they\nadvertise Java programming jobs, they also want Python experience.A friend of mine who knows nearly all the widely used languages\nuses Python for most of his projects.  He says the main reason\nis that he likes the way source code looks.  That may seem\na frivolous reason to choose one language over another.\nBut it is not so frivolous as it sounds: when you program,\nyou spend more time reading code than writing it.\nYou push blobs of source code around the way a sculptor does\nblobs of clay.  So a language that makes source code ugly is\nmaddening to an exacting programmer, as clay full of lumps\nwould be to a sculptor.At the mention of ugly source code, people will of course think\nof Perl.  But the superficial ugliness of Perl is not the sort\nI mean.  Real ugliness is not harsh-looking\nsyntax, but having to build programs out of the wrong\nconcepts.  Perl may look like a cartoon character swearing,\nbut there are\ncases where it surpasses Python conceptually.So far, anyway. Both languages are of course\nmoving targets.  But they\nshare, along with Ruby (and Icon, and Joy, and J, and Lisp,\nand Smalltalk) the fact that\nthey're created by, and used by, people who really care about\nprogramming.   And those tend to be the ones who do it well."},{"title":"The Refragmentation","text":"January 2016One advantage of being old is that you can see change happen in\nyour lifetime.  A lot of the change I've seen is fragmentation.  US\npolitics is much more polarized than it used to be.  Culturally we\nhave ever less common ground. The creative class flocks to a handful\nof happy cities, abandoning the rest.  And increasing economic\ninequality means the spread between rich and poor is growing too.\nI'd like to propose a hypothesis: that all these trends are instances\nof the same phenomenon.  And moreover, that the cause is not some\nforce that's pulling us apart, but rather the erosion of forces\nthat had been pushing us together.Worse still, for those who worry about these trends, the forces\nthat were pushing us together were an anomaly, a one-time combination\nof circumstances that's unlikely to be repeated—and indeed, that\nwe would not want to repeat.The two forces were war (above all World War II), and the rise of\nlarge corporations.The effects of World War II were both economic and social.\nEconomically, it decreased variation in income.  Like all modern\narmed forces, America's were socialist economically.  From each\naccording to his ability, to each according to his need.  More or\nless.  Higher ranking members of the military got more (as higher\nranking members of socialist societies always do), but what they\ngot was fixed according to their rank.  And the flattening effect\nwasn't limited to those under arms, because the US economy was\nconscripted too.  Between 1942 and 1945 all wages were set by the\nNational War Labor Board. Like the military, they defaulted to\nflatness.  And this national standardization of wages was so pervasive\nthat its effects could still be seen years after the war ended.\n[1]Business owners weren't supposed to be making money either.  FDR\nsaid \"not a single war millionaire\" would be permitted.  To ensure\nthat, any increase in a company's profits over prewar levels was\ntaxed at 85%.  And when what was left after corporate taxes reached\nindividuals, it was taxed again at a marginal rate of 93%.\n[2]Socially too the war tended to decrease variation.  Over 16 million\nmen and women from all sorts of different backgrounds were brought\ntogether in a way of life that was literally uniform.  Service rates\nfor men born in the early 1920s approached 80%. And working toward\na common goal, often under stress, brought them still closer together.Though strictly speaking World War II lasted less than 4 years for\nthe US, its effects lasted longer.  Wars make central governments\nmore powerful, and World War II was an extreme case of this.  In\nthe US, as in all the other Allied countries, the federal government\nwas slow to give up the new powers it had acquired.  Indeed, in\nsome respects the war didn't end in 1945; the enemy just switched\nto the Soviet Union.  In tax rates, federal power, defense spending,\nconscription, and nationalism the decades after the war looked more\nlike wartime than prewar peacetime.\n[3]\nAnd the social effects\nlasted too.  The kid pulled into the army from behind a mule team\nin West Virginia didn't simply go back to the farm afterward.\nSomething else was waiting for him, something that looked a lot\nlike the army.If total war was the big political story of the 20th century, the\nbig economic story was the rise of a new kind of company.  And this\ntoo tended to produce both social and economic cohesion.\n[4]The 20th century was the century of the big, national corporation.\nGeneral Electric, General Foods, General Motors.  Developments in\nfinance, communications, transportation, and manufacturing enabled\na new type of company whose goal was above all scale.  Version 1\nof this world was low-res: a Duplo world of a few giant companies\ndominating each big market.\n[5]The late 19th and early 20th centuries had been a time of consolidation,\nled especially by J. P. Morgan.  Thousands of companies run by their\nfounders were merged into a couple hundred giant ones run by\nprofessional managers. Economies of scale ruled the day.  It seemed\nto people at the time that this was the final state of things.  John\nD. Rockefeller said in 1880\nThe day of combination is here to stay. Individualism has gone,\nnever to return.\nHe turned out to be mistaken, but he seemed right for the next\nhundred years.The consolidation that began in the late 19th century continued for\nmost of the 20th.  By the end of World War II, as Michael Lind\nwrites, \"the major sectors of the economy were either organized\nas government-backed cartels or dominated by a few oligopolistic\ncorporations.\"For consumers this new world meant the same choices everywhere, but\nonly a few of them.  When I grew up there were only 2 or 3 of most\nthings, and since they were all aiming at the middle of the market\nthere wasn't much to differentiate them.One of the most important instances of this phenomenon was in TV.\nHere there were 3 choices: NBC, CBS, and ABC. Plus public TV for\neggheads and communists.  The programs the 3 networks offered were\nindistinguishable.  In fact, here there was a triple pressure toward\nthe center. If one show did try something daring, local affiliates\nin conservative markets would make them stop. Plus since TVs were\nexpensive whole families watched the same shows together, so they\nhad to be suitable for everyone.And not only did everyone get the same thing, they got it at the\nsame time.  It's difficult to imagine now, but every night tens of\nmillions of families would sit down together in front of their TV\nset watching the same show, at the same time, as their next door\nneighbors.  What happens now with the Super Bowl used to happen\nevery night. We were literally in sync.\n[6]In a way mid-century TV culture was good. The view it gave of the\nworld was like you'd find in a children's book, and it probably had\nsomething of the effect that (parents hope) children's books have\nin making people behave better.  But, like children's books, TV was\nalso misleading.  Dangerously misleading, for adults. In his\nautobiography, Robert MacNeil talks of seeing gruesome images that\nhad just come in from Vietnam and thinking, we can't show these to\nfamilies while they're having dinner.I know how pervasive the common culture was, because I tried to opt\nout of it, and it was practically impossible to find alternatives.\nWhen I was 13 I realized, more from internal evidence than any\noutside source, that the ideas we were being fed on TV were crap,\nand I stopped watching it.\n[7]\nBut it wasn't just TV.  It seemed\nlike everything around me was crap.  The politicians all saying the\nsame things, the consumer brands making almost identical products\nwith different labels stuck on to indicate how prestigious they\nwere meant to be, the balloon-frame houses with fake \"colonial\"\nskins, the cars with several feet of gratuitous metal on each end\nthat started to fall apart after a couple years, the \"red delicious\"\napples that were red but only nominally\napples. And in retrospect, it was crap.\n[8]But when I went looking for alternatives to fill this void, I found\npractically nothing.  There was no Internet then.  The only place\nto look was in the chain bookstore in our local shopping mall.\n[9]\nThere I found a copy of The Atlantic.  I wish I could say it became\na gateway into a wider world, but in fact I found it boring and\nincomprehensible.  Like a kid tasting whisky for the first time and\npretending to like it, I preserved that magazine as carefully as\nif it had been a book. I'm sure I still have it somewhere.  But\nthough it was evidence that there was, somewhere, a world that\nwasn't red delicious, I didn't find it till college.It wasn't just as consumers that the big companies made us similar.\nThey did as employers too.  Within companies there were powerful\nforces pushing people toward a single model of how to look and act.\nIBM was particularly notorious for this, but they were only a little\nmore extreme than other big companies.  And the models of how to\nlook and act varied little between companies. Meaning everyone\nwithin this world was expected to seem more or less the same.  And\nnot just those in the corporate world, but also everyone who aspired\nto it—which in the middle of the 20th century meant most people\nwho weren't already in it.  For most of the 20th century, working-class\npeople tried hard to look middle class.  You can see it in old\nphotos.  Few adults aspired to look dangerous in 1950.But the rise of national corporations didn't just compress us\nculturally.  It compressed us economically too, and on both ends.Along with giant national corporations, we got giant national labor\nunions.  And in the mid 20th century the corporations cut deals\nwith the unions where they paid over market price for labor.  Partly\nbecause the unions were monopolies.\n[10]\nPartly because, as\ncomponents of oligopolies themselves, the corporations knew they\ncould safely pass the cost on to their customers, because their\ncompetitors would have to as well.  And partly because in mid-century\nmost of the giant companies were still focused on finding new ways\nto milk economies of scale.  Just as startups rightly pay AWS a\npremium over the cost of running their own servers so they can focus\non growth, many of the big national corporations were willing to\npay a premium for labor.\n[11]As well as pushing incomes up from the bottom, by overpaying unions,\nthe big companies of the 20th century also pushed incomes down at\nthe top, by underpaying their top management. Economist J. K.\nGalbraith wrote in 1967 that \"There are few corporations in which\nit would be suggested that executive salaries are at a maximum.\"\n[12]To some extent this was an illusion.  Much of the de facto pay of\nexecutives never showed up on their income tax returns, because it\ntook the form of perks.  The higher the rate of income tax, the\nmore pressure there was to pay employees upstream of it.  (In the\nUK, where taxes were even higher than in the US, companies would\neven pay their kids' private school tuitions.)  One of the most\nvaluable things the big companies of the mid 20th century gave their\nemployees was job security, and this too didn't show up in tax\nreturns or income statistics. So the nature of employment in these\norganizations tended to yield falsely low numbers about economic\ninequality.  But even accounting for that, the big companies paid\ntheir best people less than market price.  There was no market; the\nexpectation was that you'd work for the same company for decades\nif not your whole career.\n[13]Your work was so illiquid there was little chance of getting market\nprice. But that same illiquidity also encouraged you not to seek\nit.  If the company promised to employ you till you retired and\ngive you a pension afterward, you didn't want to extract as much\nfrom it this year as you could. You needed to take care of the\ncompany so it could take care of you.  Especially when you'd been\nworking with the same group of people for decades.  If you tried\nto squeeze the company for more money, you were squeezing the\norganization that was going to take care of them.  Plus if\nyou didn't put the company first you wouldn't be promoted, and if\nyou couldn't switch ladders, promotion on this one was the only way\nup.\n[14]To someone who'd spent several formative years in the armed forces,\nthis situation didn't seem as strange as it does to us now.  From\ntheir point of view, as big company executives, they were high-ranking\nofficers.  They got paid a lot more than privates.  They got to\nhave expense account lunches at the best restaurants and fly around\non the company's Gulfstreams.  It probably didn't occur to most of\nthem to ask if they were being paid market price.The ultimate way to get market price is to work for yourself, by\nstarting your own company.  That seems obvious to any ambitious\nperson now.  But in the mid 20th century it was an alien concept.\nNot because starting one's own company seemed too ambitious, but\nbecause it didn't seem ambitious enough. Even as late as the 1970s,\nwhen I grew up, the ambitious plan was to get lots of education at\nprestigious institutions, and then join some other prestigious\ninstitution and work one's way up the hierarchy.  Your prestige was\nthe prestige of the institution you belonged to.  People did start\ntheir own businesses of course, but educated people rarely did,\nbecause in those days there was practically zero concept of starting\nwhat we now call a startup:\na business that starts small and grows\nbig.  That was much harder to do in the mid 20th century.  Starting\none's own business meant starting a business that would start small\nand stay small. Which in those days of big companies often meant\nscurrying around trying to avoid being trampled by elephants.  It\nwas more prestigious to be one of the executive class riding the\nelephant.By the 1970s, no one stopped to wonder where the big prestigious\ncompanies had come from in the first place.  It seemed like they'd\nalways been there, like the chemical elements.  And indeed, there\nwas a double wall between ambitious kids in the 20th century and\nthe origins of the big companies.  Many of the big companies were\nroll-ups that didn't have clear founders.  And when they did, the\nfounders didn't seem like us.  Nearly all of them had been uneducated,\nin the sense of not having been to college.  They were what Shakespeare\ncalled rude mechanicals.  College trained one to be a member of the\nprofessional classes.  Its graduates didn't expect to do the sort\nof grubby menial work that Andrew Carnegie or Henry Ford started\nout doing.\n[15]And in the 20th century there were more and more college graduates.\nThey increased from about 2% of the population in 1900 to about 25%\nin 2000. In the middle of the century our two big forces intersect,\nin the form of the GI Bill, which sent 2.2 million World War II\nveterans to college.  Few thought of it in these terms, but the\nresult of making college the canonical path for the ambitious was\na world in which it was socially acceptable to work for Henry Ford,\nbut not to be Henry Ford.\n[16]I remember this world well. I came of age just as it was starting\nto break up. In my childhood it was still dominant. Not quite so\ndominant as it had been.  We could see from old TV shows and yearbooks\nand the way adults acted that people in the 1950s and 60s had been\neven more conformist than us.  The mid-century model was already\nstarting to get old. But that was not how we saw it at the time.\nWe would at most have said that one could be a bit more daring in\n1975 than 1965.  And indeed, things hadn't changed much yet.But change was coming soon. And when the Duplo economy started to\ndisintegrate, it disintegrated in several different ways at once.\nVertically integrated companies literally dis-integrated because\nit was more efficient to.  Incumbents faced new competitors as (a)\nmarkets went global and (b) technical innovation started to trump\neconomies of scale, turning size from an asset into a liability.\nSmaller companies were increasingly able to survive as formerly\nnarrow channels to consumers broadened.  Markets themselves started\nto change faster, as whole new categories of products appeared. And\nlast but not least, the federal government, which had previously\nsmiled upon J. P. Morgan's world as the natural state of things,\nbegan to realize it wasn't the last word after all.What J. P. Morgan was to the horizontal axis, Henry Ford was to the\nvertical.  He wanted to do everything himself. The giant plant he\nbuilt at River Rouge between 1917 and 1928 literally took in iron\nore at one end and sent cars out the other.  100,000 people worked\nthere. At the time it seemed the future. But that is not how car\ncompanies operate today.  Now much of the design and manufacturing\nhappens in a long supply chain, whose products the car companies\nultimately assemble and sell.  The reason car companies operate\nthis way is that it works better.  Each company in the supply chain\nfocuses on what they know best. And they each have to do it well\nor they can be swapped out for another supplier.Why didn't Henry Ford realize that networks of cooperating companies\nwork better than a single big company? One reason is that supplier\nnetworks take a while to evolve. In 1917, doing everything himself\nseemed to Ford the only way to get the scale he needed. And the\nsecond reason is that if you want to solve a problem using a network\nof cooperating companies, you have to be able to coordinate their\nefforts, and you can do that much better with computers.  Computers\nreduce the transaction costs that Coase argued are the raison d'etre\nof corporations. That is a fundamental change.In the early 20th century, big companies were synonymous with\nefficiency.  In the late 20th century they were synonymous with\ninefficiency.  To some extent this was because the companies\nthemselves had become sclerotic.  But it was also because our\nstandards were higher.It wasn't just within existing industries that change occurred.\nThe industries themselves changed.  It became possible to make lots\nof new things, and sometimes the existing companies weren't the\nones who did it best.Microcomputers are a classic example. The market was pioneered by\nupstarts like Apple. When it got big enough, IBM decided it was\nworth paying attention to.  At the time IBM completely dominated\nthe computer industry. They assumed that all they had to do, now\nthat this market was ripe, was to reach out and pick it.  Most\npeople at the time would have agreed with them.  But what happened\nnext illustrated how much more complicated the world had become.\nIBM did launch a microcomputer.  Though quite successful, it did\nnot crush Apple.  But even more importantly, IBM itself ended up\nbeing supplanted by a supplier coming in from the side—from\nsoftware, which didn't even seem to be the same business.  IBM's\nbig mistake was to accept a non-exclusive license for DOS.  It must\nhave seemed a safe move at the time.  No other computer manufacturer\nhad ever been able to outsell them. What difference did it make if\nother manufacturers could offer DOS too?  The result of that\nmiscalculation was an explosion of inexpensive PC clones.  Microsoft\nnow owned the PC standard, and the customer.  And the microcomputer\nbusiness ended up being Apple vs Microsoft.Basically, Apple bumped IBM and then Microsoft stole its wallet.\nThat sort of thing did not happen to big companies in mid-century.\nBut it was going to happen increasingly often in the future.Change happened mostly by itself in the computer business.  In other\nindustries, legal obstacles had to be removed first.  Many of the\nmid-century oligopolies had been anointed by the federal government\nwith policies (and in wartime, large orders) that kept out competitors.\nThis didn't seem as dubious to government officials at the time as\nit sounds to us. They felt a two-party system ensured sufficient\ncompetition in politics.  It ought to work for business too.Gradually the government realized that anti-competitive policies\nwere doing more harm than good, and during the Carter administration\nit started to remove them. The word used for this process was\nmisleadingly narrow: deregulation.  What was really happening was\nde-oligopolization.  It happened to one industry after another.\nTwo of the most visible to consumers were air travel and long-distance\nphone service, which both became dramatically cheaper after\nderegulation.Deregulation also contributed to the wave of hostile takeovers in\nthe 1980s.  In the old days the only limit on the inefficiency of\ncompanies, short of actual bankruptcy, was the inefficiency of their\ncompetitors.  Now companies had to face absolute rather than relative\nstandards.  Any public company that didn't generate sufficient\nreturns on its assets risked having its management replaced with\none that would.  Often the new managers did this by breaking companies\nup into components that were more valuable separately.\n[17]Version 1 of the national economy consisted of a few big blocks\nwhose relationships were negotiated in back rooms by a handful of\nexecutives, politicians, regulators, and labor leaders.  Version 2\nwas higher resolution: there were more companies, of more different\nsizes, making more different things, and their relationships changed\nfaster. In this world there were still plenty of back room negotiations,\nbut more was left to market forces.  Which further accelerated the\nfragmentation.It's a little misleading to talk of versions when describing a\ngradual process, but not as misleading as it might seem.  There was\na lot of change in a few decades, and what we ended up with was\nqualitatively different.  The companies in the S&P 500 in 1958 had\nbeen there an average of 61 years. By 2012 that number was 18 years.\n[18]The breakup of the Duplo economy happened simultaneously with the\nspread of computing power. To what extent were computers a precondition?\nIt would take a book to answer that. Obviously the spread of computing\npower was a precondition for the rise of startups.  I suspect it\nwas for most of what happened in finance too.  But was it a\nprecondition for globalization or the LBO wave?  I don't know, but\nI wouldn't discount the possibility.  It may be that the refragmentation\nwas driven by computers in the way the industrial revolution was\ndriven by steam engines.  Whether or not computers were a precondition,\nthey have certainly accelerated it.The new fluidity of companies changed people's relationships with\ntheir employers. Why climb a corporate ladder that might be yanked\nout from under you?  Ambitious people started to think of a career\nless as climbing a single ladder than as a series of jobs that might\nbe at different companies. More movement (or even potential movement)\nbetween companies introduced more competition in salaries.  Plus\nas companies became smaller it became easier to estimate how much\nan employee contributed to the company's revenue.  Both changes\ndrove salaries toward market price. And since people vary dramatically\nin productivity, paying market price meant salaries started to\ndiverge.By no coincidence it was in the early 1980s that the term \"yuppie\"\nwas coined.  That word is not much used now, because the phenomenon\nit describes is so taken for granted, but at the time it was a label\nfor something novel. Yuppies were young professionals who made lots\nof money.  To someone in their twenties today, this wouldn't seem\nworth naming.  Why wouldn't young professionals make lots of money?\nBut until the 1980s being underpaid early in your career was part\nof what it meant to be a professional.  Young professionals were\npaying their dues, working their way up the ladder.  The rewards\nwould come later.  What was novel about yuppies was that they wanted\nmarket price for the work they were doing now.The first yuppies did not work for startups. That was still in the\nfuture.  Nor did they work for big companies. They were professionals\nworking in fields like law, finance, and consulting.  But their example\nrapidly inspired their peers.  Once they saw that new BMW 325i, they\nwanted one too.Underpaying people at the beginning of their career only works if\neveryone does it. Once some employer breaks ranks, everyone else\nhas to, or they can't get good people.  And once started this process\nspreads through the whole economy, because at the beginnings of\npeople's careers they can easily switch not merely employers but\nindustries.But not all young professionals benefitted. You had to produce to\nget paid a lot.  It was no coincidence that the first yuppies worked\nin fields where it was easy to measure that.More generally, an idea was returning whose name sounds old-fashioned\nprecisely because it was so rare for so long: that you could make\nyour fortune.  As in the past there were multiple ways to do it.\nSome made their fortunes by creating wealth, and others by playing\nzero-sum games. But once it became possible to make one's fortune,\nthe ambitious had to decide whether or not to.  A physicist who\nchose physics over Wall Street in 1990 was making a sacrifice that\na physicist in 1960 wasn't.The idea even flowed back into big companies.  CEOs of big companies\nmake more now than they used to, and I think much of the reason is\nprestige.  In 1960, corporate CEOs had immense prestige.  They were\nthe winners of the only economic game in town. But if they made as\nlittle now as they did then, in real dollar terms, they'd seem like\nsmall fry compared to professional athletes and whiz kids making\nmillions from startups and hedge funds. They don't like that idea,\nso now they try to get as much as they can, which is more than they\nhad been getting.\n[19]Meanwhile a similar fragmentation was happening at the other end\nof the economic scale.  As big companies' oligopolies became less\nsecure, they were less able to pass costs on to customers and thus\nless willing to overpay for labor.  And as the Duplo world of a few\nbig blocks fragmented into many companies of different sizes—some\nof them overseas—it became harder for unions to enforce their\nmonopolies.  As a result workers' wages also tended toward market\nprice. Which (inevitably, if unions had been doing their job) tended\nto be lower.  Perhaps dramatically so, if automation had decreased\nthe need for some kind of work.And just as the mid-century model induced social as well as economic\ncohesion, its breakup brought social as well as economic fragmentation.\nPeople started to dress and act differently.  Those who would later\nbe called the \"creative class\" became more mobile. People who didn't\ncare much for religion felt less pressure to go to church for\nappearances' sake, while those who liked it a lot opted for\nincreasingly colorful forms. Some switched from meat loaf to tofu,\nand others to Hot Pockets. Some switched from driving Ford sedans\nto driving small imported cars, and others to driving SUVs.  Kids\nwho went to private schools or wished they did started to dress\n\"preppy,\" and kids who wanted to seem rebellious made a conscious\neffort to look disreputable.  In a hundred ways people spread apart.\n[20]Almost four decades later, fragmentation is still increasing.  Has\nit been net good or bad?  I don't know; the question may be\nunanswerable.  Not entirely bad though.  We take for granted the\nforms of fragmentation we like, and worry only about the ones we\ndon't. But as someone who caught the tail end of mid-century\nconformism,\nI can tell you it was no utopia.\n[21]My goal here is not to say whether fragmentation has been good or\nbad, just to explain why it's happening.  With the centripetal\nforces of total war and 20th century oligopoly mostly gone, what\nwill happen next?  And more specifically, is it possible to reverse\nsome of the fragmentation we've seen?If it is, it will have to happen piecemeal.  You can't reproduce\nmid-century cohesion the way it was originally produced.  It would\nbe insane to go to war just to induce more national unity.  And\nonce you understand the degree to which the economic history of the\n20th century was a low-res version 1, it's clear you can't reproduce\nthat either.20th century cohesion was something that happened at least in a\nsense naturally.  The war was due mostly to external forces, and\nthe Duplo economy was an evolutionary phase.  If you want cohesion\nnow, you'd have to induce it deliberately.  And it's not obvious\nhow.  I suspect the best we'll be able to do is address the symptoms\nof fragmentation.  But that may be enough.The form of fragmentation people worry most about lately is economic inequality, and if you want to eliminate\nthat you're up against a truly formidable headwind—one that has\nbeen in operation since the stone age: technology.  Technology is\na lever. It magnifies work.  And the lever not only grows increasingly\nlong, but the rate at which it grows is itself increasing.Which in turn means the variation in the amount of wealth people\ncan create has not only been increasing, but accelerating.  The\nunusual conditions that prevailed in the mid 20th century masked\nthis underlying trend.  The ambitious had little choice but to join\nlarge organizations that made them march in step with lots of other\npeople—literally in the case of the armed forces, figuratively\nin the case of big corporations. Even if the big corporations had\nwanted to pay people proportionate to their value, they couldn't\nhave figured out how.  But that constraint has gone now.  Ever since\nit started to erode in the 1970s, we've seen the underlying forces\nat work again.\n[22]Not everyone who gets rich now does it by creating wealth, certainly.\nBut a significant number do, and the Baumol Effect means all their\npeers get dragged along too.\n[23]\nAnd as long as it's possible to\nget rich by creating wealth, the default tendency will be for\neconomic inequality to increase.  Even if you eliminate all the\nother ways to get rich.  You can mitigate this with subsidies at\nthe bottom and taxes at the top, but unless taxes are high enough\nto discourage people from creating wealth, you're always going to\nbe fighting a losing battle against increasing variation in\nproductivity.\n[24]That form of fragmentation, like the others, is here to stay.  Or\nrather, back to stay.  Nothing is forever, but the tendency toward\nfragmentation should be more forever than most things, precisely\nbecause it's not due to any particular cause.  It's simply a reversion\nto the mean. When Rockefeller said individualism was gone, he was\nright for a hundred years.  It's back now, and that's likely to be\ntrue for longer.I worry that if we don't acknowledge this, we're headed for trouble.\nIf we think 20th century cohesion disappeared because of few policy\ntweaks, we'll be deluded into thinking we can get it back (minus\nthe bad parts, somehow) with a few countertweaks.  And then we'll\nwaste our time trying to eliminate fragmentation, when we'd be\nbetter off thinking about how to mitigate its consequences.Notes[1]\nLester Thurow, writing in 1975, said the wage differentials\nprevailing at the end of World War II had become so embedded that\nthey \"were regarded as 'just' even after the egalitarian pressures\nof World War II had disappeared.  Basically, the same differentials\nexist to this day, thirty years later.\" But Goldin and Margo think\nmarket forces in the postwar period also helped preserve the wartime\ncompression of wages—specifically increased demand for unskilled\nworkers, and oversupply of educated ones.(Oddly enough, the American custom of having employers pay for\nhealth insurance derives from efforts by businesses to circumvent\nNWLB wage controls in order to attract workers.)[2]\nAs always, tax rates don't tell the whole story.  There were\nlots of exemptions, especially for individuals.  And in World War\nII the tax codes were so new that the government had little acquired\nimmunity to tax avoidance.  If the rich paid high taxes during the\nwar it was more because they wanted to than because they had to.After the war, federal tax receipts as a percentage of GDP were\nabout the same as they are now. In fact, for the entire period since\nthe war, tax receipts have stayed close to 18% of GDP, despite\ndramatic changes in tax rates.  The lowest point occurred when\nmarginal income tax rates were highest: 14.1% in 1950.  Looking at\nthe data, it's hard to avoid the conclusion that tax rates have had\nlittle effect on what people actually paid.[3]\nThough in fact the decade preceding the war had been a time\nof unprecedented federal power, in response to the Depression.\nWhich is not entirely a coincidence, because the Depression was one\nof the causes of the war.  In many ways the New Deal was a sort of\ndress rehearsal for the measures the federal government took during\nwartime.  The wartime versions were much more drastic and more\npervasive though.  As Anthony Badger wrote, \"for many Americans the\ndecisive change in their experiences came not with the New Deal but\nwith World War II.\"[4]\nI don't know enough about the origins of the world wars to\nsay, but it's not inconceivable they were connected to the rise of\nbig corporations. If that were the case, 20th century cohesion would\nhave a single cause.[5]\nMore precisely, there was a bimodal economy consisting, in\nGalbraith's words, of \"the world of the technically dynamic, massively\ncapitalized and highly organized corporations on the one hand and\nthe hundreds of thousands of small and traditional proprietors on\nthe other.\" Money, prestige, and power were concentrated in the\nformer, and there was near zero crossover.[6]\nI wonder how much of the decline in families eating together\nwas due to the decline in families watching TV together afterward.[7]\nI know when this happened because it was the season Dallas\npremiered.  Everyone else was talking about what was happening on\nDallas, and I had no idea what they meant.[8]\nI didn't realize it till I started doing research for this\nessay, but the meretriciousness of the products I grew up with is\na well-known byproduct of oligopoly. When companies can't compete\non price, they compete on tailfins.[9]\nMonroeville Mall was at the time of its completion in 1969\nthe largest in the country. In the late 1970s the movie Dawn of\nthe Dead was shot there. Apparently the mall was not just the\nlocation of the movie, but its inspiration; the crowds of shoppers\ndrifting through this huge mall reminded George Romero of zombies.\nMy first job was scooping ice cream in the Baskin-Robbins.[10]\nLabor unions were exempted from antitrust laws by the Clayton\nAntitrust Act in 1914 on the grounds that a person's work is not\n\"a commodity or article of commerce.\" I wonder if that means service\ncompanies are also exempt.[11]\nThe relationships between unions and unionized companies can\neven be symbiotic, because unions will exert political pressure to\nprotect their hosts.  According to Michael Lind, when politicians\ntried to attack the A&P supermarket chain because it was putting\nlocal grocery stores out of business, \"A&P successfully defended\nitself by allowing the unionization of its workforce in 1938, thereby\ngaining organized labor as a constituency.\" I've seen this phenomenon\nmyself: hotel unions are responsible for more of the political\npressure against Airbnb than hotel companies.[12]\nGalbraith was clearly puzzled that corporate executives would\nwork so hard to make money for other people (the shareholders)\ninstead of themselves.  He devoted much of The New Industrial\nState to trying to figure this out.His theory was that professionalism had replaced money as a motive,\nand that modern corporate executives were, like (good) scientists,\nmotivated less by financial rewards than by the desire to do good\nwork and thereby earn the respect of their peers.  There is something\nin this, though I think lack of movement between companies combined\nwith self-interest explains much of observed behavior.[13]\nGalbraith (p. 94) says a 1952 study of the 800 highest paid\nexecutives at 300 big corporations found that three quarters of\nthem had been with their company for more than 20 years.[14]\nIt seems likely that in the first third of the 20th century\nexecutive salaries were low partly because companies then were more\ndependent on banks, who would have disapproved if executives got\ntoo much.  This was certainly true in the beginning. The first big\ncompany CEOs were J. P. Morgan's hired hands.Companies didn't start to finance themselves with retained earnings\ntill the 1920s.  Till then they had to pay out their earnings in\ndividends, and so depended on banks for capital for expansion.\nBankers continued to sit on corporate boards till the Glass-Steagall\nact in 1933.By mid-century big companies funded 3/4 of their growth from earnings.\nBut the early years of bank dependence, reinforced by the financial\ncontrols of World War II, must have had a big effect on social\nconventions about executive salaries.  So it may be that the lack\nof movement between companies was as much the effect of low salaries\nas the cause.Incidentally, the switch in the 1920s to financing growth with\nretained earnings was one cause of the 1929 crash.  The banks now\nhad to find someone else to lend to, so they made more margin loans.[15]\nEven now it's hard to get them to. One of the things I find\nhardest to get into the heads of would-be startup founders is how\nimportant it is to do certain kinds of menial work early in the\nlife of a company.  Doing things that don't\nscale is to how Henry Ford got started as a high-fiber diet is\nto the traditional peasant's diet: they had no choice but to do the\nright thing, while we have to make a conscious effort.[16]\nFounders weren't celebrated in the press when I was a kid.\n\"Our founder\" meant a photograph of a severe-looking man with a\nwalrus mustache and a wing collar who had died decades ago. The\nthing to be when I was a kid was an executive. If you weren't\naround then it's hard to grasp the cachet that term had. The fancy\nversion of everything was called the \"executive\" model.[17]\nThe wave of hostile takeovers in the 1980s was enabled by a\ncombination of circumstances: court decisions striking down state\nanti-takeover laws, starting with the Supreme Court's 1982 decision\nin Edgar v. MITE Corp.; the Reagan administration's comparatively\nsympathetic attitude toward takeovers; the Depository Institutions\nAct of 1982, which allowed banks and savings and loans to buy\ncorporate bonds; a new SEC rule issued in 1982 (rule 415) that made\nit possible to bring corporate bonds to market faster; the creation\nof the junk bond business by Michael Milken; a vogue for conglomerates\nin the preceding period that caused many companies to be combined\nthat never should have been; a decade of inflation that left many\npublic companies trading below the value of their assets; and not\nleast, the increasing complacency of managements.[18]\nFoster, Richard. \"Creative Destruction Whips through Corporate\nAmerica.\" Innosight, February 2012.[19]\nCEOs of big companies may be overpaid. I don't know enough\nabout big companies to say. But it is certainly not impossible for\na CEO to make 200x as much difference to a company's revenues as\nthe average employee.  Look at what Steve Jobs did for Apple when\nhe came back as CEO.  It would have been a good deal for the board\nto give him 95% of the company.  Apple's market cap the day Steve\ncame back in July 1997 was 1.73 billion. 5% of Apple now (January\n2016) would be worth about 30 billion.  And it would not be if Steve\nhadn't come back; Apple probably wouldn't even exist anymore.Merely including Steve in the sample might be enough to answer the\nquestion of whether public company CEOs in the aggregate are overpaid.\nAnd that is not as facile a trick as it might seem, because the\nbroader your holdings, the more the aggregate is what you care\nabout.[20]\nThe late 1960s were famous for social upheaval. But that was\nmore rebellion (which can happen in any era if people are provoked\nsufficiently) than fragmentation.  You're not seeing fragmentation\nunless you see people breaking off to both left and right.[21]\nGlobally the trend has been in the other direction.  While\nthe US is becoming more fragmented, the world as a whole is becoming\nless fragmented, and mostly in good ways.[22]\nThere were a handful of ways to make a fortune in the mid\n20th century.  The main one was drilling for oil, which was open\nto newcomers because it was not something big companies could\ndominate through economies of scale.  How did individuals accumulate\nlarge fortunes in an era of such high taxes?  Giant tax loopholes\ndefended by two of the most powerful men in Congress, Sam Rayburn\nand Lyndon Johnson.But becoming a Texas oilman was not in 1950 something one could\naspire to the way starting a startup or going to work on Wall Street\nwere in 2000, because (a) there was a strong local component and\n(b) success depended so much on luck.[23]\nThe Baumol Effect induced by startups is very visible in\nSilicon Valley.  Google will pay people millions of dollars a year\nto keep them from leaving to start or join startups.[24]\nI'm not claiming variation in productivity is the only cause\nof economic inequality in the US. But it's a significant cause, and\nit will become as big a cause as it needs to, in the sense that if\nyou ban other ways to get rich, people who want to get rich will\nuse this route instead.Thanks to Sam Altman, Trevor Blackwell, Paul Buchheit, Patrick\nCollison, Ron Conway, Chris Dixon, Benedict Evans, Richard Florida,\nBen Horowitz, Jessica Livingston, Robert Morris, Tim O'Reilly, Geoff\nRalston, Max Roser, Alexia Tsotsis, and Qasar Younis for reading\ndrafts of this.  Max also told me about several valuable sources.BibliographyAllen, Frederick Lewis. The Big Change. Harper, 1952.Averitt, Robert. The Dual Economy. Norton, 1968.Badger, Anthony. The New Deal. Hill and Wang, 1989.Bainbridge, John. The Super-Americans. Doubleday, 1961.Beatty, Jack. Collossus. Broadway, 2001.Brinkley, Douglas. Wheels for the World. Viking, 2003.Brownleee, W. Elliot. Federal Taxation in America. Cambridge, 1996.Chandler, Alfred. The Visible Hand. Harvard, 1977.Chernow, Ron. The House of Morgan. Simon & Schuster, 1990.Chernow, Ron. Titan: The Life of John D. Rockefeller. Random House,\n1998.Galbraith, John. The New Industrial State. Houghton Mifflin, 1967.Goldin, Claudia and Robert A. Margo. \"The Great Compression: The\nWage Structure in the United States at Mid-Century.\" NBER Working\nPaper 3817, 1991.Gordon, John. An Empire of Wealth. HarperCollins, 2004.Klein, Maury. The Genesis of Industrial America, 1870-1920. Cambridge,\n2007.Lind, Michael. Land of Promise. HarperCollins, 2012.Mickelthwaite, John, and Adrian Wooldridge. The Company. Modern\nLibrary, 2003.Nasaw, David. Andrew Carnegie. Penguin, 2006.Sobel, Robert. The Age of Giant Corporations. Praeger, 1993.Thurow, Lester. Generating Inequality: Mechanisms of Distribution.\nBasic Books, 1975.Witte, John. The Politics and Development of the Federal Income\nTax. Wisconsin, 1985.Related:"},{"title":"The Ronco Principle","text":"January 2015No one, VC or angel, has invested in more of the top startups than\nRon Conway.  He knows what happened in every deal in the Valley,\nhalf the time because he arranged it.And yet he's a super nice guy.  In fact, nice is not the word.\nRonco is good. I know of zero instances in which he has behaved\nbadly.  It's hard even to imagine.When I first came to Silicon Valley I thought \"How lucky that someone\nso powerful is so benevolent.\"  But gradually I realized it wasn't\nluck.  It was by being benevolent that Ronco became so powerful.\nAll the deals he gets to invest in come to him through referrals.\nGoogle did. Facebook did. Twitter was a referral from Evan Williams\nhimself.  And the reason so many people refer deals to him is that\nhe's proven himself to be a good guy.Good does not mean being a pushover.  I would not want to face an\nangry Ronco.  But if Ron's angry at you, it's because you did\nsomething wrong.  Ron is so old school he's Old Testament.  He will\nsmite you in his just wrath, but there's no malice in it.In almost every domain there are advantages to seeming good.  It\nmakes people trust you.  But actually being good is an expensive\nway to seem good.  To an amoral person it might seem to be overkill.In some fields it might be, but apparently not in the startup world.\nThough plenty of investors are jerks, there is a clear trend among\nthem: the most successful investors are also the most upstanding.\n[1]It was not always this way.  I would not feel confident saying that\nabout investors twenty years ago.What changed?  The startup world became more transparent and more\nunpredictable.  Both make it harder to seem good without actually\nbeing good.It's obvious why transparency has that effect.  When an investor\nmaltreats a founder now, it gets out.  Maybe not all the way to the\npress, but other founders hear about it, and that means that investor\nstarts to lose deals.\n[2]The effect of unpredictability is more subtle.  It increases the\nwork of being inconsistent.  If you're going to be two-faced, you\nhave to know who you should be nice to and who you can get away\nwith being nasty to.  In the startup world, things change so rapidly\nthat you can't tell.  The random college kid you talk to today might\nin a couple years be the CEO of the hottest startup in the Valley.\nIf you can't tell who to be nice to, you have to be nice to everyone.\nAnd probably the only people who can manage that are the people who\nare genuinely good.In a sufficiently connected and unpredictable world, you can't seem\ngood without being good.As often happens, Ron discovered how to be the investor of the\nfuture by accident.  He didn't foresee the future of startup\ninvesting, realize it would pay to be upstanding, and force himself\nto behave that way. It would feel unnatural to him to behave any\nother way.  He was already\nliving in the future.Fortunately that future is not limited to the startup world.  The\nstartup world is more transparent and unpredictable than most, but\nalmost everywhere the trend is in that direction.Notes[1]\nI'm not saying that if you sort investors by benevolence\nyou've also sorted them by returns, but rather that if you do a\nscatterplot with benevolence on the x axis and returns on the y,\nyou'd see a clear upward trend.[2]\nY Combinator in particular, because it aggregates data\nfrom so many startups, has a pretty comprehensive view of\ninvestor behavior.Thanks to Sam Altman and Jessica Livingston for reading drafts of\nthis."},{"title":"The Roots of Lisp","text":"May 2001\n(I wrote this article to help myself understand exactly\nwhat McCarthy discovered.  You don't need to know this stuff\nto program in Lisp, but it should be helpful to\nanyone who wants to\nunderstand the essence of Lisp-- both in the sense of its\norigins and its semantic core.  The fact that it has such a core\nis one of Lisp's distinguishing features, and the reason why,\nunlike other languages, Lisp has dialects.)In 1960, John\nMcCarthy published a remarkable paper in\nwhich he did for programming something like what Euclid did for\ngeometry. He showed how, given a handful of simple\noperators and a notation for functions, you can\nbuild a whole programming language.\nHe called this language Lisp, for \"List Processing,\"\nbecause one of his key ideas was to use a simple\ndata structure called a list for both\ncode and data.It's worth understanding what McCarthy discovered, not\njust as a landmark in the history of computers, but as\na model for what programming is tending to become in\nour own time.  It seems to me that there have been\ntwo really clean, consistent models of programming so\nfar: the C model and the Lisp model.\nThese two seem points of high ground, with swampy lowlands\nbetween them.  As computers have grown more powerful,\nthe new languages being developed have been moving\nsteadily toward the Lisp model.  A popular recipe\nfor new programming languages in the past 20 years\nhas been to take the C model of computing and add to\nit, piecemeal, parts taken from the Lisp model,\nlike runtime typing and garbage collection.In this article I'm going to try to explain in the\nsimplest possible terms what McCarthy discovered.\nThe point is not just to learn about an interesting\ntheoretical result someone figured out forty years ago,\nbut to show where languages are heading.\nThe unusual thing about Lisp-- in fact, the defining\nquality of Lisp-- is that it can be written in\nitself.  To understand what McCarthy meant by this,\nwe're going to retrace his steps, with his mathematical\nnotation translated into running Common Lisp code."},{"title":"The Submarine","text":"April 2005\"Suits make a corporate comeback,\" says the New\nYork Times.  Why does this sound familiar?  Maybe because\nthe suit was also back in February,\nSeptember\n2004, June\n2004, March\n2004, September\n2003,\nNovember\n2002,\nApril 2002,\nand February\n2002.\nWhy do the media keep running stories saying suits are back?  Because\nPR firms tell\nthem to.  One of the most surprising things I discovered\nduring my brief business career was the existence of the PR industry,\nlurking like a huge, quiet submarine beneath the news.  Of the\nstories you read in traditional media that aren't about politics,\ncrimes, or disasters, more than half probably come from PR firms.I know because I spent years hunting such \"press hits.\"  Our startup spent\nits entire marketing budget on PR: at a time when we were assembling\nour own computers to save money, we were paying a PR firm $16,000\na month.  And they were worth it.  PR is the news equivalent of\nsearch engine optimization; instead of buying ads, which readers\nignore, you get yourself inserted directly into the stories.  [1]Our PR firm\nwas one of the best in the business.  In 18 months, they got press\nhits in over 60 different publications.\nAnd we weren't the only ones they did great things for.\nIn 1997 I got a call from another\nstartup founder considering hiring them to promote his company.  I\ntold him they were PR gods, worth every penny of their outrageous\nfees.  But I remember thinking his company's name was odd.\nWhy call an auction site \"eBay\"?SymbiosisPR is not dishonest.  Not quite.  In fact, the reason the best PR\nfirms are so effective is precisely that they aren't dishonest.\nThey give reporters genuinely valuable information.  A good PR firm\nwon't bug reporters just because the client tells them to; they've\nworked hard to build their credibility with reporters, and they\ndon't want to destroy it by feeding them mere propaganda.If anyone is dishonest, it's the reporters.  The main reason PR\nfirms exist is that reporters are lazy.  Or, to put it more nicely,\noverworked.  Really they ought to be out there digging up stories\nfor themselves.  But it's so tempting to sit in their offices and\nlet PR firms bring the stories to them.  After all, they know good\nPR firms won't lie to them.A good flatterer doesn't lie, but tells his victim selective truths\n(what a nice color your eyes are). Good PR firms use the same\nstrategy: they give reporters stories that are true, but whose truth\nfavors their clients.For example, our PR firm often pitched stories about how the Web\nlet small merchants compete with big ones.  This was perfectly true.\nBut the reason reporters ended up writing stories about this\nparticular truth, rather than some other one, was that small merchants\nwere our target market, and we were paying the piper.Different publications vary greatly in their reliance on PR firms.\nAt the bottom of the heap are the trade press, who make most of\ntheir money from advertising and would give the magazines away for\nfree if advertisers would let them.  [2] The average\ntrade publication is a  bunch of ads, glued together by just enough\narticles to make it look like a magazine.  They're so desperate for\n\"content\" that some will print your press releases almost verbatim,\nif you take the trouble to write them to read like articles.At the other extreme are publications like the New York Times\nand the Wall Street Journal.  Their reporters do go out and\nfind their own stories, at least some of the time.  They'll listen\nto PR firms, but briefly and skeptically.  We managed to get press\nhits in almost every publication we wanted, but we never managed\nto crack the print edition of the Times.  [3]The weak point of the top reporters is not laziness, but vanity.\nYou don't pitch stories to them.  You have to approach them as if\nyou were a specimen under their all-seeing microscope, and make it\nseem as if the story you want them to run is something they thought\nof themselves.Our greatest PR coup was a two-part one.  We estimated, based on\nsome fairly informal math, that there were about 5000 stores on the\nWeb.  We got one paper to print this number, which seemed neutral\nenough.  But once this \"fact\" was out there in print, we could quote\nit to other publications, and claim that with 1000 users we had 20%\nof the online store market.This was roughly true.  We really did have the biggest share of the\nonline store market, and 5000 was our best guess at its size.  But\nthe way the story appeared in the press sounded a lot more definite.Reporters like definitive statements.  For example, many of the\nstories about Jeremy Jaynes's conviction say that he was one of the\n10 worst spammers.  This \"fact\" originated in Spamhaus's ROKSO list,\nwhich I think even Spamhaus would admit is a rough guess at the top\nspammers.  The first stories about Jaynes cited this source, but\nnow it's simply repeated as if it were part of the indictment.\n[4]All you can say with certainty about Jaynes is that he was a fairly\nbig spammer.  But reporters don't want to print vague stuff like\n\"fairly big.\"  They want statements with punch, like \"top ten.\" And\nPR firms give them what they want.\nWearing suits, we're told, will make us\n3.6\npercent more productive.BuzzWhere the work of PR firms really does get deliberately misleading is in\nthe generation of \"buzz.\"  They usually feed the same story to\nseveral different publications at once.  And when readers see similar\nstories in multiple places, they think there is some important trend\nafoot.  Which is exactly what they're supposed to think.When Windows 95 was launched, people waited outside stores\nat midnight to buy the first copies.  None of them would have been\nthere without PR firms, who generated such a buzz in\nthe news media that it became self-reinforcing, like a nuclear chain\nreaction.I doubt PR firms realize it yet, but the Web makes it possible to\ntrack them at work.  If you search for the obvious phrases, you\nturn up several efforts over the years to place stories about the\nreturn of the suit.  For example, the Reuters article\nthat got picked up by USA\nToday in September 2004.  \"The suit is back,\" it begins.Trend articles like this are almost always the work of\nPR firms.  Once you know how to read them, it's straightforward to\nfigure out who the client is.  With trend stories, PR firms usually\nline up one or more \"experts\" to talk about the industry generally.\nIn this case we get three: the NPD Group, the creative director of\nGQ, and a research director at Smith Barney.  [5] When\nyou get to the end of the experts, look for the client. And bingo,\nthere it is: The Men's Wearhouse.Not surprising, considering The Men's Wearhouse was at that moment\nrunning ads saying \"The Suit is Back.\"  Talk about a successful\npress hit-- a wire service article whose first sentence is your own\nad copy.The secret to finding other press hits from a given pitch\nis to realize that they all started from the same document back at\nthe PR firm.  Search for a few key phrases and the names of the\nclients and the experts, and you'll turn up other variants of this\nstory.Casual\nfridays are out and dress codes are in writes Diane E. Lewis\nin The Boston Globe.  In a remarkable coincidence, Ms. Lewis's\nindustry contacts also include the creative director of GQ.Ripped jeans and T-shirts are out, writes Mary Kathleen Flynn in\nUS News & World Report.  And she too knows the\ncreative director of GQ.Men's suits\nare back writes Nicole Ford in Sexbuzz.Com (\"the ultimate men's\nentertainment magazine\").Dressing\ndown loses appeal as men suit up at the office writes Tenisha\nMercer of The Detroit News.Now that so many news articles are online, I suspect you could find\na similar pattern for most trend stories placed by PR firms.  I\npropose we call this new sport \"PR diving,\" and I'm sure there are\nfar more striking examples out there than this clump of five stories.OnlineAfter spending years chasing them, it's now second nature\nto me to recognize press hits for what they are.  But before we\nhired a PR firm I had no idea where articles in the mainstream media\ncame from.  I could tell a lot of them were crap, but I didn't\nrealize why.Remember the exercises in critical reading you did in school, where\nyou had to look at a piece of writing and step back and ask whether\nthe author was telling the whole truth?  If you really want to be\na critical reader, it turns out you have to step back one step\nfurther, and ask not just whether the author is telling the truth,\nbut why he's writing about this subject at all.Online, the answer tends to be a lot simpler.  Most people who\npublish online write what they write for the simple reason that\nthey want to.  You\ncan't see the fingerprints of PR firms all over the articles, as\nyou can in so many print publications-- which is one of the reasons,\nthough they may not consciously realize it, that readers trust\nbloggers more than Business Week.I was talking recently to a friend who works for a\nbig newspaper.  He thought the print media were in serious trouble,\nand that they were still mostly in denial about it.  \"They think\nthe decline is cyclic,\" he said.  \"Actually it's structural.\"In other words, the readers are leaving, and they're not coming\nback.Why? I think the main reason is that the writing online is more honest.\nImagine how incongruous the New York Times article about\nsuits would sound if you read it in a blog:\nThe urge to look corporate-- sleek, commanding,\nprudent, yet with just a touch of hubris on your well-cut sleeve--\nis an unexpected development in a time of business disgrace.\n\nThe problem\nwith this article is not just that it originated in a PR firm.\nThe whole tone is bogus.  This is the tone of someone writing down\nto their audience.Whatever its flaws, the writing you find online\nis authentic.  It's not mystery meat cooked up\nout of scraps of pitch letters and press releases, and pressed into\nmolds of zippy\njournalese.  It's people writing what they think.I didn't realize, till there was an alternative, just how artificial\nmost of the writing in the mainstream media was.  I'm not saying\nI used to believe what I read in Time and Newsweek.  Since high\nschool, at least, I've thought of magazines like that more as\nguides to what ordinary people were being\ntold to think than as\nsources of information.  But I didn't realize till the last\nfew years that writing for publication didn't have to mean writing\nthat way.  I didn't realize you could write as candidly and\ninformally as you would if you were writing to a friend.Readers aren't the only ones who've noticed the\nchange.  The PR industry has too.\nA hilarious article\non the site of the PR Society of America gets to the heart of the\nmatter:\nBloggers are sensitive about becoming mouthpieces\nfor other organizations and companies, which is the reason they\nbegan blogging in the first place.\nPR people fear bloggers for the same reason readers\nlike them.  And that means there may be a struggle ahead.  As\nthis new kind of writing draws readers away from traditional media, we\nshould be prepared for whatever PR mutates into to compensate.\nWhen I think\nhow hard PR firms work to score press hits in the traditional\nmedia, I can't imagine they'll work any less hard to feed stories\nto bloggers, if they can figure out how.Notes[1] PR has at least\none beneficial feature: it favors small companies.  If PR didn't\nwork, the only alternative would be to advertise, and only big\ncompanies can afford that.[2] Advertisers pay\nless for ads in free publications, because they assume readers\nignore something they get for free.  This is why so many trade\npublications nominally have a cover price and yet give away free\nsubscriptions with such abandon.[3] Different sections\nof the Times vary so much in their standards that they're\npractically different papers.  Whoever fed the style section reporter\nthis story about suits coming back would have been sent packing by\nthe regular news reporters.[4] The most striking\nexample I know of this type is the \"fact\" that the Internet worm\nof 1988 infected 6000 computers. I was there when it was cooked up,\nand this was the recipe: someone guessed that there were about\n60,000 computers attached to the Internet, and that the worm might\nhave infected ten percent of them.Actually no one knows how many computers the worm infected, because\nthe remedy was to reboot them, and this destroyed all traces.  But\npeople like numbers.  And so this one is now replicated\nall over the Internet, like a little worm of its own.[5] Not all were\nnecessarily supplied by the PR firm. Reporters sometimes call a few\nadditional sources on their own, like someone adding a few fresh\nvegetables to a can of soup.\nThanks to Ingrid Basset, Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, Jackie McDonough, Robert Morris, and Aaron Swartz (who\nalso found the PRSA article) for reading drafts of this.Correction: Earlier versions used a recent\nBusiness Week article mentioning del.icio.us as an example\nof a press hit, but Joshua Schachter tells me\nit was spontaneous."},{"title":"The Syntax Question","text":"(Guy Steele and Richard Gabriel on a question that I predict\nwill arise more and more, though from the other direction, as\nmainstream languages approach Lisp.)The idea of introducing Algol-like syntax into Lisp keeps popping up\nand has seldom failed to create enormous controversy between those who\nfind the universal use of S-expressions a technical advantage (and\ndon't mind the admitted relative clumsiness of S-expressions for\nnumerical expressions) and those who are certain that algebraic syntax\nis more concise, more convenient, or even more natural (whatever\nthat may mean, considering that all these notations are artificial).We conjecture that Algol-style syntax has not really caught on in the\nLisp community as a whole for two reasons.  First, there are not\nenough special symbols to go around.  When your domain of discourse is\nlimited to numbers or characters, there are only so many operations of\ninterest, so it is not difficult to assign one special character to\neach and be done with it.  But Lisp has a much richer domain of\ndiscourse, and a Lisp programmer often approaches an application as\nyet another exercise in language design; the style typically involves\ndesigning new data structures and new functions to operate on\nthem-- perhaps dozens or hundreds-- and it's too hard to invent that\nmany distinct symbols (though the APL community certainly has tried).\nUltimately one must always fall back on a general function-call\nnotation; it's just that Lisp programmers don't wait until they fail.Second, and perhaps more important, Algol-style syntax makes programs\nlook less like the data structures used to represent them.  In a\nculture where the ability to manipulate representations of programs is\na central paradigm, a notation that distances the appearance of a\nprogram from the appearance of its representation as data is not\nlikely to be warmly received (and this was, and is, one of the\nprincipal objections to the inclusion of loop in Common Lisp).On the other hand, precisely because Lisp makes it easy to play with\nprogram representations, it is always easy for the novice to\nexperiment with alternative notations.  Therefore we expect future\ngenerations of Lisp programmers to continue to reinvent Algol-style\nsyntax for Lisp, over and over and over again, and we are equally\nconfident that they will continue, after an initial period of\ninfatuation, to reject it.  (Perhaps this process should be regarded\nas a rite of passage for Lisp hackers.)- Steele and Gabriel, \"The Evolution of Lisp\""},{"title":"The Top Idea in Your Mind","text":"July 2010I realized recently that what one thinks about in the shower in the\nmorning is more important than I'd thought.  I knew it was a good\ntime to have ideas.  Now I'd go further: now I'd say it's hard to\ndo a really good job on anything you don't think about in the shower.Everyone who's worked on difficult problems is probably familiar\nwith the phenomenon of working hard to figure something out, failing,\nand then suddenly seeing the answer a bit later while doing something\nelse. There's a kind of thinking you do without trying to.  I'm\nincreasingly convinced this type of thinking is not merely helpful\nin solving hard problems, but necessary.  The tricky part is, you\ncan only control it indirectly.\n[1]I think most people have one top idea in their mind at any given\ntime.  That's the idea their thoughts will drift toward when they're\nallowed to drift freely.  And this idea will thus tend to get all\nthe benefit of that type of thinking, while others are starved of\nit.  Which means it's a disaster to let the wrong idea become the\ntop one in your mind.What made this clear to me was having an idea I didn't want as the\ntop one in my mind for two long stretches.I'd noticed startups got way less done when they started raising\nmoney, but it was not till we ourselves raised money that I understood\nwhy.  The problem is not the actual time it takes to meet with\ninvestors.  The problem is that once you start raising money, raising\nmoney becomes the top idea in your mind.  That becomes what you\nthink about when you take a shower in the morning.  And that means\nother questions aren't.I'd hated raising money when I was running Viaweb, but I'd forgotten\nwhy I hated it so much.  When we raised money for Y Combinator, I\nremembered.  Money matters are particularly likely to become the\ntop idea in your mind.  The reason is that they have to be.  It's\nhard to get money.  It's not the sort of thing that happens by\ndefault.  It's not going to happen unless you let it become the\nthing you think about in the shower.  And then you'll make little\nprogress on anything else you'd rather be working on.\n[2](I hear similar complaints from friends who are professors.  Professors\nnowadays seem to have become professional fundraisers who do a\nlittle research on the side.  It may be time to fix that.)The reason this struck me so forcibly is that for most of the\npreceding 10 years I'd been able to think about what I wanted.  So\nthe contrast when I couldn't was sharp.  But I don't think this\nproblem is unique to me, because just about every startup I've seen\ngrinds to a halt when they start raising money—or talking\nto acquirers.You can't directly control where your thoughts drift.  If you're\ncontrolling them, they're not drifting.  But you can control them\nindirectly, by controlling what situations you let yourself get\ninto.  That has been the lesson for me: be careful what you let\nbecome critical to you.  Try to get yourself into situations where\nthe most urgent problems are ones you want to think about.You don't have complete control, of course.  An emergency could\npush other thoughts out of your head.  But barring emergencies you\nhave a good deal of indirect control over what becomes the top idea\nin your mind.I've found there are two types of thoughts especially worth\navoiding—thoughts like the Nile Perch in the way they push\nout more interesting ideas.  One I've already mentioned: thoughts\nabout money. Getting money is almost by definition an attention\nsink.\nThe other is disputes.  These too are engaging in the\nwrong way: they have the same velcro-like shape as genuinely\ninteresting ideas, but without the substance.  So avoid disputes\nif you want to get real work done.\n[3]Even Newton fell into this trap.  After publishing his theory of\ncolors in 1672 he found himself distracted by disputes for years,\nfinally concluding that the only solution was to stop publishing:\nI see I have made myself a slave to Philosophy, but if I get free\nof Mr Linus's business I will resolutely bid adew to it eternally,\nexcepting what I do for my privat satisfaction or leave to come\nout after me.  For I see a man must either resolve to put out\nnothing new or become a slave to defend it.\n[4]\nLinus and his students at Liege were among the more tenacious\ncritics.  Newton's biographer Westfall seems to feel he was\noverreacting:\nRecall that at the time he wrote, Newton's \"slavery\" consisted\nof five replies to Liege, totalling fourteen printed pages, over\nthe course of a year.\nI'm more sympathetic to Newton. The problem was not the 14 pages,\nbut the pain of having this stupid controversy constantly reintroduced\nas the top idea in a mind that wanted so eagerly to think about\nother things.Turning the other cheek turns out to have selfish advantages.\nSomeone who does you an injury hurts you twice: first by the injury\nitself, and second by taking up your time afterward thinking about\nit.  If you learn to ignore injuries you can at least avoid the\nsecond half.  I've found I can to some extent avoid thinking about\nnasty things people have done to me by telling myself: this doesn't\ndeserve space in my head.  I'm always delighted to find I've forgotten\nthe details of disputes, because that means I hadn't been thinking\nabout them.  My wife thinks I'm more forgiving than she is, but my\nmotives are purely selfish.I suspect a lot of people aren't sure what's the top idea in their\nmind at any given time.  I'm often mistaken about it.  I tend to\nthink it's the idea I'd want to be the top one, rather than the one\nthat is.  But it's easy to figure this out: just take a shower.\nWhat topic do your thoughts keep returning to?  If it's not what\nyou want to be thinking about, you may want to change something.Notes[1]\nNo doubt there are already names for this type of thinking, but\nI call it \"ambient thought.\"[2]\nThis was made particularly clear in our case, because neither\nof the funds we raised was difficult, and yet in both cases the\nprocess dragged on for months.  Moving large amounts of money around\nis never something people treat casually.  The attention required\nincreases with the amount—maybe not linearly, but definitely\nmonotonically.[3]\nCorollary: Avoid becoming an administrator, or your job will\nconsist of dealing with money and disputes.[4]\nLetter to Oldenburg, quoted in Westfall, Richard, Life of\nIsaac Newton, p. 107.Thanks to Sam Altman, Patrick Collison, Jessica Livingston,\nand Robert Morris for reading drafts of this."},{"title":"The Top of My Todo List","text":"April 2012A palliative care nurse called Bronnie Ware made a list of the\nbiggest regrets\nof the dying.  Her list seems plausible.  I could see\nmyself—can see myself—making at least 4 of these\n5 mistakes.If you had to compress them into a single piece of advice, it might\nbe: don't be a cog.  The 5 regrets paint a portrait of post-industrial\nman, who shrinks himself into a shape that fits his circumstances,\nthen turns dutifully till he stops.The alarming thing is, the mistakes that produce these regrets are\nall errors of omission.  You forget your dreams, ignore your family,\nsuppress your feelings, neglect your friends, and forget to be\nhappy.  Errors of omission are a particularly dangerous type of\nmistake, because you make them by default.I would like to avoid making these mistakes.  But how do you avoid\nmistakes you make by default?  Ideally you transform your life so\nit has other defaults.  But it may not be possible to do that\ncompletely. As long as these mistakes happen by default, you probably\nhave to be reminded not to make them.  So I inverted the 5 regrets,\nyielding a list of 5 commands\nDon't ignore your dreams; don't work too much; say what you\nthink; cultivate friendships; be happy.\nwhich I then put at the top of the file I use as a todo list."},{"title":"The Trouble with the Segway","text":"July 2009The Segway hasn't delivered on its initial promise, to put it mildly.\nThere are several reasons why, but one is that people don't want\nto be seen riding them. Someone riding a Segway looks like a dork.My friend Trevor Blackwell built\nhis own Segway,\nwhich we called\nthe Segwell. He also built a one-wheeled version,\nthe Eunicycle,\nwhich looks exactly like a regular unicycle till you realize the\nrider isn't pedaling.  He has ridden them both to downtown Mountain\nView to get coffee.  When he rides the Eunicycle, people smile at\nhim.  But when he rides the Segwell, they shout abuse from their\ncars: \"Too lazy to walk, ya fuckin homo?\"Why do Segways provoke this reaction?  The reason you look like a\ndork riding a Segway is that you look smug.  You don't seem to\nbe working hard enough.Someone riding a motorcycle isn't working any harder. But because\nhe's sitting astride it, he seems to be making an effort.  When\nyou're riding a Segway you're just standing there.  And someone who's\nbeing whisked along while seeming to do no work—someone in a sedan\nchair, for example—can't help but look smug.Try this thought experiment and it becomes clear: imagine something\nthat worked like the Segway, but that you rode with one foot in\nfront of the other, like a skateboard.  That wouldn't seem nearly\nas uncool.So there may be a way to capture more of the market Segway hoped\nto reach: make a version that doesn't look so easy for the rider.\nIt would also be helpful if the styling was in the tradition of\nskateboards or bicycles rather than medical devices.Curiously enough, what got Segway into this problem was that the\ncompany was itself a kind of Segway.  It was too easy for them;\nthey were too successful raising money.  If they'd had to grow the\ncompany gradually, by iterating through several versions they sold\nto real users, they'd have learned pretty quickly that people looked\nstupid riding them. Instead they had enough to work in secret.  They\nhad focus groups aplenty, I'm sure, but they didn't have the people\nyelling insults out of cars.  So they never realized they were\nzooming confidently down a blind alley."},{"title":"The Venture Capital Squeeze","text":"November 2005In the next few years, venture capital funds will find themselves\nsqueezed from four directions.  They're already stuck with a seller's\nmarket, because of the huge amounts they raised at the end of the\nBubble and still haven't invested.  This by itself is not the end\nof the world.  In fact, it's just a more extreme version of the\nnorm\nin the VC business: too much money chasing too few deals.Unfortunately, those few deals now want less and less money, because\nit's getting so cheap to start a startup.  The four causes: open\nsource, which makes software free; Moore's law, which makes hardware\ngeometrically closer to free; the Web, which makes promotion free\nif you're good; and better languages, which make development a lot\ncheaper.When we started our startup in 1995, the first three were our biggest\nexpenses.  We had to pay $5000 for the Netscape Commerce Server,\nthe only software that then supported secure http connections.  We\npaid $3000 for a server with a 90 MHz processor and 32 meg of\nmemory.  And we paid a PR firm about $30,000 to promote our launch.Now you could get all three for nothing.  You can get the software\nfor free; people throw away computers more powerful than our first\nserver; and if you make something good you can generate ten times\nas much traffic by word of mouth online than our first PR firm got\nthrough the print media.And of course another big change for the average startup is that\nprogramming languages have improved-- or rather, the median language has.  At most startups ten years\nago, software development meant ten programmers writing code in\nC++.  Now the same work might be done by one or two using Python\nor Ruby.During the Bubble, a lot of people predicted that startups would\noutsource their development to India.  I think a better model for\nthe future is David Heinemeier Hansson, who outsourced his development\nto a more powerful language instead.  A lot of well-known applications\nare now, like BaseCamp, written by just one programmer.  And one\nguy is more than 10x cheaper than ten, because (a) he won't waste\nany time in meetings, and (b) since he's probably a founder, he can\npay himself nothing.Because starting a startup is so cheap, venture capitalists now\noften want to give startups more money than the startups want to\ntake.  VCs like to invest several million at a time.  But as one\nVC told me after a startup he funded would only take about half a\nmillion, \"I don't know what we're going to do.  Maybe we'll just\nhave to give some of it back.\" Meaning give some of the fund back\nto the institutional investors who supplied it, because it wasn't\ngoing to be possible to invest it all.Into this already bad situation comes the third problem: Sarbanes-Oxley.\nSarbanes-Oxley is a law, passed after the Bubble, that drastically\nincreases the regulatory burden on public companies. And in addition\nto the cost of compliance, which is at least two million dollars a\nyear, the law introduces frightening legal exposure for corporate\nofficers.  An experienced CFO I know said flatly: \"I would not\nwant to be CFO of a public company now.\"You might think that responsible corporate governance is an area\nwhere you can't go too far.  But you can go too far in any law, and\nthis remark convinced me that Sarbanes-Oxley must have.  This CFO\nis both the smartest and the most upstanding money guy I know.  If\nSarbanes-Oxley deters people like him from being CFOs of public\ncompanies, that's proof enough that it's broken.Largely because of Sarbanes-Oxley, few startups go public now.  For\nall practical purposes, succeeding now equals getting bought.  Which\nmeans VCs are now in the business of finding promising little 2-3\nman startups and pumping them up into companies that cost $100\nmillion to acquire.   They didn't mean to be in this business; it's\njust what their business has evolved into.Hence the fourth problem: the acquirers have begun to realize they\ncan buy wholesale.  Why should they wait for VCs to make the startups\nthey want more expensive?  Most of what the VCs add, acquirers don't\nwant anyway.  The acquirers already have brand recognition and HR\ndepartments.  What they really want is the software and the developers,\nand that's what the startup is in the early phase: concentrated\nsoftware and developers.Google, typically, seems to have been the first to figure this out.\n\"Bring us your startups early,\" said Google's speaker at the Startup School.  They're quite\nexplicit about it: they like to acquire startups at just the point\nwhere they would do a Series A round.  (The Series A round is the\nfirst round of real VC funding; it usually happens in the first\nyear.) It is a brilliant strategy, and one that other big technology\ncompanies will no doubt try to duplicate.  Unless they want to have\nstill more of their lunch eaten by Google.Of course, Google has an advantage in buying startups: a lot of the\npeople there are rich, or expect to be when their options vest.\nOrdinary employees find it very hard to recommend an acquisition;\nit's just too annoying to see a bunch of twenty year olds get rich\nwhen you're still working for salary.  Even if it's the right thing\nfor your company to do.The Solution(s)Bad as things look now, there is a way for VCs to save themselves.\nThey need to do two things, one of which won't surprise them, and\nanother that will seem an anathema.Let's start with the obvious one: lobby to get Sarbanes-Oxley\nloosened.  This law was created to prevent future Enrons, not to\ndestroy the IPO market.  Since the IPO market was practically dead\nwhen it passed, few saw what bad effects it would have.  But now\nthat technology has recovered from the last bust, we can see clearly\nwhat a bottleneck Sarbanes-Oxley has become.Startups are fragile plants—seedlings, in fact.  These seedlings\nare worth protecting, because they grow into the trees of the\neconomy.  Much of the economy's growth is their growth.  I think\nmost politicians realize that.  But they don't realize just how\nfragile startups are, and how easily they can become collateral\ndamage of laws meant to fix some other problem.Still more dangerously, when you destroy startups, they make very\nlittle noise.  If you step on the toes of the coal industry, you'll\nhear about it.  But if you inadvertantly squash the startup industry,\nall that happens is that the founders of the next Google stay in\ngrad school instead of starting a company.My second suggestion will seem shocking to VCs: let founders cash\nout partially in the Series A round.  At the moment, when VCs invest\nin a startup, all the stock they get is newly issued and all the\nmoney goes to the company.  They could buy some stock directly from\nthe founders as well.Most VCs have an almost religious rule against doing this.  They\ndon't want founders to get a penny till the company is sold or goes\npublic.  VCs are obsessed with control, and they worry that they'll\nhave less leverage over the founders if the founders have any money.This is a dumb plan.  In fact, letting the founders sell a little stock\nearly would generally be better for the company, because it would\ncause the founders' attitudes toward risk to be aligned with the\nVCs'.  As things currently work, their attitudes toward risk tend\nto be diametrically opposed: the founders, who have nothing, would\nprefer a 100% chance of $1 million to a 20% chance of $10 million,\nwhile the VCs can afford to be \"rational\" and prefer the latter.Whatever they say, the reason founders are selling their companies\nearly instead of doing Series A rounds is that they get paid up\nfront.  That first million is just worth so much more than the\nsubsequent ones.  If founders could sell a little stock early,\nthey'd be happy to take VC money and bet the rest on a bigger\noutcome.So why not let the founders have that first million, or at least\nhalf million?  The VCs would get same number of shares for the\nmoney.  So what if some of the money would go to the\nfounders instead of the company?Some VCs will say this is\nunthinkable—that they want all their money to be put to work\ngrowing the company.  But the fact is, the huge size of current VC\ninvestments is dictated by the structure\nof VC funds, not the needs of startups.  Often as not these large\ninvestments go to work destroying the company rather than growing\nit.The angel investors who funded our startup let the founders sell\nsome stock directly to them, and it was a good deal for everyone.\nThe angels made a huge return on that investment, so they're happy.\nAnd for us founders it blunted the terrifying all-or-nothingness\nof a startup, which in its raw form is more a distraction than a\nmotivator.If VCs are frightened at the idea of letting founders partially\ncash out, let me tell them something still more frightening: you\nare now competing directly with Google.Thanks to Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, and Robert Morris for reading drafts of this."},{"title":"The Word \"Hacker\"","text":"April 2004To the popular press, \"hacker\" means someone who breaks\ninto computers.  Among programmers it means a good programmer.\nBut the two meanings are connected.  To programmers,\n\"hacker\" connotes mastery in the most literal sense: someone\nwho can make a computer do what he wants—whether the computer\nwants to or not.To add to the confusion, the noun \"hack\" also has two senses.  It can\nbe either a compliment or an insult.  It's called a hack when\nyou do something in an ugly way.  But when you do something\nso clever that you somehow beat the system, that's also\ncalled a hack.  The word is used more often in the former than\nthe latter sense, probably because ugly solutions are more\ncommon than brilliant ones.Believe it or not, the two senses of \"hack\" are also\nconnected.  Ugly and imaginative solutions have something in\ncommon: they both break the rules.  And there is a gradual\ncontinuum between rule breaking that's merely ugly (using\nduct tape to attach something to your bike) and rule breaking\nthat is brilliantly imaginative (discarding Euclidean space).Hacking predates computers.  When he\nwas working on the Manhattan Project, Richard Feynman used to\namuse himself by breaking into safes containing secret documents.\nThis tradition continues today.\nWhen we were in grad school, a hacker friend of mine who spent too much\ntime around MIT had\nhis own lock picking kit.\n(He now runs a hedge fund, a not unrelated enterprise.)It is sometimes hard to explain to authorities why one would\nwant to do such things.\nAnother friend of mine once got in trouble with the government for\nbreaking into computers.  This had only recently been declared\na crime, and the FBI found that their usual investigative\ntechnique didn't work.  Police investigation apparently begins with\na motive.  The usual motives are few: drugs, money, sex,\nrevenge.  Intellectual curiosity was not one of the motives on\nthe FBI's list.  Indeed, the whole concept seemed foreign to\nthem.Those in authority tend to be annoyed by hackers'\ngeneral attitude of disobedience.  But that disobedience is\na byproduct of the qualities that make them good programmers.\nThey may laugh at the CEO when he talks in generic corporate\nnewspeech, but they also laugh at someone who tells them\na certain problem can't be solved.\nSuppress one, and you suppress the other.This attitude is sometimes affected.  Sometimes young programmers\nnotice the eccentricities of eminent hackers and decide to\nadopt some of their own in order to seem smarter.\nThe fake version is not merely\nannoying; the prickly attitude of these posers\ncan actually slow the process of innovation.But even factoring in their annoying eccentricities,\nthe disobedient attitude of hackers is a net win.  I wish its\nadvantages were better understood.For example, I suspect people in Hollywood are\nsimply mystified by\nhackers' attitudes toward copyrights.  They are a perennial\ntopic of heated discussion on Slashdot.\nBut why should people who program computers\nbe so concerned about copyrights, of all things?Partly because some companies use mechanisms to prevent\ncopying.  Show any hacker a lock and his first thought is\nhow to pick it.  But there is a deeper reason that\nhackers are alarmed by measures like copyrights and patents.\nThey see increasingly aggressive measures to protect\n\"intellectual property\"\nas a threat to the intellectual\nfreedom they need to do their job.\nAnd they are right.It is by poking about inside current technology that\nhackers get ideas for the next generation.  No thanks,\nintellectual homeowners may say, we don't need any\noutside help.  But they're wrong.\nThe next generation of computer technology has\noften—perhaps more often than not—been developed by outsiders.In 1977 there was no doubt some group within IBM developing\nwhat they expected to be\nthe next generation of business computer.  They were mistaken.\nThe next generation of business computer was\nbeing developed on entirely different lines by two long-haired\nguys called Steve in a garage in Los Altos.  At about the\nsame time, the powers that be\nwere cooperating to develop the\nofficial next generation operating system, Multics.\nBut two guys who thought Multics excessively complex went off\nand wrote their own.  They gave it a name that\nwas a joking reference to Multics: Unix.The latest intellectual property laws impose\nunprecedented restrictions on the sort of poking around that\nleads to new ideas. In the past, a competitor might use patents\nto prevent you from selling a copy of something they\nmade, but they couldn't prevent you from\ntaking one apart to see how it worked.   The latest\nlaws make this a crime.  How are we\nto develop new technology if we can't study current\ntechnology to figure out how to improve it?Ironically, hackers have brought this on themselves.\nComputers are responsible for the problem.  The control systems\ninside machines used to be physical: gears and levers and cams.\nIncreasingly, the brains (and thus the value) of products is\nin software. And by this I mean software in the general sense:\ni.e. data.  A song on an LP is physically stamped into the\nplastic.  A song on an iPod's disk is merely stored on it.Data is by definition easy to copy.  And the Internet\nmakes copies easy to distribute.  So it is no wonder\ncompanies are afraid.  But, as so often happens, fear has\nclouded their judgement.  The government has responded\nwith draconian laws to protect intellectual property.\nThey probably mean well. But\nthey may not realize that such laws will do more harm\nthan good.Why are programmers so violently opposed to these laws?\nIf I were a legislator, I'd be interested in this\nmystery—for the same reason that, if I were a farmer and suddenly\nheard a lot of squawking coming from my hen house one night,\nI'd want to go out and investigate.  Hackers are not stupid,\nand unanimity is very rare in this world.\nSo if they're all squawking,\nperhaps there is something amiss.Could it be that such laws, though intended to protect America,\nwill actually harm it?  Think about it.  There is something\nvery American about Feynman breaking into safes during\nthe Manhattan Project.  It's hard to imagine the authorities\nhaving a sense of humor about such things over\nin Germany at that time.  Maybe it's not a coincidence.Hackers are unruly.  That is the essence of hacking.  And it\nis also the essence of Americanness.  It is no accident\nthat Silicon Valley\nis in America, and not France, or Germany,\nor England, or Japan. In those countries, people color inside\nthe lines.I lived for a while in Florence.  But after I'd been there\na few months I realized that what I'd been unconsciously hoping\nto find there was back in the place I'd just left.\nThe reason Florence is famous is that in 1450, it was New York.\nIn 1450 it was filled with the kind of turbulent and ambitious\npeople you find now in America.  (So I went back to America.)It is greatly to America's advantage that it is\na congenial atmosphere for the right sort of unruliness—that\nit is a home not just for the smart, but for smart-alecks.\nAnd hackers are invariably smart-alecks.  If we had a national\nholiday, it would be April 1st.  It says a great deal about\nour work that we use the same word for a brilliant or a\nhorribly cheesy solution.   When we cook one up we're not\nalways 100% sure which kind it is.  But as long as it has\nthe right sort of wrongness, that's a promising sign.\nIt's odd that people\nthink of programming as precise and methodical.  Computers\nare precise and methodical.  Hacking is something you do\nwith a gleeful laugh.In our world some of the most characteristic solutions\nare not far removed from practical\njokes.  IBM was no doubt rather surprised by the consequences\nof the licensing deal for DOS, just as the hypothetical\n\"adversary\" must be when Michael Rabin solves a problem by\nredefining it as one that's easier to solve.Smart-alecks have to develop a keen sense of how much they\ncan get away with.  And lately hackers\nhave sensed a change\nin the atmosphere.\nLately hackerliness seems rather frowned upon.To hackers the recent contraction in civil liberties seems\nespecially ominous.  That must also mystify outsiders.\nWhy should we care especially about civil\nliberties?  Why programmers, more than\ndentists or salesmen or landscapers?Let me put the case in terms a government official would appreciate.\nCivil liberties are not just an ornament, or a quaint\nAmerican tradition.  Civil liberties make countries rich.\nIf you made a graph of\nGNP per capita vs. civil liberties, you'd notice a definite\ntrend.  Could civil liberties really be a cause, rather\nthan just an effect?  I think so.  I think a society in which\npeople can do and say what they want will also tend to\nbe one in which the most efficient solutions win, rather than\nthose sponsored by the most influential people.\nAuthoritarian countries become corrupt;\ncorrupt countries become poor; and poor countries are weak.\nIt seems to me there is\na Laffer curve for government power, just as for\ntax revenues.  At least, it seems likely enough that it\nwould be stupid to try the experiment and find out.  Unlike\nhigh tax rates, you can't repeal totalitarianism if it\nturns out to be a mistake.This is why hackers worry.  The government spying on people doesn't\nliterally make programmers write worse code.  It just leads\neventually to a world in which bad ideas win.  And because\nthis is so important to hackers, they're especially sensitive\nto it.  They can sense totalitarianism approaching from a\ndistance, as animals can sense an approaching\nthunderstorm.It would be ironic if, as hackers fear, recent measures\nintended to protect national security and intellectual property\nturned out to be a missile aimed right at what makes\nAmerica successful.  But it would not be the first time that\nmeasures taken in an atmosphere of panic had\nthe opposite of the intended effect.There is such a thing as Americanness.\nThere's nothing like living abroad to teach you that.\nAnd if you want to know whether something will nurture or squash\nthis quality, it would be hard to find a better focus\ngroup than hackers, because they come closest of any group\nI know to embodying it.  Closer, probably,  than\nthe men running our government,\nwho for all their talk of patriotism\nremind me more of Richelieu or Mazarin\nthan Thomas Jefferson or George Washington.When you read what the founding fathers had to say for\nthemselves, they sound more like hackers.\n\"The spirit of resistance to government,\"\nJefferson wrote, \"is so valuable on certain occasions, that I wish\nit always to be kept alive.\"Imagine an American president saying that today.\nLike the remarks of an outspoken old grandmother, the sayings of\nthe founding fathers have embarrassed generations of\ntheir less confident successors.  They remind us where we come from.\nThey remind us that it is the people who break rules that are\nthe source of America's wealth and power.Those in a position to impose rules naturally want them to be\nobeyed.  But be careful what you ask for. You might get it.Thanks to Ken Anderson, Trevor Blackwell, Daniel Giffin,\nSarah Harlin,  Shiro Kawai, Jessica Livingston, Matz,\nJackie McDonough, Robert Morris, Eric Raymond, Guido van Rossum,\nDavid Weinberger, and\nSteven Wolfram for reading drafts of this essay.\nwith a \"blue box.\"\nPhoto by Margret Wozniak. Reproduced by permission of Steve\nWozniak.)"},{"title":"This Year We Can End the Death Penalty in California","text":"November 2016If you're a California voter, there is an important proposition\non your ballot this year: Proposition 62, which bans the death\npenalty.When I was younger I used to think the debate about the death\npenalty was about when it's ok to take a human life.  Is it ok\nto kill a killer?But that is not the issue here.The real world does not work like the version I was shown on TV growing up.  The police\noften arrest the wrong person.\nDefendants' lawyers are often incompetent.  And prosecutors\nare often motivated more by publicity than justice.In the real world,\nabout 4% of people sentenced to death\nare innocent.\nSo this is not about whether it's ok to kill killers. This\nis about whether it's ok to kill innocent people.A child could answer that one for you.This year, in California, you have a chance to end this, by\nvoting yes on Proposition 62. But beware, because there is another\nproposition, Proposition 66, whose goal is to make it\neasier to execute people. So yes on 62, no on 66.It's time."},{"title":"Trevor Re: Java's Cover","text":"(Trevor Blackwell had another take on\nJava's Cover.  He raises an\ninteresting question: are dumbed-down languages actually better for\nsome subset of programmers?)I think it isn't as clear-cut as Java\nand its ilk being good or bad.  I would make the following argument:There are two kinds of programmers: brilliant hackers, and corporate\ndrones. It's natural that they should want different kinds of tools.As a hacker, you can only shine if you use the right tools. Don't let\nyourself be saddled with inappropriate tools by your management, and\ndon't be led by the media into using the tools meant for drones.Because there are 100x more drones than hackers, most new commercial\ntechnologies are aimed at them. You have to learn to quickly identify\nwhich tools are and aren't meant for you.Any technology that has the outward features of Java (hype,\naccessibility, committee design, ulterior commercial motives, ...) is\nprobably designed for drones, so avoid it for the\nsame reason you would avoid a novel with Fabio on the cover, or an inn\nthat advertises parking for trucks. They may be right\nfor their target audience. They may be created by smart\npeople. They're just not meant for you."},{"title":"Trolls","text":"February 2008A user on Hacker News recently posted a\ncomment\nthat set me thinking:\nSomething about hacker culture that never really set well with\nme was this—the nastiness. ... I just don't understand why people\ntroll like they do.\nI've thought a lot over the last couple years about the problem of\ntrolls.  It's an old one, as old as forums, but\nwe're still just learning what the causes are and how to address\nthem.There are two senses of the word \"troll.\"  In the original sense\nit meant someone, usually an outsider, who deliberately stirred up\nfights in a forum by saying controversial things.\n[1]\nFor example,\nsomeone who didn't use a certain programming language might go to\na forum for users of that language and make disparaging remarks\nabout it, then sit back and watch as people rose to the bait.  This\nsort of trolling was in the nature of a practical joke, like letting\na bat loose in a room full of people.The definition then spread to people who behaved like assholes in\nforums, whether intentionally or not.  Now when people talk about\ntrolls they usually mean this broader sense of the word.  Though\nin a sense this is historically inaccurate, it is in other ways\nmore accurate, because when someone is being an asshole it's usually\nuncertain even in their own mind how much is deliberate.\nThat is arguably one of the defining qualities of an asshole.I think trolling in the broader sense has four causes.  The most\nimportant is distance.  People will say things in anonymous forums\nthat they'd never dare say to someone's face, just as they'll do\nthings in cars that they'd never do as pedestrians—like tailgate\npeople, or honk at them, or cut them off.Trolling tends to be particularly bad in forums related to computers,\nand I think that's due to the kind of people you find there.  Most\nof them (myself included) are more comfortable dealing with abstract\nideas than with people.  Hackers can be abrupt even in person.  Put\nthem on an anonymous forum, and the problem gets worse.The third cause of trolling is incompetence.  If you disagree with\nsomething, it's easier to say \"you suck\" than to figure out and\nexplain exactly what you disagree with.  You're also safe that way\nfrom refutation.  In this respect trolling is a lot like graffiti.\nGraffiti happens at the intersection of ambition and incompetence:\npeople want to make their mark on the world, but have no other way\nto do it than literally making a mark on the world.\n[2]The final contributing factor is the culture of the forum.  Trolls\nare like children (many are children) in that they're capable of\na wide range of behavior depending on what they think will be\ntolerated.  In a place where rudeness isn't tolerated, most can be\npolite.  But vice versa as well.There's a sort of Gresham's Law of trolls: trolls are willing to\nuse a forum with a lot of thoughtful people in it, but thoughtful\npeople aren't willing to use a forum with a lot of trolls in it.\nWhich means that once trolling takes hold, it tends to become the\ndominant culture.  That had already happened to Slashdot and Digg by\nthe time I paid attention to comment threads there, but I watched\nit happen to Reddit.News.YC is, among other things, an experiment to see if this fate\ncan be avoided.  The sites's guidelines\nexplicitly ask people not to say things they wouldn't say face to\nface.  If someone starts being rude, other users will step in and\ntell them to stop.  And when people seem to be deliberately trolling,\nwe ban them ruthlessly.Technical tweaks may also help.  On Reddit, votes on your comments\ndon't affect your karma score, but they do on News.YC.  And it does\nseem to influence people when they can see their reputation in the\neyes of their peers drain away after making an asshole remark.\nOften users have second thoughts and delete such comments.One might worry this would prevent people from expressing controversial\nideas, but empirically that doesn't seem to be what happens.  When\npeople say something substantial that gets modded down, they\nstubbornly leave it up.  What people delete are wisecracks, because\nthey have less invested in them.So far the experiment seems to be working.  The level of conversation\non News.YC is as high as on any forum I've seen.  But we still only\nhave about 8,000 uniques a day.  The conversations on Reddit were\ngood when it was that small.  The challenge is whether we can keep\nthings this way.I'm optimistic we will.  We're not depending just on technical\ntricks.  The core users of News.YC are mostly refugees from other\nsites that were overrun by trolls.  They feel about trolls roughly\nthe way refugees from Cuba or Eastern Europe feel about dictatorships.\nSo there are a lot of people working to keep this from happening\nagain.Notes[1]\nI mean forum in the general sense of a place to exchange views.\nThe original Internet forums were not web sites but Usenet newsgroups.[2]\nI'm talking here about everyday tagging.  Some graffiti is\nquite impressive (anything becomes art if you do it well enough)\nbut the median tag is just visual spam."},{"title":"Two Kinds of Judgement","text":"April 2007There are two different ways people judge you.  Sometimes judging\nyou correctly is the end goal.  But there's a second much more\ncommon type of judgement where it isn't.  We tend to regard all\njudgements of us as the first type.  We'd probably be happier if\nwe realized which are and which aren't.The first type of judgement, the type where judging you is the end\ngoal, include court cases, grades in classes, and most competitions.\nSuch judgements can of course be mistaken, but because the goal is\nto judge you correctly, there's usually some kind of appeals process.\nIf you feel you've been misjudged, you can protest that you've been\ntreated unfairly.Nearly all the judgements made on children are of this type, so we\nget into the habit early in life of thinking that all judgements\nare.But in fact there is a second much larger class of judgements where\njudging you is only a means to something else.  These include college\nadmissions, hiring and investment decisions, and of course the\njudgements made in dating.  This kind of judgement is not really\nabout you.Put yourself in the position of someone selecting players for a\nnational team.  Suppose for the sake of simplicity that this is a\ngame with no positions, and that you have to select 20 players.\nThere will be a few stars who clearly should make the team, and\nmany players who clearly shouldn't.  The only place your judgement\nmakes a difference is in the borderline cases.  Suppose you screw\nup and underestimate the 20th best player, causing him not to make\nthe team, and his place to be taken by the 21st best.  You've still\npicked a good team.  If the players have the usual distribution of\nability, the 21st best player will be only slightly worse than the\n20th best.  Probably the difference between them will be less than\nthe measurement error.The 20th best player may feel he has been misjudged.  But your goal\nhere wasn't to provide a service estimating people's ability.  It\nwas to pick a team, and if the difference between the 20th and 21st\nbest players is less than the measurement error, you've still done\nthat optimally.It's a false analogy even to use the word unfair to describe this\nkind of misjudgement.  It's not aimed at producing a correct estimate\nof any given individual, but at selecting a reasonably optimal set.One thing that leads us astray here is that the selector seems to\nbe in a position of power.  That makes him seem like a judge.  If\nyou regard someone judging you as a customer instead of a judge,\nthe expectation of fairness goes away.  The author of a good novel\nwouldn't complain that readers were unfair for preferring a\npotboiler with a racy cover.  Stupid, perhaps, but not unfair.Our early training and our self-centeredness combine to make us\nbelieve that every judgement of us is about us.  In fact most aren't.\nThis is a rare case where being less self-centered will make people\nmore confident.  Once you realize how little most people judging\nyou care about judging you accurately—once you realize that because\nof the normal distribution of most applicant pools, it matters least\nto judge accurately in precisely the cases where judgement has the\nmost effect—you won't take rejection so personally.And curiously enough, taking rejection less personally may help you\nto get rejected less often.  If you think someone judging you will\nwork hard to judge you correctly, you can afford to be passive.\nBut the more you realize that most judgements are greatly influenced\nby random, extraneous factors—that most people judging you are\nmore like a fickle novel buyer than a wise and perceptive\nmagistrate—the more you realize you can do things to influence the\noutcome.One good place to apply this principle is in college applications.\nMost high school students applying to college do it with the usual\nchild's mix of inferiority and self-centeredness: inferiority in\nthat they assume that admissions committees must be all-seeing;\nself-centeredness in that they assume admissions committees care\nenough about them to dig down into their application and figure out\nwhether they're good or not.  These combine to make applicants\npassive in applying and hurt when they're rejected.  If college\napplicants realized how quick and impersonal most selection processes\nare, they'd make more effort to sell themselves, and take the outcome\nless personally."},{"title":"Undergraduation","text":"March 2005(Parts of this essay began as replies to students who wrote to\nme with questions.)Recently I've had several emails from computer science\nundergrads asking what to do in college. I might not\nbe the best source of advice, because I was a philosophy major in\ncollege.  But I took so many CS classes that most CS majors thought\nI was one.  I was certainly a hacker, at least.HackingWhat should you do in college to become a\ngood hacker?  There are two\nmain things you can do: become very good at programming, and learn\na lot about specific, cool problems.  These turn out to be equivalent,\nbecause each drives you to do the other.The way to be good at programming is to work (a) a lot (b) on hard\nproblems.  And the way to make yourself work on hard problems is\nto work on some very engaging project.\nOdds are this project won't be a class assignment.  My friend Robert\nlearned a lot by writing network software when he was an\nundergrad. One of his projects was to connect Harvard to the\nArpanet; it had been one of the original nodes, but by 1984 the\nconnection had died. [1]  Not only was this\nwork not for a class, but because he spent all his time on it\nand neglected his studies, he was kicked out of\nschool for a year. [2]  It all evened out in the end, and now he's\na professor at MIT.  But you'll probably be happier if you don't\ngo to that extreme; it caused him a lot of worry at the time.Another way to be good at programming is to find other people who\nare good at it, and learn what they know.  Programmers tend to sort\nthemselves into tribes according to the type of work they do and\nthe tools they use, and some tribes are\nsmarter than others.  Look\naround you and see what the smart people seem to be working on;\nthere's usually a reason.Some of the smartest people around you are professors.  So one way\nto find interesting work is to volunteer as a research assistant.\nProfessors are especially interested in people who can solve tedious\nsystem-administration type problems for them, so that is a way to\nget a foot in the door.  What they fear are\nflakes and resume padders.  It's all too\ncommon for an assistant to result in a net increase in work.  So\nyou have to make it clear you'll mean a net decrease.Don't be put off if they say no.  Rejection is almost always less\npersonal than the rejectee imagines.  Just move on to the next.\n(This applies to dating too.)Beware, because although most professors are smart, not all of them\nwork on interesting stuff.  Professors have to publish novel results\nto advance their careers, but there is more competition in more\ninteresting areas of research.  So what less ambitious professors\ndo is turn out a series of papers whose conclusions are novel because\nno one else cares about them.  You're better off avoiding these.I never worked as a research assistant, so I feel a bit dishonest\nrecommending that route.  I learned to program by writing stuff of\nmy own, particularly by trying to reverse-engineer Winograd's\nSHRDLU.  I was as obsessed with that program as a mother with a new baby.Whatever the disadvantages of working by yourself, the advantage\nis that the project is all your own.  You never have to compromise\nor ask anyone's permission, and if you have a new idea you can just\nsit down and start implementing it.In your own projects you don't have to worry about novelty (as\nprofessors do) or profitability (as businesses do).  All that matters\nis how hard the project is technically, and that has no correlation\nto the nature of the application.  \"Serious\" applications like\ndatabases are often trivial and dull technically (if you ever suffer\nfrom insomnia, try reading the technical literature about databases)\nwhile \"frivolous\" applications like games are often very sophisticated.\nI'm sure there are game companies out there working on products\nwith more intellectual content than the research at the\nbottom nine tenths of university CS departments.If I were in college now I'd probably work on\ngraphics: a network game, for example, or a tool for 3D animation.\nWhen I was an undergrad there weren't enough cycles around to make\ngraphics interesting, but it's hard to imagine anything more fun\nto work on now.MathWhen I was in college, a lot of the professors believed (or at least\nwished) that\ncomputer science was a branch of math.  This idea was\nstrongest at Harvard, where there wasn't even a CS major till the\n1980s; till then one had to major in applied math.  But it was\nnearly as bad at Cornell.  When I told the fearsome Professor Conway\nthat I was interested in AI (a hot topic then), he told me I should\nmajor in math.  I'm still not sure whether he thought AI required\nmath, or whether he thought AI was nonsense and that majoring in\nsomething rigorous would cure me of such stupid ambitions.In fact, the amount of math you need as a hacker is a lot less\nthan most university departments like to admit.  I don't think you\nneed much more than high school math plus a few concepts from the\ntheory of computation.  (You have to know what an n^2 algorithm is\nif you want to avoid writing them.) Unless you're planning to write\nmath applications, of course.  Robotics, for example, is all math.But while you don't literally need math for most kinds of hacking,\nin the sense of knowing 1001 tricks for differentiating formulas,\nmath is very much worth studying for its own sake.  It's a\nvaluable source of metaphors for almost any kind of work.[3] I wish\nI'd studied more math in college for that reason.Like a lot of people, I was mathematically abused as a child.  I\nlearned to think of math as a collection of formulas that were\nneither beautiful nor had any relation to my life (despite attempts\nto translate them into \"word problems\"), but had to be memorized\nin order to do well on tests.One of the most valuable things you could do in college would be\nto learn what math is really about.  This may not be easy, because\na lot of good mathematicians are bad teachers.  And while there are\nmany popular books on math, few seem good.  The best I can think\nof are W. W. Sawyer's.  And of course Euclid. [4]EverythingThomas Huxley said \"Try to learn something about everything and\neverything about something.\"  Most universities aim at this\nideal.But what's everything?  To me it means, all that people\nlearn in the course of working honestly on hard problems.  All such\nwork tends to be related, in that ideas and techniques from one\nfield can often be transplanted successfully to others.  Even others\nthat seem quite distant.  For example, I write\nessays the same way\nI write software: I sit down and blow out a lame version 1 as fast\nas I can type, then spend several weeks rewriting it.Working on hard problems is not, by itself, enough.  Medieval\nalchemists were working on a hard problem, but their approach was\nso bogus that there was little\nto learn from studying it, except possibly about people's ability\nto delude themselves.  Unfortunately the sort of AI I was trying\nto learn in college had the same flaw: a very hard problem, blithely\napproached with hopelessly inadequate techniques.  Bold?  Closer\nto fraudulent.\nThe social sciences are also fairly bogus, because they're so much\ninfluenced by intellectual fashions.  If a\nphysicist met a colleague\nfrom 100 years ago, he could teach him some new things; if a psychologist\nmet a colleague from 100 years ago, they'd just get into an\nideological argument.\nYes, of course, you'll learn something by taking a\npsychology class.  The point is, you'll learn more by taking\na class in another department.The worthwhile departments, in my opinion, are math, the hard\nsciences, engineering, history (especially economic and social\nhistory, and the history of science), architecture, and the classics.\nA survey course in art history may be worthwhile.  Modern literature\nis important, but the way to learn about it is just to read.  I\ndon't know enough about music to say.You can skip the social sciences, philosophy, and the various\ndepartments created recently in response to political pressures.\nMany of these fields talk about important problems, certainly.  But\nthe way they talk about them is useless.  For example, philosophy\ntalks, among other things, about our obligations to one another;\nbut you can learn more about this from a wise grandmother or E. B.\nWhite than from an academic philosopher.I speak here from experience.  I should probably have been offended\nwhen people laughed at Clinton for saying \"It depends on what the\nmeaning of the word 'is' is.\"  I took about five classes in college\non what the meaning of \"is\" is.Another way to figure out which fields are worth studying is to\ncreate the  dropout graph. For example, I know many people\nwho switched from math to computer science because they found math\ntoo hard, and no one who did the opposite.  People don't do hard\nthings gratuitously; no one will work on a harder problem unless\nit is proportionately (or at least log(n)) more rewarding.  So\nprobably math is more worth studying than computer science.  By\nsimilar comparisons you can make a graph of all the departments in\na university.  At the bottom you'll find the subjects with least\nintellectual content.If you use this method, you'll get roughly the same answer I just\ngave.Language courses are an anomaly.  I think they're better considered\nas extracurricular activities, like pottery classes.  They'd be far\nmore useful when combined with some time living in a country where\nthe language is spoken.  On a whim I studied Arabic as a freshman.\nIt was a lot of work, and the only lasting benefits were a weird\nability to identify semitic roots and some insights into how people\nrecognize words.Studio art and creative writing courses are wildcards.  Usually\nyou don't get taught much:  you just work (or don't work) on whatever\nyou want, and then sit around offering \"crits\" of one another's\ncreations under the vague supervision of the teacher.  But writing and\nart are both very hard problems that (some) people work honestly\nat, so they're worth doing, especially if you can find a good\nteacher.JobsOf course college students have to think about more than just\nlearning.  There are also two practical problems to consider: jobs,\nand graduate school.In theory a liberal education is not supposed to supply job training.\nBut everyone knows this is a bit of a fib.  Hackers at every college\nlearn practical skills, and not by accident.What you should learn to get a job depends on the kind you want.\nIf you want to work in a big company, learn how to hack\nBlub on\nWindows.  If you want to work at a cool little company or research\nlab, you'll do better to learn Ruby on Linux.  And if you want to\nstart your own company, which I think will be more and more common,\nmaster the most powerful tools you can find, because you're going\nto be in a race against your competitors, and they'll be your horse.There is not a direct correlation between the skills you should\nlearn in college and those you'll use in a job.  You should aim\nslightly high in college.In workouts a football player may bench press 300 pounds, even\nthough he may never have to exert anything like that much force in\nthe course of a game.  Likewise, if your professors try to make you\nlearn stuff that's more advanced than you'll need in a job, it may\nnot just be because they're academics, detached from the real world.\nThey may be trying to make you lift weights with your brain.The programs you write in classes differ in three critical ways\nfrom the ones you'll write in the real world: they're small; you\nget to start from scratch; and the problem is usually artificial\nand predetermined.  In the real world, programs are bigger, tend\nto involve existing code, and often require you to figure out what\nthe problem is before you can solve it.You don't have to wait to leave (or even enter) college to learn\nthese skills.  If you want to learn how to deal with existing code,\nfor example, you can contribute to open-source projects.  The sort\nof employer you want to work for will be as impressed by that as\ngood grades on class assignments.In existing open-source projects you don't get much practice at\nthe third skill, deciding what problems to solve.  But there's\nnothing to stop you starting new projects of your own.  And  good\nemployers will be even more impressed\nwith that.What sort of problem should you try to solve?  One way to answer\nthat is to ask what you need as a user.  For example, I stumbled\non a good algorithm for spam filtering because I wanted to stop\ngetting spam.  Now what I wish I had was a mail reader that somehow\nprevented my inbox from filling up.  I tend to use my inbox as a\ntodo list.  But that's like using a screwdriver to open\nbottles; what one really wants is a bottle opener.Grad SchoolWhat about grad school?  Should you go?  And how do you get into a\ngood one?In principle, grad school is professional training in research, and\nyou shouldn't go unless you want to do research as a career.  And\nyet half the people who get PhDs in CS don't go into research.\nI didn't go to grad school to become a professor.  I went because\nI wanted to learn more.So if you're mainly interested in hacking and you go to grad school,\nyou'll find a lot of other people who are similarly out of their\nelement.  And if half the people around you are out of their element in the\nsame way you are, are you really out of your element?There's a fundamental problem in \"computer science,\" and it surfaces\nin situations like this.  No one is sure what \"research\" is supposed to be.\nA lot\nof research is hacking that had to be crammed into the form of an\nacademic paper to yield one more quantum of publication.So it's kind of misleading to ask whether you'll be at home in grad\nschool, because very few people are quite at home in computer\nscience.  The whole field is uncomfortable in its own skin.  So\nthe fact that you're mainly interested in hacking shouldn't deter\nyou from going to grad school.  Just be warned you'll have to do a lot of stuff\nyou don't like.Number one will be your dissertation.  Almost everyone hates their\ndissertation by the time they're done with it.  The\nprocess inherently tends to produce an unpleasant result, like a cake made out\nof whole wheat flour and baked for twelve hours.  Few dissertations\nare read with pleasure, especially by their authors.But thousands before you have suffered through writing a dissertation.\nAnd aside from that, grad school is close to paradise.  Many people\nremember it as the happiest time of their lives.  And nearly all\nthe rest, including me, remember it as a period that would have\nbeen, if they hadn't had to write a dissertation. [5]The danger with grad school is that you don't see the scary part\nupfront.  PhD programs start out as college part 2, with several\nyears of classes.  So by the time you face the horror of writing a\ndissertation, you're already several years in.  If you quit now,\nyou'll be a grad-school dropout, and you probably won't like that\nidea.  When Robert got kicked out of grad school for writing the\nInternet worm of 1988, I envied him enormously for finding a way out\nwithout the stigma of failure. On the whole, grad school is probably better than most alternatives.  You meet a\nlot of smart people, and your glum procrastination will at least\nbe a powerful common bond.  And of course you have a PhD at the\nend.  I forgot about that. I suppose that's worth something.The greatest advantage of a PhD (besides being the union card of\nacademia, of course) may be that it gives you some baseline confidence.\nFor example, the Honeywell thermostats in my house have the most\natrocious UI.  My mother, who has the same model, diligently spent\na day reading the user's manual to learn how to operate hers.  She\nassumed the problem was with her.  But I can think to myself \"If\nsomeone with a PhD in computer science can't understand this\nthermostat, it must be badly\ndesigned.\"If you still want to go to grad school after this equivocal\nrecommendation, I can give you solid advice about how to get in.\nA lot of my friends are CS professors now, so I have the inside\nstory about admissions.  It's quite different from college.  At\nmost colleges, admissions officers decide who gets in.  For PhD\nprograms, the professors do.  And they try to do\nit well, because the people they admit are going to be working for\nthem.Apparently only recommendations really matter at the best schools.\nStandardized tests count for nothing, and grades for little.  The\nessay is mostly an opportunity to disqualify yourself by saying\nsomething stupid.  The only thing professors\ntrust is recommendations, preferably from people they know. [6]So if you want to get into a PhD program, the key is to impress\nyour professors.  And from my friends who are professors I know\nwhat impresses them: not merely trying to impress them.  They're\nnot impressed by students who get good grades or want to be their\nresearch assistants so they can get into grad school.  They're\nimpressed by students who get good grades and want to be their\nresearch assistants because they're genuinely interested in the\ntopic.So the best thing you can do in college, whether you want to get\ninto grad school or just be good at hacking, is figure out what you\ntruly like.  It's hard to trick professors into letting you into\ngrad school, and impossible to trick problems into letting you solve\nthem.  College is where faking stops working.  From this point,\nunless you want to go work for a big company, which is like reverting\nto high school, the only way forward is through doing what you\nlove.Notes\n[1] No one seems to have minded, which shows how unimportant\nthe Arpanet (which became the Internet) was as late as\n1984.[2] This is why, when I became an employer, I didn't care\nabout GPAs.  In fact, we actively sought out people\nwho'd failed out of school.  We once put up posters around Harvard\nsaying \"Did you just get kicked out for doing badly in your classes\nbecause you spent all your time working on some project of your\nown?  Come work for us!\"  We managed to find a kid who had been,\nand he was a great hacker.When Harvard kicks undergrads out for a year, they have to get jobs.\nThe idea is to show them how awful the real world is, so they'll\nunderstand how lucky they are to be in college.  This plan backfired\nwith the guy who came to work for us, because he had more fun than\nhe'd had in school, and made more that year from stock options than\nany of his professors did in salary.  So instead of crawling back\nrepentant at the end of the year, he took another year off and went\nto Europe.  He did eventually graduate at about 26.[3] Eric Raymond says the best metaphors for hackers are\nin set theory, combinatorics, and graph theory.Trevor Blackwell reminds you to take math classes intended for math majors.\n\"'Math for engineers' classes sucked mightily. In fact any 'x for\nengineers' sucks, where x includes math, law, writing and visual\ndesign.\"[4] Other highly recommended books: What is Mathematics?, by\nCourant and Robbins;  Geometry and the Imagination by Hilbert and\nCohn-Vossen.\nAnd for those interested in graphic design,\nByrne's Euclid.\n[5] If you wanted to have the perfect life, the thing to do would\nbe to go to grad school, secretly write your dissertation in the\nfirst year or two, and then just enjoy yourself for the next three\nyears, dribbling out a chapter at a time.  This prospect will make\ngrad students' mouths water, but I know of no one who's had the\ndiscipline to pull it off.[6] One professor friend says that 15-20% of the grad students they\nadmit each year are \"long shots.\"  But what he means by long shots\nare people whose applications are perfect in every way, except\nthat no one on the admissions committee knows the professors who\nwrote the recommendations.So if you want to get into\ngrad school in the sciences, you need to go to college somewhere with\nreal research professors.  Otherwise you'll seem a risky bet\nto admissions committees, no matter how good you are.Which implies\na surprising but apparently inevitable consequence:\nlittle liberal arts colleges are doomed.\nMost smart\nhigh school kids at least consider going into the sciences, even\nif they ultimately choose not to.\nWhy go to a college that limits their options?Thanks to Trevor Blackwell, Alex Lewin, Jessica Livingston,\nRobert Morris, Eric\nRaymond, and several\nanonymous CS professors\nfor reading drafts of this, and to the students whose questions\nbegan it."},{"title":"Viaweb FAQ","text":"How did the editor handle client sessions?There was one Lisp process for each user.  When someone logged\nin to edit their site, we'd start up a new process and load all\ntheir data into memory.  From that point they had an ongoing\nconversation with that process.Because everything was already loaded into memory, we never\nhad to read anything from disk or start up a process to\nrespond to an HTTP request.  All we had to do was evaluate\na closure stored in memory.What did you use for an HTTP server?At first the editor had its own HTTP server, written in Common Lisp\nby Robert Morris.  Later we switched to a version of\nApache that he hacked to talk to Lisp.What Lisp did you use?Clisp.Did you use real continuations to save state?No, we used macros to fake them in Common Lisp, as described in\nOn Lisp.What database did you use?We didn't use one.  We just stored everything in files.\nThe Unix file system is pretty good at not losing your data,\nespecially if you put the files on a Netapp.It is a common mistake to think of Web-based apps as interfaces to databases.\nDesktop apps aren't just interfaces to databases; why should Web-based apps\nbe any different?  The hard part is not where you store the data, but\nwhat the software does.While we were doing Viaweb, we took a good\ndeal of heat from pseudo-technical people like VCs and industry\nanalysts for not using a database-- and for using cheap Intel\nboxes running FreeBSD as servers.  But when we were getting\nbought by Yahoo, we found that they also just stored everything\nin files-- and all their servers were also cheap Intel boxes\nrunning FreeBSD.(During the Bubble, Oracle used to run ads saying that Yahoo\nran on Oracle software.  I found this hard to believe, so I asked around.\nIt turned out the Yahoo accounting department used Oracle.)Was your co-founder the same Robert Morris who wrote the worm\nand is now a professor at MIT?Yes.Where did you get venture funding?We got money from several private investors, what are known in the\nbusiness as \"angels.\"  Our investors were pretty serious,\nalmost VCs, but they weren't actually brand-name VC firms.We did Viaweb very cheaply.  We spent a total of about $2 million.\nWe were just about breaking even when we got bought, so we\nwould not have spent too much more.How was \"Viaweb\" pronounced?The official policy was that you could say either vee-a-web or\nvie-a-web.  We all used the former, but everyone else, including\nthe people at Yahoo, seemed to prefer the latter.What would you do differently?Technically, not much.  I think the main thing we should have done\nthat we didn't was start some kind of online store ourselves.  We\nused the editor to make our own site, so we were pretty motivated\nto make it good.  But we could only understand the e-commerce\npart of the software second-hand."},{"title":"Viaweb Press Hits","text":"PC Magazine:\n\"Viaweb Store has taken e-commerce to a new level,\nmaking this\nexpanding field readily accessible to anyone who has an Internet\nconnection.\"\nBusiness Week:\n\"Viaweb offers online, point-and-click instant store-building.\"\nPC World:\n\"Viaweb can have you selling your products online in minutes, literally.\nIt doesn't get much easier.\"\nForbes:\n\"Conventional wisdom has it that selling your wares on\nthe Internet is an expensive proposition. Wrong...\nEnter a two-year-old Cambridge, Mass-based startup called\nViaweb.  Its proposition: We'll give you all the software you\nneed to create a Web store, lease you virtual mall space and\nhandle all of the housekeeping,\nincluding order taking and report\ngeneration.\"\nWall Street Journal Online\n\"electronic storefront technology for merchants seeking a\nquick route into cyberspace.\"\nUSA Today Online:,\n\"Makes it possible for businesses to build their Web stores\ndirectly\non the server.\"\nInternet Computing:\n\"For someone who wants to get online fast with a small start-up\nbudget, this is the best choice.\"\nc|net:\n\"\"For people who've been hanging back\nwondering if they should put their small business\non the Web, Viaweb's product says, Yes, you\ncan get involved and\nyou don't\nneed a rocket scientist to do it,\" said Emily\nGreen, an analyst at Forrester Research.\"\"Viaweb has relatively\nlittle competition at the low end of the\ne-commerce market. Viaweb Store is designed\nfor non-technical users, while most online\nstorefront software is created for technical\nsophisticates, such as systems integrators or\nprogrammers.\"\nWired Online:\n\"An easy-to-use site-authoring tool encourages even\nthe least geek-prone of e-store owners to create and\nmanage merchandising empires.\"\nInc Technology:\n\"When the virtual store yielded little more than an occasional\nsale after a year of operation, Treitman opted for a more complete\nWeb site hosting service.  He chose the online store system Viaweb\nStore, from Viaweb.Treitman's new strategy has paid off: Web sales already account for\n5% of Softpro's sales, up from virtually\nnil a year ago.\"\nCommunications Week:\n\"The first phase of a new breed\nof Web-based thin client hosting services for\nelectronic commerce.\"\nMarketing Technology:\n\"Viaweb continues to zoom ahead of\nits competitors.\"\nDirect:\n\"Dean & DeLuca had a presence using iCat's software.\nBut Scott said that a new product, Viaweb, is easier\nto use to make changes to the store.\"\nBoston Globe:\n\"Viaweb has vastly simplified\nthe process of setting up shop on the Web. Using Viaweb Store\nand working in a standard browser,\ntechnical neophytes can instantly create an on-line\nstore that describes and illustrates products. Better\nyet, Viaweb returns invaluable tracking data to the\nstore owner, revealing where buyers are coming from\nand how much they are spending.\"\nElectronic Advertising & Marketplace Report:\n\"Viaweb seems to have what might be the right strategy to make the\nWeb the universal shopping center\nenvisioned by so many.\"\nInternet World:\n\"Users can\ncreate secure online\nstores in minutes,\nmodifying them using a forms-based\ninterface that allows them to adjust everything from\nbackground color to button size without using HTML.\"\"Viaweb's inclusion of the affiliate-management capability in\nits 4.0 release is likely to pressure its competitors\nto keep up.\"\nInternet.Com:\n\"What's remarkable about Viaweb is just how\nadvanced you can get with customization. This is the\nmark of a mature and well-executed product: It\naddresses the needs of both beginners and advanced\nusers.\"\nE Business:\n\"Viaweb has developed the\neasiest,\nquickest and cheapest way for anyone to build\nand run a secure, graphically-cool store on the Net.\"\"One of the true electronic\ncommerce success stories.\"\nNetGuide:\n\"What would it take to get you to start a Web-based retail\nbusiness?  How about if you could be up and running, in a\nsecure environment, in less than a day, for $300 a month?\nWhat if building your site required no programming or computer\nexpertise beyond knowing how to use a Web browser?\nYou can do it on Viaweb,\na Boston-based electronic mall,\nhosting service, and server-based e-commerce software vendor.\"\nInteractive Week:\n\"Viaweb offers an easy way to start an electronic commerce Web site.\nThe product comes with store-building software, secure hosting, and\nindustrial-strength tracking tools.\"\"Using software developed by Viaweb, net stores can\ndetermine not only where their customer traffic is\ncoming from, but which visitors buy the most.\"\nSeybold Bulletin:\n\"We really like the Viaweb concept. It lowers the cost\nbarrier for would-be Web merchants in somewhat the way\nthat desktop publishing lowered the cost barrier for\nsetting type.  Large companies can use Viaweb to test\nthe Web waters before setting up their own servers;\nsmall businesses may never need\nanything more.\"\nInfoWorld\n\"Companies without system management capabilities or budgets can\nbenefit tremendously\nfrom Viaweb's outsourcing model.\"\nPC Week Online:\n\"Enables users to become Internet merchants\nin 10 minutes.\"\nCool Tool of the Day:\n\"Viaweb is THE solution if you're a small business\n(or even a big business) that wants to get into the\ne-commerce game for cheap.\"\nMass High Tech:\n\"Another industry leader\nis Viaweb Inc. This company offers a\nbrowser-based program that enables small to mid-sized enterprises\nto set up an on-line retail store in minutes.\"\nCMPnet:\n\"One of the best things about Viaweb is that as your\nonline store - and your confidence in running it -\ngrows, you can tap into more and more Viaweb\nfeatures.\"\nWeb Commerce Today:\n\"Viaweb Store has\nperfected an awesome array of statistics\nwhich not only tell you\nwhat products were viewed, but the most common paths customers\ntake in your store (great for design analysis and improvement),\nwhat link the shopper clicked on to get to your store, and which\nbanner ads or search engine links produced the highest per capita\nsales for your store.\"\nInvestor's Business Daily:\n\"A common pitfall of Internet shopping is that it's hard to browse\nunless you already know\nthe sites that sell what you want to buy. To the rescue\ncomes Shopfind,\na new search engine from privately-held Viaweb.\"\nNew York Times Online:\n\"Shopfind, a new site from Viaweb, is about as useful as an\nagent, though it functions more like an ordinary search service\nscouring the Web. Shopfind is also fast,\nand users don't have\nto first download software to use it. \"\nInternetnews.com:\n\"Viaweb Store provides secure online ordering, tracking and marketing\ntools, and a listing in Viamall, the busiest mall\non the Web.\"\nPC Computing:\nInterface Monthly:\n\"Viaweb's unique methodology -\na combination of building, hosting,\nand tracking tools - allowed Vermont Teddybear to create its new online\nstore and process credit card orders securely.\"\nTelecommunications Reports:\n\"A new feature of the software allows merchants to manage\nmultiple mailing lists.\"\nRetail Technology News:\n\"Gartner Group's Guptill says he doesn't expect all on-line malls\nto disappear, and he cites Viamall as an exceptional\nsuccess story.\"\nec.com:\n\"Viaweb Inc. is trying to make it as easy as possible for\nits customers to set up storefronts with its Viaweb Store 3.0\nproduct, which includes storefront-building software, secure hosting\nand tracking tools.\"\nAdWeek Online:\n\"Viaweb Store has been used by Rolling Stone,\nVirgin Interactive, and Frederick's of Hollywood.\"\nMarketing Technology:\n\"Two companies that have been leading the way in their price categories\nfor a while now are Viaweb and Intershop Online.\"\nNew Media:\n\"Dean & DeLuca, a renowned New York City-based gourmet foods\nretailer, used iCat's Electronic Commerce Suite to develop its\nfirst online catalog.  It found that the information iCat could\nprovide about customers wasn't specific enough, so it switched\nto Viaweb.\"\nDirect:\n\"Cataloger Hanover Direct is gearing up to put all 14 of its\nbooks on the Web as online stores.  In an unusual move, 12 of\nthe catalogs are using off-the-shelf software by Cambridge, MA-based\nViaweb Inc. to create the online stores.\"\nBusiness '97:\n\"An easy, quick, and cheap way to build, promote, and run a\nstore on the Web.\"\nCatalog Age Show Daily:\n\"Hanover chose Viaweb to place its remaining titles online\nprimarily because of its easy-to-use interface, low cost, and\nthe ability for direct control over text and graphics.\"\nMicrosoft Interactive Developer:\n\"Anyone with a Web browser can build a store.\nThe system runs entirely on Viaweb's\nserver, so there is no software to download or install.\"\nThe Journal of Commerce:\n\"At $100 to $300 a month, Viaweb virtually takes the cost\nrisk out of starting your own online business.The company touts itself as the best low-cost high-quality\nsolution to bringing your business online, and on close\ninspection through its Web site, I tend to agree.\"\nSearch Engine Update:\n\"Viaweb provides sophisticated online shopping software [that]\ncan track how a visitor found a\nweb site and how much they spent during their visit.\"\nWEBster:\n\"Small businesses and large enterprises can enter the\nelectronic commerce marketplace today without the expense\nand headaches of running a commerce server.  Sound to\ngood to be true?  It did to me, yet the solution seems to\nwork effectively for a number of businesses, including\nVirgin Interactive, Rolling Stone, and Frederick's of\nHollywood.\"\nMultimedia Entertainment & Technology:\n\"Since it began using [Viaweb], Virgin has increased its sales\ndirectly over the Internet by 300%\"\nComputerworld:\n\"Nylander said that approximately 50,000 catalogs have\nbeen ordered online since the site opened, with about\n3% resulting in sales, about double the rate for other\ncatalog requests.\"\nHome PC:\n\"Viaweb Store can help you run a thriving\nInternet-based business.\"\nRetailing Technology:\n\"A unique feature of the Viaweb service is that retailers\ncan create their commerce sites remotely with a standard\nbrowser.\"\nLinkExchange:\n\"Viaweb's online store service provides\nterrific tracking tools for identifying where\nyour most qualified visitors are coming from.\"\nRetail Info Systems News:\n\"The Frederick's site, according to company officials, was an\nimmediate success.\"\nMedia Daily:\n\"Viaweb Store enables merchants to establish an online\nstorefront in a matter of minutes and to maintain the shop\n- including a customer-tracking mechanism -\nfor as little as $100 a month.\"\nE.Commerce Today:\n\"Boston Marathon Web store built in\nless time than\nrequired to win race.\"\nBoston Business Journal:\n\"Viaweb Inc lets any merchant build a commercial\nweb-based catalog with a standard web browser and\nInternet connection - no technical experience required.\"\nDemo Letter\n\"Viaweb's online store software lets even the most lightweight,\nnon-technical business owner set up an Internet store - and be\nin business in very short order.\"\nDirect Newsline:\n\"Viaweb Store helps anyone create an on-line store in minutes.\"\nMarketing with Technology News:\n\"The most fascinating product at the DMA show was\nfrom Cambridge, MA-based Viaweb Inc.\"\nInteractive Marketing News:\n\"Viaweb Store boasts ease of use and tracking features\nthat pinpoint whence a customer comes, what search\nkeywords bring them into a store, and how much they\nspend there and on what.\"\nReport on Electronic Commerce:\n\"Merchants using Viaweb can know, by way of several\nsimple spreadsheets, which pages consumers look at in\ntheir sites and in which order, the Web site consumers\nwere looking at immediately prior to theirs, and, in\nthe case of a search engine, which search queries they\nwere using within that engine.\"\nElectronic Commerce News:\n\"Sales and marketing professionals will have new Web\ntracking tools with a new version of online store\nsoftware from Viaweb.\"\nInformation & Interactive Services Report:\n\"Viaweb has already attracted a client list that includes\nthe likes of Frederick's of Hollywood, Rolling Stone,\nInternational Male, and Huntington Clothiers.\"\nPC World Online:\n\"Customers can track statistics on where visitors to their site\nare coming from, which sources generate the most sales,\nand, for visitors who arrive from a search engine,\nwhich keywords they typed - information that's vital\nin developing Web marketing plans.\"\nDM News:\n\"When Damart Inc launched its first Web site two\nweeks ago, it joined a growing list of direct\nmarketers that have turned to Viaweb Inc to create\ntheir online stores.\nCustomers cite low cost and ease of use among\nthe attractions of Viaweb, but the company also\noffers a high-traffic cybermall and newly upgraded\nstatistical tracking tools.\"\nInternet Week:\n\"Analyst Mary Doyle of IDC/Link said Viaweb's\ntracking software will be useful.  \"It's pretty\nsophisticated.  They tried to get a handle on the\nminds of Web shoppers.\"\"\nCommunications Week:\n\"\"Without Viaweb, I don't think we would do one tenth of the\nsales that we do now,\" says John Wells\"\nHOW:\n\"Viaweb's online Web catalog solution is so simple\nand elegant that I predict it's a harbinger of things\nto come...What's more, its reporting facilities are\nsome of the best I've seen.  Not only do you see the\nhits on each category or item, but you also see the\ntotal sales generated for each.\"\nFrisco Life:\n\"Viaweb allows you to\nset up a storefront on the Internet in a matter of\nmoments with no special codes or software of your own.\nYet you can still give your store a custom look.\"\n@NY:\n\"But the presentation that really had the capital folks\nnodding their heads--and crowding the break-out session\nafterwards--came from Cambridge, MA's Viaweb, which\nshowed off its Web-based virtual store-building software\nthat's so easy to use that CEO Paul Graham built a store in 10\nminutes.\"\nElectronic Commerce News:\n\"Moore Medical Corp, with $289 million in annual sales and more\nthan 100,000 medical organizations as customers, is using Viaweb to\nrun its one week old online store.\"\"With Moore, Viaweb acquires its first significant business to business\ncustomer.  Viaweb already has two of the top thirty catalog companies\nas customers.\""},{"title":"Viaweb's First Business Plan","text":"I recently found what I think is Viaweb's original business plan.\nI didn't know what a business plan was supposed to have in it,\nso I just wrote down what I thought was important\n(in plain text, to make it easy to send by email).The company was called \"Webgen\" at first.  We thought we only needed\n$15,000 in startup capital; this proved to be an underestimate.Reading this, you can see that even we were still trying to grasp what a\nweb-based application was.  In the system\ndescription we listed the site generator and the web interface as\nseparate components; now one would just think of them as a web-based\nsite generator.  And we still thought that some users would prefer to\nupdate their sites via email than via a browser, because using a web\nbrowser was such an esoteric skill.MarketplaceMCI was the big power in e-commerce at the time.  They had\na service bureau model, but they created nice looking sites.  Our\noriginal page design imitated theirs.\nSketch of a business plan for Webgen.  24 Aug 95.OVERVIEWWebgen allows clients to generate web catalogs remotely.There are several other companies that can generate and serve web\ncatalogs.  The best known site of this type is Marketplace MCI\n(www.internetmci.com).  But while these other sites use their\ngenerators in-house to build catalogs from materials provided by\nclients, Webgen's generator can be used interactively by anyone with a\nmodem and a copy of Netscape.This will lower the cost of putting a catalog online by, say, 90%.  It\nalso means that our volume is not limited by the number of clients we\ncan serve personally.  We would be a software company, not a service\ncompany.Anyone will be able to sign up to keep a catalog at our site for a flat\nmonthly fee.  And we have made Webgen so easy to use that any graphic\ndesigner or \"web consultant\" can generate catalogs with it.  So instead\nof approaching catalog companies with an offer to put their catalog on\nthe web, we will let them do it themselves.Suppose you are running a catalog company.  Today, if you want to have\nan online catalog that people can order from, you have two options.\nYou can have a company like MCI create and serve it for you, or you can\nset up your own server.  Both options are expensive.  When our service\ngoes online for real, you will be able to do it in-house:  anyone who\ncan use Netscape can generate catalogs at Webgen.There are a large number of companies who would like to be able to\nmarket products on the web, if it were cheaper and easier.  To our\nknowledge, Webgen is the *only* system that can tap this market.As the market matures, we would consider spinning off a standalone\ncatalog generator/server as a commercial product.HOW BIG A DEAL IS WEBGEN?Even assuming it succeeds, what are the prospects for Webgen?  How big\na role in the future of the Internet will a company like Webgen play?The answer, perhaps surprisingly, seems to be: a very big role.\nTechnical people and business people agree, the web is going to be\nimportant.  A large part of the web's importance will come from online\ncommerce.  And Webgen could, in turn, be involved in a large part of\nthe online commerce.Why?  Forget about Webgen for a moment, and just ask: what will the\nfuture of online commerce look like?  When someone wants to sell things\non the Web, how will they do it?  At the moment, they can either go to\na company like MCI, or set up their own server.  But what will they do\na year or two from now?  Ten years from now?If selling things online were like other software applications, the\nfuture of the market would be general-purpose software packages.  You\nwould eventually be able to buy a copy of Microsoft Catalog, and use\nthat to put your catalog online.There are a couple reasons why this is not likely to happen anytime\nsoon.  The main problem is, an online catalog is not just something\nthat happens on your own computer, like word-processing.  It has to be\non a web server, with encrypted transactions, a high-bandwidth network\nconnection, 100% uptime, security, backups, order tracking, and so on.\nSetting up a server is expensive and difficult.  On the East coast, the\nnetwork connection alone costs about $2000/mo.So the next best solution is to have a general-purpose catalog\ngenerator, but have someone else handle the server part.  *And that's\nexactly what Webgen is.*  Webgen is Microsoft Catalog, or as close as\nanything's going to get.  Don't be led astray by the fact that the\nsoftware is going to run on our machines.  With networks, it no longer\nmatters whether the program you're using is running on your own\ncomputer or not.  Using Webgen will be just like using any off-the-\nshelf software package, except that users won't have to install\nanything.What's more, our software will \"run\" on everyone's machine, updates\nwill be free and instant, and the interface will be one the users\nalready know (Netscape).The idea behind Webgen is a lot like the one that made Kodak.  Before\nKodak came along, if you took a photo, you had to develop it.  If an\nordinary person wanted to have his photo taken, he went to a\nphotographer's studio, just as you might go to MCI to put your catalog\nonline today.Eastman sold a camera everyone could use, plus the promise to handle\nthe messy, capital-intensive part---developing the film.We sell a catalog generator everyone can use, plus the promise to\nhandle the messy, capital-intensive part---serving the pages.Of course, really high-end customers will want to set up their own\nservers, just as high-end photography customers develop their own\nphotos.  We would not rule out setting up clones of Webgen for them.\nBut we believe that we will be more successful if we think of ourselves\nas selling a product rather than a service.  Webgen could be the Kodak\nof online commerce.  Someone will be.THE SYSTEMWebgen's formula has three ingredients:1.  A server (www.webgen.com) that can serve catalogs and support\nordering.2.  A generator that can generate catalogs to be served at the site.3.  An interface that allows users anywhere on the web to modify and\nregenerate their catalogs interactively.The site is already up and running, though at present the only catalog\non the server is one that we made for demos.  All three ingredients\nalready work.  (The demo catalog can be seen by following the \"Clients\"\nlink on our home page, which is at http://www.webgen.com)We are now polishing the software to make it faster and easier to use,\nbut we believe it is already the most sophisticated web catalog\ngenerator available.  Webgen can do several things that we do not\nbelieve any other generator can do:1.  The big win, of course, is the interactive interface.  It is this\nthat makes it possible for Webgen to be a software company that sells\nits generator to everyone, instead of service company that uses it\nin-house.But even compared to the generators that companies like MCI use\nin-house, we believe Webgen is more sophisticated:2.  Webgen generates all the buttons in a site automatically.\nSophisticated web sites have buttons that are images instead of text\nlinks.  Usually these button images are made by hand in a program like\nPhotoshop.  We believe our generator is the first to create all the\nbuttons in a site automatically.This is a great advantage to users, because it means they will be able\nto control even the way the buttons in their site look via our remote\ninterface.  For example, if they want the text in buttons to be in\nTimes instead of Helvetica (the default), they will be able to do this\nwith a single menu choice on our remote interface.  The next time they\nlook at their site, all the button texts will be in Times.3.  Webgen creates all the thumbnail images itself.  The user only has\nto supply the original (big) images of the items in the catalog.\nBecause the thumbnails are generated by the software, they can all be\nthe same height, leading to a more consistent set of pages.  (Compare\nour demo to existing online catalogs in this respect.)4.  Webgen has a wide variety of page styles.  Our default section\nstyle, for example, puts three thumbnails horizontally across each\npage.  But there are already six other possible section styles.  By\nmaking menu choices, clients will be able to have the section laid out\ninstead with a single picture and lettered items, or with with\nthumbnails laid out vertically, or even diagonally.  There will be a\ncomparable number of options for the layout of the individual item\npages and the home page.5.  For each catalog, Webgen builds an index and creates a database\nthat is used by a search script running on our server.  Users will be\nable to find items in any catalog at our site either by looking in the\nindex or doing a search by keyword.6.  As well as an interactive interface, Webgen has a command language\nfor batch updates to catalogs.  Commands can be sent to the server by\nemail and the catalogs regenerated automatically.  This will be useful\nfor clients who want to \"attach\" their catalog to an inventory control\nsystem.  Because it takes only a minute or two at most to regenerate a\nlarge catalog, clients could make their online catalogs reflect\nminute-by-minute changes in inventory--- as simply as sending us email,\nand at no extra cost.HOW PEOPLE WILL USE ITWe expect that we will have two kinds of users:(A) Sometimes the user will be the catalog company itself.  Webgen is\nso easy to use that a catalog company could very well designate someone\nin-house to manage their online catalog.(B) Otherwise the user will be one of the growing army of \"web\nconsultants\", acting on behalf of a catalog company.  The consultant\nwill pass on, and mark up, the flat fee that we charge.  We expect that\nsuch VARs will work aggressively to sell the service to catalog\ncompanies.  With Webgen, any web consultant will be able to approach a\ncatalog company and propose to put its catalog online for much less\nthan the current going rate, and still pocket a large markup.In either case, using Webgen will be the same:1. The client will contact us and set up a new account.  We will assign\nthem a username and a password, and also register a new domain name, if\nthey want one.  Every catalog on our site will be able to have its own\ndirect URL of the formhttp://www.yourcompany.comif the client desires.2. To build a catalog, Webgen needs two things: images of the items\ncontained in it, and text including the price, item number,\ndescription, and so on.There will be several ways for the user to send us these raw\nmaterials.  They can type the text directly into our remote interface,\nor they can send it to our server by email in a prespecified format.They will be able to send us the images by logging into their account\non our server and FTPing them to a designated directory, from which the\ngenerator will grab them automatically.  (Any connection good enough\nfor netscape can also support FTP.)  When browsers support email with\nattached images (which they promise to do soon) sending images to\nWebgen will be trivial.3. After Webgen's server receives input through its remote interface,\nor via email, it will automatically regenerate the changed portions of\nthe catalog.  Changes will be visible to the user via Netscape, usually\nwithin seconds.4. When the user has made and inspected changes to a catalog, he or she\nwill send the server a \"commit\" message, causing the changed catalog to\nbe copied to its real URL.  At this point the catalog will become\nvisible to consumers visiting the site.For security, the commit command will use one-time passwords.  This\nway, even if someone gets the ordinary password of a user, they can't\nmodify the catalog that actually appears at the site.5. Clients that have a high-volume of orders will be given an account\non our server that they can use to retrieve them.  If they want, they\ncan keep this connection open 24 hours per day, generating a live feed\nof orders.Smaller clients will have orders forwarded to them by fax---an\nattractive alternative, because it is secure and uses familiar\ntechnology.DETAILSThe flat fee would include a certain amount of network bandwidth (that\nis, visitors) per month.  After this is exceeded, there may be a usage\ncharge.Netscape has recently announced that it will support Java.  This may\neventually allow us to shift some of the running of the generator onto\nthe clients' CPUs.PEOPLEAt the moment, Webgen consists of the following four people:Paul Graham (pg@webgen.com) is an expert on dynamic languages.  He is\nthe author of _On Lisp_ (Prentice Hall, 1993) and _ANSI Common Lisp_\n(Prentice Hall, 1995).  He has worked as a consultant to the US\nDepartment of Energy, DuPont (for whom he wrote one of the first\nparametric CAD programs), and Interleaf.  He has an AB summa cum laude\nfrom Cornell, and a PhD in Computer Science from Harvard.Gino Lee (gino@webgen.com) is Tutor in Printing and Typography at\nHarvard University and is Director of the Bow & Arrow Press, Harvard's\nexperimental typographic workshop; he teaches subjects including\nletterpress printing, design history, digital type design, and artist's\nbooks. He has been an independent digital type and graphic designer\nsince 1989. In 1990 he won the Society of Printers' Award for\nExcellence.Robert Morris (rtm@webgen.com) is an expert on computer networks. He\nhas published papers on high-speed networks, wireless communications,\nand computer security. While in high school he worked at Bell Labs,\nwhere he ported TCP/IP (the software on which the Internet is built) to\nBell Labs' version of Unix. He later worked for Convex Computers,\nThinking Machines, and DEC Systems Research Center.  He has an AB in\nComputer Science from Harvard, and is currently a PhD candidate in\nComputer Science there.Julian Weber (jlw@webgen.com) has been practicing law in New York for\nover 30 years. From 1964 to 1979 he was a partner in the firm of\nBotein, Hays, and Sklar. From 1979 to 1984 he was the president of _The\nNational Lampoon_. He holds a JD from Harvard Law School.Robert and Paul handle the software; Gino is in charge of graphic\ndesign; and Julian deals with corporate and legal questions.  We are\nlooking for one more person to manage business matters, especially\ndealing with the press, clients, and potential corporate partners.FINANCESWebgen has no capital.  On the other hand, it costs very little to run\nit, at present.  All our equipment is the personal property of the\npeople involved, and the business has no other major expenses.  No one\nhas a salary.The company could be self-capitalizing, if necessary.  That is, we\ncould use income from initial clients to buy things that we could use\nto attract more clients.The business would grow a lot faster if we had about $15,000 to spend.\nThis would get us:1.  A computer on which to develop software ($3000).2.  Secure server software ($5000).  This does not seem to be an\nabsolute necessity; there are a lot of sites on the web where you can\nsend your credit card number unencrypted, and to date there have been\nno reports of the numbers being stolen.  But catalog companies may\n*believe* that a secure link is necessary, and spending this $5000\nwould give Webgen a much more professional look.3.  A high-bandwidth Internet connection ($3000 + $350/month).  At\npresent Webgen has only a 28.8kb connection.  This will serve in the\ninitial stages, when we have few clients.  For $350 a month we can put\na server at the site of an ISP and get a slice of their T1 line.  This\nalso means buying another server, which costs another $3000.Spending some money on advertising might also be a good idea."},{"title":"Viaweb's Last Press Release","text":"Fruit of a Lifetime's Work in Applications of Randomness.Cambridge, Mass. - June 4, 1998 - Viaweb Inc, developers of the most popular online store software, today announced that Trevor Blackwell has been awarded a doctorate in computer science by prestigious Harvard University. Dr. Blackwell's dissertation, Applications of Randomness in System Performance Measurement, is the result of a lifetime's work in the application of randomness.\"On behalf of all of us at Viaweb, I'd like to congratulate Dr. Blackwell on his new degree and matching ring,\" said Viaweb president Paul Graham. \"Also, Trevor, if you get this, could you call Linda Wilk? A user wants to talk to you about Cybercash.\"Dr. Blackwell's dissertation argues that there should be a random component in all arbitrary decisions. This research grew out of his ongoing work in the design of software based on arbitrary decisions, and his extensive collection of random components.In addition to his work in randomness, Dr. Blackwell has also developed pioneering techniques for rapid mass deletion of potentially critical information. His original work on /usr directories at Harvard has successfully been applied to IP addresses, and also, with the assistance of his wife Laurie, to human hair (see illustration).\"It's not a Flowbie!\" said Dr. Blackwell. \"They're the very same kind of clippers that actual barbers use.\"About ViawebViaweb, Inc. of Cambridge, Mass., is the leading developer of Web-based authoring tools. Viaweb Store is the most popular online store software, used in over 1050 sites. Viaweb's Viamall (www.viamall.com) is the busiest Web mall, with over 10.1 million page views per month. For more information, visit Viaweb at www.viaweb.com or call 1-888-4-VIAWEB.About Harvard UniversityHarvard University, founded in 1638, is the leading supplier of education and scholarship worldwide. Its flagship product, the Harvard University PhD degree, is the scholarship industry's leading enterprise-wide scalable information management solution. For more information, visit Harvard at www.harvard.edu, or call 1-617-495-1000.(This was Viaweb's final press release.  The deal with Yahoo closed\na few days later,\nso this was the culmination of my career as a writer of press releases.)"},{"title":"Was Viaweb First?","text":"As far as\nwe knew, Viaweb was the first web-based application,\nbut I worry that there were others we didn't know\nabout.  So please tell me if you know of any earlier.It depends what counts as an application, of course.  What I mean\nby an application is a web site that is not merely an interface\nto a database, but something like a desktop application, where\nthe user actually builds things on the server.\nThat is, something with the\nequivalent of file->new.Robert Morris and I demoed the first version of Viaweb to investors\nin August 1995.  At the time,\nas far as we knew, it was a new\nkind of software.  But I don't want to be saying something that isn't\ntrue, so if anyone knows of any web-based applications before that,\nplease drop me a line."},{"title":"Web 2.0","text":"November 2005Does \"Web 2.0\" mean anything?  Till recently I thought it didn't,\nbut the truth turns out to be more complicated.  Originally, yes,\nit was meaningless.  Now it seems to have acquired a meaning.  And\nyet those who dislike the term are probably right, because if it\nmeans what I think it does, we don't need it.I first heard the phrase \"Web 2.0\" in the name of the Web 2.0\nconference in 2004.  At the time it was supposed to mean using \"the\nweb as a platform,\" which I took to refer to web-based applications.\n[1]So I was surprised at a conference this summer when Tim O'Reilly\nled a session intended to figure out a definition of \"Web 2.0.\"\nDidn't it already mean using the web as a platform?  And if it\ndidn't already mean something, why did we need the phrase at all?OriginsTim says the phrase \"Web 2.0\" first\narose in \"a brainstorming session between\nO'Reilly and Medialive International.\" What is Medialive International?\n\"Producers of technology tradeshows and conferences,\" according to\ntheir site.  So presumably that's what this brainstorming session\nwas about.  O'Reilly wanted to organize a conference about the web,\nand they were wondering what to call it.I don't think there was any deliberate plan to suggest there was a\nnew version of the web.  They just wanted to make the point\nthat the web mattered again.  It was a kind of semantic deficit\nspending: they knew new things were coming, and the \"2.0\" referred\nto whatever those might turn out to be.And they were right.  New things were coming.  But the new version\nnumber led to some awkwardness in the short term.  In the process\nof developing the pitch for the first conference, someone must have\ndecided they'd better take a stab at explaining what that \"2.0\"\nreferred to.  Whatever it meant, \"the web as a platform\" was at\nleast not too constricting.The story about \"Web 2.0\" meaning the web as a platform didn't live\nmuch past the first conference.  By the second conference, what\n\"Web 2.0\" seemed to mean was something about democracy.  At least,\nit did when people wrote about it online.  The conference itself\ndidn't seem very grassroots.  It cost $2800, so the only people who\ncould afford to go were VCs and people from big companies.And yet, oddly enough, Ryan Singel's article\nabout the conference in Wired News spoke of \"throngs of\ngeeks.\"  When a friend of mine asked Ryan about this, it was news\nto him.  He said he'd originally written something like \"throngs\nof VCs and biz dev guys\" but had later shortened it just to \"throngs,\"\nand that this must have in turn been expanded by the editors into\n\"throngs of geeks.\"  After all, a Web 2.0 conference would presumably\nbe full of geeks, right?Well, no.  There were about 7.  Even Tim O'Reilly was wearing a\nsuit, a sight so alien I couldn't parse it at first.  I saw\nhim walk by and said to one of the O'Reilly people \"that guy looks\njust like Tim.\"\"Oh, that's Tim.  He bought a suit.\"\nI ran after him, and sure enough, it was.  He explained that he'd\njust bought it in Thailand.The 2005 Web 2.0 conference reminded me of Internet trade shows\nduring the Bubble, full of prowling VCs looking for the next hot\nstartup.  There was that same odd atmosphere created by a large\nnumber of people determined not to miss out.  Miss out on what?\nThey didn't know.  Whatever was going to happen—whatever Web 2.0\nturned out to be.I wouldn't quite call it \"Bubble 2.0\" just because VCs are eager\nto invest again.  The Internet is a genuinely big deal.  The bust\nwas as much an overreaction as\nthe boom.  It's to be expected that once we started to pull out of\nthe bust, there would be a lot of growth in this area, just as there\nwas in the industries that spiked the sharpest before the Depression.The reason this won't turn into a second Bubble is that the IPO\nmarket is gone.  Venture investors\nare driven by exit strategies.  The reason they were funding all\nthose laughable startups during the late 90s was that they hoped\nto sell them to gullible retail investors; they hoped to be laughing\nall the way to the bank.  Now that route is closed.  Now the default\nexit strategy is to get bought, and acquirers are less prone to\nirrational exuberance than IPO investors.  The closest you'll get\nto Bubble valuations is Rupert Murdoch paying $580 million for\nMyspace.  That's only off by a factor of 10 or so.1. AjaxDoes \"Web 2.0\" mean anything more than the name of a conference\nyet?  I don't like to admit it, but it's starting to.  When people\nsay \"Web 2.0\" now, I have some idea what they mean.  And the fact\nthat I both despise the phrase and understand it is the surest proof\nthat it has started to mean something.One ingredient of its meaning is certainly Ajax, which I can still\nonly just bear to use without scare quotes.  Basically, what \"Ajax\"\nmeans is \"Javascript now works.\"  And that in turn means that\nweb-based applications can now be made to work much more like desktop\nones.As you read this, a whole new generation\nof software is being written to take advantage of Ajax.  There\nhasn't been such a wave of new applications since microcomputers\nfirst appeared.  Even Microsoft sees it, but it's too late for them\nto do anything more than leak \"internal\"\ndocuments designed to give the impression they're on top of this\nnew trend.In fact the new generation of software is being written way too\nfast for Microsoft even to channel it, let alone write their own\nin house.  Their only hope now is to buy all the best Ajax startups\nbefore Google does.  And even that's going to be hard, because\nGoogle has as big a head start in buying microstartups as it did\nin search a few years ago.  After all, Google Maps, the canonical\nAjax application, was the result of a startup they bought.So ironically the original description of the Web 2.0 conference\nturned out to be partially right: web-based applications are a big\ncomponent of Web 2.0.  But I'm convinced they got this right by\naccident.  The Ajax boom didn't start till early 2005, when Google\nMaps appeared and the term \"Ajax\" was coined.2. DemocracyThe second big element of Web 2.0 is democracy.  We now have several\nexamples to prove that amateurs can\nsurpass professionals, when they have the right kind of system to\nchannel their efforts.  Wikipedia\nmay be the most famous.  Experts have given Wikipedia middling\nreviews, but they miss the critical point: it's good enough.  And\nit's free, which means people actually read it.  On the web, articles\nyou have to pay for might as well not exist.  Even if you were\nwilling to pay to read them yourself, you can't link to them.\nThey're not part of the conversation.Another place democracy seems to win is in deciding what counts as\nnews.  I never look at any news site now except Reddit.\n[2]\nI know if something major\nhappens, or someone writes a particularly interesting article, it\nwill show up there.  Why bother checking the front page of any\nspecific paper or magazine?  Reddit's like an RSS feed for the whole\nweb, with a filter for quality.  Similar sites include Digg, a technology news site that's\nrapidly approaching Slashdot in popularity, and del.icio.us, the collaborative\nbookmarking network that set off the \"tagging\" movement.  And whereas\nWikipedia's main appeal is that it's good enough and free, these\nsites suggest that voters do a significantly better job than human\neditors.The most dramatic example of Web 2.0 democracy is not in the selection\nof ideas, but their production.\nI've noticed for a while that the stuff I read on individual people's\nsites is as good as or better than the stuff I read in newspapers\nand magazines.  And now I have independent evidence: the top links\non Reddit are generally links to individual people's sites rather\nthan to magazine articles or news stories.My experience of writing\nfor magazines suggests an explanation.  Editors.  They control the\ntopics you can write about, and they can generally rewrite whatever\nyou produce.  The result is to damp extremes.  Editing yields 95th\npercentile writing—95% of articles are improved by it, but 5% are\ndragged down.  5% of the time you get \"throngs of geeks.\"On the web, people can publish whatever they want.  Nearly all of\nit falls short of the editor-damped writing in print publications.\nBut the pool of writers is very, very large.  If it's large enough,\nthe lack of damping means the best writing online should surpass\nthe best in print.\n[3]\nAnd now that the web has evolved mechanisms\nfor selecting good stuff, the web wins net.  Selection beats damping,\nfor the same reason market economies beat centrally planned ones.Even the startups are different this time around.  They are to the\nstartups of the Bubble what bloggers are to the print media.  During\nthe Bubble, a startup meant a company headed by an MBA that was\nblowing through several million dollars of VC money to \"get big\nfast\" in the most literal sense.  Now it means a smaller, younger, more technical group that just\ndecided to make something great.  They'll decide later if they want\nto raise VC-scale funding, and if they take it, they'll take it on\ntheir terms.3. Don't Maltreat UsersI think everyone would agree that democracy and Ajax are elements\nof \"Web 2.0.\"  I also see a third: not to maltreat users.  During\nthe Bubble a lot of popular sites were quite high-handed with users.\nAnd not just in obvious ways, like making them register, or subjecting\nthem to annoying ads.  The very design of the average site in the\nlate 90s was an abuse.  Many of the most popular sites were loaded\nwith obtrusive branding that made them slow to load and sent the\nuser the message: this is our site, not yours.  (There's a physical\nanalog in the Intel and Microsoft stickers that come on some\nlaptops.)I think the root of the problem was that sites felt they were giving\nsomething away for free, and till recently a company giving anything\naway for free could be pretty high-handed about it.  Sometimes it\nreached the point of economic sadism: site owners assumed that the\nmore pain they caused the user, the more benefit it must be to them.\nThe most dramatic remnant of this model may be at salon.com, where\nyou can read the beginning of a story, but to get the rest you have\nsit through a movie.At Y Combinator we advise all the startups we fund never to lord\nit over users.  Never make users register, unless you need to in\norder to store something for them.  If you do make users register,\nnever make them wait for a confirmation link in an email; in fact,\ndon't even ask for their email address unless you need it for some\nreason.  Don't ask them any unnecessary questions.  Never send them\nemail unless they explicitly ask for it.  Never frame pages you\nlink to, or open them in new windows.  If you have a free version\nand a pay version, don't make the free version too restricted.  And\nif you find yourself asking \"should we allow users to do x?\" just\nanswer \"yes\" whenever you're unsure.  Err on the side of generosity.In How to Start a Startup I advised startups\nnever to let anyone fly under them, meaning never to let any other\ncompany offer a cheaper, easier solution.  Another way to fly low\nis to give users more power.  Let users do what they want.  If you\ndon't and a competitor does, you're in trouble.iTunes is Web 2.0ish in this sense.  Finally you can buy individual\nsongs instead of having to buy whole albums.  The recording industry\nhated the idea and resisted it as long as possible.  But it was\nobvious what users wanted, so Apple flew under the labels.\n[4]\nThough really it might be better to describe iTunes as Web 1.5.\nWeb 2.0 applied to music would probably mean individual bands giving\naway DRMless songs for free.The ultimate way to be nice to users is to give them something for\nfree that competitors charge for.  During the 90s a lot of people\nprobably thought we'd have some working system for micropayments\nby now.  In fact things have gone in the other direction.  The most\nsuccessful sites are the ones that figure out new ways to give stuff\naway for free.  Craigslist has largely destroyed the classified ad\nsites of the 90s, and OkCupid looks likely to do the same to the\nprevious generation of dating sites.Serving web pages is very, very cheap.  If you can make even a\nfraction of a cent per page view, you can make a profit.  And\ntechnology for targeting ads continues to improve.  I wouldn't be\nsurprised if ten years from now eBay had been supplanted by an\nad-supported freeBay (or, more likely, gBay).Odd as it might sound, we tell startups that they should try to\nmake as little money as possible.  If you can figure out a way to\nturn a billion dollar industry into a fifty million dollar industry,\nso much the better, if all fifty million go to you.  Though indeed,\nmaking things cheaper often turns out to generate more money in the\nend, just as automating things often turns out to generate more\njobs.The ultimate target is Microsoft.  What a bang that balloon is going\nto make when someone pops it by offering a free web-based alternative\nto MS Office.\n[5]\nWho will?  Google?  They seem to be taking their\ntime.  I suspect the pin will be wielded by a couple of 20 year old\nhackers who are too naive to be intimidated by the idea.  (How hard\ncan it be?)The Common ThreadAjax, democracy, and not dissing users.  What do they all have in\ncommon?  I didn't realize they had anything in common till recently,\nwhich is one of the reasons I disliked the term \"Web 2.0\" so much.\nIt seemed that it was being used as a label for whatever happened\nto be new—that it didn't predict anything.But there is a common thread.  Web 2.0 means using the web the way\nit's meant to be used.  The \"trends\" we're seeing now are simply\nthe inherent nature of the web emerging from under the broken models\nthat got imposed on it during the Bubble.I realized this when I read an  interview with\nJoe Kraus, the co-founder of Excite.\n[6]\nExcite really never got the business model right at all.  We fell\ninto the classic problem of how when a new medium comes out it\nadopts the practices, the content, the business models of the old\nmedium—which fails, and then the more appropriate models get\nfigured out.\nIt may have seemed as if not much was happening during the years\nafter the Bubble burst.  But in retrospect, something was happening:\nthe web was finding its natural angle of repose.  The democracy\ncomponent, for example—that's not an innovation, in the sense of\nsomething someone made happen.  That's what the web naturally tends\nto produce.Ditto for the idea of delivering desktop-like applications over the\nweb.  That idea is almost as old as the web.  But the first time\naround it was co-opted by Sun, and we got Java applets.  Java has\nsince been remade into a generic replacement for C++, but in 1996\nthe story about Java was that it represented a new model of software.\nInstead of desktop applications, you'd run Java \"applets\" delivered\nfrom a server.This plan collapsed under its own weight. Microsoft helped kill it,\nbut it would have died anyway.  There was no uptake among hackers.\nWhen you find PR firms promoting\nsomething as the next development platform, you can be sure it's\nnot.  If it were, you wouldn't need PR firms to tell you, because\nhackers would already be writing stuff on top of it, the way sites\nlike Busmonster used Google Maps as a\nplatform before Google even meant it to be one.The proof that Ajax is the next hot platform is that thousands of\nhackers have spontaneously started building things on top\nof it.  Mikey likes it.There's another thing all three components of Web 2.0 have in common.\nHere's a clue.  Suppose you approached investors with the following\nidea for a Web 2.0 startup:\nSites like del.icio.us and flickr allow users to \"tag\" content\nwith descriptive tokens.  But there is also huge source of\nimplicit tags that they ignore: the text within web links.\nMoreover, these links represent a social network connecting the\nindividuals and organizations who created the pages, and by using\ngraph theory we can compute from this network an estimate of the\nreputation of each member.  We plan to mine the web for these\nimplicit tags, and use them together with the reputation hierarchy\nthey embody to enhance web searches.\nHow long do you think it would take them on average to realize that\nit was a description of Google?Google was a pioneer in all three components of Web 2.0: their core\nbusiness sounds crushingly hip when described in Web 2.0 terms,\n\"Don't maltreat users\" is a subset of \"Don't be evil,\" and of course\nGoogle set off the whole Ajax boom with Google Maps.Web 2.0 means using the web as it was meant to be used, and Google\ndoes.  That's their secret.    They're sailing with the wind, instead of sitting\nbecalmed praying for a business model, like the print media, or\ntrying to tack upwind by suing their customers, like Microsoft and\nthe record labels.\n[7]Google doesn't try to force things to happen their way.  They try\nto figure out what's going to happen, and arrange to be standing\nthere when it does.  That's the way to approach technology—and\nas business includes an ever larger technological component, the\nright way to do business.The fact that Google is a \"Web 2.0\" company shows that, while\nmeaningful, the term is also rather bogus.  It's like the word\n\"allopathic.\"  It just means doing things right, and it's a bad\nsign when you have a special word for that.Notes[1]\nFrom the conference\nsite, June 2004: \"While the first wave of the Web was closely\ntied to the browser, the second wave extends applications across\nthe web and enables a new generation of services and business\nopportunities.\"  To the extent this means anything, it seems to be\nabout\nweb-based applications.[2]\nDisclosure: Reddit was funded by\nY Combinator.  But although\nI started using it out of loyalty to the home team, I've become a\ngenuine addict.  While we're at it, I'm also an investor in\n!MSFT, having sold all my shares earlier this year.[3]\nI'm not against editing. I spend more time editing than\nwriting, and I have a group of picky friends who proofread almost\neverything I write.  What I dislike is editing done after the fact\nby someone else.[4]\nObvious is an understatement.  Users had been climbing in through\nthe window for years before Apple finally moved the door.[5]\nHint: the way to create a web-based alternative to Office may\nnot be to write every component yourself, but to establish a protocol\nfor web-based apps to share a virtual home directory spread across\nmultiple servers.  Or it may be to write it all yourself.[6]\nIn Jessica Livingston's\nFounders at\nWork.[7]\nMicrosoft didn't sue their customers directly, but they seem\nto have done all they could to help SCO sue them.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, Peter\nNorvig, Aaron Swartz, and Jeff Weiner for reading drafts of this, and to the\nguys at O'Reilly and Adaptive Path for answering my questions."},{"title":"What Business Can Learn from Open Source","text":"August 2005(This essay is derived from a talk at Oscon 2005.)Lately companies have been paying more attention to open source.\nTen years ago there seemed a real danger Microsoft would extend its\nmonopoly to servers.  It seems safe to say now that open source has\nprevented that.  A recent survey found 52% of companies are replacing\nWindows servers with Linux servers.\n[1]More significant, I think, is which 52% they are.  At this point,\nanyone proposing to run Windows on servers should be prepared to\nexplain what they know about servers that Google, Yahoo, and Amazon\ndon't.But the biggest thing business has to learn from open source is not\nabout Linux or Firefox, but about the forces that produced them.\nUltimately these will affect a lot more than what software you use.We may be able to get a fix on these underlying forces by triangulating\nfrom open source and blogging.  As you've probably noticed, they\nhave a lot in common.Like open source, blogging is something people do themselves, for\nfree, because they enjoy it.  Like open source hackers, bloggers\ncompete with people working for money, and often win.  The method\nof ensuring quality is also the same: Darwinian.  Companies ensure\nquality through rules to prevent employees from screwing up.  But\nyou don't need that when the audience can communicate with one\nanother.  People just produce whatever they want; the good stuff\nspreads, and the bad gets ignored.  And in both cases, feedback\nfrom the audience improves the best work.Another thing blogging and open source have in common is the Web.\nPeople have always been willing to do great work\nfor free,  but before the Web it was harder to reach an audience\nor collaborate on projects.AmateursI think the most important of the new principles business has to learn is\nthat people work a lot harder on stuff they like.  Well, that's\nnews to no one.  So how can I claim business has to learn it?  When\nI say business doesn't know this, I mean the structure of business\ndoesn't reflect it.Business still reflects an older model, exemplified by the French\nword for working: travailler.  It has an English cousin, travail,\nand what it means is torture.\n[2]This turns out not to be the last word on work, however.\nAs societies get richer, they learn something about\nwork that's a lot like what they learn about diet.  We know now that the\nhealthiest diet is the one our peasant ancestors were forced to\neat because they were poor.  Like rich food, idleness\nonly seems desirable when you don't get enough of it.  I think we were\ndesigned to work, just as we were designed to eat a certain amount\nof fiber, and we feel bad if we don't.There's a name for people who work for the love of it: amateurs.\nThe word now has such bad connotations that we forget its etymology,\nthough it's staring us in the face.  \"Amateur\" was originally rather\na complimentary word.  But the thing to be in the twentieth century\nwas professional, which amateurs, by definition, are not.That's why the business world was so surprised by one lesson from\nopen source: that people working for love often surpass those working\nfor money.   Users don't switch from Explorer to Firefox because\nthey want to hack the source.  They switch because it's a better\nbrowser.It's not that Microsoft isn't trying.  They know controlling the\nbrowser is one of the keys to retaining their monopoly.  The problem\nis the same they face in operating systems: they can't pay people\nenough to build something better than a group of inspired hackers\nwill build for free.I suspect professionalism was always overrated-- not just in the\nliteral sense of working for money, but also connotations like\nformality and detachment.  Inconceivable as it would have seemed\nin, say, 1970, I think professionalism was largely a fashion,\ndriven by conditions that happened to exist in the twentieth century.One of the most powerful of those was the existence of \"channels.\" Revealingly,\nthe same term was used for both products and information:  there\nwere distribution channels, and TV and radio channels.It was the narrowness of such channels that made professionals\nseem so superior to amateurs.  There were only a few jobs as\nprofessional journalists, for example, so competition ensured the\naverage journalist was fairly good.  Whereas anyone can express\nopinions about current events in a bar.  And so the average person\nexpressing his opinions in a bar sounds like an idiot compared to\na journalist writing about the subject.On the Web, the barrier for publishing your ideas is even lower.\nYou don't have to buy a drink, and they even let kids in.\nMillions of people are publishing online, and the average\nlevel of what they're writing, as you might expect, is not very\ngood.  This has led some in the media to conclude that blogs don't\npresent much of a threat-- that blogs are just a fad.Actually, the fad is the word \"blog,\"  at least the way the print\nmedia now use it.  What they mean by \"blogger\" is not someone who\npublishes in a weblog format, but anyone who publishes online.\nThat's going to become a problem as the Web becomes the default\nmedium for publication.  So I'd\nlike to suggest an alternative word for someone who publishes online.\nHow about \"writer?\"Those in the print media who dismiss the writing online because of\nits low average quality are missing an important point: no one reads\nthe average blog.  In the old world of channels, it meant something\nto talk about average quality, because that's what you were getting\nwhether you liked it or not.\nBut now you can read any writer you want.  So the average\nquality of writing online isn't what the print media are competing\nagainst.  They're competing against the best writing online.  And,\nlike Microsoft, they're losing.I know that from my own experience as a reader.  Though most print\npublications are online, I probably\nread two or three articles on individual people's sites for every\none I read on the site of a newspaper or magazine.And when I read, say, New York Times stories, I never reach\nthem through the Times front page.   Most I find through aggregators\nlike Google News or Slashdot or Delicious. Aggregators show how\nmuch better\nyou can do than the channel.  The New York Times front page is\na list of articles written by people who work for the New York Times.  Delicious\nis a list of articles that are interesting.  And it's only now that\nyou can see the two side by side that you notice how little overlap there is.Most articles in the print media are boring.  For example, the\npresident notices that a majority of voters now think invading Iraq\nwas a mistake, so he makes an address to the nation to drum up\nsupport.  Where is the man bites dog in that?  I didn't hear the\nspeech, but I could probably tell you exactly what he said.  A\nspeech like that is, in the most literal sense, not news: there is\nnothing new in it.\n[3]Nor is there anything new, except the names and places, in most\n\"news\" about things going wrong.  A child is abducted; there's a\ntornado; a ferry sinks; someone gets bitten by a shark; a small\nplane crashes.  And what do you learn about the world from these\nstories?  Absolutely nothing.  They're outlying data points; what\nmakes them gripping also makes them irrelevant.As in software, when professionals produce such crap, it's not\nsurprising if amateurs can do better.  Live by the channel, die by\nthe channel: if you depend on an oligopoly, you sink into bad habits\nthat are hard to overcome when you suddenly get competition.\n[4]WorkplacesAnother thing blogs and open source software have in common is that\nthey're often made by people working at home.  That may not seem\nsurprising.  But it should be.  It's the architectural equivalent\nof a home-made aircraft shooting down an F-18.  Companies spend\nmillions to build office buildings for a single purpose: to be a\nplace to work.  And yet people working in their own homes,\nwhich aren't even designed to be workplaces, end up\nbeing more productive.This proves something a lot of us have suspected.  The average\noffice is a miserable place to get work done.  And a lot of what\nmakes offices bad are the very qualities we associate with\nprofessionalism.  The sterility\nof offices is supposed to suggest efficiency.  But suggesting\nefficiency is a different thing from actually being efficient.The atmosphere of the average workplace is to productivity what\nflames painted on the side of a car are to speed.  And it's not\njust the way offices look that's bleak.  The way people act is just\nas bad.Things are different in a startup.  Often as not a startup begins\nin an apartment.  Instead of matching beige cubicles\nthey have an assortment of furniture they bought used.  They work\nodd hours, wearing the most casual of clothing.  They look at\nwhatever they want online without worrying whether it's \"work safe.\"\nThe cheery, bland language of the office is replaced by wicked humor.  And\nyou know what?  The company at this stage is probably the most\nproductive it's ever going to be.Maybe it's not a coincidence.  Maybe some aspects of professionalism\nare actually a net lose.To me the most demoralizing aspect of the traditional office is\nthat you're supposed to be there at certain times.  There are usually\na few people in a company who really have to, but the reason most\nemployees work fixed hours is that the company can't measure their\nproductivity.The basic idea behind office hours is that if you can't make people\nwork, you can at least prevent them from having fun.  If employees\nhave to be in the building a certain number of hours a day, and are\nforbidden to do non-work things while there, then they must be\nworking.  In theory.  In practice they spend a lot of their time\nin a no-man's land, where they're neither working nor having fun.If you could measure how much work people did, many companies\nwouldn't need any fixed workday. You could just say: this is what\nyou have to do.  Do it whenever you like, wherever you like.  If\nyour work requires you to talk to other people in the company, then\nyou may need to be here a certain amount.  Otherwise we don't care.That may seem utopian, but it's what we told people who came to\nwork for our company.  There were no fixed office hours.  I never\nshowed up before 11 in the morning.  But we weren't saying this to\nbe benevolent.  We were saying: if you work here we expect you to\nget a lot done.  Don't try to fool us just by being here a lot.The problem with the facetime model is not just that it's demoralizing, but\nthat the people pretending to work interrupt\nthe ones actually working.  I'm convinced the facetime model\nis the main reason large organizations have so many meetings.\nPer capita, large organizations accomplish very little.\nAnd yet all those people have to be on site at least eight hours a\nday.  When so much time goes in one end and so little achievement\ncomes out the other, something has to give.  And meetings are the\nmain mechanism for taking up the slack.For one year I worked at a regular nine to five job, and I remember\nwell the strange, cozy feeling that comes over one during meetings.\nI was very aware, because of the novelty, that I was being paid for\nprogramming.  It seemed just amazing, as if there was a machine on\nmy desk that spat out a dollar bill every two minutes no matter\nwhat I did.  Even while I was in the bathroom!  But because the\nimaginary machine was always running, I felt I always ought to be\nworking. And so meetings felt wonderfully relaxing.  They\ncounted as work, just like programming, but they were so much easier.\nAll you had to do was sit and look attentive.Meetings are like an opiate with a network effect.  So is email,\non a smaller scale.  And in addition to the direct cost in time,\nthere's the cost in fragmentation-- breaking people's day up into\nbits too small to be useful.You can see how dependent you've become on something by removing\nit suddenly.  So for big companies I propose the following experiment.\nSet aside one day where meetings are forbidden-- where everyone has to\nsit at their desk all day and work without interruption on\nthings they can do without talking to anyone else.\nSome amount of communication is necessary in most jobs, but I'm\nsure many employees could find eight hours worth of stuff they could\ndo by themselves.  You could call it \"Work Day.\"The other problem with pretend work\nis that it often looks better than real work.  When I'm\nwriting or hacking I spend as much time just thinking as I do\nactually typing.  Half the time I'm sitting drinking a cup of tea,\nor walking around the neighborhood.  This is a critical phase--\nthis is where ideas come from-- and yet I'd feel guilty doing this\nin most offices, with everyone else looking busy.It's hard to see how bad some practice is till you have something\nto compare it to.  And that's one reason open source, and even blogging\nin some cases, are so important.  They show us what real work looks like.We're funding eight new startups at the moment.  A friend asked\nwhat they were doing for office space, and seemed surprised when I\nsaid we expected them to work out of whatever apartments they found\nto live in.  But we didn't propose that to save money.  We did it\nbecause we want their software to be good.  Working in crappy\ninformal spaces is one of the things startups do right without\nrealizing it.  As soon as you get into an office, work and life\nstart to drift apart.That is one of the key tenets of professionalism. Work and life\nare supposed to be separate.  But that part, I'm convinced, is a\nmistake.Bottom-UpThe third big lesson we can learn from open source and\nblogging is that ideas can bubble up from the bottom, instead of\nflowing down from the top.  Open source and blogging both work\nbottom-up: people make what they want, and the best stuff\nprevails.Does this sound familiar?  It's the principle of a market economy.\nIronically, though open source and blogs are done for free, those\nworlds resemble market economies, while most companies, for all\ntheir talk about the value of free markets, are run internally like\ncommunist states.There are two forces that together steer design: ideas about\nwhat to do next, and the enforcement of quality.  In the channel\nera, both flowed down from the top.  For example, newspaper editors\nassigned stories to reporters, then edited what they wrote.Open source and blogging show us things don't have to work that\nway.  Ideas and even the enforcement of quality can flow bottom-up.\nAnd in both cases the results are not merely acceptable, but better.\nFor example, open source software is more reliable precisely because\nit's open source; anyone can find mistakes.The same happens with writing.  As we got close to publication, I\nfound I was very worried about the essays in\nHackers\n& Painters\nthat hadn't been online.  Once an essay has had a couple thousand\npage views I feel reasonably confident about it.  But these had had\nliterally orders of magnitude less scrutiny.  It felt like\nreleasing software without testing it.That's what all publishing used to be like.  If\nyou got ten people to read a manuscript, you were lucky.  But I'd\nbecome so used to publishing online that the old method now seemed\nalarmingly unreliable, like navigating by dead reckoning once you'd\ngotten used to a GPS.The other thing I like about publishing online is that you can write\nwhat you want and publish when you want.  Earlier this year I wrote\nsomething that seemed suitable for a magazine, so\nI sent it to an editor I know.\nAs I was waiting to hear back, I found to my surprise that I was\nhoping they'd reject it.  Then I could put it online right away.\nIf they accepted it, it wouldn't be read by anyone for months, and\nin the meantime I'd have to fight word-by-word to save it from being\nmangled by some twenty five year old copy editor.\n[5]Many employees would like to build great things for the companies\nthey work for, but more often than not management won't let them.\nHow many of us have heard stories of employees going to management\nand saying, please let us build this thing to make money for you--\nand the company saying no?  The most famous example is probably Steve Wozniak,\nwho originally wanted to build microcomputers for his then-employer, HP.\nAnd they turned him down.  On the blunderometer, this episode ranks\nwith IBM accepting a non-exclusive license for DOS.  But I think this\nhappens all the time.  We just don't hear about it usually,\nbecause to prove yourself right you have to quit\nand start your own company, like Wozniak did.StartupsSo these, I think, are the three big lessons open source and blogging\nhave to teach business: (1) that people work harder on stuff they\nlike, (2) that the standard office environment is very unproductive,\nand (3) that bottom-up often works better than top-down.I can imagine managers at this point saying: what is this guy talking\nabout?  What good does it do me to know that my programmers\nwould be more productive\nworking at home on their own projects?  I need their asses in here\nworking on version 3.2 of our software, or we're never going to\nmake the release date.And it's true, the benefit that specific manager could derive from\nthe forces I've described is near zero.  When I say business can\nlearn from open source, I don't mean any specific business can.  I\nmean business can learn about new conditions the same way a gene\npool does.  I'm not claiming companies can get smarter, just that\ndumb ones will die.So what will business look like when it has assimilated the lessons\nof open source and blogging?  I think the big obstacle preventing\nus from seeing the future of business is the assumption that people\nworking for you have to be employees.  But think about what's going\non underneath:  the company has some money, and they pay it to the\nemployee in the hope that he'll make something worth more than they\npaid him.  Well, there are other ways to arrange that relationship.\nInstead of paying the guy money as a salary, why not give it to him\nas investment?  Then instead of coming to your office to work on\nyour projects, he can work wherever he wants on projects of his own.Because few of us know any alternative, we have no idea how much\nbetter we could do than the traditional employer-employee relationship.\nSuch customs evolve with glacial slowness.  Our\nemployer-employee relationship still retains a big chunk of\nmaster-servant DNA.\n[6]I dislike being on either end of it.\nI'll work my ass off for a customer, but I resent being told what\nto do by a boss.  And being a boss is also horribly frustrating;\nhalf the time it's easier just to do stuff yourself than to get\nsomeone else to do it for you.\nI'd rather do almost anything than give or receive a\nperformance review.On top of its unpromising origins, employment\nhas accumulated a lot of cruft over the years.  The list of what\nyou can't ask in job interviews is now so long that for convenience\nI assume it's infinite.  Within the\noffice you now have to walk on eggshells lest anyone\nsay or do\nsomething that makes the company prey to a lawsuit.  And God help\nyou if you fire anyone.Nothing shows more clearly that employment is not an ordinary economic\nrelationship than companies being sued for firing people.  In any\npurely economic relationship you're free to do what you want.  If\nyou want to stop buying steel pipe from one supplier and start\nbuying it from another, you don't have to explain why.  No one can\naccuse you of unjustly switching pipe suppliers.  Justice implies\nsome kind of paternal obligation that isn't there in\ntransactions between equals.Most of the legal restrictions on employers are intended to protect\nemployees.  But you can't have action without an equal and opposite\nreaction.  You can't expect employers to have some kind of paternal\nresponsibility toward employees without putting employees in the\nposition of children.  And that seems a bad road to go down.Next time you're in a moderately large city, drop by the main post\noffice and watch the body language of the people working there.\nThey have the same sullen resentment as children made to do\nsomething they don't want to.  Their union has exacted pay\nincreases and work restrictions that would have been the envy of\nprevious generations of postal workers, and yet they don't seem any\nhappier for it.  It's demoralizing\nto be on the receiving end of a paternalistic relationship, no\nmatter how cozy the terms.  Just ask any teenager.I see the disadvantages of the employer-employee relationship because\nI've been on both sides of a better one: the investor-founder relationship.\nI wouldn't claim it's painless.  When I was running a\nstartup, the thought of our investors used to keep me up at night.\nAnd now that I'm an investor,\nthe thought of our startups keeps me\nup at night.  All the pain of whatever problem you're trying to\nsolve is still there.\nBut the pain hurts less when it isn't\nmixed with resentment.I had the misfortune to participate in what amounted to a controlled\nexperiment to prove that.  After Yahoo bought our startup I went\nto work for them.  I was doing exactly the same work, except with\nbosses.  And to my horror I started acting like a child.  The\nsituation pushed buttons I'd forgotten\nI had.The big advantage of investment over employment, as the examples of open\nsource and blogging suggest, is that people working on projects of\ntheir own are enormously more productive.  And a\nstartup is a project\nof one's own in two senses, both of them important: it's creatively\none's own, and also economically ones's own.Google is a rare example of a big company in tune with the forces\nI've described. They've tried hard to make their offices less sterile\nthan the usual cube farm.  They give employees who do great work\nlarge grants of stock to simulate the rewards of a startup.  They\neven let hackers spend 20% of their time on their own projects.Why not let people spend 100% of their time on their own projects,\nand instead of trying to approximate the value of what they create,\ngive them the actual market value?  Impossible?  That is in fact\nwhat venture capitalists do.So am I claiming that no one is going to be an employee anymore--\nthat everyone should go and start a startup?  Of course not.\nBut more people could do it than do it now.\nAt the moment, even the smartest students leave school thinking\nthey have to get a job.\nActually what they need to do is make\nsomething valuable.  A job is one way to do that, but the more\nambitious ones will ordinarily be better off taking money from an\ninvestor than an employer.Hackers tend to think business is for MBAs.  But business\nadministration is not what you're doing in a startup.  What you're\ndoing is business creation.  And the first phase of that\nis mostly product creation-- that is, hacking.  That's the\nhard part.  It's a lot harder to create something people love than\nto take something people love and figure out how to make money from\nit.Another thing that keeps people away from starting startups is the\nrisk.  Someone with kids and a mortgage should think twice before\ndoing it.  But most young hackers have neither.And as the example of open source and blogging suggests, you'll\nenjoy it more, even if you fail.  You'll be working on your own\nthing, instead of going to some office and doing what you're told.\nThere may be more pain in your own company, but it won't hurt as\nmuch.That may be the greatest effect, in the long run, of the forces\nunderlying open source and blogging: finally ditching the old\npaternalistic employer-employee relationship, and replacing it with\na purely economic one, between equals.Notes[1]\nSurvey by Forrester Research reported in the cover story of\nBusiness Week, 31 Jan 2005.  Apparently someone believed you have to\nreplace the actual server in order to switch the operating system.[2]\nIt derives from the late Latin tripalium,\na torture device so called because it consisted of three stakes.\nI don't know how the stakes were used.  \"Travel\" has the same root.[3]\nIt would be much bigger news, in that sense, if the president\nfaced unscripted questions by giving a press conference.[4]\nOne measure of the incompetence of newspapers is that so many\nstill make you register to read stories.  I have yet to find a blog\nthat tried that.[5]\nThey accepted the article, but I took so long to\nsend them the final version that by the time I did the section of\nthe magazine they'd accepted it for had disappeared in a reorganization.[6]\nThe word \"boss\" is derived from the Dutch baas, meaning\n\"master.\"Thanks to Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this."},{"title":"What Charisma Is","text":"November 2004Several people who read It's Charisma,\nStupid have asked what I mean by charisma.\nAfter all, if I'm only saying that people vote for the\ncandidate they like, I'm not saying much.  So I want to\nemphasize that I'm talking about something that could\nbe predicted well in advance of the election-- indeed,\nsomething that can generally be predicted from political\ncartoons.Before an election there is usually little disagreement\nabout which candidate is more charismatic.\n(This may\nchange if charisma starts to be perceived as the key to\nwinning.) In this past election,\neven Kerry's supporters worried about his\n\"patrician\nreserve.\"\nOr think of Gore, who was so\nwooden\nthat it seemed\nto him the best plan to make a joke of it.If political cartoons portray your candidate as stupid or\nunprincipled, you have nothing to worry about.\nBut once they portray him as boring,\nyou're in trouble.While it's generally easy to say which candidate has more charisma,\nit's a little harder to say what charisma consists of.\nOff the top of my head, I'd say that one has to be\nconfident, cheerful, and outgoing.  But especially outgoing.I suspect the key to charisma is to like people.\nAll politicians smile when they're working a\ncrowd, but the really charismatic ones don't have to\nremember to smile.  Their smiles are genuine, because\nthey're enjoying themselves.  If you look at photographs\nof Clinton in a crowd, time and again you see him stretching\nway out to reach people's hands--- often over his own\nSecret Service agents, like a basketball player stretching\nto block a shot.  And he's not merely smiling.  He's\necstatic.  Working a crowd is not a duty for him; it's\nthe part he likes.Kennedy was the same way.  He couldn't bear to be alone.  He had aides\nwhose main job was just to be available so that he never had to.Why should liking people make you charismatic?  Because\nif you like someone, they'll like you.  And vice versa.\nImagine you had two acquaintances, one who had a reputation\nas a great guy but for some reason clearly disliked you,\nand another who was generally considered worthless, but\nthought the world of you.  Which would you be more inclined\nto do a favor for?Expand this to people in general, and it's called charisma.\nIf you like people, people will like you.  And so if\nyou happen to have an insatiable craving for human contact,\nyou'll tend to be charismatic, just as if you happen to be\neight feet tall you'll tend to make a good basketball\nplayer.Uncharismatic politicians smile so that people will like them.\nCharismatic ones smile because they like people."},{"title":"What Doesn't Seem Like Work?","text":"January 2015My father is a mathematician. For most of my childhood he worked\nfor Westinghouse, modelling nuclear reactors.He was one of those lucky people who know early on what they want to\ndo.  When you talk to him about his childhood, there's a clear\nwatershed at about age 12, when he \"got interested in maths.\"He\ngrew up in the small Welsh seacoast town of Pwllheli.  As we retraced\nhis walk to school on Google Street View, he said that it had been\nnice growing up in the country.\"Didn't it get boring when you got to be about 15?\" I asked.\"No,\" he said, \"by then I was interested in maths.\"In another conversation he told me that what he really liked was\nsolving problems.  To me the exercises at the end of each chapter\nin a math textbook represent work, or at best a way to reinforce\nwhat you learned in that chapter.  To him the problems were the\nreward.  The text of each chapter was just some advice about solving\nthem. He said that as soon as he got a new textbook he'd immediately\nwork out all the problems—to the slight annoyance of his teacher,\nsince the class was supposed to work through the book gradually.Few people know so early or so certainly what they want to work on.\nBut talking to my father reminded me of a heuristic the rest of us\ncan use. If something that seems like work to other people doesn't\nseem like work to you, that's something you're well suited for.\nFor example, a lot of programmers I know, including me, actually\nlike debugging.  It's not something people tend to volunteer; one\nlikes it the way one likes popping zits. But you may have to like\ndebugging to like programming, considering the degree to which\nprogramming consists of it.The stranger your tastes seem to other people, the stronger evidence\nthey probably are of what you should do. When I was in college I\nused to write papers for my friends.  It was quite interesting to\nwrite a paper for a class I wasn't taking.  Plus they were always\nso relieved.It seemed curious that the same task could be painful to one person\nand pleasant to another, but I didn't realize at the time what this\nimbalance implied, because I wasn't looking for it.  I didn't realize\nhow hard it can be to decide what you should work on, and that you\nsometimes have to figure it out from subtle clues, like a detective\nsolving a case in a mystery novel.  So I bet it would help a lot\nof people to ask themselves about this explicitly. What seems like\nwork to other people that doesn't seem like work to you?Thanks to Sam Altman, Trevor Blackwell, Jessica Livingston,\nRobert Morris, and my father for reading drafts of this."},{"title":"What Happened to Yahoo","text":"August 2010When I went to work for Yahoo after they bought our startup in 1998,\nit felt like the center of the world.  It was supposed to be the\nnext big thing.  It was supposed to be what Google turned out to\nbe.What went wrong?  The problems that hosed Yahoo go back a long time,\npractically to the beginning of the company.  They were already\nvery visible when I got there in 1998.  Yahoo had two problems\nGoogle didn't: easy money, and ambivalence about being a technology\ncompany.MoneyThe first time I met Jerry Yang, we thought we were meeting for\ndifferent reasons.  He thought we were meeting so he could check\nus out in person before buying us. I thought we were meeting so we\ncould show him our new technology, Revenue Loop.   It was a way of\nsorting shopping search results.  Merchants bid a percentage of\nsales for traffic, but the results were sorted not by the bid but\nby the bid times the average amount a user would buy.  It was\nlike the algorithm Google uses now to sort ads, but this was in the\nspring of 1998, before Google was founded.Revenue Loop was the optimal sort for shopping search, in the sense\nthat it sorted in order of how much money Yahoo would make from\neach link.  But it wasn't just optimal in that sense.  Ranking\nsearch results by user behavior also makes search better.  Users\ntrain the search: you can start out finding matches based on mere\ntextual similarity, and as users buy more stuff the search results\nget better and better.Jerry didn't seem to care.  I was confused.  I was showing him\ntechnology that extracted the maximum value from search traffic,\nand he didn't care?  I couldn't tell whether I was explaining it\nbadly, or he was just very poker faced.I didn't realize the answer till later, after I went to work at\nYahoo.  It was neither of my guesses.  The reason Yahoo didn't care\nabout a technique that extracted the full value of traffic was that\nadvertisers were already overpaying for it.  If Yahoo merely extracted\nthe actual value, they'd have made less.Hard as it is to believe now, the big money then was in banner ads.\nAdvertisers were willing to pay ridiculous amounts for banner ads.\nSo Yahoo's sales force had evolved to exploit this source of revenue.\nLed by a large and terrifyingly formidable man called Anil Singh,\nYahoo's sales guys would fly out to Procter & Gamble and come back\nwith million dollar orders for banner ad impressions.The prices seemed cheap compared to print, which was what advertisers,\nfor lack of any other reference, compared them to.  But they were\nexpensive compared to what they were worth.  So these big, dumb\ncompanies were a dangerous source of revenue to depend on.  But\nthere was another source even more dangerous: other Internet startups.By 1998, Yahoo was the beneficiary of a de facto Ponzi scheme.\nInvestors were excited about the Internet.  One reason they were\nexcited was Yahoo's revenue growth.  So they invested in new Internet\nstartups.  The startups then used the money to buy ads on Yahoo to\nget traffic.  Which caused yet more revenue growth for Yahoo, and\nfurther convinced investors the Internet was worth investing in.\nWhen I realized this one day, sitting in my cubicle, I jumped up\nlike Archimedes in his bathtub, except instead of \"Eureka!\" I was\nshouting \"Sell!\"Both the Internet startups and the Procter & Gambles were doing\nbrand advertising.  They didn't care about targeting.  They just\nwanted lots of people to see their ads.  So traffic became the thing\nto get at Yahoo.  It didn't matter what type.\n[1]It wasn't just Yahoo.  All the search engines were doing it.  This\nwas why they were trying to get people to start calling them \"portals\"\ninstead of \"search engines.\" Despite the actual meaning of the word\nportal, what they meant by it was a site where users would find\nwhat they wanted on the site itself, instead of just passing through\non their way to other destinations, as they did at a search engine.I remember telling David Filo in late 1998 or early 1999 that Yahoo\nshould buy Google, because I and most of the other programmers in\nthe company were using it instead of Yahoo for search.  He told me\nthat it wasn't worth worrying about.  Search was only 6% of our\ntraffic, and we were growing at 10% a month.   It wasn't worth doing\nbetter.I didn't say \"But search traffic is worth more than other traffic!\"\nI said \"Oh, ok.\"  Because I didn't realize either how much search\ntraffic was worth.  I'm not sure even Larry and Sergey did then.\nIf they had, Google presumably wouldn't have expended any effort\non enterprise search.If circumstances had been different, the people running Yahoo might\nhave realized sooner how important search was.  But they had the\nmost opaque obstacle in the world between them and the truth: money.\nAs long as customers were writing big checks for banner ads, it was\nhard to take search seriously.  Google didn't have that to distract\nthem.HackersBut Yahoo also had another problem that made it hard to change\ndirections.  They'd been thrown off balance from the start by their\nambivalence about being a technology company.One of the weirdest things about Yahoo when I went to work there\nwas the way they insisted on calling themselves a \"media company.\"\nIf you walked around their offices, it seemed like a software\ncompany.  The cubicles were full of programmers writing code, product\nmanagers thinking about feature lists and ship dates, support people\n(yes, there were actually support people) telling users to restart\ntheir browsers, and so on, just like a software company.  So why\ndid they call themselves a media company?One reason was the way they made money: by selling ads.  In 1995\nit was hard to imagine a technology company making money that way.\nTechnology companies made money by selling their software to users.\nMedia companies sold ads.  So they must be a media company.Another big factor was the fear of Microsoft.   If anyone at Yahoo\nconsidered the idea that they should be a technology company, the\nnext thought would have been that Microsoft would crush them.It's hard for anyone much younger than me to understand the fear\nMicrosoft still inspired in 1995.  Imagine a company with several\ntimes the power Google has now, but way meaner.  It was perfectly\nreasonable to be afraid of them.  Yahoo watched them crush the first\nhot Internet company, Netscape.  It was reasonable to worry that\nif they tried to be the next Netscape, they'd suffer the same fate.\nHow were they to know that Netscape would turn out to be Microsoft's\nlast victim?It would have been a clever move to pretend to be a media company\nto throw Microsoft off their scent.  But unfortunately Yahoo actually\ntried to be one, sort of.  Project managers at Yahoo were called\n\"producers,\" for example, and the different parts of the company\nwere called \"properties.\" But what Yahoo really needed to be was a\ntechnology company, and by trying to be something else, they ended\nup being something that was neither here nor there.  That's why\nYahoo as a company has never had a sharply defined identity.The worst consequence of trying to be a media company was that they\ndidn't take programming seriously enough.  Microsoft (back in the\nday), Google, and Facebook have all had hacker-centric cultures.\nBut Yahoo treated programming as a commodity.  At Yahoo, user-facing software\nwas controlled by product managers and designers.  The job of\nprogrammers was just to take the work of the product managers and\ndesigners the final step, by translating it into code.One obvious result of this practice was that when Yahoo built things,\nthey often weren't very good. But that wasn't the worst problem.\nThe worst problem was that they hired bad programmers.Microsoft (back in the day), Google, and Facebook have all been\nobsessed with hiring the best programmers.  Yahoo wasn't.  They\npreferred good programmers to bad ones, but they didn't have the\nkind of single-minded, almost obnoxiously elitist focus on hiring\nthe smartest people that the big winners have had.  And when you\nconsider how much competition there was for programmers when they\nwere hiring, during the Bubble, it's not surprising that the quality\nof their programmers was uneven.In technology, once you have bad programmers, you're doomed.  I\ncan't think of an instance where a company has sunk into technical\nmediocrity and recovered. Good programmers want to work with other\ngood programmers.  So once the quality of programmers at your company\nstarts to drop, you enter a death spiral from which there is no\nrecovery.\n[2]At Yahoo this death spiral started early.  If there was ever a time when\nYahoo was a Google-style talent magnet, it was over by the time I\ngot there in 1998.The company felt prematurely old.  Most technology companies\neventually get taken over by suits and middle managers.  At Yahoo\nit felt as if they'd deliberately accelerated this process.  They\ndidn't want to be a bunch of hackers.  They wanted to be suits.  A\nmedia company should be run by suits.The first time I visited Google, they had about 500 people, the\nsame number Yahoo had when I went to work there.  But boy did things\nseem different.  It was still very much a hacker-centric culture.\nI remember talking to some programmers in the cafeteria about the\nproblem of gaming search results (now known as SEO), and they asked\n\"what should we do?\"  Programmers at Yahoo wouldn't have asked that.\nTheirs was not to reason why; theirs was to build what product\nmanagers spec'd.  I remember coming away from Google thinking \"Wow,\nit's still a startup.\"There's not much we can learn from Yahoo's first fatal flaw. It's\nprobably too much to hope any company could avoid being damaged by\ndepending on a bogus source of revenue.  But startups can learn an\nimportant lesson from the second one.  In the software business,\nyou can't afford not to have a hacker-centric culture.Probably the most impressive commitment I've heard to having a\nhacker-centric culture came from Mark Zuckerberg, when he spoke at\nStartup School in 2007.  He said that in the early days Facebook\nmade a point of hiring programmers even for jobs that would not\nordinarily consist of programming, like HR and marketing.So which companies need to have a hacker-centric culture?  Which\ncompanies are \"in the software business\" in this respect?  As Yahoo\ndiscovered, the area covered by this rule is bigger than most people\nrealize.  The answer is: any company that needs to have good software.Why would great programmers want to work for a company that didn't\nhave a hacker-centric culture, as long as there were others that\ndid?  I can imagine two reasons: if they were paid a huge amount,\nor if the domain was interesting and none of the companies in it\nwere hacker-centric.  Otherwise you can't attract good programmers\nto work in a suit-centric culture.  And without good programmers\nyou won't get good software, no matter how many people you put on\na task, or how many procedures you establish to ensure \"quality.\"Hacker culture\noften seems kind of irresponsible.  That's why people\nproposing to destroy it use phrases like \"adult supervision.\" That\nwas the phrase they used at Yahoo.  But there are worse things than\nseeming irresponsible.  Losing, for example.Notes[1]\nThe closest we got to targeting when I was there was when we\ncreated pets.yahoo.com in order to provoke a bidding war between 3\npet supply startups for the spot as top sponsor.[2]\nIn theory you could beat the death spiral by buying good\nprogrammers instead of hiring them.  You can get programmers\nwho would never have come to you as employees by buying their\nstartups. But so far the only companies smart enough\nto do this are companies smart enough not to need to.Thanks to Trevor Blackwell, Jessica Livingston, and\nGeoff Ralston for\nreading drafts of this."},{"title":"What I Didn't Say","text":"December 2013A quote from an \"interview\" with me (I'll explain the scare quotes\nin a minute) went viral on the Internet recently:\nWe can't make women look at the world through hacker eyes and\nstart Facebook because they haven't been hacking for the past 10\nyears.\nWhen I saw this myself I wasn't sure what I was even\nsupposed to be saying.  That women aren't hackers?  That they can't\nbe taught to be hackers? Either one seems ridiculous.The mystery was cleared up when I got a copy of the raw transcript.\nBig chunks of the original conversation have been edited out,\nincluding a word from within that sentence that completely changes\nits meaning.  What I actually said was:\nWe can't make these women look at the world through hacker eyes\nand start Facebook because they haven't been hacking for the\npast 10 years.\nI.e. I'm not making a statement about women in general.\nI'm talking about a specific subset of them.  So which women am I\nsaying haven't been hacking for the past 10 years?  This will seem\nanticlimactic, but the ones who aren't programmers.That sentence was a response to a question, which was also edited\nout.\n[1]\nWe'd been talking about the disproportionately small\npercentage of female startup founders, and I'd said I thought it\nreflected the disportionately small percentage of female hackers.\nEric asked whether YC itself could fix that by having lower standards\nfor female applicants—whether we could, in effect, accept\nwomen we would have accepted if they had been hackers, and then\nsomehow make up the difference ourselves during YC.I replied that this was impossible—that we could not in three\nmonths train non-hackers to have the kind of insights they'd have\nif they were hackers, because the only way to have those kinds of\ninsights is to actually be a hacker, and that usually takes years.Here's the raw transcript:\nEric: If there was just the pro-activity line of attack, if it\nwas like, \"OK, yes, women aren't set up to be startup founders\nat the level we want.\" What would be lost if Y Combinator was\nmore proactive about it? About lowering standards or something\nlike that? Or recruiting women or something, like any of those\noptions?Paul: No, the problem is these women are not by the time get to\n23... Like Mark Zuckerberg starts programming, starts messing\nabout with computers when he's like 10 or whatever. By the time\nhe's starting Facebook he's a hacker, and so he looks at the world\nthrough hacker eyes. That's what causes him to start Facebook.\nWe can't make these women look at the world through hacker eyes\nand start Facebook because they haven't been hacking for the past\n10 years.\n\"We\" doesn't refer to society; it refers to Y Combinator.\nAnd the women I'm talking about are not women in general, but\nwould-be founders who are not hackers.I didn't say women can't be taught to be hackers.  I said YC can't\ndo it in 3 months.I didn't say women haven't been programming for 10 years.  I said\nwomen who aren't programmers haven't been programming for 10 years.I didn't say people can't learn to be hackers later in life.  I\nsaid people cannot at any age learn to be hackers simultaneously\nwith starting a startup whose thesis derives from insights they\nhave as hackers.You may have noticed something else about that transcript.  It's\npractically incoherent.  The reason is that this wasn't actually\nan interview.  Eric was just collecting material for a profile of\nJessica he was writing.  But he recorded the conversation, and later\ndecided to publish chunks of it stitched together as if it had been\nan interview.If this had been an actual interview, I would have made more effort\nto make myself clear, as you have to in an interview.  An interview\nis different from an ordinary conversation.  In a conversation you\nstop explaining as soon as the other person's facial expression\nshows they understand.  In an interview, the audience is the eventual\nreader.  You don't have that real-time feedback, so you have to\nexplain everything completely.Also (as we've seen), if you talk about controversial topics, the\naudience for an interview will include people who for various reasons\nwant to misinterpret what you say, so you have to be careful not\nto leave them any room to, whereas in a conversation you can assume\ngood faith and speak as loosely as you would in everyday life.\n[2]Of all the misinterpretable things I said to Eric, the one\nthat bothers me most is:\nIf someone was going to be really good at programming they would\nhave found it on their own.\nI was explaining the distinction between a CS major\nand a hacker, but taken in isolation it sounds like I'm saying you\ncan't be good at programming unless you start as a kid.  I don't\nthink that.  In fact I err on the side of late binding for everything,\nincluding metiers.  What I was talking about\nhere is the idea that to do something well you have to be interested\nin it for its own sake, not just because\nyou had to pick something as a major.  So this is the message to\ntake away:\nIf you want to be really good at programming, you have to love\nit for itself.\nThere's a sort of earnest indirection required here\nthat's similar to the one you need to get good startup ideas.  Just as the way to get\nstartup ideas is not to try to think of startup ideas, the way to\nbecome a startup founder is not to try to become a startup founder.The fact that this was supposed to be background for a profile\nrather than an interview also explains why I didn't go into much\ndetail about so many of the topics.  One reporter was indignant\nthat I didn't offer any solutions for getting 13 year old girls\ninterested in programming, for example.  But the reason I didn't\nwas that this conversation was supposed to be about Jessica.  It\nwas a digression even to be talking about broader social issues\nlike the ratio of male to female founders.Actually I do care about how to get more kids interested in\nprogramming, and we have a nonprofit in the current\nYC batch whose goal is to do that.  I also care about increasing\nthe number of female founders, and a few weeks ago proposed that\nYC organize an event to encourage them:\nDate: Sat, 7 Dec 2013 17:47:32 -0800Subject: female founder conf?From: Paul GrahamTo: Jessica LivingstonI just talked to Science Exchange, who are doing great.  It struck\nme that we now finally have a quorum of female founders who are\ndoing well: Adora, Elizabeth, Kate, Elli, Ann, Vanessa.  Should\nwe organize a startup school like event for female founders with\nall YC speakers?\nWe decided to go ahead and do it, and while this is not how\nI anticipated announcing it, if I don't it might seem when we do\nthat we're only doing it for PR reasons.  So look out for something\nin the coming year.I've also started writing something about\nfemale founders.  But it\ntakes me a week to write an essay, at least.  This is an important\ntopic and I don't want to rush the process just because there's a\ncontroversy happening this moment.\n[3]Notes[1]\nAt one point I only had a small fragment of the raw transcript,\nand though it was clear I was responding to a question, the question\nitself wasn't included.  I mistakenly believed we'd been talking\nabout the distinction between CS majors and hackers.[2]\nThis is particularly true in the age of Twitter, where a single\nsentence taken out of context can go viral.  Now anything you say\nabout a controversial topic has to be unambiguous at the level of\nindividual sentences.[3]\nThe controversy itself is an example of something interesting\nI'd been meaning to write about, incidentally.  I was one of the\nfirst users of Reddit, and I couldn't believe the number of times\nI indignantly upvoted a story about some apparent misdeed or\ninjustice, only to discover later it wasn't as it seemed.  As one\nof the first to be exposed to this phenomenon, I was one of the\nfirst to develop an immunity to it.  Now when I see something that\nseems too indignation-inducing to be true, my initial reaction is\nusually skepticism.  But even now I'm still fooled occasionally."},{"title":"What I Did this Summer","text":"October 2005The first Summer Founders Program has just finished.  We were\nsurprised how well it went.  Overall only about 10% of startups\nsucceed, but if I had to guess now, I'd predict three or four of\nthe eight startups we funded will make it.Of the startups that needed further funding, I believe all have\neither closed a round or are likely to soon.  Two have already\nturned down (lowball) acquisition offers.We would have been happy if just one of the eight seemed promising\nby the end of the summer.  What's going on?  Did some kind of anomaly\nmake this summer's applicants especially good?  We worry about that,\nbut we can't think of one.  We'll find out this winter.The whole summer was full of surprises.  The best was that the hypothesis we were testing seems to be\ncorrect.  Young hackers can start viable companies.  This is good\nnews for two reasons: (a) it's an encouraging thought, and (b) it\nmeans that Y Combinator, which is predicated on the idea, is not\nhosed.AgeMore precisely, the hypothesis was that success in a startup depends\nmainly on how smart and energetic you are, and much less on how old\nyou are or how much business experience you have.  The results so\nfar bear this out.  The 2005 summer founders ranged in age from 18\nto 28 (average 23), and there is no correlation between their ages\nand how well they're doing.This should not really be surprising. Bill Gates and Michael Dell\nwere both 19 when they started the companies that made them famous.\nYoung founders are not a new phenomenon: the trend began as soon\nas computers got cheap enough for college kids to afford them.Another of our hypotheses was that you can start a startup on less\nmoney than most people think.  Other investors were surprised to\nhear the most we gave any group was $20,000.  But we knew it was\npossible to start on that little because we started Viaweb on\n$10,000.And so it proved this summer.  Three months' funding is enough to\nget into second gear.  We had a demo day for potential investors\nten weeks in, and seven of the eight groups had a prototype ready\nby that time.  One, Reddit, had\nalready launched, and were able to give a demo of their live site.A researcher who studied the SFP startups said the one thing they\nhad in common was that they all worked ridiculously hard.  People\nthis age are commonly seen as lazy.  I think in some cases it's not\nso much that they lack the appetite for work, but that the work\nthey're offered is unappetizing.The experience of the SFP suggests that if you let motivated people\ndo real work, they work hard, whatever their age.  As one of the\nfounders said \"I'd read that starting a startup consumed your life,\nbut I had no idea what that meant until I did it.\"I'd feel guilty if I were a boss making people work this hard.  But\nwe're not these people's bosses.  They're working on their own\nprojects.  And what makes them work is not us but their competitors.\nLike good athletes, they don't work hard because the coach yells\nat them, but because they want to win.We have less power than bosses, and yet the founders work harder\nthan employees.  It seems like a win for everyone.  The only catch\nis that we get on average only about 5-7% of the upside, while an\nemployer gets nearly all of it.  (We're counting on it being 5-7%\nof a much larger number.)As well as working hard, the groups all turned out to be extraordinarily\nresponsible.  I can't think of a time when one failed to do something\nthey'd promised to, even by being late for an appointment.  This\nis another lesson the world has yet to learn.  One of the founders\ndiscovered that the hardest part of arranging a meeting with\nexecutives at a big cell phone carrier was getting a rental company\nto rent him a car, because he was too young.I think the problem here is much the same as with the apparent\nlaziness of people this age.  They seem lazy because the work they're\ngiven is pointless, and they act irresponsible because they're not\ngiven any power.  Some of them, anyway.  We only have a sample size\nof about twenty, but it seems so far that if you let people in their\nearly twenties be their own bosses, they rise to the occasion.MoraleThe summer founders were as a rule very idealistic.  They also\nwanted very much to get rich.  These qualities might seem incompatible,\nbut they're not.  These guys want to get rich, but they want to do\nit by changing the world.  They wouldn't (well, seven of the eight\ngroups wouldn't) be interested in making money by speculating in\nstocks.  They want to make something people use.I think this makes them more effective as founders.  As hard as\npeople will work for money, they'll work harder for a cause.  And\nsince success in a startup depends so much on motivation, the\nparadoxical result is that the people likely to make the most money\nare those who aren't in it just for the money.The founders of Kiko, for example,\nare working on an Ajax calendar.  They want to get rich, but they\npay more attention to design than they would if that were their\nonly motivation.  You can tell just by looking at it.I never considered it till this summer, but this might be another\nreason startups run by hackers tend to do better than those run by\nMBAs.  Perhaps it's not just that hackers understand technology\nbetter, but that they're driven by more powerful motivations.\nMicrosoft, as I've said before, is a dangerously misleading example.\nTheir mean corporate culture only works for monopolies.\nGoogle is a better model.Considering that the summer founders are the sharks in this ocean,\nwe were surprised how frightened most of them were of competitors.\nBut now that I think of it, we were just as frightened when we\nstarted Viaweb.  For the first year, our initial reaction to news\nof a competitor was always: we're doomed.  Just as a hypochondriac\nmagnifies his symptoms till he's convinced he has some terrible\ndisease, when you're not used to competitors you magnify them into\nmonsters.Here's a handy rule for startups: competitors are rarely as dangerous\nas they seem.  Most will self-destruct before you can destroy them.\nAnd it certainly doesn't matter how many of them there are, any\nmore than it matters to the winner of a marathon how many runners\nare behind him.\"It's a crowded market,\" I remember one founder saying worriedly.\"Are you the current leader?\" I asked.\"Yes.\"\"Is anyone able to develop software faster than you?\"\"Probably not.\"\"Well, if you're ahead now, and you're the fastest, then you'll\nstay ahead.  What difference does it make how many others there\nare?\"Another group was worried when they realized they had to rewrite\ntheir software from scratch.  I told them it would be a bad sign\nif they didn't.  The main function of your initial version is to\nbe rewritten.That's why we advise groups to ignore issues like scalability,\ninternationalization, and heavy-duty security at first. [1] I can\nimagine an advocate of \"best practices\" saying these ought to be\nconsidered from the start.  And he'd be right, except that they\ninterfere with the primary function of software in a startup: to\nbe a vehicle for experimenting with its own design.  Having to\nretrofit internationalization or scalability is a pain, certainly.\nThe only bigger pain is not needing to, because your initial version\nwas too big and rigid to evolve into something users wanted.I suspect this is another reason startups beat big companies.\nStartups can be irresponsible and release version 1s that are light\nenough to evolve.  In big companies, all the pressure is in the\ndirection of over-engineering.What Got LearnedOne thing we were curious about this summer was where these groups\nwould need help.  That turned out to vary a lot.  Some we helped\nwith technical advice-- for example, about how to set up an application\nto run on multiple servers.  Most we helped with strategy questions,\nlike what to patent, and what to charge for and what to give away.\nNearly all wanted advice about dealing with future investors: how\nmuch money should they take and what kind of terms should they\nexpect?However, all the groups quickly learned how to deal with stuff like\npatents and investors.  These problems aren't intrinsically difficult,\njust unfamiliar.It was surprising-- slightly frightening even-- how fast they\nlearned.  The weekend before the demo day for investors, we had a\npractice session where all the groups gave their presentations.\nThey were all terrible.  We tried to explain how to make them better,\nbut we didn't have much hope.  So on demo day I told the assembled\nangels and VCs that these guys were hackers, not MBAs, and so while\ntheir software was good, we should not expect slick presentations\nfrom them.The groups then proceeded to give fabulously slick presentations.\nGone were the mumbling recitations of lists of features.   It was\nas if they'd spent the past week at acting school.  I still don't\nknow how they did it.Perhaps watching each others' presentations helped them see what\nthey'd been doing wrong.  Just as happens in college, the summer\nfounders learned a lot from one another-- maybe more than they\nlearned from us.  A lot of the problems they face are the same,\nfrom dealing with investors to hacking Javascript.I don't want to give the impression there were no problems this\nsummer.  A lot went wrong, as usually happens with startups.  One\ngroup got an \"exploding\nterm-sheet\" from some VCs.  Pretty much all the groups who had\ndealings with big companies found that big companies do everything\ninfinitely slowly.  (This is to be expected.  If big companies\nweren't incapable, there would be no room for startups to exist.)\nAnd of course there were the usual nightmares associated with\nservers.  In short, the disasters this summer were just the usual childhood\ndiseases.  Some of this summer's eight startups will\nprobably die eventually; it would be extraordinary if all eight\nsucceeded.  But what kills them will not be dramatic, external\nthreats, but a mundane, internal one: not getting enough done.So far, though, the news is all good.  In fact, we were surprised\nhow much fun the summer was for us.  The main reason was how much\nwe liked the founders.  They're so earnest and hard-working.  They\nseem to like us too.  And this illustrates another advantage of\ninvesting over hiring: our relationship with them is way better\nthan it would be between a boss and an employee.  Y Combinator ends\nup being more like an older brother than a parent.I was surprised how much time I spent making introductions.\nFortunately I discovered that when a startup needed to talk to\nsomeone, I could usually get to the right person by at most one\nhop.  I remember wondering, how did my friends get to be so eminent?\nand a second later realizing: shit, I'm forty.Another surprise was that the three-month batch format,\nwhich we were forced into by the constraints of the summer, turned\nout to be an advantage.  When we started Y Combinator, we planned\nto invest the way other venture firms do: as proposals came in,\nwe'd evaluate them and decide yes or no.  The SFP\nwas just an experiment to get things started.  But it worked so\nwell that we plan to do\nall\nour investing this way, one cycle in\nthe summer and one in winter.  It's more efficient for us, and\nbetter for the startups too.Several groups said our weekly dinners saved them from a common\nproblem afflicting startups: working so hard that one has no social\nlife.  (I remember that part all too well.)  This way, they were\nguaranteed a social event at least once a week.IndependenceI've heard Y Combinator described as an \"incubator.\"  Actually we're\nthe opposite: incubators exert more control than ordinary VCs, and\nwe make a point of exerting less.  Among other things, incubators\nusually make you work in their office-- that's where the\nword \"incubator\" comes from.  That seems the wrong model.  If\ninvestors get too involved, they smother one of the most powerful\nforces in a startup: the feeling that it's your own company.Incubators were conspicuous failures during the Bubble.  There's\nstill debate about whether this was because of the Bubble, or because\nthey're a bad idea.  My vote is they're a bad idea.  I think they\nfail because they select for the wrong people.  When we were starting\na startup, we would never have taken funding from an \"incubator.\"\nWe can find office space, thanks; just give us the money.  And\npeople with that attitude are the ones likely to succeed in startups.Indeed, one quality all the founders shared this summer was a spirit\nof independence.  I've been wondering about that.  Are some people\njust a lot more independent than others, or would everyone be this\nway if they were allowed to?As with most nature/nurture questions, the answer is probably: some\nof each.  But my main conclusion from the summer is that there's\nmore environment in the mix than most people realize.  I could see\nthat from how the founders' attitudes changed during the\nsummer.  Most were emerging from twenty or so years of being told\nwhat to do.  They seemed a little surprised at having total freedom.\nBut they grew into it really quickly; some of these guys now seem\nabout four inches taller (metaphorically) than they did at the\nbeginning of the summer.When we asked the summer founders what surprised them most about\nstarting a company, one said \"the most shocking thing is that it\nworked.\"It will take more experience to know for sure, but my guess is that\na lot of hackers could do this-- that if you put people in a position\nof independence, they develop the qualities they need.  Throw them\noff a cliff, and most will find on the way down that they have\nwings.The reason this is news to anyone is that the same forces work in\nthe other direction too. Most hackers are\nemployees, and this molds\nyou into someone to whom starting a startup seems impossible as\nsurely as starting a startup molds you into someone who can handle\nit.If I'm right, \"hacker\" will mean something different in twenty years\nthan it does now. Increasingly it will mean the people who run the\ncompany.  Y Combinator is just accelerating a process that would\nhave happened anyway.  Power is shifting from the people who deal\nwith money to the people who create technology, and if our experience\nthis summer is any guide, this will be a good thing.Notes[1] By heavy-duty security I mean efforts to protect against truly\nshows us, the 2005 summer founders, and Smartleaf\nco-founders Mark Nitzberg and Olin Shivers at the 30-foot table\nKate Courteau designed for us. Photo by Alex Lewin.Thanks to Sarah Harlin, Steve Huffman, Jessica Livingston,\nZak Stone, and Aaron Swartz for reading drafts of this."},{"title":"What I've Learned from Hacker News","text":"February 2009Hacker News was two years\nold last week.  Initially it was supposed to be a side project—an\napplication to sharpen Arc on, and a place for current and future\nY Combinator founders to exchange news.  It's grown bigger and taken\nup more time than I expected, but I don't regret that because I've\nlearned so much from working on it.GrowthWhen we launched in February 2007, weekday traffic was around 1600\ndaily uniques.  It's since grown to around 22,000.  This growth\nrate is a bit higher than I'd like.  I'd like the site to grow,\nsince a site that isn't growing at least slowly is probably dead.\nBut I wouldn't want it to grow as large as Digg or Reddit—mainly\nbecause that would dilute the character of the site, but also because\nI don't want to spend all my time dealing with scaling.I already have problems enough with that.  Remember, the original\nmotivation for HN was to test a new programming language, and\nmoreover one that's focused on experimenting with language design,\nnot performance.  Every time the site gets slow, I fortify myself\nby recalling McIlroy and Bentley's famous quote\nThe key to performance is elegance, not battalions of special\ncases.\nand look for the bottleneck I can remove with least code.  So far\nI've been able to keep up, in the sense that performance has remained\nconsistently mediocre despite 14x growth. I don't know what I'll\ndo next, but I'll probably think of something.This is my attitude to the site generally.  Hacker News is an\nexperiment, and an experiment in a very young field.  Sites of this\ntype are only a few years old.  Internet conversation generally is\nonly a few decades old.  So we've probably only discovered a fraction\nof what we eventually will.That's why I'm so optimistic about HN.  When a technology is this\nyoung, the existing solutions are usually terrible; which means it\nmust be possible to do much better; which means many problems that\nseem insoluble aren't. Including, I hope, the problem that has\nafflicted so many previous communities: being ruined by growth.DilutionUsers have worried about that since the site was a few months old.\nSo far these alarms have been false, but they may not always be.\nDilution is a hard problem. But probably soluble; it doesn't mean\nmuch that open conversations have \"always\" been destroyed by growth\nwhen \"always\" equals 20 instances.But it's important to remember we're trying to solve a new problem,\nbecause that means we're going to have to try new things, most of\nwhich probably won't work.  A couple weeks ago I tried displaying\nthe names of users with the highest average comment scores in orange.\n[1]\nThat was a mistake.  Suddenly a culture that had been more\nor less united was divided into haves and have-nots.  I didn't\nrealize how united the culture had been till I saw it divided.  It\nwas painful to watch.\n[2]So orange usernames won't be back.  (Sorry about that.)  But there\nwill be other equally broken-seeming ideas in the future, and the\nones that turn out to work will probably seem just as broken as\nthose that don't.Probably the most important thing I've learned about dilution is\nthat it's measured more in behavior than users. It's bad behavior\nyou want to keep out more than bad people. User behavior turns out\nto be surprisingly malleable.  If people are\nexpected to behave\nwell, they tend to; and vice versa.Though of course forbidding bad behavior does tend to keep away bad\npeople, because they feel uncomfortably constrained in a place where\nthey have to behave well.  But this way of keeping them out is\ngentler and probably also more effective than overt barriers.It's pretty clear now that the broken windows theory applies to\ncommunity sites as well.  The theory is that minor forms of bad\nbehavior encourage worse ones: that a neighborhood with lots of\ngraffiti and broken windows becomes one where robberies occur.  I\nwas living in New York when Giuliani introduced the reforms that\nmade the broken windows theory famous, and the transformation was\nmiraculous. And I was a Reddit user when the opposite happened\nthere, and the transformation was equally dramatic.I'm not criticizing Steve and Alexis.  What happened to Reddit\ndidn't happen out of neglect.  From the start they had a policy of\ncensoring nothing except spam.  Plus Reddit had different goals\nfrom Hacker News.  Reddit was a startup, not a side project; its\ngoal was to grow as fast as possible.  Combine rapid growth and\nzero censorship, and the result is a free for all.  But I don't\nthink they'd do much differently if they were doing it again.\nMeasured by traffic, Reddit is much more successful than Hacker\nNews.But what happened to Reddit won't inevitably happen to HN. There\nare several local maxima.  There can be places that are free for\nalls and places that are more thoughtful, just as there are in the\nreal world; and people will behave differently depending on which\nthey're in, just as they do in the real world.I've observed this in the wild.  I've seen people cross-posting on\nReddit and Hacker News who actually took the trouble to write two\nversions, a flame for Reddit and a more subdued version for HN.SubmissionsThere are two major types of problems a site like Hacker News needs\nto avoid: bad stories and bad comments.  So far the danger of bad\nstories seems smaller.  The stories on the frontpage now are still\nroughly the ones that would have been there when HN started.I once thought I'd have to weight votes to keep crap off the\nfrontpage, but I haven't had to yet.  I wouldn't have predicted the\nfrontpage would hold up so well, and I'm not sure why it has.\nPerhaps only the more thoughtful users care enough to submit and\nupvote links, so the marginal cost of one random new user approaches\nzero.  Or perhaps the frontpage protects itself, by advertising what type of submission is expected.The most dangerous thing for the frontpage is stuff that's too easy\nto upvote.  If someone proves a new theorem, it takes some work by\nthe reader to decide whether or not to upvote it.  An amusing cartoon\ntakes less.  A rant with a rallying cry as the title takes zero,\nbecause people vote it up without even reading it.Hence what I call the Fluff Principle: on a user-voted news site,\nthe links that are easiest to judge will take over unless you take\nspecific measures to prevent it.Hacker News has two kinds of protections against fluff.  The most\ncommon types of fluff links are banned as off-topic.  Pictures of\nkittens, political diatribes, and so on are explicitly banned.  This\nkeeps out most fluff, but not all of it.  Some links are both fluff,\nin the sense of being very short, and also on topic.There's no single solution to that.  If a link is just an empty\nrant, editors will sometimes kill it even if it's on topic in the\nsense of being about hacking, because it's not on topic by the real\nstandard, which is to engage one's intellectual curiosity.  If the\nposts on a site are characteristically of this type I sometimes ban\nit, which means new stuff at that url is auto-killed.  If a post\nhas a linkbait title, editors sometimes rephrase it to be more\nmatter-of-fact.  This is especially necessary with links whose\ntitles are rallying cries, because otherwise they become implicit\n\"vote up if you believe such-and-such\" posts, which are the most\nextreme form of fluff.The techniques for dealing with links have to evolve, because the\nlinks do. The existence of aggregators has already affected what\nthey aggregate. Writers now deliberately write things to draw traffic\nfrom aggregators—sometimes even specific ones.  (No, the irony\nof this statement is not lost on me.)  Then there are the more\nsinister mutations, like linkjacking—posting a paraphrase of\nsomeone else's article and submitting that instead of the original.\nThese can get a lot of upvotes, because a lot of what's good in an\narticle often survives; indeed, the closer the paraphrase is to\nplagiarism, the more survives.\n[3]I think it's important that a site that kills submissions provide\na way for users to see what got killed if they want to.  That keeps\neditors honest, and just as importantly, makes users confident\nthey'd know if the editors stopped being honest. HN users can do\nthis by flipping a switch called showdead in their profile.\n[4]CommentsBad comments seem to be a harder problem than bad submissions.\nWhile the quality of links on the frontpage of HN hasn't changed\nmuch, the quality of the median comment may have decreased somewhat.There are two main kinds of badness in comments: meanness and\nstupidity.  There is a lot of overlap between the two—mean\ncomments are disproportionately likely also to be dumb—but\nthe strategies for dealing with them are different.  Meanness is\neasier to control.  You can have rules saying one shouldn't be mean,\nand if you enforce them it seems possible to keep a lid on meanness.Keeping a lid on stupidity is harder, perhaps because stupidity is\nnot so easily distinguishable.  Mean people are more likely to know\nthey're being mean than stupid people are to know they're being\nstupid.The most dangerous form of stupid comment is not the long but\nmistaken argument, but the dumb joke.  Long but mistaken arguments\nare actually quite rare.  There is a strong correlation between\ncomment quality and length; if you wanted to compare the quality\nof comments on community sites, average length would be a good\npredictor.  Probably the cause is human nature rather than anything\nspecific to comment threads. Probably it's simply that stupidity\nmore often takes the form of having few ideas than wrong ones.Whatever the cause, stupid comments tend to be short.  And since\nit's hard to write a short comment that's distinguished for the\namount of information it conveys, people try to distinguish them\ninstead by being funny.  The most tempting format for stupid comments\nis the supposedly witty put-down, probably because put-downs are\nthe easiest form of humor.\n[5]\nSo one advantage of forbidding\nmeanness is that it also cuts down on these.Bad comments are like kudzu: they take over rapidly. Comments have\nmuch more effect on new comments than submissions have on new\nsubmissions.  If someone submits a lame article, the other submissions\ndon't all become lame.  But if someone posts a stupid comment on a\nthread, that sets the tone for the region around it.  People reply\nto dumb jokes with dumb jokes.Maybe the solution is to add a delay before people can respond to\na comment, and make the length of the delay inversely proportional\nto some prediction of its quality.  Then dumb threads would grow\nslower.\n[6]PeopleI notice most of the techniques I've described are conservative:\nthey're aimed at preserving the character of the site rather than\nenhancing it.  I don't think that's a bias of mine.  It's due to\nthe shape of the problem.  Hacker News had the good fortune to start\nout good, so in this case it's literally a matter of preservation.\nBut I think this principle would also apply to sites with different\norigins.The good things in a community site come from people more than\ntechnology; it's mainly in the prevention of bad things that\ntechnology comes into play. Technology certainly can enhance\ndiscussion.  Nested comments do, for example.  But I'd rather use\na site with primitive features and smart, nice users than a more\nadvanced one whose users were idiots or trolls.So the most important thing a community site can do is attract the\nkind of people it wants.  A site trying to be as big as possible\nwants to attract everyone.  But a site aiming at a particular subset\nof users has to attract just those—and just as importantly,\nrepel everyone else.  I've made a conscious effort to do this on\nHN.  The graphic design is as plain as possible, and the site rules\ndiscourage dramatic link titles.  The goal is that the only thing\nto interest someone arriving at HN for the first time should be the\nideas expressed there.The downside of tuning a site to attract certain people is that,\nto those people, it can be too attractive.  I'm all too aware how\naddictive Hacker News can be.  For me, as for many users, it's a\nkind of virtual town square.  When I want to take a break from\nworking, I walk into the square, just as I might into Harvard Square\nor University Ave in the physical world.\n[7]\nBut an online square is\nmore dangerous than a physical one.  If I spent half the day loitering\non University Ave, I'd notice.  I have to walk a mile to get there,\nand sitting in a cafe feels different from working. But visiting\nan online forum takes just a click, and feels superficially very\nmuch like working.  You may be wasting your time, but you're not\nidle.  Someone is wrong on the Internet, and you're fixing the\nproblem.Hacker News is definitely useful.  I've learned a lot from things\nI've read on HN.  I've written several essays that began as comments\nthere.  So I wouldn't want the site to go away.  But I would like\nto be sure it's not a net drag on productivity.  What a disaster\nthat would be, to attract thousands of smart people to a site that\ncaused them to waste lots of time.  I wish I could be 100% sure\nthat's not a description of HN.I feel like the addictiveness of games and social applications is\nstill a mostly unsolved problem.  The situation now is like it was\nwith crack in the 1980s: we've invented terribly addictive new\nthings, and we haven't yet evolved ways to protect ourselves from\nthem.  We will eventually, and that's one of the problems I hope\nto focus on next.Notes[1]\nI tried ranking users by both average and median comment\nscore, and average (with the high score thrown out) seemed the more\naccurate predictor of high quality.  Median may be the more accurate\npredictor of low quality though.[2]\nAnother thing I learned from this experiment is that if you're\ngoing to distinguish between people, you better be sure you do it\nright.  This is one problem where rapid prototyping doesn't work.Indeed, that's the intellectually honest argument for not discriminating\nbetween various types of people.  The reason not to do it is not\nthat everyone's the same, but that it's bad to do wrong and hard\nto do right.[3]\nWhen I catch egregiously linkjacked posts I replace the url\nwith that of whatever they copied.  Sites that habitually linkjack\nget banned.[4]\nDigg is notorious for its lack of transparency.  The root of\nthe problem is not that the guys running Digg are especially sneaky,\nbut that they use the wrong algorithm for generating their frontpage.\nInstead of bubbling up from the bottom as they get more votes, as\non Reddit, stories start at the top and get pushed down by new\narrivals.The reason for the difference is that Digg is derived from Slashdot,\nwhile Reddit is derived from Delicious/popular.  Digg is Slashdot\nwith voting instead of editors, and Reddit is Delicious/popular\nwith voting instead of bookmarking.  (You can still see fossils of\ntheir origins in their graphic design.)Digg's algorithm is very vulnerable to gaming, because any story\nthat makes it onto the frontpage is the new top story.  Which in\nturn forces Digg to respond with extreme countermeasures.  A lot\nof startups have some kind of secret about the subterfuges they had\nto resort to in the early days, and I suspect Digg's is the extent\nto which the top stories were de facto chosen by human editors.[5]\nThe dialog on Beavis and Butthead was composed largely of\nthese, and when I read comments on really bad sites I can hear them\nin their voices.[6]\nI suspect most of the techniques for discouraging stupid\ncomments have yet to be discovered.  Xkcd implemented a particularly\nclever one in its IRC channel: don't allow the same thing twice.\nOnce someone has said \"fail,\" no one can ever say it again.  This\nwould penalize short comments especially, because they have less\nroom to avoid collisions in.Another promising idea is the stupid\nfilter, which is just like a\nprobabilistic spam filter, but trained on corpora of stupid and\nnon-stupid comments instead.You may not have to kill bad comments to solve the problem.  Comments\nat the bottom of a long thread are rarely seen, so it may be enough\nto incorporate a prediction of quality in the comment sorting\nalgorithm.[7]\nWhat makes most suburbs so demoralizing is that there's no\ncenter to walk to.Thanks to Justin Kan, Jessica Livingston, Robert Morris,\nAlexis Ohanian, Emmet Shear, and Fred Wilson for reading drafts of\nthis.\nComment on this essay."},{"title":"What Kate Saw in Silicon Valley","text":"August 2009Kate Courteau is the architect who designed Y Combinator's office.\nRecently we managed to recruit her to help us run YC when she's not\nbusy with architectural projects.  Though she'd heard a lot about\nYC since the beginning, the last 9 months have been a total immersion.I've been around the startup world for so long that it seems normal\nto me, so I was curious to hear what had surprised her most about\nit.  This was her list:1. How many startups fail. Kate knew in principle that startups\nwere very risky, but she was surprised to see how constant the\nthreat of failure was—not just for the minnows, but even for the\nfamous startups whose founders came to speak at YC dinners.2. How much startups' ideas change. As usual, by Demo Day about\nhalf the startups were doing something significantly different than\nthey started with.  We encourage that.  Starting a startup is like\nscience in that you have to follow the truth wherever it leads.  In\nthe rest of the world, people don't start things till they're sure\nwhat they want to do, and once started they tend continue on their\ninitial path even if it's mistaken.3. How little money it can take to start a startup. In Kate's\nworld, everything is still physical and expensive.  You can barely\nrenovate a bathroom for the cost of starting a startup.4. How scrappy founders are.  That was her actual word.  I agree\nwith her, but till she mentioned this it never occurred to me how\nlittle this quality is appreciated in most of the rest of the world.\nIt wouldn't be a compliment in most organizations to call someone\nscrappy.What does it mean, exactly?  It's basically the diminutive form of\nbelligerent.  Someone who's scrappy manages to be both threatening\nand undignified at the same time.   Which seems to me exactly what\none would want to be, in any kind of work.  If you're not threatening,\nyou're probably not doing anything new, and dignity is merely a\nsort of plaque.5. How tech-saturated Silicon Valley is.  \"It seems like everybody\nhere is in the industry.\"  That isn't literally true, but there is\na qualitative difference between Silicon Valley and other places.\nYou tend to keep your voice down, because there's a good chance the\nperson at the next table would know some of the people you're talking\nabout.  I never felt that in Boston.  The good news is, there's\nalso a good chance the person at the next table could help you in\nsome way.6. That the speakers at YC were so consistent in their advice.\nActually, I've noticed this too.  I always worry the speakers will\nput us in an embarrassing position by contradicting what we tell the\nstartups, but it happens surprisingly rarely.When I asked her what specific things she remembered speakers always\nsaying, she mentioned: that the way to succeed was to launch something\nfast, listen to users, and then iterate; that startups required\nresilience because they were always an emotional rollercoaster; and\nthat most VCs were sheep.I've been impressed by how consistently the speakers advocate\nlaunching fast and iterating.  That was contrarian advice 10 years\nago, but it's clearly now the established practice.7. How casual successful startup founders are.  Most of the famous\nfounders in Silicon Valley are people you'd overlook on the street.\nIt's not merely that they don't dress up.  They don't project any\nkind of aura of power either.  \"They're not trying to impress\nanyone.\"Interestingly, while Kate said that she could never pick out\nsuccessful founders, she could recognize VCs, both by the way they\ndressed and the way they carried themselves.8. How important it is for founders to have people to ask for advice.\n(I swear I didn't prompt this one.)  Without advice \"they'd just\nbe sort of lost.\"  Fortunately, there are a lot of people to help\nthem.  There's a strong tradition within YC of helping other YC-funded\nstartups.  But we didn't invent that idea: it's just a slightly\nmore concentrated form of existing Valley culture.9. What a solitary task startups are.  Architects are constantly\ninteracting face to face with other people, whereas doing a technology\nstartup, at least, tends to require long stretches of uninterrupted\ntime to work.  \"You could do it in a box.\"By inverting this list, we can get a portrait of the \"normal\" world.\nIt's populated by people who talk a lot with one another as they\nwork slowly but harmoniously on conservative, expensive projects\nwhose destinations are decided in advance, and who carefully adjust\ntheir manner to reflect their position in the hierarchy.That's also a fairly accurate description of the past.  So startup\nculture may not merely be different in the way you'd expect any\nsubculture to be, but a leading indicator."},{"title":"What Languages Fix","text":"Kevin Kelleher suggested an interesting way to compare programming\nlanguages: to describe each in terms of the problem it\nfixes.  The surprising thing is how many, and how well, languages can be\ndescribed this way.\nAlgol: Assembly language is too low-level.Pascal: Algol doesn't have enough data types.Modula: Pascal is too wimpy for systems programming.\nSimula: Algol isn't good enough at simulations.Smalltalk: Not everything in Simula is an object.Fortran: Assembly language is too low-level.Cobol: Fortran is scary.PL/1: Fortran doesn't have enough data types.Ada: Every existing language is missing something.Basic: Fortran is scary.APL: Fortran isn't good enough at manipulating arrays.J: APL requires its own character set.C: Assembly language is too low-level.C++: C is too low-level.Java: C++ is a kludge.  And Microsoft is going to crush us.C#: Java is controlled by Sun.\nLisp: Turing Machines are an awkward way to describe computation.Scheme: MacLisp is a kludge.T: Scheme has no libraries.Common Lisp: There are too many dialects of Lisp.Dylan: Scheme has no libraries, and Lisp syntax is scary.\nPerl: Shell scripts/awk/sed are not enough like programming languages.Python: Perl is a kludge.Ruby: Perl is a kludge, and Lisp syntax is scary.Prolog: Programming is not enough like logic."},{"title":"What Made Lisp Different","text":"December 2001 (rev. May 2002)\n(This article came about in response to some questions on\nthe LL1 mailing list.  It is now\nincorporated in Revenge of the Nerds.)When McCarthy designed Lisp in the late 1950s, it was\na radical departure from existing languages,\nthe most important of which was Fortran.Lisp embodied nine new ideas:\n1. Conditionals.  A conditional is an if-then-else\nconstruct.  We take these for granted now.  They were\ninvented\nby McCarthy in the course of developing Lisp.\n(Fortran at that time only had a conditional\ngoto, closely based on the branch instruction in the\nunderlying hardware.)  McCarthy, who was on the Algol committee, got\nconditionals into Algol, whence they spread to most other\nlanguages.2. A function type. In Lisp, functions are first class\nobjects-- they're a data type just like integers, strings,\netc, and have a literal representation, can be stored in variables,\ncan be passed as arguments, and so on.3. Recursion.  Recursion existed as a mathematical concept\nbefore Lisp of course, but Lisp was the first programming language to support\nit.  (It's arguably implicit in making functions first class\nobjects.)4. A new concept of variables.  In Lisp, all variables\nare effectively pointers. Values are what\nhave types, not variables, and assigning or binding\nvariables means copying pointers, not what they point to.5. Garbage-collection.6. Programs composed of expressions. Lisp programs are\ntrees of expressions, each of which returns a value.\n(In some Lisps expressions\ncan return multiple values.)  This is in contrast to Fortran\nand most succeeding languages, which distinguish between\nexpressions and statements.It was natural to have this\ndistinction in Fortran because (not surprisingly in a language\nwhere the input format was punched cards) the language was\nline-oriented.  You could not nest statements.  And\nso while you needed expressions for math to work, there was\nno point in making anything else return a value, because\nthere could not be anything waiting for it.This limitation\nwent away with the arrival of block-structured languages,\nbut by then it was too late. The distinction between\nexpressions and statements was entrenched.  It spread from\nFortran into Algol and thence to both their descendants.When a language is made entirely of expressions, you can\ncompose expressions however you want.  You can say either\n(using Arc syntax)(if foo (= x 1) (= x 2))or(= x (if foo 1 2))7. A symbol type.  Symbols differ from strings in that\nyou can test equality by comparing a pointer.8. A notation for code using trees of symbols.9. The whole language always available.\nThere is\nno real distinction between read-time, compile-time, and runtime.\nYou can compile or run code while reading, read or run code\nwhile compiling, and read or compile code at runtime.Running code at read-time lets users reprogram Lisp's syntax;\nrunning code at compile-time is the basis of macros; compiling\nat runtime is the basis of Lisp's use as an extension\nlanguage in programs like Emacs; and reading at runtime\nenables programs to communicate using s-expressions, an\nidea recently reinvented as XML.\nWhen Lisp was first invented, all these ideas were far\nremoved from ordinary programming practice, which was\ndictated largely by the hardware available in the late 1950s.Over time, the default language, embodied\nin a succession of popular languages, has\ngradually evolved toward Lisp.  1-5 are now widespread.\n6 is starting to appear in the mainstream.\nPython has a form of 7, though there doesn't seem to be\nany syntax for it.\n8, which (with 9) is what makes Lisp macros\npossible, is so far still unique to Lisp,\nperhaps because (a) it requires those parens, or something\njust as bad, and (b) if you add that final increment of power,\nyou can no\nlonger claim to have invented a new language, but only\nto have designed a new dialect of Lisp ; -)Though useful to present-day programmers, it's\nstrange to describe Lisp in terms of its\nvariation from the random expedients other languages\nadopted.  That was not, probably, how McCarthy\nthought of it.  Lisp wasn't designed to fix the mistakes\nin Fortran; it came about more as the byproduct of an\nattempt to axiomatize computation."},{"title":"What Microsoft Is this the Altair Basic of?","text":"February 2015One of the most valuable exercises you can try if you want to\nunderstand startups is to look at the most successful companies and\nexplain why they were not as lame as they seemed when they first\nlaunched.  Because they practically all seemed lame at first. Not\njust small, lame.  Not just the first step up a big mountain.  More\nlike the first step into a swamp.A Basic interpreter for the Altair?  How could that ever grow into\na giant company?  People sleeping on airbeds in strangers' apartments?\nA web site for college students to stalk one another?  A wimpy\nlittle single-board computer for hobbyists that used a TV as a\nmonitor?  A new search engine, when there were already about 10,\nand they were all trying to de-emphasize search?  These ideas didn't\njust seem small.  They seemed wrong.  They were the kind of ideas\nyou could not merely ignore, but ridicule.Often the founders themselves didn't know why their ideas were\npromising.  They were attracted to these ideas by instinct, because\nthey were living in the future and\nthey sensed that something was missing.  But they could not have\nput into words exactly how their ugly ducklings were going to grow\ninto big, beautiful swans.Most people's first impulse when they hear about a lame-sounding\nnew startup idea is to make fun of it.  Even a lot of people who\nshould know better.When I encounter a startup with a lame-sounding idea, I ask \"What\nMicrosoft is this the Altair Basic of?\"  Now it's a puzzle, and the\nburden is on me to solve it.  Sometimes I can't think of an answer,\nespecially when the idea is a made-up one.  But it's remarkable how\noften there does turn out to be an answer.  Often it's one the\nfounders themselves hadn't seen yet.Intriguingly, there are sometimes multiple answers.  I talked to a\nstartup a few days ago that could grow into 3 distinct Microsofts.\nThey'd probably vary in size by orders of magnitude.  But you can\nnever predict how big a Microsoft is going to be, so in cases like\nthat I encourage founders to follow whichever path is most immediately\nexciting to them.  Their instincts got them this far. Why stop now?"},{"title":"What Startups Are Really Like","text":"October 2009(This  essay is derived from a talk at the 2009 Startup School.)I wasn't sure what to talk about at Startup School, so I decided\nto ask the founders of the startups we'd funded.  What hadn't I\nwritten about yet?I'm in the unusual position of being able to test the essays I write\nabout startups.  I hope the ones on other topics are right, but I\nhave no way to test them.  The ones on startups get tested by about\n70 people every 6 months.So I sent all the founders an email asking what surprised them about\nstarting a startup.  This amounts to asking what I got wrong, because\nif I'd explained things well enough, nothing should have surprised\nthem.I'm proud to report I got one response saying:\nWhat surprised me the most is that everything was actually\nfairly predictable!\nThe bad news is that I got over 100 other responses listing the\nsurprises they encountered.There were very clear patterns in the responses; it was remarkable\nhow often several people had been surprised by exactly the same\nthing.  These were the biggest:1. Be Careful with CofoundersThis was the surprise mentioned by the most founders.  There were\ntwo types of responses: that you have to be careful who you pick\nas a cofounder, and that you have to work hard to maintain your\nrelationship.What people wished they'd paid more attention to when choosing\ncofounders was character and commitment, not ability.  This was\nparticularly true with startups that failed.  The lesson: don't\npick cofounders who will flake.Here's a typical reponse:\nYou haven't seen someone's true colors unless you've worked\nwith them on a startup.\nThe reason character is so important is that it's tested more\nseverely than in most other situations.  One founder said explicitly\nthat the relationship between founders was more important than\nability:\nI would rather cofound a startup with a friend than a stranger\nwith higher output.  Startups are so hard and emotional that\nthe bonds and emotional and social support that come with\nfriendship outweigh the extra output lost.\nWe learned this lesson a long time ago.  If you look at the YC\napplication, there are more questions about the commitment and\nrelationship of the founders than their ability.Founders of successful startups talked less about choosing cofounders\nand more about how hard they worked to maintain their relationship.\nOne thing that surprised me is how the relationship of startup\nfounders goes from a friendship to a marriage.  My relationship\nwith my cofounder went from just being friends to seeing each\nother all the time, fretting over the finances and cleaning up\nshit. And the startup was our baby.  I summed it up once like\nthis: \"It's like we're married, but we're not fucking.\"\nSeveral people used that word \"married.\"  It's a far more intense\nrelationship than you usually see between coworkers—partly because\nthe stresses are so much greater, and partly because at first the\nfounders are the whole company.  So this relationship has to be\nbuilt of top quality materials and carefully maintained.  It's the\nbasis of everything.2. Startups Take Over Your LifeJust as the relationship between cofounders is more intense than\nit usually is between coworkers, so is the relationship between the\nfounders and the company.  Running a startup is not like having a\njob or being a student, because it never stops.  This is so foreign\nto most people's experience that they don't get it till it happens.\n[1]\nI didn't realize I would spend almost every waking moment either\nworking or thinking about our startup.  You enter a whole\ndifferent way of life when it's your company vs. working for\nsomeone else's company.\nIt's exacerbated by the fast pace of startups, which makes it seem\nlike time slows down:\nI think the thing that's been most surprising to me is how one's\nperspective on time shifts. Working on our startup, I remember\ntime seeming to stretch out, so that a month was a huge interval.\nIn the best case, total immersion can be exciting:\nIt's surprising how much you become consumed by your startup,\nin that you think about it day and night, but never once does\nit feel like \"work.\"\nThough I have to say, that quote is from someone we funded this\nsummer.  In a couple years he may not sound so chipper.3. It's an Emotional Roller-coasterThis was another one lots of people were surprised about.  The ups\nand downs were more extreme than they were prepared for.In a startup, things seem great one moment and hopeless the next.\nAnd by next, I mean a couple hours later.\nThe emotional ups and downs were the biggest surprise for me.\nOne day, we'd think of ourselves as the next Google and dream\nof buying islands; the next, we'd be pondering how to let our\nloved ones know of our utter failure; and on and on.\nThe hard part, obviously, is the lows.  For a lot of founders that\nwas the big surprise:\nHow hard it is to keep everyone motivated during rough days or\nweeks, i.e. how low the lows can be.\nAfter a while, if you don't have significant success to cheer you\nup, it wears you out:\nYour most basic advice to founders is \"just don't die,\" but the\nenergy to keep a company going in lieu of unburdening success\nisn't free; it is siphoned from the founders themselves.\nThere's a limit to how much you can take.  If you get to the point\nwhere you can't keep working anymore, it's not the end of the world.\nPlenty of famous founders have had some failures along the way.4. It Can Be FunThe good news is, the highs are also very high.  Several founders\nsaid what surprised them most about doing a startup was how fun it\nwas:\nI think you've left out just how fun it is to do a startup. I\nam more fulfilled in my work than pretty much any of my friends\nwho did not start companies.\nWhat they like most is the freedom:\nI'm surprised by how much better it feels to be working on\nsomething that is challenging and creative, something I believe\nin, as opposed to the hired-gun stuff I was doing before.  I\nknew it would feel better; what's surprising is how much better.\nFrankly, though, if I've misled people here, I'm not eager to fix\nthat.  I'd rather have everyone think starting a startup is grim\nand hard than have founders go into it expecting it to be fun, and\na few months later saying \"This is supposed to be fun? Are you\nkidding?\"The truth is, it wouldn't be fun for most people.  A lot of what\nwe try to do in the application process is to weed out the people\nwho wouldn't like it, both for our sake and theirs.The best way to put it might be that starting a startup is fun the\nway a survivalist training course would be fun, if you're into that\nsort of thing.  Which is to say, not at all, if you're not.5. Persistence Is the KeyA lot of founders were surprised how important persistence was in\nstartups. It was both a negative and a positive surprise: they were\nsurprised both by the degree of persistence required\nEveryone said how determined and resilient you must be, but\ngoing through it made me realize that the determination required\nwas still understated.\nand also by the degree to which persistence alone was able to\ndissolve obstacles:\nIf you are persistent, even problems that seem out of your\ncontrol (i.e. immigration) seem to work themselves out.\nSeveral founders mentioned specifically how much more important\npersistence was than intelligence.\nI've been surprised again and again by just how much more\nimportant persistence is than raw intelligence.\nThis applies not just to intelligence but to ability in general,\nand that's why so many people said character was more important in\nchoosing cofounders.6. Think Long-TermYou need persistence because everything takes longer than you expect.\nA lot of people were surprised by that.\nI'm continually surprised by how long everything can take.\nAssuming your product doesn't experience the explosive growth\nthat very few products do, everything from development to\ndealmaking (especially dealmaking) seems to take 2-3x longer\nthan I always imagine.\nOne reason founders are surprised is that because they work fast,\nthey expect everyone else to.   There's a shocking amount of shear\nstress at every point where a startup touches a more bureaucratic\norganization, like a big company or a VC fund.  That's why fundraising\nand the enterprise market kill and maim so many startups.\n[2]But I think the reason most founders are surprised by how long it\ntakes is that they're overconfident.  They think they're going to\nbe an instant success, like YouTube or Facebook.  You tell them\nonly 1 out of 100 successful startups has a trajectory like that,\nand they all think \"we're going to be that 1.\"Maybe they'll listen to one of the more successful founders:\nThe top thing I didn't understand before going into it is that\npersistence is the name of the game. For the vast majority of\nstartups that become successful, it's going to be a really\nlong journey, at least 3 years and probably 5+.\nThere is a positive side to thinking longer-term.  It's not just\nthat you have to resign yourself to everything taking longer than\nit should.  If you work patiently it's less stressful, and you can\ndo better work:\nBecause we're relaxed, it's so much easier to have fun doing\nwhat we do. Gone is the awkward nervous energy fueled by the\ndesperate need to not fail guiding our actions. We can concentrate\non doing what's best for our company, product, employees and\ncustomers.\nThat's why things get so much better when you hit ramen profitability.\nYou can shift into a different mode of working.7. Lots of Little ThingsWe often emphasize how rarely startups win simply because they hit\non some magic idea.  I think founders have now gotten that into\ntheir heads.  But a lot were surprised to find this also applies\nwithin startups.  You have to do lots of different things:\nIt's much more of a grind than glamorous. A timeslice selected\nat random would more likely find me tracking down a weird DLL\nloading bug on Swedish Windows, or tracking down a bug in the\nfinancial model Excel spreadsheet the night before a board\nmeeting, rather than having brilliant flashes of strategic\ninsight.\nMost hacker-founders would like to spend all their time programming.\nYou won't get to, unless you fail.  Which can be transformed into:\nIf you spend all your time programming, you will fail.The principle extends even into programming.  There is rarely a\nsingle brilliant hack that ensures success:\nI learnt never to bet on any one feature or deal or anything\nto bring you success. It is never a single thing.  Everything\nis just incremental and you just have to keep doing lots of\nthose things until you strike something.\nEven in the rare cases where a clever hack makes your fortune, you\nprobably won't know till later:\nThere is no such thing as a killer feature. Or at least you\nwon't know what it is.\nSo the best strategy is to try lots of different things.  The reason\nnot to put all your eggs in one basket is not the usual one,\nwhich applies even when you know which basket is best.  In a startup\nyou don't even know that.8. Start with Something MinimalLots of founders mentioned how important it was to launch with the\nsimplest possible thing.  By this point everyone knows you should\nrelease fast and iterate.  It's practically a mantra at YC.  But\neven so a lot of people seem to have been burned by not doing it:\nBuild the absolute smallest thing that can be considered a\ncomplete application and ship it.\nWhy do people take too long on the first version?  Pride, mostly.\nThey hate to release something that could be better.  They worry\nwhat people will say about them.  But you have to overcome this:\nDoing something \"simple\" at first glance does not mean you\naren't doing something meaningful, defensible, or valuable.\nDon't worry what people will say.  If your first version is so\nimpressive that trolls don't make fun of it, you waited too long\nto launch.\n[3]One founder said this should be your approach to all programming,\nnot just startups, and I tend to agree.\nNow, when coding, I try to think \"How can I write this such\nthat if people saw my code, they'd be amazed at how little there\nis and how little it does?\"\nOver-engineering is poison.  It's not like doing extra work for\nextra credit.  It's more like telling a lie that you then have to\nremember so you don't contradict it.9. Engage UsersProduct development is a conversation with the user that doesn't\nreally start till you launch.  Before you launch, you're like a\npolice artist before he's shown the first version of his sketch to\nthe witness.It's so important to launch fast that it may be better to think of\nyour initial version not as a product, but as a trick for getting\nusers to start talking to you.\nI learned to think about the initial stages of a startup as a\ngiant experiment. All products should be considered experiments,\nand those that have a market show promising results extremely\nquickly.\nOnce you start talking to users, I guarantee you'll be surprised\nby what they tell you.\nWhen you let customers tell you what they're after, they will\noften reveal amazing details about what they find valuable as\nwell what they're willing to pay for.\nThe surprise is generally positive as well as negative. They won't\nlike what you've built, but there will be other things they would\nlike that would be trivially easy to implement.  It's not till you\nstart the conversation by launching the wrong thing that they can\nexpress (or perhaps even realize) what they're looking for.10. Change Your IdeaTo benefit from engaging with users you have to be willing to change\nyour idea.  We've always encouraged founders to see a startup idea\nas a hypothesis rather than a blueprint.  And yet they're still\nsurprised how well it works to change the idea.\nNormally if you complain about something being hard, the general\nadvice is to work harder.  With a startup, I think you should\nfind a problem that's easy for you to solve.  Optimizing in\nsolution-space is familiar and straightforward, but you can\nmake enormous gains playing around in problem-space.\nWhereas mere determination, without flexibility, is a greedy algorithm\nthat may get you nothing more than a mediocre local maximum:\nWhen someone is determined, there's still a danger that they'll\nfollow a long, hard path that ultimately leads nowhere.\nYou want to push forward, but at the same time twist and turn to\nfind the most promising path.  One founder put it very succinctly:\nFast iteration is the key to success.\nOne reason this advice is so hard to follow is that people don't\nrealize how hard it is to judge startup ideas, particularly their\nown.  Experienced founders learn to keep an open mind:\nNow I don't laugh at ideas anymore, because I realized how\nterrible I was at knowing if they were good or not.\nYou can never tell what will work.  You just have to do whatever\nseems best at each point.  We do this with YC itself.  We still\ndon't know if it will work, but it seems like a decent hypothesis.11. Don't Worry about CompetitorsWhen you think you've got a great idea, it's sort of like having a\nguilty conscience about something.  All someone has to do is look\nat you funny, and you think \"Oh my God, they know.\"These alarms are almost always false:\nCompanies that seemed like competitors and threats at first\nglance usually never were when you really looked at it. Even\nif they were operating in the same area, they had a different\ngoal.\nOne reason people overreact to competitors is that they overvalue\nideas.  If ideas really were the key, a competitor with the same\nidea would be a real threat.  But it's usually execution that\nmatters:\nAll the scares induced by seeing a new competitor pop up are\nforgotten weeks later. It always comes down to your own product\nand approach to the market.\nThis is generally true even if competitors get lots of attention.\nCompetitors riding on lots of good blogger perception aren't\nreally the winners and can disappear from the map quickly.  You\nneed consumers after all.\nHype doesn't make satisfied users, at least not for something as\ncomplicated as technology.12. It's Hard to Get UsersA lot of founders complained about how hard it was to get users,\nthough.\nI had no idea how much time and effort needed to go into attaining\nusers.\nThis is a complicated topic.  When you can't get users, it's hard\nto say whether the problem is lack of exposure, or whether the\nproduct's simply bad.  Even good products can be blocked by switching\nor integration costs:\nGetting people to use a new service is incredibly difficult.\nThis is especially true for a service that other companies can\nuse, because it requires their developers to do work. If you're\nsmall, they don't think it is urgent.\n[4]\nThe sharpest criticism of YC came from a founder who said we didn't\nfocus enough on customer acquisition:\nYC preaches \"make something people want\" as an engineering task,\na never ending stream of feature after feature until enough\npeople are happy and the application takes off.  There's very\nlittle focus on the cost of customer acquisition.\nThis may be true; this may be something we need to fix, especially\nfor applications like games.  If you make something where the\nchallenges are mostly technical, you can rely on word of mouth,\nlike Google did.  One founder was surprised by how well that worked\nfor him:\nThere is an irrational fear that no one will buy your product.\nBut if you work hard and incrementally make it better, there\nis no need to worry.\nBut with other types of startups you may win less by features and\nmore by deals and marketing.13. Expect the Worst with DealsDeals fall through.  That's a constant of the startup world.  Startups\nare powerless, and good startup ideas generally seem wrong.  So\neveryone is nervous about closing deals with you, and you have no\nway to make them.This is particularly true with investors:\nIn retrospect, it would have been much better if we had operated\nunder the assumption that we would never get any additional\noutside investment.  That would have focused us on finding\nrevenue streams early.\nMy advice is generally pessimistic.  Assume you won't get money,\nand if someone does offer you any, assume you'll never get any more.\nIf someone offers you money, take it. You say it a lot, but I\nthink it needs even more emphasizing.  We had the opportunity\nto raise a lot more money than we did last year and I wish we\nhad.\nWhy do founders ignore me?  Mostly because they're optimistic by\nnature.  The mistake is to be optimistic about things you can't\ncontrol. By all means be optimistic about your ability to make\nsomething great.  But you're asking for trouble if you're optimistic\nabout big companies or investors.14. Investors Are CluelessA lot of founders mentioned how surprised they were by the cluelessness\nof investors:\nThey don't even know about the stuff they've invested in.  I\nmet some investors that had invested in a hardware device and\nwhen I asked them to demo the device they had difficulty switching\nit on.\nAngels are a bit better than VCs, because they usually have startup\nexperience themselves:\nVC investors don't know half the time what they are talking\nabout and are years behind in their thinking.  A few were great,\nbut 95% of the investors we dealt with were unprofessional,\ndidn't seem to be very good at business or have any kind of\ncreative vision. Angels were generally much better to talk to.\nWhy are founders surprised that VCs are clueless?  I think it's\nbecause they seem so formidable.The reason VCs seem formidable is that it's their profession to.\nYou get to be a VC by convincing asset managers to trust you with\nhundreds of millions of dollars.  How do you do that?  You have to\nseem confident, and you have to seem like you understand technology.\n[5]15. You May Have to Play GamesBecause investors are so bad at judging you, you have to work harder\nthan you should at selling yourself. One founder said the thing\nthat surprised him most was\nThe degree to which feigning certitude impressed investors.\nThis is the thing that has surprised me most about YC founders'\nexperiences.  This summer we invited some of the alumni to talk to\nthe new startups about fundraising, and pretty much 100% of their\nadvice was about investor psychology.  I thought I was cynical about\nVCs, but the founders were much more cynical.\nA lot of what startup founders do is just posturing.  It works.\nVCs themselves have no idea of the extent to which the startups\nthey like are the ones that are best at selling themselves to VCs.\n[6]\nIt's exactly the same phenomenon we saw a step earlier.  VCs get\nmoney by seeming confident to LPs, and founders get money by seeming\nconfident to VCs.16. Luck Is a Big FactorWith two such random linkages in the path between startups and\nmoney, it shouldn't be surprising that luck is a big factor in\ndeals.  And yet a lot of founders are surprised by it.\nI didn't realize how much of a role luck plays and how much is\noutside of our control.\nIf you think about famous startups, it's pretty clear how big a\nrole luck plays.  Where would Microsoft be if IBM insisted on an\nexclusive license for DOS?Why are founders fooled by this?  Business guys probably aren't,\nbut hackers are used to a world where skill is paramount, and you\nget what you deserve.\nWhen we started our startup, I had bought the hype of the startup\nfounder dream: that this is a game of skill. It is, in some\nways.  Having skill is valuable. So is being determined as all\nhell. But being lucky is the critical ingredient.\nActually the best model would be to say that the outcome is the\nproduct of skill, determination, and luck.  No matter how much\nskill and determination you have, if you roll a zero for luck, the\noutcome is zero.These quotes about luck are not from founders whose startups failed.\nFounders who fail quickly tend to blame themselves.  Founders who\nsucceed quickly don't usually realize how lucky they were.  It's\nthe ones in the middle who see how important luck is.17. The Value of CommunityA surprising number of founders said what surprised them most about\nstarting a startup was the value of community.  Some meant the\nmicro-community of YC founders:\nThe immense value of the peer group of YC companies, and facing\nsimilar obstacles at similar times.\nwhich shouldn't be that surprising, because that's why it's structured\nthat way.  Others were surprised at the value of the startup community\nin the larger sense:\nHow advantageous it is to live in Silicon Valley, where you\ncan't help but hear all the cutting-edge tech and startup news,\nand run into useful people constantly.\nThe specific thing that surprised them most was the general spirit\nof benevolence:\nOne of the most surprising things I saw was the willingness of\npeople to help us. Even people who had nothing to gain went out\nof their way to help our startup succeed.\nand particularly how it extended all the way to the top:\nThe surprise for me was how accessible important and interesting\npeople are. It's amazing how easily you can reach out to people\nand get immediate feedback.\nThis is one of the reasons I like being part of this world.  Creating\nwealth is not a zero-sum game, so you don't have to stab people in\nthe back to win.18. You Get No RespectThere was one surprise founders mentioned that I'd forgotten about:\nthat outside the startup world, startup founders get no respect.\nIn social settings, I found that I got a lot more respect when\nI said, \"I worked on Microsoft Office\" instead of \"I work at a\nsmall startup you've never heard of called x.\"\nPartly this is because the rest of the world just doesn't get\nstartups, and partly it's yet another consequence of the fact that\nmost good startup ideas seem bad:\nIf you pitch your idea to a random person, 95% of the time\nyou'll find the person instinctively thinks the idea will be a\nflop and you're wasting your time (although they probably won't\nsay this directly).\nUnfortunately this extends even to dating:\nIt surprised me that being a startup founder does not get you\nmore admiration from women.\nI did know about that, but I'd forgotten.19. Things Change as You GrowThe last big surprise founders mentioned is how much things changed\nas they grew.  The biggest change was that you got to program even\nless:\nYour job description as technical founder/CEO is completely\nrewritten every 6-12 months. Less coding, more\nmanaging/planning/company building, hiring, cleaning up messes,\nand generally getting things in place for what needs to happen\na few months from now.\nIn particular, you now have to deal with employees, who often have\ndifferent motivations:\nI knew the founder equation and had been focused on it since I\nknew I wanted to start a startup as a 19 year old.  The employee\nequation is quite different so it took me a while to get it\ndown.\nFortunately, it can become a lot less stressful once you reach\ncruising altitude:\nI'd say 75% of the stress is gone now from when we first started.\nRunning a business is so much more enjoyable now.  We're more\nconfident. We're more patient. We fight less. We sleep more.\nI wish I could say it was this way for every startup that succeeded,\nbut 75% is probably on the high side.The Super-PatternThere were a few other patterns, but these were the biggest.  One's\nfirst thought when looking at them all is to ask if there's a\nsuper-pattern, a pattern to the patterns.I saw it immediately, and so did a YC founder I read the list to.\nThese are supposed to be the surprises, the things I didn't tell\npeople.  What do they all have in common?  They're all things I\ntell people.  If I wrote a new essay with the same outline as this\nthat wasn't summarizing the founders' responses, everyone would say\nI'd run out of ideas and was just repeating myself.What is going on here?When I look at the responses, the common theme is that\nstarting a startup was like I said, but way more so.  People just\ndon't seem to get how different it is till they do it.  Why?  The\nkey to that mystery is to ask, how different from what?  Once you\nphrase it that way, the answer is obvious: from a job.  Everyone's\nmodel of work is a job.  It's completely pervasive.  Even if you've\nnever had a job, your parents probably did, along with practically\nevery other adult you've met.Unconsciously, everyone expects a startup to be like a job, and\nthat explains most of the surprises.  It explains why people are\nsurprised how carefully you have to choose cofounders and how hard\nyou have to work to maintain your relationship.  You don't have to\ndo that with coworkers.  It explains why the ups and downs are\nsurprisingly extreme.  In a job there is much more damping.  But\nit also explains why the good times are surprisingly good: most\npeople can't imagine such freedom.  As you go down the list, almost\nall the surprises are surprising in how much a startup differs from\na job.You probably can't overcome anything so pervasive as the model of\nwork you grew up with.  So the best solution is to be consciously\naware of that.  As you go into a startup, you'll be thinking \"everyone\nsays it's really extreme.\"  Your next thought will probably be \"but\nI can't believe it will be that bad.\"  If you want to avoid being\nsurprised, the next thought after that should be: \"and the reason\nI can't believe it will be that bad is that my model of work is a\njob.\"Notes[1]\nGraduate students might understand it.  In grad school you\nalways feel you should be working on your thesis.  It doesn't end\nevery semester like classes do.[2]\nThe best way for a startup to engage with slow-moving\norganizations is to fork off separate processes to deal with them.\nIt's when they're on the critical path that they kill you—when\nyou depend on closing a deal to move forward.  It's worth taking\nextreme measures to avoid that.[3]\nThis is a variant of Reid Hoffman's principle that if you\naren't embarrassed by what you launch with, you waited too long to\nlaunch.[4]\nThe question to ask about what you've built is not whether it's\ngood, but whether it's good enough to supply the activation energy\nrequired.[5]\nSome VCs seem to understand technology because they actually\ndo, but that's overkill; the defining test is whether you can talk\nabout it well enough to convince limited partners.[6]\nThis is the same phenomenon you see with defense contractors\nor fashion brands.  The dumber the customers, the more effort you\nexpend on the process of selling things to them rather than making\nthe things you sell.Thanks: to Jessica Livingston for reading drafts of this,\nand to all the founders who responded to my email.Related:"},{"title":"What We Look for in Founders","text":"October 2010\n(I wrote this for Forbes, who asked me to write something\nabout the qualities we look for in founders.  In print they had to cut\nthe last item because they didn't have room.)1. DeterminationThis has turned out to be the most important quality in startup\nfounders.  We thought when we started Y Combinator that the most\nimportant quality would be intelligence.  That's the myth in the\nValley. And certainly you don't want founders to be stupid.  But\nas long as you're over a certain threshold of intelligence, what\nmatters most is determination.  You're going to hit a lot of\nobstacles.  You can't be the sort of person who gets demoralized\neasily.Bill Clerico and Rich Aberman of WePay\nare a good example.  They're\ndoing a finance startup, which means endless negotiations with big,\nbureaucratic companies.  When you're starting a startup that depends\non deals with big companies to exist, it often feels like they're\ntrying to ignore you out of existence.  But when Bill Clerico starts\ncalling you, you may as well do what he asks, because he is not\ngoing away.2. FlexibilityYou do not however want the sort of determination implied by phrases\nlike \"don't give up on your dreams.\"  The world of startups is so\nunpredictable that you need to be able to modify your dreams on the\nfly.  The best metaphor I've found for the combination of determination\nand flexibility you need is a running back.\nHe's determined to get\ndownfield, but at any given moment he may need to go sideways or\neven backwards to get there.The current record holder for flexibility may be Daniel Gross of\nGreplin.  He applied to YC with\nsome bad ecommerce idea.  We told\nhim we'd fund him if he did something else.  He thought for a second,\nand said ok.  He then went through two more ideas before settling\non Greplin.  He'd only been working on it for a couple days when\nhe presented to investors at Demo Day, but he got a lot of interest.\nHe always seems to land on his feet.3. ImaginationIntelligence does matter a lot of course.  It seems like the type\nthat matters most is imagination.  It's not so important to be able\nto solve predefined problems quickly as to be able to come up with\nsurprising new ideas.  In the startup world, most good ideas\nseem\nbad initially.  If they were obviously good, someone would already\nbe doing them.  So you need the kind of intelligence that produces\nideas with just the right level of craziness.Airbnb is that kind of idea.\nIn fact, when we funded Airbnb, we\nthought it was too crazy.  We couldn't believe large numbers of\npeople would want to stay in other people's places.  We funded them\nbecause we liked the founders so much.  As soon as we heard they'd\nbeen supporting themselves by selling Obama and McCain branded\nbreakfast cereal, they were in.  And it turned out the idea was on\nthe right side of crazy after all.4. NaughtinessThough the most successful founders are usually good people, they\ntend to have a piratical gleam in their eye.  They're not Goody\nTwo-Shoes type good.  Morally, they care about getting the big\nquestions right, but not about observing proprieties.  That's why\nI'd use the word naughty rather than evil.  They delight in\nbreaking\nrules, but not rules that matter.  This quality may be redundant\nthough; it may be implied by imagination.Sam Altman of Loopt\nis one of the most successful alumni, so we\nasked him what question we could put on the Y Combinator application\nthat would help us discover more people like him.  He said to ask\nabout a time when they'd hacked something to their advantage—hacked in the sense of beating the system, not breaking into\ncomputers.  It has become one of the questions we pay most attention\nto when judging applications.5. FriendshipEmpirically it seems to be hard to start a startup with just\none\nfounder.  Most of the big successes have two or three.  And the\nrelationship between the founders has to be strong.  They must\ngenuinely like one another, and work well together.  Startups do\nto the relationship between the founders what a dog does to a sock:\nif it can be pulled apart, it will be.Emmett Shear and Justin Kan of Justin.tv\nare a good example of close\nfriends who work well together.  They've known each other since\nsecond grade.  They can practically read one another's minds.  I'm\nsure they argue, like all founders, but I have never once sensed\nany unresolved tension between them.Thanks to Jessica Livingston and Chris Steiner for reading drafts of this."},{"title":"What You Can't Say","text":"January 2004\nHave you ever seen an old photo of yourself and\nbeen embarrassed at the way you looked?   Did we actually\ndress like that?  We did.  And we had no idea how\nsilly we looked.\nIt's the nature of fashion to be invisible, in the\nsame way the movement of the earth is invisible to all\nof us riding on it.What scares me is that there are moral fashions too.\nThey're just as arbitrary, and just as invisible to most people.\nBut they're much more dangerous.\nFashion is mistaken for good design;\nmoral fashion is mistaken for good.\nDressing oddly gets you laughed at.  Violating\nmoral fashions can get you fired, ostracized, imprisoned, or\neven killed.If you could travel back in a time machine, one thing\nwould be true no matter where you went: you'd have to watch\nwhat you said.\nOpinions we consider harmless could have\ngotten you in big trouble.\nI've already said at least one thing that would have gotten me in big\ntrouble in most of Europe in the seventeenth century,\nand did get Galileo in big trouble when he said\nit—that the earth moves. [1]\nIt seems to be a constant throughout history: In every\nperiod, people believed things that were just ridiculous,\nand believed them so strongly that you would have gotten in\nterrible trouble for saying otherwise.Is our time any different?\nTo anyone who has read any amount of history, the answer is\nalmost certainly no.   It would be a remarkable coincidence if ours\nwere the first era to get everything just right.It's tantalizing to think we believe\nthings that people in the future will find ridiculous.\nWhat would someone coming back to visit us in a time machine\nhave to be careful not to say?\nThat's what I want to study here.\nBut\nI want to do more than just shock everyone with\nthe heresy du jour.  I want to find general\nrecipes for discovering what you can't say, in any era.The Conformist TestLet's start with a test:\nDo you have any opinions that you would be reluctant to express\nin front of a group of your peers?If the answer is no,\nyou might want to stop and think about that.  If everything\nyou believe is something you're supposed to believe, could\nthat possibly be a coincidence?  Odds are it isn't.  Odds are\nyou just think what you're told.The other alternative would be that you independently considered\nevery question and came up with the exact same answers that\nare now considered acceptable.  That seems unlikely, because\nyou'd also have to make the same mistakes.  Mapmakers\ndeliberately put slight mistakes in their maps so they can\ntell when someone copies them.  If another map has the same\nmistake, that's very convincing evidence.Like every other era in history, our moral map almost certainly\ncontains a few mistakes.  And anyone who makes the same mistakes\nprobably didn't do it by accident.  It would be\nlike someone claiming they had independently decided in\n1972 that bell-bottom jeans were a good idea.If you believe everything you're supposed to now, how can\nyou be sure you wouldn't also have believed everything you\nwere supposed to if you had grown up among the plantation\nowners of the pre-Civil War South, or in Germany in the 1930s—or\namong the Mongols in 1200, for that matter?  Odds are you\nwould have.Back in the era of terms like \"well-adjusted,\" the idea\nseemed to be that there was something wrong with\nyou if you thought things you didn't dare say out loud.\nThis seems backward.  Almost certainly, there\nis something wrong with you if you don't think things\nyou don't dare say out loud.TroubleWhat can't we say?  One way to find these ideas is simply to look\nat things people do say, and get in trouble for.  [2]Of course, we're not just looking for things we can't say.\nWe're looking for things we can't say that are true, or at least\nhave enough chance of being true that the question\nshould remain open.  But many of the\nthings people get in trouble for saying probably\ndo make it over this second, lower threshold.  No one\ngets in trouble for saying\nthat 2 + 2 is 5, or that people in Pittsburgh are ten feet tall.\nSuch obviously false statements might be treated as jokes, or\nat worst as evidence of insanity, but they are not likely to\nmake anyone mad.  The statements that make people mad are\nthe ones they worry might be believed.\nI suspect the statements that make people maddest\nare those they worry might be true.If Galileo had said that people in Padua were ten feet tall,\nhe would have been regarded as a harmless eccentric.  Saying\nthe earth orbited the sun was another matter.  The church knew\nthis would set people thinking.Certainly, as we look back on the past, this rule of thumb works\nwell.  A lot of the statements people got in trouble for seem\nharmless now.  So it's likely that visitors from the\nfuture would agree with at least some of the statements that\nget people in trouble today.  Do we have no Galileos?  Not\nlikely.To find them,\nkeep track of opinions that get\npeople in trouble, and start asking, could this be true?\nOk, it may be heretical (or whatever modern equivalent), but\nmight it also be true?HeresyThis won't get us all the answers, though.  What if no one\nhappens to have gotten in trouble for a particular idea yet?\nWhat if some idea would be so radioactively controversial that\nno one would dare express it in public?   How can we find these too?Another approach is to follow that word, heresy.  In every period\nof history, there seem to have been labels that got applied to\nstatements to shoot them down before anyone had a chance to ask\nif they were true or not.  \"Blasphemy\", \"sacrilege\", and \"heresy\"\nwere such\nlabels for a good part of western history, as in more recent times\n\"indecent\", \"improper\", and \"unamerican\" have been.   By now these\nlabels have lost their sting.  They always do.\nBy now they're mostly used ironically.\nBut in their time,\nthey had real force.The word \"defeatist\", for example, has no particular political\nconnotations now.\nBut in Germany in 1917 it was a weapon, used by Ludendorff in\na purge of those who favored a negotiated peace.\nAt the start of World War II it was used\nextensively by Churchill and his supporters to silence their\nopponents.\nIn 1940, any argument against Churchill's aggressive policy was \"defeatist\".\nWas it right or wrong?  Ideally, no one got far enough to ask\nthat.\nWe have such labels today, of course, quite a lot of them,\nfrom the all-purpose \"inappropriate\" to the dreaded \"divisive.\"\nIn any period, it should be easy to figure out what such labels are,\nsimply by looking at what people call ideas they disagree\nwith besides untrue.  When a politician says his opponent is\nmistaken, that's a straightforward criticism, but when he\nattacks a statement as \"divisive\" or \"racially insensitive\"\ninstead of arguing that it's false, we should start paying\nattention.So another way to figure out which of our taboos future generations\nwill laugh at is to start with the\nlabels.  Take a label—\"sexist\", for example—and try to think\nof some ideas that would be called that.  Then for each ask, might\nthis be true?Just start listing ideas at random?  Yes, because they\nwon't really be random.  The ideas that come to mind first\nwill be the most plausible ones.  They'll be things you've already\nnoticed but didn't let yourself think.In 1989 some clever researchers tracked\nthe eye movements of radiologists as they scanned chest images for\nsigns of lung cancer. [3]  They found that even when the radiologists\nmissed a cancerous lesion, their eyes had usually paused at the site of it.\nPart of their brain knew there was something there; it just\ndidn't percolate all the way up into conscious knowledge.\nI think many interesting heretical thoughts are already mostly\nformed in our minds.  If we turn off our self-censorship\ntemporarily, those will be the first to emerge.Time and SpaceIf we could look into the future it would be obvious which\nof our taboos they'd laugh at.\nWe can't do that, but we can do something almost as good: we can\nlook into the past.  Another way to figure out what we're\ngetting wrong is to look at what used to be acceptable\nand is now unthinkable.Changes between the past and the present sometimes do represent\nprogress.  In a field like physics,\nif we disagree with past generations it's because we're\nright and they're wrong.  But this becomes rapidly less true as\nyou move away from the certainty of the hard sciences.  By the time\nyou get to social questions, many changes are just fashion.\nThe age of consent fluctuates like hemlines.We may imagine that we are a great deal smarter and more virtuous than\npast generations, but the more history you read, the less likely\nthis seems.  People in past times were much like us.  Not heroes,\nnot barbarians.  Whatever their ideas were, they were ideas\nreasonable people could believe.So here is another source of interesting heresies.  Diff present\nideas against those of various past cultures, and see what you\nget. [4]\nSome will be\nshocking by present standards.  Ok, fine; but which might also be true?You don't have to look into the past to find big differences.\nIn our own time, different societies have wildly varying ideas\nof what's ok and what isn't.\nSo you can try diffing other cultures' ideas against ours as well.\n(The best way to do that is to visit them.)\nAny idea that's considered harmless in a significant\npercentage of times and places, and yet is taboo in ours,\nis a  candidate for something we're mistaken\nabout.For example, at the high water mark of political correctness\nin the early 1990s, Harvard distributed to its\nfaculty and staff a brochure saying, among other things, that it\nwas inappropriate to compliment a colleague or student's\nclothes.  No more \"nice shirt.\"\nI think this principle is rare among the world's cultures, past or present.\nThere are probably more where it's considered especially\npolite to compliment someone's clothing than where it's considered\nimproper.\nOdds are this is, in a mild form, an example of one of\nthe taboos a visitor from the future would\nhave to be careful to avoid if he happened to set his time machine for\nCambridge, Massachusetts, 1992. [5]PrigsOf course, if they have time machines in the future they'll\nprobably have a separate reference manual just for Cambridge.\nThis has always been a fussy place, a town of i dotters and\nt crossers, where you're liable to get both your grammar and\nyour ideas corrected in the same conversation.   And that\nsuggests another way to find taboos.  Look for prigs,\nand see what's inside their heads.Kids' heads are repositories of all our taboos.\nIt seems fitting to us that kids' ideas should be bright and clean.\nThe picture we give them of the world is\nnot merely simplified, to suit their developing minds,\nbut sanitized as well, to suit our\nideas of what kids ought to think. [6]You can see this on a small scale in the matter of\ndirty words.  A lot of my friends are starting to have children\nnow, and they're all trying\nnot to use words like\n\"fuck\" and \"shit\" within baby's hearing, lest baby start using\nthese words too.\nBut these\nwords are part of the language, and adults use them all the\ntime.  So parents are giving their kids an inaccurate idea of\nthe language by not using\nthem.  Why do they do this?  Because they don't think it's\nfitting that kids should use the whole language.  We like\nchildren to seem innocent. [7]Most adults, likewise, deliberately give kids a misleading\nview of the world.\nOne of the most obvious\nexamples is Santa Claus.  We think it's cute for little kids to\nbelieve in Santa Claus.  I myself think it's cute for little\nkids to believe in Santa Claus.  But one wonders, do we tell\nthem this stuff for their sake, or for ours?I'm not arguing for or against this idea here.  It is probably\ninevitable that parents should want to dress up their kids'\nminds in cute little baby outfits.  I'll probably do it myself.\nThe important thing for our purposes is that, as a result,\na well brought-up teenage kid's brain is a more\nor less complete collection of all our taboos—and in mint\ncondition, because they're untainted by experience.\nWhatever we think that will later turn out to be ridiculous,\nit's almost certainly inside that head.How do we get at these ideas?  By the following thought experiment.\nImagine a kind of latter-day Conrad character\nwho has worked for a time as a mercenary in Africa, for a time\nas a doctor in Nepal, for a time as the manager of a\nnightclub in Miami.  The specifics don't matter—just\nsomeone who has\nseen a lot.  Now imagine comparing what's inside this guy's head\nwith what's inside the head\nof a well-behaved sixteen year old girl from\nthe suburbs.  What does he think that\nwould shock her?\nHe knows the world; she knows, or at least embodies, present\ntaboos.  Subtract one from the other, and the result is what\nwe can't say.\nMechanismI can think of one more way to figure out what we can't\nsay: to look at how taboos are created.   How do moral\nfashions arise, and why are they adopted?\nIf we can understand this mechanism, we\nmay be able to see it at work in our own time.Moral fashions don't seem to be created the way ordinary\nfashions are.  Ordinary fashions seem to arise by accident when\neveryone imitates the whim of some influential person.\nThe fashion for broad-toed shoes in\nlate fifteenth century Europe began because Charles VIII of\nFrance had six toes on one foot.  The fashion for the\nname Gary began when the actor Frank Cooper adopted the name\nof a tough mill town in Indiana.  Moral fashions more often\nseem to be created deliberately.  When there's something we\ncan't say, it's often because some group doesn't want us to.The prohibition will be strongest when the group is nervous.\nThe irony of Galileo's situation was that he got in trouble\nfor repeating Copernicus's ideas.  Copernicus himself didn't.\nIn fact, Copernicus was a canon of a cathedral, and dedicated his\nbook to the pope.  But by Galileo's time the church was in\nthe throes of the Counter-Reformation and was much more\nworried about unorthodox ideas.To launch a taboo, a group has to be poised halfway between\nweakness and power.  A confident group doesn't need taboos\nto protect it.  It's not considered improper to\nmake disparaging remarks about Americans, or the English.\nAnd yet a group has to be powerful enough to enforce a\ntaboo.  Coprophiles, as of this writing, don't seem to be\nnumerous or energetic enough to have had their\ninterests promoted to a lifestyle.I suspect the biggest source of moral taboos will turn out to\nbe power struggles in which one side only barely has\nthe upper hand.  That's where you'll find a group\npowerful enough to enforce taboos, but weak enough to need them.Most struggles, whatever they're really about, will be cast\nas struggles between competing ideas.\nThe English Reformation was at bottom a struggle for wealth and power,\nbut it ended up being\ncast as a struggle to preserve the souls\nof Englishmen from the corrupting influence of Rome.\nIt's easier to get people to fight for an idea.\nAnd whichever side wins, their\nideas will also be considered to have triumphed, as if God\nwanted to signal his agreement by selecting that side as the victor.We often like to think of World War II as a triumph\nof freedom over totalitarianism.  We conveniently forget that\nthe Soviet Union was also one of the winners.I'm not saying that struggles are never about ideas,\njust that they will always be made to seem to be about\nideas, whether they are or not.   And just as there is nothing\nso unfashionable as the last, discarded fashion, there is\nnothing so wrong as the principles of the most recently\ndefeated opponent.\nRepresentational art is only now\nrecovering from the approval of both Hitler and Stalin. [8]Although moral fashions tend to arise from different sources\nthan fashions in clothing, the mechanism of their adoption seems\nmuch the same.  The early adopters will be driven by ambition:\nself-consciously cool people who want to distinguish themselves\nfrom the common herd.  As the fashion becomes established they'll\nbe joined by a second, much larger group, driven by fear. [9] This\nsecond group adopt the fashion not because they want to stand\nout but because they are afraid of standing out.So if you want to figure out what we can't say, look at the\nmachinery of fashion and try to predict what it would make\nunsayable.  What groups are powerful but nervous, and what\nideas would they like to suppress?  What ideas were tarnished by\nassociation when they ended up on the losing side of a recent\nstruggle?  If a self-consciously cool person wanted to differentiate\nhimself from preceding fashions (e.g. from his parents),\nwhich of their ideas would he tend to reject?\nWhat are conventional-minded people afraid of saying?This technique won't find us all the things we can't say.\nI can think of some that aren't the result of\nany recent struggle. Many of our taboos are rooted\ndeep in the past.  But this approach, combined with the\npreceding four, will turn up a good number of unthinkable\nideas.WhySome would ask, why would one want to do this?  Why deliberately\ngo poking around among nasty, disreputable ideas?  Why look\nunder rocks?I do it, first of all, for the same reason I did look under\nrocks as a kid: plain curiosity.  And I'm especially curious about\nanything that's forbidden.  Let me see and decide for myself.Second, I do it because I don't like the idea of being mistaken.\nIf, like other eras, we believe things that will later seem ridiculous,\nI want to know what they are so that I, at least, can avoid\nbelieving them.Third, I do it because it's good for the brain.  To do good work\nyou need a brain that can go anywhere.  And you especially need a\nbrain that's in the habit of going where it's not supposed to.Great work tends to grow out of ideas\nthat others have overlooked, and no idea is so overlooked as one that's\nunthinkable.\nNatural selection, for example.\nIt's so simple.  Why didn't anyone think of it before?  Well,\nthat is all too obvious.  Darwin himself was careful to tiptoe\naround the implications of his theory.  He wanted to spend his\ntime thinking about biology, not arguing with people who accused\nhim of being an atheist.In the sciences, especially, it's a great advantage to be able to\nquestion assumptions.\nThe m.o. of scientists, or at least of the\ngood ones, is precisely that: look for places where\nconventional wisdom is broken, and then try to pry apart the\ncracks and see what's underneath.  That's where new theories come\nfrom.A good scientist, in other words, does not merely ignore\nconventional wisdom, but makes a special effort to break it.\nScientists go looking for trouble.\nThis should be the m.o. of any scholar, but\nscientists seem much more willing to look under rocks. [10]Why?  It could\nbe that the scientists are simply smarter; most physicists could,\nif necessary, make it through a PhD program in French literature,\nbut few professors of French literature could make it through\na PhD program in physics.  Or it could be because it's clearer\nin the sciences whether theories are true or false, and this\nmakes scientists bolder.  (Or it could be that, because it's\nclearer in the sciences whether theories are true or false, you\nhave to be smart to get jobs as a scientist, rather than just a\ngood politician.)Whatever the reason, there seems a clear correlation between\nintelligence and willingness to consider shocking ideas.\nThis isn't just because smart people actively work to find holes in\nconventional thinking.  I think conventions also have\nless hold over them to start with.\nYou can see that in the\nway they dress.It's not only in the sciences that heresy pays off.\nIn any competitive field, you can\nwin big by seeing things that others daren't.\nAnd in every\nfield there are probably heresies few dare utter.  Within\nthe US car industry there is a lot of hand-wringing now\nabout declining market share.\nYet the cause is so obvious that any observant outsider could\nexplain it in a second: they make bad cars.  And they have for\nso long that by now the US car brands are antibrands—something\nyou'd buy a car despite, not because of.  Cadillac stopped\nbeing the Cadillac of cars in about 1970.  And yet I suspect\nno one dares say this. [11]  Otherwise these companies would have\ntried to fix the problem.Training yourself to think unthinkable thoughts has advantages\nbeyond the thoughts themselves.  It's like stretching.\nWhen you stretch before running, you put your body into positions\nmuch more extreme\nthan any it will assume during the run.\nIf you can think things\nso outside the box that they'd make people's hair stand on end,\nyou'll have no trouble with the small trips outside the box that\npeople call innovative.Pensieri StrettiWhen you find something you can't say, what do you do with it?\nMy advice is, don't say it.   Or at least, pick your battles.Suppose in the future there is a movement to ban\nthe color yellow. Proposals to paint anything yellow are\ndenounced as \"yellowist\", as is anyone suspected of liking the\ncolor.  People who like orange are tolerated but viewed with\nsuspicion.  Suppose you realize there is nothing\nwrong with yellow.  If you go around saying this, you'll be\ndenounced as a yellowist too, and you'll find yourself having a\nlot of arguments with anti-yellowists.\nIf your aim in life is to rehabilitate the color yellow, that may\nbe what you want.\nBut if you're mostly interested in\nother questions, being labelled as a yellowist will just be\na distraction.  Argue with idiots, and you become an idiot.The most important thing is to be able to think what you\nwant, not to say what you want.  And if you feel you have to\nsay everything you think, it may inhibit you from thinking\nimproper thoughts.  I think it's better to follow the opposite\npolicy.  Draw a sharp line between your thoughts and your\nspeech.  Inside your head, anything is allowed.\nWithin my head I make a point of encouraging the most outrageous\nthoughts I can imagine.\nBut, as in\na secret society, nothing that happens within the building\nshould be told to outsiders.  The first rule of Fight\nClub is, you do not talk about Fight Club.When Milton was going to visit Italy in the 1630s,\nSir Henry Wootton, who had been ambassador to Venice, told him\nhis motto should be\n\"i pensieri stretti & il viso sciolto.\"  Closed thoughts\nand an open face.  Smile at everyone, and don't tell them\nwhat you're thinking.   This was wise advice.\nMilton was an argumentative fellow, and the Inquisition\nwas a bit restive at that time.  But I think the difference\nbetween Milton's situation and ours is only a matter of\ndegree.\nEvery era has its heresies, and if you don't get imprisoned for them you\nwill at least get in enough trouble that it becomes a complete\ndistraction.I admit it seems cowardly to keep quiet.\nWhen I read about the harassment to which\nthe Scientologists subject their critics [12], or that pro-Israel groups\nare \"compiling dossiers\" on those who speak out against Israeli\nhuman rights abuses [13], or about people being sued for\nviolating the DMCA [14], part of me wants\nto say, \"All right, you bastards, bring it on.\"\nThe problem is, there are so many things you can't say.\nIf you said them all you'd\nhave no time left for your real work.\nYou'd have to turn into Noam Chomsky.  [15]The trouble with keeping your thoughts secret, though,\nis that you lose the advantages of discussion.  Talking\nabout an idea leads to more ideas.\nSo the optimal plan, if you can manage it,\nis to have a few trusted\nfriends you can speak openly to.  This is not just a\nway to develop ideas; it's also a good\nrule of thumb for choosing friends.  The people\nyou can say heretical things to without getting jumped on\nare also the most interesting to know.Viso Sciolto?I don't think we need\nthe viso sciolto so much as the pensieri stretti.\nPerhaps the best policy is to make it plain that you don't\nagree with whatever zealotry is current in your time, but\nnot to be too specific about what you disagree with.  Zealots\nwill try to draw you out, but you don't have to answer them.\nIf they try to force you to treat a question on their\nterms by asking \"are you with us or against us?\" you can\nalways just answer \"neither\".Better still, answer \"I haven't decided.\"\nThat's what Larry Summers\ndid when a group tried to put\nhim in this position.  Explaining himself later, he said\n\"I don't do litmus tests.\" [16]\nA lot of the\nquestions people get hot about are actually quite complicated.\nThere is no prize for getting the answer quickly.If the anti-yellowists seem to be getting out of hand and\nyou want to fight back, there are ways\nto do it without getting yourself accused of being a\nyellowist.  Like skirmishers in\nan ancient army, you want to avoid directly engaging the\nmain body of the enemy's troops.  Better to harass them\nwith arrows from a distance.One way to do this is to ratchet the debate up one level of\nabstraction.\nIf you argue against censorship in general, you can avoid being\naccused of whatever heresy is contained\nin the book or film that someone is trying to censor.\nYou can attack labels with meta-labels: labels that refer\nto the use of labels to prevent discussion.\nThe spread of the term \"political correctness\" meant the beginning of\nthe end of political correctness, because it enabled one to\nattack the phenomenon as a whole without being accused of any\nof the specific heresies it sought to suppress.Another way to counterattack is with metaphor.  Arthur Miller\nundermined the House Un-American Activities Committee\nby writing a play, \"The Crucible,\" about the Salem witch trials.\nHe never referred directly to the committee and so gave them\nno way to reply.\nWhat could HUAC do, defend the Salem witch trials?  And yet\nMiller's metaphor stuck so well that to this day the activities\nof the committee are often described as a \"witch-hunt.\"Best of all, probably, is humor.  Zealots, whatever their\ncause, invariably lack a sense of humor.\nThey can't reply in kind to jokes.\nThey're as unhappy on the territory of\nhumor as a mounted knight on a skating rink.\nVictorian prudishness, for example, seems to have been defeated\nmainly by treating it as a joke.  Likewise its reincarnation as\npolitical correctness.\n\"I am glad that I\nmanaged to write 'The Crucible,'\" Arthur Miller wrote,\n\"but looking back I have often wished I'd\nhad the temperament to do an absurd comedy, which is what the\nsituation deserved.\" [17]ABQA Dutch friend says\nI should use Holland as an example of a tolerant society.\nIt's true they have a long tradition of\ncomparative open-mindedness.  For centuries the low countries were the place\nto go to say things you couldn't say anywhere else,\nand this helped to make the region a center of scholarship and industry\n(which have been closely tied for longer than most people realize).\nDescartes, though claimed by the French, did much of his thinking in\nHolland.And yet, I wonder.  The Dutch seem to live their lives up to their\nnecks in rules and regulations.  There's so much you can't do there;\nis there really nothing\nyou can't say?Certainly the fact that they value open-mindedness is no guarantee.\nWho thinks they're not open-minded?  Our hypothetical prim miss from\nthe suburbs thinks she's open-minded.  Hasn't she been\ntaught to be?  Ask anyone, and they'll say the same thing: they're\npretty open-minded, though they draw the line at things that are really\nwrong.  (Some tribes\nmay avoid \"wrong\" as\njudgemental, and may instead use a more neutral sounding euphemism\nlike \"negative\" or \"destructive\".)When people are bad at math, they know it, because they get the\nwrong answers on tests.  But when people are bad at open-mindedness\nthey don't know it.  In fact they tend to think the opposite.\nRemember, it's the nature of fashion to be invisible.  It wouldn't\nwork otherwise.  Fashion doesn't\nseem like fashion to someone in the grip of it.  It just seems like\nthe right thing to do.  It's only by looking from a distance that\nwe see oscillations in people's idea of the right thing to do, and\ncan identify them as fashions.Time gives us such distance for free.  Indeed, the arrival of new\nfashions makes old fashions easy to see, because they\nseem so ridiculous by contrast.  From one end of a pendulum's\nswing, the other end seems especially far away.To see fashion in your own time, though, requires a conscious effort.\nWithout time to give you distance, you have to create distance yourself.\nInstead of being part of the mob, stand\nas far away from it as you can and watch what it's\ndoing.  And pay especially close attention whenever an idea is being\nsuppressed.  Web filters for children and employees often ban\nsites containing pornography, violence, and hate speech.  What\ncounts as pornography and violence?  And what, exactly, is\n\"hate speech?\" This sounds like a phrase out of 1984.Labels like that are probably the biggest external clue.\nIf a statement is false,\nthat's the worst thing you can say about it.  You don't\nneed to say that it's heretical.  And if it isn't false, it\nshouldn't be suppressed.  So when you see statements being\nattacked as x-ist or y-ic (substitute your current values of\nx and y), whether in 1630 or 2030, that's a sure sign that\nsomething is wrong.  When you hear such labels being used,\nask why.Especially if you hear yourself using them.  It's not just\nthe mob you need to learn to watch from a distance.  You need to be\nable to watch your own thoughts from a distance.  That's not\na radical idea, by the way; it's the main difference between\nchildren and adults.  When a child gets angry because he's\ntired, he doesn't know what's happening.  An adult can\ndistance himself enough from the\nsituation to say \"never mind, I'm just tired.\"  I don't\nsee why one couldn't, by a similar process, learn to\nrecognize and discount the effects of moral fashions.You have to take that extra step if you want to think clearly.\nBut it's harder, because now you're working against social customs\ninstead of with them.  Everyone encourages you to grow up to the\npoint where you can discount your own bad moods.  Few encourage\nyou to continue to the point where you can discount society's bad\nmoods.How can you see the wave, when you're the water?  Always be\nquestioning.  That's the only defence.  What can't you say?  And why?NotesThanks to Sarah Harlin, Trevor Blackwell, Jessica Livingston,\nRobert Morris, Eric Raymond and Bob van der Zwaan for reading drafts of this\nessay, and to Lisa Randall, Jackie McDonough, Ryan Stanley and Joel Rainey\nfor conversations about heresy.\nNeedless to say they bear no blame for opinions\nexpressed in it, and especially for opinions not\nexpressed in it."},{"title":"What You'll Wish You'd Known","text":"January 2005(I wrote this talk for a\nhigh school.  I never actually\ngave it, because the school authorities vetoed the plan to invite me.)When I said I was speaking at a high school, my friends were curious.\nWhat will you say to high school students?  So I asked them, what\ndo you wish someone had told you in high school?  Their answers\nwere remarkably similar.  So I'm going to tell you what we all wish\nsomeone had told us.I'll start by telling you something you don't have to know in high\nschool: what you want to do with your life.  People are always\nasking you this, so you think you're supposed to have an answer.\nBut adults ask this mainly as a conversation starter.   They want\nto know what sort of person you are, and this question is just to\nget you talking.  They ask it the way you might poke a hermit crab\nin a tide pool, to see what it does.If I were back in high school and someone asked about my plans, I'd\nsay that my first priority was to learn what the options were.  You\ndon't need to be in a rush to choose your life's work.  What you\nneed to do is discover what you like.  You have to work on stuff\nyou like if you want to be good at what you do.It might seem that nothing would be easier than deciding what you\nlike, but it turns out to be hard, partly because it's hard to get\nan accurate picture of most jobs.  Being a doctor is not the way\nit's portrayed on TV.  Fortunately you can also watch real doctors,\nby volunteering in hospitals. [1]But there are other jobs you can't learn about, because no one is\ndoing them yet.  Most of the work I've done in the last ten years\ndidn't exist when I was in high school.  The world changes fast,\nand the rate at which it changes is itself speeding up.  In such a\nworld it's not a good idea to have fixed plans.And yet every May, speakers all over the country fire up the Standard\nGraduation Speech, the theme of which is: don't give up on your\ndreams.  I know what they mean, but this is a bad way to put it,\nbecause it implies you're supposed to be bound by some plan you\nmade early on.  The computer world has a name for this: premature\noptimization.  And it is synonymous with disaster.  These speakers\nwould do better to say simply, don't give up.What they really mean is, don't get demoralized.  Don't think that\nyou can't do what other people can.   And I agree you shouldn't\nunderestimate your potential.  People who've done great things tend\nto seem as if they were a race apart.  And most biographies only\nexaggerate this illusion, partly due to the worshipful attitude\nbiographers inevitably sink into, and partly because, knowing how\nthe story ends, they can't help streamlining the plot till it seems\nlike the subject's life was a matter of destiny, the mere unfolding\nof some innate genius.   In fact I suspect if you had the sixteen\nyear old Shakespeare or Einstein in school with you, they'd seem\nimpressive, but not totally unlike your other friends.Which is an uncomfortable thought.  If they were just like us, then\nthey had to work very hard to do what they did.  And that's one\nreason we like to believe in genius.  It gives us an excuse for\nbeing lazy.  If these guys were able to do what they did only because\nof some magic Shakespeareness or Einsteinness, then it's not our\nfault if we can't do something as good.I'm not saying there's no such thing as genius.  But if you're\ntrying to choose between two theories and one gives you an excuse\nfor being lazy, the other one is probably right.So far we've cut the Standard Graduation Speech down from \"don't\ngive up on your dreams\" to \"what someone else can do, you can do.\"\nBut it needs to be cut still further.  There is some variation\nin natural ability.  Most people overestimate its role, but it does\nexist.  If I were talking to a guy four feet tall whose ambition\nwas to play in the NBA, I'd feel pretty stupid saying, you can\ndo anything if you really try. [2]We need to cut the Standard Graduation Speech down to, \"what someone\nelse with your abilities can do, you can do; and don't underestimate\nyour abilities.\"  But as so often happens, the closer you get to\nthe truth, the messier your sentence gets.  We've taken a nice,\nneat (but wrong) slogan, and churned it up like a mud puddle.  It\ndoesn't make a very good speech anymore.  But worse still, it doesn't\ntell you what to do anymore.  Someone with your abilities?  What\nare your abilities?UpwindI think the solution is to work in the other direction.  Instead\nof working back from a goal, work forward from promising situations.\nThis is what most successful people actually do anyway.In the graduation-speech approach, you decide where you want to be\nin twenty years, and then ask: what should I do now to get there?\nI propose instead that you don't commit to anything in the future,\nbut just look at the options available now, and choose those that\nwill give you the most promising range of options afterward.It's not so important what you work on, so long as you're not wasting\nyour time.  Work on things that interest you and increase your\noptions, and worry later about which you'll take.Suppose you're a college freshman deciding whether to major in math\nor economics.  Well, math will give you more options: you can go into\nalmost any field from math.  If you major in math it will be easy\nto get into grad school in economics, but if you major in economics\nit will be hard to get into grad school in math.Flying a glider is a good metaphor here.  Because a glider doesn't\nhave an engine, you can't fly into the wind without losing a lot\nof altitude.  If you let yourself get far downwind of good places\nto land, your options narrow uncomfortably.  As a rule you want to\nstay upwind.  So I propose that as a replacement for \"don't give\nup on your dreams.\"  Stay upwind.How do you do that, though?  Even if math is upwind of economics,\nhow are you supposed to know that as a high school student?Well, you don't, and that's what you need to find out.   Look for smart people\nand hard problems.  Smart people tend to clump together, and if you\ncan find such a clump, it's probably worthwhile to join it.  But\nit's not straightforward to find these, because there is a lot of\nfaking going on.To a newly arrived undergraduate, all university departments look\nmuch the same.  The professors all seem forbiddingly intellectual\nand publish papers unintelligible to outsiders.  But while in some\nfields the papers are unintelligible because they're full of hard\nideas, in others they're deliberately written in an obscure way to\nseem as if they're saying something important.  This may seem a\nscandalous proposition, but it has been experimentally verified,\nin the famous Social Text affair.  Suspecting that the papers\npublished by literary theorists were often just intellectual-sounding\nnonsense, a physicist deliberately wrote a paper full of\nintellectual-sounding nonsense, and submitted it to a literary\ntheory journal, which published it.The best protection is always to be working on hard problems.\nWriting novels is hard.  Reading novels isn't.\nHard means worry: if you're not worrying that\nsomething you're making will come out badly, or that you won't be\nable to understand something you're studying, then it isn't hard\nenough.  There has to be suspense.Well, this seems a grim view of the world, you may think.  What I'm\ntelling you is that you should worry?  Yes, but it's not as bad as\nit sounds.  It's exhilarating to overcome worries.  You don't see\nfaces much happier than people winning gold medals.  And you know\nwhy they're so happy?  Relief.I'm not saying this is the only way to be happy.  Just that some\nkinds of worry are not as bad as they sound.AmbitionIn practice, \"stay upwind\" reduces to \"work on hard problems.\"  And\nyou can start today.  I wish I'd grasped that in\nhigh school.Most people like to be good at what they do.  In the so-called real\nworld this need is a powerful force.  But high school students\nrarely benefit from it, because they're given a fake thing to do.\nWhen I was in high school, I let myself believe that my job was to\nbe a high school student.  And so I let my need to be good at what\nI did be satisfied by merely doing well in school.If you'd asked me in high school what the difference was between\nhigh school kids and adults, I'd have said it was that adults had\nto earn a living.  Wrong.  It's that adults take responsibility for\nthemselves.  Making a living is only a small part of it.\nFar more important is to take intellectual responsibility for oneself.If I had to go through high school again, I'd treat it like a day\njob.  I don't mean that I'd slack in school.  Working at something\nas a day job doesn't mean doing it badly.  It means not being defined\nby it.  I mean I wouldn't think of myself as a high school student,\njust as a musician with a day job as a waiter doesn't think of\nhimself as a waiter. [3]   And when I wasn't working at my day job\nI'd start trying to do real work.When I ask people what they regret most about high school, they\nnearly all say the same thing: that they wasted so much time.  If\nyou're wondering what you're doing now that you'll regret most\nlater, that's probably it. [4]Some people say this is inevitable-- that high school students\naren't capable of getting anything done yet.  But I don't think\nthis is true.  And the proof is that you're bored.  You probably\nweren't bored when you were eight.  When you're eight it's called\n\"playing\" instead of \"hanging out,\" but it's the same thing.  And\nwhen I was eight, I was rarely bored.  Give me a back yard and a\nfew other kids and I could play all day.The reason this got stale in middle school and high school, I now\nrealize, is that I was ready for something else.  Childhood was\ngetting old.I'm not saying you shouldn't hang out with your friends-- that you\nshould all become humorless little robots who do nothing but work.\nHanging out with friends is like chocolate cake.  You enjoy it more\nif you eat it occasionally than if you eat nothing but chocolate\ncake for every meal.  No matter how much you like chocolate cake,\nyou'll be pretty queasy after the third meal of it.  And that's\nwhat the malaise one feels in high school is: mental queasiness.\n[5]You may be thinking, we have to do more than get good grades.  We\nhave to have extracurricular activities.  But you know\nperfectly well how bogus most of these are.  Collecting donations\nfor a charity is an admirable thing to do, but it's not hard.\nIt's not getting something done.  What I mean by getting something\ndone is learning how to write well, or how to program computers,\nor what life was really like in preindustrial societies, or how to\ndraw the human face from life.  This sort of thing rarely translates\ninto a line item on a college application.CorruptionIt's dangerous to design your life around getting into college,\nbecause the people you have to impress to get into college are not\na very discerning audience.  At most colleges, it's not the professors\nwho decide whether you get in, but admissions officers, and they\nare nowhere near as smart.  They're the NCOs of the intellectual\nworld. They can't tell how smart you are.\nThe mere existence of prep schools is proof of that.Few parents\nwould pay so much for their kids to go to a school that didn't\nimprove their admissions prospects.  Prep schools openly say this\nis one of their aims.  But what that means, if you stop to\nthink about it, is that they can\nhack the admissions process: that they can take the very same kid\nand make him seem a more appealing candidate than he would if he\nwent to the local public school. [6]Right now most of you feel your job in life is to be a promising\ncollege applicant.  But that means you're designing your life to\nsatisfy a process so mindless that there's a whole industry devoted\nto subverting it.  No wonder you become cynical.  The malaise you\nfeel is the same that a producer of reality TV shows or a tobacco\nindustry executive feels.  And you don't even get paid a lot.So what do you do?  What you should not do is rebel.  That's what\nI did, and it was a mistake.  I didn't realize exactly what was\nhappening to us, but I smelled a major rat.  And so I just gave up.\nObviously the world sucked, so why bother?When I discovered that one of our teachers was herself using Cliff's\nNotes, it seemed par for the course.  Surely it meant nothing to\nget a good grade in such a class.In retrospect this was stupid.  It was like someone getting fouled\nin a soccer game and saying, hey, you fouled me, that's against the\nrules, and walking off the field in indignation.  Fouls happen.\nThe thing to do when you get fouled is not to lose your cool.  Just\nkeep playing.  By putting you in this situation, society has fouled you.   Yes,\nas you suspect, a lot of the stuff you learn in your classes is\ncrap.  And yes, as you suspect, the college admissions process is\nlargely a charade.  But like many fouls, this one was unintentional.\n[7] So just keep playing.Rebellion is almost as stupid as obedience.  In either case you let\nyourself be defined by what they tell you to do.  The best plan, I\nthink, is to step onto an orthogonal vector.  Don't just do what\nthey tell you, and don't just refuse to.  Instead treat school as\na day job.  As day jobs go, it's pretty sweet.  You're done at 3\no'clock, and you can even work on your own stuff while you're there.CuriosityAnd what's your real job supposed to be?  Unless you're Mozart,\nyour first task is to figure that out.  What are the great things\nto work on?  Where are the imaginative people?  And most importantly,\nwhat are you interested in?  The word \"aptitude\" is misleading,\nbecause it implies something innate.  The most powerful sort of\naptitude is a consuming interest in some question, and such interests\nare often acquired tastes.A distorted version of this idea has filtered into popular culture\nunder the name \"passion.\"  I recently saw an ad for waiters saying\nthey wanted people with a \"passion for service.\"  The real thing\nis not something one could have for waiting on tables.  And passion\nis a bad word for it. A better name would be curiosity.Kids are curious, but the curiosity I mean has a different shape from kid\ncuriosity.  Kid curiosity is broad and shallow; they ask why at\nrandom about everything.  In most adults this curiosity dries up\nentirely.  It has to: you can't get anything done if you're always\nasking why about everything.  But in ambitious adults, instead of\ndrying up, curiosity becomes narrow and deep.  The mud flat morphs\ninto a well.Curiosity turns work into play.  For Einstein, relativity wasn't a\nbook full of hard stuff he had to learn for an exam.  It was a\nmystery he was trying to solve.  So it probably felt like less work\nto him to invent it than it would seem to someone now to learn it\nin a class.One of the most dangerous illusions you get from school is the idea\nthat doing great things requires a lot of discipline.  Most subjects\nare taught in such a boring way that it's only by discipline that\nyou can flog yourself through them.  So I was surprised when, early\nin college, I read a quote by Wittgenstein saying that he had no\nself-discipline and had never been able to deny himself anything,\nnot even a cup of coffee.Now I know a number of people who do great work, and it's the same\nwith all of them.  They have little discipline.  They're all terrible\nprocrastinators and find it almost impossible to make themselves\ndo anything they're not interested in.  One still hasn't sent out\nhis half of the thank-you notes from his wedding, four years ago.\nAnother has 26,000 emails in her inbox.I'm not saying you can get away with zero self-discipline.  You\nprobably need about the amount you need to go running.  I'm often\nreluctant to go running, but once I do, I enjoy it.  And if I don't\nrun for several days, I feel ill.  It's the same with people who\ndo great things.  They know they'll feel bad if they don't work,\nand they have enough discipline to get themselves to their desks\nto start working.  But once they get started, interest takes over,\nand discipline is no longer necessary.Do you think Shakespeare was gritting his teeth and diligently\ntrying to write Great Literature?  Of course not.  He was having\nfun.  That's why he's so good.If you want to do good work, what you need is a great curiosity\nabout a promising question.   The critical moment for Einstein\nwas when he looked at Maxwell's equations and said, what the hell\nis going on here?It can take years to zero in on a productive question, because it\ncan take years to figure out what a subject is really about.  To\ntake an extreme example, consider math.  Most people think they\nhate math, but the boring stuff you do in school under the name\n\"mathematics\" is not at all like what mathematicians do.The great mathematician G. H.  Hardy said he didn't like math in\nhigh school either.  He only took it up because he was better at\nit than the other students.  Only later did he realize math was\ninteresting-- only later did he start to ask questions instead of\nmerely answering them correctly.When a friend of mine used to grumble because he had to write a\npaper for school, his mother would tell him: find a way to make it\ninteresting.  That's what you need to do: find a question that makes\nthe world interesting.  People who do great things look at the same\nworld everyone else does, but notice some odd detail that's\ncompellingly mysterious.And not only in intellectual matters.  Henry Ford's great question\nwas, why do cars have to be a luxury item?  What would happen if\nyou treated them as a commodity?  Franz Beckenbauer's was, in effect,\nwhy does everyone have to stay in his position?  Why can't defenders\nscore goals too?NowIf it takes years to articulate great questions, what do you do now,\nat sixteen?  Work toward finding one.  Great questions don't appear\nsuddenly.  They gradually congeal in your head.  And what makes\nthem congeal is experience.  So the way to find great questions is\nnot to search for them-- not to wander about thinking, what great\ndiscovery shall I make?  You can't answer that; if you could, you'd\nhave made it.The way to get a big idea to appear in your head is not to hunt for\nbig ideas, but to put in a lot of time on work that interests you,\nand in the process keep your mind open enough that a big idea can\ntake roost.  Einstein, Ford, and Beckenbauer all used this recipe.\nThey all knew their work like a piano player knows the keys.  So\nwhen something seemed amiss to them, they had the confidence to\nnotice it.Put in time how and on what?  Just pick a project that seems\ninteresting: to master some chunk of material, or to make something,\nor to answer some question.  Choose a project that will take less\nthan a month, and make it something you have the means to finish.\nDo something hard enough to stretch you, but only just, especially\nat first.  If you're deciding between two projects, choose whichever\nseems most fun. If one blows up in your face, start another.  Repeat\ntill, like an internal combustion engine, the process becomes\nself-sustaining, and each project generates the next one.  (This\ncould take years.)It may be just as well not to do a project \"for school,\" if that\nwill restrict you or make it seem like work.  Involve your friends\nif you want, but not too many, and only if they're not flakes.\nFriends offer moral support (few startups are started by one person),\nbut secrecy also has its advantages.  There's something pleasing\nabout a secret project.  And you can take more risks, because no\none will know if you fail.Don't worry if a project doesn't seem to be on the path to some\ngoal you're supposed to have. Paths can bend a lot more than you\nthink.  So let the path grow out the project.  The most important\nthing is to be excited about it, because it's by doing that you\nlearn.Don't disregard unseemly motivations.  One of the most powerful is\nthe desire to be better than other people at something.  Hardy said\nthat's what got him started, and I think the only unusual thing\nabout him is that he admitted it.  Another powerful motivator is\nthe desire to do, or know, things you're not supposed to.  Closely\nrelated is the desire to do something audacious.  Sixteen year olds\naren't supposed to write novels.  So if you try, anything you achieve\nis on the plus side of the ledger; if you fail utterly, you're doing\nno worse than expectations.  [8]Beware of bad models.  Especially when they excuse laziness.  When\nI was in high school I used to write \"existentialist\" short stories\nlike ones I'd seen by famous writers.  My stories didn't have a lot\nof plot, but they were very deep.  And they were less work to write\nthan entertaining ones would have been.  I should have known that\nwas a danger sign.  And in fact I found my stories pretty boring;\nwhat excited me was the idea of writing serious, intellectual stuff\nlike the famous writers.Now I have enough experience to realize that those famous writers\nactually sucked.  Plenty of famous people do; in the short term,\nthe quality of one's work is only a small component of fame.\nI should have been less worried about doing something\nthat seemed cool, and just done something I liked.  That's the\nactual road to coolness anyway.A key ingredient in many projects, almost a project on its own, is\nto find good books.  Most books are bad.  Nearly all textbooks are\nbad. [9]  So don't assume a subject is to be learned from whatever\nbook on it happens to be closest.  You have to search actively for\nthe tiny number of good books.The important thing is to get out there and do stuff.  Instead of\nwaiting to be taught, go out and learn.Your life doesn't have to be shaped by admissions officers.  It\ncould be shaped by your own curiosity.  It is for all ambitious\nadults.  And you don't have to wait to start.  In fact, you don't\nhave to wait to be an adult.  There's no switch inside you that\nmagically flips when you turn a certain age or graduate from some\ninstitution.  You start being an adult when you decide to take\nresponsibility for your life.  You can do that at any age.  [10]This may sound like bullshit.  I'm just a minor, you may think, I\nhave no money, I have to live at home, I have to do what adults\ntell me all day long.  Well, most adults labor under restrictions\njust as cumbersome, and they manage to get things done.  If you\nthink it's restrictive being a kid, imagine having kids.The only real difference between adults and high school kids is\nthat adults realize they need to get things done, and high school\nkids don't.  That realization hits most people around 23.  But I'm\nletting you in on the secret early.  So get to work.  Maybe you can\nbe the first generation whose greatest regret from high school isn't\nhow much time you wasted.Notes[1] A doctor friend warns that even this can give an inaccurate\npicture. \"Who knew how much time it would take up, how little\nautonomy one would have for endless years of training, and how\nunbelievably annoying it is to carry a beeper?\"[2] His best bet would probably be to become dictator and intimidate\nthe NBA into letting him play.  So far the closest anyone has come\nis Secretary of Labor.[3] A day job is one you take to pay the bills so you can do what\nyou really want, like play in a band, or invent relativity.Treating high school as a day job might actually make it easier for\nsome students to get good grades.  If you treat your classes\nas a game, you won't be demoralized if they seem pointless.However bad your classes, you need to get good grades in them to\nget into a decent college.  And that is worth doing, because\nuniversities are where a lot of the clumps of smart people are these\ndays.[4] The second biggest regret was caring so much about unimportant\nthings.  And especially about what other people thought of them.I think what they really mean, in the latter case, is caring what\nrandom people thought of them.  Adults care just as much what other\npeople think, but they get to be more selective about the other\npeople.I have about thirty friends whose opinions I care about,\nand the opinion of the rest of the world barely affects me.  The\nproblem in high school is that your peers are chosen for you by\naccidents of age and geography, rather than by you based on respect\nfor their judgement.[5] The key to wasting time is distraction.  Without distractions\nit's too obvious to your brain that you're not doing anything with\nit, and you start to feel uncomfortable.  If you want to measure\nhow dependent you've become on distractions, try this experiment:\nset aside a chunk of time on a weekend and sit alone and think.\nYou can have a notebook to write your thoughts down in, but nothing\nelse: no friends, TV, music, phone, IM, email, Web, games, books,\nnewspapers, or magazines.  Within an hour most people will feel a\nstrong craving for distraction.[6] I don't mean to imply that the only function of prep schools\nis to trick admissions officers.  They also generally provide a\nbetter education.  But try this thought experiment: suppose prep\nschools supplied the same superior education but had a tiny (.001)\nnegative effect on college admissions.  How many parents would still\nsend their kids to them?It might also be argued that kids who went to prep schools, because\nthey've learned more, are better college candidates.  But\nthis seems empirically false.  What you learn in even the best high\nschool is rounding error compared to what you learn in college.\nPublic school kids arrive at college with a slight disadvantage,\nbut they start to pull ahead in the sophomore year.(I'm not saying public school kids are smarter than preppies, just\nthat they are within any given college.  That follows necessarily\nif you agree prep schools improve kids' admissions prospects.)[7] Why does society foul you?  Indifference, mainly.  There are\nsimply no outside forces pushing high school to be good.  The air\ntraffic control system works because planes would crash otherwise.\nBusinesses have to deliver because otherwise competitors would take\ntheir customers.  But no planes crash if your school sucks, and it\nhas no competitors.  High school isn't evil; it's random; but random\nis pretty bad.[8] And then of course there is money.  It's not a big factor in\nhigh school, because you can't do much that anyone wants.  But a\nlot of great things were created mainly to make money.  Samuel\nJohnson said \"no man but a blockhead ever wrote except for money.\"\n(Many hope he was exaggerating.)[9] Even college textbooks are bad.  When you get to college,\nyou'll find that (with a few stellar exceptions) the textbooks are\nnot written by the leading scholars in the field they describe.\nWriting college textbooks is unpleasant work, done mostly by people\nwho need the money.  It's unpleasant because the publishers exert\nso much control, and there are few things worse than close supervision\nby someone who doesn't understand what you're doing.  This phenomenon\nis apparently\neven worse in the production of high school textbooks.[10] Your teachers are always telling you to behave like adults.\nI wonder if they'd like it if you did.  You may be loud and\ndisorganized, but you're very docile compared to adults.  If you\nactually started acting like adults, it would be just as if a bunch\nof adults had been transposed into your bodies.  Imagine the reaction\nof an FBI agent or taxi driver or reporter to being told they had\nto ask permission to go the bathroom, and only one person could go\nat a time.  To say nothing of the things you're taught.  If a bunch\nof actual adults suddenly found themselves trapped in high school,\nthe first thing they'd do is form a union and renegotiate all the\nrules with the administration.Thanks to Ingrid Bassett, Trevor Blackwell,\nRich Draves, Dan Giffin, Sarah\nHarlin, Jessica Livingston, Jackie McDonough, Robert Morris, Mark Nitzberg, Lisa\nRandall, and Aaron Swartz for reading drafts of this, and to many\nothers for talking to me about high school."},{"title":"What the Bubble Got Right","text":"September 2004(This essay is derived from an invited talk at ICFP 2004.)I had a front row seat for the Internet Bubble,\nbecause I worked at Yahoo during 1998 and 1999.  One day,\nwhen the stock was trading around $200, I sat down and calculated\nwhat I thought the price should be. The\nanswer I got was $12.  I went to\nthe next cubicle and told my friend Trevor.  \"Twelve!\" he said.\nHe tried to sound indignant, but he didn't quite manage it.  He\nknew as well as I did that our valuation was crazy.Yahoo was a special case.  It was not just our price to earnings\nratio that was bogus.  Half our earnings were too.  Not in\nthe Enron way, of course.  The finance guys seemed\nscrupulous about reporting earnings.  What made our\nearnings bogus was that Yahoo was, in effect, the center of\na Ponzi scheme.  Investors looked at Yahoo's earnings\nand said to themselves, here is proof that Internet companies can make\nmoney.  So they invested in new\nstartups that promised to be the next Yahoo.  And as soon as these startups\ngot the money, what did they do with it?\nBuy millions of dollars worth of advertising on Yahoo to promote\ntheir brand.  Result: a capital investment in a startup this\nquarter shows up as Yahoo earnings next quarter—stimulating\nanother round of investments in startups.As in a Ponzi scheme, what seemed to be the returns of this system\nwere simply the latest round of investments in it.\nWhat made it not a Ponzi scheme was that it was unintentional.\nAt least, I think it was.  The venture capital business is pretty incestuous,\nand there were presumably people in a position, if not to create\nthis situation, to realize what was happening and to milk it.A year later the game was up.  Starting in January 2000, Yahoo's\nstock price began to crash, ultimately losing 95% of its\nvalue.Notice, though, that even with all the fat trimmed off its market\ncap, Yahoo was still worth a lot.  Even at the morning-after\nvaluations of March and April 2001, the people at Yahoo had managed\nto create a company worth about $8 billion in just six years.The fact is, despite all the nonsense we heard\nduring the Bubble about the \"new economy,\" there was a\ncore of truth.  You need\nthat to get a really big bubble: you need to have something\nsolid at the center, so that even smart people are sucked in.\n(Isaac Newton and Jonathan Swift both lost money\nin the South Sea Bubble of 1720.)Now the pendulum has swung the other way.  Now anything that\nbecame fashionable during the Bubble is ipso facto unfashionable.\nBut that's a mistake—an even bigger mistake than believing\nwhat everyone was saying in 1999.  Over the long term,\nwhat the Bubble got right will be more important than what\nit got wrong.1. Retail VCAfter the excesses of the Bubble, it's now\nconsidered dubious to take companies public before they have earnings.\nBut there is nothing intrinsically wrong with\nthat idea.  Taking a company public at an early stage is simply\nretail VC: instead of going to venture capital firms for the last round of\nfunding, you go to the public markets.By the end of the Bubble, companies going public with no\nearnings were being derided as \"concept stocks,\" as if it\nwere inherently stupid to invest in them.\nBut investing in concepts isn't stupid; it's what VCs do,\nand the best of them are far from stupid.The stock of a company that doesn't yet have earnings is\nworth something.\nIt may take a while for the market to learn\nhow to value such companies, just as it had to learn to\nvalue common stocks in the early 20th century.   But markets\nare good at solving that kind of problem.  I wouldn't be\nsurprised if the market ultimately did a better\njob than VCs do now.Going public early will not be the right plan\nfor every company.\nAnd it can of course be\ndisruptive—by distracting the management, or by making the early\nemployees suddenly rich.  But just as the market will learn\nhow to value startups, startups will learn how to minimize\nthe damage of going public.2. The InternetThe Internet genuinely is a big deal.  That was one reason\neven smart people were fooled by the Bubble.  Obviously\nit was going to have a huge effect.  Enough of an effect to\ntriple the value of Nasdaq companies in two years?  No, as it\nturned out.  But it was hard to say for certain at the time. [1]The same thing happened during the Mississippi and South Sea Bubbles.\nWhat drove them was the invention of organized public finance\n(the South Sea Company, despite its name, was really a competitor\nof the Bank of England).  And that did turn out to be\na big deal, in the long run.Recognizing an important trend turns out to be easier than\nfiguring out how to profit from it.  The mistake\ninvestors always seem to make is to take the trend too literally.\nSince the Internet was the big new thing, investors supposed\nthat the more Internettish the company, the better.  Hence\nsuch parodies as Pets.Com.In fact most of the money to be made from big trends is made\nindirectly.  It was not the railroads themselves that\nmade the most money during the railroad boom, but the companies\non either side, like Carnegie's steelworks, which made the rails,\nand Standard Oil, which used railroads to get oil to the East Coast,\nwhere it could be shipped to Europe.I think the Internet will have great effects,\nand that what we've seen so far is nothing compared to what's\ncoming.  But most of the winners will only indirectly be\nInternet companies; for every Google there will be ten\nJetBlues.3. ChoicesWhy will the Internet have great effects?  The general\nargument is that new forms of communication always do.  They happen\nrarely (till industrial times there were just speech, writing, and printing),\nbut when they do, they always cause a big splash.The specific argument, or one of them, is the Internet gives us\nmore choices.  In the \"old\" economy,\nthe high cost of presenting information to people meant they\nhad only a narrow range of options to choose from.  The tiny,\nexpensive pipeline to consumers was tellingly named \"the channel.\"\nControl the channel and you\ncould feed them what you wanted, on your terms.  And it\nwas not just big corporations that depended\non this principle.  So, in their way, did\nlabor unions, the traditional news media,\nand the art and literary establishments.\nWinning depended not on doing good work, but on gaining control\nof some bottleneck.There are signs that this is changing.\nGoogle has over 82 million unique users a month and\nannual revenues of about three billion dollars. [2]\nAnd yet have you ever seen\na Google ad?\nSomething is going on here.Admittedly, Google is an extreme case.  It's very easy for\npeople to switch to a new search engine.  It costs little\neffort and no money to try a new one, and it's easy to\nsee if the results are better.  And so Google doesn't have\nto advertise.  In a business like theirs, being the best is\nenough.The exciting thing about the Internet is that it's\nshifting everything in that direction.\nThe hard part, if you want to win by making the best stuff,\nis the beginning.  Eventually everyone\nwill learn by word of mouth that you're the best,\nbut how do you survive to that point?  And it is in this crucial\nstage that the Internet has the most effect.  First, the\nInternet lets anyone find you at almost zero cost.\nSecond, it dramatically speeds up the rate at which\nreputation spreads by word of mouth.  Together these mean that in many\nfields the rule will be: Build it, and they will come.\nMake something great and put it online.\nThat is a big change from the recipe for winning in the\npast century.4. YouthThe aspect of the Internet Bubble that the press seemed most\ntaken with was the youth of some of the startup founders.\nThis too is a trend that will last.\nThere is a huge standard deviation among 26 year olds.  Some\nare fit only for entry level jobs, but others are\nready to rule the world if they can find someone to handle\nthe paperwork for them.A 26 year old may not be very good at managing people or\ndealing with the SEC.  Those require experience.\nBut those are also commodities, which can be handed off to\nsome lieutenant.  The most important quality in a CEO is his\nvision for the company's future.  What will they build next?\nAnd in that department, there are 26 year olds who can\ncompete with anyone.In 1970 a company president meant someone in his fifties, at\nleast.   If he had technologists working for him, they were\ntreated like a racing stable: prized, but not powerful.  But\nas technology has grown more important, the power of nerds\nhas grown to reflect it.  Now it's not enough for a CEO to\nhave someone smart he can ask about technical matters.   Increasingly,\nhe has to be that person himself.As always, business has clung to old forms.  VCs still seem\nto want to install a legitimate-looking\ntalking head as the CEO.  But increasingly the founders of\nthe company are the real powers, and the grey-headed man\ninstalled by the VCs more like a\nmusic group's manager than a general.5. InformalityIn New York, the Bubble had dramatic consequences:\nsuits went out of fashion.  They made one seem old.  So in\n1998 powerful New York types were suddenly wearing\nopen-necked shirts and khakis and oval wire-rimmed glasses,\njust like guys in Santa Clara.The pendulum has swung back a bit, driven in part by a panicked\nreaction by the clothing industry.  But I'm betting on the\nopen-necked shirts.  And this is not as frivolous a question\nas it might seem.  Clothes are important, as all nerds can sense,\nthough they may not realize it consciously.If you're a nerd, you can understand how important clothes are\nby asking yourself how you'd feel about a company\nthat made you wear a suit and tie to work.  The idea sounds\nhorrible, doesn't it?  In fact, horrible far out of proportion\nto the mere discomfort of wearing such clothes.  A company that\nmade programmers wear suits would have something deeply wrong\nwith it.And what would be wrong would be that how one presented oneself\ncounted more than the quality of one's ideas.  That's\nthe problem with formality.  Dressing up is not so much bad in\nitself.  The problem is the receptor it binds to: dressing\nup is inevitably a substitute\nfor good ideas.   It is no coincidence that technically\ninept business types are known as \"suits.\"Nerds don't just happen to dress informally.  They do it too\nconsistently.  Consciously or not, they dress informally as\na prophylactic measure against stupidity.6. NerdsClothing is only the most visible battleground in the war\nagainst formality.  Nerds tend to eschew formality of any sort.\nThey're not impressed by one's job title, for example,\nor any of the other appurtenances of authority.Indeed, that's practically the definition of a nerd.  I found\nmyself talking recently to someone from Hollywood who was planning\na show about nerds.  I thought it would be useful if I\nexplained what a nerd was.  What I came up with was: someone who\ndoesn't expend any effort on marketing himself.A nerd, in other words, is someone who concentrates on substance.\nSo what's the connection between nerds and technology? Roughly\nthat you can't fool mother nature. In technical matters, you\nhave to get the right answers.  If your software miscalculates\nthe path of a space probe, you can't finesse your way out of\ntrouble by saying that your code is patriotic, or avant-garde,\nor any of the other dodges people use in nontechnical\nfields.And as technology becomes increasingly important in the\neconomy, nerd culture is\nrising with it.  Nerds are already\na lot cooler than they were when I was a kid.  When I was in\ncollege in the mid-1980s, \"nerd\" was still an insult.  People\nwho majored in computer science generally tried to conceal it.\nNow women ask me where they can meet nerds.  (The answer that\nsprings to mind is \"Usenix,\" but that would be like drinking\nfrom a firehose.)I have no illusions about why nerd culture is becoming\nmore accepted.  It's not because people are\nrealizing that substance is more important than marketing.\nIt's because the nerds are getting\nrich.  But that is not going\nto change.7. OptionsWhat makes the nerds rich, usually, is stock options.  Now there\nare moves afoot to make it harder for companies to grant\noptions.  To the extent there's some genuine accounting abuse\ngoing on, by all means correct it.  But don't kill the golden\ngoose.  Equity is the fuel that drives technical innovation.Options are a good idea because (a) they're fair, and (b) they\nwork.  Someone who goes to work for a company is (one hopes)\nadding to its value, and it's only fair to give them a share\nof it.  And as a purely practical measure, people work a lot\nharder when they have options.  I've seen that first hand.The fact that a few crooks during the Bubble robbed their\ncompanies by granting themselves options doesn't mean options\nare a bad idea.  During the railroad boom, some executives\nenriched themselves by selling watered stock—by issuing more\nshares than they said were outstanding.  But that doesn't\nmake common stock a bad idea.  Crooks just use whatever\nmeans are available.If there is a problem with options, it's that they reward\nslightly the wrong thing.  Not surprisingly, people do what you\npay them to. If you pay them by the hour, they'll work a lot of\nhours.  If you pay them by the volume of work done, they'll\nget a lot of work done (but only as you defined work).\nAnd if you pay them to raise the\nstock price, which is what options amount to, they'll raise\nthe stock price.But that's not quite what you want.  What you want is to\nincrease the actual value of the company, not its market cap.\nOver time the two inevitably meet, but not always as quickly\nas options vest.  Which means options tempt employees, if\nonly unconsciously, to \"pump and dump\"—to do things\nthat will make the company seem valuable.\nI found that when I was at Yahoo, I couldn't help thinking,\n\"how will this sound to investors?\"  when I should have been\nthinking \"is this a good idea?\"So maybe the standard option deal needs to be tweaked slightly.\nMaybe options should be replaced with something tied more\ndirectly to earnings.  It's still early days.8. StartupsWhat made the options valuable, for the most part, is\nthat they were options on the stock of\nstartups.  Startups\nwere not of course a creation of the Bubble, but they\nwere more visible during the Bubble than ever before.One thing most people did learn about for the first time\nduring the Bubble was the startup\ncreated with the intention of selling it.\nOriginally a\nstartup meant a small company that hoped to grow into a\nbig one.  But increasingly startups are evolving into a\nvehicle for developing technology on spec.As I wrote in\nHackers & Painters, employees seem to be most\nproductive when they're paid in proportion to the wealth\nthey generate.  And the advantage of a startup—indeed,\nalmost its raison d'etre—is that it offers something\notherwise impossible to obtain: a way of measuring that.In many businesses, it just makes more sense for companies\nto get technology by buying startups rather than developing\nit in house.  You pay more, but there is less risk,\nand risk is what big companies don't want.  It makes the\nguys developing the technology more accountable, because they\nonly get paid if they build the winner.  And you end up\nwith better technology, created faster, because things are\nmade in the innovative atmosphere of startups instead of\nthe bureaucratic atmosphere of big companies.Our startup, Viaweb, was built to be sold.  We were open\nwith investors about that from the start.  And we were\ncareful to create something that could slot easily into a\nlarger company.  That is the pattern for the future.9. CaliforniaThe Bubble was a California phenomenon.  When I showed up\nin Silicon Valley in 1998, I felt like an immigrant from\nEastern Europe arriving in America in 1900.  Everyone\nwas so cheerful and healthy and rich.  It seemed a new\nand improved world.The press, ever eager to exaggerate small trends, now gives\none the impression that Silicon Valley is a ghost town.\nNot at all.  When I drive down 101 from the airport,\nI still feel a buzz of energy, as if there were a giant\ntransformer nearby.  Real estate is still more expensive\nthan just about anywhere else in the country.  The people\nstill look healthy, and the weather is still fabulous.\nThe future is there.\n(I say \"there\" because I moved back to the East Coast after\nYahoo.  I still wonder if this was a smart idea.)What makes the Bay Area superior is the attitude of the\npeople.  I notice that when I come home to Boston.\nThe first thing I see when I walk out of the airline terminal\nis the fat, grumpy guy in\ncharge of the taxi line.  I brace myself for rudeness:\nremember, you're back on the East Coast now.The atmosphere varies from city to city, and fragile\norganisms like startups are exceedingly sensitive to such variation.\nIf it hadn't already been hijacked as a new euphemism\nfor liberal, the word to describe the atmosphere in\nthe Bay Area would be \"progressive.\"  People there are trying\nto build the future.\nBoston has MIT and Harvard, but it also has a lot of\ntruculent, unionized employees like the police who\nrecently held the Democratic National Convention for\nransom, and a lot of people trying to be\nThurston Howell.\nTwo sides of an obsolete coin.Silicon Valley may not be the next Paris or London, but it\nis at least the next Chicago.  For the next fifty years,\nthat's where new wealth will come from.10. ProductivityDuring the Bubble, optimistic analysts used to justify high\nprice to earnings ratios by saying that technology was going\nto increase productivity dramatically.  They were wrong about\nthe specific companies, but not so wrong about the underlying\nprinciple.  I think one of the big trends we'll see in the\ncoming century is a huge increase in productivity.Or more precisely, a huge increase in variation in\nproductivity.  Technology is a lever.  It doesn't add;\nit multiplies.  If the present range of productivity is\n0 to 100, introducing a multiple of 10 increases the range\nfrom 0 to 1000.One upshot of which is that the companies of the future may\nbe surprisingly small.  I sometimes daydream about how big\nyou could grow a company (in revenues) without ever having\nmore than ten people.  What would happen if you outsourced\neverything except product development?  If you tried this experiment,\nI think you'd be surprised at how far you could get.\nAs Fred Brooks pointed out, small groups are\nintrinsically more productive, because the\ninternal friction in a group grows as the\nsquare of its size.Till quite recently, running a major company\nmeant managing an army of workers.  Our standards about how\nmany employees a company should have are still influenced by\nold patterns.  Startups are perforce small, because they can't\nafford to hire a lot of people.  But I think it's a big mistake for\ncompanies to loosen their belts as revenues increase.  The\nquestion is not whether you can afford the extra salaries.\nCan you afford the loss in productivity that comes from making\nthe company bigger?The prospect of technological leverage will of course raise the\nspecter of unemployment.  I'm surprised people still worry about\nthis.\nAfter centuries of supposedly job-killing innovations,\nthe number of jobs is within ten percent of the number of people\nwho want them.  This can't be a coincidence.  There must be some\nkind of balancing mechanism.What's NewWhen one looks over these trends, is there any overall theme?\nThere does seem to be: that in the coming century, good ideas\nwill count for more.  That 26\nyear olds with good ideas will increasingly have an edge over 50\nyear olds with powerful connections.  That doing good work will\nmatter more than dressing up—or advertising, which is the\nsame thing for companies.  That people\nwill be rewarded a bit more in proportion to the value of what\nthey create.If so, this is good news indeed.\nGood ideas always tend to win eventually.  The problem is,\nit can take a very long time.\nIt took decades for relativity to be accepted, and the\ngreater part of a century to establish that central planning didn't work.\nSo even a small increase in the\nrate at which good ideas win would be a momentous\nchange—big enough, probably, to justify a name like\nthe \"new economy.\"Notes[1] Actually it's hard to say now.  As Jeremy Siegel points\nout, if the value of a stock is its future earnings, you\ncan't tell if it was overvalued till you see what the earnings\nturn out to be.   While certain famous Internet stocks were\nalmost certainly overvalued in 1999, it is still hard to say for sure\nwhether, e.g., the Nasdaq index was.Siegel, Jeremy J.  \"What Is an Asset Price Bubble?  An\nOperational Definition.\"  European Financial Management,\n9:1, 2003.[2] The number of users comes from a 6/03 Nielsen\nstudy quoted on Google's site.  (You'd think they'd have\nsomething more recent.)   The revenue estimate is based on\nrevenues of $1.35 billion for the first half of 2004, as\nreported in their IPO filing.Thanks to Chris Anderson, Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, and Robert Morris for reading drafts of this."},{"title":"Where to See Silicon Valley","text":"October 2010Silicon Valley proper is mostly suburban sprawl.  At first glance\nit doesn't seem there's anything to see.  It's not the sort of place\nthat has conspicuous monuments.  But if you look, there are subtle\nsigns you're in a place that's different from other places.1. Stanford\nUniversityStanford is a strange place.  Structurally it is to an ordinary\nuniversity what suburbia is to a city.  It's enormously spread out,\nand feels surprisingly empty much of the time.  But notice the\nweather.  It's probably perfect.  And notice the beautiful mountains\nto the west.  And though you can't see it, cosmopolitan San Francisco\nis 40 minutes to the north.  That combination is much of the reason\nSilicon Valley grew up around this university and not some other\none.2. University\nAveA surprising amount of the work of the Valley is done in the cafes\non or just off University Ave in Palo Alto.  If you visit on a\nweekday between 10 and 5, you'll often see founders pitching\ninvestors.  In case you can't tell, the founders are the ones leaning\nforward eagerly, and the investors are the ones sitting back with\nslightly pained expressions.3.  The Lucky\nOfficeThe office at 165 University Ave was Google's first.  Then it was\nPaypal's.  (Now it's Wepay's.)  The interesting thing about it is\nthe location.  It's a smart move to put a startup in a place with\nrestaurants and people walking around instead of in an office park,\nbecause then the people who work there want to stay there, instead\nof fleeing as soon as conventional working hours end.  They go out\nfor dinner together, talk about ideas, and then come back and\nimplement them.It's important to realize that Google's current location in an\noffice park is not where they started; it's just where they were\nforced to move when they needed more space.  Facebook was till\nrecently across the street, till they too had to move because they\nneeded more space.4. Old\nPalo AltoPalo Alto was not originally a suburb.  For the first 100 years or\nso of its existence, it was a college town out in the countryside.\nThen in the mid 1950s it was engulfed in a wave of suburbia that\nraced down the peninsula.  But Palo Alto north of Oregon expressway\nstill feels noticeably different from the area around it.  It's one\nof the nicest places in the Valley.  The buildings are old (though\nincreasingly they are being torn down and replaced with generic\nMcMansions) and the trees are tall.  But houses are very\nexpensive—around $1000 per square foot. This is post-exit\nSilicon Valley.5. Sand\nHill RoadIt's interesting to see the VCs' offices on the north side of Sand\nHill Road precisely because they're so boringly uniform.  The\nbuildings are all more or less the same, their exteriors express\nvery little, and they are arranged in a confusing maze.  (I've been\nvisiting them for years and I still occasionally get lost.) It's\nnot a coincidence.  These buildings are a pretty accurate reflection\nof the VC business.If you go on a weekday you may see groups of founders there to meet\nVCs. But mostly you won't see anyone; bustling is the last word\nyou'd use to describe the atmos.  Visiting Sand Hill Road reminds\nyou that the opposite of \"down and dirty\" would be \"up and clean.\"6.  Castro\nStreetIt's a tossup whether Castro Street or University Ave should be\nconsidered the heart of the Valley now.  University Ave would have\nbeen 10 years ago.  But Palo Alto is getting expensive.  Increasingly\nstartups are located in Mountain View, and Palo Alto is a place\nthey come to meet investors.  Palo Alto has a lot of different\ncafes, but there is one that clearly dominates in Mountain View:\nRed\nRock.7. GoogleGoogle spread out from its first building in Mountain View\nto a lot of the surrounding ones.  But because the\nbuildings were built at different times by different people,\nthe place doesn't have the sterile, walled-off feel that a typical\nlarge company's headquarters have.  It definitely has a flavor of\nits own though.  You sense there is something afoot.  The general\natmos is vaguely utopian; there are lots of Priuses, and people who\nlook like they drive them.You can't get into Google unless you know someone there.  It's very\nmuch worth seeing inside if you can, though.   Ditto for Facebook,\nat the end of California Ave in Palo Alto, though there is nothing\nto see outside.8.  Skyline\nDriveSkyline Drive runs along the crest of the Santa Cruz mountains.  On\none side is the Valley, and on the other is the sea—which\nbecause it's cold and foggy and has few harbors, plays surprisingly\nlittle role in the lives of people in the Valley, considering how\nclose it is.  Along some parts of Skyline the dominant trees are\nhuge redwoods, and in others they're live oaks.  Redwoods mean those\nare the parts where the fog off the coast comes in at night; redwoods\ncondense rain out of fog.  The MROSD manages a collection of great walking trails off\nSkyline.9. 280Silicon Valley has two highways running the length of it: 101, which\nis pretty ugly, and 280, which is one of the more beautiful highways\nin the world.  I always take 280 when I have a choice.  Notice the\nlong narrow lake to the west? That's the San Andreas Fault.  It\nruns along the base of the hills, then heads uphill through Portola\nValley.  One of the MROSD trails runs right along\nthe fault.  A string of rich neighborhoods runs along the\nfoothills to the west of 280: Woodside, Portola Valley, Los Altos\nHills, Saratoga, Los Gatos.SLAC goes right under 280 a little bit south of Sand Hill Road.  And a couple miles south of that is the Valley's equivalent of the \"Welcome to Las Vegas\" sign: The Dish.NotesI skipped the Computer\nHistory Museum because this is a list of where to see the Valley\nitself, not where to see artifacts from it.  I also skipped San\nJose.  San Jose calls itself the capital of Silicon Valley, but\nwhen people in the Valley use the phrase \"the city,\" they mean San\nFrancisco.  San Jose is a dotted line on a map.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, and Jessica Livingston\nfor reading drafts of this."},{"title":"Why Arc Isn't Especially Object-Oriented","text":"There is a kind of mania for object-oriented programming at the moment, but\nsome of the smartest programmers I know are some of the least excited about it.My own feeling is that object-oriented\nprogramming is a useful technique in some\ncases, but it isn't something that has to pervade every program you\nwrite.  You should be able to define new types,\nbut you shouldn't have to express every program as the\ndefinition of new types.I think there are five reasons people like object-oriented\nprogramming, and three and a half of them are bad:\nObject-oriented programming is exciting\nif you have a statically-typed language without\nlexical closures or macros.  To some degree, it offers a way around these\nlimitations.  (See Greenspun's Tenth Rule.) Object-oriented programming is popular in big companies,\nbecause it suits the way they write software.  At big companies,\nsoftware tends to be written by large (and frequently changing)\nteams of\nmediocre programmers.  Object-oriented programming imposes a\ndiscipline on these programmers that prevents any one of them\nfrom doing too much damage.  The price is that the resulting\ncode is bloated with protocols and full of duplication.\nThis is not too high a price for big companies, because their\nsoftware is probably going to be bloated and full of\nduplication anyway. Object-oriented\nprogramming generates a lot of what looks like work.\nBack in the days of fanfold, there was a type of programmer who\nwould only put five or ten lines of code on a page, preceded\nby twenty lines of elaborately formatted comments.\nObject-oriented programming is like crack for these people: it lets\nyou incorporate all this scaffolding right into your source\ncode.  Something that a Lisp hacker might handle by pushing\na symbol onto a list becomes a whole file of classes and\nmethods.  So it is a good tool if you want to convince yourself,\nor someone else, that you are doing a lot of work. If a language is itself an object-oriented program, it can\nbe extended by users.  Well, maybe.  Or maybe you can do\neven better by offering the sub-concepts\nof object-oriented programming a la carte.  Overloading,\nfor example, is not intrinsically tied to classes.  We'll see. Object-oriented abstractions map neatly onto the domains\nof  certain specific kinds of programs, like simulations and CAD\nsystems.\nI personally have never needed object-oriented abstractions.\nCommon Lisp has an enormously powerful object system and I've\nnever used it once.  I've done a lot of things (e.g. making\nhash tables full of closures) that would have required\nobject-oriented techniques to do in wimpier languages, but\nI have never had to use CLOS.Maybe I'm just stupid, or have worked on some limited subset\nof applications.  There is a danger in designing a language\nbased on one's own experience of programming.  But it seems\nmore dangerous to put stuff in that you've never needed\nbecause it's thought to be a good idea."},{"title":"Why It's Safe for Founders to Be Nice","text":"August 2015I recently got an email from a founder that helped me understand\nsomething important: why it's safe for startup founders to be nice\npeople.I grew up with a cartoon idea of a very successful businessman (in\nthe cartoon it was always a man): a rapacious, cigar-smoking,\ntable-thumping guy in his fifties who wins by exercising power, and\nisn't too fussy about how.  As I've written before, one of\nthe things that has surprised me most about startups is\nhow few of\nthe most successful founders are like that.  Maybe successful people\nin other industries are; I don't know; but not startup founders.\n[1]I knew this empirically, but I never saw the math of why till I got\nthis founder's email.  In it he said he worried that he was\nfundamentally soft-hearted and tended to give away too much for\nfree. He thought perhaps he needed \"a little dose of sociopath-ness.\"I told him not to worry about it, because so long as he built\nsomething good enough to spread by word of mouth, he'd have a\nhyperlinear growth curve.  If he was bad at extracting money from\npeople, at worst this curve would be some constant multiple less\nthan 1 of what it might have been.  But a constant multiple of any\ncurve is exactly the same shape.  The numbers on the Y axis are\nsmaller, but the curve is just as steep, and when anything grows\nat the rate of a successful startup, the Y axis will take care of\nitself.Some examples will make this clear.  Suppose your company is making\n$1000 a month now, and you've made something so great that it's\ngrowing at 5% a week.  Two years from now, you'll be making about\n$160k a month.Now suppose you're so un-rapacious that you only extract half as\nmuch from your users as you could.  That means two years later\nyou'll be making $80k a month instead of $160k.  How far behind are\nyou? How long will it take to catch up with where you'd have been\nif you were extracting every penny?  A mere 15 weeks.  After two\nyears, the un-rapacious founder is only 3.5 months behind the\nrapacious one.\n[2]If you're going to optimize a number, the one to choose is your\ngrowth rate. Suppose as before that you only extract half as much\nfrom users as you could, but that you're able to grow 6% a week\ninstead of 5%.  Now how are you doing compared to the rapacious\nfounder after two years?  You're already ahead—$214k a month\nversus $160k—and pulling away fast.  In another year you'll be\nmaking $4.4 million a month to the rapacious founder's $2 million.Obviously one case where it would help to be rapacious is when\ngrowth depends on that.  What makes startups different is that\nusually it doesn't. Startups usually win by making something so\ngreat that people recommend it to their friends.  And being rapacious\nnot only doesn't help you do that, but probably hurts.\n[3]The reason startup founders can safely be nice is that making great\nthings is compounded, and rapacity isn't.So if you're a founder, here's a deal you can make with yourself\nthat will both make you happy and make your company successful.\nTell yourself you can be as nice as you want, so long as you work\nhard on your growth rate to compensate.  Most successful startups\nmake that tradeoff unconsciously. Maybe if you do it consciously\nyou'll do it even better.Notes[1]\nMany think successful startup founders are driven by money.\nIn fact the secret weapon of the most successful founders is that\nthey aren't.  If they were, they'd have taken one of the acquisition\noffers that every fast-growing startup gets on the way up.  What\ndrives the most successful founders is the same thing that drives\nmost people who make things: the company is their project.[2]\nIn fact since 2 ≈ 1.05 ^ 15, the un-rapacious founder is\nalways 15 weeks behind the rapacious one.[3]\nThe other reason it might help to be good at squeezing money\nout of customers is that startups usually lose money at first, and\nmaking more per customer makes it easier to get to profitability\nbefore your initial funding runs out.  But while it is very common\nfor startups to die\nfrom running through their initial funding and then being unable\nto raise more, the underlying cause is usually slow growth or\nexcessive spending rather than insufficient effort to extract money\nfrom existing customers.Thanks to Sam Altman, Harj Taggar, Jessica Livingston, and\nGeoff Ralston for reading drafts of this, and to Randall Bennett\nfor being such a nice guy."},{"title":"Why Nerds are Unpopular","text":"February 2003When we were in junior high school, my friend Rich and I made a map\nof the school lunch tables according to popularity. This was easy\nto do, because kids only ate lunch with others of about the same\npopularity. We graded them from A to E. A tables were full of\nfootball players and cheerleaders and so on. E tables contained the\nkids with mild cases of Down's Syndrome, what in the language of\nthe time we called \"retards.\"We sat at a D table, as low as you could get without looking\nphysically different. We were not being especially candid to grade\nourselves as D. It would have taken a deliberate lie to say otherwise.\nEveryone in the school knew exactly how popular everyone else was,\nincluding us.My stock gradually rose during high school. Puberty finally arrived;\nI became a decent soccer player; I started a scandalous underground\nnewspaper.  So I've seen a good part of the popularity landscape.I know a lot of people who were nerds in school, and they all tell\nthe same story: there is a strong correlation between being smart\nand being a nerd, and an even stronger inverse correlation between\nbeing a nerd and being popular. Being smart seems to make you\nunpopular.Why? To someone in school now, that may seem an odd question to\nask. The mere fact is so overwhelming that it may seem strange to\nimagine that it could be any other way. But it could. Being smart\ndoesn't make you an outcast in elementary school. Nor does it harm\nyou in the real world. Nor, as far as I can tell, is the problem\nso bad in most other countries. But in a typical American secondary\nschool, being smart is likely to make your life difficult.  Why?The key to this mystery is to rephrase the question slightly. Why\ndon't smart kids make themselves popular? If they're so smart, why\ndon't they figure out how popularity works and beat the system,\njust as they do for standardized tests?One argument says that this would be impossible, that the smart\nkids are unpopular because the other kids envy them for being smart,\nand nothing they could do could make them popular. I wish. If the\nother kids in junior high school envied me, they did a great job\nof concealing it. And in any case, if being smart were really an\nenviable quality, the girls would have broken ranks. The guys that\nguys envy, girls like.In the schools I went to, being smart just didn't matter much. Kids\ndidn't admire it or despise it. All other things being equal, they\nwould have preferred to be on the smart side of average rather than the\ndumb side, but intelligence counted far less than, say, physical\nappearance, charisma, or athletic ability.So if intelligence in itself is not a factor in popularity, why are\nsmart kids so consistently unpopular? The answer, I think, is that\nthey don't really want to be popular.If someone had told me that at the time, I would have laughed at\nhim. Being unpopular in school makes kids miserable, some of them\nso miserable that they commit suicide. Telling me that I didn't\nwant to be popular would have seemed like telling someone dying of\nthirst in a desert that he didn't want a glass of water. Of course\nI wanted to be popular.But in fact I didn't, not enough. There was something else I wanted\nmore: to be smart. Not simply to do well in school, though that\ncounted for something, but to design beautiful rockets, or to write\nwell, or to understand how to program computers. In general, to\nmake great things.At the time I never tried to separate my wants and weigh them\nagainst one another. If I had, I would have seen that being smart\nwas more important. If someone had offered me the chance to be\nthe most popular kid in school, but only at the price of being of\naverage intelligence (humor me here), I wouldn't have taken it.Much as they suffer from their unpopularity, I don't think many\nnerds would. To them the thought of average intelligence is unbearable.\nBut most kids would take that deal. For half of them, it would be\na step up. Even for someone in the eightieth percentile (assuming,\nas everyone seemed to then, that intelligence is a scalar), who\nwouldn't drop thirty points in exchange for being loved and admired\nby everyone?And that, I think, is the root of the problem. Nerds serve two\nmasters. They want to be popular, certainly, but they want even\nmore to be smart. And popularity is not something you can do in\nyour spare time, not in the fiercely competitive environment of an\nAmerican secondary school.Alberti, arguably the archetype of the Renaissance Man, writes that\n\"no art, however minor, demands less than total dedication if you\nwant to excel in it.\"\nI wonder if anyone in the world works harder\nat anything than American school kids work at popularity. Navy SEALs\nand neurosurgery residents seem slackers by comparison. They\noccasionally take vacations; some even have hobbies. An American\nteenager may work at being popular every waking hour, 365 days a\nyear.I don't mean to suggest they do this consciously. Some of them truly\nare little Machiavellis, but what I really mean here is that teenagers\nare always on duty as conformists.For example, teenage kids pay a great deal of attention to clothes.\nThey don't consciously dress to be popular. They dress to look good.\nBut to who? To the other kids. Other kids' opinions become their\ndefinition of right, not just for clothes, but for almost everything\nthey do, right down to the way they walk. And so every effort they\nmake to do things \"right\" is also, consciously or not, an effort\nto be more popular.Nerds don't realize this. They don't realize that it takes work to\nbe popular. In general, people outside some very demanding field\ndon't realize the extent to which success depends on constant (though\noften unconscious) effort. For example, most people seem to consider\nthe ability to draw as some kind of innate quality, like being tall.\nIn fact, most people who \"can draw\" like drawing, and have spent\nmany hours doing it; that's why they're good at it. Likewise, popular\nisn't just something you are or you aren't, but something you make\nyourself.The main reason nerds are unpopular is that they have other things\nto think about. Their attention is drawn to books or the natural\nworld, not fashions and parties. They're like someone trying to\nplay soccer while balancing a glass of water on his head. Other\nplayers who can focus their whole attention on the game beat them\neffortlessly, and wonder why they seem so incapable.Even if nerds cared as much as other kids about popularity, being\npopular would be more work for them. The popular kids learned to\nbe popular, and to want to be popular, the same way the nerds learned\nto be smart, and to want to be smart: from their parents. While the\nnerds were being trained to get the right answers, the popular kids\nwere being trained to please.So far I've been finessing the relationship between smart and nerd,\nusing them as if they were interchangeable. In fact it's only the\ncontext that makes them so. A nerd is someone who isn't socially\nadept enough. But \"enough\" depends on where you are. In a typical\nAmerican school, standards for coolness are so high (or at least,\nso specific) that you don't have to be especially awkward to look\nawkward by comparison.Few smart kids can spare the attention that popularity requires.\nUnless they also happen to be good-looking, natural athletes, or\nsiblings of popular kids, they'll tend to become nerds. And that's\nwhy smart people's lives are worst between, say, the ages of eleven\nand seventeen. Life at that age revolves far more around popularity\nthan before or after.Before that, kids' lives are dominated by their parents, not by\nother kids. Kids do care what their peers think in elementary school,\nbut this isn't their whole life, as it later becomes.Around the age of eleven, though, kids seem to start treating their\nfamily as a day job. They create a new world among themselves, and\nstanding in this world is what matters, not standing in their family.\nIndeed, being in trouble in their family can win them points in the\nworld they care about.The problem is, the world these kids create for themselves is at\nfirst a very crude one. If you leave a bunch of eleven-year-olds\nto their own devices, what you get is Lord of the Flies. Like\na lot of American kids, I read this book in school. Presumably it\nwas not a coincidence. Presumably someone wanted to point out to\nus that we were savages, and that we had made ourselves a cruel and\nstupid world. This was too subtle for me. While the book seemed\nentirely believable, I didn't get the additional message. I wish\nthey had just told us outright that we were savages and our world\nwas stupid.Nerds would find their unpopularity more bearable if it merely\ncaused them to be ignored. Unfortunately, to be unpopular in school\nis to be actively persecuted.Why? Once again, anyone currently in school might think this a\nstrange question to ask. How could things be any other way? But\nthey could be. Adults don't normally persecute nerds. Why do teenage\nkids do it?Partly because teenagers are still half children, and many\nchildren are just intrinsically cruel. Some torture nerds for the\nsame reason they pull the legs off spiders. Before you develop a\nconscience, torture is amusing.Another reason kids persecute nerds is to make themselves feel\nbetter. When you tread water, you lift yourself up by pushing water\ndown. Likewise, in any social hierarchy, people unsure of their own\nposition will try to emphasize it by maltreating those they think\nrank below. I've read that this is why poor whites in the United\nStates are the group most hostile to blacks.But I think the main reason other kids persecute nerds is that it's\npart of the mechanism of popularity. Popularity is only partially\nabout individual attractiveness. It's much more about alliances.\nTo become more popular, you need to be constantly doing things that\nbring you close to other popular people, and nothing brings people\ncloser than a common enemy.Like a politician who wants to distract voters from bad times at\nhome, you can create an enemy if there isn't a real one. By singling\nout and persecuting a nerd, a group of kids from higher in the\nhierarchy create bonds between themselves. Attacking an outsider\nmakes them all insiders. This is why the worst cases of bullying\nhappen with groups. Ask any nerd: you get much worse treatment from\na group of kids than from any individual bully, however sadistic.If it's any consolation to the nerds, it's nothing personal. The\ngroup of kids who band together to pick on you are doing the same\nthing, and for the same reason, as a bunch of guys who get together\nto go hunting. They don't actually hate you. They just need something\nto chase.Because they're at the bottom of the scale, nerds are a safe target\nfor the entire school. If I remember correctly, the most popular\nkids don't persecute nerds; they don't need to stoop to such things.\nMost of the persecution comes from kids lower down, the nervous\nmiddle classes.The trouble is, there are a lot of them. The distribution of\npopularity is not a pyramid, but tapers at the bottom like a pear.\nThe least popular group is quite small. (I believe we were the only\nD table in our cafeteria map.) So there are more people who want\nto pick on nerds than there are nerds.As well as gaining points by distancing oneself from unpopular kids,\none loses points by being close to them. A woman I know says that\nin high school she liked nerds, but was afraid to be seen talking\nto them because the other girls would make fun of her. Unpopularity\nis a communicable disease; kids too nice to pick on nerds will still\nostracize them in self-defense.It's no wonder, then, that smart kids tend to be unhappy in middle\nschool and high school. Their other interests leave them little\nattention to spare for popularity, and since popularity resembles\na zero-sum game, this in turn makes them targets for the whole\nschool. And the strange thing is, this nightmare scenario happens\nwithout any conscious malice, merely because of the shape of the\nsituation.For me the worst stretch was junior high, when kid culture was new\nand harsh, and the specialization that would later gradually separate\nthe smarter kids had barely begun. Nearly everyone I've talked to\nagrees: the nadir is somewhere between eleven and fourteen.In our school it was eighth grade, which was ages twelve and thirteen\nfor me. There was a brief sensation that year when one of our\nteachers overheard a group of girls waiting for the school bus, and\nwas so shocked that the next day she devoted the whole class to an\neloquent plea not to be so cruel to one another.It didn't have any noticeable effect. What struck me at the time\nwas that she was surprised. You mean she doesn't know the kind of\nthings they say to one another? You mean this isn't normal?It's important to realize that, no, the adults don't know what the\nkids are doing to one another. They know, in the abstract, that\nkids are monstrously cruel to one another, just as we know in the\nabstract that people get tortured in poorer countries. But, like\nus, they don't like to dwell on this depressing fact, and they don't\nsee evidence of specific abuses unless they go looking for it.Public school teachers are in much the same position as prison\nwardens. Wardens' main concern is to keep the prisoners on the\npremises. They also need to keep them fed, and as far as possible\nprevent them from killing one another. Beyond that, they want to\nhave as little to do with the prisoners as possible, so they leave\nthem to create whatever social organization they want. From what\nI've read, the society that the prisoners create is warped, savage,\nand pervasive, and it is no fun to be at the bottom of it.In outline, it was the same at the schools I went to. The most\nimportant thing was to stay on the premises. While there, the\nauthorities fed you, prevented overt violence, and made some effort\nto teach you something. But beyond that they didn't want to have\ntoo much to do with the kids. Like prison wardens, the teachers\nmostly left us to ourselves. And, like prisoners, the culture we\ncreated was barbaric.Why is the real world more hospitable to nerds? It might seem that\nthe answer is simply that it's populated by adults, who are too\nmature to pick on one another. But I don't think this is true.\nAdults in prison certainly pick on one another. And so, apparently,\ndo society wives; in some parts of Manhattan, life for women sounds\nlike a continuation of high school, with all the same petty intrigues.I think the important thing about the real world is not that it's\npopulated by adults, but that it's very large, and the things you\ndo have real effects. That's what school, prison, and ladies-who-lunch\nall lack. The inhabitants of all those worlds are trapped in little\nbubbles where nothing they do can have more than a local effect.\nNaturally these societies degenerate into savagery. They have no\nfunction for their form to follow.When the things you do have real effects, it's no longer enough\njust to be pleasing. It starts to be important to get the right\nanswers, and that's where nerds show to advantage. Bill Gates will\nof course come to mind. Though notoriously lacking in social skills,\nhe gets the right answers, at least as measured in revenue.The other thing that's different about the real world is that it's\nmuch larger. In a large enough pool, even the smallest minorities\ncan achieve a critical mass if they clump together. Out in the real\nworld, nerds collect in certain places and form their own societies\nwhere intelligence is the most important thing. Sometimes the current\neven starts to flow in the other direction: sometimes, particularly\nin university math and science departments, nerds deliberately\nexaggerate their awkwardness in order to seem smarter. John Nash\nso admired Norbert Wiener that he adopted his habit of touching the\nwall as he walked down a corridor.As a thirteen-year-old kid, I didn't have much more experience of\nthe world than what I saw immediately around me. The warped little\nworld we lived in was, I thought, the world. The world seemed cruel\nand boring, and I'm not sure which was worse.Because I didn't fit into this world, I thought that something must\nbe wrong with me. I didn't realize that the reason we nerds didn't\nfit in was that in some ways\nwe were a step ahead. We were already thinking about\nthe kind of things that matter in the real world, instead of spending\nall our time playing an exacting but mostly pointless game like the\nothers.We were a bit like an adult would be if he were thrust back into\nmiddle school. He wouldn't know the right clothes to wear, the right\nmusic to like, the right slang to use. He'd seem to the kids a\ncomplete alien. The thing is, he'd know enough not to care what\nthey thought. We had no such confidence.A lot of people seem to think it's good for smart kids to be thrown\ntogether with \"normal\" kids at this stage of their lives. Perhaps.\nBut in at least some cases the reason the nerds don't fit in really\nis that everyone else is crazy. I remember sitting in the audience\nat a \"pep rally\" at my high school, watching as the cheerleaders\nthrew an effigy of an opposing player into the audience to be torn\nto pieces. I felt like an explorer witnessing some bizarre tribal\nritual.If I could go back and give my thirteen year old self some advice,\nthe main thing I'd tell him would be to stick his head up and look\naround. I didn't really grasp it at the time, but the whole world\nwe lived in was as fake as a Twinkie. Not just school, but the\nentire town. Why do people move to suburbia? To have kids! So no\nwonder it seemed boring and sterile. The whole place was a giant\nnursery, an artificial town created explicitly for the purpose of\nbreeding children.Where I grew up, it felt as if there was nowhere to go, and nothing\nto do. This was no accident. Suburbs are deliberately designed to\nexclude the outside world, because it contains things that could\nendanger children.And as for the schools, they were just holding pens within this\nfake world. Officially the purpose of schools is to teach kids. In\nfact their primary purpose is to keep kids locked up in one\nplace for a big chunk of the day so adults can get things done. And\nI have no problem with this: in a specialized industrial society,\nit would be a disaster to have kids running around loose.What bothers me is not that the kids are kept in prisons, but that\n(a) they aren't told about it, and (b) the prisons are run mostly\nby the inmates. Kids are sent off to spend six years memorizing\nmeaningless facts in a world ruled by a caste of giants who run\nafter an oblong brown ball, as if this were the most natural thing\nin the world. And if they balk at this surreal cocktail, they're\ncalled misfits.Life in this twisted world is stressful for the kids. And not just\nfor the nerds. Like any war, it's damaging even to the winners.Adults can't avoid seeing that teenage kids are tormented. So why\ndon't they do something about it? Because they blame it on puberty.\nThe reason kids are so unhappy, adults tell themselves, is that\nmonstrous new chemicals, hormones, are now coursing through their\nbloodstream and messing up everything. There's nothing wrong with\nthe system; it's just inevitable that kids will be miserable at\nthat age.This idea is so pervasive that even the kids believe it, which\nprobably doesn't help. Someone who thinks his feet naturally hurt\nis not going to stop to consider the possibility that he is wearing\nthe wrong size shoes.I'm suspicious of this theory that thirteen-year-old kids are\nintrinsically messed up. If it's physiological, it should be\nuniversal. Are Mongol nomads all nihilists at thirteen? I've read\na lot of history, and I have not seen a single reference\nto this supposedly universal fact before the twentieth century.\nTeenage apprentices in the Renaissance seem to have been cheerful\nand eager. They got in fights and played tricks on one another of\ncourse (Michelangelo had his nose broken by a bully), but they\nweren't crazy.As far as I can tell, the concept of the hormone-crazed teenager\nis coeval with suburbia. I don't think this is a coincidence. I\nthink teenagers are driven crazy by the life they're made to lead.\nTeenage apprentices in the Renaissance were working dogs. Teenagers\nnow are neurotic lapdogs. Their craziness is the craziness of the\nidle everywhere.When I was in school, suicide was a constant topic among the smarter\nkids. No one I knew did it, but several planned to, and\nsome may have tried. Mostly this was just a pose. Like other\nteenagers, we loved the dramatic, and suicide seemed very dramatic.\nBut partly it was because our lives were at times genuinely miserable.Bullying was only part of the problem. Another problem, and possibly\nan even worse one, was that we never had anything real to work on.\nHumans like to work; in most of the world, your work is your identity.\nAnd all the work we did was\npointless, or seemed so at the time.At best it was practice for real work we might do far in the future,\nso far that we didn't even know at the time what we were practicing\nfor. More often it was just an arbitrary series of hoops to jump\nthrough, words without content designed mainly for testability.\n(The three main causes of the Civil War were....\nTest: List the three main causes of the Civil War.)And there was no way to opt out. The adults had agreed among\nthemselves that this was to be the route to college. The only way\nto escape this empty life was to submit to it.Teenage kids used to have a more active role in society. In\npre-industrial times, they were all apprentices of one sort or\nanother, whether in shops or on farms or even on warships. They\nweren't left to create their own societies. They were junior members\nof adult societies.Teenagers seem to have respected adults more then, because\nthe adults were the visible experts in the skills they were trying\nto learn. Now most kids have little idea what their parents do in\ntheir distant offices, and see no connection (indeed, there is\nprecious little) between schoolwork and the work they'll do as\nadults.And if teenagers respected adults more, adults also had more use\nfor teenagers. After a couple years' training, an apprentice could\nbe a real help. Even the newest apprentice could be made to carry\nmessages or sweep the workshop.Now adults have no immediate use for teenagers. They would be in\nthe way in an office. So they drop them off at school on their way\nto work, much as they might drop the dog off at a kennel if they\nwere going away for the weekend.What happened? We're up against a hard one here. The cause of this\nproblem is the same as the cause of so many present ills: specialization.\nAs jobs become more specialized, we have to train longer for them.\nKids in pre-industrial times started working at about 14 at\nthe latest; kids on farms, where most people lived, began far\nearlier. Now kids who go to college don't start working full-time\ntill 21 or 22. With some degrees, like MDs and PhDs, you may not\nfinish your training till 30.Teenagers now are useless, except as cheap labor in industries like\nfast food, which evolved to exploit precisely this fact. In almost\nany other kind of work, they'd be a net loss. But they're also too\nyoung to be left unsupervised. Someone has to watch over them, and\nthe most efficient way to do this is to collect them together in\none place. Then a few adults can watch all of them.If you stop there, what you're describing is literally a prison,\nalbeit a part-time one. The problem is, many schools practically\ndo stop there. The stated purpose of schools is to educate the kids.\nBut there is no external pressure to do this well. And so most\nschools do such a bad job of teaching that the kids don't really\ntake it seriously-- not even the smart kids. Much of the time we\nwere all, students and teachers both, just going through the motions.In my high school French class we were supposed to read Hugo's Les\nMiserables. I don't think any of us knew French well enough to make\nour way through this enormous book. Like the rest of the class, I\njust skimmed the Cliff's Notes. When we were given a test on the\nbook, I noticed that the questions sounded odd. They were full of\nlong words that our teacher wouldn't have used. Where had these\nquestions come from? From the Cliff's Notes, it turned out. The\nteacher was using them too. We were all just pretending.There are certainly great public school teachers.  The energy and\nimagination of my fourth grade teacher, Mr. Mihalko, made that\nyear something his students still talk about, thirty years later.\nBut teachers like him were individuals swimming\nupstream. They couldn't fix the system.In almost any group of people you'll find hierarchy.\nWhen groups of adults form in the real world, it's generally for\nsome common purpose, and the leaders end up being those who are best\nat it. The problem with most schools is, they have no purpose.\nBut hierarchy there must be.\nAnd so the kids make one out of nothing.We have a phrase to describe what happens when rankings have to be\ncreated without any meaningful criteria. We say that the situation\ndegenerates into a popularity contest. And that's exactly what\nhappens in most American schools.\nInstead of depending on some real test, one's rank\ndepends mostly on one's ability to increase one's rank. It's\nlike the court of Louis XIV. There is no external opponent, so the\nkids become one another's opponents.When there is some real external test of skill, it isn't painful\nto be at the bottom of the hierarchy. A rookie on a football team\ndoesn't resent the skill of the veteran; he hopes to be like him\none day and is happy to have the chance to learn from him.\nThe veteran may in turn feel a sense of\nnoblesse oblige.\nAnd most importantly, their status depends on how well they\ndo against opponents, not on whether they can push the other down.Court hierarchies are another thing entirely. This type of society\ndebases anyone who enters it. There is neither admiration at the\nbottom, nor noblesse oblige at the top. It's kill or be killed.This is the sort of society that gets created\nin American\nsecondary schools. And it happens because these schools have no\nreal purpose beyond keeping the kids all in one place for a certain\nnumber of hours each day. What I didn't realize at the time, and\nin fact didn't realize till very recently, is that the twin horrors\nof school life, the cruelty and the boredom, both have the same\ncause.The mediocrity of American public schools has worse consequences\nthan just making kids unhappy for six years. It breeds a rebelliousness\nthat actively drives kids away from the things they're supposed to\nbe learning.Like many nerds, probably, it was years after high school before I\ncould bring myself to read anything we'd been assigned then.\nAnd I lost more than books. I mistrusted words like \"character\" and\n\"integrity\" because they had been so debased by adults. As they\nwere used then, these words all seemed to mean the same thing:\nobedience. The kids who got praised for these qualities tended to\nbe at best dull-witted prize bulls, and at worst facile schmoozers.\nIf that was what character and integrity were, I wanted no part of\nthem.The word I most misunderstood was \"tact.\" As used by adults, it\nseemed to mean keeping your mouth shut.\nI assumed it was derived from the same root as\n\"tacit\" and \"taciturn,\" and that it literally meant being quiet. I\nvowed that I would never be tactful; they were never going to shut\nme up. In fact, it's derived from the same root as \"tactile,\" and\nwhat it means is to have a deft touch. Tactful is the opposite of\nclumsy. I don't think I learned this until college.Nerds aren't the only losers in the popularity rat race. Nerds are\nunpopular because they're distracted. There are other kids who\ndeliberately opt out because they're so disgusted with the whole\nprocess.Teenage kids, even rebels, don't like to be alone, so when kids opt\nout of the system, they tend to do it as a group. At the schools I\nwent to, the focus of rebellion was drug use, specifically marijuana.\nThe kids in this tribe wore black concert t-shirts and were called\n\"freaks.\"Freaks and nerds were allies, and there was a good deal of overlap\nbetween them. Freaks were on the whole smarter than other kids,\nthough never studying (or at least never appearing to) was an\nimportant tribal value. I was more in the nerd camp, but I was\nfriends with a lot of freaks.They used drugs, at least at first, for the social bonds they\ncreated. It was something to do together, and because the drugs\nwere illegal, it was a shared badge of rebellion.I'm not claiming that bad schools are the whole reason kids get\ninto trouble with drugs. After a while, drugs have their own momentum.\nNo doubt some of the freaks ultimately used drugs to escape from\nother problems-- trouble at home, for example. But, in my school\nat least, the reason most kids started using drugs was rebellion.\nFourteen-year-olds didn't start smoking pot because they'd heard\nit would help them forget their problems. They started because they\nwanted to join a different tribe.Misrule breeds rebellion; this is not a new idea. And yet the\nauthorities still for the most part act as if drugs were themselves\nthe cause of the problem.The real problem is the emptiness of school life. We won't see\nsolutions till adults realize that. The adults who\nmay realize it first are the ones who were themselves nerds in\nschool. Do you want your kids to be as unhappy in eighth grade as\nyou were? I wouldn't. Well, then, is there anything we can do to\nfix things? Almost certainly. There is nothing inevitable about the\ncurrent system. It has come about mostly by default.Adults, though, are busy. Showing up for school plays is one thing.\nTaking on the educational bureaucracy is another. Perhaps a few\nwill have the energy to try to change things. I suspect the hardest\npart is realizing that you can.Nerds still in school should not hold their breath. Maybe one day\na heavily armed force of adults will show up in helicopters to\nrescue you, but they probably won't be coming this month. Any\nimmediate improvement in nerds' lives is probably going to have to\ncome from the nerds themselves.Merely understanding the situation they're in should make it less\npainful. Nerds aren't losers. They're just playing a different game,\nand a game much closer to the one played in the real world. Adults\nknow this. It's hard to find successful adults now who don't claim\nto have been nerds in high school.It's important for nerds to realize, too, that school is not life.\nSchool is a strange, artificial thing, half sterile and half feral.\nIt's all-encompassing, like life, but it isn't the real thing. It's\nonly temporary, and if you look, you can see beyond it even while\nyou're still in it.If life seems awful to kids, it's neither because hormones are\nturning you all into monsters (as your parents believe), nor because\nlife actually is awful (as you believe). It's because the adults,\nwho no longer have any economic use for you, have abandoned you to\nspend years cooped up together with nothing real to do.  Any society\nof that type is awful to live in.\nYou don't have\nto look any further to explain why teenage kids are unhappy.I've said some harsh things in this essay, but really the thesis\nis an optimistic one-- that several problems we take for granted\nare in fact not insoluble after all. Teenage kids are not inherently\nunhappy monsters. That should be encouraging news to kids and adults\nboth.Thanks to Sarah Harlin, Trevor Blackwell, Robert Morris,\nEric Raymond, and Jackie Weicker for reading drafts of this essay,\nand Maria Daniels for scanning photos."},{"title":"Why Smart People Have Bad Ideas","text":"April 2005This summer, as an\nexperiment, some\nfriends and I are giving seed\nfunding to a bunch of new startups.  It's an experiment because\nwe're prepared to fund younger founders than most investors would.\nThat's why we're doing it during the summer—so even college\nstudents can participate.We know from Google and Yahoo that grad students can start successful\nstartups.  And we know from experience that some undergrads are as\ncapable as most grad students.  The accepted age for startup founders\nhas been creeping downward. We're trying to find the lower bound.\nThe deadline has now passed, and we're sifting through 227 applications.\nWe expected to divide them into two categories, promising\nand unpromising.  But we soon saw we needed a third: promising\npeople with unpromising ideas.\n[1]The Artix PhaseWe should have expected this.  It's very common for a group of\nfounders to go through one lame idea before realizing that a startup\nhas to make something people will pay for.   In fact, we ourselves\ndid.Viaweb wasn't the first startup Robert Morris and I started.  In\nJanuary 1995, we and a couple friends started a company called\nArtix.  The plan was to put art galleries on the Web.  In retrospect,\nI wonder how we could have wasted our time on anything so stupid.\nGalleries are not especially excited about being on\nthe Web even now, ten years later.  They don't want to have their\nstock visible to any random visitor, like an antique store.\n[2]Besides which, art dealers are the most technophobic people on\nearth.  They didn't become art dealers after a difficult choice\nbetween that and a career in the hard sciences.  Most of them had\nnever seen the Web before we came to tell them why they should be\non it.  Some didn't even have computers.  It doesn't do justice to\nthe situation to describe it as a hard sell; we soon sank\nto building sites for free, and it was hard to convince galleries\neven to do that.Gradually it dawned on us that\ninstead of trying to make Web sites for\npeople who didn't want them, we could make sites for\npeople who did.  In fact, software that would let people who wanted\nsites make their own.  So we ditched Artix and\nstarted a new company, Viaweb, to make software for building online stores.\nThat one succeeded.We're in good company here.  Microsoft was not the first company\nPaul Allen and Bill Gates started either.  The first was called\nTraf-o-data.  It does not seem to have done as well as Micro-soft.\nIn Robert's defense, he was skeptical about Artix.  I dragged him\ninto it.\n[3]\nBut there were moments when he was optimistic.  And\nif we, who were 29 and 30 at the time, could get excited about such\na thoroughly boneheaded idea, we should not be surprised that hackers\naged 21 or 22 are pitching us ideas with little hope of making money.The Still Life EffectWhy does this happen?  Why do good hackers have bad business ideas?Let's look at our case.  One reason we had such a lame idea was\nthat it was the first thing we thought of.  I was in New York trying\nto be a starving artist at the time (the starving part is actually\nquite easy), so I was haunting galleries anyway.  When I learned\nabout the Web, it seemed natural to mix the two.  Make Web sites\nfor galleries—that's the ticket!If you're going to spend years working on something, you'd think\nit might be wise to spend at least a couple days considering different\nideas, instead of going with the first that comes into your head.\nYou'd think.  But people don't.  In fact, this is a constant problem\nwhen you're painting still lifes.  You plonk down a bunch of stuff\non a table, and maybe spend five or ten minutes rearranging it to\nlook interesting.  But you're so impatient to get started painting\nthat ten minutes of rearranging feels very long.  So you start\npainting.  Three days later, having spent twenty hours staring at\nit, you're kicking yourself for having set up such an awkward and\nboring composition, but by then it's too late.Part of the problem is that big projects tend to grow out of small\nones.  You set up a still life to make a quick sketch when you have\na spare hour, and days later you're still working on it.  I once\nspent a month painting three versions of a still life I set up in\nabout four minutes.  At each point (a day, a week, a month) I thought\nI'd already put in so much time that it was too late to change.So the biggest cause of bad ideas is the still life effect:  you\ncome up with a random idea, plunge into it, and then at each point\n(a day, a week, a month) feel you've put so much time into it that\nthis must be the idea.How do we fix that?  I don't think we should discard plunging.\nPlunging into an idea is a good thing.  The solution is at the other\nend: to realize that having invested time in something doesn't make\nit good.This is clearest in the case of names.  Viaweb was originally\ncalled Webgen, but we discovered someone else had a product called\nthat.  We were so attached to our name that we offered him 5%\nof the company if he'd let us have it.   But he wouldn't, so\nwe had to think of another.\n[4]\nThe best we could do was Viaweb,\nwhich we disliked at first.  It was like having a new mother.  But\nwithin three days we loved it, and Webgen sounded lame and\nold-fashioned.If it's hard to change something so simple as a name, imagine\nhow hard it is to garbage-collect an idea.  A name only has one\npoint of attachment into your head.  An idea for a company gets\nwoven into your thoughts.  So you must consciously discount for\nthat.  Plunge in, by all means, but remember later to look at your\nidea in the harsh light of morning and ask: is this something people\nwill pay for?  Is this, of all the things we could make, the thing\npeople will pay most for?MuckThe second mistake we made with Artix is also very common.  Putting\ngalleries on the Web seemed cool.One of the most valuable things my father taught me is an old\nYorkshire saying: where there's muck, there's brass.  Meaning that\nunpleasant work pays.  And more to the point here, vice versa.  Work\npeople like doesn't pay well, for reasons of supply and demand.\nThe most extreme case is developing programming languages, which\ndoesn't pay at all, because people like it so much they do it for\nfree.When we started Artix, I was still ambivalent about business.  I\nwanted to keep one foot in the art world.  Big, big, mistake.  Going\ninto business is like a hang-glider launch: you'd better do it\nwholeheartedly, or not at all.  The purpose of a company, and a\nstartup especially, is to make money.  You can't have divided\nloyalties.Which is not to say that you have to do the most disgusting sort\nof work, like spamming, or starting a company whose only purpose\nis patent litigation.  What I mean is, if you're starting a company\nthat will do something cool, the aim had better be to make money\nand maybe be cool, not to be cool and maybe make money.It's hard enough to make money that you can't do it by accident.\nUnless it's your first priority, it's unlikely to happen at all.HyenasWhen I probe our motives with Artix, I see a third mistake: timidity.\nIf you'd proposed at the time that we go into the e-commerce business,\nwe'd have found the idea terrifying.  Surely a field like that would\nbe dominated by fearsome startups with five million dollars of VC\nmoney each.  Whereas we felt pretty sure that we could hold our own\nin the slightly less competitive business of generating Web sites\nfor art galleries.We erred ridiculously far on the side of safety.  As it turns out,\nVC-backed startups are not that fearsome.  They're too busy trying\nto spend all that\nmoney to get software written.  In 1995, the\ne-commerce business was very competitive as measured in press\nreleases, but not as measured in software.  And really it never\nwas.  The big fish like Open Market (rest their souls) were just\nconsulting companies pretending to be product companies\n[5], and\nthe offerings at our end of the market were a couple hundred lines\nof Perl scripts.  Or could have been implemented as a couple hundred\nlines of Perl; in fact they were probably tens of thousands of lines\nof C++ or Java.  Once we actually took the plunge into e-commerce,\nit turned out to be surprisingly easy to compete.So why were we afraid?  We felt we were good at programming, but\nwe lacked confidence in our ability to do a mysterious, undifferentiated\nthing we called \"business.\"  In fact there is no such thing as\n\"business.\" There's selling, promotion, figuring out what people\nwant, deciding how much to charge, customer support, paying your\nbills, getting customers to pay you, getting incorporated, raising\nmoney, and so on.  And the combination is not as hard as it seems,\nbecause some tasks (like raising money and getting incorporated)\nare an O(1) pain in the ass, whether you're big or small, and others\n(like selling and promotion) depend more on energy and imagination\nthan any kind of special training.Artix was like a hyena, content to survive on carrion because we\nwere afraid of the lions.  Except the lions turned out not to have\nany teeth, and the business of putting galleries online barely\nqualified as carrion.A Familiar ProblemSum up all these sources of error, and it's no wonder we had such\na bad idea for a company.  We did the first thing we thought of;\nwe were ambivalent about being in business at all; and we deliberately\nchose an impoverished market to avoid competition.Looking at the applications for the Summer Founders Program, I see\nsigns of all three.  But the first is by far the biggest problem.\nMost of the groups applying have not stopped to ask: of all the\nthings we could do, is this the one with the best chance of\nmaking money?If they'd already been through their Artix phase, they'd have learned\nto ask that.  After the reception we got from art dealers, we were\nready to.  This time, we thought, let's make something people want.Reading the Wall Street Journal for a week should give anyone\nideas for two or three new startups.  The articles are full of\ndescriptions of problems that need to be solved.  But most of the\napplicants don't seem to have looked far for ideas.We expected the most common proposal to be for multiplayer games.\nWe were not far off: this was the second most common.\nThe most common was some combination of a blog, a calendar,\na dating site, and Friendster.  Maybe there is some new killer app\nto be discovered here, but it seems perverse to go poking around\nin this fog when there are valuable, unsolved problems lying about\nin the open for anyone to see.  Why did no one propose a new scheme\nfor micropayments?  An ambitious project, perhaps, but I can't\nbelieve we've considered every alternative.  And newspapers and\nmagazines are (literally) dying for a solution.Why did so few applicants really think about what customers want?\nI think the problem with many, as with people in their early twenties\ngenerally, is that they've been trained their whole lives to jump\nthrough predefined hoops.  They've spent 15-20 years solving problems\nother people have set for them.  And how much time deciding what\nproblems would be good to solve?  Two or three course projects?\nThey're good at solving problems, but bad at choosing them.But that, I'm convinced, is just the effect of training.  Or more\nprecisely, the effect of grading.  To make grading efficient,\neveryone has to solve the same problem, and that means it has to\nbe decided in advance.  It would be great if schools taught students\nhow to choose problems as well as how to solve them, but I don't\nknow how you'd run such a class in practice.Copper and TinThe good news is, choosing problems is something that can be learned.\nI know that from experience.  Hackers can learn to make things\ncustomers want.\n[6]This is a controversial view.  One expert on \"entrepreneurship\"\ntold me that any startup had to include business people, because\nonly they could focus on what customers wanted.  I'll probably\nalienate this guy forever by quoting him, but I have to risk it,\nbecause his email was such a perfect example of this view:\n80% of MIT spinoffs succeed provided they\nhave at least one management person in the team at the start. The\nbusiness person represents the \"voice of the customer\" and that's\nwhat keeps the engineers and product development on track.\nThis is, in my opinion, a crock.  Hackers are perfectly capable of\nhearing the voice of the customer without a business person to\namplify the signal for them.  Larry Page and Sergey Brin were grad\nstudents in computer science, which presumably makes them \"engineers.\"\nDo you suppose Google is only good because they had some business\nguy whispering in their ears what customers wanted?   It seems to\nme the business guys who did the most for Google were the ones who\nobligingly flew Altavista into a hillside just as Google was getting\nstarted.The hard part about figuring out what customers want is figuring\nout that you need to figure it out.  But that's something you can\nlearn quickly.  It's like seeing the other interpretation of an\nambiguous picture.  As soon as someone tells you there's a rabbit\nas well as a duck, it's hard not to see it.And compared to the sort of problems hackers are used to solving,\ngiving customers what they want is easy.  Anyone who can write an\noptimizing compiler can design a UI that doesn't confuse users,\nonce they choose to focus on that problem.  And once you\napply that kind of brain power to petty but profitable questions,\nyou can create wealth very rapidly.That's the essence of a startup: having brilliant people do work\nthat's beneath them.   Big companies try to hire the right person\nfor the job.  Startups win because they don't—because they take\npeople so smart that they would in a big company be doing \"research,\"\nand set them to work instead on problems of the most immediate and\nmundane sort.  Think Einstein designing refrigerators.\n[7]If you want to learn what people want, read\nDale Carnegie's How to Win Friends and Influence People.\n[8]\nWhen a friend recommended this book, I couldn't believe he was\nserious.  But he insisted it was good, so I read it, and he was\nright.  It deals with the most difficult problem in human experience:\nhow to see things from other people's point of view, instead of\nthinking only of yourself.Most smart people don't do that very well.  But adding this ability\nto raw brainpower is like adding tin to copper.  The result is\nbronze, which is so much harder that it seems a different metal.A hacker who has learned what to make, and not just how to make,\nis extraordinarily powerful.  And not just at making money: look\nwhat a small group of volunteers has achieved with Firefox.Doing an Artix teaches you to make something people want in the\nsame way that not drinking anything would teach you how much you\ndepend on water.  But it would be more convenient for all involved\nif the Summer Founders didn't learn this on our dime—if they could\nskip the Artix phase and go right on to make something customers\nwanted.  That, I think, is going to be the real experiment this\nsummer.  How long will it take them to grasp this?  We decided\nwe ought to have T-Shirts for the SFP, and we'd been thinking about\nwhat to print on the back.  Till now we'd been planning to use\nIf you can read this, I should be working.\nbut now we've decided it's going to be\nMake something people want.Notes[1]\nSFP applicants: please don't assume that not being accepted\nmeans we think your idea is bad.  Because we want to keep the\nnumber of startups small this first summer, we're going to have\nto turn down some good proposals too.[2]\nDealers try to give each customer the impression that the stuff\nthey're showing him is something special that only a few people\nhave seen, when in fact it may have been sitting in their racks for\nyears while they tried to unload it on buyer after buyer.[3]\nOn the other hand, he was skeptical about Viaweb too.  I have\na precise measure of that, because at one point in the first couple\nmonths we made a bet: if he ever made a million dollars out of\nViaweb, he'd get his ear pierced.  We didn't let him\noff, either.[4]\nI wrote a program to generate all the combinations of \"Web\"\nplus a three letter word.  I learned from this that most three\nletter words are bad: Webpig, Webdog, Webfat, Webzit, Webfug.  But\none of them was Webvia; I swapped them to make Viaweb.[5]\nIt's much easier to sell services than a product, just as it's\neasier to make a living playing at weddings than by selling recordings.\nBut the margins are greater on products.  So during the\nBubble a lot of companies used consulting to generate revenues\nthey could attribute to the sale of products, because it made a\nbetter story for an IPO.[6]\nTrevor Blackwell presents the following recipe for a startup:\n\"Watch people who have money to spend, see what they're wasting\ntheir time on, cook up a solution, and try selling it to them. It's\nsurprising how small a problem can be and still provide a profitable\nmarket for a solution.\"[7]\nYou need to offer especially large rewards to get great people\nto do tedious work.  That's why startups always pay equity rather\nthan just salary.[8]\nBuy an old\ncopy from the 1940s or 50s instead of the current edition, which has been\nrewritten to suit present fashions.  The original edition contained\na few unPC ideas, but it's always better to read an original book,\nbearing in mind that it's a book from a past era, than to read a\nnew version sanitized for your protection.Thanks to Bill Birch, Trevor Blackwell, Jessica Livingston,\nand Robert Morris for reading drafts of this."},{"title":"Why Startup Hubs Work","text":"October 2011If you look at a list of US cities sorted by population, the number\nof successful startups per capita varies by orders of magnitude.\nSomehow it's as if most places were sprayed with startupicide.I wondered about this for years.  I could see the average town was\nlike a roach motel for startup ambitions: smart, ambitious people\nwent in, but no startups came out.  But I was never able to figure\nout exactly what happened inside the motel—exactly what was\nkilling all the potential startups.\n[1]A couple weeks ago I finally figured it out. I was framing the\nquestion wrong.  The problem is not that most towns kill startups.\nIt's that death is the default for startups,\nand most towns don't save them.  Instead of thinking of most places\nas being sprayed with startupicide, it's more accurate to think of\nstartups as all being poisoned, and a few places being sprayed with\nthe antidote.Startups in other places are just doing what startups naturally do:\nfail.  The real question is, what's saving startups in places\nlike Silicon Valley?\n[2]EnvironmentI think there are two components to the antidote: being in a place\nwhere startups are the cool thing to do, and chance meetings with\npeople who can help you.  And what drives them both is the number\nof startup people around you.The first component is particularly helpful in the first stage of\na startup's life, when you go from merely having an interest in\nstarting a company to actually doing it.  It's quite a leap to start\na startup.  It's an unusual thing to do. But in Silicon Valley it\nseems normal.\n[3]In most places, if you start a startup, people treat you as if\nyou're unemployed.  People in the Valley aren't automatically\nimpressed with you just because you're starting a company, but they\npay attention.  Anyone who's been here any amount of time knows not\nto default to skepticism, no matter how inexperienced you seem or\nhow unpromising your idea sounds at first, because they've all seen\ninexperienced founders with unpromising sounding ideas who a few\nyears later were billionaires.Having people around you care about what you're doing is an\nextraordinarily powerful force.  Even the\nmost willful people are susceptible to it.  About a year after we\nstarted Y Combinator I said something to a partner at a well known\nVC firm that gave him the (mistaken) impression I was considering\nstarting another startup.  He responded so eagerly that for about\nhalf a second I found myself considering doing it.In most other cities, the prospect of starting a startup just doesn't\nseem real.  In the Valley it's not only real but fashionable.  That\nno doubt causes a lot of people to start startups who shouldn't.\nBut I think that's ok.  Few people are suited to running a startup,\nand it's very hard to predict beforehand which are (as I know all\ntoo well from being in the business of trying to predict beforehand),\nso lots of people starting startups who shouldn't is probably the\noptimal state of affairs.  As long as you're at a point in your\nlife when you can bear the risk of failure, the best way to find\nout if you're suited to running a startup is to try\nit.ChanceThe second component of the antidote is chance meetings with people\nwho can help you.  This force works in both phases: both in the\ntransition from the desire to start a startup to starting one, and\nthe transition from starting a company to succeeding.  The power\nof chance meetings is more variable than people around you caring\nabout startups, which is like a sort of background radiation that\naffects everyone equally, but at its strongest it is far stronger.Chance meetings produce miracles to compensate for the disasters\nthat characteristically befall startups.  In the Valley, terrible\nthings happen to startups all the time, just like they do to startups\neverywhere.  The reason startups are more likely to make it here\nis that great things happen to them too.  In the Valley, lightning\nhas a sign bit.For example, you start a site for college students and you decide\nto move to the Valley for the summer to work on it.  And then on a\nrandom suburban street in Palo Alto you happen to run into Sean\nParker, who understands the domain really well because he started\na similar startup himself, and also knows all the investors.  And\nmoreover has advanced views, for 2004, on founders retaining control of their companies.You can't say precisely what the miracle will be, or even for sure\nthat one will happen.  The best one can say is: if you're in a\nstartup hub, unexpected good things will probably happen to you,\nespecially if you deserve them.I bet this is true even for startups we fund.  Even with us working\nto make things happen for them on purpose rather than by accident,\nthe frequency of helpful chance meetings in the Valley is so high\nthat it's still a significant increment on what we can deliver.Chance meetings play a role like the role relaxation plays in having\nideas.  Most people have had the experience of working hard on some\nproblem, not being able to solve it, giving up and going to bed,\nand then thinking of the answer in the shower in the morning.  What\nmakes the answer appear is letting your thoughts drift a bit—and thus drift off the wrong\npath you'd been pursuing last night and onto the right one adjacent\nto it.Chance meetings let your acquaintance drift in the same way taking\na shower lets your thoughts drift. The critical thing in both cases\nis that they drift just the right amount.  The meeting between Larry\nPage and Sergey Brin was a good example.  They let their acquaintance\ndrift, but only a little; they were both meeting someone they had\na lot in common with.For Larry Page the most important component of the antidote was\nSergey Brin, and vice versa.  The antidote is\npeople.  It's not the\nphysical infrastructure of Silicon Valley that makes it work, or\nthe weather, or anything like that.  Those helped get it started,\nbut now that the reaction is self-sustaining what drives it is the\npeople.Many observers have noticed that one of the most distinctive things\nabout startup hubs is the degree to which people help one another\nout, with no expectation of getting anything in return.  I'm not\nsure why this is so.  Perhaps it's because startups are less of a\nzero sum game than most types of business; they are rarely killed\nby competitors.  Or perhaps it's because so many startup founders\nhave backgrounds in the sciences, where collaboration is encouraged.A large part of YC's function is to accelerate that process.  We're\na sort of Valley within the Valley, where the density of people\nworking on startups and their willingness to help one another are\nboth artificially amplified.NumbersBoth components of the antidote—an environment that encourages\nstartups, and chance meetings with people who help you—are\ndriven by the same underlying cause: the number of startup people\naround you.  To make a startup hub, you need a lot of people\ninterested in startups.There are three reasons. The first, obviously, is that if you don't\nhave enough density, the chance meetings don't happen.\n[4]\nThe second is that different startups need such different things, so\nyou need a lot of people to supply each startup with what they need\nmost.  Sean Parker was exactly what Facebook needed in 2004.  Another\nstartup might have needed a database guy, or someone with connections\nin the movie business.This is one of the reasons we fund such a large number of companies,\nincidentally.  The bigger the community, the greater the chance it\nwill contain the person who has that one thing you need most.The third reason you need a lot of people to make a startup hub is\nthat once you have enough people interested in the same problem,\nthey start to set the social norms.  And it is a particularly\nvaluable thing when the atmosphere around you encourages you to do\nsomething that would otherwise seem too ambitious.  In most places\nthe atmosphere pulls you back toward the mean.I flew into the Bay Area a few days ago.  I notice this every time\nI fly over the Valley: somehow you can sense something is going on.\nObviously you can sense prosperity in how well kept a\nplace looks.  But there are different kinds of prosperity.  Silicon\nValley doesn't look like Boston, or New York, or LA, or DC.  I tried\nasking myself what word I'd use to describe the feeling the Valley\nradiated, and the word that came to mind was optimism.Notes[1]\nI'm not saying it's impossible to succeed in a city with few\nother startups, just harder.  If you're sufficiently good at\ngenerating your own morale, you can survive without external\nencouragement.  Wufoo was based in Tampa and they succeeded.  But\nthe Wufoos are exceptionally disciplined.[2]\nIncidentally, this phenomenon is not limited to startups.  Most\nunusual ambitions fail, unless the person who has them manages to\nfind the right sort of community.[3]\nStarting a company is common, but starting a startup is rare.\nI've talked about the distinction between the two elsewhere, but\nessentially a startup is a new business designed for scale.  Most\nnew businesses are service businesses and except in rare cases those\ndon't scale.[4]\nAs I was writing this, I had a demonstration of the density of\nstartup people in the Valley.  Jessica and I bicycled to University\nAve in Palo Alto to have lunch at the fabulous Oren's Hummus.  As\nwe walked in, we met Charlie Cheever sitting near the door.  Selina\nTobaccowala stopped to say hello on her way out.  Then Josh Wilson\ncame in to pick up a take out order.  After lunch we went to get\nfrozen yogurt.  On the way we met Rajat Suri.  When we got to the\nyogurt place, we found Dave Shen there, and as we walked out we ran\ninto Yuri Sagalov.  We walked with him for a block or so and we ran\ninto Muzzammil Zaveri, and then a block later we met Aydin Senkut.\nThis is everyday life in Palo Alto.  I wasn't trying to meet people;\nI was just having lunch.  And I'm sure for every startup founder\nor investor I saw that I knew, there were 5 more I didn't.  If Ron\nConway had been with us he would have met 30 people he knew.Thanks to Sam Altman, Paul Buchheit, Jessica Livingston, and\nHarj Taggar for reading drafts of this."},{"title":"Why Startups Condense in America","text":"May 2006(This essay is derived from a keynote at Xtech.)Startups happen in clusters.  There are a lot of them in Silicon\nValley and Boston, and few in Chicago or Miami.  A country that\nwants startups will probably also have to reproduce whatever makes\nthese clusters form.I've claimed that the recipe is a\ngreat university near a town smart\npeople like.  If you set up those conditions within the US, startups\nwill form as inevitably as water droplets condense on a cold piece\nof metal.  But when I consider what it would take to reproduce\nSilicon Valley in another country, it's clear the US is a particularly\nhumid environment.  Startups condense more easily here.It is by no means a lost cause to try to create a silicon valley\nin another country.  There's room not merely to equal Silicon Valley,\nbut to surpass it.  But if you want to do that, you have to\nunderstand the advantages startups get from being in America.1. The US Allows Immigration.For example, I doubt it would be possible to reproduce Silicon\nValley in Japan, because one of Silicon Valley's most distinctive\nfeatures is immigration.  Half the people there speak with accents.\nAnd the Japanese don't like immigration.  When they think about how\nto make a Japanese silicon valley, I suspect they unconsciously\nframe it as how to make one consisting only of Japanese people.\nThis way of framing the question probably guarantees failure.A silicon valley has to be a mecca for the smart and the ambitious,\nand you can't have a mecca if you don't let people into it.Of course, it's not saying much that America is more open to\nimmigration than Japan.  Immigration policy is one area where a\ncompetitor could do better.2. The US Is a Rich Country.I could see India one day producing a rival to Silicon Valley.\nObviously they have the right people: you can tell that by the\nnumber of Indians in the current Silicon Valley.  The problem with\nIndia itself is that it's still so poor.In poor countries, things we take for granted are missing.  A friend\nof mine visiting India sprained her ankle falling down the steps\nin a railway station.  When she turned to see what had happened,\nshe found the steps were all different heights.  In industrialized\ncountries we walk down steps our whole lives and never think about\nthis, because there's an infrastructure that prevents such a staircase\nfrom being built.The US has never been so poor as some countries are now.  There\nhave never been swarms of beggars in the streets of American cities.\nSo we have no data about what it takes to get from the swarms-of-beggars\nstage to the silicon-valley stage.  Could you have both at once,\nor does there have to be some baseline prosperity before you get a\nsilicon valley?I suspect there is some speed limit to the evolution\nof an economy.  Economies are made out of people, and attitudes can\nonly change a certain amount per generation.\n[1]3. The US Is Not (Yet) a Police State.Another country I could see wanting to have a silicon valley is\nChina.  But I doubt they could do it yet either.  China still seems\nto be a police state, and although present rulers seem enlightened\ncompared to the last, even enlightened despotism can probably only\nget you part way toward being a great economic power.It can get you factories for building things designed elsewhere.\nCan it get you the designers, though?  Can imagination flourish\nwhere people can't criticize the government?  Imagination means\nhaving odd ideas, and it's hard to have odd ideas about technology\nwithout also having odd ideas about politics.  And in any case,\nmany technical ideas do have political implications.  So if you\nsquash dissent, the back pressure will propagate into technical\nfields.\n[2]Singapore would face a similar problem.  Singapore seems very aware\nof the importance of encouraging startups.  But while energetic\ngovernment intervention may be able to make a port run efficiently,\nit can't coax startups into existence.  A state that bans chewing\ngum has a long way to go before it could create a San Francisco.Do you need a San Francisco?  Might there not be an alternate route\nto innovation that goes through obedience and cooperation instead\nof individualism?  Possibly, but I'd bet not.  Most imaginative\npeople seem to share a certain prickly independence,\nwhenever and wherever they lived.  You see it in Diogenes telling\nAlexander to get out of his light and two thousand years later in\nFeynman breaking into safes at Los Alamos.\n[3]\nImaginative people\ndon't want to follow or lead.  They're most productive when everyone\ngets to do what they want.Ironically, of all rich countries the US has lost the most civil\nliberties recently.  But I'm not too worried yet.  I'm hoping once\nthe present administration is out, the natural openness of American\nculture will reassert itself.4. American Universities Are Better.You need a great university to seed a silicon valley, and so far\nthere are few outside the US.  I asked a handful of American computer\nscience professors which universities in Europe were most admired,\nand they all basically said \"Cambridge\" followed by a long pause\nwhile they tried to think of others.  There don't seem to be many\nuniversities elsewhere that compare with the best in America, at\nleast in technology.In some countries this is the result of a deliberate policy.  The\nGerman and Dutch governments, perhaps from fear of elitism, try to\nensure that all universities are roughly equal in quality.  The\ndownside is that none are especially good.   The best professors\nare spread out, instead of being concentrated as they are in the\nUS.  This probably makes them less productive, because they don't\nhave good colleagues to inspire them.  It also means no one university\nwill be good enough to act as a mecca, attracting talent from abroad\nand causing startups to form around it.The case of Germany is a strange one.  The Germans invented the\nmodern university, and up till the 1930s theirs were the best in\nthe world.  Now they have none that stand out.  As I was mulling\nthis over, I found myself thinking: \"I can understand why German\nuniversities declined in the 1930s, after they excluded Jews.  But\nsurely they should have bounced back by now.\"  Then I realized:\nmaybe not.  There are few Jews left in Germany and most Jews I know\nwould not want to move there.  And if you took any great American\nuniversity and removed the Jews, you'd have some pretty big gaps.\nSo maybe it would be a lost cause trying to create a silicon valley\nin Germany, because you couldn't establish the level of university\nyou'd need as a seed.\n[4]It's natural for US universities to compete with one another because\nso many are private.  To reproduce the quality of American universities\nyou probably also have to reproduce this.  If universities are\ncontrolled by the central government, log-rolling will pull them\nall toward the mean: the new Institute of X will end up at the\nuniversity in the district of a powerful politician, instead of\nwhere it should be.5. You Can Fire People in America.I think one of the biggest obstacles to creating startups in Europe\nis the attitude toward employment.  The famously rigid labor laws\nhurt every company, but startups especially, because startups have\nthe least time to spare for bureaucratic hassles.The difficulty of firing people is a particular problem for startups\nbecause they have no redundancy.  Every person has to do their\njob well.But the problem is more than just that some startup might have a\nproblem firing someone they needed to.  Across industries and\ncountries, there's a strong inverse correlation between performance\nand job security.  Actors and directors are fired at the end of\neach film, so they have to deliver every time.  Junior professors\nare fired by default after a few years unless the university chooses\nto grant them tenure.  Professional athletes know they'll be pulled\nif they play badly for just a couple games.  At the other end of\nthe scale (at least in the US) are auto workers, New York City\nschoolteachers, and civil servants, who are all nearly impossible\nto fire.  The trend is so clear that you'd have to be willfully\nblind not to see it.Performance isn't everything, you say?  Well, are auto workers,\nschoolteachers, and civil servants happier than actors,\nprofessors, and professional athletes?European public opinion will apparently tolerate people being fired\nin industries where they really care about performance.  Unfortunately\nthe only industry they care enough about so far is soccer.  But\nthat is at least a precedent.6. In America Work Is Less Identified with Employment.The problem in more traditional places like Europe and Japan goes\ndeeper than the employment laws.  More dangerous is the attitude\nthey reflect: that an employee is a kind of servant, whom the\nemployer has a duty to protect.  It used to be that way in America\ntoo.  In 1970 you were still supposed to get a job with a big\ncompany, for whom ideally you'd work your whole career.  In return\nthe company would take care of you: they'd try not to fire you,\ncover your medical expenses, and support you in old age.Gradually employment has been shedding such paternalistic overtones\nand becoming simply an economic exchange.  But the importance of\nthe new model is not just that it makes it easier for startups to\ngrow.  More important, I think, is that it it makes it easier for\npeople to start startups.Even in the US most kids graduating from college still think they're\nsupposed to get jobs, as if you couldn't be productive without being\nsomeone's employee.  But the less you identify work with employment,\nthe easier it becomes to start a startup.  When you see your career\nas a series of different types of work, instead of a lifetime's\nservice to a single employer, there's less risk in starting your\nown company, because you're only replacing one segment instead of\ndiscarding the whole thing.The old ideas are so powerful that even the most successful startup\nfounders have had to struggle against them.  A year after the\nfounding of Apple, Steve Wozniak still hadn't quit HP.  He still\nplanned to work there for life.  And when Jobs found someone to\ngive Apple serious venture funding, on the condition that Woz quit,\nhe initially refused, arguing that he'd designed both the Apple I\nand the Apple II while working at HP, and there was no reason he\ncouldn't continue.7.  America Is Not Too Fussy.If there are any laws regulating businesses, you can assume larval\nstartups will break most of them, because they don't know what the\nlaws are and don't have time to find out.For example, many startups in America begin in places where it's\nnot really legal to run a business.  Hewlett-Packard, Apple, and\nGoogle were all run out of garages.  Many more startups, including\nours, were initially run out of apartments.  If the laws against\nsuch things were actually enforced, most startups wouldn't happen.That could be a problem in fussier countries.  If Hewlett and Packard\ntried running an electronics company out of their garage in\nSwitzerland, the old lady next door would report them to the municipal\nauthorities.But the worst problem in other countries is probably the effort\nrequired just to start a company.  A friend of mine started a company\nin Germany in the early 90s, and was shocked to discover, among\nmany other regulations, that you needed $20,000 in capital to\nincorporate.  That's one reason I'm not typing this on an Apfel\nlaptop.  Jobs and Wozniak couldn't have come up with that kind of\nmoney in a company financed by selling a VW bus and an HP calculator.\nWe couldn't have started Viaweb either.\n[5]Here's a tip for governments that want to encourage startups: read\nthe stories of existing startups, and then try to simulate what\nwould have happened in your country.  When you hit something that\nwould have killed Apple, prune it off.Startups are marginal.\nThey're started by the poor and the\ntimid; they begin in marginal space and spare time; they're started\nby people who are supposed to be doing something else; and though\nbusinesses, their founders often know nothing about business.  Young\nstartups are fragile.  A society that trims its margins sharply\nwill kill them all.8. America Has a Large Domestic Market.What sustains a startup in the beginning is the prospect of getting\ntheir initial product out.  The successful ones therefore make the\nfirst version as simple as possible.  In the US they usually begin\nby making something just for the local market.This works in America, because the local market is 300 million\npeople.  It wouldn't work so well in Sweden.  In a small country,\na startup has a harder task: they have to sell internationally from\nthe start.The EU was designed partly to simulate a single, large domestic\nmarket.  The problem is that the inhabitants still speak many\ndifferent languages.  So a software startup in Sweden is still at\na disadvantage relative to one in the US, because they have to deal\nwith internationalization from the beginning.  It's significant\nthat the most famous recent startup in Europe, Skype, worked on a\nproblem that was intrinsically international.However, for better or worse it looks as if Europe will in a few\ndecades speak a single language.  When I was a student in Italy in\n1990, few Italians spoke English.  Now all educated people seem to\nbe expected to-- and Europeans do not like to seem uneducated.  This\nis presumably a taboo subject, but if present trends continue,\nFrench and German will eventually go the way of Irish and Luxembourgish:\nthey'll be spoken in homes and by eccentric nationalists.9. America Has Venture Funding.Startups are easier to start in America because funding is easier\nto get.  There are now a few VC firms outside the US, but startup\nfunding doesn't only come from VC firms.  A more important source,\nbecause it's more personal and comes earlier in the process, is\nmoney from individual angel investors.  Google might never have got\nto the point where they could raise millions from VC funds if they\nhadn't first raised a hundred thousand from Andy Bechtolsheim.  And\nhe could help them because he was one of the founders of Sun.  This\npattern is repeated constantly in startup hubs.  It's this pattern\nthat makes them startup hubs.The good news is, all you have to do to get the process rolling is\nget those first few startups successfully launched.  If they stick\naround after they get rich, startup founders will almost automatically\nfund and encourage new startups.The bad news is that the cycle is slow.  It probably takes five\nyears, on average, before a startup founder can make angel investments.\nAnd while governments might be able to set up local VC funds\nby supplying the money themselves and recruiting people from existing\nfirms to run them, only organic growth can produce angel investors.Incidentally, America's private universities are one reason there's\nso much venture capital.  A lot of the money in VC funds comes from\ntheir endowments.  So another advantage of private universities is\nthat a good chunk of the country's wealth is managed by enlightened\ninvestors.10. America Has Dynamic Typing for Careers.Compared to other industrialized countries the US is disorganized\nabout routing people into careers.  For example, in America people\noften don't decide to go to medical school till they've finished\ncollege.  In Europe they generally decide in high school.The European approach reflects the old idea that each person has a\nsingle, definite occupation-- which is not far from the idea that\neach person has a natural \"station\" in life.  If this were true,\nthe most efficient plan would be to discover each person's station\nas early as possible, so they could receive the training appropriate\nto it.In the US things are more haphazard.  But that turns out to be an\nadvantage as an economy gets more liquid, just as dynamic typing\nturns out to work better than static for ill-defined problems.  This\nis particularly true with startups.  \"Startup founder\" is not the\nsort of career a high school student would choose.  If you ask at\nthat age, people will choose conservatively.  They'll choose\nwell-understood occupations like engineer, or doctor, or lawyer.Startups are the kind of thing people don't plan, so you're more\nlikely to get them in a society where it's ok to make career decisions\non the fly.For example, in theory the purpose of a PhD program is to train you\nto do research.  But fortunately in the US this is another rule\nthat isn't very strictly enforced.  In the US most people in CS PhD\nprograms are there simply because they wanted to learn more.  They\nhaven't decided what they'll do afterward.  So American grad schools\nspawn a lot of startups, because students don't feel they're failing\nif they don't go into research.Those worried about America's \"competitiveness\" often suggest\nspending more on public schools.  But perhaps America's lousy public\nschools have a hidden advantage.  Because they're so bad, the kids\nadopt an attitude of waiting for college.  I did; I knew I was\nlearning so little that I wasn't even learning what the choices\nwere, let alone which to choose.  This is demoralizing, but it does\nat least make you keep an open mind.Certainly if I had to choose between bad high schools and good\nuniversities, like the US, and good high schools and bad universities,\nlike most other industrialized countries, I'd take the US system.\nBetter to make everyone feel like a late bloomer than a failed child\nprodigy.AttitudesThere's one item conspicuously missing from this list: American\nattitudes.  Americans are said to be more entrepreneurial, and less\nafraid of risk.  But America has no monopoly on this.  Indians and\nChinese seem plenty entrepreneurial, perhaps more than Americans.Some say Europeans are less energetic, but I don't believe it.  I\nthink the problem with Europe is not that they lack balls, but that\nthey lack examples.Even in the US, the most successful startup founders are often\ntechnical people who are quite timid, initially, about the idea of\nstarting their own company. Few are the sort of backslapping\nextroverts one thinks of as typically American.  They can usually\nonly summon up the activation energy to start a startup when they\nmeet people who've done it and realize they could too.I think what holds back European hackers is simply that they don't\nmeet so many people who've done it. You see that variation even\nwithin the US.  Stanford students are more entrepreneurial than\nYale students, but not because of some difference in their characters;\nthe Yale students just have fewer examples.I admit there seem to be different attitudes toward ambition in\nEurope and the US.  In the US it's ok to be overtly ambitious, and\nin most of Europe it's not.  But this can't be an intrinsically\nEuropean quality; previous generations of Europeans were as ambitious\nas Americans.  What happened?  My hypothesis is that ambition was\ndiscredited by the terrible things ambitious people did in the first\nhalf of the twentieth century.  Now swagger is out. (Even now the\nimage of a very ambitious German presses a button or two, doesn't\nit?)It would be surprising if European attitudes weren't affected by\nthe disasters of the twentieth century.  It takes a while to be\noptimistic after events like that.  But ambition is human nature.\nGradually it will re-emerge.\n[6]How To Do BetterI don't mean to suggest by this list that America is the perfect\nplace for startups.  It's the best place so far, but the sample\nsize is small, and \"so far\" is not very long.   On historical time\nscales, what we have now is just a\nprototype.So let's look at Silicon Valley the way you'd look at a product\nmade by a competitor.  What weaknesses could you exploit?  How could\nyou make something users would like better?  The users in this case\nare those critical few thousand people you'd like to move to your\nsilicon valley.To start with, Silicon Valley is too far from San Francisco.  Palo\nAlto, the original ground zero, is about thirty miles away, and the\npresent center more like forty.  So people who come to work in\nSilicon Valley face an unpleasant choice: either live in the boring\nsprawl of the valley proper, or live in San Francisco and endure\nan hour commute each way.The best thing would be if the silicon valley were not merely closer\nto the interesting city, but interesting itself.  And there is a\nlot of room for improvement here.  Palo Alto is not so bad, but\neverything built since is the worst sort of strip development.  You\ncan measure how demoralizing it is by the number of people who will\nsacrifice two hours a day commuting rather than live there.Another area in which you could easily surpass Silicon Valley is\npublic transportation.  There is a train running the length of it,\nand by American standards it's not bad.  Which is to say that to\nJapanese or Europeans it would seem like something out of the third\nworld.The kind of people you want to attract to your silicon valley like\nto get around by train, bicycle, and on foot.  So if you want to\nbeat America, design a town that puts cars last.  It will be a while\nbefore any American city can bring itself to do that.Capital GainsThere are also a couple things you could do to beat America at the\nnational level.  One would be to have lower capital gains taxes.\nIt doesn't seem critical to have the lowest income taxes,\nbecause to take advantage of those, people have to move.\n[7]\nBut\nif capital gains rates vary, you move assets, not yourself, so\nchanges are reflected at market speeds.  The lower the rate, the\ncheaper it is to buy stock in growing companies as opposed to real\nestate, or bonds, or stocks bought for the dividends they pay.So if you want to encourage startups you should have a low rate on\ncapital gains.  Politicians are caught between a rock and a hard\nplace here, however: make the capital gains rate low and be accused\nof creating \"tax breaks for the rich,\" or make it high and starve\ngrowing companies of investment capital.   As Galbraith said,\npolitics is a matter of choosing between the unpalatable and the\ndisastrous.  A lot of governments experimented with the disastrous\nin the twentieth century; now the trend seems to be toward the\nmerely unpalatable.Oddly enough, the leaders now are European countries like Belgium,\nwhich has a capital gains tax rate of zero.ImmigrationThe other place you could beat the US would be with smarter immigration\npolicy.  There are huge gains to be made here.  Silicon valleys are\nmade of people, remember.Like a company whose software runs on Windows, those in the current\nSilicon Valley are all too aware of the shortcomings of the INS,\nbut there's little they can do about it.  They're hostages of the\nplatform.America's immigration system has never been well run, and since\n2001 there has been an additional admixture of paranoia.  What\nfraction of the smart people who want to come to America can even\nget in?  I doubt even half.  Which means if you made a competing\ntechnology hub that let in all smart people, you'd immediately get\nmore than half the world's top talent, for free.US immigration policy is particularly ill-suited to startups, because\nit reflects a model of work from the 1970s.  It assumes good technical\npeople have college degrees, and that work means working for a big\ncompany.If you don't have a college degree you can't get an H1B visa, the\ntype usually issued to programmers.  But a test that excludes Steve\nJobs, Bill Gates, and Michael Dell can't be a good one.  Plus you\ncan't get a visa for working on your own company, only for working\nas an employee of someone else's.  And if you want to apply for\ncitizenship you daren't work for a startup at all, because if your\nsponsor goes out of business, you have to start over.American immigration policy keeps out most smart people, and channels\nthe rest into unproductive jobs.  It would be easy to do better.\nImagine if, instead, you treated immigration like recruiting-- if\nyou made a conscious effort to seek out the smartest people and get\nthem to come to your country.A country that got immigration right would have a huge advantage.\nAt this point you could become a mecca for smart people simply by\nhaving an immigration system that let them in.A Good VectorIf you look at the kinds of things you have to do to create an\nenvironment where startups condense, none are great sacrifices.\nGreat universities?  Livable towns?  Civil liberties?  Flexible\nemployment laws?  Immigration policies that let in smart people?\nTax laws that encourage growth?  It's not as if you have to risk\ndestroying your country to get a silicon valley; these are all good\nthings in their own right.And then of course there's the question, can you afford not to?  I\ncan imagine a future in which the default choice of ambitious young\npeople is to start their own company\nrather than work for someone else's.  I'm not sure that will happen,\nbut it's where the trend points now.  And if that is the future,\nplaces that don't have startups will be a whole step behind,\nlike those that missed the Industrial Revolution.Notes[1]\nOn the verge of the Industrial Revolution, England was already\nthe richest country in the world.  As far as such things can be\ncompared, per capita income in England in 1750 was higher than\nIndia's in 1960.Deane, Phyllis, The First Industrial Revolution, Cambridge\nUniversity Press, 1965.[2]\nThis has already happened once in China, during the Ming\nDynasty, when the country turned its back on industrialization at\nthe command of the court.  One of Europe's advantages was that it\nhad no government powerful enough to do that.[3]\nOf course, Feynman and Diogenes were from adjacent traditions,\nbut Confucius, though more polite, was no more willing to be told\nwhat to think.[4]\nFor similar reasons it might be a lost cause to try to establish\na silicon valley in Israel.  Instead of no Jews moving there, only\nJews would move there, and I don't think you could build a silicon\nvalley out of just Jews any more than you could out of just Japanese.(This is not a remark about the qualities of these groups, just their\nsizes.  Japanese are only about 2% of the world population, and\nJews about .2%.)[5]\nAccording to the World Bank, the initial capital requirement\nfor German companies is 47.6% of the per capita income.  Doh.World Bank, Doing Business in 2006, http://doingbusiness.org[6]\nFor most of the twentieth century, Europeans looked back on\nthe summer of 1914 as if they'd been living in a dream world.  It\nseems more accurate (or at least, as accurate) to call the years\nafter 1914 a nightmare than to call those before a dream.  A lot\nof the optimism Europeans consider distinctly American is simply\nwhat they too were feeling in 1914.[7]\nThe point where things start to go wrong seems to be about\n50%.  Above that people get serious about tax avoidance.  The reason\nis that the payoff for avoiding tax grows hyperexponentially (x/1-x\nfor 0 < x < 1).  If your income tax rate is 10%, moving to Monaco\nwould only give you 11% more income, which wouldn't even cover the\nextra cost.  If it's 90%, you'd get ten times as much income.  And\nat 98%, as it was briefly in Britain in the 70s, moving to Monaco\nwould give you fifty times as much income.  It seems quite likely\nthat European governments of the 70s never drew this curve.Thanks to Trevor Blackwell, Matthias Felleisen, Jessica\nLivingston, Robert Morris, Neil Rimer, Hugues Steinier, Brad\nTempleton, Fred Wilson, and Stephen Wolfram for reading\ndrafts of this, and to Ed Dumbill for inviting me to speak."},{"title":"Why TV Lost","text":"March 2009About twenty years ago people noticed computers and TV were on a\ncollision course and started to speculate about what they'd produce\nwhen they converged.  We now know the answer: computers.  It's clear\nnow that even by using the word \"convergence\" we were giving TV too\nmuch credit.  This won't be convergence so much as replacement.\nPeople may still watch things they call \"TV shows,\" but they'll\nwatch them mostly on computers.What decided the contest for computers?  Four forces, three of which\none could have predicted, and one that would have been harder to.One predictable cause of victory is that the Internet is an open\nplatform.  Anyone can build whatever they want on it, and the market\npicks the winners.  So innovation happens at hacker speeds instead\nof big company speeds.The second is Moore's Law, which has worked its usual magic on\nInternet bandwidth.\n[1]The third reason computers won is piracy. Users prefer it\nnot just because it's free, but because it's\nmore convenient.  Bittorrent and YouTube have already trained a new\ngeneration of viewers that the place to watch shows is on a computer\nscreen.\n[2]The somewhat more surprising force was one specific type of innovation:\nsocial applications.  The average teenage kid has a pretty much\ninfinite capacity for talking to their friends.  But they can't\nphysically be with them all the time.  When I was in high school\nthe solution was the telephone.  Now it's social networks, multiplayer\ngames, and various messaging applications.  The way you reach them\nall is through a computer.\n[3]\nWhich means every teenage kid (a)\nwants a computer with an Internet connection, (b) has an incentive\nto figure out how to use it, and (c) spends countless hours in front\nof it.This was the most powerful force of all.  This was what made everyone\nwant computers.  Nerds got computers because they liked them.  Then\ngamers got them to play games on.  But it was connecting to other\npeople that got everyone else: that's what made even grandmas and\n14 year old girls want computers.\nAfter decades of running an IV drip right into their audience,\npeople in the entertainment business had understandably come to\nthink of them as rather passive.  They thought they'd be able to\ndictate the way shows reached audiences.  But they underestimated\nthe force of their desire to connect with one another.Facebook killed TV.  That is wildly oversimplified, of course, but\nprobably as close to the truth as you can get in three words.___The TV networks already seem, grudgingly, to see where things are\ngoing, and have responded by putting their stuff, grudgingly, online.\nBut they're still dragging their heels.  They still seem to wish\npeople would watch shows on TV instead, just as newspapers that put\ntheir stories online still seem to wish people would wait till the\nnext morning and read them printed on paper.  They should both just\nface the fact that the Internet is the primary medium.They'd be in a better position if they'd done that earlier.  When\na new medium arises that's powerful enough to make incumbents\nnervous, then it's probably powerful enough to win, and the best\nthing they can do is jump in immediately.Whether they like it or not, big changes are coming, because the\nInternet dissolves the two cornerstones of broadcast media:\nsynchronicity and locality.  On the Internet, you don't have to\nsend everyone the same signal, and you don't have to send it to\nthem from a local source.  People will watch what they want when\nthey want it, and group themselves according to whatever shared\ninterest they feel most strongly.  Maybe their strongest shared\ninterest will be their physical location, but I'm guessing not.\nWhich means local TV is probably dead.  It was an artifact of\nlimitations imposed by old technology.  If someone were creating\nan Internet-based TV company from scratch now, they might have some\nplan for shows aimed at specific regions, but it wouldn't be a top\npriority.Synchronicity and locality are tied together.  TV network affiliates\ncare what's on at 10 because that delivers viewers for local news\nat 11.  This connection adds more brittleness than strength, however:\npeople don't watch what's on at 10 because they want to watch the\nnews afterward.TV networks will fight these trends, because they don't have\nsufficient flexibility to adapt to them.  They're hemmed in by local\naffiliates in much the same way car companies are hemmed in by\ndealers and unions.  Inevitably, the people running the networks\nwill take the easy route and try to keep the old model running for\na couple more years, just as the record labels have done.A recent article in the Wall Street Journal described how TV networks\nwere trying to add more live shows, partly as a way to make viewers\nwatch TV synchronously instead of watching recorded shows when it\nsuited them.  Instead of delivering what viewers want, they're\ntrying to force them to change their habits to suit the networks'\nobsolete business model.  That never works unless you have a monopoly\nor cartel to enforce it, and even then it only works temporarily.The other reason networks like live shows is that they're cheaper\nto produce.  There they have the right idea, but they haven't\nfollowed it to its conclusion.   Live content can be way cheaper\nthan networks realize, and the way to take advantage of dramatic\ndecreases in cost is to\nincrease volume.  The networks are prevented\nfrom seeing this whole line of reasoning because they still think\nof themselves as being in the broadcast business—as sending one\nsignal to everyone.\n[4]___Now would be a good time to start any company that competes with\nTV networks.  That's what a lot of Internet startups are, though\nthey may not have had this as an explicit goal.  People only have\nso many leisure hours a day, and TV is premised on such long sessions\n(unlike Google, which prides itself on sending users on their way\nquickly) that anything that takes up their time is competing with\nit.  But in addition to such indirect competitors, I think TV\ncompanies will increasingly face direct ones.Even in cable TV, the long tail was lopped off prematurely by the\nthreshold you had to get over to start a new channel.  It will be\nlonger on the Internet, and there will be more mobility within it.\nIn this new world, the existing players will only have the advantages\nany big company has in its market.That will change the balance of power between the networks and the\npeople who produce shows.  The networks used to be gatekeepers.\nThey distributed your work, and sold advertising on it.  Now the\npeople who produce a show can distribute it themselves.  The main\nvalue networks supply now is ad sales.  Which will tend to put them\nin the position of service providers rather than publishers.Shows will change even more.  On the Internet there's no reason to\nkeep their current format, or even the fact that they have a single\nformat.  Indeed, the more interesting sort of convergence that's\ncoming is between shows and games.  But on the question of what\nsort of entertainment gets distributed on the Internet in 20 years,\nI wouldn't dare to make any predictions, except that things will\nchange a lot.  We'll get whatever the most imaginative people can\ncook up.  That's why the Internet won.Notes[1]\nThanks to Trevor Blackwell for this point.  He adds: \"I\nremember the eyes of phone companies gleaming in the early 90s when\nthey talked about convergence.  They thought most programming would\nbe on demand, and they would implement it and make a lot of money.\nIt didn't work out. They assumed that their local network infrastructure\nwould be critical to do video on-demand, because you couldn't\npossibly stream it from a few data centers over the internet. At\nthe time (1992) the entire cross-country Internet bandwidth wasn't\nenough for one video stream. But wide-area bandwidth increased more\nthan they expected and they were beaten by iTunes and Hulu.\"[2]\nCopyright owners tend to focus on the aspect they see of\npiracy, which is the lost revenue.  They therefore think what drives\nusers to do it is the desire to get something for free.  But iTunes\nshows that people will pay for stuff online, if you make it easy.\nA significant component of piracy is simply that it offers a better\nuser experience.[3]\nOr a phone that is actually a computer.  I'm not making any\npredictions about the size of the device that will replace TV, just\nthat it will have a browser and get data via the Internet.[4]\nEmmett Shear writes: \"I'd argue the long tail for sports may\nbe even larger than the long tail for other kinds of content. Anyone\ncan broadcast a high school football game that will be interesting\nto 10,000 people or so, even if the quality of production is not\nso good.\"Thanks to Sam Altman, Trevor Blackwell, Nancy Cook, Michael Seibel.\nEmmett Shear, and Fred Wilson for reading drafts of this."},{"title":"Why There Aren't More Googles","text":"April 2008Umair Haque\nwrote recently that the reason there aren't more Googles is\nthat most startups get bought before they can change the world.\nGoogle, despite serious interest from Microsoft and Yahoo—what\nmust have seemed like lucrative interest at the time—didn't\nsell out. Google might simply have been nothing but Yahoo's or\nMSN's search box.Why isn't it? Because Google had a deeply felt sense of purpose:\na conviction to change the world for the better.\nThis has a nice sound to it, but it isn't true.\nGoogle's founders were willing to sell early on.\nThey just wanted more than acquirers were willing to pay.It was the same with Facebook.  They would have sold, but Yahoo blew it\nby offering too little.Tip for acquirers: when a startup turns you down, consider raising\nyour offer, because there's a good chance the outrageous price they\nwant will later seem a bargain.\n[1]From the evidence I've seen so far,\nstartups that turn down acquisition offers usually end up doing better.\nNot always, but usually there's a bigger offer coming, or\nperhaps even an IPO.Of course, the reason startups do better when they turn down\nacquisition offers is not necessarily that all such offers undervalue\nstartups.  More likely the reason is that the kind of founders who\nhave the balls to turn down a big offer also tend to be very\nsuccessful.  That spirit is exactly what you want in a startup.While I'm sure Larry and Sergey do want to change the world, at\nleast now, the reason Google survived to become a big, independent\ncompany is the same reason Facebook has so far remained independent:\nacquirers underestimated them.Corporate M&A is a strange business in that respect.  They consistently\nlose the best deals, because turning down reasonable offers is the\nmost reliable test you could invent for whether a startup will make\nit big.VCsSo what's the real reason there aren't more Googles?  Curiously\nenough, it's the same reason Google and Facebook have remained\nindependent: money guys undervalue the most innovative startups.The reason there aren't more Googles is not that investors encourage\ninnovative startups to sell out, but that they won't even fund them.\nI've learned a lot about VCs during the 3 years we've been doing Y\nCombinator, because we often have to work quite closely with them.\nThe most surprising thing I've learned is how conservative they\nare.  VC firms present an image of boldly encouraging innovation.\nOnly a handful actually do, and even they are more conservative in\nreality than you'd guess from reading their sites.I used to think of VCs as piratical: bold but unscrupulous.  On\ncloser acquaintance they turn out to be more like bureaucrats.\nThey're more upstanding than I used to think (the good ones, at\nleast), but less bold.  Maybe the VC industry has changed.  Maybe\nthey used to be bolder.\nBut I suspect it's the startup world that has\nchanged, not them.  The low cost of starting a startup means the\naverage good bet is a riskier one, but most existing VC firms still\noperate as if they were investing in hardware startups in 1985.Howard Aiken said \"Don't worry about people stealing your ideas.\nIf your ideas are any good, you'll have to ram them down people's\nthroats.\" I have a similar feeling when I'm trying to convince VCs\nto invest in startups Y Combinator has funded.  They're terrified\nof really novel ideas, unless the founders are good enough salesmen\nto compensate.But it's the bold ideas that generate the biggest returns.  Any\nreally good new idea will seem bad to most people; otherwise someone\nwould already be doing it.  And\nyet most VCs are driven by consensus, not just within their firms,\nbut within the VC community.  The biggest factor determining how a\nVC will feel about your startup is how other VCs feel about it.  I\ndoubt they realize it, but this algorithm guarantees they'll miss\nall the very best ideas.  The more people who have to like a new\nidea, the more outliers you lose.Whoever the next Google is, they're probably being told right now\nby VCs to come back when they have more \"traction.\"Why are VCs so conservative?  It's probably a combination of factors.\nThe large size of their investments makes them conservative.\nPlus they're investing other people's money, which makes\nthem worry they'll get in trouble if they do something risky and\nit fails.  Plus most of them are money guys rather than technical\nguys, so they don't understand what the startups they're investing\nin do.What's NextThe exciting thing about market economies is that stupidity equals\nopportunity.  And so it is in this case.  There is a huge, unexploited\nopportunity in startup investing.  Y Combinator funds startups at\nthe very beginning.  VCs will fund them once they're already starting\nto succeed.  But between the two there is a substantial gap.There are companies that will give $20k to a startup that has nothing\nmore than the founders, and there are companies that will give $2\nmillion to a startup that's already taking off,\nbut there aren't enough investors who will give $200k to a startup\nthat seems very promising but still has some things to figure out.\nThis territory is occupied mostly by\nindividual angel investors—people like Andy Bechtolsheim, who\ngave Google $100k when they seemed promising but still had some\nthings to figure out. I like angels, but there just aren't enough\nof them, and investing is for most of them a part time job.And yet as it gets cheaper to start startups, this sparsely occupied\nterritory is becoming more and more valuable.   Nowadays a lot of\nstartups don't want to raise multi-million dollar series A rounds.\nThey don't need that much money, and they don't want the hassles\nthat come with it.  The median startup coming out of Y Combinator\nwants to raise $250-500k.  When they go to VC firms they have to\nask for more because they know VCs aren't interested in such small\ndeals.VCs are money managers.  They're looking for ways to put large sums\nto work.  But the startup world is evolving away from their current\nmodel.Startups have gotten cheaper.  That means they want less money, but\nalso that there are more of them.  So you can still get large returns\non large amounts of money; you just have to spread it more broadly.I've tried to explain this to VC firms.  Instead of making one $2\nmillion investment, make five $400k investments.  Would that mean\nsitting on too many boards?  Don't sit on their boards.  Would that\nmean too much due diligence?  Do less.  If you're investing at a\ntenth the valuation, you only have to be a tenth as sure.It seems obvious.  But I've proposed to several VC firms that they\nset aside some money and designate one partner to make more, smaller\nbets, and they react as if I'd proposed the partners all get nose\nrings.  It's remarkable how wedded they are to their standard m.o.But there is a big opportunity here, and one way or the other it's\ngoing to get filled.  Either VCs will evolve down into this gap or,\nmore likely, new investors will appear to fill it.  That will be a\ngood thing when it happens, because these new investors will be\ncompelled by the structure of the investments they make to be ten\ntimes bolder than present day VCs.  And that will get us a lot more\nGoogles.  At least, as long as acquirers remain stupid.Notes[1]\nAnother tip: If you want to get all that value, don't destroy the\nstartup after you buy it.  Give the founders enough autonomy that\nthey can grow the acquisition into what it would have become.Thanks to Sam Altman, Paul Buchheit, David Hornik, Jessica\nLivingston, Robert Morris, and Fred Wilson for reading drafts of this."},{"title":"Why YC","text":"March 2006, rev August 2009Yesterday one of the founders we funded asked me why we started\nCombinator.  Or more precisely, he asked if we'd started YC mainly\nfor fun.Kind of, but not quite.  It is enormously fun to be able to work\nwith Rtm and Trevor again.  I missed that after we sold Viaweb, and\nfor all the years after I always had a background process running,\nlooking for something we could do together.  There is definitely\nan aspect of a band reunion to Y Combinator.  Every couple days I\nslip and call it \"Viaweb.\"Viaweb we started very explicitly to make money.  I was sick of\nliving from one freelance project to the next, and decided to just\nwork as hard as I could till I'd made enough to solve the problem\nonce and for all.  Viaweb was sometimes fun, but it wasn't designed\nfor fun, and mostly it wasn't.  I'd be surprised if any startup is.\nAll startups are mostly schleps.The real reason we started Y Combinator is neither selfish nor\nvirtuous.  We didn't start it mainly to make money; we have no idea\nwhat our average returns might be, and won't know for years.  Nor\ndid we start YC mainly to help out young would-be founders, though\nwe do like the idea, and comfort ourselves occasionally with the\nthought that if all our investments tank, we will thus have been\ndoing something unselfish.  (It's oddly nondeterministic.)The real reason we started Y Combinator is one probably only a\nhacker would understand.  We did it because it seems such a great\nhack.  There are thousands of smart people who could start companies\nand don't, and with a relatively small amount of force applied at\njust the right place, we can spring on the world a stream of new\nstartups that might otherwise not have existed.In a way this is virtuous, because I think startups are a good\nthing.  But really what motivates us is the completely amoral desire\nthat would motivate any hacker who looked at some complex device\nand realized that with a tiny tweak he could make it run more\nefficiently.  In this case, the device is the world's economy, which\nfortunately happens to be open source."},{"title":"Why to Move to a Startup Hub","text":"October 2007After the last\ntalk I gave, one of the organizers\ngot up on the\nstage to deliver an impromptu rebuttal.  That never happened before.\nI only heard the first few sentences, but that was enough to tell\nwhat I said that upset him: that startups would do better if they\nmoved to Silicon Valley.This conference was in London, and most of the audience seemed to\nbe from the UK.  So saying startups should move to Silicon Valley\nseemed like a nationalistic remark: an obnoxious American telling\nthem that if they wanted to do things right they should all just\nmove to America.Actually I'm less American than I seem.  I didn't say so, but I'm\nBritish by birth.  And just as Jews are ex officio allowed to tell\nJewish jokes, I don't feel like I have to bother being diplomatic\nwith a British audience.The idea that startups would do better to move to Silicon Valley\nis not even a nationalistic one.\n[1]\nIt's the same thing I say to\nstartups in the US.  Y Combinator alternates between coasts every\n6 months. Every other funding cycle is in Boston.  And even though\nBoston is the second biggest startup hub in the US (and the world),\nwe tell the startups from those cycles that their best bet is to\nmove to Silicon Valley.  If that's true of Boston, it's even more\ntrue of every other city.This is about cities, not countries.And I think I can prove I'm right.  You can easily reduce the\nopposing argument ad what most people would agree was absurdum.\nFew would be willing to claim that it doesn't matter at all where\na startup is—that a startup operating out of a small agricultural\ntown wouldn't benefit from moving to a startup hub.  Most people\ncould see how it might be helpful to be in a place where there was\ninfrastructure for startups, accumulated knowledge about how to\nmake them work, and other people trying to do it.  And yet whatever\nargument you use to prove that startups don't need to move from\nLondon to Silicon Valley could equally well be used to prove startups\ndon't need to move from smaller towns to London.The difference between cities is a matter of degree.  And if, as\nnearly everyone who knows agrees, startups are better off in Silicon\nValley than Boston, then they're better off in Silicon Valley than\neverywhere else too.I realize I might seem to have a vested interest in this conclusion,\nbecause startups that move to the US might do it through Y Combinator.\nBut the American startups we've funded will attest that I say the\nsame thing to them.I'm not claiming of course that every startup has to go to Silicon\nValley to succeed.  Just that all other things being equal, the\nmore of a startup hub a place is, the better startups will do there.\nBut other considerations can outweigh the advantages of moving.\nI'm not saying founders with families should uproot them to move\nhalfway around the world; that might be too much of a distraction.Immigration difficulties might be another reason to stay put.\nDealing with immigration problems is like raising money: for some\nreason it seems to consume all your attention.  A startup can't\nafford much of that.  One Canadian startup we funded spent about 6\nmonths working on moving to the US.  Eventually they just gave up,\nbecause they couldn't afford to take so much time away from working\non their software.(If another country wanted to establish a rival to Silicon Valley,\nthe single best thing they could do might be to create a special\nvisa for startup founders.  US immigration policy is one of Silicon\nValley's biggest weaknesses.)If your startup is connected to a specific industry, you may be\nbetter off in one of its centers.  A startup doing something related\nto entertainment might want to be in New York or LA.And finally, if a good investor has committed to fund\nyou if you stay where you are, you should probably stay.  Finding\ninvestors is hard.  You generally shouldn't pass up a definite\nfunding offer to move.\n[2]In fact, the quality of the investors may be the main advantage of\nstartup hubs.  Silicon Valley investors are noticeably more aggressive\nthan Boston ones.  Over and over, I've seen startups we've funded\nsnatched by west coast investors out from under the noses of Boston\ninvestors who saw them first but acted too slowly.  At this year's\nBoston Demo Day, I told the audience that this happened every year,\nso if they saw a startup they liked, they should make them an offer.\nAnd yet within a month it had happened again: an aggressive west\ncoast VC who had met the founder of a YC-funded startup a week\nbefore beat out a Boston VC who had known him for years.  By the\ntime the Boston VC grasped what was happening, the deal was already\ngone.Boston investors will admit they're more conservative.  Some want\nto believe this comes from the city's prudent Yankee character.\nBut Occam's razor suggests the truth is less flattering.  Boston\ninvestors are probably more conservative than Silicon Valley investors\nfor the same reason Chicago investors are more conservative than\nBoston ones.  They don't understand startups as well.West coast investors aren't bolder because they're irresponsible\ncowboys, or because the good weather makes them optimistic.  They're\nbolder because they know what they're doing.  They're the skiers\nwho ski on the diamond slopes.  Boldness is the essence of venture\ninvesting.  The way you get big returns is not by trying to avoid\nlosses, but by trying to ensure you get some of the big hits. And\nthe big hits often look risky at first.Like Facebook.  Facebook was started in Boston.  Boston VCs had the\nfirst shot at them.  But they said no, so Facebook moved to Silicon\nValley and raised money there.  The partner who turned them down\nnow says that \"may turn out to have been a mistake.\"Empirically, boldness wins.  If the aggressive ways of west coast\ninvestors are going to come back to bite them, it has been a long\ntime coming.  Silicon Valley has been pulling ahead of Boston since\nthe 1970s.  If there was going to be a comeuppance for the west\ncoast investors, the bursting of the Bubble would have been it.\nBut since then the west coast has just pulled further ahead.West coast investors are confident enough of their judgement to act\nboldly; east coast investors, not so much; but anyone who thinks\neast coast investors act that way out of prudence should see the\nfrantic reactions of an east coast VC in the process of losing a\ndeal to a west coast one.In addition to the concentration that comes from specialization,\nstartup hubs are also markets.  And markets are usually centralized.\nEven now, when traders could be anywhere, they cluster in a few\ncities.  It's hard to say exactly what it is about face to face\ncontact that makes deals happen, but whatever it is, it hasn't yet\nbeen duplicated by technology.Walk down University Ave at the right time, and you might overhear\nfive different people talking on the phone about deals.  In fact,\nthis is part of the reason Y Combinator is in Boston half the time:\nit's hard to stand that year round.  But though it can sometimes\nbe annoying to be surrounded by people who only think about one\nthing, it's the place to be if that one thing is what you're trying\nto do.I was talking recently to someone who works on search at Google.\nHe knew a lot of people at Yahoo, so he was in a good position to\ncompare the two companies.  I asked him why Google was better at\nsearch.  He said it wasn't anything specific Google did, but simply\nthat they understood search so much better.And that's why startups thrive in startup hubs like Silicon Valley.\nStartups are a very specialized business, as specialized as diamond\ncutting.  And in startup hubs they understand it.Notes[1]\nThe nationalistic idea is the converse: that startups should\nstay in a certain city because of the country it's in.  If you\nreally have a \"one world\" viewpoint, deciding to move from London\nto Silicon Valley is no different from deciding to move from Chicago\nto Silicon Valley.[2]\nAn investor who merely seems like he will fund you, however,\nyou can ignore.  Seeming like they will fund you one day is the way\ninvestors say No.Thanks to Sam Altman, Jessica Livingston, Harjeet Taggar, and Kulveer\nTaggar for reading drafts of this.\nComment on this essay."},{"title":"Why to Not Not Start a Startup","text":"March 2007(This essay is derived from talks at the 2007\nStartup School and the Berkeley CSUA.)We've now been doing Y Combinator long enough to have some data\nabout success rates.  Our first batch, in the summer of 2005, had\neight startups in it.  Of those eight, it now looks as if at least\nfour succeeded.  Three have been acquired:\nReddit was a merger of\ntwo, Reddit and Infogami, and a third was acquired that we can't\ntalk about yet.  Another from that batch was\nLoopt, which is doing\nso well they could probably be acquired in about ten minutes if\nthey wanted to.So about half the founders from that first summer, less than two\nyears ago, are now rich, at least by their standards.  (One thing\nyou learn when you get rich is that there are many degrees of it.)I'm not ready to predict our success rate will stay as high as 50%.\nThat first batch could have been an anomaly.  But we should be able\nto do better than the oft-quoted (and probably made\nup) standard figure of 10%.  I'd feel safe aiming at 25%.Even the founders who fail don't seem to have such a bad time.  Of\nthose first eight startups, three are now probably dead.  In two\ncases the founders just went on to do other things at the end of\nthe summer.   I don't think they were traumatized by the experience.\nThe closest to a traumatic failure was Kiko, whose founders kept\nworking on their startup for a whole year before being squashed by\nGoogle Calendar.  But they ended up happy.  They sold their software\non eBay for a quarter of a million dollars.  After they paid back\ntheir angel investors, they had about a year's salary each.\n[1]\nThen they immediately went on to start a new and much more exciting\nstartup, Justin.TV.So here is an even more striking statistic: 0% of that first batch\nhad a terrible experience.  They had ups and downs, like every\nstartup, but I don't think any would have traded it for a job in a\ncubicle.  And that statistic is probably not an anomaly.  Whatever\nour long-term success rate ends up being, I think the rate of people\nwho wish they'd gotten a regular job will stay close to 0%.The big mystery to me is: why don't more people start startups?  If\nnearly everyone who does it prefers it to a regular job, and a\nsignificant percentage get rich, why doesn't everyone want to do\nthis?  A lot of people think we get thousands of applications for\neach funding cycle.  In fact we usually only get several hundred.\nWhy don't more people apply?  And while it must seem to anyone\nwatching this world that startups are popping up like crazy, the\nnumber is small compared to the number of people with the necessary\nskills.  The great majority of programmers still go straight from\ncollege to cubicle, and stay there.It seems like people are not acting in their own interest.  What's\ngoing on?   Well, I can answer that.  Because of Y Combinator's\nposition at the very start of the venture funding process, we're\nprobably the world's leading experts on the psychology of people\nwho aren't sure if they want to start a company.There's nothing wrong with being unsure.  If you're a hacker thinking\nabout starting a startup and hesitating before taking the leap,\nyou're part of a grand tradition.  Larry and Sergey seem to have\nfelt the same before they started Google, and so did Jerry and Filo\nbefore they started Yahoo.  In fact, I'd guess the most successful\nstartups are the ones started by uncertain hackers rather than\ngung-ho business guys.We have some evidence to support this.  Several of the most successful\nstartups we've funded told us later that they only decided to apply\nat the last moment.  Some decided only hours before the deadline.The way to deal with uncertainty is to analyze it into components.\nMost people who are reluctant to do something have about eight\ndifferent reasons mixed together in their heads, and don't know\nthemselves which are biggest.  Some will be justified and some\nbogus, but unless you know the relative proportion of each, you\ndon't know whether your overall uncertainty is mostly justified or\nmostly bogus.So I'm going to list all the components of people's reluctance to\nstart startups, and explain which are real.  Then would-be founders\ncan use this as a checklist to examine their own feelings.I admit my goal is to increase your self-confidence.  But there are\ntwo things different here from the usual confidence-building exercise.\nOne is that I'm motivated to be honest.  Most people in the\nconfidence-building business have already achieved their goal when\nyou buy the book or pay to attend the seminar where they tell you\nhow great you are.  Whereas if I encourage people to start startups\nwho shouldn't, I make my own life worse.  If I encourage too many\npeople to apply to Y Combinator, it just means more work for me,\nbecause I have to read all the applications.The other thing that's going to be different is my approach.  Instead\nof being positive, I'm going to be negative.  Instead of telling\nyou \"come on, you can do it\" I'm going to consider all the reasons\nyou aren't doing it, and show why most (but not all) should be\nignored.  We'll start with the one everyone's born with.1. Too youngA lot of people think they're too young to start a startup.  Many\nare right.  The median age worldwide is about 27, so probably a\nthird of the population can truthfully say they're too young.What's too young?  One of our goals with Y Combinator was to discover\nthe lower bound on the age of startup founders.  It always seemed\nto us that investors were too conservative here—that they wanted\nto fund professors, when really they should be funding grad students\nor even undergrads.The main thing we've discovered from pushing the edge of this\nenvelope is not where the edge is, but how fuzzy it is.  The outer\nlimit may be as low as 16.  We don't look beyond 18 because people\nyounger than that can't legally enter into contracts.  But the most\nsuccessful founder we've funded so far, Sam Altman, was 19 at the\ntime.Sam Altman, however, is an outlying data point.  When he was 19,\nhe seemed like he had a 40 year old inside him.  There are other\n19 year olds who are 12 inside.There's a reason we have a distinct word \"adult\" for people over a\ncertain age.  There is a threshold you cross.  It's conventionally\nfixed at 21, but different people cross it at greatly varying ages.\nYou're old enough to start a startup if you've crossed this threshold,\nwhatever your age.How do you tell?  There are a couple tests adults use.  I realized\nthese tests existed after meeting Sam Altman, actually.  I noticed\nthat I felt like I was talking to someone much older.  Afterward I\nwondered, what am I even measuring?  What made him seem older?One test adults use is whether you still have the kid flake reflex.\nWhen you're a little kid and you're asked to do something hard, you\ncan cry and say \"I can't do it\" and the adults will probably let\nyou off.  As a kid there's a magic button you can press by saying\n\"I'm just a kid\" that will get you out of most difficult situations.\nWhereas adults, by definition, are not allowed to flake.  They still\ndo, of course, but when they do they're ruthlessly pruned.The other way to tell an adult is by how they react to a challenge.\nSomeone who's not yet an adult will tend to respond to a challenge\nfrom an adult in a way that acknowledges their dominance.  If an\nadult says \"that's a stupid idea,\" a kid will either crawl away\nwith his tail between his legs, or rebel.  But rebelling presumes\ninferiority as much as submission.  The adult response to\n\"that's a stupid idea,\" is simply to look the other person in the\neye and say \"Really?  Why do you think so?\"There are a lot of adults who still react childishly to challenges,\nof course.  What you don't often find are kids who react to challenges\nlike adults.  When you do, you've found an adult, whatever their\nage.2. Too inexperiencedI once wrote that startup founders should be at least 23, and that\npeople should work for another company for a few years before\nstarting their own.  I no longer believe that, and what changed my\nmind is the example of the startups we've funded.I still think 23 is a better age than 21.  But the best way to get\nexperience if you're 21 is to start a startup.  So, paradoxically,\nif you're too inexperienced to start a startup, what you should do\nis start one.  That's a way more efficient cure for inexperience\nthan a normal job.  In fact, getting a normal job may actually make\nyou less able to start a startup, by turning you into a tame animal\nwho thinks he needs an office to work in and a product manager to\ntell him what software to write.What really convinced me of this was the Kikos.  They started a\nstartup right out of college.  Their inexperience caused them to\nmake a lot of mistakes.  But by the time we funded their second\nstartup, a year later, they had become extremely formidable.  They\nwere certainly not tame animals.  And there is no way they'd have\ngrown so much if they'd spent that year working at Microsoft, or\neven Google.  They'd still have been diffident junior programmers.So now I'd advise people to go ahead and start startups right out\nof college.  There's no better time to take risks than when you're\nyoung.  Sure, you'll probably fail.  But even failure will get you\nto the ultimate goal faster than getting a job.It worries me a bit to be saying this, because in effect we're\nadvising people to educate themselves by failing at our expense,\nbut it's the truth.3. Not determined enoughYou need a lot of determination to succeed as a startup founder.\nIt's probably the single best predictor of success.Some people may not be determined enough to make it.  It's\nhard for me to say for sure, because I'm so determined that I can't\nimagine what's going on in the heads of people who aren't.  But I\nknow they exist.Most hackers probably underestimate their determination.  I've seen\na lot become visibly more determined as they get used to running a\nstartup.  I can think of\nseveral we've funded who would have been delighted at first to be\nbought for $2 million, but are now set on world domination.How can you tell if you're determined enough, when Larry and Sergey\nthemselves were unsure at first about starting a company?  I'm\nguessing here, but I'd say the test is whether you're sufficiently\ndriven to work on your own projects.  Though they may have been\nunsure whether they wanted to start a company, it doesn't seem as\nif Larry and Sergey were meek little research assistants, obediently\ndoing their advisors' bidding.  They started projects of their own.4. Not smart enoughYou may need to be moderately smart to succeed as a startup founder.\nBut if you're worried about this, you're probably mistaken.  If\nyou're smart enough to worry that you might not be smart enough to\nstart a startup, you probably are.And in any case, starting a startup just doesn't require that much\nintelligence.  Some startups do.  You have to be good at math to\nwrite Mathematica.  But most companies do more mundane stuff where\nthe decisive factor is effort, not brains.  Silicon Valley can warp\nyour perspective on this, because there's a cult of smartness here.\nPeople who aren't smart at least try to act that way.  But if you\nthink it takes a lot of intelligence to get rich, try spending a\ncouple days in some of the fancier bits of New York or LA.If you don't think you're smart enough to start a startup doing\nsomething technically difficult, just write enterprise software.\nEnterprise software companies aren't technology companies, they're\nsales companies, and sales depends mostly on effort.5. Know nothing about businessThis is another variable whose coefficient should be zero.  You\ndon't need to know anything about business to start a startup.  The\ninitial focus should be the product.  All you need to know in this\nphase is how to build things people want.  If you succeed, you'll\nhave to think about how to make money from it.  But this is so easy\nyou can pick it up on the fly.I get a fair amount of flak for telling founders just to make\nsomething great and not worry too much about making money.  And yet\nall the empirical evidence points that way: pretty much 100% of\nstartups that make something popular manage to make money from it.\nAnd acquirers tell me privately that revenue is not what they buy\nstartups for, but their strategic value.  Which means, because they\nmade something people want.  Acquirers know the rule holds for them\ntoo: if users love you, you can always make money from that somehow,\nand if they don't, the cleverest business model in the world won't\nsave you.So why do so many people argue with me?  I think one reason is that\nthey hate the idea that a bunch of twenty year olds could get rich\nfrom building something cool that doesn't make any money.  They\njust don't want that to be possible.  But how possible it is doesn't\ndepend on how much they want it to be.For a while it annoyed me to hear myself described as some kind of\nirresponsible pied piper, leading impressionable young hackers down\nthe road to ruin.  But now I realize this kind of controversy is a\nsign of a good idea.The most valuable truths are the ones most people don't believe.\nThey're like undervalued stocks.  If you start with them, you'll\nhave the whole field to yourself.  So when you find an idea you\nknow is good but most people disagree with, you should not\nmerely ignore their objections, but push aggressively in that\ndirection.  In this case, that means you should seek out ideas that\nwould be popular but seem hard to make money from.We'll bet a seed round you can't make something popular that we\ncan't figure out how to make money from.6. No cofounderNot having a cofounder is a real problem.  A startup is too much\nfor one person to bear.  And though we differ from other investors\non a lot of questions, we all agree on this.  All investors, without\nexception, are more likely to fund you with a cofounder than without.We've funded two single founders, but in both cases we suggested\ntheir first priority should be to find a cofounder.  Both did.  But\nwe'd have preferred them to have cofounders before they applied.\nIt's not super hard to get a cofounder for a project that's just\nbeen funded, and we'd rather have cofounders committed enough to\nsign up for something super hard.If you don't have a cofounder, what should you do?  Get one.  It's\nmore important than anything else.  If there's no one where you\nlive who wants to start a startup with you, move where there are\npeople who do.  If no one wants to work with you on your current\nidea, switch to an idea people want to work on.If you're still in school, you're surrounded by potential cofounders.\nA few years out it gets harder to find them.  Not only do you have\na smaller pool to draw from, but most already have jobs, and perhaps\neven families to support.  So if you had friends in college you\nused to scheme about startups with, stay in touch with them as well\nas you can.  That may help keep the dream alive.It's possible you could meet a cofounder through something like a\nuser's group or a conference.  But I wouldn't be too optimistic.\nYou need to work with someone to know whether you want them as a\ncofounder.\n[2]The real lesson to draw from this is not how to find a cofounder,\nbut that you should start startups when you're young and there are\nlots of them around.7. No ideaIn a sense, it's not a problem if you don't have a good idea, because\nmost startups change their idea anyway.  In the average Y Combinator\nstartup, I'd guess 70% of the idea is new at the end of the\nfirst three months.  Sometimes it's 100%.In fact, we're so sure the founders are more important than the\ninitial idea that we're going to try something new this funding\ncycle. We're going to let people apply with no idea at all.  If you\nwant, you can answer the question on the application form that asks\nwhat you're going to do with \"We have no idea.\"  If you seem really\ngood we'll accept you anyway.  We're confident we can sit down with\nyou and cook up some promising project.Really this just codifies what we do already.  We put little weight\non the idea.  We ask mainly out of politeness.  The kind of question\non the application form that we really care about is the one where\nwe ask what cool things you've made.  If what you've made is version\none of a promising startup, so much the better, but the main thing\nwe care about is whether you're good at making things.  Being lead\ndeveloper of a popular open source project counts almost as much.That solves the problem if you get funded by Y Combinator.  What\nabout in the general case?  Because in another sense, it is a problem\nif you don't have an idea.  If you start a startup with no idea,\nwhat do you do next?So here's the brief recipe for getting startup ideas.  Find something\nthat's missing in your own life, and supply that need—no matter\nhow specific to you it seems.  Steve Wozniak built himself a computer;\nwho knew so many other people would want them?  A need that's narrow\nbut genuine is a better starting point than one that's broad but\nhypothetical.  So even if the problem is simply that you don't have\na date on Saturday night, if you can think of a way to fix that by\nwriting software, you're onto something, because a lot of other\npeople have the same problem.8. No room for more startupsA lot of people look at the ever-increasing number of startups and\nthink \"this can't continue.\"  Implicit in their thinking is a\nfallacy: that there is some limit on the number of startups there\ncould be.  But this is false.  No one claims there's any limit on\nthe number of people who can work for salary at 1000-person companies.\nWhy should there be any limit on the number who can work for equity\nat 5-person companies?\n[3]Nearly everyone who works is satisfying some kind of need.  Breaking\nup companies into smaller units doesn't make those needs go away.\nExisting needs would probably get satisfied more efficiently by a\nnetwork of startups than by a few giant, hierarchical organizations,\nbut I don't think that would mean less opportunity, because satisfying\ncurrent needs would lead to more.  Certainly this tends to be the\ncase in individuals.  Nor is there anything wrong with that.  We\ntake for granted things that medieval kings would have considered\neffeminate luxuries, like whole buildings heated to spring temperatures\nyear round.  And if things go well, our descendants will take for\ngranted things we would consider shockingly luxurious.  There is\nno absolute standard for material wealth.  Health care is a component\nof it, and that alone is a black hole.  For the foreseeable future,\npeople will want ever more material wealth, so there is no limit\nto the amount of work available for companies, and for startups in\nparticular.Usually the limited-room fallacy is not expressed directly.  Usually\nit's implicit in statements like \"there are only so many startups\nGoogle, Microsoft, and Yahoo can buy.\"  Maybe, though the list of\nacquirers is a lot longer than that.  And whatever you think of\nother acquirers, Google is not stupid.  The reason big companies\nbuy startups is that they've created something valuable.  And why\nshould there be any limit to the number of valuable startups companies\ncan acquire, any more than there is a limit to the amount of wealth\nindividual people want?  Maybe there would be practical limits on\nthe number of startups any one acquirer could assimilate, but if\nthere is value to be had, in the form of upside that founders are\nwilling to forgo in return for an immediate payment, acquirers will\nevolve to consume it.  Markets are pretty smart that way.9. Family to supportThis one is real.  I wouldn't advise anyone with a family to start\na startup.  I'm not saying it's a bad idea, just that I don't want\nto take responsibility for advising it.  I'm willing to take\nresponsibility for telling 22 year olds to start startups.  So what\nif they fail?  They'll learn a lot, and that job at Microsoft will\nstill be waiting for them if they need it.  But I'm not prepared\nto cross moms.What you can do, if you have a family and want to start a startup,\nis start a consulting business you can then gradually turn into a\nproduct business.  Empirically the chances of pulling that off seem\nvery small. You're never going to produce Google this way.  But at\nleast you'll never be without an income.Another way to decrease the risk is to join an existing startup\ninstead of starting your own.  Being one of the first employees of\na startup is a lot like being a founder, in both the good ways and\nthe bad.  You'll be roughly 1/n^2 founder, where n is your employee\nnumber.As with the question of cofounders, the real lesson here is to start\nstartups when you're young.10. Independently wealthyThis is my excuse for not starting a startup.  Startups are stressful.\nWhy do it if you don't need the money?  For every \"serial entrepreneur,\"\nthere are probably twenty sane ones who think \"Start another\ncompany?  Are you crazy?\"I've come close to starting new startups a couple times, but I\nalways pull back because I don't want four years of my life to be\nconsumed by random schleps.  I know this business well enough to\nknow you can't do it half-heartedly.  What makes a good startup\nfounder so dangerous is his willingness to endure infinite schleps.There is a bit of a problem with retirement, though.  Like a lot\nof people, I like to work.  And one of the many weird little problems\nyou discover when you get rich is that a lot of the interesting\npeople you'd like to work with are not rich.  They need to work at\nsomething that pays the bills.  Which means if you want to have\nthem as colleagues, you have to work at something that pays the\nbills too, even though you don't need to.  I think this is what\ndrives a lot of serial entrepreneurs, actually.That's why I love working on Y Combinator so much.  It's an excuse\nto work on something interesting with people I like.11.  Not ready for commitmentThis was my reason for not starting a startup for most of my twenties.\nLike a lot of people that age, I valued freedom most of all.  I was\nreluctant to do anything that required a commitment of more than a\nfew months.  Nor would I have wanted to do anything that completely\ntook over my life the way a startup does.  And that's fine.  If you\nwant to spend your time travelling around, or playing in a band,\nor whatever, that's a perfectly legitimate reason not to start a\ncompany.If you start a startup that succeeds, it's going to consume at least\nthree or four years.  (If it fails, you'll be done a lot quicker.)\nSo you shouldn't do it if you're not ready for commitments on that\nscale.  Be aware, though, that if you get a regular job, you'll\nprobably end up working there for as long as a startup would take,\nand you'll find you have much less spare time than you might expect.\nSo if you're ready to clip on that ID badge and go to that orientation\nsession, you may also be ready to start that startup.12.  Need for structureI'm told there are people who need structure in their lives.  This\nseems to be a nice way of saying they need someone to tell them\nwhat to do.  I believe such people exist.  There's plenty of empirical\nevidence: armies, religious cults, and so on.  They may even be the\nmajority.If you're one of these people, you probably shouldn't start a\nstartup.  In fact, you probably shouldn't even go to work for one.\nIn a good startup, you don't get told what to do very much.  There\nmay be one person whose job title is CEO, but till the company has\nabout twelve people no one should be telling anyone what to do.\nThat's too inefficient.  Each person should just do what they need\nto without anyone telling them.If that sounds like a recipe for chaos, think about a soccer team.\nEleven people manage to work together in quite complicated ways,\nand yet only in occasional emergencies does anyone tell anyone else\nwhat to do.  A reporter once asked David Beckham if there were any\nlanguage problems at Real Madrid, since the players were from about\neight different countries.  He said it was never an issue, because\neveryone was so good they never had to talk.  They all just did the\nright thing.How do you tell if you're independent-minded enough to start a\nstartup?  If you'd bristle at the suggestion that you aren't, then\nyou probably are.13. Fear of uncertaintyPerhaps some people are deterred from starting startups because\nthey don't like the uncertainty.  If you go to work for Microsoft,\nyou can predict fairly accurately what the next few years will be\nlike—all too accurately, in fact.  If you start a startup, anything\nmight happen.Well, if you're troubled by uncertainty, I can solve that problem\nfor you: if you start a startup, it will probably fail.  Seriously,\nthough, this is not a bad way to think\nabout the whole experience.  Hope for the best, but expect the\nworst.  In the worst case, it will at least be interesting.  In the\nbest case you might get rich.No one will blame you if the startup tanks, so long as you made a\nserious effort.  There may once have been a time when employers\nwould regard that as a mark against you, but they wouldn't now.  I\nasked managers at big companies, and they all said they'd prefer\nto hire someone who'd tried to start a startup and failed over\nsomeone who'd spent the same time working at a big company.Nor will investors hold it against you, as long as you didn't fail\nout of laziness or incurable stupidity.   I'm told there's a lot\nof stigma attached to failing in other places—in Europe, for\nexample.  Not here.  In America, companies, like practically\neverything else, are disposable.14. Don't realize what you're avoidingOne reason people who've been out in the world for a year or two\nmake better founders than people straight from college is that they\nknow what they're avoiding.  If their startup fails, they'll have\nto get a job, and they know how much jobs suck.If you've had summer jobs in college, you may think you know what\njobs are like, but you probably don't.  Summer jobs at technology\ncompanies are not real jobs.  If you get a summer job as a waiter,\nthat's a real job.  Then you have to carry your weight.  But software\ncompanies don't hire students for the summer as a source of cheap\nlabor.  They do it in the hope of recruiting them when they graduate.\nSo while they're happy if you produce, they don't expect you to.That will change if you get a real job after you graduate.  Then\nyou'll have to earn your keep.  And since most of what big companies\ndo is boring, you're going to have to work on boring stuff.  Easy,\ncompared to college, but boring.  At first it may seem cool to get\npaid for doing easy stuff, after paying to do hard stuff in college.\nBut that wears off after a few months.  Eventually it gets demoralizing\nto work on dumb stuff, even if it's easy and you get paid a lot.And that's not the worst of it.  The thing that really sucks about\nhaving a regular job is the expectation that you're supposed to be\nthere at certain times.  Even Google is afflicted with this,\napparently.  And what this means, as everyone who's had a regular\njob can tell you, is that there are going to be times when you have\nabsolutely no desire to work on anything, and you're going to have\nto go to work anyway and sit in front of your screen and pretend\nto.  To someone who likes work, as most good hackers do, this is\ntorture.In a startup, you skip all that.  There's no concept of office hours\nin most startups.  Work and life just get mixed together.  But the\ngood thing about that is that no one minds if you have a life at\nwork.  In a startup you can do whatever you want most of the time.\nIf you're a founder, what you want to do most of the time is work.\nBut you never have to pretend to.If you took a nap in your office in a big company, it would seem\nunprofessional.  But if you're starting a startup and you fall\nasleep in the middle of the day, your cofounders will just assume\nyou were tired.15. Parents want you to be a doctorA significant number of would-be startup founders are probably\ndissuaded from doing it by their parents.  I'm not going to say you\nshouldn't listen to them.  Families are entitled to their own\ntraditions, and who am I to argue with them?  But I will give you\na couple reasons why a safe career might not be what your parents\nreally want for you.One is that parents tend to be more conservative for their kids\nthan they would be for themselves.  This is actually a rational\nresponse to their situation.  Parents end up sharing more of their\nkids' ill fortune than good fortune.  Most parents don't mind this;\nit's part of the job; but it does tend to make them excessively\nconservative.  And erring on the side of conservatism is still\nerring.  In almost everything, reward is proportionate to risk.  So\nby protecting their kids from risk, parents are, without realizing\nit, also protecting them from rewards.  If they saw that, they'd\nwant you to take more risks.The other reason parents may be mistaken is that, like generals,\nthey're always fighting the last war.  If they want you to be a\ndoctor, odds are it's not just because they want you to help the\nsick, but also because it's a prestigious and lucrative career.\n[4]\nBut not so lucrative or prestigious as it was when their\nopinions were formed.  When I was a kid in the seventies, a doctor\nwas the thing to be.  There was a sort of golden triangle involving\ndoctors, Mercedes 450SLs, and tennis.  All three vertices now seem\npretty dated.The parents who want you to be a doctor may simply not realize how\nmuch things have changed.  Would they be that unhappy if you were\nSteve Jobs instead?  So I think the way to deal with your parents'\nopinions about what you should do is to treat them like feature\nrequests.  Even if your only goal is to please them, the way to do\nthat is not simply to give them what they ask for.  Instead think\nabout why they're asking for something, and see if there's a better\nway to give them what they need.16.  A job is the defaultThis leads us to the last and probably most powerful reason people\nget regular jobs: it's the default thing to do.  Defaults are\nenormously powerful, precisely because they operate without any\nconscious choice.To almost everyone except criminals, it seems an axiom that if you\nneed money, you should get a job.  Actually this tradition is not\nmuch more than a hundred years old.  Before that, the default way\nto make a living was by farming.  It's a bad plan to treat something\nonly a hundred years old as an axiom.  By historical standards,\nthat's something that's changing pretty rapidly.We may be seeing another such change right now.  I've read a lot\nof economic history, and I understand the startup world pretty well,\nand it now seems to me fairly likely that we're seeing the beginning\nof a change like the one from farming to manufacturing.And you know what?  If you'd been around when that change began\n(around 1000 in Europe) it would have seemed to nearly everyone\nthat running off to the city to make your fortune was a crazy thing\nto do.  Though serfs were in principle forbidden to leave their\nmanors, it can't have been that hard to run away to a city.  There\nwere no guards patrolling the perimeter of the village.  What\nprevented most serfs from leaving was that it seemed insanely risky.\nLeave one's plot of land?  Leave the people you'd spent your whole\nlife with, to live in a giant city of three or four thousand complete\nstrangers?  How would you live?  How would you get food, if you\ndidn't grow it?Frightening as it seemed to them, it's now the default with us to\nlive by our wits.  So if it seems risky to you to start a startup,\nthink how risky it once seemed to your ancestors to live as we do\nnow.  Oddly enough, the people who know this best are the very ones\ntrying to get you to stick to the old model.  How can Larry and\nSergey say you should come work as their employee, when they didn't\nget jobs themselves?Now we look back on medieval peasants and wonder how they stood it.\nHow grim it must have been to till the same fields your whole life\nwith no hope of anything better, under the thumb of lords and priests\nyou had to give all your surplus to and acknowledge as your masters.\nI wouldn't be surprised if one day people look back on what we\nconsider a normal job in the same way.  How grim it would be to\ncommute every day to a cubicle in some soulless office complex, and\nbe told what to do by someone you had to acknowledge as a boss—someone\nwho could call you into their office and say \"take a seat,\"\nand you'd sit!  Imagine having to ask permission to release\nsoftware to users.  Imagine being sad on Sunday afternoons because\nthe weekend was almost over, and tomorrow you'd have to get up and\ngo to work.  How did they stand it?It's exciting to think we may be on the cusp of another shift like\nthe one from farming to manufacturing.  That's why I care about\nstartups.  Startups aren't interesting just because they're a way\nto make a lot of money.  I couldn't care less about other ways to\ndo that, like speculating in securities.  At most those are interesting\nthe way puzzles are.  There's more going on with startups.  They\nmay represent one of those rare, historic shifts in the way\nwealth is created.That's ultimately what drives us to work on Y Combinator.  We want\nto make money, if only so we don't have to stop doing it, but that's\nnot the main goal.  There have only been a handful of these great\neconomic shifts in human history.  It would be an amazing hack to\nmake one happen faster.Notes[1]\nThe only people who lost were us.  The angels had convertible\ndebt, so they had first claim on the proceeds of the auction. Y\nCombinator only got 38 cents on the dollar.[2]\nThe best kind of organization for that might be an open source\nproject, but those don't involve a lot of face to face meetings.\nMaybe it would be worth starting one that did.[3]\nThere need to be some number of big companies to acquire the\nstartups, so the number of big companies couldn't decrease to zero.[4]\nThought experiment: If doctors did the same work, but as\nimpoverished outcasts, which parents would still want their kids\nto be doctors?Thanks to Trevor Blackwell, Jessica Livingston, and Robert\nMorris for reading drafts of this, to the founders of Zenter\nfor letting me use their web-based PowerPoint killer even though\nit isn't launched yet, and to Ming-Hay Luk\nof the Berkeley CSUA for inviting me to speak.\nComment on this essay."},{"title":"Why to Start a Startup in a Bad Economy","text":"October 2008The economic situation is apparently so grim that some experts fear\nwe may be in for a stretch as bad as the mid seventies.When Microsoft and Apple were founded.As those examples suggest, a recession may not be such a bad time\nto start a startup.  I'm not claiming it's a particularly good time\neither.  The truth is more boring: the state of the economy doesn't\nmatter much either way.If we've learned one thing from funding so many startups, it's that\nthey succeed or fail based on the qualities of the founders.  The\neconomy has some effect, certainly, but as a predictor of success\nit's rounding error compared to the founders.Which means that what matters is who you are, not when you do it.\nIf you're the right sort of person, you'll win even in a bad economy.\nAnd if you're not, a good economy won't save you.  Someone who\nthinks \"I better not start a startup now, because the economy is\nso bad\" is making the same mistake as the people who thought during\nthe Bubble \"all I have to do is start a startup, and I'll be rich.\"So if you want to improve your chances, you should think far more\nabout who you can recruit as a cofounder than the state of the\neconomy.  And if you're worried about threats to the survival of\nyour company, don't look for them in the news.  Look in the mirror.But for any given team of founders, would it not pay to wait till\nthe economy is better before taking the leap?  If you're starting\na restaurant, maybe, but not if you're working on technology.\nTechnology progresses more or less independently of the stock market.\nSo for any given idea, the payoff for acting fast in a bad economy\nwill be higher than for waiting.  Microsoft's first product was a\nBasic interpreter for the Altair.  That was exactly what the world\nneeded in 1975, but if Gates and Allen had decided to wait a few\nyears, it would have been too late.Of course, the idea you have now won't be the last you have.  There\nare always new ideas.  But if you have a specific idea you want to\nact on, act now.That doesn't mean you can ignore the economy.  Both customers and investors\nwill be feeling pinched.  It's not necessarily a problem if customers\nfeel pinched: you may even be able to benefit from it, by making\nthings that save money.\nStartups often make things cheaper, so in\nthat respect they're better positioned to prosper in a recession\nthan big companies.Investors are more of a problem.  Startups generally need to raise\nsome amount of external funding, and investors tend to be less\nwilling to invest in bad times.  They shouldn't be.  Everyone knows\nyou're supposed to buy when times are bad and sell when times are\ngood.  But of course what makes investing so counterintuitive is\nthat in equity markets, good times are defined as everyone thinking\nit's time to buy.  You have to be a contrarian to be correct, and\nby definition only a minority of investors can be.So just as investors in 1999 were tripping over one another trying\nto buy into lousy startups, investors in 2009 will presumably be\nreluctant to invest even in good ones.You'll have to adapt to this.  But that's nothing new: startups\nalways have to adapt to the whims of investors.  Ask any founder\nin any economy if they'd describe investors as fickle, and watch\nthe face they make.  Last year you had to be prepared to explain\nhow your startup was viral.  Next year you'll have to explain how\nit's recession-proof.(Those are both good things to be.  The mistake investors make is\nnot the criteria they use but that they always tend to focus on one\nto the exclusion of the rest.)Fortunately the way to make a startup recession-proof is to do\nexactly what you should do anyway: run it as cheaply as possible.\nFor years I've been telling founders that the surest route to success\nis to be the cockroaches of the corporate world.  The immediate\ncause of death in a startup is always running out of money. So the\ncheaper your company is to operate, the harder it is to kill.\nAnd fortunately it has gotten very cheap to run a startup. A recession\nwill if anything make it cheaper still.If nuclear winter really is here, it may be safer to be a cockroach\neven than to keep your job.  Customers may drop off individually\nif they can no longer afford you, but you're not going to lose them\nall at once; markets don't \"reduce headcount.\"What if you quit your job to start a startup that fails, and you\ncan't find another?  That could be a problem if you work in sales or\nmarketing.  In those fields it can take months to find a new\njob in a bad economy.  But hackers seem to be more liquid.  Good\nhackers can always get some kind of job.  It might not be your dream\njob, but you're not going to starve.Another advantage of bad times is that there's less competition.\nTechnology trains leave the station at regular intervals.  If\neveryone else is cowering in a corner, you may have a whole car to\nyourself.You're an investor too.  As a founder, you're buying stock with\nwork: the reason Larry and Sergey are so rich is not so much that\nthey've done work worth tens of billions of dollars, but that they\nwere the first investors in Google.  And like any investor you\nshould buy when times are bad.Were you nodding in agreement, thinking \"stupid investors\" a few\nparagraphs ago when I was talking about how investors are reluctant\nto put money into startups in bad markets, even though that's the\ntime they should rationally be most willing to buy?  Well, founders\naren't much better.  When times get bad, hackers go to grad school.\nAnd no doubt that will happen this time too.  In fact, what makes\nthe preceding paragraph true is that most readers won't believe\nit—at least to the extent of acting on it.So maybe a recession is a good time to start a startup.  It's hard\nto say whether advantages like lack of competition outweigh\ndisadvantages like reluctant investors.  But it doesn't matter much\neither way.   It's the people that matter.  And for a given set of\npeople working on a given technology, the time to act is always\nnow."},{"title":"Will Filters Kill Spam?","text":"December 2002(This article is derived from one I wrote for the January 2003 issue\nof the Computer Security Journal.)I get about 45 spams a day, but only about one a week makes it into\nmy inbox.\nIf everyone had this much of their spam filtered\nout, spammers would give up sending it.Will that happen?The first generation of spam filters used rules to recognize\nspecific spam features. Now a new generation of statistical\nspam filters seems to offer significantly better performance.\nStatistical filters look at the\nentire contents of each incoming email and decide whether it's spam\nbased on its overall similarity to previous spams.  This new\nkind of filter routinely catches over 99% of current spam with near\nzero false positives.The simplest statistical filter can be described in a paragraph.\nUsers discard all their spam in a separate trash can.  At intervals,\na program looks through all the user's email and, for each token,\ncalculates the ratio of spam occurrences to total occurrences.\nFor example, if \"cash\" occurs in 200 of 1000 spams\nand 3 of 500 nonspam emails, its spam probability is\n(200/1000) / (3/500 + 200/1000)\nor .971.  When a new email arrives, extract\nall the tokens and find the fifteen with probabilities p1...p15\nfurthest (in either direction) from .5.  The probability that the\nmail is a spam is\np1p2...p15\n------------------------------------------\np1p2...p15  + (1 - p1)(1 - p2)...(1 - p15)\nI use a cutoff of .9, but it doesn't matter too much where you put\nit, because most probabilities end up close to 0 or 1.In the past few months, many new statistical spam filters\nhave appeared. There are now over 30\navailable.  Apple has one, MSN has one, AOL is said to have one in\nbeta, and you can be pretty sure Yahoo is working on one.Some of these filters were inspired by an article I wrote called\nA Plan for Spam, but two open-source statistical text classifiers\n(a superset of spam filtering),\nifile and\nCRM114, have been around\nfor years, and Apple and Microsoft have also been working on\nstatistical filtering for a while.  The reason for the sudden\nexplosion of statistical filters is probably simply that spam grew\nto be enough of a problem that people started paying serious\nattention to it, and statistical filters are what you get when you do that.These filters don't all work exactly the same way.\nThe algorithm described above is called a \"naive Bayes classifier,\"\nbecause it uses a degenerate case of Bayes' Theorem to combine\nprobabilities.  Most of the new open-source filters are naive\nBayesian, and so is MSN's, I suspect.  Apple's filter calculates\nspam probabilities based on \"adaptive latent semantic analysis,\"\nwhich as far as I can tell amounts to the same thing.Regardless of how they calculate probabilities, these new statistical\nfilters all share some important benefits:1. They're very effective.  Even the simplest statistical filter\nwill catch 99% of current spam.  The most effective filter I know of, Bill\nYerazunis' CRM114, catches 99.8%.  (Mine is lagging behind at about\n99.7%.)2. They generate few false positives.  False positives, legitimate\nemails that are mistakenly treated as spam, are the bane of spam\nfiltering.  Statistical filters yield fewer false positives because\nthey consider evidence of innocence as well as evidence of guilt.\nA token that occurs disproportionately often in your nonspam mail,\nlike the name of a friend, will count as much toward\ndecreasing the spam probability as a token like \"cash\" would to\nincreasing it.3. They learn.  You don't have to look through piles of spam and\nfigure out rules to identify them.  Whatever's in there, the filters\ntend to find it.  Like us, statistical filters notice that the\ntoken \"cash\" is sign of spam.  However, they also notice that\n\"modalities\" (used in a surprisingly high proportion of Nigerian\nspams) and \"FF0000\" (html for bright red) are even better signs of\nspam.  And as spammers change their messages or their infrastructure,\nthe filters adapt.4. They let each user define what's spam.  Although statistical\nfilters could be used at the network level, ideally the probabilities\nshould be calculated individually for each user.  To the extent\nusers' definitions of spam differ, their inboxes will reflect this.5. They're hard to trick.  There are only two ways to get past a\nstatistical filter: use fewer bad words, or use more innocent words.\nSpammers can't do the latter, because the most innocent words (words\nrelated to your friends and family, your work, your interests)\nvary for each user.  So they have to use\nfewer bad words.  They can't use weird spellings (e.g. \"Freee\"\ninstead of \"Free\") because filters quickly learn those.  Their only\noption is to use vaguer and vaguer euphemisms, or simply to have\nsome generic sounding text, and a link.What's going to happen as this new generation of spam filters get\ndelivered to end-users?  The most exciting possibility is that they\nmay make spam go away.What the spammers care most about is response rate.  In any kind\nof direct marketing, revenue is proportional to response rate.  Spammers\nare satisfied with a much lower response rate than direct mail,\nbecause their costs are so much lower, but response rate is still\nthe key to how much they make.Filtering hits spammers right in their center of gravity: if recipients\ndon't see the spam, they don't respond to it.  If we can filter\nout 95% of spam, we decrease spammers' revenues\nby a factor of 20.  If we can filter out 99.5%, we decrease\nrevenues by a factor of 200.  Spammers' costs are low, but not\nthat low.  In an\narticle\nin the Detroit Free Press, one spammer\nsaid that he charged a flat fee of $22,000 to send mail to his\nentire list of 250 million addresses.  If filters cut response\nrates by a factor of 100, the average value of what he was selling\nwould sink to $220.  I doubt that would even cover his costs.Filters should at least save us from seeing most spam.  But if they\ncan decrease spammers' response rates enough, spam will no longer\npay, and the spammers will actually stop sending it.Or so we hope.  But there is an alarming possibility here.  If\nemail programs aren't designed right, spam might still be seen\nby the very people the spammers most want to reach.The person who responds to spam is a rare bird.  Response rates\ncan be as low as 15 per million.  That's the whole\nproblem: spammers waste the time of a\nmillion people just to reach the 15 stupidest or most perverted.If we want to make spam stop working, we have to somehow prevent\nthe 15 idiots from responding to the spams that are sent to them.\nOtherwise the spammers will keep sending it to everyone.  So,\nstrangely enough, whether or not filtering will kill spam depends\nentirely on what those 15 idiots do.The great danger is that whatever filter is most widely deployed\nin the idiot market will require too much effort by the user.\nBayesian filters calculate spam probabilities based on the spam\nand nonspam mail each user receives.  There have to be two\nkinds of deletion, ordinary delete and delete-as-spam, and the user has\nto delete each kind of message in the right way.  The problem is, the\n15 idiots are probably also the 15 users who won't bother.As long as the 15 idiots continue to see spams, we're all going to\nbe sent them.  So whether filters put an end to spam depends on\nhow the email software used by the idiots is designed.  My guess\nis that idiots are pretty passive, so the key here is to make\nthe default do the right thing.  Hear me, O AOL and Microsoft: when\nyou release Bayesian filters, don't make all the users train their\nown filters from scratch.  Use initial filters based on mail\nclassified by all your users.   That way,\nas long as the user just keeps\nblindly clicking, most email will end up in the right corpus.Do that, and spam will decrease, which will mean lower infrastructure\ncosts, and thus greater profits for you.There is one other possibility we ought to worry about, though\nprobably not as much.  What if the 15 idiots see the spam in the\njunk mail folder and respond to it?  I don't think this\nhappens very much.  We can see that from the efforts that\nspammers take to prevent their mail ending up in the junk mail folders\nof services like Yahoo Mail and Hotmail.  But designers of\nemail software ought to at least bear this in mind.  Quietly\nflush spam folders, and don't encourage users to look through\nthem and open the mails.  (One good way to do this is to list some\nof the incriminating words, in random order, along with the subject line of\neach spam.  Then users won't be tempted to open spams with\nambiguous subject lines.)If the email software implements them properly, statistical filters\nshould send nearly all spams straight to the spam folder, and this\nwill decrease response rates dramatically.The spammers most threatened by filters are the opt-in spammers.\nOpt-in spammers are the ones on the more legitimate end of\nthe spam spectrum.  They buy your address from other companies whose\nterms of service (you didn't notice that in paragraph 47?) allow\nthem to sell customers' email addresses.  They're called opt-in\nspammers because they usually claim in the mail they send you that\nyou have asked to receive email from them.One of the biggest opt-in spammers claims to have\n60 million unique\nemail addresses, nearly all of them domestic.  60 million addresses\nis more than half the US online population.  If half of US Internet\nusers have asked to receive email from this company, it should be\npretty easy to find someone who has.  And yet if you start asking\naround among your friends, I bet you won't find a single one who\nremembers asking to receive their valuable offers.The arrival of better filters is going to put an end to the fiction\nof opt-in, because opt-in spam is especially vulnerable to filters.\nOpt-in spammers don't try to conceal their identities.\nThey don't use fake return addresses like the real hardcore spammers.\nThe text of the email openly says who it's from.  And so opt-in\nspam is very easy to filter.  The simplest statistical filter\ncan catch 100% of it.Once statistical filters are widely deployed, most opt-in\nspam will go right into the trash.  This should flush the\nopt-in spammers out of their present cover of semi-legitimacy.  If\nfiltering destroys their response rates, they're either\ngoing to go out of business, or they're going to have to admit what\nthey are and start taking measures to conceal the origin and nature\nof their messages.All spammers will have to, if they want to get past statistical\nfilters.  Will they be able to?We already see plenty of evidence of spammers tweaking their messages\nto get past simple-minded spam filters based on specific words or\npatterns.  What could they do to get past statistical filters, and\nwill it work?If a statistical filter notices that you're using spam words, you're\nin trouble.  So the spammer has two options: prevent the filter\nfrom seeing the words, or use different words.Spammers have been trying to prevent filters from recognizing the\nwords in their messages for at least six months.  The most common\ntrick is to use variant spellings-- for example, to use 0 instead\nof O and 1 instead of l.  These are no problem for Bayesian filters\nonce the corpus reaches a decent size, and indeed are a positive\naid in recognizing spam.Spammers also try to prevent filters from recognizing the tokens\nin the mail by breaking them up-- for example, by using whitespace\nor punctuation characters in the middle of words\nli ke  th.is\nBut this doesn't work well either.  One reason is that legitimate email\ndoesn't have many individual letters or word fragments in it,\nso a fragment like \"ke\" or \"th\" will tend to have an above-average\nspam probability.  Another is that they can't do this sort of\nobfuscation on headers and urls, and those are enough by\nthemselves to identify most spam.  We could probably reconstruct\nthe broken words if we had to, but this hasn't even been\nnecessary so far.Spammers sometimes insert html comments at random places within\nwords, but this is also easy to ignore.  In general, on the token front,\nit is a question of closing loopholes.  There are only so many\ntricks spammers can use, and we deal with them individually.  So\nfar none has been insurmountable.People sometimes ask, what if spammers sent the mail as an image?\nThey do already, and this kind of spam is easy for filters to\ncatch.  Tokens like \"img\" and \"href\" have spam probabilities like\nthose of pornographic terms.  Plus there is the domain name and filename in\nthe url, and, as always, the headers.  On the whole, spam containing\nhtml is easy to filter.  The most hardened spammers seem to know\nthis and already avoid html in their mails.  Whatever the spam of\nthe future looks like, it probably won't contain html.I think the only territory left to the spammers will be vocabulary.\nThey won't be able to prevent filters from seeing the words they're\nusing, so they'll have to use different words.It won't work simply to pad spams with random words.  In the\nalgorithm I described earlier, only the most statistically\nsignificant fifteen words contribute to the probability, and neutral\nwords like \"onion\", no matter how many there are of them, can't\ncompete with the incriminating \"viagra\" for statistical significance.\nTo outweigh incriminating words, the spammers would need to dilute\ntheir emails with especially innocent words, i.e. those that are\nnot merely neutral but occur disproportionately often in the user's\nlegitimate email.  But these words (the names of one's friends and\nfamily, terms one uses in one's work) are different for each\nrecipient, and the spammers have no way of figuring out what they\nare.I think the only thing that will work for the spammers will be to\navoid using incriminating words.  Interestingly, this will work to\ndifferent degrees depending on the type of spam.  For mortgage\nspams it will be deadly.  How can you pitch people a mortgage\nwithout using terms like \"mortgage\", \"rate\", \"lend\" and \"borrow\"?\nWhereas there are other kinds of spams that could be rephrased not\nto use identifiable spam terms at all.One fairly common type of spam is sent by an online dating service\n(oops, sorry, an irresponsible affiliate of an online dating\nservice), pretending to be an email from female member who wants\nto meet you.  Just sign up and search for her profile.  There can\nbe very little in the text of such mails for a filter to notice.\nI've seen some where the text was indistinguishable, statistically,\nfrom an email an actual person might send you.  All you have to go\non there is the url, and the headers.Of course, the url and the headers are a lot to go on.  And they\nare what I think filtering will ultimately come to depend on.  I\npredict that the spam of the future will look like this:\nTo: joeuser@aol.comFrom: john@smith.comSubject: heyCheck out this site.http://www.randomdomain.com\nThat is, some fairly innocuous text, followed by a link.  The domain\nname in the link will have to be one that hasn't been\nused before, or the filters will recognize it.What will the response rate be for this type of spam?  That is\nthe big question.  It will\npresumably be lower than for a spam loaded with with sales pitches,\nor the spammers wouldn't bother to write the sales pitches, but\nhow much lower?  If the response rate is low enough, then forcing\nspam to become this generic will be enough to kill it.To the extent spam can be made this generic and still work,\nthere are still techniques we can use to recognize it.  I\ncan think of two ways to deal with an unknown domain.  One would\nbe to send out a crawler to look at the page you're being sent to.\nYou could filter the page much as you would the body of an email.\nIf widely used, this would have the amusing effect of\npounding any\nsite advertised in a spam with a large number of hits.  If the\noverloaded server took a while to respond, that would be evidence\nin itself-- a kind of peer-to-spammer-to-peer filtering network.Another way to deal with unknown domains would be to have\na server to which filters could report domains seen in spams.\nA filter unsure about a new url could query this server and get a\nquick answer back.  You might get false positives in the case of\na link to some image or news story that was making the rounds, but\nthat kind of email tends to be sent by friends who would already\nbe on your whitelist.And remember, there are still the headers.  At the moment, spammers\nleave their fingerprints all over them.  Some spam software actually\nidentifies itself by name in the headers.  One day we'll smile at\nthe quaintness of that.  But even after they clean up the obvious\nstuff, spammers will tend to use the same infrastructure for a\nwhile.  Unless of course they use open relays.  That would be retro.\nBut I think it would put a lot of spammers out of business if they\nhad to resort to that.  Certainly clients like\nDisney would balk at it.Strangely enough, the spam I expect to see in the future will be\na lot like the spam of the past.  There will be less of it, as\nthere was in the past.  And the spammers will be real outlaws, as\nthey were before spam got corporate in the last couple years.I don't want to underestimate the ingenuity of the spammers.  They\nhave found their way past every barrier we've put in front of them\nbefore.  But I don't think this is inevitable.\nI think we just didn't work too hard on barriers till recently.\nStatistical spam filters represent a more serious effort to fight\nback.  If they don't put an end to spam, they'll at least insure\nthat we see less of it."},{"title":"Write Like You Talk","text":"October 2015Here's a simple trick for getting more people to read what you\nwrite: write in spoken language.Something comes over most people when they start writing. They write\nin a different language than they'd use if they were talking to a\nfriend. The sentence structure and even the words are different.\nNo one uses \"pen\" as a verb in spoken English. You'd feel like an\nidiot using \"pen\" instead of \"write\" in a conversation with a friend.The last straw for me was a sentence I read a couple days ago:\nThe mercurial Spaniard himself declared: \"After Altamira, all is\ndecadence.\"\nIt's from Neil Oliver's A History of Ancient Britain. I feel bad\nmaking an example of this book, because it's no worse than lots of\nothers.  But just imagine calling Picasso \"the mercurial Spaniard\" when\ntalking to a friend.  Even one\nsentence of this would raise eyebrows in conversation.  And yet\npeople write whole books of it.Ok, so written and spoken language are different. Does that make\nwritten language worse?If you want people to read and understand what you write, yes.\nWritten language is more complex, which makes it more work to read.\nIt's also more formal and distant, which gives the reader's attention\npermission to drift.  But perhaps worst of all, the complex sentences\nand fancy words give you, the writer, the false impression that\nyou're saying more than you actually are.You don't need complex sentences to express complex ideas.  When\nspecialists in some abstruse topic talk to one another about ideas\nin their field, they don't use sentences any more complex than they\ndo when talking about what to have for lunch.  They use different\nwords, certainly.  But even those they use no more than necessary.\nAnd in my experience, the harder the subject, the more informally\nexperts speak. Partly, I think, because they have less to prove,\nand partly because the harder the ideas you're talking about, the\nless you can afford to let language get in the way.Informal language is the athletic clothing of ideas.I'm not saying spoken language always works best. Poetry is as much\nmusic as text, so you can say things you wouldn't say in conversation.\nAnd there are a handful of writers who can get away with using fancy\nlanguage in prose. And then of course there are cases where writers\ndon't want to make it easy to understand what they're saying—in\ncorporate announcements of bad news, for example, or at the more\nbogus end of the humanities.  But for nearly everyone else, spoken\nlanguage is better.It seems to be hard for most people to write in spoken language.\nSo perhaps the best solution is to write your first draft the way\nyou usually would, then afterward look at each sentence and ask \"Is\nthis the way I'd say this if I were talking to a friend?\" If it\nisn't, imagine what you would say, and use that instead.  After a\nwhile this filter will start to operate as you write. When you write\nsomething you wouldn't say, you'll hear the clank as it hits the\npage.Before I publish a new essay, I read it out loud and fix everything\nthat doesn't sound like conversation. I even fix bits that are\nphonetically awkward; I don't know if that's necessary, but it\ndoesn't cost much.This trick may not always be enough.  I've seen writing so far\nremoved from spoken language that it couldn't be fixed sentence by\nsentence.  For cases like that there's a more drastic solution.\nAfter writing the first draft, try explaining to a friend what you\njust wrote. Then replace the draft with what you said to your friend.People often tell me how much my essays sound like me talking.\nThe fact that this seems worthy of comment shows how rarely people\nmanage to write in spoken language.  Otherwise everyone's writing\nwould sound like them talking.If you simply manage to write in spoken language, you'll be ahead\nof 95% of writers.  And it's so easy to do: just don't let a sentence\nthrough unless it's the way you'd say it to a friend.Thanks to Patrick Collison and Jessica Livingston for reading drafts of this."},{"title":"Writing,  Briefly","text":"March 2005\n(In the process\nof answering an email, I accidentally wrote a tiny essay about writing.\nI usually spend weeks on an essay.  This one took  67 minutes—23\nof writing, and  44 of rewriting.)I think it's far more important to write well than most people\nrealize.  Writing doesn't just communicate ideas; it generates them.\nIf you're bad at writing and don't like to do it, you'll miss out\non most of the ideas writing would have generated.As for how to write well, here's the short version:\nWrite a bad version\n1 as fast as you can; rewrite it over and over; cut out everything\nunnecessary; write in a conversational tone; develop a nose for\nbad writing, so you can see and fix it in yours; imitate writers\nyou like; if you can't get started, tell someone what you plan to\nwrite about, then write down what you said; expect\n80% of the ideas in an essay to happen after you start writing it,\nand 50% of those you start with to be wrong; be confident enough\nto cut; have friends you trust read your stuff and tell you which\nbits are confusing or drag; don't (always) make detailed outlines;\nmull ideas over for a few days before\nwriting; carry a small notebook or scrap paper with you; start writing\nwhen you think of the first\nsentence; if a deadline\nforces you to start before that, just say the most important sentence\nfirst; write about stuff you like; don't try to sound impressive; don't hesitate to change the topic on the fly;\nuse footnotes to contain digressions; use anaphora to knit\nsentences together; read your essays out loud to see (a) where you stumble\nover awkward phrases and (b) which bits are boring (the\nparagraphs you dread reading); try to tell the\nreader something new and useful; work in fairly big quanta of time;\nwhen you restart, begin by rereading what you have so far; when you\nfinish, leave yourself something easy to start with; accumulate\nnotes for topics you plan to cover at the bottom of the file; don't\nfeel obliged to cover any of them; write for a reader who won't\nread the essay as carefully as you do, just as pop songs are\ndesigned to sound ok on crappy car radios;\nif you say anything mistaken, fix it immediately;\nask friends which sentence you'll regret most; go back and tone\ndown harsh remarks; publish stuff online, because\nan audience makes you write more, and thus generate more\nideas; print out drafts instead of just looking at them\non the screen; use simple, germanic words; learn to distinguish\nsurprises from digressions; learn to recognize the approach of an\nending, and when one appears, grab it."},{"title":"Writing and Speaking","text":"March 2012I'm not a very good speaker.  I say \"um\" a lot. Sometimes I have\nto pause when I lose my train of thought.  I wish I were a better\nspeaker.  But I don't wish I were a better speaker like I wish I\nwere a better writer.  What I really want is to have good ideas,\nand that's a much bigger part of being a good writer than being a\ngood speaker.Having good ideas is most of writing well.  If you know what you're\ntalking about, you can say it in the plainest words and you'll be\nperceived as having a good style.  With speaking it's the opposite:\nhaving good ideas is an alarmingly small component of being a good\nspeaker.I first noticed this at a conference several years ago.\nThere was another speaker who was much better than me.\nHe had all of us roaring with laughter.  I seemed awkward and\nhalting by comparison.  Afterward I put my talk online like I usually\ndo.  As I was doing it I tried to imagine what a transcript of the\nother guy's talk would be like, and it was only then I realized he\nhadn't said very much.Maybe this would have been obvious to someone who knew more about\nspeaking, but it was a revelation to me how much less ideas mattered\nin speaking than writing.\n[1]A few years later I heard a talk by someone who was not merely a\nbetter speaker than me, but a famous speaker.  Boy was he good.  So\nI decided I'd pay close attention to what he said, to learn how he\ndid it.  After about ten sentences I found myself thinking \"I don't\nwant to be a good speaker.\"Being a really good speaker is not merely orthogonal to having good ideas,\nbut in many ways pushes you in the opposite direction.  For example,\nwhen I give a talk I usually write it out beforehand.  I know that's\na mistake; I know delivering a\nprewritten\ntalk makes it harder to\nengage with an audience.  The way to get the attention of an audience\nis to give them your full attention, and when you're delivering\na prewritten talk your attention is always divided between the\naudience and the talk—even if you've memorized it.  If you want\nto engage an audience it's better to start with no more than an outline\nof what you want to say and\nad lib the individual sentences.  But\nif you do that you could spend no more time thinking about each\nsentence than it takes to say it.\n[2]\nOccasionally the stimulation\nof talking to a live audience makes you think of new things, but\nin general this is not going to generate ideas as well as writing\ndoes, where you can spend as long on each sentence as you want.If you rehearse a prewritten speech enough, you can get\nasymptotically close to the sort of engagement you get when speaking\nad lib.  Actors do.  But here again there's a tradeoff between\nsmoothness and ideas.  All the time you spend practicing a talk,\nyou could instead spend making it better.  Actors don't face\nthat temptation except in the rare cases where they've written the\nscript, but any speaker does.  Before I give a talk I can usually\nbe found sitting in a corner somewhere with a copy printed out on\npaper, trying to rehearse it in my head.  But I always end up\nspending most of the time rewriting it instead.  Every talk I give\nends up being given from a manuscript full of things crossed out\nand rewritten.  Which of course makes me um even more, because I\nhaven't had any time at all to practice the new bits.\n[3]Depending on your audience, there are even worse tradeoffs than\nthese.  Audiences like to be flattered; they like jokes; they like\nto be swept off their feet by a vigorous stream of words.  As you\ndecrease the intelligence of the audience, being a good speaker is\nincreasingly a matter of being a good bullshitter.  That's true in\nwriting too of course, but the descent is steeper with talks.  Any\ngiven person is dumber as a member of an audience than as a reader.\nJust as a speaker ad libbing can only spend as long thinking about\neach sentence as it takes to say it, a person hearing a talk can\nonly spend as long thinking about each sentence as it takes to hear\nit.  Plus people in an audience are always affected by the reactions\nof those around them, and the reactions that spread from person to\nperson in an audience are disproportionately the more brutish sort,\njust as low notes travel through walls better than high ones.  Every\naudience is an incipient mob, and a good speaker uses that.  Part\nof the reason I laughed so much at the talk by the good speaker at\nthat conference was that everyone else did.\n[4]So are talks useless?  They're certainly inferior to the written\nword as a source of ideas.  But that's not all talks are good for.\nWhen I go to a talk, it's usually because I'm interested in the\nspeaker.  Listening to a talk is the closest most of us can get to\nhaving a conversation with someone like the president, who doesn't\nhave time to meet individually with all the people who want to meet\nhim.Talks are also good at motivating me to do things.  It's probably\nno coincidence that so many famous speakers are described as\nmotivational speakers.  That may be what public speaking is really\nfor.  It's probably what it was originally for.  The emotional\nreactions you can elicit with a talk can be a powerful force.\nI wish I could say that force was more often used for good than\nill, but I'm not sure.Notes[1]\nI'm not talking here about academic talks, which are a\ndifferent type of thing.  While the\naudience at an academic talk might appreciate a joke, they will (or\nat least should) make a conscious effort to see what new ideas\nyou're presenting.[2]\nThat's the lower bound.  In practice you can often do better,\nbecause talks are usually about things you've written or talked\nabout before, and when you ad lib you end up reproducing some of\nthose sentences.  Like early medieval architecture, impromptu talks\nare made of spolia.  Which feels a bit dishonest, incidentally,\nbecause you have to deliver these sentences as if you'd just thought\nof them.[3]\nRobert Morris points out that there is a way in which practicing\ntalks makes them better: reading a talk out loud can expose awkward\nparts.  I agree and in fact I read most things I write out loud at\nleast once for that reason.[4]\nFor sufficiently small audiences, it may not be true that being\npart of an audience makes people dumber.  The real decline seems\nto set in when the audience gets too big for the talk to feel like\na conversation—maybe around 10 people.Thanks to Sam Altman and Robert Morris for reading drafts\nof this."},{"title":"You Weren't Meant to Have a Boss","text":"March 2008, rev. June 2008Technology tends to separate normal from natural.  Our bodies\nweren't designed to eat the foods that people in rich countries eat, or\nto get so little exercise.\nThere may be a similar problem with the way we work:\na normal job may be as bad for us intellectually as white flour\nor sugar is for us physically.I began to suspect this after spending several years working\nwith startup founders.  I've now worked with over 200 of them, and I've\nnoticed a definite difference between programmers working on their\nown startups and those working for large organizations.\nI wouldn't say founders seem happier, necessarily;\nstarting a startup can be very stressful. Maybe the best way to put\nit is to say that they're happier in the sense that your body is\nhappier during a long run than sitting on a sofa eating\ndoughnuts.Though they're statistically abnormal, startup founders seem to be\nworking in a way that's more natural for humans.I was in Africa last year and saw a lot of animals in the wild that\nI'd only seen in zoos before. It was remarkable how different they\nseemed. Particularly lions. Lions in the wild seem about ten times\nmore alive. They're like different animals. I suspect that working\nfor oneself feels better to humans in much the same way that living\nin the wild must feel better to a wide-ranging predator like a lion.\nLife in a zoo is easier, but it isn't the life they were designed\nfor.TreesWhat's so unnatural about working for a big company?  The root of\nthe problem is that humans weren't meant to work in such large\ngroups.Another thing you notice when you see animals in the wild is that\neach species thrives in groups of a certain size.  A herd of impalas\nmight have 100 adults; baboons maybe 20; lions rarely 10.  Humans\nalso seem designed to work in groups, and what I've read about\nhunter-gatherers accords with research on organizations and my own\nexperience to suggest roughly what the ideal size is: groups of 8\nwork well; by 20 they're getting hard to manage; and a group of 50\nis really unwieldy.\n[1]Whatever the upper limit is, we are clearly not meant to work in\ngroups of several hundred.  And yet—for reasons having more\nto do with technology than human nature—a great many people\nwork for companies with hundreds or thousands of employees.Companies know groups that large wouldn't work, so they divide\nthemselves into units small enough to work together.  But to\ncoordinate these they have to introduce something new: bosses.These smaller groups are always arranged in a tree structure.  Your\nboss is the point where your group attaches to the tree.  But when\nyou use this trick for dividing a large group into smaller ones,\nsomething strange happens that I've never heard anyone mention\nexplicitly.  In the group one level up from yours, your boss\nrepresents your entire group.  A group of 10 managers is not merely\na group of 10 people working together in the usual way.  It's really\na group of groups.  Which means for a group of 10 managers to work\ntogether as if they were simply a group of 10 individuals, the group\nworking for each manager would have to work as if they were a single\nperson—the workers and manager would each share only one\nperson's worth of freedom between them.In practice a group of people are never able to act as if they were\none person.  But in a large organization divided into groups in\nthis way, the pressure is always in that direction.  Each group\ntries its best to work as if it were the small group of individuals\nthat humans were designed to work in.  That was the point of creating\nit.  And when you propagate that constraint, the result is that\neach person gets freedom of action in inverse proportion to the\nsize of the entire tree.\n[2]Anyone who's worked for a large organization has felt this.  You\ncan feel the difference between working for a company with 100\nemployees and one with 10,000, even if your group has only 10 people.Corn SyrupA group of 10 people within a large organization is a kind of fake\ntribe.  The number of people you interact with is about right.  But\nsomething is missing: individual initiative.  Tribes of hunter-gatherers\nhave much more freedom.  The leaders have a little more power than other\nmembers of the tribe, but they don't generally tell them what to\ndo and when the way a boss can.It's not your boss's fault.  The real problem is that in the group\nabove you in the hierarchy, your entire group is one virtual person.\nYour boss is just the way that constraint is imparted to you.So working in a group of 10 people within a large organization feels\nboth right and wrong at the same time.   On the surface it feels\nlike the kind of group you're meant to work in, but something major\nis missing.  A job at a big company is like high fructose corn\nsyrup: it has some of the qualities of things you're meant to like,\nbut is disastrously lacking in others.Indeed, food is an excellent metaphor to explain what's wrong with\nthe usual sort of job.For example, working for a big company is the default thing to do,\nat least for programmers.  How bad could it be?  Well, food shows\nthat pretty clearly.  If you were dropped at a random point in\nAmerica today, nearly all the food around you would be bad for you.\nHumans were not designed to eat white flour, refined sugar, high\nfructose corn syrup, and hydrogenated vegetable oil.  And yet if\nyou analyzed the contents of the average grocery store you'd probably\nfind these four ingredients accounted for most of the calories.\n\"Normal\" food is terribly bad for you.  The only people who eat\nwhat humans were actually designed to eat are a few Birkenstock-wearing\nweirdos in Berkeley.If \"normal\" food is so bad for us, why is it so common?  There are\ntwo main reasons. One is that it has more immediate appeal.  You\nmay feel lousy an hour after eating that pizza, but eating the first\ncouple bites feels great.  The other is economies of scale.\nProducing junk food scales; producing fresh vegetables doesn't.\nWhich means (a) junk food can be very cheap, and (b) it's worth\nspending a lot to market it.If people have to choose between something that's cheap, heavily\nmarketed, and appealing in the short term, and something that's\nexpensive, obscure, and appealing in the long term, which do you\nthink most will choose?It's the same with work.  The average MIT graduate wants to work\nat Google or Microsoft, because it's a recognized brand, it's safe,\nand they'll get paid a good salary right away.  It's the job\nequivalent of the pizza they had for lunch.  The drawbacks will\nonly become apparent later, and then only in a vague sense of\nmalaise.And founders and early employees of startups, meanwhile, are like\nthe Birkenstock-wearing weirdos of Berkeley:  though a tiny minority\nof the population, they're the ones living as humans are meant to.\nIn an artificial world, only extremists live naturally.ProgrammersThe restrictiveness of big company jobs is particularly hard on\nprogrammers, because the essence of programming is to build new\nthings.  Sales people make much the same pitches every day; support\npeople answer much the same questions; but once you've written a\npiece of code you don't need to write it again.  So a programmer\nworking as programmers are meant to is always making new things.\nAnd when you're part of an organization whose structure gives each\nperson freedom in inverse proportion to the size of the tree, you're\ngoing to face resistance when you do something new.This seems an inevitable consequence of bigness.  It's true even\nin the smartest companies.  I was talking recently to a founder who\nconsidered starting a startup right out of college, but went to\nwork for Google instead because he thought he'd learn more there.\nHe didn't learn as much as he expected.  Programmers learn by doing,\nand most of the things he wanted to do, he couldn't—sometimes\nbecause the company wouldn't let him, but often because the company's\ncode wouldn't let him.  Between the drag of legacy code, the overhead\nof doing development in such a large organization, and the restrictions\nimposed by interfaces owned by other groups, he could only try a\nfraction of the things he would have liked to.  He said he has\nlearned much more in his own startup, despite the fact that he has\nto do all the company's errands as well as programming, because at\nleast when he's programming he can do whatever he wants.An obstacle downstream propagates upstream.  If you're not allowed\nto implement new ideas, you stop having them.  And vice versa: when\nyou can do whatever you want, you have more ideas about what to do.\nSo working for yourself makes your brain more powerful in the same\nway a low-restriction exhaust system makes an engine more powerful.Working for yourself doesn't have to mean starting a startup, of\ncourse.  But a programmer deciding between a regular job at a big\ncompany and their own startup is probably going to learn more doing\nthe startup.You can adjust the amount of freedom you get by scaling the size\nof company you work for.  If you start the company, you'll have the\nmost freedom.  If you become one of the first 10 employees you'll\nhave almost as much freedom as the founders.  Even a company with\n100 people will feel different from one with 1000.Working for a small company doesn't ensure freedom.  The tree\nstructure of large organizations sets an upper bound on freedom,\nnot a lower bound.  The head of a small company may still choose\nto be a tyrant.  The point is that a large organization is compelled\nby its structure to be one.ConsequencesThat has real consequences for both organizations and individuals.\nOne is that companies will inevitably slow down as they grow larger,\nno matter how hard they try to keep their startup mojo.  It's a\nconsequence of the tree structure that every large organization is\nforced to adopt.Or rather, a large organization could only avoid slowing down if\nthey avoided tree structure.  And since human nature limits the\nsize of group that can work together, the only way I can imagine\nfor larger groups to avoid tree structure would be to have no\nstructure: to have each group actually be independent, and to work\ntogether the way components of a market economy do.That might be worth exploring.  I suspect there are already some\nhighly partitionable businesses that lean this way.  But I don't\nknow any technology companies that have done it.There is one thing companies can do short of structuring themselves\nas sponges:  they can stay small.  If I'm right, then it really\npays to keep a company as small as it can be at every stage.\nParticularly a technology company.  Which means it's doubly important\nto hire the best people.  Mediocre hires hurt you twice: they get\nless done, but they also make you big, because you need more of\nthem to solve a given problem.For individuals the upshot is the same: aim small.  It will always\nsuck to work for large organizations, and the larger the organization,\nthe more it will suck.In an essay I wrote a couple years ago\nI advised graduating seniors\nto work for a couple years for another company before starting their\nown.  I'd modify that now.  Work for another company if you want\nto, but only for a small one, and if you want to start your own\nstartup, go ahead.The reason I suggested college graduates not start startups immediately\nwas that I felt most would fail.  And they will.  But ambitious\nprogrammers are better off doing their own thing and failing than\ngoing to work at a big company.  Certainly they'll learn more.  They\nmight even be better off financially.  A lot of people in their\nearly twenties get into debt, because their expenses grow even\nfaster than the salary that seemed so high when they left school.\nAt least if you start a startup and fail your net worth will be\nzero rather than negative.\n[3]We've now funded so many different types of founders that we have\nenough data to see patterns, and there seems to be no benefit from\nworking for a big company.  The people who've worked for a few years\ndo seem better than the ones straight out of college, but only\nbecause they're that much older.The people who come to us from big companies often seem kind of\nconservative.  It's hard to say how much is because big companies\nmade them that way, and how much is the natural conservatism that\nmade them work for the big companies in the first place.  But\ncertainly a large part of it is learned.  I know because I've seen\nit burn off.Having seen that happen so many times is one of the things that\nconvinces me that working for oneself, or at least for a small\ngroup, is the natural way for programmers to live.  Founders arriving\nat Y Combinator often have the downtrodden air of refugees.  Three\nmonths later they're transformed: they have so much more\nconfidence\nthat they seem as if they've grown several inches taller.\n[4]\nStrange as this sounds, they seem both more worried and happier at the same\ntime.  Which is exactly how I'd describe the way lions seem in the\nwild.Watching employees get transformed into founders makes it clear\nthat the difference between the two is due mostly to environment—and\nin particular that the environment in big companies is toxic to\nprogrammers.   In the first couple weeks of working on their own\nstartup they seem to come to life, because finally they're working\nthe way people are meant to.Notes[1]\nWhen I talk about humans being meant or designed to live a\ncertain way, I mean by evolution.[2]\nIt's not only the leaves who suffer.  The constraint propagates\nup as well as down.  So managers are constrained too; instead of\njust doing things, they have to act through subordinates.[3]\nDo not finance your startup with credit cards.  Financing a\nstartup with debt is usually a stupid move, and credit card debt\nstupidest of all.  Credit card debt is a bad idea, period.  It is\na trap set by evil companies for the desperate and the foolish.[4]\nThe founders we fund used to be younger (initially we encouraged\nundergrads to apply), and the first couple times I saw this I used\nto wonder if they were actually getting physically taller.Thanks to Trevor Blackwell, Ross Boucher, Aaron Iba, Abby\nKirigin, Ivan Kirigin, Jessica Livingston, and Robert Morris for\nreading drafts of this."}]