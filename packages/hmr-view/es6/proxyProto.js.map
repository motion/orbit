{"version":3,"sources":["../src/proxyProto.js"],"names":["createPrototypeProxy","proxy","current","mountedInstances","proxyToString","name","toString","proxyMethod","proxiedMethod","apply","arguments","proxiedComponentDidMount","push","componentDidMount","proxiedComponentWillUnmount","index","indexOf","splice","componentWillUnmount","defineProxyProperty","descriptor","defineProxyPropertyWithValue","value","enumerable","writable","configurable","createAutoBindMap","__reactAutoBindMap","hasOwnProperty","createAutoBindPairs","__reactAutoBindPairs","i","length","method","update","next","currentNames","previousName","removedNames","forEach","__proto__","get"],"mappings":"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","file":"proxyProto.js","sourcesContent":["import { assign, difference } from 'lodash'\n\nexport default function createPrototypeProxy() {\n  let proxy = {}\n  let current = null\n  let mountedInstances = []\n\n  /**\n   * Creates a proxied toString() method pointing to the current version's toString().\n   */\n  function proxyToString(name) {\n    // Wrap to always call the current version\n    return function toString() {\n      if (typeof current[name] === 'function') {\n        return current[name].toString()\n      } else {\n        return '<method was deleted>'\n      }\n    }\n  }\n\n  /**\n   * Creates a proxied method that calls the current version, whenever available.\n   */\n  function proxyMethod(name) {\n    // Wrap to always call the current version\n    const proxiedMethod = function() {\n      if (typeof current[name] === 'function') {\n        return current[name].apply(this, arguments)\n      }\n    }\n\n    // Copy properties of the original function, if any\n    assign(proxiedMethod, current[name])\n    proxiedMethod.toString = proxyToString(name)\n\n    return proxiedMethod\n  }\n\n  /**\n   * Augments the original componentDidMount with instance tracking.\n   */\n  function proxiedComponentDidMount() {\n    mountedInstances.push(this)\n    if (typeof current.componentDidMount === 'function') {\n      return current.componentDidMount.apply(this, arguments)\n    }\n  }\n  proxiedComponentDidMount.toString = proxyToString('componentDidMount')\n\n  /**\n   * Augments the original componentWillUnmount with instance tracking.\n   */\n  function proxiedComponentWillUnmount() {\n    const index = mountedInstances.indexOf(this)\n    // Unless we're in a weird environment without componentDidMount\n    if (index !== -1) {\n      mountedInstances.splice(index, 1)\n    }\n    if (typeof current.componentWillUnmount === 'function') {\n      return current.componentWillUnmount.apply(this, arguments)\n    }\n  }\n  proxiedComponentWillUnmount.toString = proxyToString('componentWillUnmount')\n\n  /**\n   * Defines a property on the proxy.\n   */\n  function defineProxyProperty(name, descriptor) {\n    Object.defineProperty(proxy, name, descriptor)\n  }\n\n  /**\n   * Defines a property, attempting to keep the original descriptor configuration.\n   */\n  function defineProxyPropertyWithValue(name, value) {\n    const { enumerable = false, writable = true } =\n      Object.getOwnPropertyDescriptor(current, name) || {}\n\n    defineProxyProperty(name, {\n      configurable: true,\n      enumerable,\n      writable,\n      value,\n    })\n  }\n\n  /**\n   * Creates an auto-bind map mimicking the original map, but directed at proxy.\n   */\n  function createAutoBindMap() {\n    if (!current.__reactAutoBindMap) {\n      return\n    }\n\n    let __reactAutoBindMap = {}\n    for (let name in current.__reactAutoBindMap) {\n      if (\n        typeof proxy[name] === 'function' &&\n        current.__reactAutoBindMap.hasOwnProperty(name)\n      ) {\n        __reactAutoBindMap[name] = proxy[name]\n      }\n    }\n\n    return __reactAutoBindMap\n  }\n\n  /**\n   * Creates an auto-bind map mimicking the original map, but directed at proxy.\n   */\n  function createAutoBindPairs() {\n    let __reactAutoBindPairs = []\n\n    for (let i = 0; i < current.__reactAutoBindPairs.length; i += 2) {\n      const name = current.__reactAutoBindPairs[i]\n      const method = proxy[name]\n\n      if (typeof method === 'function') {\n        __reactAutoBindPairs.push(name, method)\n      }\n    }\n\n    return __reactAutoBindPairs\n  }\n\n  /**\n   * Applies the updated prototype.\n   */\n  function update(next) {\n    // Save current source of truth\n    current = next\n\n    // Find changed property names\n    const currentNames = Object.getOwnPropertyNames(current)\n    const previousName = Object.getOwnPropertyNames(proxy)\n    const removedNames = difference(previousName, currentNames)\n\n    // Remove properties and methods that are no longer there\n    removedNames.forEach(name => {\n      delete proxy[name]\n    })\n\n    // Copy every descriptor\n    currentNames.forEach(name => {\n      const descriptor = Object.getOwnPropertyDescriptor(current, name)\n      if (typeof descriptor.value === 'function') {\n        // Functions require additional wrapping so they can be bound later\n        defineProxyPropertyWithValue(name, proxyMethod(name))\n      } else {\n        // Other values can be copied directly\n        defineProxyProperty(name, descriptor)\n      }\n    })\n\n    // Track mounting and unmounting\n    defineProxyPropertyWithValue('componentDidMount', proxiedComponentDidMount)\n    defineProxyPropertyWithValue(\n      'componentWillUnmount',\n      proxiedComponentWillUnmount\n    )\n\n    if (current.hasOwnProperty('__reactAutoBindMap')) {\n      defineProxyPropertyWithValue('__reactAutoBindMap', createAutoBindMap())\n    }\n\n    if (current.hasOwnProperty('__reactAutoBindPairs')) {\n      defineProxyPropertyWithValue(\n        '__reactAutoBindPairs',\n        createAutoBindPairs()\n      )\n    }\n\n    // Set up the prototype chain\n    proxy.__proto__ = next\n\n    return mountedInstances\n  }\n\n  /**\n   * Returns the up-to-date proxy prototype.\n   */\n  function get() {\n    return proxy\n  }\n\n  return {\n    update,\n    get,\n  }\n}\n"]}