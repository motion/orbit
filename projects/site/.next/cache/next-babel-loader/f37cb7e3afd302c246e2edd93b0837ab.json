{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport './duotone-dark.css';\nimport { gloss, useTheme } from '@o/ui';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport darkTheme from 'prism-react-renderer/themes/nightOwl';\nimport React, { memo } from 'react';\nimport lightTheme from './lightOwlTheme';\nexport var CodeBlock = memo(__signature__(props => {\n  var theme = useTheme();\n  return React.createElement(CodeBlockChrome, null, React.createElement(Highlight, _extends({}, defaultProps, {\n    code: (\"\" + props.children).trim(),\n    language: \"jsx\",\n    theme: theme.background.isDark() ? darkTheme : lightTheme\n  }), (_ref) => {\n    var {\n      className,\n      style,\n      tokens,\n      getLineProps,\n      getTokenProps\n    } = _ref;\n    return React.createElement(\"pre\", {\n      className: className,\n      style: style\n    }, tokens.map((line, i) => React.createElement(\"div\", _extends({\n      key: i\n    }, getLineProps({\n      line,\n      key: i\n    })), line.map((token, key) => React.createElement(\"span\", _extends({\n      key: key\n    }, getTokenProps({\n      token,\n      key\n    })))))));\n  }));\n}, \"useTheme{theme}\", () => [useTheme]));\nCodeBlock.displayName = \"CodeBlock\";\nvar CodeBlockChrome = gloss({\n  fontSize: 13,\n  lineHeight: 18,\n  '& span': {\n    display: 'inline'\n  },\n  '& div': {\n    display: 'block'\n  }\n});\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(CodeBlock, \"CodeBlock\", \"/Users/nw/projects/motion/orbit/projects/site/views/CodeBlock.tsx\");\n  reactHotLoader.register(CodeBlockChrome, \"CodeBlockChrome\", \"/Users/nw/projects/motion/orbit/projects/site/views/CodeBlock.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/nw/projects/motion/orbit/projects/site/views/CodeBlock.tsx"],"names":["gloss","useTheme","Highlight","defaultProps","darkTheme","React","memo","lightTheme","CodeBlock","props","theme","children","trim","background","isDark","className","style","tokens","getLineProps","getTokenProps","map","line","i","key","token","CodeBlockChrome","fontSize","lineHeight","display"],"mappings":";;;;;;;;;;;AAAA,OAAO,oBAAP;AAEA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,IAAoBC,YAApB,QAAwC,sBAAxC;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AAEA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,OAAO,IAAMC,SAAS,GAAGF,IAAI,eAAEG,KAAD,IAAoD;AAChF,MAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,SACE,oBAAC,eAAD,QACE,oBAAC,SAAD,eACME,YADN;AAEE,IAAA,IAAI,EAAE,MAAGM,KAAK,CAACE,QAAT,EAAoBC,IAApB,EAFR;AAGE,IAAA,QAAQ,EAAC,KAHX;AAIE,IAAA,KAAK,EAAEF,KAAK,CAACG,UAAN,CAAiBC,MAAjB,KAA4BV,SAA5B,GAAwCG;AAJjD,MAMG;AAAA,QAAC;AAAEQ,MAAAA,SAAF;AAAaC,MAAAA,KAAb;AAAoBC,MAAAA,MAApB;AAA4BC,MAAAA,YAA5B;AAA0CC,MAAAA;AAA1C,KAAD;AAAA,WACC;AAAK,MAAA,SAAS,EAAEJ,SAAhB;AAA2B,MAAA,KAAK,EAAEC;AAAlC,OACGC,MAAM,CAACG,GAAP,CAAW,CAACC,IAAD,EAAOC,CAAP,KACV;AAAK,MAAA,GAAG,EAAEA;AAAV,OAAiBJ,YAAY,CAAC;AAAEG,MAAAA,IAAF;AAAQE,MAAAA,GAAG,EAAED;AAAb,KAAD,CAA7B,GACGD,IAAI,CAACD,GAAL,CAAS,CAACI,KAAD,EAAQD,GAAR,KACR;AAAM,MAAA,GAAG,EAAEA;AAAX,OAAoBJ,aAAa,CAAC;AAAEK,MAAAA,KAAF;AAASD,MAAAA;AAAT,KAAD,CAAjC,EADD,CADH,CADD,CADH,CADD;AAAA,GANH,CADF,CADF;AAsBD,CAxB4B,4BACbtB,QADa,GAAtB;AAAMO,S;AA0Bb,IAAMiB,eAAe,GAAGzB,KAAK,CAAC;AAC5B0B,EAAAA,QAAQ,EAAE,EADkB;AAE5BC,EAAAA,UAAU,EAAE,EAFgB;AAI5B,YAAU;AACRC,IAAAA,OAAO,EAAE;AADD,GAJkB;AAO5B,WAAS;AACPA,IAAAA,OAAO,EAAE;AADF;AAPmB,CAAD,CAA7B;;;;;;;;;;0BA1BapB,S;0BA0BPiB,e","sourcesContent":["import './duotone-dark.css'\n\nimport { gloss, useTheme } from '@o/ui'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport darkTheme from 'prism-react-renderer/themes/nightOwl'\nimport React, { memo } from 'react'\n\nimport lightTheme from './lightOwlTheme'\n\nexport const CodeBlock = memo((props: { children: string; language?: string }) => {\n  const theme = useTheme()\n  return (\n    <CodeBlockChrome>\n      <Highlight\n        {...defaultProps}\n        code={`${props.children}`.trim()}\n        language=\"jsx\"\n        theme={theme.background.isDark() ? darkTheme : lightTheme}\n      >\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div key={i} {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span key={key} {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </CodeBlockChrome>\n  )\n})\n\nconst CodeBlockChrome = gloss({\n  fontSize: 13,\n  lineHeight: 18,\n\n  '& span': {\n    display: 'inline',\n  },\n  '& div': {\n    display: 'block',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}