{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { useDebounce } from '@o/ui';\nimport { useForceUpdate } from '@o/use-store';\nimport { useEffect, useLayoutEffect } from 'react';\nimport StickySidebar from 'sticky-sidebar';\nexport function useStickySidebar(_ref) {\n  var {\n    condition = true,\n    id\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"condition\", \"id\"]);\n\n  var forceUpdate = useForceUpdate();\n  var forceUpdateSlow = useDebounce(forceUpdate, 100);\n  useEffect(() => {\n    window.addEventListener('resize', forceUpdateSlow);\n    return () => window.removeEventListener('resize', forceUpdateSlow);\n  });\n  useLayoutEffect(() => {\n    if (condition === false) {\n      return;\n    }\n\n    var sidebar = new StickySidebar(id, _extends({\n      topSpacing: 0,\n      bottomSpacing: 0,\n      innerWrapperSelector: '.sidebar__inner',\n      stickyClass: 'is-affixed',\n      minWidth: 0,\n      resizeSensor: true\n    }, rest));\n    return () => {\n      sidebar.destroy();\n    };\n  }, []);\n}\n\n__signature__(useStickySidebar, \"useForceUpdate{forceUpdate}\\nuseDebounce{forceUpdateSlow}\\nuseEffect{}\\nuseLayoutEffect{}\", () => [useForceUpdate, useDebounce]);\n\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useStickySidebar, \"useStickySidebar\", \"/Users/nw/projects/motion/orbit/projects/site/pages/useStickySidebar.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/nw/projects/motion/orbit/projects/site/pages/useStickySidebar.tsx"],"names":["useDebounce","useForceUpdate","useEffect","useLayoutEffect","StickySidebar","useStickySidebar","condition","id","rest","forceUpdate","forceUpdateSlow","window","addEventListener","removeEventListener","sidebar","topSpacing","bottomSpacing","innerWrapperSelector","stickyClass","minWidth","resizeSensor","destroy"],"mappings":";;;;;;;;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,SAAT,EAAoBC,eAApB,QAAmD,OAAnD;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,OAAO,SAASC,gBAAT,OAA6D;AAAA,MAAnC;AAAEC,IAAAA,SAAS,GAAG,IAAd;AAAoBC,IAAAA;AAApB,GAAmC;AAAA,MAARC,IAAQ;;AAClE,MAAMC,WAAW,GAAGR,cAAc,EAAlC;AACA,MAAMS,eAAe,GAAGV,WAAW,CAACS,WAAD,EAAc,GAAd,CAAnC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,eAAlC;AACA,WAAO,MAAMC,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,eAArC,CAAb;AACD,GAHQ,CAAT;AAKAP,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIG,SAAS,KAAK,KAAlB,EAAyB;AACvB;AACD;;AACD,QAAMQ,OAAO,GAAG,IAAIV,aAAJ,CAAkBG,EAAlB;AACdQ,MAAAA,UAAU,EAAE,CADE;AAEdC,MAAAA,aAAa,EAAE,CAFD;AAGdC,MAAAA,oBAAoB,EAAE,iBAHR;AAIdC,MAAAA,WAAW,EAAE,YAJC;AAKdC,MAAAA,QAAQ,EAAE,CALI;AAMdC,MAAAA,YAAY,EAAE;AANA,OAOXZ,IAPW,EAAhB;AASA,WAAO,MAAM;AACXM,MAAAA,OAAO,CAACO,OAAR;AACD,KAFD;AAGD,GAhBc,EAgBZ,EAhBY,CAAf;AAiBD;;cA1BehB,gB,sGACMJ,c,EACID,W;;;;;;;;;;;0BAFVK,gB","sourcesContent":["import { useDebounce } from '@o/ui'\nimport { useForceUpdate } from '@o/use-store'\nimport { useEffect, useLayoutEffect, useRef } from 'react'\nimport StickySidebar from 'sticky-sidebar'\n\nexport function useStickySidebar({ condition = true, id, ...rest }) {\n  const forceUpdate = useForceUpdate()\n  const forceUpdateSlow = useDebounce(forceUpdate, 100)\n\n  useEffect(() => {\n    window.addEventListener('resize', forceUpdateSlow)\n    return () => window.removeEventListener('resize', forceUpdateSlow)\n  })\n\n  useLayoutEffect(() => {\n    if (condition === false) {\n      return\n    }\n    const sidebar = new StickySidebar(id, {\n      topSpacing: 0,\n      bottomSpacing: 0,\n      innerWrapperSelector: '.sidebar__inner',\n      stickyClass: 'is-affixed',\n      minWidth: 0,\n      resizeSensor: true,\n      ...rest,\n    })\n    return () => {\n      sidebar.destroy()\n    }\n  }, [])\n}\n"]},"metadata":{},"sourceType":"module"}