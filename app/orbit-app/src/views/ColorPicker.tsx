import { IconShape, Row, View, ViewProps } from '@o/ui'
import { gloss } from 'gloss'
import React, { memo } from 'react'

const niceColors = [
  ['rgb(17, 17, 17)', 'rgb(127, 219, 255)'],
  ['rgb(17, 17, 17)', 'rgb(0, 116, 217)'],
  ['rgb(17, 17, 17)', 'rgb(1, 255, 112)'],
  ['rgb(17, 17, 17)', 'rgb(57, 204, 204)'],
  ['rgb(17, 17, 17)', 'rgb(61, 153, 112)'],
  ['rgb(17, 17, 17)', 'rgb(46, 204, 64)'],
  ['rgb(17, 17, 17)', 'rgb(255, 65, 54)'],
  ['rgb(17, 17, 17)', 'rgb(255, 133, 27)'],
  ['rgb(17, 17, 17)', 'rgb(177, 13, 201)'],
  ['rgb(17, 17, 17)', 'rgb(255, 220, 0)'],
  ['rgb(17, 17, 17)', 'rgb(240, 18, 190)'],
  ['rgb(17, 17, 17)', 'rgb(170, 170, 170)'],
  ['rgb(17, 17, 17)', 'rgb(255, 255, 255)'],
  ['rgb(17, 17, 17)', 'rgb(221, 221, 221)'],
  ['rgb(255, 255, 255)', 'rgb(0, 116, 217)'],
  ['rgb(255, 255, 255)', 'rgb(0, 31, 63)'],
  ['rgb(255, 255, 255)', 'rgb(61, 153, 112)'],
  ['rgb(255, 255, 255)', 'rgb(255, 65, 54)'],
  ['rgb(255, 255, 255)', 'rgb(133, 20, 75)'],
  ['rgb(255, 255, 255)', 'rgb(177, 13, 201)'],
  ['rgb(255, 255, 255)', 'rgb(240, 18, 190)'],
  ['rgb(255, 255, 255)', 'rgb(17, 17, 17)'],
  ['rgb(221, 221, 221)', 'rgb(0, 116, 217)'],
  ['rgb(221, 221, 221)', 'rgb(0, 31, 63)'],
  ['rgb(221, 221, 221)', 'rgb(133, 20, 75)'],
  ['rgb(221, 221, 221)', 'rgb(255, 255, 255)'],
  ['rgb(221, 221, 221)', 'rgb(17, 17, 17)'],
  ['rgb(170, 170, 170)', 'rgb(0, 31, 63)'],
  ['rgb(170, 170, 170)', 'rgb(133, 20, 75)'],
  ['rgb(170, 170, 170)', 'rgb(17, 17, 17)'],
  ['rgb(240, 18, 190)', 'rgb(0, 31, 63)'],
  ['rgb(240, 18, 190)', 'rgb(255, 255, 255)'],
  ['rgb(240, 18, 190)', 'rgb(17, 17, 17)'],
  ['rgb(255, 220, 0)', 'rgb(177, 13, 201)'],
  ['rgb(255, 220, 0)', 'rgb(133, 20, 75)'],
  ['rgb(255, 220, 0)', 'rgb(0, 31, 63)'],
  ['rgb(255, 220, 0)', 'rgb(0, 116, 217)'],
  ['rgb(255, 220, 0)', 'rgb(17, 17, 17)'],
  ['rgb(177, 13, 201)', 'rgb(1, 255, 112)'],
  ['rgb(177, 13, 201)', 'rgb(221, 221, 221)'],
  ['rgb(177, 13, 201)', 'rgb(17, 17, 17)'],
  ['rgb(177, 13, 201)', 'rgb(255, 255, 255)'],
  ['rgb(177, 13, 201)', 'rgb(255, 220, 0)'],
  ['rgb(255, 133, 27)', 'rgb(133, 20, 75)'],
  ['rgb(255, 133, 27)', 'rgb(0, 31, 63)'],
  ['rgb(255, 133, 27)', 'rgb(17, 17, 17)'],
  ['rgb(133, 20, 75)', 'rgb(1, 255, 112)'],
  ['rgb(133, 20, 75)', 'rgb(127, 219, 255)'],
  ['rgb(133, 20, 75)', 'rgb(46, 204, 64)'],
  ['rgb(133, 20, 75)', 'rgb(255, 133, 27)'],
  ['rgb(133, 20, 75)', 'rgb(255, 220, 0)'],
  ['rgb(133, 20, 75)', 'rgb(170, 170, 170)'],
  ['rgb(133, 20, 75)', 'rgb(255, 255, 255)'],
  ['rgb(133, 20, 75)', 'rgb(221, 221, 221)'],
  ['rgb(255, 65, 54)', 'rgb(0, 31, 63)'],
  ['rgb(255, 65, 54)', 'rgb(255, 255, 255)'],
  ['rgb(255, 65, 54)', 'rgb(17, 17, 17)'],
  ['rgb(127, 219, 255)', 'rgb(0, 31, 63)'],
  ['rgb(127, 219, 255)', 'rgb(133, 20, 75)'],
  ['rgb(127, 219, 255)', 'rgb(240, 18, 190)'],
  ['rgb(127, 219, 255)', 'rgb(17, 17, 17)'],
  ['rgb(0, 116, 217)', 'rgb(1, 255, 112)'],
  ['rgb(0, 116, 217)', 'rgb(0, 31, 63)'],
  ['rgb(0, 116, 217)', 'rgb(255, 220, 0)'],
  ['rgb(0, 116, 217)', 'rgb(255, 255, 255)'],
  ['rgb(0, 116, 217)', 'rgb(17, 17, 17)'],
  ['rgb(0, 116, 217)', 'rgb(221, 221, 221)'],
  ['rgb(0, 31, 63)', 'rgb(0, 116, 217)'],
  ['rgb(0, 31, 63)', 'rgb(127, 219, 255)'],
  ['rgb(0, 31, 63)', 'rgb(61, 153, 112)'],
  ['rgb(0, 31, 63)', 'rgb(46, 204, 64)'],
  ['rgb(0, 31, 63)', 'rgb(1, 255, 112)'],
  ['rgb(0, 31, 63)', 'rgb(255, 65, 54)'],
  ['rgb(0, 31, 63)', 'rgb(255, 133, 27)'],
  ['rgb(0, 31, 63)', 'rgb(255, 220, 0)'],
  ['rgb(0, 31, 63)', 'rgb(240, 18, 190)'],
  ['rgb(0, 31, 63)', 'rgb(170, 170, 170)'],
  ['rgb(0, 31, 63)', 'rgb(221, 221, 221)'],
  ['rgb(0, 31, 63)', 'rgb(255, 255, 255)'],
  ['rgb(57, 204, 204)', 'rgb(0, 31, 63)'],
  ['rgb(57, 204, 204)', 'rgb(133, 20, 75)'],
  ['rgb(57, 204, 204)', 'rgb(17, 17, 17)'],
  ['rgb(1, 255, 112)', 'rgb(0, 116, 217)'],
  ['rgb(1, 255, 112)', 'rgb(0, 31, 63)'],
  ['rgb(1, 255, 112)', 'rgb(133, 20, 75)'],
  ['rgb(1, 255, 112)', 'rgb(240, 18, 190)'],
  ['rgb(1, 255, 112)', 'rgb(17, 17, 17)'],
  ['rgb(61, 153, 112)', 'rgb(0, 31, 63)'],
  ['rgb(61, 153, 112)', 'rgb(255, 255, 255)'],
  ['rgb(61, 153, 112)', 'rgb(17, 17, 17)'],
  ['rgb(46, 204, 64)', 'rgb(0, 31, 63)'],
  ['rgb(46, 204, 64)', 'rgb(17, 17, 17)'],
  ['rgb(46, 204, 64)', 'rgb(133, 20, 75)'],
]

export const ColorPicker = memo(function ColorPicker({
  count = 40,
  luminosity = 'dark',
  hue,
  onChangeColor,
  activeColor,
  size = 32,
  className,
  ...viewProps
}: {
  activeColor?: string
  count?: number
  seed?: number
  luminosity?: string
  hue?: string
  size?: number
  onChangeColor?: (colors: [string, string]) => any
} & ViewProps) {
  const combos = niceColors.slice(0, count)
  return (
    <Row space scrollable="x" hideScrollbars justifyContent="space-around">
      {combos.map((colors, i) => (
        <IconShape
          key={i}
          gradient={['red', 'pink']}
          width={size}
          height={size}
          onClick={() => {
            onChangeColor([colors[0], colors[1]])
          }}
          {...viewProps}
        />
      ))}
    </Row>
  )
})

const SVG = gloss(View)
SVG.defaultProps = {
  tagName: 'svg',
}
