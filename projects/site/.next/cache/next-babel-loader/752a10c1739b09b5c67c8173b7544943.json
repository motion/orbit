{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar G = __importStar(require(\"./globals\"));\n\nvar helpers_1 = require(\"./helpers\");\n\nexports.createInterpolator = function (range, output, extrapolate) {\n  if (helpers_1.is.fun(range)) {\n    return range;\n  }\n\n  if (helpers_1.is.arr(range)) {\n    return exports.createInterpolator({\n      range: range,\n      output: output,\n      extrapolate: extrapolate\n    });\n  }\n\n  if (helpers_1.is.str(range.output[0])) {\n    return G.createStringInterpolator(range);\n  }\n\n  var config = range;\n  var outputRange = config.output;\n  var inputRange = config.range || [0, 1];\n  var extrapolateLeft = config.extrapolateLeft || config.extrapolate || 'extend';\n  var extrapolateRight = config.extrapolateRight || config.extrapolate || 'extend';\n\n  var easing = config.easing || function (t) {\n    return t;\n  };\n\n  return function (input) {\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight, config.map);\n  };\n};\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {\n  var result = map ? map(input) : input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') return result;else if (extrapolateLeft === 'clamp') result = inputMin;\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') return result;else if (extrapolateRight === 'clamp') result = inputMax;\n  }\n\n  if (outputMin === outputMax) return outputMin;\n  if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax; // Input Range\n\n  if (inputMin === -Infinity) result = -result;else if (inputMax === Infinity) result = result - inputMin;else result = (result - inputMin) / (inputMax - inputMin); // Easing\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) result = -result;else if (outputMax === Infinity) result = result + outputMin;else result = result * (outputMax - outputMin) + outputMin;\n  return result;\n}\n\nfunction findRange(input, inputRange) {\n  for (var i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) break;\n  }\n\n  return i - 1;\n}","map":{"version":3,"sources":["../src/createInterpolator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as G from './globals'\nimport { is } from './helpers'\nimport {\n  Animatable,\n  InterpolatorFn,\n  EasingFunction,\n  ExtrapolateType,\n  InterpolatorConfig,\n  Interpolatable,\n} from './types'\n\ninterface InterpolatorFactory {\n  <In extends Interpolatable, Out extends Animatable>(\n    interpolator: InterpolatorFn<In, Out>\n  ): typeof interpolator\n\n  <In extends Interpolatable, Out extends Animatable>(\n    config: InterpolatorConfig<Out>\n  ): (input: number) => Animatable<Out>\n\n  <Out extends Animatable>(\n    range: readonly number[],\n    output: readonly Out[],\n    extrapolate?: ExtrapolateType\n  ): (input: number) => Animatable<Out>\n}\n\nexport const createInterpolator: InterpolatorFactory = <\n  Out extends Animatable = Animatable\n>(\n  range:\n    | readonly number[]\n    | InterpolatorFn<any[], Out>\n    | InterpolatorConfig<Out>,\n  output?: readonly Animatable[],\n  extrapolate?: ExtrapolateType\n) => {\n  if (is.fun(range)) {\n    return range\n  }\n  if (is.arr(range)) {\n    return createInterpolator({\n      range,\n      output: output!,\n      extrapolate,\n    })\n  }\n  if (is.str(range.output[0])) {\n    return G.createStringInterpolator(range as any) as any\n  }\n  const config = range as InterpolatorConfig<number>\n  const outputRange = config.output\n  const inputRange = config.range || [0, 1]\n\n  const extrapolateLeft =\n    config.extrapolateLeft || config.extrapolate || 'extend'\n  const extrapolateRight =\n    config.extrapolateRight || config.extrapolate || 'extend'\n  const easing = config.easing || (t => t)\n\n  return (input: number) => {\n    const range = findRange(input, inputRange)\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n      config.map\n    )\n  }\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: EasingFunction,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n  map?: (x: number) => number\n) {\n  let result = map ? map(input) : input\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') return result\n    else if (extrapolateLeft === 'clamp') result = inputMin\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') return result\n    else if (extrapolateRight === 'clamp') result = inputMax\n  }\n  if (outputMin === outputMax) return outputMin\n  if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax\n  // Input Range\n  if (inputMin === -Infinity) result = -result\n  else if (inputMax === Infinity) result = result - inputMin\n  else result = (result - inputMin) / (inputMax - inputMin)\n  // Easing\n  result = easing(result)\n  // Output Range\n  if (outputMin === -Infinity) result = -result\n  else if (outputMax === Infinity) result = result + outputMin\n  else result = result * (outputMax - outputMin) + outputMin\n  return result\n}\n\nfunction findRange(input: number, inputRange: readonly number[]) {\n  for (var i = 1; i < inputRange.length - 1; ++i)\n    if (inputRange[i] >= input) break\n  return i - 1\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}