{"version":3,"sources":["../src/helpers.js"],"names":["hash","camelToSnake","snakeToCamel","colorToString","isColorLikeString","isColorLikeArray","isColorLikeObject","isColorLikeLibrary","getColorLikeLibraryValue","expandCSSArray","thing","str","Object","i","length","charCodeAt","key","memoize","cb","Cache","rest","mappable","res","get","newVal","call","set","color","options","objectToColor","isColorLike","object","Array","isArray","indexOf","array","keyLen","r","g","b","a","val","isColor","toCSS","css","rgb","rgba","toColor","join","toString","arr3to4","arr","arr2to4","arr1to4","given","Error"],"mappings":"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","file":"helpers.js","sourcesContent":["// @flow\nimport type { Color, CSSArray } from './types'\nimport colorNames from './colorNames'\nimport { CAMEL_TO_SNAKE, SNAKE_TO_CAMEL } from './cssNameMap'\n\nexport function hash(thing: string | Object) {\n  let str = thing\n  if (thing instanceof Object) {\n    str = JSON.stringify(thing)\n  }\n  if (typeof str === 'string') {\n    let hash = 5381\n    let i = str.length\n    while (i) {\n      hash = (hash * 33) ^ str.charCodeAt(--i)\n    }\n    /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n     * integers. Since we want the results to be always positive, convert the\n     * signed int to an unsigned by doing an unsigned bitshift. */\n    return hash >>> 0\n  }\n}\n\nexport function camelToSnake(key: string) {\n  return CAMEL_TO_SNAKE[key] || key\n}\n\nexport function snakeToCamel(key: string) {\n  return SNAKE_TO_CAMEL[key] || key\n}\n\nfunction memoize<Result>(cb: Function): (a?: any, b?: any, c?: any) => Result {\n  const Cache = new WeakMap()\n\n  return (key: any, ...rest: Array<any>) => {\n    // use first argument as key\n    const mappable = key && typeof key === 'object'\n    if (mappable) {\n      const res = Cache.get(key)\n      if (res) {\n        return res\n      }\n    }\n    const newVal: Result = cb.call(this, key, ...rest)\n    if (mappable) {\n      Cache.set(key, newVal)\n    }\n    return newVal\n  }\n}\n\nexport function colorToString(color: Color, options?: Object): string {\n  if (typeof color === 'string') {\n    return color\n  }\n  if (!color) {\n    return 'transparent'\n  }\n  let res = color\n  if (isColorLikeLibrary(color, options)) {\n    res = getColorLikeLibraryValue(color, options)\n  }\n  res = objectToColor(res)\n  return `${res}`\n}\n\nexport const isColorLike = memoize((object: any, options?: Object) => {\n  if (!object) {\n    return false\n  }\n  if (typeof object === 'string' && isColorLikeString(object)) {\n    return true\n  }\n  if (Array.isArray(object)) {\n    return isColorLikeArray(object)\n  }\n  if (typeof object === 'object') {\n    return isColorLikeLibrary(object, options) || isColorLikeObject(object)\n  }\n  return false\n})\n\nexport function isColorLikeString(str: string) {\n  if (str[0] === '#' && (str.length === 4 || str.length === 7)) {\n    return true\n  }\n  if (str.indexOf('rgb(') === 0 || str.indexOf('rgba(') === 0) {\n    return true\n  }\n  if (colorNames[str]) {\n    return true\n  }\n  return false\n}\n\nexport function isColorLikeArray(array: Array<number | string>) {\n  return (\n    typeof array[0] === 'number' &&\n    typeof array[1] === 'number' &&\n    typeof array[2] === 'number' &&\n    (typeof array[3] === 'undefined' || typeof array[3] === 'number') &&\n    typeof array[4] === 'undefined'\n  )\n}\n\nexport function isColorLikeObject(object: Object) {\n  const keyLen = Object.keys(object).length\n  if (keyLen !== 3 || keyLen !== 4) return false\n  if (keyLen === 3 && object.r && object.g && object.b) return true\n  if (keyLen === 4 && object.a) return true\n  return false\n}\n\nexport function isColorLikeLibrary(val: any, options?: Object): boolean {\n  return (\n    (options &&\n      options.isColor &&\n      typeof val === 'object' &&\n      options.isColor(val)) ||\n    (typeof val.toCSS === 'function' ||\n      typeof val.css === 'function' ||\n      typeof val.rgb === 'function' ||\n      typeof val.rgba === 'function')\n  )\n}\n\n// attempts to work with a variety of css libraries\nexport function getColorLikeLibraryValue(val: any, options?: Object) {\n  let res = val\n  if (options && options.isColor(val)) {\n    return options.toColor(val)\n  }\n  if (typeof val.css === 'function') {\n    res = val.css()\n  } else if (typeof val.toCSS === 'function') {\n    res = val.toCSS()\n  } else if (typeof val.rgba === 'function') {\n    res = val.rgba()\n  } else if (typeof val.rgb === 'function') {\n    res = val.rgb()\n  }\n  return res\n}\n\nconst objectToColor = memoize((color: Color): string => {\n  // final processing of objects and arrays\n  if (Array.isArray(color)) {\n    const length = color.length\n    if (length === 4) {\n      return `rgba(${color.join(', ')})`\n    }\n    if (length === 3) {\n      return `rgb(${color.join(', ')})`\n    }\n  } else if (color instanceof Object) {\n    if (color.a) {\n      return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`\n    }\n    return `rgb(${color.r}, ${color.g}, ${color.b})`\n  }\n  return color.toString()\n})\n\nconst arr3to4 = arr => [...arr, arr[1]]\nconst arr2to4 = arr => [...arr, arr[0], arr[1]]\nconst arr1to4 = arr => [...arr, arr[0], arr[0], arr[1]]\n\nexport function expandCSSArray(\n  given: number | Array<number | string>\n): CSSArray {\n  if (typeof given === 'number') {\n    return [given, given, given, given]\n  }\n  if (Array.isArray(given)) {\n    switch (given.length) {\n      case 3:\n        return arr3to4(given)\n      case 2:\n        return arr2to4(given)\n      case 1:\n        return arr1to4(given)\n      default:\n        return given\n    }\n  }\n  throw new Error('Invalid type given')\n}\n"]}