;(function() {
var __sbPundle_normal=function(){"use strict";var e=function(e,n){return n={exports:{}},e(n,n.exports),n.exports}(function(e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function t(e){if(a===setTimeout)return setTimeout(e,0);if((a===n||!a)&&setTimeout)return a=setTimeout,setTimeout(e,0);try{return a(e,0)}catch(n){try{return a.call(null,e,0)}catch(n){return a.call(this,e,0)}}}function o(e){if(f===clearTimeout)return clearTimeout(e);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(n){try{return f.call(null,e)}catch(n){return f.call(this,e)}}}function i(){p&&h&&(p=!1,h.length?d=h.concat(d):m=-1,d.length&&u())}function u(){if(!p){var e=t(i);p=!0;for(var n=d.length;n;){for(h=d,d=[];++m<n;)h&&h[m].run();m=-1,n=d.length}h=null,p=!1,o(e)}}function s(e,n){this.fun=e,this.array=n}function c(){}var a,f,l=e.exports={};!function(){try{a="function"==typeof setTimeout?setTimeout:n}catch(e){a=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(e){f=r}}();var h,d=[],p=!1,m=-1;l.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];d.push(new s(e,n)),1!==d.length||p||t(u)},s.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=c,l.addListener=c,l.once=c,l.off=c,l.removeListener=c,l.removeAllListeners=c,l.emit=c,l.prependListener=c,l.prependOnceListener=c,l.listeners=function(e){return[]},l.binding=function(e){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(e){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}}),n="undefined"!=typeof window&&window||"undefined"!=typeof self&&self||{},r=n,t=n;return n.root=n.root||t,n.GLOBAL=n.GLOBAL||r,n.global=n.global||n,n.process=n.process||e,n.__sbPundle=n.__sbPundle||{cache:{},chunks:{},mapChunks:{},mapModules:{},resolve:function(e){return e},getModule:function(e,n){return{id:e,invoked:!1,callback:n,exports:{},parents:[]}},registerMappings:function(e){var n=this;Object.assign(this.mapChunks,e.chunks);for(var r in e.files)!function(r){e.files[r].forEach(function(e){n.mapModules[e]=r})}(r)},registerLoaded:function(e){this.chunks[e]?this.chunks[e].resolve():this.chunks[e]={promise:Promise.resolve(),resolve:function(){},reject:function(){}}},registerModule:function(e,n){this.cache[e]?this.cache[e].callback=n:this.cache[e]=this.getModule(e,n)},requireModule:function(e,n){var r=this.mapModules[n]||n,t=this.cache[r];if(!t)throw new Error("Module '"+r+"' not found. Did you forget to load the parent chunks before this one?");return-1===t.parents.indexOf(e)&&"$root"!==e&&t.parents.push(e),t.invoked||(t.invoked=!0,t.callback.call(t.exports,t.id,"/",this.generateRequire(t.id),t,t.exports)),t.exports},generateRequire:function(e){var n=this,r=this.requireModule.bind(this,e);return r.cache=this.cache,r.resolve=this.resolve,r.ensure=function(e,t){return n.ensure(e,function(){return t(r)})},r.import=function(e,t){return new Promise(function(o,i){return n.ensure(e,function(){return o(r(t))},i)})},r},require:function(e){return this.requireModule("$root",e)},ensure:function(e,n,r){var t=this;if("undefined"==typeof "/_/bundle")throw new Error("Please specify config.output.publicRoot in configuration");[].concat(e).forEach(function(e){var o=t.mapChunks[e];if(!t.chunks[o]){var i=void 0,u=void 0,s=new Promise(function(e,n){i=e,u=n});t.chunks[o]={promise:s,resolve:i,reject:u};var c=document.createElement("script");c.src="/_/bundle"+"."+o+".js",c.onerror=u,document.body.appendChild(c)}return t.chunks[o].promise.then(n,r)})}},{}}();

__sbPundle.registerModule("$app/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

require('51');
module.hot && module.hot.accept(_ => _);
});
__sbPundle.registerModule("$app/src/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

var _react = require('52');

var React = _interopRequireWildcard(_react);

var _reactDom = require('53');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _createElement = require('54');

var _createElement2 = _interopRequireDefault(_createElement);

var _themes = require('55');

var _themes2 = _interopRequireDefault(_themes);

var _root = require('56');

var _root2 = _interopRequireDefault(_root);

var _ui = require('57');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

// Gloss: all <tag />s can use $$styleProps or css={{}}
React.createElement = _createElement2.default;

function main() {
  let ROOT = document.querySelector('#app');
  _reactDom2.default.render(React.createElement(_ui.ThemeProvide, _themes2.default, React.createElement(_root2.default, null)), ROOT);
}

main();
});
__sbPundle.registerModule("$app/node_modules/react/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

if ('development' === 'production') {
  module.exports = require('58');
} else {
  module.exports = require('59');
}
});
__sbPundle.registerModule("$app/node_modules/react/cjs/react.production.min.js", function(__filename, __dirname, require, module, exports) {
/*
 React v16.0.0
 react.production.min.js

 Copyright (c) 2013-present, Facebook, Inc.

 This source code is licensed under the MIT license found in the
 LICENSE file in the root directory of this source tree.
*/
'use strict';
var f = require('131'),
    p = require('132');require('133');var r = require('134');
function t(a) {
  for (var b = arguments.length - 1, d = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, e = 0; e < b; e++) d += "\x26args[]\x3d" + encodeURIComponent(arguments[e + 1]);b = Error(d + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");b.name = "Invariant Violation";b.framesToPop = 1;throw b;
}
var u = { isMounted: function () {
    return !1;
  }, enqueueForceUpdate: function () {}, enqueueReplaceState: function () {}, enqueueSetState: function () {} };function v(a, b, d) {
  this.props = a;this.context = b;this.refs = p;this.updater = d || u;
}v.prototype.isReactComponent = {};v.prototype.setState = function (a, b) {
  "object" !== typeof a && "function" !== typeof a && null != a ? t("85") : void 0;this.updater.enqueueSetState(this, a, b, "setState");
};v.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function w(a, b, d) {
  this.props = a;this.context = b;this.refs = p;this.updater = d || u;
}function x() {}x.prototype = v.prototype;var y = w.prototype = new x();y.constructor = w;f(y, v.prototype);y.isPureReactComponent = !0;function z(a, b, d) {
  this.props = a;this.context = b;this.refs = p;this.updater = d || u;
}var A = z.prototype = new x();A.constructor = z;f(A, v.prototype);A.unstable_isAsyncReactComponent = !0;A.render = function () {
  return this.props.children;
};
var B = { Component: v, PureComponent: w, AsyncComponent: z },
    C = { current: null },
    D = Object.prototype.hasOwnProperty,
    E = "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103,
    F = { key: !0, ref: !0, __self: !0, __source: !0 };function G(a, b, d, e, c, g, k) {
  return { $$typeof: E, type: a, key: b, ref: d, props: k, _owner: g };
}
G.createElement = function (a, b, d) {
  var e,
      c = {},
      g = null,
      k = null,
      m = null,
      q = null;if (null != b) for (e in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = "" + b.key), m = void 0 === b.__self ? null : b.__self, q = void 0 === b.__source ? null : b.__source, b) D.call(b, e) && !F.hasOwnProperty(e) && (c[e] = b[e]);var l = arguments.length - 2;if (1 === l) c.children = d;else if (1 < l) {
    for (var h = Array(l), n = 0; n < l; n++) h[n] = arguments[n + 2];c.children = h;
  }if (a && a.defaultProps) for (e in l = a.defaultProps, l) void 0 === c[e] && (c[e] = l[e]);return G(a, g, k, m, q, C.current, c);
};
G.createFactory = function (a) {
  var b = G.createElement.bind(null, a);b.type = a;return b;
};G.cloneAndReplaceKey = function (a, b) {
  return G(a.type, b, a.ref, a._self, a._source, a._owner, a.props);
};
G.cloneElement = function (a, b, d) {
  var e = f({}, a.props),
      c = a.key,
      g = a.ref,
      k = a._self,
      m = a._source,
      q = a._owner;if (null != b) {
    void 0 !== b.ref && (g = b.ref, q = C.current);void 0 !== b.key && (c = "" + b.key);if (a.type && a.type.defaultProps) var l = a.type.defaultProps;for (h in b) D.call(b, h) && !F.hasOwnProperty(h) && (e[h] = void 0 === b[h] && void 0 !== l ? l[h] : b[h]);
  }var h = arguments.length - 2;if (1 === h) e.children = d;else if (1 < h) {
    l = Array(h);for (var n = 0; n < h; n++) l[n] = arguments[n + 2];e.children = l;
  }return G(a.type, c, g, k, m, q, e);
};
G.isValidElement = function (a) {
  return "object" === typeof a && null !== a && a.$$typeof === E;
};var H = "function" === typeof Symbol && Symbol.iterator,
    I = "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103;function escape(a) {
  var b = { "\x3d": "\x3d0", ":": "\x3d2" };return "$" + ("" + a).replace(/[=:]/g, function (a) {
    return b[a];
  });
}var J = /\/+/g,
    K = [];
function L(a, b, d, e) {
  if (K.length) {
    var c = K.pop();c.result = a;c.keyPrefix = b;c.func = d;c.context = e;c.count = 0;return c;
  }return { result: a, keyPrefix: b, func: d, context: e, count: 0 };
}function M(a) {
  a.result = null;a.keyPrefix = null;a.func = null;a.context = null;a.count = 0;10 > K.length && K.push(a);
}
function N(a, b, d, e) {
  var c = typeof a;if ("undefined" === c || "boolean" === c) a = null;if (null === a || "string" === c || "number" === c || "object" === c && a.$$typeof === I) return d(e, a, "" === b ? "." + O(a, 0) : b), 1;var g = 0;b = "" === b ? "." : b + ":";if (Array.isArray(a)) for (var k = 0; k < a.length; k++) {
    c = a[k];var m = b + O(c, k);g += N(c, m, d, e);
  } else if (m = H && a[H] || a["@@iterator"], "function" === typeof m) for (a = m.call(a), k = 0; !(c = a.next()).done;) c = c.value, m = b + O(c, k++), g += N(c, m, d, e);else "object" === c && (d = "" + a, t("31", "[object Object]" === d ? "object with keys {" + Object.keys(a).join(", ") + "}" : d, ""));return g;
}function O(a, b) {
  return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
}function P(a, b) {
  a.func.call(a.context, b, a.count++);
}function Q(a, b, d) {
  var e = a.result,
      c = a.keyPrefix;a = a.func.call(a.context, b, a.count++);Array.isArray(a) ? R(a, e, d, r.thatReturnsArgument) : null != a && (G.isValidElement(a) && (a = G.cloneAndReplaceKey(a, c + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(J, "$\x26/") + "/") + d)), e.push(a));
}
function R(a, b, d, e, c) {
  var g = "";null != d && (g = ("" + d).replace(J, "$\x26/") + "/");b = L(b, g, e, c);null == a || N(a, "", Q, b);M(b);
}var S = { forEach: function (a, b, d) {
    if (null == a) return a;b = L(null, null, b, d);null == a || N(a, "", P, b);M(b);
  }, map: function (a, b, d) {
    if (null == a) return a;var e = [];R(a, e, null, b, d);return e;
  }, count: function (a) {
    return null == a ? 0 : N(a, "", r.thatReturnsNull, null);
  }, toArray: function (a) {
    var b = [];R(a, b, null, r.thatReturnsArgument);return b;
  } };
module.exports = { Children: { map: S.map, forEach: S.forEach, count: S.count, toArray: S.toArray, only: function (a) {
      G.isValidElement(a) ? void 0 : t("143");return a;
    } }, Component: B.Component, PureComponent: B.PureComponent, unstable_AsyncComponent: B.AsyncComponent, createElement: G.createElement, cloneElement: G.cloneElement, isValidElement: G.isValidElement, createFactory: G.createFactory, version: "16.0.0", __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentOwner: C, assign: f } };
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/object-assign/index.js", function(__filename, __dirname, require, module, exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }

    // Detect buggy property enumeration order in older V8 versions.

    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/emptyObject.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyObject = {};

if ('production' !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/invariant.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if ('production' !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/emptyFunction.js", function(__filename, __dirname, require, module, exports) {
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
});
__sbPundle.registerModule("$app/node_modules/react/cjs/react.development.js", function(__filename, __dirname, require, module, exports) {
/** @license React v16.0.0
 * react.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ('development' !== "production") {
  (function () {

    'use strict';

    var objectAssign$1 = require('125');
    var require$$0 = require('126');
    var emptyObject = require('127');
    var invariant = require('128');
    var emptyFunction = require('129');
    var checkPropTypes = require('130');

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule reactProdInvariant
     * 
     */

    {
      var warning = require$$0;
    }

    function warnNoop(publicInstance, callerName) {
      {
        var constructor = publicInstance.constructor;
        warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass');
      }
    }

    /**
     * This is the abstract API for an update queue.
     */
    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };

    var ReactNoopUpdateQueue_1 = ReactNoopUpdateQueue;

    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule lowPriorityWarning
     */

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning_1 = lowPriorityWarning;

    /**
     * Base class helpers for the updating state of a component.
     */
    function ReactComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      // We initialize the default updater but the real one gets injected by the
      // renderer.
      this.updater = updater || ReactNoopUpdateQueue_1;
    }

    ReactComponent.prototype.isReactComponent = {};

    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */
    ReactComponent.prototype.setState = function (partialState, callback) {
      !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */
    ReactComponent.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };

    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */
    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };
      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(ReactComponent.prototype, methodName, {
          get: function () {
            lowPriorityWarning_1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    /**
     * Base class helpers for the updating state of a component.
     */
    function ReactPureComponent(props, context, updater) {
      // Duplicated from ReactComponent.
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      // We initialize the default updater but the real one gets injected by the
      // renderer.
      this.updater = updater || ReactNoopUpdateQueue_1;
    }

    function ComponentDummy() {}
    ComponentDummy.prototype = ReactComponent.prototype;
    var pureComponentPrototype = ReactPureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = ReactPureComponent;
    // Avoid an extra prototype jump for these methods.
    objectAssign$1(pureComponentPrototype, ReactComponent.prototype);
    pureComponentPrototype.isPureReactComponent = true;

    function ReactAsyncComponent(props, context, updater) {
      // Duplicated from ReactComponent.
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      // We initialize the default updater but the real one gets injected by the
      // renderer.
      this.updater = updater || ReactNoopUpdateQueue_1;
    }

    var asyncComponentPrototype = ReactAsyncComponent.prototype = new ComponentDummy();
    asyncComponentPrototype.constructor = ReactAsyncComponent;
    // Avoid an extra prototype jump for these methods.
    objectAssign$1(asyncComponentPrototype, ReactComponent.prototype);
    asyncComponentPrototype.unstable_isAsyncReactComponent = true;
    asyncComponentPrototype.render = function () {
      return this.props.children;
    };

    var ReactBaseClasses = {
      Component: ReactComponent,
      PureComponent: ReactPureComponent,
      AsyncComponent: ReactAsyncComponent
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactCurrentOwner
     * 
     */

    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };

    var ReactCurrentOwner_1 = ReactCurrentOwner;

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    {
      var warning$2 = require$$0;
    }

    // The Symbol used to tag the ReactElement type. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE$1 = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };

    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warning$2(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warning$2(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };
      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }

    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */
    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allow us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE$1,

        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,

        // Record the component responsible for creating this element.
        _owner: owner
      };

      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {};

        // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }

      return element;
    };

    /**
     * Create and return a new ReactElement of the given type.
     * See https://facebook.github.io/react/docs/react-api.html#createelement
     */
    ReactElement.createElement = function (type, config, children) {
      var propName;

      // Reserved names are extracted
      var props = {};

      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source;
        // Remaining properties are added to a new props object
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      }

      // Resolve default props
      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }
      {
        if (key || ref) {
          if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE$1) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner_1.current, props);
    };

    /**
     * Return a function that produces ReactElements of a given type.
     * See https://facebook.github.io/react/docs/react-api.html#createfactory
     */
    ReactElement.createFactory = function (type) {
      var factory = ReactElement.createElement.bind(null, type);
      // Expose the type on the factory and the prototype so that it can be
      // easily accessed on elements. E.g. `<Foo />.type === Foo`.
      // This should not be named `constructor` since this may not be the function
      // that created the element, and it may not even be a constructor.
      // Legacy hook TODO: Warn if this is accessed
      factory.type = type;
      return factory;
    };

    ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

      return newElement;
    };

    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://facebook.github.io/react/docs/react-api.html#cloneelement
     */
    ReactElement.cloneElement = function (element, config, children) {
      var propName;

      // Original props are copied
      var props = objectAssign$1({}, element.props);

      // Reserved names are extracted
      var key = element.key;
      var ref = element.ref;
      // Self is preserved since the owner is preserved.
      var self = element._self;
      // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.
      var source = element._source;

      // Owner will be preserved, unless ref is overridden
      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner_1.current;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        // Remaining properties override existing props
        var defaultProps;
        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    };

    /**
     * Verifies the object is a ReactElement.
     * See https://facebook.github.io/react/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a valid component.
     * @final
     */
    ReactElement.isValidElement = function (object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE$1;
    };

    var ReactElement_1 = ReactElement;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactDebugCurrentFrame
     * 
     */

    var ReactDebugCurrentFrame = {};

    {
      // Component that is being worked on
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) {
          return impl();
        }
        return null;
      };
    }

    var ReactDebugCurrentFrame_1 = ReactDebugCurrentFrame;

    {
      var warning$1 = require$$0;

      var _require = ReactDebugCurrentFrame_1,
          getStackAddendum = _require.getStackAddendum;
    }

    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    // The Symbol used to tag the ReactElement type. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';

    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */
    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });

      return '$' + escapedString;
    }

    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */

    var didWarnAboutMaps = false;

    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];
    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;
      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }

    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      if (children === null || type === 'string' || type === 'number' ||
      // The following is inlined from ReactElement. This means we can optimize
      // some checks. React Fiber also inlines this logic for similar purposes.
      type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
        callback(traverseContext, children,
        // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child;
      var nextName;
      var subtreeCount = 0; // Count of children found in the current subtree.
      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              warning$1(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getStackAddendum());
              didWarnAboutMaps = true;
            }
          }

          var iterator = iteratorFn.call(children);
          var step;
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }

    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }

    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */
    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof component === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      }
      // Implicit key determined by the index in the set
      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;

      func.call(context, child, bookKeeping.count++);
    }

    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://facebook.github.io/react/docs/react-api.html#react.children.foreach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }
      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;

      var mappedChild = func.call(context, child, bookKeeping.count++);
      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
      } else if (mappedChild != null) {
        if (ReactElement_1.isValidElement(mappedChild)) {
          mappedChild = ReactElement_1.cloneAndReplaceKey(mappedChild,
          // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }
        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';
      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }
      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://facebook.github.io/react/docs/react-api.html#react.children.map
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }

    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://facebook.github.io/react/docs/react-api.html#react.children.count
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */
    function countChildren(children, context) {
      return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
    }

    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://facebook.github.io/react/docs/react-api.html#react.children.toarray
     */
    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
      return result;
    }

    var ReactChildren = {
      forEach: forEachChildren,
      map: mapChildren,
      count: countChildren,
      toArray: toArray
    };

    var ReactChildren_1 = ReactChildren;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactVersion
     */

    var ReactVersion = '16.0.0';

    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://facebook.github.io/react/docs/react-api.html#react.children.only
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */
    function onlyChild(children) {
      !ReactElement_1.isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    var onlyChild_1 = onlyChild;

    /**
     * Copyright (c) 2016-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * 
     * @providesModule describeComponentFrame
     */

    var describeComponentFrame$1 = function (name, source, ownerName) {
      return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule getComponentName
     * 
     */

    function getComponentName$1(instanceOrFiber) {
      if (typeof instanceOrFiber.getName === 'function') {
        // Stack reconciler
        var instance = instanceOrFiber;
        return instance.getName();
      }
      if (typeof instanceOrFiber.tag === 'number') {
        // Fiber reconciler
        var fiber = instanceOrFiber;
        var type = fiber.type;

        if (typeof type === 'string') {
          return type;
        }
        if (typeof type === 'function') {
          return type.displayName || type.name;
        }
      }
      return null;
    }

    var getComponentName_1 = getComponentName$1;

    {
      var checkPropTypes$1 = checkPropTypes;
      var lowPriorityWarning$1 = lowPriorityWarning_1;
      var ReactDebugCurrentFrame$1 = ReactDebugCurrentFrame_1;
      var warning$3 = require$$0;
      var describeComponentFrame = describeComponentFrame$1;
      var getComponentName = getComponentName_1;

      var currentlyValidatingElement = null;

      var getDisplayName = function (element) {
        if (element == null) {
          return '#empty';
        } else if (typeof element === 'string' || typeof element === 'number') {
          return '#text';
        } else if (typeof element.type === 'string') {
          return element.type;
        } else {
          return element.type.displayName || element.type.name || 'Unknown';
        }
      };

      var getStackAddendum$1 = function () {
        var stack = '';
        if (currentlyValidatingElement) {
          var name = getDisplayName(currentlyValidatingElement);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
        }
        stack += ReactDebugCurrentFrame$1.getStackAddendum() || '';
        return stack;
      };
    }

    var ITERATOR_SYMBOL$1 = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL$1 = '@@iterator'; // Before Symbol spec.

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner_1.current) {
        var name = getComponentName(ReactCurrentOwner_1.current);
        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }
      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }
      return '';
    }

    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */
    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }
      return info;
    }

    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;

      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

      // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.
      var childOwner = '';
      if (element && element._owner && element._owner !== ReactCurrentOwner_1.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
      }

      currentlyValidatingElement = element;
      {
        warning$3(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum$1());
      }
      currentlyValidatingElement = null;
    }

    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */
    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }
      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (ReactElement_1.isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (ReactElement_1.isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = ITERATOR_SYMBOL$1 && node[ITERATOR_SYMBOL$1] || node[FAUX_ITERATOR_SYMBOL$1];
        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;
            while (!(step = iterator.next()).done) {
              if (ReactElement_1.isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }

    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */
    function validatePropTypes(element) {
      var componentClass = element.type;
      if (typeof componentClass !== 'function') {
        return;
      }
      var name = componentClass.displayName || componentClass.name;
      var propTypes = componentClass.propTypes;

      if (propTypes) {
        currentlyValidatingElement = element;
        checkPropTypes$1(propTypes, element.props, 'prop', name, getStackAddendum$1);
        currentlyValidatingElement = null;
      }
      if (typeof componentClass.getDefaultProps === 'function') {
        warning$3(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
      }
    }

    var ReactElementValidator$1 = {
      createElement: function (type, props, children) {
        var validType = typeof type === 'string' || typeof type === 'function';
        // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
          var info = '';
          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in.";
          }

          var sourceInfo = getSourceInfoErrorAddendum(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          info += ReactDebugCurrentFrame$1.getStackAddendum() || '';

          warning$3(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
        }

        var element = ReactElement_1.createElement.apply(this, arguments);

        // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) {
          return element;
        }

        // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }

        validatePropTypes(element);

        return element;
      },

      createFactory: function (type) {
        var validatedFactory = ReactElementValidator$1.createElement.bind(null, type);
        // Legacy hook TODO: Warn if this is accessed
        validatedFactory.type = type;

        {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function () {
              lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }

        return validatedFactory;
      },

      cloneElement: function (element, props, children) {
        var newElement = ReactElement_1.cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
    };

    var ReactElementValidator_1 = ReactElementValidator$1;

    {
      var warning$4 = require$$0;
    }

    function isNative(fn) {
      // Based on isNative() from Lodash
      var funcToString = Function.prototype.toString;
      var reIsNative = RegExp('^' + funcToString
      // Take an example native function source for comparison
      .call(Object.prototype.hasOwnProperty)
      // Strip regex characters so we can use it for regex
      .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      // Remove hasOwnProperty from the template to make it generic
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      try {
        var source = funcToString.call(fn);
        return reIsNative.test(source);
      } catch (err) {
        return false;
      }
    }

    var canUseCollections =
    // Array.from
    typeof Array.from === 'function' &&
    // Map
    typeof Map === 'function' && isNative(Map) &&
    // Map.prototype.keys
    Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
    // Set
    typeof Set === 'function' && isNative(Set) &&
    // Set.prototype.keys
    Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

    var setItem;
    var getItem;
    var removeItem;
    var getItemIDs;
    var addRoot;
    var removeRoot;
    var getRootIDs;

    if (canUseCollections) {
      var itemMap = new Map();
      var rootIDSet = new Set();

      setItem = function (id, item) {
        itemMap.set(id, item);
      };
      getItem = function (id) {
        return itemMap.get(id);
      };
      removeItem = function (id) {
        itemMap['delete'](id);
      };
      getItemIDs = function () {
        return Array.from(itemMap.keys());
      };

      addRoot = function (id) {
        rootIDSet.add(id);
      };
      removeRoot = function (id) {
        rootIDSet['delete'](id);
      };
      getRootIDs = function () {
        return Array.from(rootIDSet.keys());
      };
    } else {
      var itemByKey = {};
      var rootByKey = {};

      // Use non-numeric keys to prevent V8 performance issues:
      // https://github.com/facebook/react/pull/7232
      var getKeyFromID = function (id) {
        return '.' + id;
      };
      var getIDFromKey = function (key) {
        return parseInt(key.substr(1), 10);
      };

      setItem = function (id, item) {
        var key = getKeyFromID(id);
        itemByKey[key] = item;
      };
      getItem = function (id) {
        var key = getKeyFromID(id);
        return itemByKey[key];
      };
      removeItem = function (id) {
        var key = getKeyFromID(id);
        delete itemByKey[key];
      };
      getItemIDs = function () {
        return Object.keys(itemByKey).map(getIDFromKey);
      };

      addRoot = function (id) {
        var key = getKeyFromID(id);
        rootByKey[key] = true;
      };
      removeRoot = function (id) {
        var key = getKeyFromID(id);
        delete rootByKey[key];
      };
      getRootIDs = function () {
        return Object.keys(rootByKey).map(getIDFromKey);
      };
    }

    var unmountedIDs = [];

    function purgeDeep(id) {
      var item = getItem(id);
      if (item) {
        var childIDs = item.childIDs;

        removeItem(id);
        childIDs.forEach(purgeDeep);
      }
    }

    function getDisplayName$1(element) {
      if (element == null) {
        return '#empty';
      } else if (typeof element === 'string' || typeof element === 'number') {
        return '#text';
      } else if (typeof element.type === 'string') {
        return element.type;
      } else {
        return element.type.displayName || element.type.name || 'Unknown';
      }
    }

    function describeID(id) {
      var name = ReactComponentTreeHook.getDisplayName(id);
      var element = ReactComponentTreeHook.getElement(id);
      var ownerID = ReactComponentTreeHook.getOwnerID(id);
      var ownerName = void 0;

      if (ownerID) {
        ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
      }
      warning$4(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id);
      return describeComponentFrame$1(name || '', element && element._source, ownerName || '');
    }

    var ReactComponentTreeHook = {
      onSetChildren: function (id, nextChildIDs) {
        var item = getItem(id);
        !item ? invariant(false, 'Item must have been set') : void 0;
        item.childIDs = nextChildIDs;

        for (var i = 0; i < nextChildIDs.length; i++) {
          var nextChildID = nextChildIDs[i];
          var nextChild = getItem(nextChildID);
          !nextChild ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : void 0;
          !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : void 0;
          !nextChild.isMounted ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : void 0;
          if (nextChild.parentID == null) {
            nextChild.parentID = id;
            // TODO: This shouldn't be necessary but mounting a new root during in
            // componentWillMount currently causes not-yet-mounted components to
            // be purged from our tree data so their parent id is missing.
          }
          !(nextChild.parentID === id) ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : void 0;
        }
      },
      onBeforeMountComponent: function (id, element, parentID) {
        var item = {
          element: element,
          parentID: parentID,
          text: null,
          childIDs: [],
          isMounted: false,
          updateCount: 0
        };
        setItem(id, item);
      },
      onBeforeUpdateComponent: function (id, element) {
        var item = getItem(id);
        if (!item || !item.isMounted) {
          // We may end up here as a result of setState() in componentWillUnmount().
          // In this case, ignore the element.
          return;
        }
        item.element = element;
      },
      onMountComponent: function (id) {
        var item = getItem(id);
        !item ? invariant(false, 'Item must have been set') : void 0;
        item.isMounted = true;
        var isRoot = item.parentID === 0;
        if (isRoot) {
          addRoot(id);
        }
      },
      onUpdateComponent: function (id) {
        var item = getItem(id);
        if (!item || !item.isMounted) {
          // We may end up here as a result of setState() in componentWillUnmount().
          // In this case, ignore the element.
          return;
        }
        item.updateCount++;
      },
      onUnmountComponent: function (id) {
        var item = getItem(id);
        if (item) {
          // We need to check if it exists.
          // `item` might not exist if it is inside an error boundary, and a sibling
          // error boundary child threw while mounting. Then this instance never
          // got a chance to mount, but it still gets an unmounting event during
          // the error boundary cleanup.
          item.isMounted = false;
          var isRoot = item.parentID === 0;
          if (isRoot) {
            removeRoot(id);
          }
        }
        unmountedIDs.push(id);
      },
      purgeUnmountedComponents: function () {
        if (ReactComponentTreeHook._preventPurging) {
          // Should only be used for testing.
          return;
        }

        for (var i = 0; i < unmountedIDs.length; i++) {
          var id = unmountedIDs[i];
          purgeDeep(id);
        }
        unmountedIDs.length = 0;
      },
      isMounted: function (id) {
        var item = getItem(id);
        return item ? item.isMounted : false;
      },
      getCurrentStackAddendum: function () {
        var info = '';
        var currentOwner = ReactCurrentOwner_1.current;
        if (currentOwner) {
          !(typeof currentOwner.tag !== 'number') ? invariant(false, 'Fiber owners should not show up in Stack stack traces.') : void 0;
          if (typeof currentOwner._debugID === 'number') {
            info += ReactComponentTreeHook.getStackAddendumByID(currentOwner._debugID);
          }
        }
        return info;
      },
      getStackAddendumByID: function (id) {
        var info = '';
        while (id) {
          info += describeID(id);
          id = ReactComponentTreeHook.getParentID(id);
        }
        return info;
      },
      getChildIDs: function (id) {
        var item = getItem(id);
        return item ? item.childIDs : [];
      },
      getDisplayName: function (id) {
        var element = ReactComponentTreeHook.getElement(id);
        if (!element) {
          return null;
        }
        return getDisplayName$1(element);
      },
      getElement: function (id) {
        var item = getItem(id);
        return item ? item.element : null;
      },
      getOwnerID: function (id) {
        var element = ReactComponentTreeHook.getElement(id);
        if (!element || !element._owner) {
          return null;
        }
        return element._owner._debugID;
      },
      getParentID: function (id) {
        var item = getItem(id);
        return item ? item.parentID : null;
      },
      getSource: function (id) {
        var item = getItem(id);
        var element = item ? item.element : null;
        var source = element != null ? element._source : null;
        return source;
      },
      getText: function (id) {
        var element = ReactComponentTreeHook.getElement(id);
        if (typeof element === 'string') {
          return element;
        } else if (typeof element === 'number') {
          return '' + element;
        } else {
          return null;
        }
      },
      getUpdateCount: function (id) {
        var item = getItem(id);
        return item ? item.updateCount : 0;
      },

      getRootIDs: getRootIDs,
      getRegisteredIDs: getItemIDs
    };

    var ReactComponentTreeHook_1 = ReactComponentTreeHook;

    var createElement = ReactElement_1.createElement;
    var createFactory = ReactElement_1.createFactory;
    var cloneElement = ReactElement_1.cloneElement;

    {
      var ReactElementValidator = ReactElementValidator_1;
      createElement = ReactElementValidator.createElement;
      createFactory = ReactElementValidator.createFactory;
      cloneElement = ReactElementValidator.cloneElement;
    }

    var React = {
      Children: {
        map: ReactChildren_1.map,
        forEach: ReactChildren_1.forEach,
        count: ReactChildren_1.count,
        toArray: ReactChildren_1.toArray,
        only: onlyChild_1
      },

      Component: ReactBaseClasses.Component,
      PureComponent: ReactBaseClasses.PureComponent,
      unstable_AsyncComponent: ReactBaseClasses.AsyncComponent,

      createElement: createElement,
      cloneElement: cloneElement,
      isValidElement: ReactElement_1.isValidElement,

      createFactory: createFactory,

      version: ReactVersion,

      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        ReactCurrentOwner: ReactCurrentOwner_1,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: objectAssign$1
      }
    };

    {
      objectAssign$1(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
        // These should not be included in production.
        ReactComponentTreeHook: ReactComponentTreeHook_1,
        ReactDebugCurrentFrame: ReactDebugCurrentFrame_1
      });
    }

    var ReactEntry = React;

    module.exports = ReactEntry;
  })();
}
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/warning.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyFunction = require('38');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ('production' !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/prop-types/checkPropTypes.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

if ('development' !== 'production') {
  var invariant = require('2777');
  var warning = require('2778');
  var ReactPropTypesSecret = require('2779');
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if ('development' !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/prop-types/lib/ReactPropTypesSecret.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
});
__sbPundle.registerModule("$app/node_modules/react-dom/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }
  if ('development' !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if ('development' === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = require('116');
} else {
  module.exports = require('117');
}
});
__sbPundle.registerModule("$app/node_modules/react-dom/cjs/react-dom.production.min.js", function(__filename, __dirname, require, module, exports) {
/*
 React v16.0.0
 react-dom.production.min.js

 Copyright (c) 2013-present, Facebook, Inc.

 This source code is licensed under the MIT license found in the
 LICENSE file in the root directory of this source tree.
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
'use strict';
var aa = require('348');require('349');var l = require('350'),
    n = require('351'),
    ba = require('352'),
    ca = require('353'),
    da = require('354'),
    ea = require('355'),
    fa = require('356'),
    ha = require('357'),
    ia = require('358');
function w(a) {
  for (var b = arguments.length - 1, c = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, d = 0; d < b; d++) c += "\x26args[]\x3d" + encodeURIComponent(arguments[d + 1]);b = Error(c + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");b.name = "Invariant Violation";b.framesToPop = 1;throw b;
}aa ? void 0 : w("227");
function ja(a) {
  switch (a) {case "svg":
      return "http://www.w3.org/2000/svg";case "math":
      return "http://www.w3.org/1998/Math/MathML";default:
      return "http://www.w3.org/1999/xhtml";}
}
var ka = { Namespaces: { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" }, getIntrinsicNamespace: ja, getChildNamespace: function (a, b) {
    return null == a || "http://www.w3.org/1999/xhtml" === a ? ja(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
  } },
    la = null,
    oa = {};
function pa() {
  if (la) for (var a in oa) {
    var b = oa[a],
        c = la.indexOf(a);-1 < c ? void 0 : w("96", a);if (!qa.plugins[c]) {
      b.extractEvents ? void 0 : w("97", a);qa.plugins[c] = b;c = b.eventTypes;for (var d in c) {
        var e = void 0;var f = c[d],
            g = b,
            h = d;qa.eventNameDispatchConfigs.hasOwnProperty(h) ? w("99", h) : void 0;qa.eventNameDispatchConfigs[h] = f;var k = f.phasedRegistrationNames;if (k) {
          for (e in k) k.hasOwnProperty(e) && ra(k[e], g, h);e = !0;
        } else f.registrationName ? (ra(f.registrationName, g, h), e = !0) : e = !1;e ? void 0 : w("98", d, a);
      }
    }
  }
}
function ra(a, b, c) {
  qa.registrationNameModules[a] ? w("100", a) : void 0;qa.registrationNameModules[a] = b;qa.registrationNameDependencies[a] = b.eventTypes[c].dependencies;
}
var qa = { plugins: [], eventNameDispatchConfigs: {}, registrationNameModules: {}, registrationNameDependencies: {}, possibleRegistrationNames: null, injectEventPluginOrder: function (a) {
    la ? w("101") : void 0;la = Array.prototype.slice.call(a);pa();
  }, injectEventPluginsByName: function (a) {
    var b = !1,
        c;for (c in a) if (a.hasOwnProperty(c)) {
      var d = a[c];oa.hasOwnProperty(c) && oa[c] === d || (oa[c] ? w("102", c) : void 0, oa[c] = d, b = !0);
    }b && pa();
  } },
    sa = qa,
    ta = { children: !0, dangerouslySetInnerHTML: !0, autoFocus: !0, defaultValue: !0, defaultChecked: !0,
  innerHTML: !0, suppressContentEditableWarning: !0, style: !0 };function ua(a, b) {
  return (a & b) === b;
}
var wa = { MUST_USE_PROPERTY: 1, HAS_BOOLEAN_VALUE: 4, HAS_NUMERIC_VALUE: 8, HAS_POSITIVE_NUMERIC_VALUE: 24, HAS_OVERLOADED_BOOLEAN_VALUE: 32, HAS_STRING_BOOLEAN_VALUE: 64, injectDOMPropertyConfig: function (a) {
    var b = wa,
        c = a.Properties || {},
        d = a.DOMAttributeNamespaces || {},
        e = a.DOMAttributeNames || {};a = a.DOMMutationMethods || {};for (var f in c) {
      xa.properties.hasOwnProperty(f) ? w("48", f) : void 0;var g = f.toLowerCase(),
          h = c[f];g = { attributeName: g, attributeNamespace: null, propertyName: f, mutationMethod: null, mustUseProperty: ua(h, b.MUST_USE_PROPERTY),
        hasBooleanValue: ua(h, b.HAS_BOOLEAN_VALUE), hasNumericValue: ua(h, b.HAS_NUMERIC_VALUE), hasPositiveNumericValue: ua(h, b.HAS_POSITIVE_NUMERIC_VALUE), hasOverloadedBooleanValue: ua(h, b.HAS_OVERLOADED_BOOLEAN_VALUE), hasStringBooleanValue: ua(h, b.HAS_STRING_BOOLEAN_VALUE) };1 >= g.hasBooleanValue + g.hasNumericValue + g.hasOverloadedBooleanValue ? void 0 : w("50", f);e.hasOwnProperty(f) && (g.attributeName = e[f]);d.hasOwnProperty(f) && (g.attributeNamespace = d[f]);a.hasOwnProperty(f) && (g.mutationMethod = a[f]);xa.properties[f] = g;
    }
  } },
    xa = { ID_ATTRIBUTE_NAME: "data-reactid", ROOT_ATTRIBUTE_NAME: "data-reactroot", ATTRIBUTE_NAME_START_CHAR: ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR: ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",
  properties: {}, shouldSetAttribute: function (a, b) {
    if (xa.isReservedProp(a) || !("o" !== a[0] && "O" !== a[0] || "n" !== a[1] && "N" !== a[1])) return !1;if (null === b) return !0;switch (typeof b) {case "boolean":
        return xa.shouldAttributeAcceptBooleanValue(a);case "undefined":case "number":case "string":case "object":
        return !0;default:
        return !1;}
  }, getPropertyInfo: function (a) {
    return xa.properties.hasOwnProperty(a) ? xa.properties[a] : null;
  }, shouldAttributeAcceptBooleanValue: function (a) {
    if (xa.isReservedProp(a)) return !0;var b = xa.getPropertyInfo(a);
    if (b) return b.hasBooleanValue || b.hasStringBooleanValue || b.hasOverloadedBooleanValue;a = a.toLowerCase().slice(0, 5);return "data-" === a || "aria-" === a;
  }, isReservedProp: function (a) {
    return ta.hasOwnProperty(a);
  }, injection: wa },
    A = xa,
    E = { IndeterminateComponent: 0, FunctionalComponent: 1, ClassComponent: 2, HostRoot: 3, HostPortal: 4, HostComponent: 5, HostText: 6, CoroutineComponent: 7, CoroutineHandlerPhase: 8, YieldComponent: 9, Fragment: 10 },
    F = { ELEMENT_NODE: 1, TEXT_NODE: 3, COMMENT_NODE: 8, DOCUMENT_NODE: 9, DOCUMENT_FRAGMENT_NODE: 11 },
    ya = E.HostComponent,
    za = E.HostText,
    Aa = F.ELEMENT_NODE,
    Ba = F.COMMENT_NODE,
    Ea = A.ID_ATTRIBUTE_NAME,
    Fa = { hasCachedChildNodes: 1 },
    Ga = Math.random().toString(36).slice(2),
    Ha = "__reactInternalInstance$" + Ga,
    Ia = "__reactEventHandlers$" + Ga;function La(a) {
  for (var b; b = a._renderedComponent;) a = b;return a;
}function Ma(a, b) {
  a = La(a);a._hostNode = b;b[Ha] = a;
}
function Na(a, b) {
  if (!(a._flags & Fa.hasCachedChildNodes)) {
    var c = a._renderedChildren;b = b.firstChild;var d;a: for (d in c) if (c.hasOwnProperty(d)) {
      var e = c[d],
          f = La(e)._domID;if (0 !== f) {
        for (; null !== b; b = b.nextSibling) {
          var g = b,
              h = f;if (g.nodeType === Aa && g.getAttribute(Ea) === "" + h || g.nodeType === Ba && g.nodeValue === " react-text: " + h + " " || g.nodeType === Ba && g.nodeValue === " react-empty: " + h + " ") {
            Ma(e, b);continue a;
          }
        }w("32", f);
      }
    }a._flags |= Fa.hasCachedChildNodes;
  }
}
function Oa(a) {
  if (a[Ha]) return a[Ha];for (var b = []; !a[Ha];) if (b.push(a), a.parentNode) a = a.parentNode;else return null;var c = a[Ha];if (c.tag === ya || c.tag === za) return c;for (; a && (c = a[Ha]); a = b.pop()) {
    var d = c;b.length && Na(c, a);
  }return d;
}
var G = { getClosestInstanceFromNode: Oa, getInstanceFromNode: function (a) {
    var b = a[Ha];if (b) return b.tag === ya || b.tag === za ? b : b._hostNode === a ? b : null;b = Oa(a);return null != b && b._hostNode === a ? b : null;
  }, getNodeFromInstance: function (a) {
    if (a.tag === ya || a.tag === za) return a.stateNode;void 0 === a._hostNode ? w("33") : void 0;if (a._hostNode) return a._hostNode;for (var b = []; !a._hostNode;) b.push(a), a._hostParent ? void 0 : w("34"), a = a._hostParent;for (; b.length; a = b.pop()) Na(a, a._hostNode);return a._hostNode;
  }, precacheChildNodes: Na,
  precacheNode: Ma, uncacheNode: function (a) {
    var b = a._hostNode;b && (delete b[Ha], a._hostNode = null);
  }, precacheFiberNode: function (a, b) {
    b[Ha] = a;
  }, getFiberCurrentPropsFromNode: function (a) {
    return a[Ia] || null;
  }, updateFiberProps: function (a, b) {
    a[Ia] = b;
  } },
    Pa = { remove: function (a) {
    a._reactInternalFiber = void 0;
  }, get: function (a) {
    return a._reactInternalFiber;
  }, has: function (a) {
    return void 0 !== a._reactInternalFiber;
  }, set: function (a, b) {
    a._reactInternalFiber = b;
  } },
    Qa = { ReactCurrentOwner: aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner };
function Ra(a) {
  if ("function" === typeof a.getName) return a.getName();if ("number" === typeof a.tag) {
    a = a.type;if ("string" === typeof a) return a;if ("function" === typeof a) return a.displayName || a.name;
  }return null;
}var J = { NoEffect: 0, PerformedWork: 1, Placement: 2, Update: 4, PlacementAndUpdate: 6, Deletion: 8, ContentReset: 16, Callback: 32, Err: 64, Ref: 128 },
    Sa = E.HostComponent,
    Ta = E.HostRoot,
    Ua = E.HostPortal,
    Va = E.HostText,
    Wa = J.NoEffect,
    Xa = J.Placement;
function Za(a) {
  var b = a;if (a.alternate) for (; b["return"];) b = b["return"];else {
    if ((b.effectTag & Xa) !== Wa) return 1;for (; b["return"];) if (b = b["return"], (b.effectTag & Xa) !== Wa) return 1;
  }return b.tag === Ta ? 2 : 3;
}function $a(a) {
  2 !== Za(a) ? w("188") : void 0;
}
function ab(a) {
  var b = a.alternate;if (!b) return b = Za(a), 3 === b ? w("188") : void 0, 1 === b ? null : a;for (var c = a, d = b;;) {
    var e = c["return"],
        f = e ? e.alternate : null;if (!e || !f) break;if (e.child === f.child) {
      for (var g = e.child; g;) {
        if (g === c) return $a(e), a;if (g === d) return $a(e), b;g = g.sibling;
      }w("188");
    }if (c["return"] !== d["return"]) c = e, d = f;else {
      g = !1;for (var h = e.child; h;) {
        if (h === c) {
          g = !0;c = e;d = f;break;
        }if (h === d) {
          g = !0;d = e;c = f;break;
        }h = h.sibling;
      }if (!g) {
        for (h = f.child; h;) {
          if (h === c) {
            g = !0;c = f;d = e;break;
          }if (h === d) {
            g = !0;d = f;c = e;break;
          }h = h.sibling;
        }g ? void 0 : w("189");
      }
    }c.alternate !== d ? w("190") : void 0;
  }c.tag !== Ta ? w("188") : void 0;return c.stateNode.current === c ? a : b;
}
var bb = { isFiberMounted: function (a) {
    return 2 === Za(a);
  }, isMounted: function (a) {
    return (a = Pa.get(a)) ? 2 === Za(a) : !1;
  }, findCurrentFiberUsingSlowPath: ab, findCurrentHostFiber: function (a) {
    a = ab(a);if (!a) return null;for (var b = a;;) {
      if (b.tag === Sa || b.tag === Va) return b;if (b.child) b.child["return"] = b, b = b.child;else {
        if (b === a) break;for (; !b.sibling;) {
          if (!b["return"] || b["return"] === a) return null;b = b["return"];
        }b.sibling["return"] = b["return"];b = b.sibling;
      }
    }return null;
  }, findCurrentHostFiberWithNoPortals: function (a) {
    a = ab(a);
    if (!a) return null;for (var b = a;;) {
      if (b.tag === Sa || b.tag === Va) return b;if (b.child && b.tag !== Ua) b.child["return"] = b, b = b.child;else {
        if (b === a) break;for (; !b.sibling;) {
          if (!b["return"] || b["return"] === a) return null;b = b["return"];
        }b.sibling["return"] = b["return"];b = b.sibling;
      }
    }return null;
  } },
    K = { _caughtError: null, _hasCaughtError: !1, _rethrowError: null, _hasRethrowError: !1, injection: { injectErrorUtils: function (a) {
      "function" !== typeof a.invokeGuardedCallback ? w("197") : void 0;cb = a.invokeGuardedCallback;
    } }, invokeGuardedCallback: function (a, b, c, d, e, f, g, h, k) {
    cb.apply(K, arguments);
  }, invokeGuardedCallbackAndCatchFirstError: function (a, b, c, d, e, f, g, h, k) {
    K.invokeGuardedCallback.apply(this, arguments);if (K.hasCaughtError()) {
      var p = K.clearCaughtError();K._hasRethrowError || (K._hasRethrowError = !0, K._rethrowError = p);
    }
  }, rethrowCaughtError: function () {
    return db.apply(K, arguments);
  }, hasCaughtError: function () {
    return K._hasCaughtError;
  }, clearCaughtError: function () {
    if (K._hasCaughtError) {
      var a = K._caughtError;K._caughtError = null;K._hasCaughtError = !1;return a;
    }w("198");
  } };
function cb(a, b, c, d, e, f, g, h, k) {
  K._hasCaughtError = !1;K._caughtError = null;var p = Array.prototype.slice.call(arguments, 3);try {
    b.apply(c, p);
  } catch (x) {
    K._caughtError = x, K._hasCaughtError = !0;
  }
}function db() {
  if (K._hasRethrowError) {
    var a = K._rethrowError;K._rethrowError = null;K._hasRethrowError = !1;throw a;
  }
}var eb = K,
    fb;function gb(a, b, c, d) {
  b = a.type || "unknown-event";a.currentTarget = hb.getNodeFromInstance(d);eb.invokeGuardedCallbackAndCatchFirstError(b, c, void 0, a);a.currentTarget = null;
}
var hb = { isEndish: function (a) {
    return "topMouseUp" === a || "topTouchEnd" === a || "topTouchCancel" === a;
  }, isMoveish: function (a) {
    return "topMouseMove" === a || "topTouchMove" === a;
  }, isStartish: function (a) {
    return "topMouseDown" === a || "topTouchStart" === a;
  }, executeDirectDispatch: function (a) {
    var b = a._dispatchListeners,
        c = a._dispatchInstances;Array.isArray(b) ? w("103") : void 0;a.currentTarget = b ? hb.getNodeFromInstance(c) : null;b = b ? b(a) : null;a.currentTarget = null;a._dispatchListeners = null;a._dispatchInstances = null;return b;
  }, executeDispatchesInOrder: function (a, b) {
    var c = a._dispatchListeners,
        d = a._dispatchInstances;if (Array.isArray(c)) for (var e = 0; e < c.length && !a.isPropagationStopped(); e++) gb(a, b, c[e], d[e]);else c && gb(a, b, c, d);a._dispatchListeners = null;a._dispatchInstances = null;
  }, executeDispatchesInOrderStopAtTrue: function (a) {
    a: {
      var b = a._dispatchListeners;var c = a._dispatchInstances;if (Array.isArray(b)) for (var d = 0; d < b.length && !a.isPropagationStopped(); d++) {
        if (b[d](a, c[d])) {
          b = c[d];break a;
        }
      } else if (b && b(a, c)) {
        b = c;break a;
      }b = null;
    }a._dispatchInstances = null;a._dispatchListeners = null;return b;
  }, hasDispatches: function (a) {
    return !!a._dispatchListeners;
  }, getFiberCurrentPropsFromNode: function (a) {
    return fb.getFiberCurrentPropsFromNode(a);
  }, getInstanceFromNode: function (a) {
    return fb.getInstanceFromNode(a);
  }, getNodeFromInstance: function (a) {
    return fb.getNodeFromInstance(a);
  }, injection: { injectComponentTree: function (a) {
      fb = a;
    } } },
    ib = hb,
    jb = null,
    kb = null,
    lb = null;
function mb(a) {
  if (a = ib.getInstanceFromNode(a)) if ("number" === typeof a.tag) {
    jb && "function" === typeof jb.restoreControlledState ? void 0 : w("194");var b = ib.getFiberCurrentPropsFromNode(a.stateNode);jb.restoreControlledState(a.stateNode, a.type, b);
  } else "function" !== typeof a.restoreControlledState ? w("195") : void 0, a.restoreControlledState();
}
var nb = { injection: { injectFiberControlledHostComponent: function (a) {
      jb = a;
    } }, enqueueStateRestore: function (a) {
    kb ? lb ? lb.push(a) : lb = [a] : kb = a;
  }, restoreStateIfNeeded: function () {
    if (kb) {
      var a = kb,
          b = lb;lb = kb = null;mb(a);if (b) for (a = 0; a < b.length; a++) mb(b[a]);
    }
  } };function ob(a, b, c, d, e, f) {
  return a(b, c, d, e, f);
}function pb(a, b) {
  return a(b);
}function qb(a, b) {
  return pb(a, b);
}
var rb = !1,
    sb = { batchedUpdates: function (a, b) {
    if (rb) return ob(qb, a, b);rb = !0;try {
      return ob(qb, a, b);
    } finally {
      rb = !1, nb.restoreStateIfNeeded();
    }
  }, injection: { injectStackBatchedUpdates: function (a) {
      ob = a;
    }, injectFiberBatchedUpdates: function (a) {
      pb = a;
    } } },
    tb = F.TEXT_NODE;function ub(a) {
  a = a.target || a.srcElement || window;a.correspondingUseElement && (a = a.correspondingUseElement);return a.nodeType === tb ? a.parentNode : a;
}var vb = E.HostRoot,
    wb = [];
function xb(a) {
  var b = a.targetInst;do {
    if (!b) {
      a.ancestors.push(b);break;
    }var c = b;if ("number" === typeof c.tag) {
      for (; c["return"];) c = c["return"];c = c.tag !== vb ? null : c.stateNode.containerInfo;
    } else {
      for (; c._hostParent;) c = c._hostParent;c = G.getNodeFromInstance(c).parentNode;
    }if (!c) break;a.ancestors.push(b);b = G.getClosestInstanceFromNode(c);
  } while (b);for (c = 0; c < a.ancestors.length; c++) b = a.ancestors[c], yb._handleTopLevel(a.topLevelType, b, a.nativeEvent, ub(a.nativeEvent));
}
var yb = { _enabled: !0, _handleTopLevel: null, setHandleTopLevel: function (a) {
    yb._handleTopLevel = a;
  }, setEnabled: function (a) {
    yb._enabled = !!a;
  }, isEnabled: function () {
    return yb._enabled;
  }, trapBubbledEvent: function (a, b, c) {
    return c ? ba.listen(c, b, yb.dispatchEvent.bind(null, a)) : null;
  }, trapCapturedEvent: function (a, b, c) {
    return c ? ba.capture(c, b, yb.dispatchEvent.bind(null, a)) : null;
  }, dispatchEvent: function (a, b) {
    if (yb._enabled) {
      var c = ub(b);c = G.getClosestInstanceFromNode(c);null === c || "number" !== typeof c.tag || bb.isFiberMounted(c) || (c = null);if (wb.length) {
        var d = wb.pop();d.topLevelType = a;d.nativeEvent = b;d.targetInst = c;a = d;
      } else a = { topLevelType: a, nativeEvent: b, targetInst: c, ancestors: [] };try {
        sb.batchedUpdates(xb, a);
      } finally {
        a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, 10 > wb.length && wb.push(a);
      }
    }
  } },
    L = yb;function Cb(a, b) {
  null == b ? w("30") : void 0;if (null == a) return b;if (Array.isArray(a)) {
    if (Array.isArray(b)) return a.push.apply(a, b), a;a.push(b);return a;
  }return Array.isArray(b) ? [a].concat(b) : [a, b];
}
function Db(a, b, c) {
  Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);
}var Eb = null;function Fb(a, b) {
  a && (ib.executeDispatchesInOrder(a, b), a.isPersistent() || a.constructor.release(a));
}function Gb(a) {
  return Fb(a, !0);
}function Hb(a) {
  return Fb(a, !1);
}
function Ib(a, b, c) {
  switch (a) {case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":
      return !(!c.disabled || "button" !== b && "input" !== b && "select" !== b && "textarea" !== b);default:
      return !1;}
}
var Jb = { injection: { injectEventPluginOrder: sa.injectEventPluginOrder, injectEventPluginsByName: sa.injectEventPluginsByName }, getListener: function (a, b) {
    if ("number" === typeof a.tag) {
      var c = a.stateNode;if (!c) return null;var d = ib.getFiberCurrentPropsFromNode(c);if (!d) return null;c = d[b];if (Ib(b, a.type, d)) return null;
    } else {
      d = a._currentElement;if ("string" === typeof d || "number" === typeof d || !a._rootNodeID) return null;a = d.props;c = a[b];if (Ib(b, d.type, a)) return null;
    }c && "function" !== typeof c ? w("231", b, typeof c) : void 0;
    return c;
  }, extractEvents: function (a, b, c, d) {
    for (var e, f = sa.plugins, g = 0; g < f.length; g++) {
      var h = f[g];h && (h = h.extractEvents(a, b, c, d)) && (e = Cb(e, h));
    }return e;
  }, enqueueEvents: function (a) {
    a && (Eb = Cb(Eb, a));
  }, processEventQueue: function (a) {
    var b = Eb;Eb = null;a ? Db(b, Gb) : Db(b, Hb);Eb ? w("95") : void 0;eb.rethrowCaughtError();
  } },
    Kb;l.canUseDOM && (Kb = document.implementation && document.implementation.hasFeature && !0 !== document.implementation.hasFeature("", ""));
function Lb(a, b) {
  if (!l.canUseDOM || b && !("addEventListener" in document)) return !1;b = "on" + a;var c = b in document;c || (c = document.createElement("div"), c.setAttribute(b, "return;"), c = "function" === typeof c[b]);!c && Kb && "wheel" === a && (c = document.implementation.hasFeature("Events.wheel", "3.0"));return c;
}function Mb(a, b) {
  var c = {};c[a.toLowerCase()] = b.toLowerCase();c["Webkit" + a] = "webkit" + b;c["Moz" + a] = "moz" + b;c["ms" + a] = "MS" + b;c["O" + a] = "o" + b.toLowerCase();return c;
}
var Nb = { animationend: Mb("Animation", "AnimationEnd"), animationiteration: Mb("Animation", "AnimationIteration"), animationstart: Mb("Animation", "AnimationStart"), transitionend: Mb("Transition", "TransitionEnd") },
    Ob = {},
    Pb = {};l.canUseDOM && (Pb = document.createElement("div").style, "AnimationEvent" in window || (delete Nb.animationend.animation, delete Nb.animationiteration.animation, delete Nb.animationstart.animation), "TransitionEvent" in window || delete Nb.transitionend.transition);
function Qb(a) {
  if (Ob[a]) return Ob[a];if (!Nb[a]) return a;var b = Nb[a],
      c;for (c in b) if (b.hasOwnProperty(c) && c in Pb) return Ob[a] = b[c];return "";
}
var Rb = { topAbort: "abort", topAnimationEnd: Qb("animationend") || "animationend", topAnimationIteration: Qb("animationiteration") || "animationiteration", topAnimationStart: Qb("animationstart") || "animationstart", topBlur: "blur", topCancel: "cancel", topCanPlay: "canplay", topCanPlayThrough: "canplaythrough", topChange: "change", topClick: "click", topClose: "close", topCompositionEnd: "compositionend", topCompositionStart: "compositionstart", topCompositionUpdate: "compositionupdate", topContextMenu: "contextmenu", topCopy: "copy",
  topCut: "cut", topDoubleClick: "dblclick", topDrag: "drag", topDragEnd: "dragend", topDragEnter: "dragenter", topDragExit: "dragexit", topDragLeave: "dragleave", topDragOver: "dragover", topDragStart: "dragstart", topDrop: "drop", topDurationChange: "durationchange", topEmptied: "emptied", topEncrypted: "encrypted", topEnded: "ended", topError: "error", topFocus: "focus", topInput: "input", topKeyDown: "keydown", topKeyPress: "keypress", topKeyUp: "keyup", topLoadedData: "loadeddata", topLoad: "load", topLoadedMetadata: "loadedmetadata", topLoadStart: "loadstart",
  topMouseDown: "mousedown", topMouseMove: "mousemove", topMouseOut: "mouseout", topMouseOver: "mouseover", topMouseUp: "mouseup", topPaste: "paste", topPause: "pause", topPlay: "play", topPlaying: "playing", topProgress: "progress", topRateChange: "ratechange", topScroll: "scroll", topSeeked: "seeked", topSeeking: "seeking", topSelectionChange: "selectionchange", topStalled: "stalled", topSuspend: "suspend", topTextInput: "textInput", topTimeUpdate: "timeupdate", topToggle: "toggle", topTouchCancel: "touchcancel", topTouchEnd: "touchend", topTouchMove: "touchmove",
  topTouchStart: "touchstart", topTransitionEnd: Qb("transitionend") || "transitionend", topVolumeChange: "volumechange", topWaiting: "waiting", topWheel: "wheel" },
    Sb = {},
    Tb = 0,
    Ub = "_reactListenersID" + ("" + Math.random()).slice(2);function Vb(a) {
  Object.prototype.hasOwnProperty.call(a, Ub) || (a[Ub] = Tb++, Sb[a[Ub]] = {});return Sb[a[Ub]];
}
var M = n({}, { handleTopLevel: function (a, b, c, d) {
    a = Jb.extractEvents(a, b, c, d);Jb.enqueueEvents(a);Jb.processEventQueue(!1);
  } }, { setEnabled: function (a) {
    L && L.setEnabled(a);
  }, isEnabled: function () {
    return !(!L || !L.isEnabled());
  }, listenTo: function (a, b) {
    var c = Vb(b);a = sa.registrationNameDependencies[a];for (var d = 0; d < a.length; d++) {
      var e = a[d];c.hasOwnProperty(e) && c[e] || ("topWheel" === e ? Lb("wheel") ? L.trapBubbledEvent("topWheel", "wheel", b) : Lb("mousewheel") ? L.trapBubbledEvent("topWheel", "mousewheel", b) : L.trapBubbledEvent("topWheel", "DOMMouseScroll", b) : "topScroll" === e ? L.trapCapturedEvent("topScroll", "scroll", b) : "topFocus" === e || "topBlur" === e ? (L.trapCapturedEvent("topFocus", "focus", b), L.trapCapturedEvent("topBlur", "blur", b), c.topBlur = !0, c.topFocus = !0) : "topCancel" === e ? (Lb("cancel", !0) && L.trapCapturedEvent("topCancel", "cancel", b), c.topCancel = !0) : "topClose" === e ? (Lb("close", !0) && L.trapCapturedEvent("topClose", "close", b), c.topClose = !0) : Rb.hasOwnProperty(e) && L.trapBubbledEvent(e, Rb[e], b), c[e] = !0);
    }
  }, isListeningToAllDependencies: function (a, b) {
    b = Vb(b);a = sa.registrationNameDependencies[a];for (var c = 0; c < a.length; c++) {
      var d = a[c];if (!b.hasOwnProperty(d) || !b[d]) return !1;
    }return !0;
  }, trapBubbledEvent: function (a, b, c) {
    return L.trapBubbledEvent(a, b, c);
  }, trapCapturedEvent: function (a, b, c) {
    return L.trapCapturedEvent(a, b, c);
  } }),
    Wb = { animationIterationCount: !0, borderImageOutset: !0, borderImageSlice: !0, borderImageWidth: !0, boxFlex: !0, boxFlexGroup: !0, boxOrdinalGroup: !0, columnCount: !0, columns: !0, flex: !0, flexGrow: !0, flexPositive: !0, flexShrink: !0, flexNegative: !0,
  flexOrder: !0, gridRow: !0, gridRowEnd: !0, gridRowSpan: !0, gridRowStart: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnSpan: !0, gridColumnStart: !0, fontWeight: !0, lineClamp: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, tabSize: !0, widows: !0, zIndex: !0, zoom: !0, fillOpacity: !0, floodOpacity: !0, stopOpacity: !0, strokeDasharray: !0, strokeDashoffset: !0, strokeMiterlimit: !0, strokeOpacity: !0, strokeWidth: !0 },
    Xb = ["Webkit", "ms", "Moz", "O"];
Object.keys(Wb).forEach(function (a) {
  Xb.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);Wb[b] = Wb[a];
  });
});
var Yb = { isUnitlessNumber: Wb, shorthandPropertyExpansions: { background: { backgroundAttachment: !0, backgroundColor: !0, backgroundImage: !0, backgroundPositionX: !0, backgroundPositionY: !0, backgroundRepeat: !0 }, backgroundPosition: { backgroundPositionX: !0, backgroundPositionY: !0 }, border: { borderWidth: !0, borderStyle: !0, borderColor: !0 }, borderBottom: { borderBottomWidth: !0, borderBottomStyle: !0, borderBottomColor: !0 }, borderLeft: { borderLeftWidth: !0, borderLeftStyle: !0, borderLeftColor: !0 }, borderRight: { borderRightWidth: !0, borderRightStyle: !0,
      borderRightColor: !0 }, borderTop: { borderTopWidth: !0, borderTopStyle: !0, borderTopColor: !0 }, font: { fontStyle: !0, fontVariant: !0, fontWeight: !0, fontSize: !0, lineHeight: !0, fontFamily: !0 }, outline: { outlineWidth: !0, outlineStyle: !0, outlineColor: !0 } } },
    Zb = Yb.isUnitlessNumber,
    $b = !1;if (l.canUseDOM) {
  var ac = document.createElement("div").style;try {
    ac.font = "";
  } catch (a) {
    $b = !0;
  }
}
var bc = { createDangerousStringForStyles: function () {}, setValueForStyles: function (a, b) {
    a = a.style;for (var c in b) if (b.hasOwnProperty(c)) {
      var d = 0 === c.indexOf("--");var e = c;var f = b[c];e = null == f || "boolean" === typeof f || "" === f ? "" : d || "number" !== typeof f || 0 === f || Zb.hasOwnProperty(e) && Zb[e] ? ("" + f).trim() : f + "px";"float" === c && (c = "cssFloat");if (d) a.setProperty(c, e);else if (e) a[c] = e;else if (d = $b && Yb.shorthandPropertyExpansions[c]) for (var g in d) a[g] = "";else a[c] = "";
    }
  } },
    cc = new RegExp("^[" + A.ATTRIBUTE_NAME_START_CHAR + "][" + A.ATTRIBUTE_NAME_CHAR + "]*$"),
    dc = {},
    ec = {};function fc(a) {
  if (ec.hasOwnProperty(a)) return !0;if (dc.hasOwnProperty(a)) return !1;if (cc.test(a)) return ec[a] = !0;dc[a] = !0;return !1;
}
var gc = { setAttributeForID: function (a, b) {
    a.setAttribute(A.ID_ATTRIBUTE_NAME, b);
  }, setAttributeForRoot: function (a) {
    a.setAttribute(A.ROOT_ATTRIBUTE_NAME, "");
  }, getValueForProperty: function () {}, getValueForAttribute: function () {}, setValueForProperty: function (a, b, c) {
    var d = A.getPropertyInfo(b);if (d && A.shouldSetAttribute(b, c)) {
      var e = d.mutationMethod;e ? e(a, c) : null == c || d.hasBooleanValue && !c || d.hasNumericValue && isNaN(c) || d.hasPositiveNumericValue && 1 > c || d.hasOverloadedBooleanValue && !1 === c ? gc.deleteValueForProperty(a, b) : d.mustUseProperty ? a[d.propertyName] = c : (b = d.attributeName, (e = d.attributeNamespace) ? a.setAttributeNS(e, b, "" + c) : d.hasBooleanValue || d.hasOverloadedBooleanValue && !0 === c ? a.setAttribute(b, "") : a.setAttribute(b, "" + c));
    } else gc.setValueForAttribute(a, b, A.shouldSetAttribute(b, c) ? c : null);
  }, setValueForAttribute: function (a, b, c) {
    fc(b) && (null == c ? a.removeAttribute(b) : a.setAttribute(b, "" + c));
  }, deleteValueForAttribute: function (a, b) {
    a.removeAttribute(b);
  }, deleteValueForProperty: function (a, b) {
    var c = A.getPropertyInfo(b);
    c ? (b = c.mutationMethod) ? b(a, void 0) : c.mustUseProperty ? a[c.propertyName] = c.hasBooleanValue ? !1 : "" : a.removeAttribute(c.attributeName) : a.removeAttribute(b);
  } },
    hc = gc,
    ic = Qa.ReactDebugCurrentFrame;function jc() {
  return null;
}
var kc = { current: null, phase: null, resetCurrentFiber: function () {
    ic.getCurrentStack = null;kc.current = null;kc.phase = null;
  }, setCurrentFiber: function (a, b) {
    ic.getCurrentStack = jc;kc.current = a;kc.phase = b;
  }, getCurrentFiberOwnerName: function () {
    return null;
  }, getCurrentFiberStackAddendum: jc },
    lc = kc,
    mc = { getHostProps: function (a, b) {
    var c = b.value,
        d = b.checked;return n({ type: void 0, step: void 0, min: void 0, max: void 0 }, b, { defaultChecked: void 0, defaultValue: void 0, value: null != c ? c : a._wrapperState.initialValue, checked: null != d ? d : a._wrapperState.initialChecked });
  }, initWrapperState: function (a, b) {
    var c = b.defaultValue;a._wrapperState = { initialChecked: null != b.checked ? b.checked : b.defaultChecked, initialValue: null != b.value ? b.value : c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
  }, updateWrapper: function (a, b) {
    var c = b.checked;null != c && hc.setValueForProperty(a, "checked", c || !1);c = b.value;if (null != c) {
      if (0 === c && "" === a.value) a.value = "0";else if ("number" === b.type) {
        if (b = parseFloat(a.value) || 0, c != b || c == b && a.value != c) a.value = "" + c;
      } else a.value !== "" + c && (a.value = "" + c);
    } else null == b.value && null != b.defaultValue && a.defaultValue !== "" + b.defaultValue && (a.defaultValue = "" + b.defaultValue), null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
  }, postMountWrapper: function (a, b) {
    switch (b.type) {case "submit":case "reset":
        break;case "color":case "date":case "datetime":case "datetime-local":case "month":case "time":case "week":
        a.value = "";a.value = a.defaultValue;break;default:
        a.value = a.value;}b = a.name;"" !== b && (a.name = "");a.defaultChecked = !a.defaultChecked;a.defaultChecked = !a.defaultChecked;"" !== b && (a.name = b);
  }, restoreControlledState: function (a, b) {
    mc.updateWrapper(a, b);var c = b.name;if ("radio" === b.type && null != c) {
      for (b = a; b.parentNode;) b = b.parentNode;c = b.querySelectorAll("input[name\x3d" + JSON.stringify("" + c) + '][type\x3d"radio"]');for (b = 0; b < c.length; b++) {
        var d = c[b];if (d !== a && d.form === a.form) {
          var e = G.getFiberCurrentPropsFromNode(d);e ? void 0 : w("90");mc.updateWrapper(d, e);
        }
      }
    }
  } },
    qc = mc;
function rc(a) {
  var b = "";aa.Children.forEach(a, function (a) {
    null == a || "string" !== typeof a && "number" !== typeof a || (b += a);
  });return b;
}var sc = { validateProps: function () {}, postMountWrapper: function (a, b) {
    null != b.value && a.setAttribute("value", b.value);
  }, getHostProps: function (a, b) {
    a = n({ children: void 0 }, b);if (b = rc(b.children)) a.children = b;return a;
  } };
function tc(a, b, c) {
  a = a.options;if (b) {
    b = {};for (var d = 0; d < c.length; d++) b["$" + c[d]] = !0;for (c = 0; c < a.length; c++) d = b.hasOwnProperty("$" + a[c].value), a[c].selected !== d && (a[c].selected = d);
  } else {
    c = "" + c;b = null;for (d = 0; d < a.length; d++) {
      if (a[d].value === c) {
        a[d].selected = !0;return;
      }null !== b || a[d].disabled || (b = a[d]);
    }null !== b && (b.selected = !0);
  }
}
var uc = { getHostProps: function (a, b) {
    return n({}, b, { value: void 0 });
  }, initWrapperState: function (a, b) {
    var c = b.value;a._wrapperState = { initialValue: null != c ? c : b.defaultValue, wasMultiple: !!b.multiple };
  }, postMountWrapper: function (a, b) {
    a.multiple = !!b.multiple;var c = b.value;null != c ? tc(a, !!b.multiple, c) : null != b.defaultValue && tc(a, !!b.multiple, b.defaultValue);
  }, postUpdateWrapper: function (a, b) {
    a._wrapperState.initialValue = void 0;var c = a._wrapperState.wasMultiple;a._wrapperState.wasMultiple = !!b.multiple;var d = b.value;
    null != d ? tc(a, !!b.multiple, d) : c !== !!b.multiple && (null != b.defaultValue ? tc(a, !!b.multiple, b.defaultValue) : tc(a, !!b.multiple, b.multiple ? [] : ""));
  }, restoreControlledState: function (a, b) {
    var c = b.value;null != c && tc(a, !!b.multiple, c);
  } },
    vc = { getHostProps: function (a, b) {
    null != b.dangerouslySetInnerHTML ? w("91") : void 0;return n({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
  }, initWrapperState: function (a, b) {
    var c = b.value,
        d = c;null == c && (c = b.defaultValue, b = b.children, null != b && (null != c ? w("92") : void 0, Array.isArray(b) && (1 >= b.length ? void 0 : w("93"), b = b[0]), c = "" + b), null == c && (c = ""), d = c);a._wrapperState = { initialValue: "" + d };
  }, updateWrapper: function (a, b) {
    var c = b.value;null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && (a.defaultValue = c));null != b.defaultValue && (a.defaultValue = b.defaultValue);
  }, postMountWrapper: function (a) {
    var b = a.textContent;b === a._wrapperState.initialValue && (a.value = b);
  }, restoreControlledState: function (a, b) {
    vc.updateWrapper(a, b);
  } },
    wc = vc,
    xc = n({ menuitem: !0 }, { area: !0,
  base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });function yc(a, b) {
  b && (xc[a] && (null != b.children || null != b.dangerouslySetInnerHTML ? w("137", a, "") : void 0), null != b.dangerouslySetInnerHTML && (null != b.children ? w("60") : void 0, "object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML ? void 0 : w("61")), null != b.style && "object" !== typeof b.style ? w("62", "") : void 0);
}
function zc(a) {
  var b = a.type;return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function Ac(a) {
  var b = zc(a) ? "checked" : "value",
      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
      d = "" + a[b];if (!a.hasOwnProperty(b) && "function" === typeof c.get && "function" === typeof c.set) return Object.defineProperty(a, b, { enumerable: c.enumerable, configurable: !0, get: function () {
      return c.get.call(this);
    }, set: function (a) {
      d = "" + a;c.set.call(this, a);
    } }), { getValue: function () {
      return d;
    }, setValue: function (a) {
      d = "" + a;
    }, stopTracking: function () {
      a._valueTracker = null;delete a[b];
    } };
}
var Bc = { _getTrackerFromNode: function (a) {
    return a._valueTracker;
  }, track: function (a) {
    a._valueTracker || (a._valueTracker = Ac(a));
  }, updateValueIfChanged: function (a) {
    if (!a) return !1;var b = a._valueTracker;if (!b) return !0;var c = b.getValue();var d = "";a && (d = zc(a) ? a.checked ? "true" : "false" : a.value);a = d;return a !== c ? (b.setValue(a), !0) : !1;
  }, stopTracking: function (a) {
    (a = a._valueTracker) && a.stopTracking();
  } };
function Cc(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;switch (a) {case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":
      return !1;default:
      return !0;}
}
var Dc = ka.Namespaces,
    Ec,
    Fc = function (a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function () {
      return a(b, c, d, e);
    });
  } : a;
}(function (a, b) {
  if (a.namespaceURI !== Dc.svg || "innerHTML" in a) a.innerHTML = b;else for (Ec = Ec || document.createElement("div"), Ec.innerHTML = "\x3csvg\x3e" + b + "\x3c/svg\x3e", b = Ec.firstChild; b.firstChild;) a.appendChild(b.firstChild);
}),
    Gc = /["'&<>]/,
    Hc = F.TEXT_NODE;
function Ic(a, b) {
  if (b) {
    var c = a.firstChild;if (c && c === a.lastChild && c.nodeType === Hc) {
      c.nodeValue = b;return;
    }
  }a.textContent = b;
}
l.canUseDOM && ("textContent" in document.documentElement || (Ic = function (a, b) {
  if (a.nodeType === Hc) a.nodeValue = b;else {
    if ("boolean" === typeof b || "number" === typeof b) b = "" + b;else {
      b = "" + b;var c = Gc.exec(b);if (c) {
        var d = "",
            e,
            f = 0;for (e = c.index; e < b.length; e++) {
          switch (b.charCodeAt(e)) {case 34:
              c = "\x26quot;";break;case 38:
              c = "\x26amp;";break;case 39:
              c = "\x26#x27;";break;case 60:
              c = "\x26lt;";break;case 62:
              c = "\x26gt;";break;default:
              continue;}f !== e && (d += b.substring(f, e));f = e + 1;d += c;
        }b = f !== e ? d + b.substring(f, e) : d;
      }
    }Fc(a, b);
  }
}));
var Jc = Ic,
    Kc = lc.getCurrentFiberOwnerName,
    Lc = F.DOCUMENT_NODE,
    Mc = F.DOCUMENT_FRAGMENT_NODE,
    Nc = M.listenTo,
    Oc = sa.registrationNameModules,
    Pc = ka.Namespaces.html,
    Qc = ka.getIntrinsicNamespace;function Rc(a, b) {
  Nc(b, a.nodeType === Lc || a.nodeType === Mc ? a : a.ownerDocument);
}
var Sc = { topAbort: "abort", topCanPlay: "canplay", topCanPlayThrough: "canplaythrough", topDurationChange: "durationchange", topEmptied: "emptied", topEncrypted: "encrypted", topEnded: "ended", topError: "error", topLoadedData: "loadeddata", topLoadedMetadata: "loadedmetadata", topLoadStart: "loadstart", topPause: "pause", topPlay: "play", topPlaying: "playing", topProgress: "progress", topRateChange: "ratechange", topSeeked: "seeked", topSeeking: "seeking", topStalled: "stalled", topSuspend: "suspend", topTimeUpdate: "timeupdate", topVolumeChange: "volumechange",
  topWaiting: "waiting" },
    N = { createElement: function (a, b, c, d) {
    c = c.nodeType === Lc ? c : c.ownerDocument;d === Pc && (d = Qc(a));d === Pc ? "script" === a ? (a = c.createElement("div"), a.innerHTML = "\x3cscript\x3e\x3c/script\x3e", a = a.removeChild(a.firstChild)) : a = "string" === typeof b.is ? c.createElement(a, { is: b.is }) : c.createElement(a) : a = c.createElementNS(d, a);return a;
  }, createTextNode: function (a, b) {
    return (b.nodeType === Lc ? b : b.ownerDocument).createTextNode(a);
  }, setInitialProperties: function (a, b, c, d) {
    var e = Cc(b, c);switch (b) {case "iframe":case "object":
        M.trapBubbledEvent("topLoad", "load", a);var f = c;break;case "video":case "audio":
        for (f in Sc) Sc.hasOwnProperty(f) && M.trapBubbledEvent(f, Sc[f], a);f = c;break;case "source":
        M.trapBubbledEvent("topError", "error", a);f = c;break;case "img":case "image":
        M.trapBubbledEvent("topError", "error", a);M.trapBubbledEvent("topLoad", "load", a);f = c;break;case "form":
        M.trapBubbledEvent("topReset", "reset", a);M.trapBubbledEvent("topSubmit", "submit", a);f = c;break;case "details":
        M.trapBubbledEvent("topToggle", "toggle", a);f = c;break;case "input":
        qc.initWrapperState(a, c);f = qc.getHostProps(a, c);M.trapBubbledEvent("topInvalid", "invalid", a);Rc(d, "onChange");break;case "option":
        sc.validateProps(a, c);f = sc.getHostProps(a, c);break;case "select":
        uc.initWrapperState(a, c);f = uc.getHostProps(a, c);M.trapBubbledEvent("topInvalid", "invalid", a);Rc(d, "onChange");break;case "textarea":
        wc.initWrapperState(a, c);f = wc.getHostProps(a, c);M.trapBubbledEvent("topInvalid", "invalid", a);Rc(d, "onChange");break;default:
        f = c;}yc(b, f, Kc);var g = f,
        h;for (h in g) if (g.hasOwnProperty(h)) {
      var k = g[h];"style" === h ? bc.setValueForStyles(a, k) : "dangerouslySetInnerHTML" === h ? (k = k ? k.__html : void 0, null != k && Fc(a, k)) : "children" === h ? "string" === typeof k ? Jc(a, k) : "number" === typeof k && Jc(a, "" + k) : "suppressContentEditableWarning" !== h && (Oc.hasOwnProperty(h) ? null != k && Rc(d, h) : e ? hc.setValueForAttribute(a, h, k) : null != k && hc.setValueForProperty(a, h, k));
    }switch (b) {case "input":
        Bc.track(a);qc.postMountWrapper(a, c);break;case "textarea":
        Bc.track(a);wc.postMountWrapper(a, c);break;case "option":
        sc.postMountWrapper(a, c);break;case "select":
        uc.postMountWrapper(a, c);break;default:
        "function" === typeof f.onClick && (a.onclick = ca);}
  }, diffProperties: function (a, b, c, d, e) {
    var f = null;switch (b) {case "input":
        c = qc.getHostProps(a, c);d = qc.getHostProps(a, d);f = [];break;case "option":
        c = sc.getHostProps(a, c);d = sc.getHostProps(a, d);f = [];break;case "select":
        c = uc.getHostProps(a, c);d = uc.getHostProps(a, d);f = [];break;case "textarea":
        c = wc.getHostProps(a, c);d = wc.getHostProps(a, d);f = [];break;default:
        "function" !== typeof c.onClick && "function" === typeof d.onClick && (a.onclick = ca);}yc(b, d, Kc);
    var g, h;a = null;for (g in c) if (!d.hasOwnProperty(g) && c.hasOwnProperty(g) && null != c[g]) if ("style" === g) for (h in b = c[g], b) b.hasOwnProperty(h) && (a || (a = {}), a[h] = "");else "dangerouslySetInnerHTML" !== g && "children" !== g && "suppressContentEditableWarning" !== g && (Oc.hasOwnProperty(g) ? f || (f = []) : (f = f || []).push(g, null));for (g in d) {
      var k = d[g];b = null != c ? c[g] : void 0;if (d.hasOwnProperty(g) && k !== b && (null != k || null != b)) if ("style" === g) {
        if (b) {
          for (h in b) !b.hasOwnProperty(h) || k && k.hasOwnProperty(h) || (a || (a = {}), a[h] = "");for (h in k) k.hasOwnProperty(h) && b[h] !== k[h] && (a || (a = {}), a[h] = k[h]);
        } else a || (f || (f = []), f.push(g, a)), a = k;
      } else "dangerouslySetInnerHTML" === g ? (k = k ? k.__html : void 0, b = b ? b.__html : void 0, null != k && b !== k && (f = f || []).push(g, "" + k)) : "children" === g ? b === k || "string" !== typeof k && "number" !== typeof k || (f = f || []).push(g, "" + k) : "suppressContentEditableWarning" !== g && (Oc.hasOwnProperty(g) ? (null != k && Rc(e, g), f || b === k || (f = [])) : (f = f || []).push(g, k));
    }a && (f = f || []).push("style", a);return f;
  }, updateProperties: function (a, b, c, d, e) {
    Cc(c, d);d = Cc(c, e);for (var f = 0; f < b.length; f += 2) {
      var g = b[f],
          h = b[f + 1];"style" === g ? bc.setValueForStyles(a, h) : "dangerouslySetInnerHTML" === g ? Fc(a, h) : "children" === g ? Jc(a, h) : d ? null != h ? hc.setValueForAttribute(a, g, h) : hc.deleteValueForAttribute(a, g) : null != h ? hc.setValueForProperty(a, g, h) : hc.deleteValueForProperty(a, g);
    }switch (c) {case "input":
        qc.updateWrapper(a, e);Bc.updateValueIfChanged(a);break;case "textarea":
        wc.updateWrapper(a, e);break;case "select":
        uc.postUpdateWrapper(a, e);}
  }, diffHydratedProperties: function (a, b, c, d, e) {
    switch (b) {case "iframe":case "object":
        M.trapBubbledEvent("topLoad", "load", a);break;case "video":case "audio":
        for (var f in Sc) Sc.hasOwnProperty(f) && M.trapBubbledEvent(f, Sc[f], a);break;case "source":
        M.trapBubbledEvent("topError", "error", a);break;case "img":case "image":
        M.trapBubbledEvent("topError", "error", a);M.trapBubbledEvent("topLoad", "load", a);break;case "form":
        M.trapBubbledEvent("topReset", "reset", a);M.trapBubbledEvent("topSubmit", "submit", a);break;case "details":
        M.trapBubbledEvent("topToggle", "toggle", a);break;case "input":
        qc.initWrapperState(a, c);M.trapBubbledEvent("topInvalid", "invalid", a);Rc(e, "onChange");break;case "option":
        sc.validateProps(a, c);break;case "select":
        uc.initWrapperState(a, c);M.trapBubbledEvent("topInvalid", "invalid", a);Rc(e, "onChange");break;case "textarea":
        wc.initWrapperState(a, c), M.trapBubbledEvent("topInvalid", "invalid", a), Rc(e, "onChange");}yc(b, c, Kc);d = null;for (var g in c) c.hasOwnProperty(g) && (f = c[g], "children" === g ? "string" === typeof f ? a.textContent !== f && (d = ["children", f]) : "number" === typeof f && a.textContent !== "" + f && (d = ["children", "" + f]) : Oc.hasOwnProperty(g) && null != f && Rc(e, g));switch (b) {case "input":
        Bc.track(a);qc.postMountWrapper(a, c);break;case "textarea":
        Bc.track(a);wc.postMountWrapper(a, c);break;case "select":case "option":
        break;default:
        "function" === typeof c.onClick && (a.onclick = ca);}return d;
  }, diffHydratedText: function (a, b) {
    return a.nodeValue !== b;
  }, warnForDeletedHydratableElement: function () {}, warnForDeletedHydratableText: function () {}, warnForInsertedHydratedElement: function () {}, warnForInsertedHydratedText: function () {}, restoreControlledState: function (a, b, c) {
    switch (b) {case "input":
        qc.restoreControlledState(a, c);break;case "textarea":
        wc.restoreControlledState(a, c);break;case "select":
        uc.restoreControlledState(a, c);}
  } },
    Tc = void 0;
if (l.canUseDOM) {
  if ("function" !== typeof requestIdleCallback) {
    var Uc = null,
        Vc = null,
        Wc = !1,
        Xc = !1,
        Yc = 0,
        Zc = 33,
        $c = 33,
        ad = { timeRemaining: "object" === typeof performance && "function" === typeof performance.now ? function () {
        return Yc - performance.now();
      } : function () {
        return Yc - Date.now();
      } },
        bd = "__reactIdleCallback$" + Math.random().toString(36).slice(2);window.addEventListener("message", function (a) {
      a.source === window && a.data === bd && (Wc = !1, a = Vc, Vc = null, null !== a && a(ad));
    }, !1);var cd = function (a) {
      Xc = !1;var b = a - Yc + $c;b < $c && Zc < $c ? (8 > b && (b = 8), $c = b < Zc ? Zc : b) : Zc = b;Yc = a + $c;Wc || (Wc = !0, window.postMessage(bd, "*"));b = Uc;Uc = null;null !== b && b(a);
    };Tc = function (a) {
      Vc = a;Xc || (Xc = !0, requestAnimationFrame(cd));return 0;
    };
  } else Tc = requestIdleCallback;
} else Tc = function (a) {
  setTimeout(function () {
    a({ timeRemaining: function () {
        return Infinity;
      } });
  });return 0;
};
var dd = { rIC: Tc },
    ed = { enableAsyncSubtreeAPI: !0 },
    Q = { NoWork: 0, SynchronousPriority: 1, TaskPriority: 2, HighPriority: 3, LowPriority: 4, OffscreenPriority: 5 },
    fd = J.Callback,
    gd = Q.NoWork,
    hd = Q.SynchronousPriority,
    id = Q.TaskPriority,
    jd = E.ClassComponent,
    kd = E.HostRoot,
    md = void 0,
    nd = void 0;function od(a, b) {
  return a !== id && a !== hd || b !== id && b !== hd ? a === gd && b !== gd ? -255 : a !== gd && b === gd ? 255 : a - b : 0;
}function pd() {
  return { first: null, last: null, hasForceUpdate: !1, callbackList: null };
}
function qd(a, b, c, d) {
  null !== c ? c.next = b : (b.next = a.first, a.first = b);null !== d ? b.next = d : a.last = b;
}function rd(a, b) {
  b = b.priorityLevel;var c = null;if (null !== a.last && 0 >= od(a.last.priorityLevel, b)) c = a.last;else for (a = a.first; null !== a && 0 >= od(a.priorityLevel, b);) c = a, a = a.next;return c;
}
function sd(a, b) {
  var c = a.alternate,
      d = a.updateQueue;null === d && (d = a.updateQueue = pd());null !== c ? (a = c.updateQueue, null === a && (a = c.updateQueue = pd())) : a = null;md = d;nd = a !== d ? a : null;var e = md;c = nd;var f = rd(e, b),
      g = null !== f ? f.next : e.first;if (null === c) return qd(e, b, f, g), null;d = rd(c, b);a = null !== d ? d.next : c.first;qd(e, b, f, g);if (g === a && null !== g || f === d && null !== f) return null === d && (c.first = b), null === a && (c.last = null), null;b = { priorityLevel: b.priorityLevel, partialState: b.partialState, callback: b.callback, isReplace: b.isReplace,
    isForced: b.isForced, isTopLevelUnmount: b.isTopLevelUnmount, next: null };qd(c, b, d, a);return b;
}function td(a, b, c, d) {
  a = a.partialState;return "function" === typeof a ? a.call(b, c, d) : a;
}
var ud = { addUpdate: function (a, b, c, d) {
    sd(a, { priorityLevel: d, partialState: b, callback: c, isReplace: !1, isForced: !1, isTopLevelUnmount: !1, next: null });
  }, addReplaceUpdate: function (a, b, c, d) {
    sd(a, { priorityLevel: d, partialState: b, callback: c, isReplace: !0, isForced: !1, isTopLevelUnmount: !1, next: null });
  }, addForceUpdate: function (a, b, c) {
    sd(a, { priorityLevel: c, partialState: null, callback: b, isReplace: !1, isForced: !0, isTopLevelUnmount: !1, next: null });
  }, getUpdatePriority: function (a) {
    var b = a.updateQueue;return null === b || a.tag !== jd && a.tag !== kd ? gd : null !== b.first ? b.first.priorityLevel : gd;
  }, addTopLevelUpdate: function (a, b, c, d) {
    var e = null === b.element;b = { priorityLevel: d, partialState: b, callback: c, isReplace: !1, isForced: !1, isTopLevelUnmount: e, next: null };a = sd(a, b);e && (e = md, c = nd, null !== e && null !== b.next && (b.next = null, e.last = b), null !== c && null !== a && null !== a.next && (a.next = null, c.last = b));
  }, beginUpdateQueue: function (a, b, c, d, e, f, g) {
    null !== a && a.updateQueue === c && (c = b.updateQueue = { first: c.first, last: c.last, callbackList: null, hasForceUpdate: !1 });
    a = c.callbackList;for (var h = c.hasForceUpdate, k = !0, p = c.first; null !== p && 0 >= od(p.priorityLevel, g);) {
      c.first = p.next;null === c.first && (c.last = null);var x;if (p.isReplace) e = td(p, d, e, f), k = !0;else if (x = td(p, d, e, f)) e = k ? n({}, e, x) : n(e, x), k = !1;p.isForced && (h = !0);null === p.callback || p.isTopLevelUnmount && null !== p.next || (a = null !== a ? a : [], a.push(p.callback), b.effectTag |= fd);p = p.next;
    }c.callbackList = a;c.hasForceUpdate = h;null !== c.first || null !== a || h || (b.updateQueue = null);return e;
  }, commitCallbacks: function (a, b, c) {
    a = b.callbackList;
    if (null !== a) for (b.callbackList = null, b = 0; b < a.length; b++) {
      var d = a[b];"function" !== typeof d ? w("191", d) : void 0;d.call(c);
    }
  } },
    vd = [],
    wd = -1,
    xd = { createCursor: function (a) {
    return { current: a };
  }, isEmpty: function () {
    return -1 === wd;
  }, pop: function (a) {
    0 > wd || (a.current = vd[wd], vd[wd] = null, wd--);
  }, push: function (a, b) {
    wd++;vd[wd] = a.current;a.current = b;
  }, reset: function () {
    for (; -1 < wd;) vd[wd] = null, wd--;
  } },
    yd = bb.isFiberMounted,
    zd = E.ClassComponent,
    Ad = E.HostRoot,
    Bd = xd.createCursor,
    Cd = xd.pop,
    Dd = xd.push,
    Ed = Bd(da),
    Fd = Bd(!1),
    Ld = da;
function Md(a, b, c) {
  a = a.stateNode;a.__reactInternalMemoizedUnmaskedChildContext = b;a.__reactInternalMemoizedMaskedChildContext = c;
}function Nd(a) {
  return a.tag === zd && null != a.type.childContextTypes;
}function Od(a, b) {
  var c = a.stateNode,
      d = a.type.childContextTypes;if ("function" !== typeof c.getChildContext) return b;c = c.getChildContext();for (var e in c) e in d ? void 0 : w("108", Ra(a) || "Unknown", e);return n({}, b, c);
}
var R = { getUnmaskedContext: function (a) {
    return Nd(a) ? Ld : Ed.current;
  }, cacheContext: Md, getMaskedContext: function (a, b) {
    var c = a.type.contextTypes;if (!c) return da;var d = a.stateNode;if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;var e = {},
        f;for (f in c) e[f] = b[f];d && Md(a, b, e);return e;
  }, hasContextChanged: function () {
    return Fd.current;
  }, isContextConsumer: function (a) {
    return a.tag === zd && null != a.type.contextTypes;
  }, isContextProvider: Nd, popContextProvider: function (a) {
    Nd(a) && (Cd(Fd, a), Cd(Ed, a));
  }, popTopLevelContextObject: function (a) {
    Cd(Fd, a);Cd(Ed, a);
  }, pushTopLevelContextObject: function (a, b, c) {
    null != Ed.cursor ? w("168") : void 0;Dd(Ed, b, a);Dd(Fd, c, a);
  }, processChildContext: Od, pushContextProvider: function (a) {
    if (!Nd(a)) return !1;var b = a.stateNode;b = b && b.__reactInternalMemoizedMergedChildContext || da;Ld = Ed.current;Dd(Ed, b, a);Dd(Fd, Fd.current, a);return !0;
  }, invalidateContextProvider: function (a, b) {
    var c = a.stateNode;c ? void 0 : w("169");if (b) {
      var d = Od(a, Ld, !0);c.__reactInternalMemoizedMergedChildContext = d;Cd(Fd, a);Cd(Ed, a);Dd(Ed, d, a);
    } else Cd(Fd, a);Dd(Fd, b, a);
  }, resetContext: function () {
    Ld = da;Ed.current = da;Fd.current = !1;
  }, findCurrentUnmaskedContext: function (a) {
    for (yd(a) && a.tag === zd ? void 0 : w("170"); a.tag !== Ad;) {
      if (Nd(a)) return a.stateNode.__reactInternalMemoizedMergedChildContext;(a = a["return"]) ? void 0 : w("171");
    }return a.stateNode.context;
  } },
    Pd = { NoContext: 0, AsyncUpdates: 1 },
    Qd = E.IndeterminateComponent,
    Rd = E.ClassComponent,
    Sd = E.HostRoot,
    Td = E.HostComponent,
    Ud = E.HostText,
    Vd = E.HostPortal,
    Wd = E.CoroutineComponent,
    Xd = E.YieldComponent,
    Yd = E.Fragment,
    Zd = Q.NoWork,
    $d = Pd.NoContext,
    ae = J.NoEffect;function be(a, b, c) {
  this.tag = a;this.key = b;this.stateNode = this.type = null;this.sibling = this.child = this["return"] = null;this.index = 0;this.memoizedState = this.updateQueue = this.memoizedProps = this.pendingProps = this.ref = null;this.internalContextTag = c;this.effectTag = ae;this.lastEffect = this.firstEffect = this.nextEffect = null;this.pendingWorkPriority = Zd;this.alternate = null;
}
function ce(a, b, c) {
  var d = void 0;"function" === typeof a ? (d = a.prototype && a.prototype.isReactComponent ? new be(Rd, b, c) : new be(Qd, b, c), d.type = a) : "string" === typeof a ? (d = new be(Td, b, c), d.type = a) : "object" === typeof a && null !== a && "number" === typeof a.tag ? d = a : w("130", null == a ? a : typeof a, "");return d;
}
var de = { createWorkInProgress: function (a, b) {
    var c = a.alternate;null === c ? (c = new be(a.tag, a.key, a.internalContextTag), c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.effectTag = ae, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);c.pendingWorkPriority = b;c.child = a.child;c.memoizedProps = a.memoizedProps;c.memoizedState = a.memoizedState;c.updateQueue = a.updateQueue;c.sibling = a.sibling;c.index = a.index;c.ref = a.ref;return c;
  }, createHostRootFiber: function () {
    return new be(Sd, null, $d);
  },
  createFiberFromElement: function (a, b, c) {
    b = ce(a.type, a.key, b, null);b.pendingProps = a.props;b.pendingWorkPriority = c;return b;
  }, createFiberFromFragment: function (a, b, c) {
    b = new be(Yd, null, b);b.pendingProps = a;b.pendingWorkPriority = c;return b;
  }, createFiberFromText: function (a, b, c) {
    b = new be(Ud, null, b);b.pendingProps = a;b.pendingWorkPriority = c;return b;
  }, createFiberFromElementType: ce, createFiberFromHostInstanceForDeletion: function () {
    var a = new be(Td, null, $d);a.type = "DELETED";return a;
  }, createFiberFromCoroutine: function (a, b, c) {
    b = new be(Wd, a.key, b);b.type = a.handler;b.pendingProps = a;b.pendingWorkPriority = c;return b;
  }, createFiberFromYield: function (a, b) {
    return new be(Xd, null, b);
  }, createFiberFromPortal: function (a, b, c) {
    b = new be(Vd, a.key, b);b.pendingProps = a.children || [];b.pendingWorkPriority = c;b.stateNode = { containerInfo: a.containerInfo, implementation: a.implementation };return b;
  }, largerPriority: function (a, b) {
    return a !== Zd && (b === Zd || b > a) ? a : b;
  } },
    ee = de.createHostRootFiber,
    fe = E.IndeterminateComponent,
    ge = E.FunctionalComponent,
    he = E.ClassComponent,
    ie = E.HostComponent,
    je,
    ke;"function" === typeof Symbol && Symbol["for"] ? (je = Symbol["for"]("react.coroutine"), ke = Symbol["for"]("react.yield")) : (je = 60104, ke = 60105);
var le = { createCoroutine: function (a, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;return { $$typeof: je, key: null == d ? null : "" + d, children: a, handler: b, props: c };
  }, createYield: function (a) {
    return { $$typeof: ke, value: a };
  }, isCoroutine: function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === je;
  }, isYield: function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === ke;
  }, REACT_YIELD_TYPE: ke, REACT_COROUTINE_TYPE: je },
    me = "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.portal") || 60106,
    ne = { createPortal: function (a, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;return { $$typeof: me, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
  }, isPortal: function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === me;
  }, REACT_PORTAL_TYPE: me },
    oe = le.REACT_COROUTINE_TYPE,
    pe = le.REACT_YIELD_TYPE,
    qe = ne.REACT_PORTAL_TYPE,
    re = de.createWorkInProgress,
    se = de.createFiberFromElement,
    te = de.createFiberFromFragment,
    ue = de.createFiberFromText,
    ve = de.createFiberFromCoroutine,
    we = de.createFiberFromYield,
    xe = de.createFiberFromPortal,
    ye = Array.isArray,
    ze = E.FunctionalComponent,
    Ae = E.ClassComponent,
    Be = E.HostText,
    Ce = E.HostPortal,
    De = E.CoroutineComponent,
    Ee = E.YieldComponent,
    Fe = E.Fragment,
    Ge = J.NoEffect,
    He = J.Placement,
    Ie = J.Deletion,
    Je = "function" === typeof Symbol && Symbol.iterator,
    Ke = "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103;
function Le(a) {
  if (null === a || "undefined" === typeof a) return null;a = Je && a[Je] || a["@@iterator"];return "function" === typeof a ? a : null;
}
function Me(a, b) {
  var c = b.ref;if (null !== c && "function" !== typeof c) {
    if (b._owner) {
      b = b._owner;var d = void 0;b && ("number" === typeof b.tag ? (b.tag !== Ae ? w("110") : void 0, d = b.stateNode) : d = b.getPublicInstance());d ? void 0 : w("147", c);var e = "" + c;if (null !== a && null !== a.ref && a.ref._stringRef === e) return a.ref;a = function (a) {
        var b = d.refs === da ? d.refs = {} : d.refs;null === a ? delete b[e] : b[e] = a;
      };a._stringRef = e;return a;
    }"string" !== typeof c ? w("148") : void 0;b._owner ? void 0 : w("149", c);
  }return c;
}
function Ne(a, b) {
  "textarea" !== a.type && w("31", "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, "");
}
function Oe(a, b) {
  function c(c, d) {
    if (b) {
      if (!a) {
        if (null === d.alternate) return;d = d.alternate;
      }var m = c.lastEffect;null !== m ? (m.nextEffect = d, c.lastEffect = d) : c.firstEffect = c.lastEffect = d;d.nextEffect = null;d.effectTag = Ie;
    }
  }function d(a, d) {
    if (!b) return null;for (; null !== d;) c(a, d), d = d.sibling;return null;
  }function e(a, b) {
    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;return a;
  }function f(b, c) {
    if (a) return b = re(b, c), b.index = 0, b.sibling = null, b;b.pendingWorkPriority = c;b.effectTag = Ge;
    b.index = 0;b.sibling = null;return b;
  }function g(a, c, d) {
    a.index = d;if (!b) return c;d = a.alternate;if (null !== d) return d = d.index, d < c ? (a.effectTag = He, c) : d;a.effectTag = He;return c;
  }function h(a) {
    b && null === a.alternate && (a.effectTag = He);return a;
  }function k(a, b, c, d) {
    if (null === b || b.tag !== Be) return c = ue(c, a.internalContextTag, d), c["return"] = a, c;b = f(b, d);b.pendingProps = c;b["return"] = a;return b;
  }function p(a, b, c, d) {
    if (null === b || b.type !== c.type) return d = se(c, a.internalContextTag, d), d.ref = Me(b, c), d["return"] = a, d;d = f(b, d);d.ref = Me(b, c);d.pendingProps = c.props;d["return"] = a;return d;
  }function x(a, b, c, d) {
    if (null === b || b.tag !== De) return c = ve(c, a.internalContextTag, d), c["return"] = a, c;b = f(b, d);b.pendingProps = c;b["return"] = a;return b;
  }function S(a, b, c, d) {
    if (null === b || b.tag !== Ee) return b = we(c, a.internalContextTag, d), b.type = c.value, b["return"] = a, b;b = f(b, d);b.type = c.value;b["return"] = a;return b;
  }function D(a, b, c, d) {
    if (null === b || b.tag !== Ce || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return c = xe(c, a.internalContextTag, d), c["return"] = a, c;b = f(b, d);b.pendingProps = c.children || [];b["return"] = a;return b;
  }function y(a, b, c, d) {
    if (null === b || b.tag !== Fe) return c = te(c, a.internalContextTag, d), c["return"] = a, c;b = f(b, d);b.pendingProps = c;b["return"] = a;return b;
  }function B(a, b, c) {
    if ("string" === typeof b || "number" === typeof b) return b = ue("" + b, a.internalContextTag, c), b["return"] = a, b;if ("object" === typeof b && null !== b) {
      switch (b.$$typeof) {case Ke:
          return c = se(b, a.internalContextTag, c), c.ref = Me(null, b), c["return"] = a, c;case oe:
          return b = ve(b, a.internalContextTag, c), b["return"] = a, b;case pe:
          return c = we(b, a.internalContextTag, c), c.type = b.value, c["return"] = a, c;case qe:
          return b = xe(b, a.internalContextTag, c), b["return"] = a, b;}if (ye(b) || Le(b)) return b = te(b, a.internalContextTag, c), b["return"] = a, b;Ne(a, b);
    }return null;
  }function H(a, b, c, d) {
    var e = null !== b ? b.key : null;if ("string" === typeof c || "number" === typeof c) return null !== e ? null : k(a, b, "" + c, d);if ("object" === typeof c && null !== c) {
      switch (c.$$typeof) {case Ke:
          return c.key === e ? p(a, b, c, d) : null;case oe:
          return c.key === e ? x(a, b, c, d) : null;case pe:
          return null === e ? S(a, b, c, d) : null;case qe:
          return c.key === e ? D(a, b, c, d) : null;}if (ye(c) || Le(c)) return null !== e ? null : y(a, b, c, d);Ne(a, c);
    }return null;
  }function C(a, b, c, d, e) {
    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, k(b, a, "" + d, e);if ("object" === typeof d && null !== d) {
      switch (d.$$typeof) {case Ke:
          return a = a.get(null === d.key ? c : d.key) || null, p(b, a, d, e);case oe:
          return a = a.get(null === d.key ? c : d.key) || null, x(b, a, d, e);case pe:
          return a = a.get(c) || null, S(b, a, d, e);case qe:
          return a = a.get(null === d.key ? c : d.key) || null, D(b, a, d, e);}if (ye(d) || Le(d)) return a = a.get(c) || null, y(b, a, d, e);Ne(b, d);
    }return null;
  }function Ca(a, f, h, k) {
    for (var m = null, t = null, q = f, r = f = 0, p = null; null !== q && r < h.length; r++) {
      q.index > r ? (p = q, q = null) : p = q.sibling;var v = H(a, q, h[r], k);if (null === v) {
        null === q && (q = p);break;
      }b && q && null === v.alternate && c(a, q);f = g(v, f, r);null === t ? m = v : t.sibling = v;t = v;q = p;
    }if (r === h.length) return d(a, q), m;if (null === q) {
      for (; r < h.length; r++) if (q = B(a, h[r], k)) f = g(q, f, r), null === t ? m = q : t.sibling = q, t = q;return m;
    }for (q = e(a, q); r < h.length; r++) if (p = C(q, a, r, h[r], k)) {
      if (b && null !== p.alternate) q["delete"](null === p.key ? r : p.key);f = g(p, f, r);null === t ? m = p : t.sibling = p;t = p;
    }b && q.forEach(function (b) {
      return c(a, b);
    });return m;
  }function r(a, f, h, r) {
    var m = Le(h);"function" !== typeof m ? w("150") : void 0;h = m.call(h);null == h ? w("151") : void 0;for (var t = m = null, q = f, k = f = 0, p = null, v = h.next(); null !== q && !v.done; k++, v = h.next()) {
      q.index > k ? (p = q, q = null) : p = q.sibling;var V = H(a, q, v.value, r);if (null === V) {
        q || (q = p);break;
      }b && q && null === V.alternate && c(a, q);f = g(V, f, k);null === t ? m = V : t.sibling = V;t = V;q = p;
    }if (v.done) return d(a, q), m;if (null === q) {
      for (; !v.done; k++, v = h.next()) v = B(a, v.value, r), null !== v && (f = g(v, f, k), null === t ? m = v : t.sibling = v, t = v);return m;
    }for (q = e(a, q); !v.done; k++, v = h.next()) if (v = C(q, a, k, v.value, r), null !== v) {
      if (b && null !== v.alternate) q["delete"](null === v.key ? k : v.key);f = g(v, f, k);null === t ? m = v : t.sibling = v;t = v;
    }b && q.forEach(function (b) {
      return c(a, b);
    });return m;
  }return function (a, b, e, g) {
    var m = "object" === typeof e && null !== e;if (m) switch (e.$$typeof) {case Ke:
        a: {
          var C = e.key;for (m = b; null !== m;) {
            if (m.key === C) {
              if (m.type === e.type) {
                d(a, m.sibling);b = f(m, g);b.ref = Me(m, e);b.pendingProps = e.props;b["return"] = a;a = b;break a;
              } else {
                d(a, m);break;
              }
            } else c(a, m);m = m.sibling;
          }g = se(e, a.internalContextTag, g);g.ref = Me(b, e);g["return"] = a;a = g;
        }return h(a);case oe:
        a: {
          for (m = e.key; null !== b;) {
            if (b.key === m) {
              if (b.tag === De) {
                d(a, b.sibling);b = f(b, g);b.pendingProps = e;b["return"] = a;a = b;break a;
              } else {
                d(a, b);break;
              }
            } else c(a, b);b = b.sibling;
          }e = ve(e, a.internalContextTag, g);e["return"] = a;a = e;
        }return h(a);case pe:
        a: {
          if (null !== b) if (b.tag === Ee) {
            d(a, b.sibling);b = f(b, g);b.type = e.value;b["return"] = a;a = b;break a;
          } else d(a, b);b = we(e, a.internalContextTag, g);b.type = e.value;b["return"] = a;a = b;
        }return h(a);case qe:
        a: {
          for (m = e.key; null !== b;) {
            if (b.key === m) {
              if (b.tag === Ce && b.stateNode.containerInfo === e.containerInfo && b.stateNode.implementation === e.implementation) {
                d(a, b.sibling);b = f(b, g);b.pendingProps = e.children || [];b["return"] = a;a = b;break a;
              } else {
                d(a, b);break;
              }
            } else c(a, b);b = b.sibling;
          }e = xe(e, a.internalContextTag, g);e["return"] = a;a = e;
        }return h(a);}if ("string" === typeof e || "number" === typeof e) return e = "" + e, null !== b && b.tag === Be ? (d(a, b.sibling), b = f(b, g), b.pendingProps = e, b["return"] = a, a = b) : (d(a, b), e = ue(e, a.internalContextTag, g), e["return"] = a, a = e), h(a);if (ye(e)) return Ca(a, b, e, g);if (Le(e)) return r(a, b, e, g);m && Ne(a, e);if ("undefined" === typeof e) switch (a.tag) {case Ae:case ze:
        e = a.type, w("152", e.displayName || e.name || "Component");}return d(a, b);
  };
}
var Pe = Oe(!0, !0),
    Qe = Oe(!1, !0),
    Re = Oe(!1, !1),
    Se = { reconcileChildFibers: Pe, reconcileChildFibersInPlace: Qe, mountChildFibersInPlace: Re, cloneChildFibers: function (a, b) {
    null !== a && b.child !== a.child ? w("153") : void 0;if (null !== b.child) {
      a = b.child;var c = re(a, a.pendingWorkPriority);c.pendingProps = a.pendingProps;b.child = c;for (c["return"] = b; null !== a.sibling;) a = a.sibling, c = c.sibling = re(a, a.pendingWorkPriority), c.pendingProps = a.pendingProps, c["return"] = b;c.sibling = null;
    }
  } },
    Te = J.Update,
    Ue = Pd.AsyncUpdates,
    Ve = R.cacheContext,
    We = R.getMaskedContext,
    Xe = R.getUnmaskedContext,
    Ye = R.isContextConsumer,
    Ze = ud.addUpdate,
    $e = ud.addReplaceUpdate,
    af = ud.addForceUpdate,
    bf = ud.beginUpdateQueue,
    cf = R.hasContextChanged,
    df = bb.isMounted;
function ef(a, b, c, d) {
  function e(a, b) {
    b.updater = f;a.stateNode = b;Pa.set(b, a);
  }var f = { isMounted: df, enqueueSetState: function (c, d, e) {
      c = Pa.get(c);var f = b(c, !1);Ze(c, d, void 0 === e ? null : e, f);a(c, f);
    }, enqueueReplaceState: function (c, d, e) {
      c = Pa.get(c);var f = b(c, !1);$e(c, d, void 0 === e ? null : e, f);a(c, f);
    }, enqueueForceUpdate: function (c, d) {
      c = Pa.get(c);var e = b(c, !1);af(c, void 0 === d ? null : d, e);a(c, e);
    } };return { adoptClassInstance: e, constructClassInstance: function (a, b) {
      var c = a.type,
          d = Xe(a),
          f = Ye(a),
          g = f ? We(a, d) : da;b = new c(b, g);
      e(a, b);f && Ve(a, d, g);return b;
    }, mountClassInstance: function (a, b) {
      var c = a.alternate,
          d = a.stateNode,
          e = d.state || null,
          g = a.pendingProps;g ? void 0 : w("158");var h = Xe(a);d.props = g;d.state = e;d.refs = da;d.context = We(a, h);ed.enableAsyncSubtreeAPI && null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent && (a.internalContextTag |= Ue);"function" === typeof d.componentWillMount && (h = d.state, d.componentWillMount(), h !== d.state && f.enqueueReplaceState(d, d.state, null), h = a.updateQueue, null !== h && (d.state = bf(c, a, h, d, e, g, b)));"function" === typeof d.componentDidMount && (a.effectTag |= Te);
    }, updateClassInstance: function (a, b, e) {
      var g = b.stateNode;g.props = b.memoizedProps;g.state = b.memoizedState;var h = b.memoizedProps,
          k = b.pendingProps;k || (k = h, null == k ? w("159") : void 0);var D = g.context,
          y = Xe(b);y = We(b, y);"function" !== typeof g.componentWillReceiveProps || h === k && D === y || (D = g.state, g.componentWillReceiveProps(k, y), g.state !== D && f.enqueueReplaceState(g, g.state, null));D = b.memoizedState;e = null !== b.updateQueue ? bf(a, b, b.updateQueue, g, D, k, e) : D;if (!(h !== k || D !== e || cf() || null !== b.updateQueue && b.updateQueue.hasForceUpdate)) return "function" !== typeof g.componentDidUpdate || h === a.memoizedProps && D === a.memoizedState || (b.effectTag |= Te), !1;var B = k;if (null === h || null !== b.updateQueue && b.updateQueue.hasForceUpdate) B = !0;else {
        var H = b.stateNode,
            C = b.type;B = "function" === typeof H.shouldComponentUpdate ? H.shouldComponentUpdate(B, e, y) : C.prototype && C.prototype.isPureReactComponent ? !ea(h, B) || !ea(D, e) : !0;
      }B ? ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(k, e, y), "function" === typeof g.componentDidUpdate && (b.effectTag |= Te)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && D === a.memoizedState || (b.effectTag |= Te), c(b, k), d(b, e));g.props = k;g.state = e;g.context = y;return B;
    } };
}
var ff = Se.mountChildFibersInPlace,
    gf = Se.reconcileChildFibers,
    hf = Se.reconcileChildFibersInPlace,
    jf = Se.cloneChildFibers,
    kf = ud.beginUpdateQueue,
    lf = R.getMaskedContext,
    mf = R.getUnmaskedContext,
    nf = R.hasContextChanged,
    of = R.pushContextProvider,
    pf = R.pushTopLevelContextObject,
    qf = R.invalidateContextProvider,
    rf = E.IndeterminateComponent,
    sf = E.FunctionalComponent,
    tf = E.ClassComponent,
    uf = E.HostRoot,
    wf = E.HostComponent,
    xf = E.HostText,
    yf = E.HostPortal,
    zf = E.CoroutineComponent,
    Af = E.CoroutineHandlerPhase,
    Bf = E.YieldComponent,
    Cf = E.Fragment,
    Df = Q.NoWork,
    Ef = Q.OffscreenPriority,
    Ff = J.PerformedWork,
    Gf = J.Placement,
    Hf = J.ContentReset,
    If = J.Err,
    Jf = J.Ref,
    Kf = Qa.ReactCurrentOwner;
function Lf(a, b, c, d, e) {
  function f(a, b, c) {
    g(a, b, c, b.pendingWorkPriority);
  }function g(a, b, c, d) {
    b.child = null === a ? ff(b, b.child, c, d) : a.child === b.child ? gf(b, b.child, c, d) : hf(b, b.child, c, d);
  }function h(a, b) {
    var c = b.ref;null === c || a && a.ref === c || (b.effectTag |= Jf);
  }function k(a, b, c, d) {
    h(a, b);if (!c) return d && qf(b, !1), x(a, b);c = b.stateNode;Kf.current = b;var e = c.render();b.effectTag |= Ff;f(a, b, e);b.memoizedState = c.state;b.memoizedProps = c.props;d && qf(b, !0);return b.child;
  }function p(a) {
    var b = a.stateNode;b.pendingContext ? pf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && pf(a, b.context, !1);C(a, b.containerInfo);
  }function x(a, b) {
    jf(a, b);return b.child;
  }function S(a, b) {
    switch (b.tag) {case uf:
        p(b);break;case tf:
        of(b);break;case yf:
        C(b, b.stateNode.containerInfo);}return null;
  }var D = a.shouldSetTextContent,
      y = a.useSyncScheduling,
      B = a.shouldDeprioritizeSubtree,
      H = b.pushHostContext,
      C = b.pushHostContainer,
      Ca = c.enterHydrationState,
      r = c.resetHydrationState,
      m = c.tryToClaimNextHydratableInstance;a = ef(d, e, function (a, b) {
    a.memoizedProps = b;
  }, function (a, b) {
    a.memoizedState = b;
  });var t = a.adoptClassInstance,
      v = a.constructClassInstance,
      V = a.mountClassInstance,
      ld = a.updateClassInstance;return { beginWork: function (a, b, c) {
      if (b.pendingWorkPriority === Df || b.pendingWorkPriority > c) return S(a, b);switch (b.tag) {case rf:
          null !== a ? w("155") : void 0;var d = b.type,
              e = b.pendingProps,
              g = mf(b);g = lf(b, g);d = d(e, g);b.effectTag |= Ff;"object" === typeof d && null !== d && "function" === typeof d.render ? (b.tag = tf, e = of(b), t(b, d), V(b, c), b = k(a, b, !0, e)) : (b.tag = sf, f(a, b, d), b.memoizedProps = e, b = b.child);return b;case sf:
          a: {
            e = b.type;c = b.pendingProps;d = b.memoizedProps;if (nf()) null === c && (c = d);else if (null === c || d === c) {
              b = x(a, b);break a;
            }d = mf(b);d = lf(b, d);e = e(c, d);b.effectTag |= Ff;f(a, b, e);b.memoizedProps = c;b = b.child;
          }return b;case tf:
          return e = of(b), d = void 0, null === a ? b.stateNode ? w("153") : (v(b, b.pendingProps), V(b, c), d = !0) : d = ld(a, b, c), k(a, b, d, e);case uf:
          return p(b), d = b.updateQueue, null !== d ? (e = b.memoizedState, d = kf(a, b, d, null, e, null, c), e === d ? (r(), b = x(a, b)) : (e = d.element, null !== a && null !== a.child || !Ca(b) ? (r(), f(a, b, e)) : (b.effectTag |= Gf, b.child = ff(b, b.child, e, c)), b.memoizedState = d, b = b.child)) : (r(), b = x(a, b)), b;case wf:
          H(b);null === a && m(b);e = b.type;var q = b.memoizedProps;d = b.pendingProps;null === d && (d = q, null === d ? w("154") : void 0);g = null !== a ? a.memoizedProps : null;nf() || null !== d && q !== d ? (q = d.children, D(e, d) ? q = null : g && D(e, g) && (b.effectTag |= Hf), h(a, b), c !== Ef && !y && B(e, d) ? (b.pendingWorkPriority = Ef, b = null) : (f(a, b, q), b.memoizedProps = d, b = b.child)) : b = x(a, b);return b;case xf:
          return null === a && m(b), a = b.pendingProps, null === a && (a = b.memoizedProps), b.memoizedProps = a, null;case Af:
          b.tag = zf;case zf:
          c = b.pendingProps;if (nf()) null === c && (c = a && a.memoizedProps, null === c ? w("154") : void 0);else if (null === c || b.memoizedProps === c) c = b.memoizedProps;e = c.children;d = b.pendingWorkPriority;b.stateNode = null === a ? ff(b, b.stateNode, e, d) : a.child === b.child ? gf(b, b.stateNode, e, d) : hf(b, b.stateNode, e, d);b.memoizedProps = c;return b.stateNode;case Bf:
          return null;case yf:
          a: {
            C(b, b.stateNode.containerInfo);c = b.pendingWorkPriority;e = b.pendingProps;if (nf()) null === e && (e = a && a.memoizedProps, null == e ? w("154") : void 0);else if (null === e || b.memoizedProps === e) {
              b = x(a, b);break a;
            }null === a ? b.child = hf(b, b.child, e, c) : f(a, b, e);b.memoizedProps = e;b = b.child;
          }return b;case Cf:
          a: {
            c = b.pendingProps;if (nf()) null === c && (c = b.memoizedProps);else if (null === c || b.memoizedProps === c) {
              b = x(a, b);break a;
            }f(a, b, c);b.memoizedProps = c;b = b.child;
          }return b;default:
          w("156");}
    }, beginFailedWork: function (a, b, c) {
      switch (b.tag) {case tf:
          of(b);break;case uf:
          p(b);break;default:
          w("157");}b.effectTag |= If;null === a ? b.child = null : b.child !== a.child && (b.child = a.child);if (b.pendingWorkPriority === Df || b.pendingWorkPriority > c) return S(a, b);b.firstEffect = null;b.lastEffect = null;g(a, b, null, c);b.tag === tf && (a = b.stateNode, b.memoizedProps = a.props, b.memoizedState = a.state);return b.child;
    } };
}
var Mf = Se.reconcileChildFibers,
    Nf = R.popContextProvider,
    Of = R.popTopLevelContextObject,
    Pf = E.IndeterminateComponent,
    Qf = E.FunctionalComponent,
    Rf = E.ClassComponent,
    Sf = E.HostRoot,
    Tf = E.HostComponent,
    Uf = E.HostText,
    Vf = E.HostPortal,
    Wf = E.CoroutineComponent,
    Xf = E.CoroutineHandlerPhase,
    Yf = E.YieldComponent,
    Zf = E.Fragment,
    ag = J.Placement,
    bg = J.Ref,
    cg = J.Update,
    dg = Q.OffscreenPriority;
function eg(a, b, c) {
  var d = a.createInstance,
      e = a.createTextInstance,
      f = a.appendInitialChild,
      g = a.finalizeInitialChildren,
      h = a.prepareUpdate,
      k = b.getRootHostContainer,
      p = b.popHostContext,
      x = b.getHostContext,
      S = b.popHostContainer,
      D = c.prepareToHydrateHostInstance,
      y = c.prepareToHydrateHostTextInstance,
      B = c.popHydrationState;return { completeWork: function (a, b, c) {
      var r = b.pendingProps;if (null === r) r = b.memoizedProps;else if (b.pendingWorkPriority !== dg || c === dg) b.pendingProps = null;switch (b.tag) {case Qf:
          return null;case Rf:
          return Nf(b), null;case Sf:
          S(b);Of(b);r = b.stateNode;r.pendingContext && (r.context = r.pendingContext, r.pendingContext = null);if (null === a || null === a.child) B(b), b.effectTag &= ~ag;return null;case Tf:
          p(b);c = k();var m = b.type;if (null !== a && null != b.stateNode) {
            var t = a.memoizedProps,
                C = b.stateNode,
                V = x();r = h(C, m, t, r, c, V);if (b.updateQueue = r) b.effectTag |= cg;a.ref !== b.ref && (b.effectTag |= bg);
          } else {
            if (!r) return null === b.stateNode ? w("166") : void 0, null;a = x();if (B(b)) D(b, c, a) && (b.effectTag |= cg);else {
              a = d(m, r, c, a, b);a: for (t = b.child; null !== t;) {
                if (t.tag === Tf || t.tag === Uf) f(a, t.stateNode);else if (t.tag !== Vf && null !== t.child) {
                  t = t.child;continue;
                }if (t === b) break a;for (; null === t.sibling;) {
                  if (null === t["return"] || t["return"] === b) break a;t = t["return"];
                }t = t.sibling;
              }g(a, m, r, c) && (b.effectTag |= cg);b.stateNode = a;
            }null !== b.ref && (b.effectTag |= bg);
          }return null;case Uf:
          if (a && null != b.stateNode) a.memoizedProps !== r && (b.effectTag |= cg);else {
            if ("string" !== typeof r) return null === b.stateNode ? w("166") : void 0, null;a = k();c = x();B(b) ? y(b) && (b.effectTag |= cg) : b.stateNode = e(r, a, c, b);
          }return null;case Wf:
          (r = b.memoizedProps) ? void 0 : w("165");b.tag = Xf;c = [];a: for ((m = b.stateNode) && (m["return"] = b); null !== m;) {
            if (m.tag === Tf || m.tag === Uf || m.tag === Vf) w("164");else if (m.tag === Yf) c.push(m.type);else if (null !== m.child) {
              m.child["return"] = m;m = m.child;continue;
            }for (; null === m.sibling;) {
              if (null === m["return"] || m["return"] === b) break a;m = m["return"];
            }m.sibling["return"] = m["return"];m = m.sibling;
          }m = r.handler;r = m(r.props, c);b.child = Mf(b, null !== a ? a.child : null, r, b.pendingWorkPriority);return b.child;
        case Xf:
          return b.tag = Wf, null;case Yf:
          return null;case Zf:
          return null;case Vf:
          return b.effectTag |= cg, S(b), null;case Pf:
          w("167");default:
          w("156");}
    } };
}var fg = null,
    gg = null;function hg(a) {
  return function (b) {
    try {
      return a(b);
    } catch (c) {}
  };
}
var ig = { injectInternals: function (a) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;if (!b.supportsFiber) return !0;try {
      var c = b.inject(a);fg = hg(function (a) {
        return b.onCommitFiberRoot(c, a);
      });gg = hg(function (a) {
        return b.onCommitFiberUnmount(c, a);
      });
    } catch (d) {}return !0;
  }, onCommitRoot: function (a) {
    "function" === typeof fg && fg(a);
  }, onCommitUnmount: function (a) {
    "function" === typeof gg && gg(a);
  } },
    jg = E.ClassComponent,
    kg = E.HostRoot,
    lg = E.HostComponent,
    mg = E.HostText,
    ng = E.HostPortal,
    og = E.CoroutineComponent,
    pg = ud.commitCallbacks,
    qg = ig.onCommitUnmount,
    rg = J.Placement,
    sg = J.Update,
    tg = J.Callback,
    ug = J.ContentReset;
function vg(a, b) {
  function c(a) {
    var c = a.ref;if (null !== c) try {
      c(null);
    } catch (t) {
      b(a, t);
    }
  }function d(a) {
    return a.tag === lg || a.tag === kg || a.tag === ng;
  }function e(a) {
    for (var b = a;;) if (g(b), null !== b.child && b.tag !== ng) b.child["return"] = b, b = b.child;else {
      if (b === a) break;for (; null === b.sibling;) {
        if (null === b["return"] || b["return"] === a) return;b = b["return"];
      }b.sibling["return"] = b["return"];b = b.sibling;
    }
  }function f(a) {
    for (var b = a, c = !1, d = void 0, f = void 0;;) {
      if (!c) {
        c = b["return"];a: for (;;) {
          null === c ? w("160") : void 0;switch (c.tag) {case lg:
              d = c.stateNode;f = !1;break a;case kg:
              d = c.stateNode.containerInfo;f = !0;break a;case ng:
              d = c.stateNode.containerInfo;f = !0;break a;}c = c["return"];
        }c = !0;
      }if (b.tag === lg || b.tag === mg) e(b), f ? C(d, b.stateNode) : H(d, b.stateNode);else if (b.tag === ng ? d = b.stateNode.containerInfo : g(b), null !== b.child) {
        b.child["return"] = b;b = b.child;continue;
      }if (b === a) break;for (; null === b.sibling;) {
        if (null === b["return"] || b["return"] === a) return;b = b["return"];b.tag === ng && (c = !1);
      }b.sibling["return"] = b["return"];b = b.sibling;
    }
  }function g(a) {
    "function" === typeof qg && qg(a);switch (a.tag) {case jg:
        c(a);var d = a.stateNode;if ("function" === typeof d.componentWillUnmount) try {
          d.props = a.memoizedProps, d.state = a.memoizedState, d.componentWillUnmount();
        } catch (t) {
          b(a, t);
        }break;case lg:
        c(a);break;case og:
        e(a.stateNode);break;case ng:
        f(a);}
  }var h = a.commitMount,
      k = a.commitUpdate,
      p = a.resetTextContent,
      x = a.commitTextUpdate,
      S = a.appendChild,
      D = a.appendChildToContainer,
      y = a.insertBefore,
      B = a.insertInContainerBefore,
      H = a.removeChild,
      C = a.removeChildFromContainer,
      Ca = a.getPublicInstance;
  return { commitPlacement: function (a) {
      a: {
        for (var b = a["return"]; null !== b;) {
          if (d(b)) {
            var c = b;break a;
          }b = b["return"];
        }w("160");c = void 0;
      }var e = b = void 0;switch (c.tag) {case lg:
          b = c.stateNode;e = !1;break;case kg:
          b = c.stateNode.containerInfo;e = !0;break;case ng:
          b = c.stateNode.containerInfo;e = !0;break;default:
          w("161");}c.effectTag & ug && (p(b), c.effectTag &= ~ug);a: b: for (c = a;;) {
        for (; null === c.sibling;) {
          if (null === c["return"] || d(c["return"])) {
            c = null;break a;
          }c = c["return"];
        }c.sibling["return"] = c["return"];for (c = c.sibling; c.tag !== lg && c.tag !== mg;) {
          if (c.effectTag & rg) continue b;if (null === c.child || c.tag === ng) continue b;else c.child["return"] = c, c = c.child;
        }if (!(c.effectTag & rg)) {
          c = c.stateNode;break a;
        }
      }for (var f = a;;) {
        if (f.tag === lg || f.tag === mg) c ? e ? B(b, f.stateNode, c) : y(b, f.stateNode, c) : e ? D(b, f.stateNode) : S(b, f.stateNode);else if (f.tag !== ng && null !== f.child) {
          f.child["return"] = f;f = f.child;continue;
        }if (f === a) break;for (; null === f.sibling;) {
          if (null === f["return"] || f["return"] === a) return;f = f["return"];
        }f.sibling["return"] = f["return"];f = f.sibling;
      }
    },
    commitDeletion: function (a) {
      f(a);a["return"] = null;a.child = null;a.alternate && (a.alternate.child = null, a.alternate["return"] = null);
    }, commitWork: function (a, b) {
      switch (b.tag) {case jg:
          break;case lg:
          var c = b.stateNode;if (null != c) {
            var d = b.memoizedProps;a = null !== a ? a.memoizedProps : d;var e = b.type,
                f = b.updateQueue;b.updateQueue = null;null !== f && k(c, f, e, a, d, b);
          }break;case mg:
          null === b.stateNode ? w("162") : void 0;c = b.memoizedProps;x(b.stateNode, null !== a ? a.memoizedProps : c, c);break;case kg:
          break;case ng:
          break;default:
          w("163");}
    },
    commitLifeCycles: function (a, b) {
      switch (b.tag) {case jg:
          var c = b.stateNode;if (b.effectTag & sg) if (null === a) c.props = b.memoizedProps, c.state = b.memoizedState, c.componentDidMount();else {
            var d = a.memoizedProps;a = a.memoizedState;c.props = b.memoizedProps;c.state = b.memoizedState;c.componentDidUpdate(d, a);
          }b.effectTag & tg && null !== b.updateQueue && pg(b, b.updateQueue, c);break;case kg:
          a = b.updateQueue;null !== a && pg(b, a, b.child && b.child.stateNode);break;case lg:
          c = b.stateNode;null === a && b.effectTag & sg && h(c, b.type, b.memoizedProps, b);break;case mg:
          break;case ng:
          break;default:
          w("163");}
    }, commitAttachRef: function (a) {
      var b = a.ref;if (null !== b) {
        var c = a.stateNode;switch (a.tag) {case lg:
            b(Ca(c));break;default:
            b(c);}
      }
    }, commitDetachRef: function (a) {
      a = a.ref;null !== a && a(null);
    } };
}var wg = xd.createCursor,
    xg = xd.pop,
    yg = xd.push,
    zg = {};
function Ag(a) {
  function b(a) {
    a === zg ? w("174") : void 0;return a;
  }var c = a.getChildHostContext,
      d = a.getRootHostContext,
      e = wg(zg),
      f = wg(zg),
      g = wg(zg);return { getHostContext: function () {
      return b(e.current);
    }, getRootHostContainer: function () {
      return b(g.current);
    }, popHostContainer: function (a) {
      xg(e, a);xg(f, a);xg(g, a);
    }, popHostContext: function (a) {
      f.current === a && (xg(e, a), xg(f, a));
    }, pushHostContainer: function (a, b) {
      yg(g, b, a);b = d(b);yg(f, a, a);yg(e, b, a);
    }, pushHostContext: function (a) {
      var d = b(g.current),
          h = b(e.current);d = c(h, a.type, d);h !== d && (yg(f, a, a), yg(e, d, a));
    }, resetHostContainer: function () {
      e.current = zg;g.current = zg;
    } };
}var Bg = E.HostComponent,
    Cg = E.HostText,
    Dg = E.HostRoot,
    Eg = J.Deletion,
    Fg = J.Placement,
    Gg = de.createFiberFromHostInstanceForDeletion;
function Hg(a) {
  function b(a, b) {
    var c = Gg();c.stateNode = b;c["return"] = a;c.effectTag = Eg;null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
  }function c(a, b) {
    switch (a.tag) {case Bg:
        return f(b, a.type, a.pendingProps);case Cg:
        return g(b, a.pendingProps);default:
        return !1;}
  }function d(a) {
    for (a = a["return"]; null !== a && a.tag !== Bg && a.tag !== Dg;) a = a["return"];y = a;
  }var e = a.shouldSetTextContent,
      f = a.canHydrateInstance,
      g = a.canHydrateTextInstance,
      h = a.getNextHydratableSibling,
      k = a.getFirstHydratableChild,
      p = a.hydrateInstance,
      x = a.hydrateTextInstance,
      S = a.didNotHydrateInstance,
      D = a.didNotFindHydratableInstance;a = a.didNotFindHydratableTextInstance;if (!(f && g && h && k && p && x && S && D && a)) return { enterHydrationState: function () {
      return !1;
    }, resetHydrationState: function () {}, tryToClaimNextHydratableInstance: function () {}, prepareToHydrateHostInstance: function () {
      w("175");
    }, prepareToHydrateHostTextInstance: function () {
      w("176");
    }, popHydrationState: function () {
      return !1;
    } };var y = null,
      B = null,
      H = !1;return { enterHydrationState: function (a) {
      B = k(a.stateNode.containerInfo);y = a;return H = !0;
    }, resetHydrationState: function () {
      B = y = null;H = !1;
    }, tryToClaimNextHydratableInstance: function (a) {
      if (H) {
        var d = B;if (d) {
          if (!c(a, d)) {
            d = h(d);if (!d || !c(a, d)) {
              a.effectTag |= Fg;H = !1;y = a;return;
            }b(y, B);
          }a.stateNode = d;y = a;B = k(d);
        } else a.effectTag |= Fg, H = !1, y = a;
      }
    }, prepareToHydrateHostInstance: function (a, b, c) {
      b = p(a.stateNode, a.type, a.memoizedProps, b, c, a);a.updateQueue = b;return null !== b ? !0 : !1;
    }, prepareToHydrateHostTextInstance: function (a) {
      return x(a.stateNode, a.memoizedProps, a);
    },
    popHydrationState: function (a) {
      if (a !== y) return !1;if (!H) return d(a), H = !0, !1;var c = a.type;if (a.tag !== Bg || "head" !== c && "body" !== c && !e(c, a.memoizedProps)) for (c = B; c;) b(a, c), c = h(c);d(a);B = y ? h(a.stateNode) : null;return !0;
    } };
}
var Ig = R.popContextProvider,
    Jg = xd.reset,
    Kg = Qa.ReactCurrentOwner,
    Lg = de.createWorkInProgress,
    Mg = de.largerPriority,
    Ng = ig.onCommitRoot,
    T = Q.NoWork,
    Og = Q.SynchronousPriority,
    U = Q.TaskPriority,
    Pg = Q.HighPriority,
    Qg = Q.LowPriority,
    Rg = Q.OffscreenPriority,
    Sg = Pd.AsyncUpdates,
    Tg = J.PerformedWork,
    Ug = J.Placement,
    Vg = J.Update,
    Wg = J.PlacementAndUpdate,
    Xg = J.Deletion,
    Yg = J.ContentReset,
    Zg = J.Callback,
    $g = J.Err,
    ah = J.Ref,
    bh = E.HostRoot,
    ch = E.HostComponent,
    dh = E.HostPortal,
    eh = E.ClassComponent,
    fh = ud.getUpdatePriority,
    gh = R.resetContext;
function hh(a) {
  function b() {
    for (; null !== ma && ma.current.pendingWorkPriority === T;) {
      ma.isScheduled = !1;var a = ma.nextScheduledRoot;ma.nextScheduledRoot = null;if (ma === zb) return zb = ma = null, z = T, null;ma = a;
    }a = ma;for (var b = null, c = T; null !== a;) a.current.pendingWorkPriority !== T && (c === T || c > a.current.pendingWorkPriority) && (c = a.current.pendingWorkPriority, b = a), a = a.nextScheduledRoot;null !== b ? (z = c, Jg(), gh(), t(), I = Lg(b.current, c), b !== nc && (oc = 0, nc = b)) : (z = T, nc = I = null);
  }function c(c) {
    Hd = !0;na = null;var d = c.stateNode;d.current === c ? w("177") : void 0;z !== Og && z !== U || oc++;Kg.current = null;if (c.effectTag > Tg) {
      if (null !== c.lastEffect) {
        c.lastEffect.nextEffect = c;var e = c.firstEffect;
      } else e = c;
    } else e = c.firstEffect;Ui();for (u = e; null !== u;) {
      var f = !1,
          g = void 0;try {
        for (; null !== u;) {
          var h = u.effectTag;h & Yg && a.resetTextContent(u.stateNode);if (h & ah) {
            var k = u.alternate;null !== k && Ph(k);
          }switch (h & ~(Zg | $g | Yg | ah | Tg)) {case Ug:
              q(u);u.effectTag &= ~Ug;break;case Wg:
              q(u);u.effectTag &= ~Ug;vf(u.alternate, u);break;case Vg:
              vf(u.alternate, u);break;case Xg:
              Id = !0, Mh(u), Id = !1;}u = u.nextEffect;
        }
      } catch (Jd) {
        f = !0, g = Jd;
      }f && (null === u ? w("178") : void 0, x(u, g), null !== u && (u = u.nextEffect));
    }Vi();d.current = c;for (u = e; null !== u;) {
      d = !1;e = void 0;try {
        for (; null !== u;) {
          var Gd = u.effectTag;Gd & (Vg | Zg) && Nh(u.alternate, u);Gd & ah && Oh(u);if (Gd & $g) switch (f = u, g = void 0, null !== P && (g = P.get(f), P["delete"](f), null == g && null !== f.alternate && (f = f.alternate, g = P.get(f), P["delete"](f))), null == g ? w("184") : void 0, f.tag) {case eh:
              f.stateNode.componentDidCatch(g.error, { componentStack: g.componentStack });break;case bh:
              null === Ja && (Ja = g.error);break;default:
              w("157");}var m = u.nextEffect;u.nextEffect = null;u = m;
        }
      } catch (Jd) {
        d = !0, e = Jd;
      }d && (null === u ? w("178") : void 0, x(u, e), null !== u && (u = u.nextEffect));
    }Hd = !1;"function" === typeof Ng && Ng(c.stateNode);va && (va.forEach(H), va = null);b();
  }function d(a) {
    for (;;) {
      var b = Lh(a.alternate, a, z),
          c = a["return"],
          d = a.sibling;var e = a;if (!(e.pendingWorkPriority !== T && e.pendingWorkPriority > z)) {
        for (var f = fh(e), g = e.child; null !== g;) f = Mg(f, g.pendingWorkPriority), g = g.sibling;e.pendingWorkPriority = f;
      }if (null !== b) return b;
      null !== c && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), a.effectTag > Tg && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));if (null !== d) return d;if (null !== c) a = c;else {
        na = a;break;
      }
    }return null;
  }function e(a) {
    var b = V(a.alternate, a, z);null === b && (b = d(a));Kg.current = null;return b;
  }function f(a) {
    var b = ld(a.alternate, a, z);null === b && (b = d(a));Kg.current = null;return b;
  }
  function g(a) {
    p(Rg, a);
  }function h() {
    if (null !== P && 0 < P.size && z === U) for (; null !== I;) {
      var a = I;I = null !== P && (P.has(a) || null !== a.alternate && P.has(a.alternate)) ? f(I) : e(I);if (null === I && (null === na ? w("179") : void 0, O = U, c(na), O = z, null === P || 0 === P.size || z !== U)) break;
    }
  }function k(a, d) {
    null !== na ? (O = U, c(na), h()) : null === I && b();if (!(z === T || z > a)) {
      O = z;a: do {
        if (z <= U) for (; null !== I && !(I = e(I), null === I && (null === na ? w("179") : void 0, O = U, c(na), O = z, h(), z === T || z > a || z > U)););else if (null !== d) for (; null !== I && !Ab;) if (1 < d.timeRemaining()) {
          if (I = e(I), null === I) if (null === na ? w("179") : void 0, 1 < d.timeRemaining()) {
            if (O = U, c(na), O = z, h(), z === T || z > a || z < Pg) break;
          } else Ab = !0;
        } else Ab = !0;switch (z) {case Og:case U:
            if (z <= a) continue a;break a;case Pg:case Qg:case Rg:
            if (null === d) break a;if (!Ab && z <= a) continue a;break a;case T:
            break a;default:
            w("181");}
      } while (1);
    }
  }function p(a, b) {
    Da ? w("182") : void 0;Da = !0;var c = O,
        d = !1,
        e = null;try {
      k(a, b);
    } catch (Kd) {
      d = !0, e = Kd;
    }for (; d;) {
      if (Ya) {
        Ja = e;break;
      }var h = I;if (null === h) Ya = !0;else {
        var p = x(h, e);null === p ? w("183") : void 0;if (!Ya) {
          try {
            d = p;e = a;p = b;for (var q = d; null !== h;) {
              switch (h.tag) {case eh:
                  Ig(h);break;case ch:
                  m(h);break;case bh:
                  r(h);break;case dh:
                  r(h);}if (h === q || h.alternate === q) break;h = h["return"];
            }I = f(d);k(e, p);
          } catch (Kd) {
            d = !0;e = Kd;continue;
          }break;
        }
      }
    }O = c;null !== b && (Bb = !1);z > U && !Bb && ($f(g), Bb = !0);a = Ja;Ya = Ab = Da = !1;nc = Ka = P = Ja = null;oc = 0;if (null !== a) throw a;
  }function x(a, b) {
    var c = Kg.current = null,
        d = !1,
        e = !1,
        f = null;if (a.tag === bh) c = a, S(a) && (Ya = !0);else for (var g = a["return"]; null !== g && null === c;) {
      g.tag === eh ? "function" === typeof g.stateNode.componentDidCatch && (d = !0, f = Ra(g), c = g, e = !0) : g.tag === bh && (c = g);if (S(g)) {
        if (Id || null !== va && (va.has(g) || null !== g.alternate && va.has(g.alternate))) return null;c = null;e = !1;
      }g = g["return"];
    }if (null !== c) {
      null === Ka && (Ka = new Set());Ka.add(c);var h = "";g = a;do {
        a: switch (g.tag) {case fe:case ge:case he:case ie:
            var k = g._debugOwner,
                m = g._debugSource;var p = Ra(g);var q = null;k && (q = Ra(k));k = m;p = "\n    in " + (p || "Unknown") + (k ? " (at " + k.fileName.replace(/^.*[\\\/]/, "") + ":" + k.lineNumber + ")" : q ? " (created by " + q + ")" : "");break a;default:
            p = "";}h += p;g = g["return"];
      } while (g);
      g = h;a = Ra(a);null === P && (P = new Map());b = { componentName: a, componentStack: g, error: b, errorBoundary: d ? c.stateNode : null, errorBoundaryFound: d, errorBoundaryName: f, willRetry: e };P.set(c, b);try {
        console.error(b.error);
      } catch (Wi) {
        console.error(Wi);
      }Hd ? (null === va && (va = new Set()), va.add(c)) : H(c);return c;
    }null === Ja && (Ja = b);return null;
  }function S(a) {
    return null !== Ka && (Ka.has(a) || null !== a.alternate && Ka.has(a.alternate));
  }function D(a, b) {
    return y(a, b, !1);
  }function y(a, b) {
    oc > Xi && (Ya = !0, w("185"));!Da && b <= z && (I = null);for (var c = !0; null !== a && c;) {
      c = !1;if (a.pendingWorkPriority === T || a.pendingWorkPriority > b) c = !0, a.pendingWorkPriority = b;null !== a.alternate && (a.alternate.pendingWorkPriority === T || a.alternate.pendingWorkPriority > b) && (c = !0, a.alternate.pendingWorkPriority = b);if (null === a["return"]) if (a.tag === bh) {
        var d = a.stateNode;b === T || d.isScheduled || (d.isScheduled = !0, zb ? zb.nextScheduledRoot = d : ma = d, zb = d);if (!Da) switch (b) {case Og:
            pc ? p(Og, null) : p(U, null);break;case U:
            W ? void 0 : w("186");break;default:
            Bb || ($f(g), Bb = !0);}
      } else break;a = a["return"];
    }
  }
  function B(a, b) {
    var c = O;c === T && (c = !Yi || a.internalContextTag & Sg || b ? Qg : Og);return c === Og && (Da || W) ? U : c;
  }function H(a) {
    y(a, U, !0);
  }var C = Ag(a),
      Ca = Hg(a),
      r = C.popHostContainer,
      m = C.popHostContext,
      t = C.resetHostContainer,
      v = Lf(a, C, Ca, D, B),
      V = v.beginWork,
      ld = v.beginFailedWork,
      Lh = eg(a, C, Ca).completeWork;C = vg(a, x);var q = C.commitPlacement,
      Mh = C.commitDeletion,
      vf = C.commitWork,
      Nh = C.commitLifeCycles,
      Oh = C.commitAttachRef,
      Ph = C.commitDetachRef,
      $f = a.scheduleDeferredCallback,
      Yi = a.useSyncScheduling,
      Ui = a.prepareForCommit,
      Vi = a.resetAfterCommit,
      O = T,
      Da = !1,
      Ab = !1,
      W = !1,
      pc = !1,
      I = null,
      z = T,
      u = null,
      na = null,
      ma = null,
      zb = null,
      Bb = !1,
      P = null,
      Ka = null,
      va = null,
      Ja = null,
      Ya = !1,
      Hd = !1,
      Id = !1,
      Xi = 1E3,
      oc = 0,
      nc = null;return { scheduleUpdate: D, getPriorityContext: B, batchedUpdates: function (a, b) {
      var c = W;W = !0;try {
        return a(b);
      } finally {
        W = c, Da || W || p(U, null);
      }
    }, unbatchedUpdates: function (a) {
      var b = pc,
          c = W;pc = W;W = !1;try {
        return a();
      } finally {
        W = c, pc = b;
      }
    }, flushSync: function (a) {
      var b = W,
          c = O;W = !0;O = Og;try {
        return a();
      } finally {
        W = b, O = c, Da ? w("187") : void 0, p(U, null);
      }
    }, deferredUpdates: function (a) {
      var b = O;O = Qg;try {
        return a();
      } finally {
        O = b;
      }
    } };
}function ih() {
  w("196");
}function jh(a) {
  if (!a) return da;a = Pa.get(a);return "number" === typeof a.tag ? ih(a) : a._processChildContext(a._context);
}jh._injectFiber = function (a) {
  ih = a;
};var kh = ud.addTopLevelUpdate,
    lh = R.findCurrentUnmaskedContext,
    mh = R.isContextProvider,
    nh = R.processChildContext,
    oh = E.HostComponent,
    ph = bb.findCurrentHostFiber,
    qh = bb.findCurrentHostFiberWithNoPortals;jh._injectFiber(function (a) {
  var b = lh(a);return mh(a) ? nh(a, b, !1) : b;
});var rh = F.TEXT_NODE;
function sh(a) {
  for (; a && a.firstChild;) a = a.firstChild;return a;
}function th(a, b) {
  var c = sh(a);a = 0;for (var d; c;) {
    if (c.nodeType === rh) {
      d = a + c.textContent.length;if (a <= b && d >= b) return { node: c, offset: b - a };a = d;
    }a: {
      for (; c;) {
        if (c.nextSibling) {
          c = c.nextSibling;break a;
        }c = c.parentNode;
      }c = void 0;
    }c = sh(c);
  }
}var uh = null;function vh() {
  !uh && l.canUseDOM && (uh = "textContent" in document.documentElement ? "textContent" : "innerText");return uh;
}
var wh = { getOffsets: function (a) {
    var b = window.getSelection && window.getSelection();if (!b || 0 === b.rangeCount) return null;var c = b.anchorNode,
        d = b.anchorOffset,
        e = b.focusNode,
        f = b.focusOffset,
        g = b.getRangeAt(0);try {
      g.startContainer.nodeType, g.endContainer.nodeType;
    } catch (k) {
      return null;
    }b = b.anchorNode === b.focusNode && b.anchorOffset === b.focusOffset ? 0 : g.toString().length;var h = g.cloneRange();h.selectNodeContents(a);h.setEnd(g.startContainer, g.startOffset);a = h.startContainer === h.endContainer && h.startOffset === h.endOffset ? 0 : h.toString().length;g = a + b;b = document.createRange();b.setStart(c, d);b.setEnd(e, f);c = b.collapsed;return { start: c ? g : a, end: c ? a : g };
  }, setOffsets: function (a, b) {
    if (window.getSelection) {
      var c = window.getSelection(),
          d = a[vh()].length,
          e = Math.min(b.start, d);b = void 0 === b.end ? e : Math.min(b.end, d);!c.extend && e > b && (d = b, b = e, e = d);d = th(a, e);a = th(a, b);if (d && a) {
        var f = document.createRange();f.setStart(d.node, d.offset);c.removeAllRanges();e > b ? (c.addRange(f), c.extend(a.node, a.offset)) : (f.setEnd(a.node, a.offset), c.addRange(f));
      }
    }
  } },
    xh = F.ELEMENT_NODE,
    yh = { hasSelectionCapabilities: function (a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();return b && ("input" === b && "text" === a.type || "textarea" === b || "true" === a.contentEditable);
  }, getSelectionInformation: function () {
    var a = ia();return { focusedElem: a, selectionRange: yh.hasSelectionCapabilities(a) ? yh.getSelection(a) : null };
  }, restoreSelection: function (a) {
    var b = ia(),
        c = a.focusedElem;a = a.selectionRange;if (b !== c && fa(document.documentElement, c)) {
      yh.hasSelectionCapabilities(c) && yh.setSelection(c, a);b = [];for (a = c; a = a.parentNode;) a.nodeType === xh && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });ha(c);for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
    }
  }, getSelection: function (a) {
    return ("selectionStart" in a ? { start: a.selectionStart, end: a.selectionEnd } : wh.getOffsets(a)) || { start: 0, end: 0 };
  }, setSelection: function (a, b) {
    var c = b.start,
        d = b.end;void 0 === d && (d = c);"selectionStart" in a ? (a.selectionStart = c, a.selectionEnd = Math.min(d, a.value.length)) : wh.setOffsets(a, b);
  } },
    zh = yh,
    Ah = F.ELEMENT_NODE;function Bh() {
  w("211");
}function Ch() {
  w("212");
}function Dh(a) {
  if (null == a) return null;if (a.nodeType === Ah) return a;var b = Pa.get(a);if (b) return "number" === typeof b.tag ? Bh(b) : Ch(b);"function" === typeof a.render ? w("188") : w("213", Object.keys(a));
}Dh._injectFiber = function (a) {
  Bh = a;
};Dh._injectStack = function (a) {
  Ch = a;
};var Eh = E.HostComponent;function Fh(a) {
  if (void 0 !== a._hostParent) return a._hostParent;if ("number" === typeof a.tag) {
    do a = a["return"]; while (a && a.tag !== Eh);if (a) return a;
  }return null;
}
function Gh(a, b) {
  for (var c = 0, d = a; d; d = Fh(d)) c++;d = 0;for (var e = b; e; e = Fh(e)) d++;for (; 0 < c - d;) a = Fh(a), c--;for (; 0 < d - c;) b = Fh(b), d--;for (; c--;) {
    if (a === b || a === b.alternate) return a;a = Fh(a);b = Fh(b);
  }return null;
}
var Hh = { isAncestor: function (a, b) {
    for (; b;) {
      if (a === b || a === b.alternate) return !0;b = Fh(b);
    }return !1;
  }, getLowestCommonAncestor: Gh, getParentInstance: function (a) {
    return Fh(a);
  }, traverseTwoPhase: function (a, b, c) {
    for (var d = []; a;) d.push(a), a = Fh(a);for (a = d.length; 0 < a--;) b(d[a], "captured", c);for (a = 0; a < d.length; a++) b(d[a], "bubbled", c);
  }, traverseEnterLeave: function (a, b, c, d, e) {
    for (var f = a && b ? Gh(a, b) : null, g = []; a && a !== f;) g.push(a), a = Fh(a);for (a = []; b && b !== f;) a.push(b), b = Fh(b);for (b = 0; b < g.length; b++) c(g[b], "bubbled", d);for (b = a.length; 0 < b--;) c(a[b], "captured", e);
  } },
    Ih = Jb.getListener;function Jh(a, b, c) {
  if (b = Ih(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = Cb(c._dispatchListeners, b), c._dispatchInstances = Cb(c._dispatchInstances, a);
}function Kh(a) {
  a && a.dispatchConfig.phasedRegistrationNames && Hh.traverseTwoPhase(a._targetInst, Jh, a);
}function Qh(a) {
  if (a && a.dispatchConfig.phasedRegistrationNames) {
    var b = a._targetInst;b = b ? Hh.getParentInstance(b) : null;Hh.traverseTwoPhase(b, Jh, a);
  }
}
function Rh(a, b, c) {
  a && c && c.dispatchConfig.registrationName && (b = Ih(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = Cb(c._dispatchListeners, b), c._dispatchInstances = Cb(c._dispatchInstances, a));
}function Sh(a) {
  a && a.dispatchConfig.registrationName && Rh(a._targetInst, null, a);
}
var Th = { accumulateTwoPhaseDispatches: function (a) {
    Db(a, Kh);
  }, accumulateTwoPhaseDispatchesSkipTarget: function (a) {
    Db(a, Qh);
  }, accumulateDirectDispatches: function (a) {
    Db(a, Sh);
  }, accumulateEnterLeaveDispatches: function (a, b, c, d) {
    Hh.traverseEnterLeave(c, d, Rh, a, b);
  } },
    X = { _root: null, _startText: null, _fallbackText: null },
    Uh = { initialize: function (a) {
    X._root = a;X._startText = Uh.getText();return !0;
  }, reset: function () {
    X._root = null;X._startText = null;X._fallbackText = null;
  }, getData: function () {
    if (X._fallbackText) return X._fallbackText;
    var a,
        b = X._startText,
        c = b.length,
        d,
        e = Uh.getText(),
        f = e.length;for (a = 0; a < c && b[a] === e[a]; a++);var g = c - a;for (d = 1; d <= g && b[c - d] === e[f - d]; d++);X._fallbackText = e.slice(a, 1 < d ? 1 - d : void 0);return X._fallbackText;
  }, getText: function () {
    return "value" in X._root ? X._root.value : X._root[vh()];
  } },
    Vh = Uh,
    Wh = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),
    Xh = { type: null, target: null, currentTarget: ca.thatReturnsNull, eventPhase: null, bubbles: null,
  cancelable: null, timeStamp: function (a) {
    return a.timeStamp || Date.now();
  }, defaultPrevented: null, isTrusted: null };
function Y(a, b, c, d) {
  this.dispatchConfig = a;this._targetInst = b;this.nativeEvent = c;a = this.constructor.Interface;for (var e in a) a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : "target" === e ? this.target = d : this[e] = c[e]);this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? ca.thatReturnsTrue : ca.thatReturnsFalse;this.isPropagationStopped = ca.thatReturnsFalse;return this;
}
n(Y.prototype, { preventDefault: function () {
    this.defaultPrevented = !0;var a = this.nativeEvent;a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = ca.thatReturnsTrue);
  }, stopPropagation: function () {
    var a = this.nativeEvent;a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = ca.thatReturnsTrue);
  }, persist: function () {
    this.isPersistent = ca.thatReturnsTrue;
  }, isPersistent: ca.thatReturnsFalse,
  destructor: function () {
    var a = this.constructor.Interface,
        b;for (b in a) this[b] = null;for (a = 0; a < Wh.length; a++) this[Wh[a]] = null;
  } });Y.Interface = Xh;Y.augmentClass = function (a, b) {
  function c() {}c.prototype = this.prototype;var d = new c();n(d, a.prototype);a.prototype = d;a.prototype.constructor = a;a.Interface = n({}, this.Interface, b);a.augmentClass = this.augmentClass;Yh(a);
};Yh(Y);function Zh(a, b, c, d) {
  if (this.eventPool.length) {
    var e = this.eventPool.pop();this.call(e, a, b, c, d);return e;
  }return new this(a, b, c, d);
}
function $h(a) {
  a instanceof this ? void 0 : w("223");a.destructor();10 > this.eventPool.length && this.eventPool.push(a);
}function Yh(a) {
  a.eventPool = [];a.getPooled = Zh;a.release = $h;
}function ai(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Y.augmentClass(ai, { data: null });function bi(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Y.augmentClass(bi, { data: null });var ci = [9, 13, 27, 32],
    di = l.canUseDOM && "CompositionEvent" in window,
    ei = null;l.canUseDOM && "documentMode" in document && (ei = document.documentMode);var fi;
if (fi = l.canUseDOM && "TextEvent" in window && !ei) {
  var gi = window.opera;fi = !("object" === typeof gi && "function" === typeof gi.version && 12 >= parseInt(gi.version(), 10));
}
var hi = fi,
    ii = l.canUseDOM && (!di || ei && 8 < ei && 11 >= ei),
    ji = String.fromCharCode(32),
    ki = { beforeInput: { phasedRegistrationNames: { bubbled: "onBeforeInput", captured: "onBeforeInputCapture" }, dependencies: ["topCompositionEnd", "topKeyPress", "topTextInput", "topPaste"] }, compositionEnd: { phasedRegistrationNames: { bubbled: "onCompositionEnd", captured: "onCompositionEndCapture" }, dependencies: "topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ") }, compositionStart: { phasedRegistrationNames: { bubbled: "onCompositionStart",
      captured: "onCompositionStartCapture" }, dependencies: "topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ") }, compositionUpdate: { phasedRegistrationNames: { bubbled: "onCompositionUpdate", captured: "onCompositionUpdateCapture" }, dependencies: "topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ") } },
    li = !1;
function mi(a, b) {
  switch (a) {case "topKeyUp":
      return -1 !== ci.indexOf(b.keyCode);case "topKeyDown":
      return 229 !== b.keyCode;case "topKeyPress":case "topMouseDown":case "topBlur":
      return !0;default:
      return !1;}
}function ni(a) {
  a = a.detail;return "object" === typeof a && "data" in a ? a.data : null;
}var oi = !1;function pi(a, b) {
  switch (a) {case "topCompositionEnd":
      return ni(b);case "topKeyPress":
      if (32 !== b.which) return null;li = !0;return ji;case "topTextInput":
      return a = b.data, a === ji && li ? null : a;default:
      return null;}
}
function qi(a, b) {
  if (oi) return "topCompositionEnd" === a || !di && mi(a, b) ? (a = Vh.getData(), Vh.reset(), oi = !1, a) : null;switch (a) {case "topPaste":
      return null;case "topKeyPress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length) return b.char;if (b.which) return String.fromCharCode(b.which);
      }return null;case "topCompositionEnd":
      return ii ? null : b.data;default:
      return null;}
}
var ri = { eventTypes: ki, extractEvents: function (a, b, c, d) {
    var e;if (di) b: {
      switch (a) {case "topCompositionStart":
          var f = ki.compositionStart;break b;case "topCompositionEnd":
          f = ki.compositionEnd;break b;case "topCompositionUpdate":
          f = ki.compositionUpdate;break b;}f = void 0;
    } else oi ? mi(a, c) && (f = ki.compositionEnd) : "topKeyDown" === a && 229 === c.keyCode && (f = ki.compositionStart);f ? (ii && (oi || f !== ki.compositionStart ? f === ki.compositionEnd && oi && (e = Vh.getData()) : oi = Vh.initialize(d)), f = ai.getPooled(f, b, c, d), e ? f.data = e : (e = ni(c), null !== e && (f.data = e)), Th.accumulateTwoPhaseDispatches(f), e = f) : e = null;(a = hi ? pi(a, c) : qi(a, c)) ? (b = bi.getPooled(ki.beforeInput, b, c, d), b.data = a, Th.accumulateTwoPhaseDispatches(b)) : b = null;return [e, b];
  } },
    si = { color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 };function ti(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();return "input" === b ? !!si[a.type] : "textarea" === b ? !0 : !1;
}
var ui = { change: { phasedRegistrationNames: { bubbled: "onChange", captured: "onChangeCapture" }, dependencies: "topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ") } };function vi(a, b, c) {
  a = Y.getPooled(ui.change, a, b, c);a.type = "change";nb.enqueueStateRestore(c);Th.accumulateTwoPhaseDispatches(a);return a;
}var wi = null,
    xi = null;function yi(a) {
  Jb.enqueueEvents(a);Jb.processEventQueue(!1);
}
function zi(a) {
  var b = G.getNodeFromInstance(a);if (Bc.updateValueIfChanged(b)) return a;
}function Ai(a, b) {
  if ("topChange" === a) return b;
}var Bi = !1;l.canUseDOM && (Bi = Lb("input") && (!document.documentMode || 9 < document.documentMode));function Ci() {
  wi && (wi.detachEvent("onpropertychange", Di), xi = wi = null);
}function Di(a) {
  "value" === a.propertyName && zi(xi) && (a = vi(xi, a, ub(a)), sb.batchedUpdates(yi, a));
}function Ei(a, b, c) {
  "topFocus" === a ? (Ci(), wi = b, xi = c, wi.attachEvent("onpropertychange", Di)) : "topBlur" === a && Ci();
}
function Fi(a) {
  if ("topSelectionChange" === a || "topKeyUp" === a || "topKeyDown" === a) return zi(xi);
}function Gi(a, b) {
  if ("topClick" === a) return zi(b);
}function Hi(a, b) {
  if ("topInput" === a || "topChange" === a) return zi(b);
}
var Ii = { eventTypes: ui, _isInputEventSupported: Bi, extractEvents: function (a, b, c, d) {
    var e = b ? G.getNodeFromInstance(b) : window,
        f = e.nodeName && e.nodeName.toLowerCase();if ("select" === f || "input" === f && "file" === e.type) var g = Ai;else if (ti(e)) {
      if (Bi) g = Hi;else {
        g = Fi;var h = Ei;
      }
    } else f = e.nodeName, !f || "input" !== f.toLowerCase() || "checkbox" !== e.type && "radio" !== e.type || (g = Gi);if (g && (g = g(a, b))) return vi(g, c, d);h && h(a, e, b);"topBlur" === a && null != b && (a = b._wrapperState || e._wrapperState) && a.controlled && "number" === e.type && (a = "" + e.value, e.getAttribute("value") !== a && e.setAttribute("value", a));
  } };function Ji(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Y.augmentClass(Ji, { view: function (a) {
    if (a.view) return a.view;a = ub(a);return a.window === a ? a : (a = a.ownerDocument) ? a.defaultView || a.parentWindow : window;
  }, detail: function (a) {
    return a.detail || 0;
  } });var Ki = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };function Li(a) {
  var b = this.nativeEvent;return b.getModifierState ? b.getModifierState(a) : (a = Ki[a]) ? !!b[a] : !1;
}function Mi() {
  return Li;
}
function Ni(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Ji.augmentClass(Ni, { screenX: null, screenY: null, clientX: null, clientY: null, pageX: null, pageY: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, getModifierState: Mi, button: null, buttons: null, relatedTarget: function (a) {
    return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
  } });
var Oi = { mouseEnter: { registrationName: "onMouseEnter", dependencies: ["topMouseOut", "topMouseOver"] }, mouseLeave: { registrationName: "onMouseLeave", dependencies: ["topMouseOut", "topMouseOver"] } },
    Pi = { eventTypes: Oi, extractEvents: function (a, b, c, d) {
    if ("topMouseOver" === a && (c.relatedTarget || c.fromElement) || "topMouseOut" !== a && "topMouseOver" !== a) return null;var e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;"topMouseOut" === a ? (a = b, b = (b = c.relatedTarget || c.toElement) ? G.getClosestInstanceFromNode(b) : null) : a = null;if (a === b) return null;var f = null == a ? e : G.getNodeFromInstance(a);e = null == b ? e : G.getNodeFromInstance(b);var g = Ni.getPooled(Oi.mouseLeave, a, c, d);g.type = "mouseleave";g.target = f;g.relatedTarget = e;c = Ni.getPooled(Oi.mouseEnter, b, c, d);c.type = "mouseenter";c.target = e;c.relatedTarget = f;Th.accumulateEnterLeaveDispatches(g, c, a, b);return [g, c];
  } },
    Qi = F.DOCUMENT_NODE,
    Ri = l.canUseDOM && "documentMode" in document && 11 >= document.documentMode,
    Si = { select: { phasedRegistrationNames: { bubbled: "onSelect", captured: "onSelectCapture" },
    dependencies: "topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ") } },
    Ti = null,
    Zi = null,
    $i = null,
    aj = !1,
    bj = M.isListeningToAllDependencies;
function cj(a, b) {
  if (aj || null == Ti || Ti !== ia()) return null;var c = Ti;"selectionStart" in c && zh.hasSelectionCapabilities(c) ? c = { start: c.selectionStart, end: c.selectionEnd } : window.getSelection ? (c = window.getSelection(), c = { anchorNode: c.anchorNode, anchorOffset: c.anchorOffset, focusNode: c.focusNode, focusOffset: c.focusOffset }) : c = void 0;return $i && ea($i, c) ? null : ($i = c, a = Y.getPooled(Si.select, Zi, a, b), a.type = "select", a.target = Ti, Th.accumulateTwoPhaseDispatches(a), a);
}
var dj = { eventTypes: Si, extractEvents: function (a, b, c, d) {
    var e = d.window === d ? d.document : d.nodeType === Qi ? d : d.ownerDocument;if (!e || !bj("onSelect", e)) return null;e = b ? G.getNodeFromInstance(b) : window;switch (a) {case "topFocus":
        if (ti(e) || "true" === e.contentEditable) Ti = e, Zi = b, $i = null;break;case "topBlur":
        $i = Zi = Ti = null;break;case "topMouseDown":
        aj = !0;break;case "topContextMenu":case "topMouseUp":
        return aj = !1, cj(c, d);case "topSelectionChange":
        if (Ri) break;case "topKeyDown":case "topKeyUp":
        return cj(c, d);}return null;
  } };
function ej(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Y.augmentClass(ej, { animationName: null, elapsedTime: null, pseudoElement: null });function fj(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Y.augmentClass(fj, { clipboardData: function (a) {
    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
  } });function gj(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Ji.augmentClass(gj, { relatedTarget: null });function hj(a) {
  var b = a.keyCode;"charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;return 32 <= a || 13 === a ? a : 0;
}
var ij = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" },
    jj = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4",
  116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" };function kj(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}
Ji.augmentClass(kj, { key: function (a) {
    if (a.key) {
      var b = ij[a.key] || a.key;if ("Unidentified" !== b) return b;
    }return "keypress" === a.type ? (a = hj(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? jj[a.keyCode] || "Unidentified" : "";
  }, location: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, repeat: null, locale: null, getModifierState: Mi, charCode: function (a) {
    return "keypress" === a.type ? hj(a) : 0;
  }, keyCode: function (a) {
    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  }, which: function (a) {
    return "keypress" === a.type ? hj(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  } });function lj(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Ni.augmentClass(lj, { dataTransfer: null });function mj(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Ji.augmentClass(mj, { touches: null, targetTouches: null, changedTouches: null, altKey: null, metaKey: null, ctrlKey: null, shiftKey: null, getModifierState: Mi });function nj(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Y.augmentClass(nj, { propertyName: null, elapsedTime: null, pseudoElement: null });
function oj(a, b, c, d) {
  return Y.call(this, a, b, c, d);
}Ni.augmentClass(oj, { deltaX: function (a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  }, deltaY: function (a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  }, deltaZ: null, deltaMode: null });var pj = {},
    qj = {};
"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function (a) {
  var b = a[0].toUpperCase() + a.slice(1),
      c = "on" + b;b = "top" + b;c = { phasedRegistrationNames: { bubbled: c, captured: c + "Capture" }, dependencies: [b] };pj[a] = c;qj[b] = c;
});
var rj = { eventTypes: pj, extractEvents: function (a, b, c, d) {
    var e = qj[a];if (!e) return null;switch (a) {case "topAbort":case "topCancel":case "topCanPlay":case "topCanPlayThrough":case "topClose":case "topDurationChange":case "topEmptied":case "topEncrypted":case "topEnded":case "topError":case "topInput":case "topInvalid":case "topLoad":case "topLoadedData":case "topLoadedMetadata":case "topLoadStart":case "topPause":case "topPlay":case "topPlaying":case "topProgress":case "topRateChange":case "topReset":case "topSeeked":case "topSeeking":case "topStalled":case "topSubmit":case "topSuspend":case "topTimeUpdate":case "topToggle":case "topVolumeChange":case "topWaiting":
        var f = Y;
        break;case "topKeyPress":
        if (0 === hj(c)) return null;case "topKeyDown":case "topKeyUp":
        f = kj;break;case "topBlur":case "topFocus":
        f = gj;break;case "topClick":
        if (2 === c.button) return null;case "topDoubleClick":case "topMouseDown":case "topMouseMove":case "topMouseUp":case "topMouseOut":case "topMouseOver":case "topContextMenu":
        f = Ni;break;case "topDrag":case "topDragEnd":case "topDragEnter":case "topDragExit":case "topDragLeave":case "topDragOver":case "topDragStart":case "topDrop":
        f = lj;break;case "topTouchCancel":case "topTouchEnd":case "topTouchMove":case "topTouchStart":
        f = mj;break;case "topAnimationEnd":case "topAnimationIteration":case "topAnimationStart":
        f = ej;break;case "topTransitionEnd":
        f = nj;break;case "topScroll":
        f = Ji;break;case "topWheel":
        f = oj;break;case "topCopy":case "topCut":case "topPaste":
        f = fj;}f ? void 0 : w("86", a);a = f.getPooled(e, b, c, d);Th.accumulateTwoPhaseDispatches(a);return a;
  } };L.setHandleTopLevel(M.handleTopLevel);Jb.injection.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));
ib.injection.injectComponentTree(G);Jb.injection.injectEventPluginsByName({ SimpleEventPlugin: rj, EnterLeaveEventPlugin: Pi, ChangeEventPlugin: Ii, SelectEventPlugin: dj, BeforeInputEventPlugin: ri });
var sj = A.injection.MUST_USE_PROPERTY,
    Z = A.injection.HAS_BOOLEAN_VALUE,
    tj = A.injection.HAS_NUMERIC_VALUE,
    uj = A.injection.HAS_POSITIVE_NUMERIC_VALUE,
    vj = A.injection.HAS_STRING_BOOLEAN_VALUE,
    wj = { Properties: { allowFullScreen: Z, allowTransparency: vj, async: Z, autoPlay: Z, capture: Z, checked: sj | Z, cols: uj, contentEditable: vj, controls: Z, "default": Z, defer: Z, disabled: Z, download: A.injection.HAS_OVERLOADED_BOOLEAN_VALUE, draggable: vj, formNoValidate: Z, hidden: Z, loop: Z, multiple: sj | Z, muted: sj | Z, noValidate: Z, open: Z, playsInline: Z,
    readOnly: Z, required: Z, reversed: Z, rows: uj, rowSpan: tj, scoped: Z, seamless: Z, selected: sj | Z, size: uj, start: tj, span: uj, spellCheck: vj, style: 0, itemScope: Z, acceptCharset: 0, className: 0, htmlFor: 0, httpEquiv: 0, value: vj }, DOMAttributeNames: { acceptCharset: "accept-charset", className: "class", htmlFor: "for", httpEquiv: "http-equiv" }, DOMMutationMethods: { value: function (a, b) {
      if (null == b) return a.removeAttribute("value");"number" !== a.type || !1 === a.hasAttribute("value") ? a.setAttribute("value", "" + b) : a.validity && !a.validity.badInput && a.ownerDocument.activeElement !== a && a.setAttribute("value", "" + b);
    } } },
    xj = A.injection.HAS_STRING_BOOLEAN_VALUE,
    yj = { xlink: "http://www.w3.org/1999/xlink", xml: "http://www.w3.org/XML/1998/namespace" },
    zj = { Properties: { autoReverse: xj, externalResourcesRequired: xj, preserveAlpha: xj }, DOMAttributeNames: { autoReverse: "autoReverse", externalResourcesRequired: "externalResourcesRequired", preserveAlpha: "preserveAlpha" }, DOMAttributeNamespaces: { xlinkActuate: yj.xlink, xlinkArcrole: yj.xlink, xlinkHref: yj.xlink, xlinkRole: yj.xlink,
    xlinkShow: yj.xlink, xlinkTitle: yj.xlink, xlinkType: yj.xlink, xmlBase: yj.xml, xmlLang: yj.xml, xmlSpace: yj.xml } },
    Aj = /[\-\:]([a-z])/g;function Bj(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function (a) {
  var b = a.replace(Aj, Bj);zj.Properties[b] = 0;zj.DOMAttributeNames[b] = a;
});A.injection.injectDOMPropertyConfig(wj);A.injection.injectDOMPropertyConfig(zj);
var Cj = ig.injectInternals,
    Dj = F.ELEMENT_NODE,
    Ej = F.TEXT_NODE,
    Fj = F.COMMENT_NODE,
    Gj = F.DOCUMENT_NODE,
    Hj = F.DOCUMENT_FRAGMENT_NODE,
    Ij = A.ROOT_ATTRIBUTE_NAME,
    Jj = ka.getChildNamespace,
    Kj = N.createElement,
    Lj = N.createTextNode,
    Mj = N.setInitialProperties,
    Nj = N.diffProperties,
    Oj = N.updateProperties,
    Pj = N.diffHydratedProperties,
    Qj = N.diffHydratedText,
    Rj = N.warnForDeletedHydratableElement,
    Sj = N.warnForDeletedHydratableText,
    Tj = N.warnForInsertedHydratedElement,
    Uj = N.warnForInsertedHydratedText,
    Vj = G.precacheFiberNode,
    Wj = G.updateFiberProps;
nb.injection.injectFiberControlledHostComponent(N);Dh._injectFiber(function (a) {
  return Xj.findHostInstance(a);
});var Yj = null,
    Zj = null;function ak(a) {
  return !(!a || a.nodeType !== Dj && a.nodeType !== Gj && a.nodeType !== Hj && (a.nodeType !== Fj || " react-mount-point-unstable " !== a.nodeValue));
}function bk(a) {
  a = a ? a.nodeType === Gj ? a.documentElement : a.firstChild : null;return !(!a || a.nodeType !== Dj || !a.hasAttribute(Ij));
}
var Xj = function (a) {
  var b = a.getPublicInstance;a = hh(a);var c = a.scheduleUpdate,
      d = a.getPriorityContext;return { createContainer: function (a) {
      var b = ee();a = { current: b, containerInfo: a, isScheduled: !1, nextScheduledRoot: null, context: null, pendingContext: null };return b.stateNode = a;
    }, updateContainer: function (a, b, g, h) {
      var e = b.current;g = jh(g);null === b.context ? b.context = g : b.pendingContext = g;b = h;h = d(e, ed.enableAsyncSubtreeAPI && null != a && null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent);
      a = { element: a };kh(e, a, void 0 === b ? null : b, h);c(e, h);
    }, batchedUpdates: a.batchedUpdates, unbatchedUpdates: a.unbatchedUpdates, deferredUpdates: a.deferredUpdates, flushSync: a.flushSync, getPublicRootInstance: function (a) {
      a = a.current;if (!a.child) return null;switch (a.child.tag) {case oh:
          return b(a.child.stateNode);default:
          return a.child.stateNode;}
    }, findHostInstance: function (a) {
      a = ph(a);return null === a ? null : a.stateNode;
    }, findHostInstanceWithNoPortals: function (a) {
      a = qh(a);return null === a ? null : a.stateNode;
    } };
}({ getRootHostContext: function (a) {
    if (a.nodeType === Gj) a = (a = a.documentElement) ? a.namespaceURI : Jj(null, "");else {
      var b = a.nodeType === Fj ? a.parentNode : a;a = b.namespaceURI || null;b = b.tagName;a = Jj(a, b);
    }return a;
  }, getChildHostContext: function (a, b) {
    return Jj(a, b);
  }, getPublicInstance: function (a) {
    return a;
  }, prepareForCommit: function () {
    Yj = M.isEnabled();Zj = zh.getSelectionInformation();M.setEnabled(!1);
  }, resetAfterCommit: function () {
    zh.restoreSelection(Zj);Zj = null;M.setEnabled(Yj);Yj = null;
  }, createInstance: function (a, b, c, d, e) {
    a = Kj(a, b, c, d);Vj(e, a);Wj(a, b);return a;
  }, appendInitialChild: function (a, b) {
    a.appendChild(b);
  }, finalizeInitialChildren: function (a, b, c, d) {
    Mj(a, b, c, d);a: {
      switch (b) {case "button":case "input":case "select":case "textarea":
          a = !!c.autoFocus;break a;}a = !1;
    }return a;
  }, prepareUpdate: function (a, b, c, d, e) {
    return Nj(a, b, c, d, e);
  }, commitMount: function (a) {
    a.focus();
  }, commitUpdate: function (a, b, c, d, e) {
    Wj(a, e);Oj(a, b, c, d, e);
  }, shouldSetTextContent: function (a, b) {
    return "textarea" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && "string" === typeof b.dangerouslySetInnerHTML.__html;
  }, resetTextContent: function (a) {
    a.textContent = "";
  }, shouldDeprioritizeSubtree: function (a, b) {
    return !!b.hidden;
  }, createTextInstance: function (a, b, c, d) {
    a = Lj(a, b);Vj(d, a);return a;
  }, commitTextUpdate: function (a, b, c) {
    a.nodeValue = c;
  }, appendChild: function (a, b) {
    a.appendChild(b);
  }, appendChildToContainer: function (a, b) {
    a.nodeType === Fj ? a.parentNode.insertBefore(b, a) : a.appendChild(b);
  }, insertBefore: function (a, b, c) {
    a.insertBefore(b, c);
  }, insertInContainerBefore: function (a, b, c) {
    a.nodeType === Fj ? a.parentNode.insertBefore(b, c) : a.insertBefore(b, c);
  }, removeChild: function (a, b) {
    a.removeChild(b);
  }, removeChildFromContainer: function (a, b) {
    a.nodeType === Fj ? a.parentNode.removeChild(b) : a.removeChild(b);
  }, canHydrateInstance: function (a, b) {
    return a.nodeType === Dj && b === a.nodeName.toLowerCase();
  }, canHydrateTextInstance: function (a, b) {
    return "" === b ? !1 : a.nodeType === Ej;
  }, getNextHydratableSibling: function (a) {
    for (a = a.nextSibling; a && a.nodeType !== Dj && a.nodeType !== Ej;) a = a.nextSibling;return a;
  }, getFirstHydratableChild: function (a) {
    for (a = a.firstChild; a && a.nodeType !== Dj && a.nodeType !== Ej;) a = a.nextSibling;return a;
  }, hydrateInstance: function (a, b, c, d, e, f) {
    Vj(f, a);Wj(a, c);return Pj(a, b, c, e, d);
  }, hydrateTextInstance: function (a, b, c) {
    Vj(c, a);return Qj(a, b);
  }, didNotHydrateInstance: function (a, b) {
    1 === b.nodeType ? Rj(a, b) : Sj(a, b);
  }, didNotFindHydratableInstance: function (a, b, c) {
    Tj(a, b, c);
  }, didNotFindHydratableTextInstance: function (a, b) {
    Uj(a, b);
  }, scheduleDeferredCallback: dd.rIC, useSyncScheduling: !0 });sb.injection.injectFiberBatchedUpdates(Xj.batchedUpdates);
function ck(a, b, c, d, e) {
  ak(c) ? void 0 : w("200");var f = c._reactRootContainer;if (f) Xj.updateContainer(b, f, a, e);else {
    if (!d && !bk(c)) for (d = void 0; d = c.lastChild;) c.removeChild(d);var g = Xj.createContainer(c);f = c._reactRootContainer = g;Xj.unbatchedUpdates(function () {
      Xj.updateContainer(b, g, a, e);
    });
  }return Xj.getPublicRootInstance(f);
}function dk(a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;ak(b) ? void 0 : w("200");return ne.createPortal(a, b, null, c);
}
var ek = { createPortal: dk, hydrate: function (a, b, c) {
    return ck(null, a, b, !0, c);
  }, render: function (a, b, c) {
    return ck(null, a, b, !1, c);
  }, unstable_renderSubtreeIntoContainer: function (a, b, c, d) {
    null != a && Pa.has(a) ? void 0 : w("38");return ck(a, b, c, !1, d);
  }, unmountComponentAtNode: function (a) {
    ak(a) ? void 0 : w("40");return a._reactRootContainer ? (Xj.unbatchedUpdates(function () {
      ck(null, null, a, !1, function () {
        a._reactRootContainer = null;
      });
    }), !0) : !1;
  }, findDOMNode: Dh, unstable_createPortal: dk, unstable_batchedUpdates: sb.batchedUpdates,
  unstable_deferredUpdates: Xj.deferredUpdates, flushSync: Xj.flushSync, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { EventPluginHub: Jb, EventPluginRegistry: sa, EventPropagators: Th, ReactControlledComponent: nb, ReactDOMComponentTree: G, ReactDOMEventListener: L } };Cj({ findFiberByHostInstance: G.getClosestInstanceFromNode, findHostInstanceByFiber: Xj.findHostInstance, bundleType: 0, version: "16.0.0", rendererPackageName: "react-dom" });module.exports = ek;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/ExecutionEnvironment.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/EventListener.js", function(__filename, __dirname, require, module, exports) {
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var emptyFunction = require('36');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if ('production' !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/shallowEqual.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/containsNode.js", function(__filename, __dirname, require, module, exports) {
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

var isTextNode = require('41');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/isTextNode.js", function(__filename, __dirname, require, module, exports) {
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var isNode = require('43');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/isNode.js", function(__filename, __dirname, require, module, exports) {
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */

function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/focusNode.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/getActiveElement.js", function(__filename, __dirname, require, module, exports) {
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */

function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;
});
__sbPundle.registerModule("$app/node_modules/react-dom/cjs/react-dom.development.js", function(__filename, __dirname, require, module, exports) {
/** @license React v16.0.0
 * react-dom.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ('development' !== "production") {
  (function () {

    'use strict';

    var react = require('359');
    var invariant = require('360');
    var ExecutionEnvironment = require('361');
    var _assign = require('362');
    var EventListener = require('363');
    var require$$0 = require('364');
    var hyphenateStyleName = require('365');
    var emptyFunction = require('366');
    var camelizeStyleName = require('367');
    var performanceNow = require('368');
    var propTypes = require('369');
    var emptyObject = require('370');
    var checkPropTypes = require('371');
    var shallowEqual = require('372');
    var containsNode = require('373');
    var focusNode = require('374');
    var getActiveElement = require('375');

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule reactProdInvariant
     * 
     */

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule checkReact
     * 
     */

    !react ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule DOMNamespaces
     */

    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

    var Namespaces = {
      html: HTML_NAMESPACE,
      mathml: MATH_NAMESPACE,
      svg: SVG_NAMESPACE
    };

    // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
      switch (type) {
        case 'svg':
          return SVG_NAMESPACE;
        case 'math':
          return MATH_NAMESPACE;
        default:
          return HTML_NAMESPACE;
      }
    }

    function getChildNamespace$1(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
        // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
      }
      if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
        // We're leaving SVG.
        return HTML_NAMESPACE;
      }
      // By default, pass namespace below.
      return parentNamespace;
    }

    var Namespaces_1 = Namespaces;
    var getIntrinsicNamespace_1 = getIntrinsicNamespace;
    var getChildNamespace_1 = getChildNamespace$1;

    var DOMNamespaces = {
      Namespaces: Namespaces_1,
      getIntrinsicNamespace: getIntrinsicNamespace_1,
      getChildNamespace: getChildNamespace_1
    };

    /**
     * Injectable ordering of event plugins.
     */
    var eventPluginOrder = null;

    /**
     * Injectable mapping from names to event plugin modules.
     */
    var namesToPlugins = {};

    /**
     * Recomputes the plugin list using the injected plugins and plugin ordering.
     *
     * @private
     */
    function recomputePluginOrdering() {
      if (!eventPluginOrder) {
        // Wait until an `eventPluginOrder` is injected.
        return;
      }
      for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName];
        var pluginIndex = eventPluginOrder.indexOf(pluginName);
        !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
        if (EventPluginRegistry.plugins[pluginIndex]) {
          continue;
        }
        !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
        EventPluginRegistry.plugins[pluginIndex] = pluginModule;
        var publishedEvents = pluginModule.eventTypes;
        for (var eventName in publishedEvents) {
          !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
        }
      }
    }

    /**
     * Publishes an event so that it can be dispatched by the supplied plugin.
     *
     * @param {object} dispatchConfig Dispatch configuration for the event.
     * @param {object} PluginModule Plugin publishing the event.
     * @return {boolean} True if the event was successfully published.
     * @private
     */
    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
      !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
      EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
      if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
            var phasedRegistrationName = phasedRegistrationNames[phaseName];
            publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
          }
        }
        return true;
      } else if (dispatchConfig.registrationName) {
        publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
        return true;
      }
      return false;
    }

    /**
     * Publishes a registration name that is used to identify dispatched events.
     *
     * @param {string} registrationName Registration name to add.
     * @param {object} PluginModule Plugin publishing the event.
     * @private
     */
    function publishRegistrationName(registrationName, pluginModule, eventName) {
      !!EventPluginRegistry.registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
      EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
      EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

      {
        var lowerCasedName = registrationName.toLowerCase();
        EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

        if (registrationName === 'onDoubleClick') {
          EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
        }
      }
    }

    /**
     * Registers plugins so that they can extract and dispatch events.
     *
     * @see {EventPluginHub}
     */
    var EventPluginRegistry = {
      /**
       * Ordered list of injected plugins.
       */
      plugins: [],

      /**
       * Mapping from event name to dispatch config
       */
      eventNameDispatchConfigs: {},

      /**
       * Mapping from registration name to plugin module
       */
      registrationNameModules: {},

      /**
       * Mapping from registration name to event name
       */
      registrationNameDependencies: {},

      /**
       * Mapping from lowercase registration names to the properly cased version,
       * used to warn in the case of missing event handlers. Available
       * only in true.
       * @type {Object}
       */
      possibleRegistrationNames: {},
      // Trust the developer to only use possibleRegistrationNames in true

      /**
       * Injects an ordering of plugins (by plugin name). This allows the ordering
       * to be decoupled from injection of the actual plugins so that ordering is
       * always deterministic regardless of packaging, on-the-fly injection, etc.
       *
       * @param {array} InjectedEventPluginOrder
       * @internal
       * @see {EventPluginHub.injection.injectEventPluginOrder}
       */
      injectEventPluginOrder: function (injectedEventPluginOrder) {
        !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
        // Clone the ordering so it cannot be dynamically mutated.
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      },

      /**
       * Injects plugins to be used by `EventPluginHub`. The plugin names must be
       * in the ordering injected by `injectEventPluginOrder`.
       *
       * Plugins can be injected as part of page initialization or on-the-fly.
       *
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       * @internal
       * @see {EventPluginHub.injection.injectEventPluginsByName}
       */
      injectEventPluginsByName: function (injectedNamesToPlugins) {
        var isOrderingDirty = false;
        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }
          var pluginModule = injectedNamesToPlugins[pluginName];
          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }
        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }
    };

    var EventPluginRegistry_1 = EventPluginRegistry;

    // These attributes should be all lowercase to allow for
    // case insensitive checks
    var RESERVED_PROPS = {
      children: true,
      dangerouslySetInnerHTML: true,
      autoFocus: true,
      defaultValue: true,
      defaultChecked: true,
      innerHTML: true,
      suppressContentEditableWarning: true,
      style: true
    };

    function checkMask(value, bitmask) {
      return (value & bitmask) === bitmask;
    }

    var DOMPropertyInjection = {
      /**
       * Mapping from normalized, camelcased property names to a configuration that
       * specifies how the associated DOM property should be accessed or rendered.
       */
      MUST_USE_PROPERTY: 0x1,
      HAS_BOOLEAN_VALUE: 0x4,
      HAS_NUMERIC_VALUE: 0x8,
      HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
      HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
      HAS_STRING_BOOLEAN_VALUE: 0x40,

      /**
       * Inject some specialized knowledge about the DOM. This takes a config object
       * with the following properties:
       *
       * Properties: object mapping DOM property name to one of the
       * DOMPropertyInjection constants or null. If your attribute isn't in here,
       * it won't get written to the DOM.
       *
       * DOMAttributeNames: object mapping React attribute name to the DOM
       * attribute name. Attribute names not specified use the **lowercase**
       * normalized name.
       *
       * DOMAttributeNamespaces: object mapping React attribute name to the DOM
       * attribute namespace URL. (Attribute names not specified use no namespace.)
       *
       * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
       * Property names not specified use the normalized name.
       *
       * DOMMutationMethods: Properties that require special mutation methods. If
       * `value` is undefined, the mutation method should unset the property.
       *
       * @param {object} domPropertyConfig the config as described above.
       */
      injectDOMPropertyConfig: function (domPropertyConfig) {
        var Injection = DOMPropertyInjection;
        var Properties = domPropertyConfig.Properties || {};
        var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
        var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
        var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

        for (var propName in Properties) {
          !!DOMProperty.properties.hasOwnProperty(propName) ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : void 0;

          var lowerCased = propName.toLowerCase();
          var propConfig = Properties[propName];

          var propertyInfo = {
            attributeName: lowerCased,
            attributeNamespace: null,
            propertyName: propName,
            mutationMethod: null,

            mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
            hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
            hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
            hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
            hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),
            hasStringBooleanValue: checkMask(propConfig, Injection.HAS_STRING_BOOLEAN_VALUE)
          };
          !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : void 0;

          if (DOMAttributeNames.hasOwnProperty(propName)) {
            var attributeName = DOMAttributeNames[propName];

            propertyInfo.attributeName = attributeName;
          }

          if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
            propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
          }

          if (DOMMutationMethods.hasOwnProperty(propName)) {
            propertyInfo.mutationMethod = DOMMutationMethods[propName];
          }

          // Downcase references to whitelist properties to check for membership
          // without case-sensitivity. This allows the whitelist to pick up
          // `allowfullscreen`, which should be written using the property configuration
          // for `allowFullscreen`
          DOMProperty.properties[propName] = propertyInfo;
        }
      }
    };

    /* eslint-disable max-len */
    var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    /* eslint-enable max-len */

    /**
     * DOMProperty exports lookup objects that can be used like functions:
     *
     *   > DOMProperty.isValid['id']
     *   true
     *   > DOMProperty.isValid['foobar']
     *   undefined
     *
     * Although this may be confusing, it performs better in general.
     *
     * @see http://jsperf.com/key-exists
     * @see http://jsperf.com/key-missing
     */
    var DOMProperty = {
      ID_ATTRIBUTE_NAME: 'data-reactid',
      ROOT_ATTRIBUTE_NAME: 'data-reactroot',

      ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
      ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

      /**
       * Map from property "standard name" to an object with info about how to set
       * the property in the DOM. Each object contains:
       *
       * attributeName:
       *   Used when rendering markup or with `*Attribute()`.
       * attributeNamespace
       * propertyName:
       *   Used on DOM node instances. (This includes properties that mutate due to
       *   external factors.)
       * mutationMethod:
       *   If non-null, used instead of the property or `setAttribute()` after
       *   initial render.
       * mustUseProperty:
       *   Whether the property must be accessed and mutated as an object property.
       * hasBooleanValue:
       *   Whether the property should be removed when set to a falsey value.
       * hasNumericValue:
       *   Whether the property must be numeric or parse as a numeric and should be
       *   removed when set to a falsey value.
       * hasPositiveNumericValue:
       *   Whether the property must be positive numeric or parse as a positive
       *   numeric and should be removed when set to a falsey value.
       * hasOverloadedBooleanValue:
       *   Whether the property can be used as a flag as well as with a value.
       *   Removed when strictly equal to false; present without a value when
       *   strictly equal to true; present with a value otherwise.
       */
      properties: {},

      /**
       * Checks whether a property name is a writeable attribute.
       * @method
       */
      shouldSetAttribute: function (name, value) {
        if (DOMProperty.isReservedProp(name)) {
          return false;
        }
        if ((name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
          return false;
        }
        if (value === null) {
          return true;
        }
        switch (typeof value) {
          case 'boolean':
            return DOMProperty.shouldAttributeAcceptBooleanValue(name);
          case 'undefined':
          case 'number':
          case 'string':
          case 'object':
            return true;
          default:
            // function, symbol
            return false;
        }
      },

      getPropertyInfo: function (name) {
        return DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      },
      shouldAttributeAcceptBooleanValue: function (name) {
        if (DOMProperty.isReservedProp(name)) {
          return true;
        }
        var propertyInfo = DOMProperty.getPropertyInfo(name);
        if (propertyInfo) {
          return propertyInfo.hasBooleanValue || propertyInfo.hasStringBooleanValue || propertyInfo.hasOverloadedBooleanValue;
        }
        var prefix = name.toLowerCase().slice(0, 5);
        return prefix === 'data-' || prefix === 'aria-';
      },

      /**
       * Checks to see if a property name is within the list of properties
       * reserved for internal React operations. These properties should
       * not be set on an HTML element.
       *
       * @private
       * @param {string} name
       * @return {boolean} If the name is within reserved props
       */
      isReservedProp: function (name) {
        return RESERVED_PROPS.hasOwnProperty(name);
      },

      injection: DOMPropertyInjection
    };

    var DOMProperty_1 = DOMProperty;

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactDOMComponentFlags
     */

    var ReactDOMComponentFlags = {
      hasCachedChildNodes: 1 << 0
    };

    var ReactDOMComponentFlags_1 = ReactDOMComponentFlags;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactTypeOfWork
     * 
     */

    var ReactTypeOfWork = {
      IndeterminateComponent: 0, // Before we know whether it is functional or class
      FunctionalComponent: 1,
      ClassComponent: 2,
      HostRoot: 3, // Root of a host tree. Could be nested inside another node.
      HostPortal: 4, // A subtree. Could be an entry point to a different renderer.
      HostComponent: 5,
      HostText: 6,
      CoroutineComponent: 7,
      CoroutineHandlerPhase: 8,
      YieldComponent: 9,
      Fragment: 10
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule HTMLNodeType
     */

    /**
     * HTML nodeType values that represent the type of the node
     */

    var HTMLNodeType = {
      ELEMENT_NODE: 1,
      TEXT_NODE: 3,
      COMMENT_NODE: 8,
      DOCUMENT_NODE: 9,
      DOCUMENT_FRAGMENT_NODE: 11
    };

    var HTMLNodeType_1 = HTMLNodeType;

    var HostComponent = ReactTypeOfWork.HostComponent;
    var HostText = ReactTypeOfWork.HostText;

    var ELEMENT_NODE$1 = HTMLNodeType_1.ELEMENT_NODE;
    var COMMENT_NODE$1 = HTMLNodeType_1.COMMENT_NODE;

    var ATTR_NAME = DOMProperty_1.ID_ATTRIBUTE_NAME;
    var Flags = ReactDOMComponentFlags_1;

    var randomKey = Math.random().toString(36).slice(2);

    var internalInstanceKey = '__reactInternalInstance$' + randomKey;

    var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

    /**
     * Check if a given node should be cached.
     */
    function shouldPrecacheNode(node, nodeID) {
      return node.nodeType === ELEMENT_NODE$1 && node.getAttribute(ATTR_NAME) === '' + nodeID || node.nodeType === COMMENT_NODE$1 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === COMMENT_NODE$1 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
    }

    /**
     * Drill down (through composites and empty components) until we get a host or
     * host text component.
     *
     * This is pretty polymorphic but unavoidable with the current structure we have
     * for `_renderedChildren`.
     */
    function getRenderedHostOrTextFromComponent(component) {
      var rendered;
      while (rendered = component._renderedComponent) {
        component = rendered;
      }
      return component;
    }

    /**
     * Populate `_hostNode` on the rendered host/text component with the given
     * DOM node. The passed `inst` can be a composite.
     */
    function precacheNode(inst, node) {
      var hostInst = getRenderedHostOrTextFromComponent(inst);
      hostInst._hostNode = node;
      node[internalInstanceKey] = hostInst;
    }

    function precacheFiberNode$1(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }

    function uncacheNode(inst) {
      var node = inst._hostNode;
      if (node) {
        delete node[internalInstanceKey];
        inst._hostNode = null;
      }
    }

    /**
     * Populate `_hostNode` on each child of `inst`, assuming that the children
     * match up with the DOM (element) children of `node`.
     *
     * We cache entire levels at once to avoid an n^2 problem where we access the
     * children of a node sequentially and have to walk from the start to our target
     * node every time.
     *
     * Since we update `_renderedChildren` and the actual DOM at (slightly)
     * different times, we could race here and see a newer `_renderedChildren` than
     * the DOM nodes we see. To avoid this, ReactMultiChild calls
     * `prepareToManageChildren` before we change `_renderedChildren`, at which
     * time the container's child nodes are always cached (until it unmounts).
     */
    function precacheChildNodes(inst, node) {
      if (inst._flags & Flags.hasCachedChildNodes) {
        return;
      }
      var children = inst._renderedChildren;
      var childNode = node.firstChild;
      outer: for (var name in children) {
        if (!children.hasOwnProperty(name)) {
          continue;
        }
        var childInst = children[name];
        var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
        if (childID === 0) {
          // We're currently unmounting this child in ReactMultiChild; skip it.
          continue;
        }
        // We assume the child nodes are in the same order as the child instances.
        for (; childNode !== null; childNode = childNode.nextSibling) {
          if (shouldPrecacheNode(childNode, childID)) {
            precacheNode(childInst, childNode);
            continue outer;
          }
        }
        // We reached the end of the DOM children without finding an ID match.
        invariant(false, 'Unable to find element with ID %s.', childID);
      }
      inst._flags |= Flags.hasCachedChildNodes;
    }

    /**
     * Given a DOM node, return the closest ReactDOMComponent or
     * ReactDOMTextComponent instance ancestor.
     */
    function getClosestInstanceFromNode(node) {
      if (node[internalInstanceKey]) {
        return node[internalInstanceKey];
      }

      // Walk up the tree until we find an ancestor whose instance we have cached.
      var parents = [];
      while (!node[internalInstanceKey]) {
        parents.push(node);
        if (node.parentNode) {
          node = node.parentNode;
        } else {
          // Top of the tree. This node must not be part of a React tree (or is
          // unmounted, potentially).
          return null;
        }
      }

      var closest;
      var inst = node[internalInstanceKey];
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber, this will always be the deepest root.
        return inst;
      }
      for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
        closest = inst;
        if (parents.length) {
          precacheChildNodes(inst, node);
        }
      }

      return closest;
    }

    /**
     * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
     * instance, or null if the node was not rendered by this React.
     */
    function getInstanceFromNode(node) {
      var inst = node[internalInstanceKey];
      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst;
        } else if (inst._hostNode === node) {
          return inst;
        } else {
          return null;
        }
      }
      inst = getClosestInstanceFromNode(node);
      if (inst != null && inst._hostNode === node) {
        return inst;
      } else {
        return null;
      }
    }

    /**
     * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
     * DOM node.
     */
    function getNodeFromInstance(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
      }

      // Without this first invariant, passing a non-DOM-component triggers the next
      // invariant for a missing parent, which is super confusing.
      !(inst._hostNode !== undefined) ? invariant(false, 'getNodeFromInstance: Invalid argument.') : void 0;

      if (inst._hostNode) {
        return inst._hostNode;
      }

      // Walk up the tree until we find an ancestor whose DOM node we have cached.
      var parents = [];
      while (!inst._hostNode) {
        parents.push(inst);
        !inst._hostParent ? invariant(false, 'React DOM tree root should always have a node reference.') : void 0;
        inst = inst._hostParent;
      }

      // Now parents contains each ancestor that does *not* have a cached native
      // node, and `inst` is the deepest ancestor that does.
      for (; parents.length; inst = parents.pop()) {
        precacheChildNodes(inst, inst._hostNode);
      }

      return inst._hostNode;
    }

    function getFiberCurrentPropsFromNode(node) {
      return node[internalEventHandlersKey] || null;
    }

    function updateFiberProps$1(node, props) {
      node[internalEventHandlersKey] = props;
    }

    var ReactDOMComponentTree = {
      getClosestInstanceFromNode: getClosestInstanceFromNode,
      getInstanceFromNode: getInstanceFromNode,
      getNodeFromInstance: getNodeFromInstance,
      precacheChildNodes: precacheChildNodes,
      precacheNode: precacheNode,
      uncacheNode: uncacheNode,
      precacheFiberNode: precacheFiberNode$1,
      getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
      updateFiberProps: updateFiberProps$1
    };

    var ReactDOMComponentTree_1 = ReactDOMComponentTree;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactInstanceMap
     */

    /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     */

    // TODO: Replace this with ES6: var ReactInstanceMap = new Map();

    var ReactInstanceMap = {
      /**
       * This API should be called `delete` but we'd have to make sure to always
       * transform these to strings for IE support. When this transform is fully
       * supported we can rename it.
       */
      remove: function (key) {
        key._reactInternalFiber = undefined;
      },

      get: function (key) {
        return key._reactInternalFiber;
      },

      has: function (key) {
        return key._reactInternalFiber !== undefined;
      },

      set: function (key, value) {
        key._reactInternalFiber = value;
      }
    };

    var ReactInstanceMap_1 = ReactInstanceMap;

    var ReactInternals = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    var ReactGlobalSharedState = {
      ReactCurrentOwner: ReactInternals.ReactCurrentOwner
    };

    {
      _assign(ReactGlobalSharedState, {
        ReactComponentTreeHook: ReactInternals.ReactComponentTreeHook,
        ReactDebugCurrentFrame: ReactInternals.ReactDebugCurrentFrame
      });
    }

    var ReactGlobalSharedState_1 = ReactGlobalSharedState;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule getComponentName
     * 
     */

    function getComponentName(instanceOrFiber) {
      if (typeof instanceOrFiber.getName === 'function') {
        // Stack reconciler
        var instance = instanceOrFiber;
        return instance.getName();
      }
      if (typeof instanceOrFiber.tag === 'number') {
        // Fiber reconciler
        var fiber = instanceOrFiber;
        var type = fiber.type;

        if (typeof type === 'string') {
          return type;
        }
        if (typeof type === 'function') {
          return type.displayName || type.name;
        }
      }
      return null;
    }

    var getComponentName_1 = getComponentName;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactTypeOfSideEffect
     * 
     */

    var ReactTypeOfSideEffect = {
      // Don't change these two values:
      NoEffect: 0, //           0b00000000
      PerformedWork: 1, //      0b00000001
      // You can change the rest (and add more).
      Placement: 2, //          0b00000010
      Update: 4, //             0b00000100
      PlacementAndUpdate: 6, // 0b00000110
      Deletion: 8, //           0b00001000
      ContentReset: 16, //      0b00010000
      Callback: 32, //          0b00100000
      Err: 64, //               0b01000000
      Ref: 128 };

    var ReactCurrentOwner = ReactGlobalSharedState_1.ReactCurrentOwner;

    {
      var warning$1 = require$$0;
    }

    var ClassComponent = ReactTypeOfWork.ClassComponent;
    var HostComponent$1 = ReactTypeOfWork.HostComponent;
    var HostRoot$1 = ReactTypeOfWork.HostRoot;
    var HostPortal = ReactTypeOfWork.HostPortal;
    var HostText$1 = ReactTypeOfWork.HostText;

    var NoEffect = ReactTypeOfSideEffect.NoEffect;
    var Placement = ReactTypeOfSideEffect.Placement;

    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;

    function isFiberMountedImpl(fiber) {
      var node = fiber;
      if (!fiber.alternate) {
        // If there is no alternate, this might be a new tree that isn't inserted
        // yet. If it is, then it will have a pending insertion effect on it.
        if ((node.effectTag & Placement) !== NoEffect) {
          return MOUNTING;
        }
        while (node['return']) {
          node = node['return'];
          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }
        }
      } else {
        while (node['return']) {
          node = node['return'];
        }
      }
      if (node.tag === HostRoot$1) {
        // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return MOUNTED;
      }
      // If we didn't hit the root, that means that we're in an disconnected tree
      // that has been unmounted.
      return UNMOUNTED;
    }
    var isFiberMounted = function (fiber) {
      return isFiberMountedImpl(fiber) === MOUNTED;
    };

    var isMounted = function (component) {
      {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          warning$1(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName_1(ownerFiber) || 'A component');
          instance._warnedAboutRefsInRender = true;
        }
      }

      var fiber = ReactInstanceMap_1.get(component);
      if (!fiber) {
        return false;
      }
      return isFiberMountedImpl(fiber) === MOUNTED;
    };

    function assertIsMounted(fiber) {
      !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        // If there is no alternate, then we only need to check if it is mounted.
        var state = isFiberMountedImpl(fiber);
        !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
        if (state === MOUNTING) {
          return null;
        }
        return fiber;
      }
      // If we have two possible branches, we'll walk backwards up to the root
      // to see what path the root points to. On the way we may hit one of the
      // special cases and we'll deal with them.
      var a = fiber;
      var b = alternate;
      while (true) {
        var parentA = a['return'];
        var parentB = parentA ? parentA.alternate : null;
        if (!parentA || !parentB) {
          // We're at the root.
          break;
        }

        // If both copies of the parent fiber point to the same child, we can
        // assume that the child is current. This happens when we bailout on low
        // priority: the bailed out fiber's child reuses the current child.
        if (parentA.child === parentB.child) {
          var child = parentA.child;
          while (child) {
            if (child === a) {
              // We've determined that A is the current branch.
              assertIsMounted(parentA);
              return fiber;
            }
            if (child === b) {
              // We've determined that B is the current branch.
              assertIsMounted(parentA);
              return alternate;
            }
            child = child.sibling;
          }
          // We should never have an alternate for any mounting node. So the only
          // way this could possibly happen is if this was unmounted, if at all.
          invariant(false, 'Unable to find node on an unmounted component.');
        }

        if (a['return'] !== b['return']) {
          // The return pointer of A and the return pointer of B point to different
          // fibers. We assume that return pointers never criss-cross, so A must
          // belong to the child set of A.return, and B must belong to the child
          // set of B.return.
          a = parentA;
          b = parentB;
        } else {
          // The return pointers point to the same fiber. We'll have to use the
          // default, slow path: scan the child sets of each parent alternate to see
          // which child belongs to which set.
          //
          // Search parent A's child set
          var didFindChild = false;
          var _child = parentA.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            // Search parent B's child set
            _child = parentB.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
          }
        }

        !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      }
      // If the root is not a host container, we're in a disconnected tree. I.e.
      // unmounted.
      !(a.tag === HostRoot$1) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
      if (a.stateNode.current === a) {
        // We've determined that A is the current branch.
        return fiber;
      }
      // Otherwise B has to be current branch.
      return alternate;
    }
    var findCurrentFiberUsingSlowPath_1 = findCurrentFiberUsingSlowPath;

    var findCurrentHostFiber = function (parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      if (!currentParent) {
        return null;
      }

      // Next we'll drill down this component to find the first HostComponent/Text.
      var node = currentParent;
      while (true) {
        if (node.tag === HostComponent$1 || node.tag === HostText$1) {
          return node;
        } else if (node.child) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }
        if (node === currentParent) {
          return null;
        }
        while (!node.sibling) {
          if (!node['return'] || node['return'] === currentParent) {
            return null;
          }
          node = node['return'];
        }
        node.sibling['return'] = node['return'];
        node = node.sibling;
      }
      // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable
      return null;
    };

    var findCurrentHostFiberWithNoPortals = function (parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      if (!currentParent) {
        return null;
      }

      // Next we'll drill down this component to find the first HostComponent/Text.
      var node = currentParent;
      while (true) {
        if (node.tag === HostComponent$1 || node.tag === HostText$1) {
          return node;
        } else if (node.child && node.tag !== HostPortal) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }
        if (node === currentParent) {
          return null;
        }
        while (!node.sibling) {
          if (!node['return'] || node['return'] === currentParent) {
            return null;
          }
          node = node['return'];
        }
        node.sibling['return'] = node['return'];
        node = node.sibling;
      }
      // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable
      return null;
    };

    var ReactFiberTreeReflection = {
      isFiberMounted: isFiberMounted,
      isMounted: isMounted,
      findCurrentFiberUsingSlowPath: findCurrentFiberUsingSlowPath_1,
      findCurrentHostFiber: findCurrentHostFiber,
      findCurrentHostFiberWithNoPortals: findCurrentHostFiberWithNoPortals
    };

    var ReactErrorUtils = {
      // Used by Fiber to simulate a try-catch.
      _caughtError: null,
      _hasCaughtError: false,

      // Used by event system to capture/rethrow the first error.
      _rethrowError: null,
      _hasRethrowError: false,

      injection: {
        injectErrorUtils: function (injectedErrorUtils) {
          !(typeof injectedErrorUtils.invokeGuardedCallback === 'function') ? invariant(false, 'Injected invokeGuardedCallback() must be a function.') : void 0;
          invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
        }
      },

      /**
       * Call a function while guarding against errors that happens within it.
       * Returns an error if it throws, otherwise null.
       *
       * In production, this is implemented using a try-catch. The reason we don't
       * use a try-catch directly is so that we can swap out a different
       * implementation in DEV mode.
       *
       * @param {String} name of the guard to use for logging or debugging
       * @param {Function} func The function to invoke
       * @param {*} context The context to use when calling the function
       * @param {...*} args Arguments for function
       */
      invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(ReactErrorUtils, arguments);
      },

      /**
       * Same as invokeGuardedCallback, but instead of returning an error, it stores
       * it in a global so it can be rethrown by `rethrowCaughtError` later.
       * TODO: See if _caughtError and _rethrowError can be unified.
       *
       * @param {String} name of the guard to use for logging or debugging
       * @param {Function} func The function to invoke
       * @param {*} context The context to use when calling the function
       * @param {...*} args Arguments for function
       */
      invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {
        ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
        if (ReactErrorUtils.hasCaughtError()) {
          var error = ReactErrorUtils.clearCaughtError();
          if (!ReactErrorUtils._hasRethrowError) {
            ReactErrorUtils._hasRethrowError = true;
            ReactErrorUtils._rethrowError = error;
          }
        }
      },

      /**
       * During execution of guarded functions we will capture the first error which
       * we will rethrow to be handled by the top level error handler.
       */
      rethrowCaughtError: function () {
        return rethrowCaughtError.apply(ReactErrorUtils, arguments);
      },

      hasCaughtError: function () {
        return ReactErrorUtils._hasCaughtError;
      },

      clearCaughtError: function () {
        if (ReactErrorUtils._hasCaughtError) {
          var error = ReactErrorUtils._caughtError;
          ReactErrorUtils._caughtError = null;
          ReactErrorUtils._hasCaughtError = false;
          return error;
        } else {
          invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
        }
      }
    };

    var invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {
      ReactErrorUtils._hasCaughtError = false;
      ReactErrorUtils._caughtError = null;
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error) {
        ReactErrorUtils._caughtError = error;
        ReactErrorUtils._hasCaughtError = true;
      }
    };

    {
      // In DEV mode, we swap out invokeGuardedCallback for a special version
      // that plays more nicely with the browser's DevTools. The idea is to preserve
      // "Pause on exceptions" behavior. Because React wraps all user-provided
      // functions in invokeGuardedCallback, and the production version of
      // invokeGuardedCallback uses a try-catch, all user exceptions are treated
      // like caught exceptions, and the DevTools won't pause unless the developer
      // takes the extra step of enabling pause on caught exceptions. This is
      // untintuitive, though, because even though React has caught the error, from
      // the developer's perspective, the error is uncaught.
      //
      // To preserve the expected "Pause on exceptions" behavior, we don't use a
      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
      // DOM node, and call the user-provided callback from inside an event handler
      // for that fake event. If the callback throws, the error is "captured" using
      // a global event handler. But because the error happens in a different
      // event loop context, it does not interrupt the normal program flow.
      // Effectively, this gives us try-catch behavior without actually using
      // try-catch. Neat!

      // Check that the browser supports the APIs we need to implement our special
      // DEV version of invokeGuardedCallback
      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');

        var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
          // Keeps track of whether the user-provided callback threw an error. We
          // set this to true at the beginning, then set it to false right after
          // calling the function. If the function errors, `didError` will never be
          // set to false. This strategy works even if the browser is flaky and
          // fails to call our global error handler, because it doesn't rely on
          // the error event at all.
          var didError = true;

          // Create an event handler for our fake event. We will synchronously
          // dispatch our fake event using `dispatchEvent`. Inside the handler, we
          // call the user-provided callback.
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback() {
            // We immediately remove the callback from event listeners so that
            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
            // nested call would trigger the fake event handlers of any call higher
            // in the stack.
            fakeNode.removeEventListener(evtType, callCallback, false);
            func.apply(context, funcArgs);
            didError = false;
          }

          // Create a global error event handler. We use this to capture the value
          // that was thrown. It's possible that this error handler will fire more
          // than once; for example, if non-React code also calls `dispatchEvent`
          // and a handler for that event throws. We should be resilient to most of
          // those cases. Even if our error event handler fires more than once, the
          // last error event is always used. If the callback actually does error,
          // we know that the last error event is the correct one, because it's not
          // possible for anything else to have happened in between our callback
          // erroring and the code that follows the `dispatchEvent` call below. If
          // the callback doesn't error, but the error event was fired, we know to
          // ignore it because `didError` will be false, as described above.
          var error = void 0;
          // Use this to track whether the error event is ever called.
          var didSetError = false;
          var isCrossOriginError = false;

          function onError(event) {
            error = event.error;
            didSetError = true;
            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }
          }

          // Create a fake event type.
          var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

          // Attach our event handlers
          window.addEventListener('error', onError);
          fakeNode.addEventListener(evtType, callCallback, false);

          // Synchronously dispatch our fake event. If the user-provided function
          // errors, it will trigger our global error handler.
          var evt = document.createEvent('Event');
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);

          if (didError) {
            if (!didSetError) {
              // The callback errored, but the error event never fired.
              error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
            }
            ReactErrorUtils._hasCaughtError = true;
            ReactErrorUtils._caughtError = error;
          } else {
            ReactErrorUtils._hasCaughtError = false;
            ReactErrorUtils._caughtError = null;
          }

          // Remove our event listeners
          window.removeEventListener('error', onError);
        };

        invokeGuardedCallback = invokeGuardedCallbackDev;
      }
    }

    var rethrowCaughtError = function () {
      if (ReactErrorUtils._hasRethrowError) {
        var error = ReactErrorUtils._rethrowError;
        ReactErrorUtils._rethrowError = null;
        ReactErrorUtils._hasRethrowError = false;
        throw error;
      }
    };

    var ReactErrorUtils_1 = ReactErrorUtils;

    {
      var warning$2 = require$$0;
    }

    /**
     * Injected dependencies:
     */

    /**
     * - `ComponentTree`: [required] Module that can convert between React instances
     *   and actual node references.
     */
    var ComponentTree;
    var injection = {
      injectComponentTree: function (Injected) {
        ComponentTree = Injected;
        {
          warning$2(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
        }
      }
    };

    function isEndish(topLevelType) {
      return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
    }

    function isMoveish(topLevelType) {
      return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
    }
    function isStartish(topLevelType) {
      return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
    }

    var validateEventDispatches;
    {
      validateEventDispatches = function (event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;

        var listenersIsArr = Array.isArray(dispatchListeners);
        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

        var instancesIsArr = Array.isArray(dispatchInstances);
        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

        warning$2(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
      };
    }

    /**
     * Dispatch the event to the listener.
     * @param {SyntheticEvent} event SyntheticEvent to handle
     * @param {boolean} simulated If the event is simulated (changes exn behavior)
     * @param {function} listener Application-level callback
     * @param {*} inst Internal component instance
     */
    function executeDispatch(event, simulated, listener, inst) {
      var type = event.type || 'unknown-event';
      event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
      ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }

    /**
     * Standard/simple iteration through an event's collected dispatches.
     */
    function executeDispatchesInOrder(event, simulated) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      {
        validateEventDispatches(event);
      }
      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          }
          // Listeners and Instances are two parallel arrays that are always in sync.
          executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
        }
      } else if (dispatchListeners) {
        executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
      }
      event._dispatchListeners = null;
      event._dispatchInstances = null;
    }

    /**
     * Standard/simple iteration through an event's collected dispatches, but stops
     * at the first dispatch execution returning true, and returns that id.
     *
     * @return {?string} id of the first dispatch execution who's listener returns
     * true, or null if no listener returned true.
     */
    function executeDispatchesInOrderStopAtTrueImpl(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      {
        validateEventDispatches(event);
      }
      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          }
          // Listeners and Instances are two parallel arrays that are always in sync.
          if (dispatchListeners[i](event, dispatchInstances[i])) {
            return dispatchInstances[i];
          }
        }
      } else if (dispatchListeners) {
        if (dispatchListeners(event, dispatchInstances)) {
          return dispatchInstances;
        }
      }
      return null;
    }

    /**
     * @see executeDispatchesInOrderStopAtTrueImpl
     */
    function executeDispatchesInOrderStopAtTrue(event) {
      var ret = executeDispatchesInOrderStopAtTrueImpl(event);
      event._dispatchInstances = null;
      event._dispatchListeners = null;
      return ret;
    }

    /**
     * Execution of a "direct" dispatch - there must be at most one dispatch
     * accumulated on the event or it is considered an error. It doesn't really make
     * sense for an event with multiple dispatches (bubbled) to keep track of the
     * return values at each dispatch execution, but it does tend to make sense when
     * dealing with "direct" dispatches.
     *
     * @return {*} The return value of executing the single dispatch.
     */
    function executeDirectDispatch(event) {
      {
        validateEventDispatches(event);
      }
      var dispatchListener = event._dispatchListeners;
      var dispatchInstance = event._dispatchInstances;
      !!Array.isArray(dispatchListener) ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : void 0;
      event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
      var res = dispatchListener ? dispatchListener(event) : null;
      event.currentTarget = null;
      event._dispatchListeners = null;
      event._dispatchInstances = null;
      return res;
    }

    /**
     * @param {SyntheticEvent} event
     * @return {boolean} True iff number of dispatches accumulated is greater than 0.
     */
    function hasDispatches(event) {
      return !!event._dispatchListeners;
    }

    /**
     * General utilities that are useful in creating custom Event Plugins.
     */
    var EventPluginUtils = {
      isEndish: isEndish,
      isMoveish: isMoveish,
      isStartish: isStartish,

      executeDirectDispatch: executeDirectDispatch,
      executeDispatchesInOrder: executeDispatchesInOrder,
      executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
      hasDispatches: hasDispatches,

      getFiberCurrentPropsFromNode: function (node) {
        return ComponentTree.getFiberCurrentPropsFromNode(node);
      },
      getInstanceFromNode: function (node) {
        return ComponentTree.getInstanceFromNode(node);
      },
      getNodeFromInstance: function (node) {
        return ComponentTree.getNodeFromInstance(node);
      },

      injection: injection
    };

    var EventPluginUtils_1 = EventPluginUtils;

    // Use to restore controlled state after a change event has fired.

    var fiberHostComponent = null;

    var ReactControlledComponentInjection = {
      injectFiberControlledHostComponent: function (hostComponentImpl) {
        // The fiber implementation doesn't use dynamic dispatch so we need to
        // inject the implementation.
        fiberHostComponent = hostComponentImpl;
      }
    };

    var restoreTarget = null;
    var restoreQueue = null;

    function restoreStateOfTarget(target) {
      // We perform this translation at the end of the event loop so that we
      // always receive the correct fiber here
      var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
      if (!internalInstance) {
        // Unmounted
        return;
      }
      if (typeof internalInstance.tag === 'number') {
        !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
        fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        return;
      }
      !(typeof internalInstance.restoreControlledState === 'function') ? invariant(false, 'The internal instance must be a React host component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      // If it is not a Fiber, we can just use dynamic dispatch.
      internalInstance.restoreControlledState();
    }

    var ReactControlledComponent = {
      injection: ReactControlledComponentInjection,

      enqueueStateRestore: function (target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      },
      restoreStateIfNeeded: function () {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;

        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i = 0; i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }
    };

    var ReactControlledComponent_1 = ReactControlledComponent;

    // Used as a way to call batchedUpdates when we don't know if we're in a Fiber
    // or Stack context. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.

    // Defaults
    var stackBatchedUpdates = function (fn, a, b, c, d, e) {
      return fn(a, b, c, d, e);
    };
    var fiberBatchedUpdates = function (fn, bookkeeping) {
      return fn(bookkeeping);
    };

    function performFiberBatchedUpdates(fn, bookkeeping) {
      // If we have Fiber loaded, we need to wrap this in a batching call so that
      // Fiber can apply its default priority for this call.
      return fiberBatchedUpdates(fn, bookkeeping);
    }
    function batchedUpdates(fn, bookkeeping) {
      // We first perform work with the stack batching strategy, by passing our
      // indirection to it.
      return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
    }

    var isNestingBatched = false;
    function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
      if (isNestingBatched) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state. Therefore, we add the target to
        // a queue of work.
        return batchedUpdates(fn, bookkeeping);
      }
      isNestingBatched = true;
      try {
        return batchedUpdates(fn, bookkeeping);
      } finally {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        isNestingBatched = false;
        ReactControlledComponent_1.restoreStateIfNeeded();
      }
    }

    var ReactGenericBatchingInjection = {
      injectStackBatchedUpdates: function (_batchedUpdates) {
        stackBatchedUpdates = _batchedUpdates;
      },
      injectFiberBatchedUpdates: function (_batchedUpdates) {
        fiberBatchedUpdates = _batchedUpdates;
      }
    };

    var ReactGenericBatching = {
      batchedUpdates: batchedUpdatesWithControlledComponents,
      injection: ReactGenericBatchingInjection
    };

    var ReactGenericBatching_1 = ReactGenericBatching;

    var TEXT_NODE$1 = HTMLNodeType_1.TEXT_NODE;

    /**
     * Gets the target node from a native browser event by accounting for
     * inconsistencies in browser DOM APIs.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {DOMEventTarget} Target node.
     */

    function getEventTarget(nativeEvent) {
      var target = nativeEvent.target || nativeEvent.srcElement || window;

      // Normalize SVG <use> element events #4963
      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      }

      // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html
      return target.nodeType === TEXT_NODE$1 ? target.parentNode : target;
    }

    var getEventTarget_1 = getEventTarget;

    var HostRoot = ReactTypeOfWork.HostRoot;

    var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
    var callbackBookkeepingPool = [];

    /**
     * Find the deepest React component completely containing the root of the
     * passed-in instance (for use when entire React trees are nested within each
     * other). If React trees are not nested, returns null.
     */
    function findRootContainerNode(inst) {
      // TODO: It may be a good idea to cache this to prevent unnecessary DOM
      // traversal, but caching is difficult to do correctly without using a
      // mutation observer to listen for all DOM changes.
      if (typeof inst.tag === 'number') {
        while (inst['return']) {
          inst = inst['return'];
        }
        if (inst.tag !== HostRoot) {
          // This can happen if we're in a detached tree.
          return null;
        }
        return inst.stateNode.containerInfo;
      } else {
        while (inst._hostParent) {
          inst = inst._hostParent;
        }
        var rootNode = ReactDOMComponentTree_1.getNodeFromInstance(inst);
        return rootNode.parentNode;
      }
    }

    // Used to store ancestor hierarchy in top level callback
    function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
      if (callbackBookkeepingPool.length) {
        var instance = callbackBookkeepingPool.pop();
        instance.topLevelType = topLevelType;
        instance.nativeEvent = nativeEvent;
        instance.targetInst = targetInst;
        return instance;
      }
      return {
        topLevelType: topLevelType,
        nativeEvent: nativeEvent,
        targetInst: targetInst,
        ancestors: []
      };
    }

    function releaseTopLevelCallbackBookKeeping(instance) {
      instance.topLevelType = null;
      instance.nativeEvent = null;
      instance.targetInst = null;
      instance.ancestors.length = 0;
      if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
        callbackBookkeepingPool.push(instance);
      }
    }

    function handleTopLevelImpl(bookKeeping) {
      var targetInst = bookKeeping.targetInst;

      // Loop through the hierarchy, in case there's any nested components.
      // It's important that we build the array of ancestors before calling any
      // event handlers, because event handlers can modify the DOM, leading to
      // inconsistencies with ReactMount's node cache. See #1105.
      var ancestor = targetInst;
      do {
        if (!ancestor) {
          bookKeeping.ancestors.push(ancestor);
          break;
        }
        var root = findRootContainerNode(ancestor);
        if (!root) {
          break;
        }
        bookKeeping.ancestors.push(ancestor);
        ancestor = ReactDOMComponentTree_1.getClosestInstanceFromNode(root);
      } while (ancestor);

      for (var i = 0; i < bookKeeping.ancestors.length; i++) {
        targetInst = bookKeeping.ancestors[i];
        ReactDOMEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget_1(bookKeeping.nativeEvent));
      }
    }

    var ReactDOMEventListener = {
      _enabled: true,
      _handleTopLevel: null,

      setHandleTopLevel: function (handleTopLevel) {
        ReactDOMEventListener._handleTopLevel = handleTopLevel;
      },

      setEnabled: function (enabled) {
        ReactDOMEventListener._enabled = !!enabled;
      },

      isEnabled: function () {
        return ReactDOMEventListener._enabled;
      },

      /**
       * Traps top-level events by using event bubbling.
       *
       * @param {string} topLevelType Record from `BrowserEventConstants`.
       * @param {string} handlerBaseName Event name (e.g. "click").
       * @param {object} element Element on which to attach listener.
       * @return {?object} An object with a remove function which will forcefully
       *                  remove the listener.
       * @internal
       */
      trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
        if (!element) {
          return null;
        }
        return EventListener.listen(element, handlerBaseName, ReactDOMEventListener.dispatchEvent.bind(null, topLevelType));
      },

      /**
       * Traps a top-level event by using event capturing.
       *
       * @param {string} topLevelType Record from `BrowserEventConstants`.
       * @param {string} handlerBaseName Event name (e.g. "click").
       * @param {object} element Element on which to attach listener.
       * @return {?object} An object with a remove function which will forcefully
       *                  remove the listener.
       * @internal
       */
      trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
        if (!element) {
          return null;
        }
        return EventListener.capture(element, handlerBaseName, ReactDOMEventListener.dispatchEvent.bind(null, topLevelType));
      },

      dispatchEvent: function (topLevelType, nativeEvent) {
        if (!ReactDOMEventListener._enabled) {
          return;
        }

        var nativeEventTarget = getEventTarget_1(nativeEvent);
        var targetInst = ReactDOMComponentTree_1.getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null && typeof targetInst.tag === 'number' && !ReactFiberTreeReflection.isFiberMounted(targetInst)) {
          // If we get an event (ex: img onload) before committing that
          // component's mount, ignore it for now (that is, treat it as if it was an
          // event on a non-React tree). We might also consider queueing events and
          // dispatching them after the mount.
          targetInst = null;
        }

        var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

        try {
          // Event queue being processed in the same cycle allows
          // `preventDefault`.
          ReactGenericBatching_1.batchedUpdates(handleTopLevelImpl, bookKeeping);
        } finally {
          releaseTopLevelCallbackBookKeeping(bookKeeping);
        }
      }
    };

    var ReactDOMEventListener_1 = ReactDOMEventListener;

    /**
     * Accumulates items that must not be null or undefined into the first one. This
     * is used to conserve memory by avoiding array allocations, and thus sacrifices
     * API cleanness. Since `current` can be null before being passed in and not
     * null after this function, make sure to assign it back to `current`:
     *
     * `a = accumulateInto(a, b);`
     *
     * This API should be sparingly used. Try `accumulate` for something cleaner.
     *
     * @return {*|array<*>} An accumulation of items.
     */

    function accumulateInto(current, next) {
      !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

      if (current == null) {
        return next;
      }

      // Both are not empty. Warning: Never call x.concat(y) when you are not
      // certain that x is an Array (x could be a string with concat method).
      if (Array.isArray(current)) {
        if (Array.isArray(next)) {
          current.push.apply(current, next);
          return current;
        }
        current.push(next);
        return current;
      }

      if (Array.isArray(next)) {
        // A bit too dangerous to mutate `next`.
        return [current].concat(next);
      }

      return [current, next];
    }

    var accumulateInto_1 = accumulateInto;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule forEachAccumulated
     * 
     */

    /**
     * @param {array} arr an "accumulation" of items which is either an Array or
     * a single item. Useful when paired with the `accumulate` module. This is a
     * simple utility that allows us to reason about a collection of items, but
     * handling the case when there is exactly one item (and we do not need to
     * allocate an array).
     * @param {function} cb Callback invoked with each element or a collection.
     * @param {?} [scope] Scope used as `this` in a callback.
     */

    function forEachAccumulated(arr, cb, scope) {
      if (Array.isArray(arr)) {
        arr.forEach(cb, scope);
      } else if (arr) {
        cb.call(scope, arr);
      }
    }

    var forEachAccumulated_1 = forEachAccumulated;

    /**
     * Internal queue of events that have accumulated their dispatches and are
     * waiting to have their dispatches executed.
     */
    var eventQueue = null;

    /**
     * Dispatches an event and releases it back into the pool, unless persistent.
     *
     * @param {?object} event Synthetic event to be dispatched.
     * @param {boolean} simulated If the event is simulated (changes exn behavior)
     * @private
     */
    var executeDispatchesAndRelease = function (event, simulated) {
      if (event) {
        EventPluginUtils_1.executeDispatchesInOrder(event, simulated);

        if (!event.isPersistent()) {
          event.constructor.release(event);
        }
      }
    };
    var executeDispatchesAndReleaseSimulated = function (e) {
      return executeDispatchesAndRelease(e, true);
    };
    var executeDispatchesAndReleaseTopLevel = function (e) {
      return executeDispatchesAndRelease(e, false);
    };

    function isInteractive(tag) {
      return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }

    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
          return !!(props.disabled && isInteractive(type));
        default:
          return false;
      }
    }

    /**
     * This is a unified interface for event plugins to be installed and configured.
     *
     * Event plugins can implement the following properties:
     *
     *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
     *     Required. When a top-level event is fired, this method is expected to
     *     extract synthetic events that will in turn be queued and dispatched.
     *
     *   `eventTypes` {object}
     *     Optional, plugins that fire events must publish a mapping of registration
     *     names that are used to register listeners. Values of this mapping must
     *     be objects that contain `registrationName` or `phasedRegistrationNames`.
     *
     *   `executeDispatch` {function(object, function, string)}
     *     Optional, allows plugins to override how an event gets dispatched. By
     *     default, the listener is simply invoked.
     *
     * Each plugin that is injected into `EventsPluginHub` is immediately operable.
     *
     * @public
     */
    var EventPluginHub = {
      /**
       * Methods for injecting dependencies.
       */
      injection: {
        /**
         * @param {array} InjectedEventPluginOrder
         * @public
         */
        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,

        /**
         * @param {object} injectedNamesToPlugins Map from names to plugin modules.
         */
        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
      },

      /**
       * @param {object} inst The instance, which is the source of events.
       * @param {string} registrationName Name of listener (e.g. `onClick`).
       * @return {?function} The stored callback.
       */
      getListener: function (inst, registrationName) {
        var listener;

        // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
        // live here; needs to be moved to a better place soon
        if (typeof inst.tag === 'number') {
          var stateNode = inst.stateNode;
          if (!stateNode) {
            // Work in progress (ex: onload events in incremental mode).
            return null;
          }
          var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
          if (!props) {
            // Work in progress.
            return null;
          }
          listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
        } else {
          var currentElement = inst._currentElement;
          if (typeof currentElement === 'string' || typeof currentElement === 'number') {
            // Text node, let it bubble through.
            return null;
          }
          if (!inst._rootNodeID) {
            // If the instance is already unmounted, we have no listeners.
            return null;
          }
          var _props = currentElement.props;
          listener = _props[registrationName];
          if (shouldPreventMouseEvent(registrationName, currentElement.type, _props)) {
            return null;
          }
        }

        !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
        return listener;
      },

      /**
       * Allows registered plugins an opportunity to extract events from top-level
       * native browser events.
       *
       * @return {*} An accumulation of synthetic events.
       * @internal
       */
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events;
        var plugins = EventPluginRegistry_1.plugins;
        for (var i = 0; i < plugins.length; i++) {
          // Not every plugin in the ordering may be loaded at runtime.
          var possiblePlugin = plugins[i];
          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            if (extractedEvents) {
              events = accumulateInto_1(events, extractedEvents);
            }
          }
        }
        return events;
      },

      /**
       * Enqueues a synthetic event that should be dispatched when
       * `processEventQueue` is invoked.
       *
       * @param {*} events An accumulation of synthetic events.
       * @internal
       */
      enqueueEvents: function (events) {
        if (events) {
          eventQueue = accumulateInto_1(eventQueue, events);
        }
      },

      /**
       * Dispatches all synthetic events on the event queue.
       *
       * @internal
       */
      processEventQueue: function (simulated) {
        // Set `eventQueue` to null before processing it so that we can tell if more
        // events get enqueued while processing.
        var processingEventQueue = eventQueue;
        eventQueue = null;
        if (simulated) {
          forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated);
        } else {
          forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        }
        !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
        // This would be a good time to rethrow if any of the event handlers threw.
        ReactErrorUtils_1.rethrowCaughtError();
      }
    };

    var EventPluginHub_1 = EventPluginHub;

    function runEventQueueInBatch(events) {
      EventPluginHub_1.enqueueEvents(events);
      EventPluginHub_1.processEventQueue(false);
    }

    var ReactEventEmitterMixin = {
      /**
       * Streams a fired top-level event to `EventPluginHub` where plugins have the
       * opportunity to create `ReactEvent`s to be dispatched.
       */
      handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventQueueInBatch(events);
      }
    };

    var ReactEventEmitterMixin_1 = ReactEventEmitterMixin;

    var useHasFeature;
    if (ExecutionEnvironment.canUseDOM) {
      useHasFeature = document.implementation && document.implementation.hasFeature &&
      // always returns true in newer browsers as per the standard.
      // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
      document.implementation.hasFeature('', '') !== true;
    }

    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @param {?boolean} capture Check if the capture phase is supported.
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function isEventSupported(eventNameSuffix, capture) {
      if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
        return false;
      }

      var eventName = 'on' + eventNameSuffix;
      var isSupported = eventName in document;

      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }

      if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
        // This is the only way to test support for the `wheel` event in IE9+.
        isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
      }

      return isSupported;
    }

    var isEventSupported_1 = isEventSupported;

    /**
     * Generate a mapping of standard vendor prefixes using the defined style property and event name.
     *
     * @param {string} styleProp
     * @param {string} eventName
     * @returns {object}
     */
    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};

      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes['Webkit' + styleProp] = 'webkit' + eventName;
      prefixes['Moz' + styleProp] = 'moz' + eventName;
      prefixes['ms' + styleProp] = 'MS' + eventName;
      prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

      return prefixes;
    }

    /**
     * A list of event names to a configurable list of vendor prefixes.
     */
    var vendorPrefixes = {
      animationend: makePrefixMap('Animation', 'AnimationEnd'),
      animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
      animationstart: makePrefixMap('Animation', 'AnimationStart'),
      transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };

    /**
     * Event names that have already been detected and prefixed (if applicable).
     */
    var prefixedEventNames = {};

    /**
     * Element to check for prefixes on.
     */
    var style = {};

    /**
     * Bootstrap if a DOM exists.
     */
    if (ExecutionEnvironment.canUseDOM) {
      style = document.createElement('div').style;

      // On some platforms, in particular some releases of Android 4.x,
      // the un-prefixed "animation" and "transition" properties are defined on the
      // style object but the events that fire will still be prefixed, so we need
      // to check if the un-prefixed events are usable, and if not remove them from the map.
      if (!('AnimationEvent' in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      }

      // Same as above
      if (!('TransitionEvent' in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }

    /**
     * Attempts to determine the correct vendor prefixed event name.
     *
     * @param {string} eventName
     * @returns {string}
     */
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }

      var prefixMap = vendorPrefixes[eventName];

      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }

      return '';
    }

    var getVendorPrefixedEventName_1 = getVendorPrefixedEventName;

    /**
     * Types of raw signals from the browser caught at the top level.
     *
     * For events like 'submit' which don't consistently bubble (which we
     * trap at a lower node than `document`), binding at `document` would
     * cause duplicate events so we don't include them here.
     */
    var topLevelTypes$1 = {
      topAbort: 'abort',
      topAnimationEnd: getVendorPrefixedEventName_1('animationend') || 'animationend',
      topAnimationIteration: getVendorPrefixedEventName_1('animationiteration') || 'animationiteration',
      topAnimationStart: getVendorPrefixedEventName_1('animationstart') || 'animationstart',
      topBlur: 'blur',
      topCancel: 'cancel',
      topCanPlay: 'canplay',
      topCanPlayThrough: 'canplaythrough',
      topChange: 'change',
      topClick: 'click',
      topClose: 'close',
      topCompositionEnd: 'compositionend',
      topCompositionStart: 'compositionstart',
      topCompositionUpdate: 'compositionupdate',
      topContextMenu: 'contextmenu',
      topCopy: 'copy',
      topCut: 'cut',
      topDoubleClick: 'dblclick',
      topDrag: 'drag',
      topDragEnd: 'dragend',
      topDragEnter: 'dragenter',
      topDragExit: 'dragexit',
      topDragLeave: 'dragleave',
      topDragOver: 'dragover',
      topDragStart: 'dragstart',
      topDrop: 'drop',
      topDurationChange: 'durationchange',
      topEmptied: 'emptied',
      topEncrypted: 'encrypted',
      topEnded: 'ended',
      topError: 'error',
      topFocus: 'focus',
      topInput: 'input',
      topKeyDown: 'keydown',
      topKeyPress: 'keypress',
      topKeyUp: 'keyup',
      topLoadedData: 'loadeddata',
      topLoad: 'load',
      topLoadedMetadata: 'loadedmetadata',
      topLoadStart: 'loadstart',
      topMouseDown: 'mousedown',
      topMouseMove: 'mousemove',
      topMouseOut: 'mouseout',
      topMouseOver: 'mouseover',
      topMouseUp: 'mouseup',
      topPaste: 'paste',
      topPause: 'pause',
      topPlay: 'play',
      topPlaying: 'playing',
      topProgress: 'progress',
      topRateChange: 'ratechange',
      topScroll: 'scroll',
      topSeeked: 'seeked',
      topSeeking: 'seeking',
      topSelectionChange: 'selectionchange',
      topStalled: 'stalled',
      topSuspend: 'suspend',
      topTextInput: 'textInput',
      topTimeUpdate: 'timeupdate',
      topToggle: 'toggle',
      topTouchCancel: 'touchcancel',
      topTouchEnd: 'touchend',
      topTouchMove: 'touchmove',
      topTouchStart: 'touchstart',
      topTransitionEnd: getVendorPrefixedEventName_1('transitionend') || 'transitionend',
      topVolumeChange: 'volumechange',
      topWaiting: 'waiting',
      topWheel: 'wheel'
    };

    var BrowserEventConstants = {
      topLevelTypes: topLevelTypes$1
    };

    var BrowserEventConstants_1 = BrowserEventConstants;

    var topLevelTypes = BrowserEventConstants_1.topLevelTypes;

    /**
     * Summary of `ReactBrowserEventEmitter` event handling:
     *
     *  - Top-level delegation is used to trap most native browser events. This
     *    may only occur in the main thread and is the responsibility of
     *    ReactDOMEventListener, which is injected and can therefore support
     *    pluggable event sources. This is the only work that occurs in the main
     *    thread.
     *
     *  - We normalize and de-duplicate events to account for browser quirks. This
     *    may be done in the worker thread.
     *
     *  - Forward these native events (with the associated top-level type used to
     *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
     *    to extract any synthetic events.
     *
     *  - The `EventPluginHub` will then process each event by annotating them with
     *    "dispatches", a sequence of listeners and IDs that care about that event.
     *
     *  - The `EventPluginHub` then dispatches the events.
     *
     * Overview of React and the event system:
     *
     * +------------+    .
     * |    DOM     |    .
     * +------------+    .
     *       |           .
     *       v           .
     * +------------+    .
     * | ReactEvent |    .
     * |  Listener  |    .
     * +------------+    .                         +-----------+
     *       |           .               +--------+|SimpleEvent|
     *       |           .               |         |Plugin     |
     * +-----|------+    .               v         +-----------+
     * |     |      |    .    +--------------+                    +------------+
     * |     +-----------.--->|EventPluginHub|                    |    Event   |
     * |            |    .    |              |     +-----------+  | Propagators|
     * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
     * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
     * |            |    .    |              |     +-----------+  |  utilities |
     * |     +-----------.--->|              |                    +------------+
     * |     |      |    .    +--------------+
     * +-----|------+    .                ^        +-----------+
     *       |           .                |        |Enter/Leave|
     *       +           .                +-------+|Plugin     |
     * +-------------+   .                         +-----------+
     * | application |   .
     * |-------------|   .
     * |             |   .
     * |             |   .
     * +-------------+   .
     *                   .
     *    React Core     .  General Purpose Event Plugin System
     */

    var alreadyListeningTo = {};
    var reactTopListenersCounter = 0;

    /**
     * To ensure no conflicts with other potential React instances on the page
     */
    var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

    function getListeningForDocument(mountAt) {
      // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
      // directly.
      if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
        mountAt[topListenersIDKey] = reactTopListenersCounter++;
        alreadyListeningTo[mountAt[topListenersIDKey]] = {};
      }
      return alreadyListeningTo[mountAt[topListenersIDKey]];
    }

    var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin_1, {
      /**
       * Sets whether or not any created callbacks should be enabled.
       *
       * @param {boolean} enabled True if callbacks should be enabled.
       */
      setEnabled: function (enabled) {
        if (ReactDOMEventListener_1) {
          ReactDOMEventListener_1.setEnabled(enabled);
        }
      },

      /**
       * @return {boolean} True if callbacks are enabled.
       */
      isEnabled: function () {
        return !!(ReactDOMEventListener_1 && ReactDOMEventListener_1.isEnabled());
      },

      /**
       * We listen for bubbled touch events on the document object.
       *
       * Firefox v8.01 (and possibly others) exhibited strange behavior when
       * mounting `onmousemove` events at some node that was not the document
       * element. The symptoms were that if your mouse is not moving over something
       * contained within that mount point (for example on the background) the
       * top-level listeners for `onmousemove` won't be called. However, if you
       * register the `mousemove` on the document object, then it will of course
       * catch all `mousemove`s. This along with iOS quirks, justifies restricting
       * top-level listeners to the document object only, at least for these
       * movement types of events and possibly all events.
       *
       * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
       *
       * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
       * they bubble to document.
       *
       * @param {string} registrationName Name of listener (e.g. `onClick`).
       * @param {object} contentDocumentHandle Document which owns the container
       */
      listenTo: function (registrationName, contentDocumentHandle) {
        var mountAt = contentDocumentHandle;
        var isListening = getListeningForDocument(mountAt);
        var dependencies = EventPluginRegistry_1.registrationNameDependencies[registrationName];

        for (var i = 0; i < dependencies.length; i++) {
          var dependency = dependencies[i];
          if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
            if (dependency === 'topWheel') {
              if (isEventSupported_1('wheel')) {
                ReactDOMEventListener_1.trapBubbledEvent('topWheel', 'wheel', mountAt);
              } else if (isEventSupported_1('mousewheel')) {
                ReactDOMEventListener_1.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
              } else {
                // Firefox needs to capture a different mouse scroll event.
                // @see http://www.quirksmode.org/dom/events/tests/scroll.html
                ReactDOMEventListener_1.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
              }
            } else if (dependency === 'topScroll') {
              ReactDOMEventListener_1.trapCapturedEvent('topScroll', 'scroll', mountAt);
            } else if (dependency === 'topFocus' || dependency === 'topBlur') {
              ReactDOMEventListener_1.trapCapturedEvent('topFocus', 'focus', mountAt);
              ReactDOMEventListener_1.trapCapturedEvent('topBlur', 'blur', mountAt);

              // to make sure blur and focus event listeners are only attached once
              isListening.topBlur = true;
              isListening.topFocus = true;
            } else if (dependency === 'topCancel') {
              if (isEventSupported_1('cancel', true)) {
                ReactDOMEventListener_1.trapCapturedEvent('topCancel', 'cancel', mountAt);
              }
              isListening.topCancel = true;
            } else if (dependency === 'topClose') {
              if (isEventSupported_1('close', true)) {
                ReactDOMEventListener_1.trapCapturedEvent('topClose', 'close', mountAt);
              }
              isListening.topClose = true;
            } else if (topLevelTypes.hasOwnProperty(dependency)) {
              ReactDOMEventListener_1.trapBubbledEvent(dependency, topLevelTypes[dependency], mountAt);
            }

            isListening[dependency] = true;
          }
        }
      },

      isListeningToAllDependencies: function (registrationName, mountAt) {
        var isListening = getListeningForDocument(mountAt);
        var dependencies = EventPluginRegistry_1.registrationNameDependencies[registrationName];
        for (var i = 0; i < dependencies.length; i++) {
          var dependency = dependencies[i];
          if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
            return false;
          }
        }
        return true;
      },

      trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
        return ReactDOMEventListener_1.trapBubbledEvent(topLevelType, handlerBaseName, handle);
      },

      trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
        return ReactDOMEventListener_1.trapCapturedEvent(topLevelType, handlerBaseName, handle);
      }
    });

    var ReactBrowserEventEmitter_1 = ReactBrowserEventEmitter;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactDOMFeatureFlags
     */

    var ReactDOMFeatureFlags = {
      fiberAsyncScheduling: false,
      useFiber: true
    };

    var ReactDOMFeatureFlags_1 = ReactDOMFeatureFlags;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule CSSProperty
     */

    /**
     * CSS properties which accept numbers but are not in units of "px".
     */

    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,

      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };

    /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */
    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }

    /**
     * Support style names that may come passed in prefixed by adding permutations
     * of vendor prefixes.
     */
    var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

    // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });

    /**
     * Most style properties can be unset by doing .style[prop] = '' but IE8
     * doesn't like doing that with shorthand properties so for the properties that
     * IE8 breaks on, which are listed here, we instead unset each of the
     * individual properties. See http://bugs.jquery.com/ticket/12385.
     * The 4-value 'clock' properties like margin, padding, border-width seem to
     * behave without any problems. Curiously, list-style works too without any
     * special prodding.
     */
    var shorthandPropertyExpansions = {
      background: {
        backgroundAttachment: true,
        backgroundColor: true,
        backgroundImage: true,
        backgroundPositionX: true,
        backgroundPositionY: true,
        backgroundRepeat: true
      },
      backgroundPosition: {
        backgroundPositionX: true,
        backgroundPositionY: true
      },
      border: {
        borderWidth: true,
        borderStyle: true,
        borderColor: true
      },
      borderBottom: {
        borderBottomWidth: true,
        borderBottomStyle: true,
        borderBottomColor: true
      },
      borderLeft: {
        borderLeftWidth: true,
        borderLeftStyle: true,
        borderLeftColor: true
      },
      borderRight: {
        borderRightWidth: true,
        borderRightStyle: true,
        borderRightColor: true
      },
      borderTop: {
        borderTopWidth: true,
        borderTopStyle: true,
        borderTopColor: true
      },
      font: {
        fontStyle: true,
        fontVariant: true,
        fontWeight: true,
        fontSize: true,
        lineHeight: true,
        fontFamily: true
      },
      outline: {
        outlineWidth: true,
        outlineStyle: true,
        outlineColor: true
      }
    };

    var CSSProperty = {
      isUnitlessNumber: isUnitlessNumber,
      shorthandPropertyExpansions: shorthandPropertyExpansions
    };

    var CSSProperty_1 = CSSProperty;

    var isUnitlessNumber$1 = CSSProperty_1.isUnitlessNumber;

    /**
     * Convert a value into the proper css writable value. The style name `name`
     * should be logical (no hyphens), as specified
     * in `CSSProperty.isUnitlessNumber`.
     *
     * @param {string} name CSS property name such as `topMargin`.
     * @param {*} value CSS property value such as `10px`.
     * @return {string} Normalized style value with dimensions applied.
     */
    function dangerousStyleValue(name, value, isCustomProperty) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901

      var isEmpty = value == null || typeof value === 'boolean' || value === '';
      if (isEmpty) {
        return '';
      }

      if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber$1.hasOwnProperty(name) && isUnitlessNumber$1[name])) {
        return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
      }

      return ('' + value).trim();
    }

    var dangerousStyleValue_1 = dangerousStyleValue;

    /**
     * Copyright (c) 2016-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * 
     * @providesModule describeComponentFrame
     */

    var describeComponentFrame = function (name, source, ownerName) {
      return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
    };

    var IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent;
    var FunctionalComponent = ReactTypeOfWork.FunctionalComponent;
    var ClassComponent$1 = ReactTypeOfWork.ClassComponent;
    var HostComponent$2 = ReactTypeOfWork.HostComponent;

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case IndeterminateComponent:
        case FunctionalComponent:
        case ClassComponent$1:
        case HostComponent$2:
          var owner = fiber._debugOwner;
          var source = fiber._debugSource;
          var name = getComponentName_1(fiber);
          var ownerName = null;
          if (owner) {
            ownerName = getComponentName_1(owner);
          }
          return describeComponentFrame(name, source, ownerName);
        default:
          return '';
      }
    }

    // This function can only be called with a work-in-progress fiber and
    // only during begin or complete phase. Do not call it under any other
    // circumstances.
    function getStackAddendumByWorkInProgressFiber$1(workInProgress) {
      var info = '';
      var node = workInProgress;
      do {
        info += describeFiber(node);
        // Otherwise this return pointer might point to the wrong tree:
        node = node['return'];
      } while (node);
      return info;
    }

    var ReactFiberComponentTreeHook = {
      getStackAddendumByWorkInProgressFiber: getStackAddendumByWorkInProgressFiber$1
    };

    var ReactDebugCurrentFrame = ReactGlobalSharedState_1.ReactDebugCurrentFrame;

    {
      var getComponentName$3 = getComponentName_1;

      var _require2$2 = ReactFiberComponentTreeHook,
          getStackAddendumByWorkInProgressFiber = _require2$2.getStackAddendumByWorkInProgressFiber;
    }

    function getCurrentFiberOwnerName$2() {
      {
        var fiber = ReactDebugCurrentFiber.current;
        if (fiber === null) {
          return null;
        }
        if (fiber._debugOwner != null) {
          return getComponentName$3(fiber._debugOwner);
        }
      }
      return null;
    }

    function getCurrentFiberStackAddendum$1() {
      {
        var fiber = ReactDebugCurrentFiber.current;
        if (fiber === null) {
          return null;
        }
        // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackAddendumByWorkInProgressFiber(fiber);
      }
      return null;
    }

    function resetCurrentFiber() {
      ReactDebugCurrentFrame.getCurrentStack = null;
      ReactDebugCurrentFiber.current = null;
      ReactDebugCurrentFiber.phase = null;
    }

    function setCurrentFiber(fiber, phase) {
      ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum$1;
      ReactDebugCurrentFiber.current = fiber;
      ReactDebugCurrentFiber.phase = phase;
    }

    var ReactDebugCurrentFiber = {
      current: null,
      phase: null,
      resetCurrentFiber: resetCurrentFiber,
      setCurrentFiber: setCurrentFiber,
      getCurrentFiberOwnerName: getCurrentFiberOwnerName$2,
      getCurrentFiberStackAddendum: getCurrentFiberStackAddendum$1
    };

    var ReactDebugCurrentFiber_1 = ReactDebugCurrentFiber;

    var warnValidStyle$1 = emptyFunction;

    {
      var camelizeStyleName$1 = camelizeStyleName;
      var getComponentName$2 = getComponentName_1;
      var warning$4 = require$$0;

      var _require$3 = ReactDebugCurrentFiber_1,
          getCurrentFiberOwnerName$1 = _require$3.getCurrentFiberOwnerName;

      // 'msTransform' is correct, but the other prefixes should be capitalized


      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

      // style values shouldn't contain a semicolon
      var badStyleValueWithSemicolonPattern = /;\s*$/;

      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;

      var warnHyphenatedStyleName = function (name, owner) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$4(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName$1(name), checkRenderMessage(owner));
      };

      var warnBadVendoredStyleName = function (name, owner) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$4(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner));
      };

      var warnStyleValueWithSemicolon = function (name, value, owner) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }

        warnedStyleValues[value] = true;
        warning$4(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, ''));
      };

      var warnStyleValueIsNaN = function (name, value, owner) {
        if (warnedForNaNValue) {
          return;
        }

        warnedForNaNValue = true;
        warning$4(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));
      };

      var warnStyleValueIsInfinity = function (name, value, owner) {
        if (warnedForInfinityValue) {
          return;
        }

        warnedForInfinityValue = true;
        warning$4(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));
      };

      var checkRenderMessage = function (owner) {
        var ownerName;
        if (owner != null) {
          // Stack passes the owner manually all the way to CSSPropertyOperations.
          ownerName = getComponentName$2(owner);
        } else {
          // Fiber doesn't pass it but uses ReactDebugCurrentFiber to track it.
          // It is only enabled in development and tracks host components too.
          ownerName = getCurrentFiberOwnerName$1();
          // TODO: also report the stack.
        }
        if (ownerName) {
          return '\n\nCheck the render method of `' + ownerName + '`.';
        }
        return '';
      };

      warnValidStyle$1 = function (name, value, component) {
        var owner;
        if (component) {
          // TODO: this only works with Stack. Seems like we need to add unit tests?
          owner = component._currentElement._owner;
        }
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name, owner);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name, owner);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value, owner);
        }

        if (typeof value === 'number') {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value, owner);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value, owner);
          }
        }
      };
    }

    var warnValidStyle_1 = warnValidStyle$1;

    {
      var hyphenateStyleName$1 = hyphenateStyleName;
      var warnValidStyle = warnValidStyle_1;
    }

    var hasShorthandPropertyBug = false;
    if (ExecutionEnvironment.canUseDOM) {
      var tempStyle = document.createElement('div').style;
      try {
        // IE8 throws "Invalid argument." if resetting shorthand style properties.
        tempStyle.font = '';
      } catch (e) {
        hasShorthandPropertyBug = true;
      }
    }

    /**
     * Operations for dealing with CSS properties.
     */
    var CSSPropertyOperations = {
      /**
       * This creates a string that is expected to be equivalent to the style
       * attribute generated by server-side rendering. It by-passes warnings and
       * security checks so it's not safe to use this value for anything other than
       * comparison. It is only used in DEV for SSR validation.
       */
      createDangerousStringForStyles: function (styles) {
        {
          var serialized = '';
          var delimiter = '';
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles[styleName];
            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf('--') === 0;
              serialized += delimiter + hyphenateStyleName$1(styleName) + ':';
              serialized += dangerousStyleValue_1(styleName, styleValue, isCustomProperty);

              delimiter = ';';
            }
          }
          return serialized || null;
        }
      },

      /**
       * Sets the value for multiple styles on a node.  If a value is specified as
       * '' (empty string), the corresponding style property will be unset.
       *
       * @param {DOMElement} node
       * @param {object} styles
       * @param {ReactDOMComponent} component
       */
      setValueForStyles: function (node, styles, component) {
        var style = node.style;
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf('--') === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle(styleName, styles[styleName], component);
            }
          }
          var styleValue = dangerousStyleValue_1(styleName, styles[styleName], isCustomProperty);
          if (styleName === 'float') {
            styleName = 'cssFloat';
          }
          if (isCustomProperty) {
            style.setProperty(styleName, styleValue);
          } else if (styleValue) {
            style[styleName] = styleValue;
          } else {
            var expansion = hasShorthandPropertyBug && CSSProperty_1.shorthandPropertyExpansions[styleName];
            if (expansion) {
              // Shorthand property that IE8 won't like unsetting, so unset each
              // component to placate it
              for (var individualStyleName in expansion) {
                style[individualStyleName] = '';
              }
            } else {
              style[styleName] = '';
            }
          }
        }
      }
    };

    var CSSPropertyOperations_1 = CSSPropertyOperations;

    var ReactInvalidSetStateWarningHook = {};

    {
      var warning$7 = require$$0;
      var processingChildContext = false;

      var warnInvalidSetState = function () {
        warning$7(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()');
      };

      ReactInvalidSetStateWarningHook = {
        onBeginProcessingChildContext: function () {
          processingChildContext = true;
        },
        onEndProcessingChildContext: function () {
          processingChildContext = false;
        },
        onSetState: function () {
          warnInvalidSetState();
        }
      };
    }

    var ReactInvalidSetStateWarningHook_1 = ReactInvalidSetStateWarningHook;

    /**
     * Copyright (c) 2016-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactHostOperationHistoryHook
     * 
     */

    // Trust the developer to only use this with a true check
    var ReactHostOperationHistoryHook = null;

    {
      var history = [];

      ReactHostOperationHistoryHook = {
        onHostOperation: function (operation) {
          history.push(operation);
        },
        clearHistory: function () {
          if (ReactHostOperationHistoryHook._preventClearing) {
            // Should only be used for tests.
            return;
          }

          history = [];
        },
        getHistory: function () {
          return history;
        }
      };
    }

    var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook;

    var ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook;

    {
      var warning$6 = require$$0;
    }

    // Trust the developer to only use this with a true check
    var ReactDebugTool$1 = null;

    {
      var hooks = [];
      var didHookThrowForEvent = {};

      var callHook = function (event, fn, context, arg1, arg2, arg3, arg4, arg5) {
        try {
          fn.call(context, arg1, arg2, arg3, arg4, arg5);
        } catch (e) {
          warning$6(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack);
          didHookThrowForEvent[event] = true;
        }
      };

      var emitEvent = function (event, arg1, arg2, arg3, arg4, arg5) {
        for (var i = 0; i < hooks.length; i++) {
          var hook = hooks[i];
          var fn = hook[event];
          if (fn) {
            callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
          }
        }
      };

      var isProfiling = false;
      var flushHistory = [];
      var lifeCycleTimerStack = [];
      var currentFlushNesting = 0;
      var currentFlushMeasurements = [];
      var currentFlushStartTime = 0;
      var currentTimerDebugID = null;
      var currentTimerStartTime = 0;
      var currentTimerNestedFlushDuration = 0;
      var currentTimerType = null;

      var lifeCycleTimerHasWarned = false;

      var clearHistory = function () {
        ReactComponentTreeHook.purgeUnmountedComponents();
        ReactHostOperationHistoryHook_1.clearHistory();
      };

      var getTreeSnapshot = function (registeredIDs) {
        return registeredIDs.reduce(function (tree, id) {
          var ownerID = ReactComponentTreeHook.getOwnerID(id);
          var parentID = ReactComponentTreeHook.getParentID(id);
          tree[id] = {
            displayName: ReactComponentTreeHook.getDisplayName(id),
            text: ReactComponentTreeHook.getText(id),
            updateCount: ReactComponentTreeHook.getUpdateCount(id),
            childIDs: ReactComponentTreeHook.getChildIDs(id),
            // Text nodes don't have owners but this is close enough.
            ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
            parentID: parentID
          };
          return tree;
        }, {});
      };

      var resetMeasurements = function () {
        var previousStartTime = currentFlushStartTime;
        var previousMeasurements = currentFlushMeasurements;
        var previousOperations = ReactHostOperationHistoryHook_1.getHistory();

        if (currentFlushNesting === 0) {
          currentFlushStartTime = 0;
          currentFlushMeasurements = [];
          clearHistory();
          return;
        }

        if (previousMeasurements.length || previousOperations.length) {
          var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
          flushHistory.push({
            duration: performanceNow() - previousStartTime,
            measurements: previousMeasurements || [],
            operations: previousOperations || [],
            treeSnapshot: getTreeSnapshot(registeredIDs)
          });
        }

        clearHistory();
        currentFlushStartTime = performanceNow();
        currentFlushMeasurements = [];
      };

      var checkDebugID = function (debugID) {
        var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (allowRoot && debugID === 0) {
          return;
        }
        if (!debugID) {
          warning$6(false, 'ReactDebugTool: debugID may not be empty.');
        }
      };

      var beginLifeCycleTimer = function (debugID, timerType) {
        if (currentFlushNesting === 0) {
          return;
        }
        if (currentTimerType && !lifeCycleTimerHasWarned) {
          warning$6(false, 'There is an internal error in the React performance measurement code.' + '\n\nDid not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
          lifeCycleTimerHasWarned = true;
        }
        currentTimerStartTime = performanceNow();
        currentTimerNestedFlushDuration = 0;
        currentTimerDebugID = debugID;
        currentTimerType = timerType;
      };

      var endLifeCycleTimer = function (debugID, timerType) {
        if (currentFlushNesting === 0) {
          return;
        }
        if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
          warning$6(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
          lifeCycleTimerHasWarned = true;
        }
        if (isProfiling) {
          currentFlushMeasurements.push({
            timerType: timerType,
            instanceID: debugID,
            duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
          });
        }
        currentTimerStartTime = 0;
        currentTimerNestedFlushDuration = 0;
        currentTimerDebugID = null;
        currentTimerType = null;
      };

      var pauseCurrentLifeCycleTimer = function () {
        var currentTimer = {
          startTime: currentTimerStartTime,
          nestedFlushStartTime: performanceNow(),
          debugID: currentTimerDebugID,
          timerType: currentTimerType
        };
        lifeCycleTimerStack.push(currentTimer);
        currentTimerStartTime = 0;
        currentTimerNestedFlushDuration = 0;
        currentTimerDebugID = null;
        currentTimerType = null;
      };

      var resumeCurrentLifeCycleTimer = function () {
        var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
            startTime = _lifeCycleTimerStack$.startTime,
            nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
            debugID = _lifeCycleTimerStack$.debugID,
            timerType = _lifeCycleTimerStack$.timerType;

        var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
        currentTimerStartTime = startTime;
        currentTimerNestedFlushDuration += nestedFlushDuration;
        currentTimerDebugID = debugID;
        currentTimerType = timerType;
      };

      var lastMarkTimeStamp = 0;
      var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

      var shouldMark = function (debugID) {
        if (!isProfiling || !canUsePerformanceMeasure) {
          return false;
        }
        var element = ReactComponentTreeHook.getElement(debugID);
        if (element == null || typeof element !== 'object') {
          return false;
        }
        var isHostElement = typeof element.type === 'string';
        if (isHostElement) {
          return false;
        }
        return true;
      };

      var markBegin = function (debugID, markType) {
        if (!shouldMark(debugID)) {
          return;
        }

        var markName = debugID + '::' + markType;
        lastMarkTimeStamp = performanceNow();
        performance.mark(markName);
      };

      var markEnd = function (debugID, markType) {
        if (!shouldMark(debugID)) {
          return;
        }

        var markName = debugID + '::' + markType;
        var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

        // Chrome has an issue of dropping markers recorded too fast:
        // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
        // To work around this, we will not report very small measurements.
        // I determined the magic number by tweaking it back and forth.
        // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
        // When the bug is fixed, we can `measure()` unconditionally if we want to.
        var timeStamp = performanceNow();
        if (timeStamp - lastMarkTimeStamp > 0.1) {
          var measurementName = displayName + ' [' + markType + ']';
          performance.measure(measurementName, markName);
        }

        performance.clearMarks(markName);
        if (measurementName) {
          performance.clearMeasures(measurementName);
        }
      };

      ReactDebugTool$1 = {
        addHook: function (hook) {
          hooks.push(hook);
        },
        removeHook: function (hook) {
          for (var i = 0; i < hooks.length; i++) {
            if (hooks[i] === hook) {
              hooks.splice(i, 1);
              i--;
            }
          }
        },
        isProfiling: function () {
          return isProfiling;
        },
        beginProfiling: function () {
          if (isProfiling) {
            return;
          }

          isProfiling = true;
          flushHistory.length = 0;
          resetMeasurements();
          ReactDebugTool$1.addHook(ReactHostOperationHistoryHook_1);
        },
        endProfiling: function () {
          if (!isProfiling) {
            return;
          }

          isProfiling = false;
          resetMeasurements();
          ReactDebugTool$1.removeHook(ReactHostOperationHistoryHook_1);
        },
        getFlushHistory: function () {
          return flushHistory;
        },
        onBeginFlush: function () {
          currentFlushNesting++;
          resetMeasurements();
          pauseCurrentLifeCycleTimer();
          emitEvent('onBeginFlush');
        },
        onEndFlush: function () {
          resetMeasurements();
          currentFlushNesting--;
          resumeCurrentLifeCycleTimer();
          emitEvent('onEndFlush');
        },
        onBeginLifeCycleTimer: function (debugID, timerType) {
          checkDebugID(debugID);
          emitEvent('onBeginLifeCycleTimer', debugID, timerType);
          markBegin(debugID, timerType);
          beginLifeCycleTimer(debugID, timerType);
        },
        onEndLifeCycleTimer: function (debugID, timerType) {
          checkDebugID(debugID);
          endLifeCycleTimer(debugID, timerType);
          markEnd(debugID, timerType);
          emitEvent('onEndLifeCycleTimer', debugID, timerType);
        },
        onBeginProcessingChildContext: function () {
          emitEvent('onBeginProcessingChildContext');
        },
        onEndProcessingChildContext: function () {
          emitEvent('onEndProcessingChildContext');
        },
        onHostOperation: function (operation) {
          checkDebugID(operation.instanceID);
          emitEvent('onHostOperation', operation);
        },
        onSetState: function () {
          emitEvent('onSetState');
        },
        onSetChildren: function (debugID, childDebugIDs) {
          checkDebugID(debugID);
          childDebugIDs.forEach(checkDebugID);
          emitEvent('onSetChildren', debugID, childDebugIDs);
        },
        onBeforeMountComponent: function (debugID, element, parentDebugID) {
          checkDebugID(debugID);
          checkDebugID(parentDebugID, true);
          emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
          markBegin(debugID, 'mount');
        },
        onMountComponent: function (debugID) {
          checkDebugID(debugID);
          markEnd(debugID, 'mount');
          emitEvent('onMountComponent', debugID);
        },
        onBeforeUpdateComponent: function (debugID, element) {
          checkDebugID(debugID);
          emitEvent('onBeforeUpdateComponent', debugID, element);
          markBegin(debugID, 'update');
        },
        onUpdateComponent: function (debugID) {
          checkDebugID(debugID);
          markEnd(debugID, 'update');
          emitEvent('onUpdateComponent', debugID);
        },
        onBeforeUnmountComponent: function (debugID) {
          checkDebugID(debugID);
          emitEvent('onBeforeUnmountComponent', debugID);
          markBegin(debugID, 'unmount');
        },
        onUnmountComponent: function (debugID) {
          checkDebugID(debugID);
          markEnd(debugID, 'unmount');
          emitEvent('onUnmountComponent', debugID);
        },
        onTestEvent: function () {
          emitEvent('onTestEvent');
        }
      };

      ReactDebugTool$1.addHook(ReactInvalidSetStateWarningHook_1);
      ReactDebugTool$1.addHook(ReactComponentTreeHook);
      var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
      if (/[?&]react_perf\b/.test(url)) {
        ReactDebugTool$1.beginProfiling();
      }
    }

    var ReactDebugTool_1 = ReactDebugTool$1;

    // Trust the developer to only use ReactInstrumentation with a true check

    var debugTool = null;

    {
      var ReactDebugTool = ReactDebugTool_1;
      debugTool = ReactDebugTool;
    }

    var ReactInstrumentation = { debugTool: debugTool };

    {
      var warning$5 = require$$0;
    }

    // isAttributeNameSafe() is currently duplicated in DOMMarkupOperations.
    // TODO: Find a better place for this.
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty_1.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
        return true;
      }
      if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
        return false;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }
      illegalAttributeNameCache[attributeName] = true;
      {
        warning$5(false, 'Invalid attribute name: `%s`', attributeName);
      }
      return false;
    }

    // shouldIgnoreValue() is currently duplicated in DOMMarkupOperations.
    // TODO: Find a better place for this.
    function shouldIgnoreValue(propertyInfo, value) {
      return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
    }

    /**
     * Operations for dealing with DOM properties.
     */
    var DOMPropertyOperations = {
      setAttributeForID: function (node, id) {
        node.setAttribute(DOMProperty_1.ID_ATTRIBUTE_NAME, id);
      },

      setAttributeForRoot: function (node) {
        node.setAttribute(DOMProperty_1.ROOT_ATTRIBUTE_NAME, '');
      },

      /**
       * Get the value for a property on a node. Only used in DEV for SSR validation.
       * The "expected" argument is used as a hint of what the expected value is.
       * Some properties have multiple equivalent values.
       */
      getValueForProperty: function (node, name, expected) {
        {
          var propertyInfo = DOMProperty_1.getPropertyInfo(name);
          if (propertyInfo) {
            var mutationMethod = propertyInfo.mutationMethod;
            if (mutationMethod || propertyInfo.mustUseProperty) {
              return node[propertyInfo.propertyName];
            } else {
              var attributeName = propertyInfo.attributeName;

              var stringValue = null;

              if (propertyInfo.hasOverloadedBooleanValue) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === '') {
                    return true;
                  }
                  if (shouldIgnoreValue(propertyInfo, expected)) {
                    return value;
                  }
                  if (value === '' + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldIgnoreValue(propertyInfo, expected)) {
                  // We had an attribute but shouldn't have had one, so read it
                  // for the error message.
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.hasBooleanValue) {
                  // If this was a boolean, it doesn't matter what the value is
                  // the fact that we have it is the same as the expected.
                  return expected;
                }
                // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
              }

              if (shouldIgnoreValue(propertyInfo, expected)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === '' + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
      },

      /**
       * Get the value for a attribute on a node. Only used in DEV for SSR validation.
       * The third argument is used as a hint of what the expected value is. Some
       * attributes have multiple equivalent values.
       */
      getValueForAttribute: function (node, name, expected) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node.hasAttribute(name)) {
            return expected === undefined ? undefined : null;
          }
          var value = node.getAttribute(name);
          if (value === '' + expected) {
            return expected;
          }
          return value;
        }
      },

      /**
       * Sets the value for a property on a node.
       *
       * @param {DOMElement} node
       * @param {string} name
       * @param {*} value
       */
      setValueForProperty: function (node, name, value) {
        var propertyInfo = DOMProperty_1.getPropertyInfo(name);

        if (propertyInfo && DOMProperty_1.shouldSetAttribute(name, value)) {
          var mutationMethod = propertyInfo.mutationMethod;
          if (mutationMethod) {
            mutationMethod(node, value);
          } else if (shouldIgnoreValue(propertyInfo, value)) {
            DOMPropertyOperations.deleteValueForProperty(node, name);
            return;
          } else if (propertyInfo.mustUseProperty) {
            // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyInfo.propertyName] = value;
          } else {
            var attributeName = propertyInfo.attributeName;
            var namespace = propertyInfo.attributeNamespace;
            // `setAttribute` with objects becomes only `[object]` in IE8/9,
            // ('' + value) makes it output the correct toString()-value.
            if (namespace) {
              node.setAttributeNS(namespace, attributeName, '' + value);
            } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
              node.setAttribute(attributeName, '');
            } else {
              node.setAttribute(attributeName, '' + value);
            }
          }
        } else {
          DOMPropertyOperations.setValueForAttribute(node, name, DOMProperty_1.shouldSetAttribute(name, value) ? value : null);
          return;
        }

        {
          var payload = {};
          payload[name] = value;
          ReactInstrumentation.debugTool.onHostOperation({
            instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
            type: 'update attribute',
            payload: payload
          });
        }
      },

      setValueForAttribute: function (node, name, value) {
        if (!isAttributeNameSafe(name)) {
          return;
        }
        if (value == null) {
          node.removeAttribute(name);
        } else {
          node.setAttribute(name, '' + value);
        }

        {
          var payload = {};
          payload[name] = value;
          ReactInstrumentation.debugTool.onHostOperation({
            instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
            type: 'update attribute',
            payload: payload
          });
        }
      },

      /**
       * Deletes an attributes from a node.
       *
       * @param {DOMElement} node
       * @param {string} name
       */
      deleteValueForAttribute: function (node, name) {
        node.removeAttribute(name);
        {
          ReactInstrumentation.debugTool.onHostOperation({
            instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
            type: 'remove attribute',
            payload: name
          });
        }
      },

      /**
       * Deletes the value for a property on a node.
       *
       * @param {DOMElement} node
       * @param {string} name
       */
      deleteValueForProperty: function (node, name) {
        var propertyInfo = DOMProperty_1.getPropertyInfo(name);
        if (propertyInfo) {
          var mutationMethod = propertyInfo.mutationMethod;
          if (mutationMethod) {
            mutationMethod(node, undefined);
          } else if (propertyInfo.mustUseProperty) {
            var propName = propertyInfo.propertyName;
            if (propertyInfo.hasBooleanValue) {
              node[propName] = false;
            } else {
              node[propName] = '';
            }
          } else {
            node.removeAttribute(propertyInfo.attributeName);
          }
        } else {
          node.removeAttribute(name);
        }

        {
          ReactInstrumentation.debugTool.onHostOperation({
            instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
            type: 'remove attribute',
            payload: name
          });
        }
      }
    };

    var DOMPropertyOperations_1 = DOMPropertyOperations;

    var ReactControlledValuePropTypes = {
      checkPropTypes: null
    };

    {
      var warning$9 = require$$0;
      var emptyFunction$2 = emptyFunction;
      var PropTypes = propTypes;
      var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

      ReactControlledValuePropTypes.checkPropTypes = emptyFunction$2;
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };

      var propTypes$1 = {
        value: function (props, propName, componentName) {
          if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
            return null;
          }
          return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        },
        checked: function (props, propName, componentName) {
          if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
            return null;
          }
          return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        },
        onChange: PropTypes.func
      };

      var loggedTypeFailures = {};

      /**
       * Provide a linked `value` attribute for controlled forms. You should not use
       * this outside of the ReactDOM controlled form components.
       */
      ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {
        for (var propName in propTypes$1) {
          if (propTypes$1.hasOwnProperty(propName)) {
            var error = propTypes$1[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;

            warning$9(false, 'Failed form propType: %s%s', error.message, getStack());
          }
        }
      };
    }

    var ReactControlledValuePropTypes_1 = ReactControlledValuePropTypes;

    var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber_1.getCurrentFiberOwnerName;

    {
      var _require2$3 = ReactDebugCurrentFiber_1,
          getCurrentFiberStackAddendum$2 = _require2$3.getCurrentFiberStackAddendum;

      var warning$8 = require$$0;
    }

    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;

    function isControlled(props) {
      var usesChecked = props.type === 'checkbox' || props.type === 'radio';
      return usesChecked ? props.checked != null : props.value != null;
    }

    /**
     * Implements an <input> host component that allows setting these optional
     * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
     *
     * If `checked` or `value` are not supplied (or null/undefined), user actions
     * that affect the checked state or value will trigger updates to the element.
     *
     * If they are supplied (and not null/undefined), the rendered element will not
     * trigger updates to the element. Instead, the props must change in order for
     * the rendered element to be updated.
     *
     * The rendered element will be initialized as unchecked (or `defaultChecked`)
     * with an empty value (or `defaultValue`).
     *
     * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
     */
    var ReactDOMInput = {
      getHostProps: function (element, props) {
        var node = element;
        var value = props.value;
        var checked = props.checked;

        var hostProps = _assign({
          // Make sure we set .type before any other properties (setting .value
          // before .type means .value is lost in IE11 and below)
          type: undefined,
          // Make sure we set .step before .value (setting .value before .step
          // means .value is rounded on mount, based upon step precision)
          step: undefined,
          // Make sure we set .min & .max before .value (to ensure proper order
          // in corner cases such as min or max deriving from value, e.g. Issue #7170)
          min: undefined,
          max: undefined
        }, props, {
          defaultChecked: undefined,
          defaultValue: undefined,
          value: value != null ? value : node._wrapperState.initialValue,
          checked: checked != null ? checked : node._wrapperState.initialChecked
        });

        return hostProps;
      },

      initWrapperState: function (element, props) {
        {
          ReactControlledValuePropTypes_1.checkPropTypes('input', props, getCurrentFiberStackAddendum$2);

          if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            warning$8(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$3() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            warning$8(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$3() || 'A component', props.type);
            didWarnValueDefaultValue = true;
          }
        }

        var defaultValue = props.defaultValue;
        var node = element;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: props.value != null ? props.value : defaultValue,
          controlled: isControlled(props)
        };
      },

      updateWrapper: function (element, props) {
        var node = element;
        {
          var controlled = isControlled(props);

          if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            warning$8(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$2());
            didWarnUncontrolledToControlled = true;
          }
          if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            warning$8(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$2());
            didWarnControlledToUncontrolled = true;
          }
        }

        var checked = props.checked;
        if (checked != null) {
          DOMPropertyOperations_1.setValueForProperty(node, 'checked', checked || false);
        }

        var value = props.value;
        if (value != null) {
          if (value === 0 && node.value === '') {
            node.value = '0';
            // Note: IE9 reports a number inputs as 'text', so check props instead.
          } else if (props.type === 'number') {
            // Simulate `input.valueAsNumber`. IE9 does not support it
            var valueAsNumber = parseFloat(node.value) || 0;

            if (
            // eslint-disable-next-line
            value != valueAsNumber ||
            // eslint-disable-next-line
            value == valueAsNumber && node.value != value) {
              // Cast `value` to a string to ensure the value is set correctly. While
              // browsers typically do this as necessary, jsdom doesn't.
              node.value = '' + value;
            }
          } else if (node.value !== '' + value) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            node.value = '' + value;
          }
        } else {
          if (props.value == null && props.defaultValue != null) {
            // In Chrome, assigning defaultValue to certain input types triggers input validation.
            // For number inputs, the display value loses trailing decimal points. For email inputs,
            // Chrome raises "The specified value <x> is not a valid email address".
            //
            // Here we check to see if the defaultValue has actually changed, avoiding these problems
            // when the user is inputting text
            //
            // https://github.com/facebook/react/issues/7253
            if (node.defaultValue !== '' + props.defaultValue) {
              node.defaultValue = '' + props.defaultValue;
            }
          }
          if (props.checked == null && props.defaultChecked != null) {
            node.defaultChecked = !!props.defaultChecked;
          }
        }
      },

      postMountWrapper: function (element, props) {
        var node = element;

        // Detach value from defaultValue. We won't do anything if we're working on
        // submit or reset inputs as those values & defaultValues are linked. They
        // are not resetable nodes so this operation doesn't matter and actually
        // removes browser-default values (eg "Submit Query") when no value is
        // provided.

        switch (props.type) {
          case 'submit':
          case 'reset':
            break;
          case 'color':
          case 'date':
          case 'datetime':
          case 'datetime-local':
          case 'month':
          case 'time':
          case 'week':
            // This fixes the no-show issue on iOS Safari and Android Chrome:
            // https://github.com/facebook/react/issues/7233
            node.value = '';
            node.value = node.defaultValue;
            break;
          default:
            node.value = node.value;
            break;
        }

        // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') {
          node.name = '';
        }
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !node.defaultChecked;
        if (name !== '') {
          node.name = name;
        }
      },

      restoreControlledState: function (element, props) {
        var node = element;
        ReactDOMInput.updateWrapper(node, props);
        updateNamedCousins(node, props);
      }
    };

    function updateNamedCousins(rootNode, props) {
      var name = props.name;
      if (props.type === 'radio' && name != null) {
        var queryRoot = rootNode;

        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        }

        // If `rootNode.form` was non-null, then we could try `form.elements`,
        // but that sometimes behaves strangely in IE8. We could also try using
        // `form.getElementsByName`, but that will only return direct children
        // and won't include inputs that use the HTML5 `form=` attribute. Since
        // the input might not even be in a form. It might not even be in the
        // document. Let's just use the local `querySelectorAll` to ensure we don't
        // miss anything.
        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];
          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          }
          // This will throw if radio buttons rendered by different copies of React
          // and the same name are rendered into the same form (same as #1939).
          // That's probably okay; we don't support it just as we don't support
          // mixing React radio buttons with non-React ones.
          var otherProps = ReactDOMComponentTree_1.getFiberCurrentPropsFromNode(otherNode);
          !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;
          // If this is a controlled radio button group, forcing the input that
          // was previously checked to update will cause it to be come re-checked
          // as appropriate.
          ReactDOMInput.updateWrapper(otherNode, otherProps);
        }
      }
    }

    var ReactDOMFiberInput = ReactDOMInput;

    {
      var warning$10 = require$$0;
    }

    function flattenChildren(children) {
      var content = '';

      // Flatten children and warn if they aren't strings or numbers;
      // invalid types are ignored.
      // We can silently skip them because invalid DOM nesting warning
      // catches these cases in Fiber.
      react.Children.forEach(children, function (child) {
        if (child == null) {
          return;
        }
        if (typeof child === 'string' || typeof child === 'number') {
          content += child;
        }
      });

      return content;
    }

    /**
     * Implements an <option> host component that warns when `selected` is set.
     */
    var ReactDOMOption = {
      validateProps: function (element, props) {
        // TODO (yungsters): Remove support for `selected` in <option>.
        {
          warning$10(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
        }
      },

      postMountWrapper: function (element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) {
          element.setAttribute('value', props.value);
        }
      },

      getHostProps: function (element, props) {
        var hostProps = _assign({ children: undefined }, props);

        var content = flattenChildren(props.children);

        if (content) {
          hostProps.children = content;
        }

        return hostProps;
      }
    };

    var ReactDOMFiberOption = ReactDOMOption;

    var getCurrentFiberOwnerName$4 = ReactDebugCurrentFiber_1.getCurrentFiberOwnerName;

    {
      var didWarnValueDefaultValue$1 = false;
      var warning$11 = require$$0;

      var _require2$4 = ReactDebugCurrentFiber_1,
          getCurrentFiberStackAddendum$3 = _require2$4.getCurrentFiberStackAddendum;
    }

    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerName$4();
      if (ownerName) {
        return '\n\nCheck the render method of `' + ownerName + '`.';
      }
      return '';
    }

    var valuePropNames = ['value', 'defaultValue'];

    /**
     * Validation function for `value` and `defaultValue`.
     */
    function checkSelectPropTypes(props) {
      ReactControlledValuePropTypes_1.checkPropTypes('select', props, getCurrentFiberStackAddendum$3);

      for (var i = 0; i < valuePropNames.length; i++) {
        var propName = valuePropNames[i];
        if (props[propName] == null) {
          continue;
        }
        var isArray = Array.isArray(props[propName]);
        if (props.multiple && !isArray) {
          warning$11(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
        } else if (!props.multiple && isArray) {
          warning$11(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
        }
      }
    }

    function updateOptions(node, multiple, propValue) {
      var options = node.options;

      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};
        for (var i = 0; i < selectedValues.length; i++) {
          // Prefix to avoid chaos with special keys.
          selectedValue['$' + selectedValues[i]] = true;
        }
        for (var _i = 0; _i < options.length; _i++) {
          var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
          if (options[_i].selected !== selected) {
            options[_i].selected = selected;
          }
        }
      } else {
        // Do not set `select.value` as exact behavior isn't consistent across all
        // browsers for all cases.
        var _selectedValue = '' + propValue;
        var defaultSelected = null;
        for (var _i2 = 0; _i2 < options.length; _i2++) {
          if (options[_i2].value === _selectedValue) {
            options[_i2].selected = true;
            return;
          }
          if (defaultSelected === null && !options[_i2].disabled) {
            defaultSelected = options[_i2];
          }
        }
        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }

    /**
     * Implements a <select> host component that allows optionally setting the
     * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
     * stringable. If `multiple` is true, the prop must be an array of stringables.
     *
     * If `value` is not supplied (or null/undefined), user actions that change the
     * selected option will trigger updates to the rendered options.
     *
     * If it is supplied (and not null/undefined), the rendered options will not
     * update in response to user actions. Instead, the `value` prop must change in
     * order for the rendered options to update.
     *
     * If `defaultValue` is provided, any options with the supplied values will be
     * selected.
     */
    var ReactDOMSelect = {
      getHostProps: function (element, props) {
        return _assign({}, props, {
          value: undefined
        });
      },

      initWrapperState: function (element, props) {
        var node = element;
        {
          checkSelectPropTypes(props);
        }

        var value = props.value;
        node._wrapperState = {
          initialValue: value != null ? value : props.defaultValue,
          wasMultiple: !!props.multiple
        };

        {
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            warning$11(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
            didWarnValueDefaultValue$1 = true;
          }
        }
      },

      postMountWrapper: function (element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value);
        } else if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue);
        }
      },

      postUpdateWrapper: function (element, props) {
        var node = element;
        // After the initial mount, we control selected-ness manually so don't pass
        // this value down
        node._wrapperState.initialValue = undefined;

        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;

        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value);
        } else if (wasMultiple !== !!props.multiple) {
          // For simplicity, reapply `defaultValue` if `multiple` is toggled.
          if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue);
          } else {
            // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '');
          }
        }
      },

      restoreControlledState: function (element, props) {
        var node = element;
        var value = props.value;

        if (value != null) {
          updateOptions(node, !!props.multiple, value);
        }
      }
    };

    var ReactDOMFiberSelect = ReactDOMSelect;

    {
      var warning$12 = require$$0;

      var _require$4 = ReactDebugCurrentFiber_1,
          getCurrentFiberStackAddendum$4 = _require$4.getCurrentFiberStackAddendum;
    }

    var didWarnValDefaultVal = false;

    /**
     * Implements a <textarea> host component that allows setting `value`, and
     * `defaultValue`. This differs from the traditional DOM API because value is
     * usually set as PCDATA children.
     *
     * If `value` is not supplied (or null/undefined), user actions that affect the
     * value will trigger updates to the element.
     *
     * If `value` is supplied (and not null/undefined), the rendered element will
     * not trigger updates to the element. Instead, the `value` prop must change in
     * order for the rendered element to be updated.
     *
     * The rendered element will be initialized with an empty value, the prop
     * `defaultValue` if specified, or the children content (deprecated).
     */
    var ReactDOMTextarea = {
      getHostProps: function (element, props) {
        var node = element;
        !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

        // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({}, props, {
          value: undefined,
          defaultValue: undefined,
          children: '' + node._wrapperState.initialValue
        });

        return hostProps;
      },

      initWrapperState: function (element, props) {
        var node = element;
        {
          ReactControlledValuePropTypes_1.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$4);
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            warning$12(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
            didWarnValDefaultVal = true;
          }
        }

        var value = props.value;
        var initialValue = value;

        // Only bother fetching default value if we're going to use it
        if (value == null) {
          var defaultValue = props.defaultValue;
          // TODO (yungsters): Remove support for children content in <textarea>.
          var children = props.children;
          if (children != null) {
            {
              warning$12(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
            }
            !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
            if (Array.isArray(children)) {
              !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
              children = children[0];
            }

            defaultValue = '' + children;
          }
          if (defaultValue == null) {
            defaultValue = '';
          }
          initialValue = defaultValue;
        }

        node._wrapperState = {
          initialValue: '' + initialValue
        };
      },

      updateWrapper: function (element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          var newValue = '' + value;

          // To avoid side effects (such as losing text selection), only set value if changed
          if (newValue !== node.value) {
            node.value = newValue;
          }
          if (props.defaultValue == null) {
            node.defaultValue = newValue;
          }
        }
        if (props.defaultValue != null) {
          node.defaultValue = props.defaultValue;
        }
      },

      postMountWrapper: function (element, props) {
        var node = element;
        // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent;

        // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
          node.value = textContent;
        }
      },

      restoreControlledState: function (element, props) {
        // DOM component is still mounted; update
        ReactDOMTextarea.updateWrapper(element, props);
      }
    };

    var ReactDOMFiberTextarea = ReactDOMTextarea;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule omittedCloseTags
     */

    // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special-case tags.

    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
    };

    var omittedCloseTags_1 = omittedCloseTags;

    // For HTML, certain tags cannot have children. This has the same purpose as
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.

    var voidElementTags = _assign({
      menuitem: true
    }, omittedCloseTags_1);

    var voidElementTags_1 = voidElementTags;

    {
      var warning$13 = require$$0;
    }

    var HTML$1 = '__html';

    function getDeclarationErrorAddendum$1(getCurrentOwnerName) {
      {
        var ownerName = getCurrentOwnerName();
        if (ownerName) {
          // TODO: also report the stack.
          return '\n\nThis DOM node was rendered by `' + ownerName + '`.';
        }
      }
      return '';
    }

    function assertValidProps(tag, props, getCurrentOwnerName) {
      if (!props) {
        return;
      }
      // Note the use of `==` which checks for null or undefined.
      if (voidElementTags_1[tag]) {
        !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getDeclarationErrorAddendum$1(getCurrentOwnerName)) : void 0;
      }
      if (props.dangerouslySetInnerHTML != null) {
        !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
        !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
      }
      {
        warning$13(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
      }
      !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum$1(getCurrentOwnerName)) : void 0;
    }

    var assertValidProps_1 = assertValidProps;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule inputValueTracking
     * 
     */

    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }

    function getTracker(node) {
      return node._valueTracker;
    }

    function detachTracker(node) {
      node._valueTracker = null;
    }

    function getValueFromNode(node) {
      var value = '';
      if (!node) {
        return value;
      }

      if (isCheckable(node)) {
        value = node.checked ? 'true' : 'false';
      } else {
        value = node.value;
      }

      return value;
    }

    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? 'checked' : 'value';
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

      var currentValue = '' + node[valueField];

      // if someone has already defined a value or Safari, then bail
      // and don't track value will cause over reporting of changes,
      // but it's better then a hard failure
      // (needed for certain tests that spyOn input values and Safari)
      if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
        return;
      }

      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable,
        configurable: true,
        get: function () {
          return descriptor.get.call(this);
        },
        set: function (value) {
          currentValue = '' + value;
          descriptor.set.call(this, value);
        }
      });

      var tracker = {
        getValue: function () {
          return currentValue;
        },
        setValue: function (value) {
          currentValue = '' + value;
        },
        stopTracking: function () {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }

    var inputValueTracking = {
      // exposed for testing
      _getTrackerFromNode: getTracker,

      track: function (node) {
        if (getTracker(node)) {
          return;
        }

        // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
      },
      updateValueIfChanged: function (node) {
        if (!node) {
          return false;
        }

        var tracker = getTracker(node);
        // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) {
          return true;
        }

        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      },
      stopTracking: function (node) {
        var tracker = getTracker(node);
        if (tracker) {
          tracker.stopTracking();
        }
      }
    };

    var inputValueTracking_1 = inputValueTracking;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule isCustomComponent
     * 
     */

    function isCustomComponent(tagName, props) {
      if (tagName.indexOf('-') === -1) {
        return typeof props.is === 'string';
      }
      switch (tagName) {
        // These are reserved SVG and MathML elements.
        // We don't mind this whitelist too much because we expect it to never grow.
        // The alternative is to track the namespace in a few places which is convoluted.
        // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
          return false;
        default:
          return true;
      }
    }

    var isCustomComponent_1 = isCustomComponent;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule createMicrosoftUnsafeLocalFunction
     */

    /* globals MSApp */

    /**
     * Create a function which has 'unsafe' privileges (required by windows8 apps)
     */

    var createMicrosoftUnsafeLocalFunction = function (func) {
      if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
        return function (arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function () {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    };

    var createMicrosoftUnsafeLocalFunction_1 = createMicrosoftUnsafeLocalFunction;

    var Namespaces$1 = DOMNamespaces.Namespaces;

    // SVG temp container for IE lacking innerHTML
    var reusableSVGContainer;

    /**
     * Set the innerHTML property of a node
     *
     * @param {DOMElement} node
     * @param {string} html
     * @internal
     */
    var setInnerHTML = createMicrosoftUnsafeLocalFunction_1(function (node, html) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      if (node.namespaceURI === Namespaces$1.svg && !('innerHTML' in node)) {
        reusableSVGContainer = reusableSVGContainer || document.createElement('div');
        reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
        var svgNode = reusableSVGContainer.firstChild;
        while (svgNode.firstChild) {
          node.appendChild(svgNode.firstChild);
        }
      } else {
        node.innerHTML = html;
      }
    });

    var setInnerHTML_1 = setInnerHTML;

    /**
     * Copyright (c) 2016-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * Based on the escape-html library, which is used under the MIT License below:
     *
     * Copyright (c) 2012-2013 TJ Holowaychuk
     * Copyright (c) 2015 Andreas Lubbe
     * Copyright (c) 2015 Tiancheng "Timothy" Gu
     *
     * Permission is hereby granted, free of charge, to any person obtaining
     * a copy of this software and associated documentation files (the
     * 'Software'), to deal in the Software without restriction, including
     * without limitation the rights to use, copy, modify, merge, publish,
     * distribute, sublicense, and/or sell copies of the Software, and to
     * permit persons to whom the Software is furnished to do so, subject to
     * the following conditions:
     *
     * The above copyright notice and this permission notice shall be
     * included in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
     * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
     * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
     * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
     * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     *
     * @providesModule escapeTextContentForBrowser
     */

    // code copied and modified from escape-html
    /**
     * Module variables.
     * @private
     */

    var matchHtmlRegExp = /["'&<>]/;

    /**
     * Escape special characters in the given string of html.
     *
     * @param  {string} string The string to escape for inserting into HTML
     * @return {string}
     * @public
     */

    function escapeHtml(string) {
      var str = '' + string;
      var match = matchHtmlRegExp.exec(str);

      if (!match) {
        return str;
      }

      var escape;
      var html = '';
      var index = 0;
      var lastIndex = 0;

      for (index = match.index; index < str.length; index++) {
        switch (str.charCodeAt(index)) {
          case 34:
            // "
            escape = '&quot;';
            break;
          case 38:
            // &
            escape = '&amp;';
            break;
          case 39:
            // '
            escape = '&#x27;'; // modified from escape-html; used to be '&#39'
            break;
          case 60:
            // <
            escape = '&lt;';
            break;
          case 62:
            // >
            escape = '&gt;';
            break;
          default:
            continue;
        }

        if (lastIndex !== index) {
          html += str.substring(lastIndex, index);
        }

        lastIndex = index + 1;
        html += escape;
      }

      return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
    }
    // end code copied and modified from escape-html

    /**
     * Escapes text to prevent scripting attacks.
     *
     * @param {*} text Text value to escape.
     * @return {string} An escaped string.
     */
    function escapeTextContentForBrowser(text) {
      if (typeof text === 'boolean' || typeof text === 'number') {
        // this shortcircuit helps perf for types that we know will never have
        // special characters, especially given that this function is used often
        // for numeric dom ids.
        return '' + text;
      }
      return escapeHtml(text);
    }

    var escapeTextContentForBrowser_1 = escapeTextContentForBrowser;

    var TEXT_NODE$2 = HTMLNodeType_1.TEXT_NODE;

    /**
     * Set the textContent property of a node, ensuring that whitespace is preserved
     * even in IE8. innerText is a poor substitute for textContent and, among many
     * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
     * as it should.
     *
     * @param {DOMElement} node
     * @param {string} text
     * @internal
     */

    var setTextContent = function (node, text) {
      if (text) {
        var firstChild = node.firstChild;

        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE$2) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    };

    if (ExecutionEnvironment.canUseDOM) {
      if (!('textContent' in document.documentElement)) {
        setTextContent = function (node, text) {
          if (node.nodeType === TEXT_NODE$2) {
            node.nodeValue = text;
            return;
          }
          setInnerHTML_1(node, escapeTextContentForBrowser_1(text));
        };
      }
    }

    var setTextContent_1 = setTextContent;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule validAriaProperties
     */

    var ariaProperties = {
      'aria-current': 0, // state
      'aria-details': 0,
      'aria-disabled': 0, // state
      'aria-hidden': 0, // state
      'aria-invalid': 0, // state
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      // Widget Attributes
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      // Live Region Attributes
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      // Drag-and-Drop Attributes
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      // Relationship Attributes
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    };

    var validAriaProperties$1 = ariaProperties;

    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    {
      var warning$14 = require$$0;

      var _require$5 = ReactGlobalSharedState_1,
          ReactComponentTreeHook$1 = _require$5.ReactComponentTreeHook,
          ReactDebugCurrentFrame$1 = _require$5.ReactDebugCurrentFrame;

      var getStackAddendumByID = ReactComponentTreeHook$1.getStackAddendumByID;

      var validAriaProperties = validAriaProperties$1;
    }

    function getStackAddendum(debugID) {
      if (debugID != null) {
        // This can only happen on Stack
        return getStackAddendumByID(debugID);
      } else {
        // This can only happen on Fiber / Server
        var stack = ReactDebugCurrentFrame$1.getStackAddendum();
        return stack != null ? stack : '';
      }
    }

    function validateProperty(tagName, name, debugID) {
      if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
        return true;
      }

      if (rARIACamel.test(name)) {
        var ariaName = 'aria-' + name.slice(4).toLowerCase();
        var correctName = validAriaProperties.hasOwnProperty(ariaName) ? ariaName : null;

        // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.
        if (correctName == null) {
          warning$14(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum(debugID));
          warnedProperties[name] = true;
          return true;
        }
        // aria-* attributes should be lowercase; suggest the lowercase version.
        if (name !== correctName) {
          warning$14(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum(debugID));
          warnedProperties[name] = true;
          return true;
        }
      }

      if (rARIA.test(name)) {
        var lowerCasedName = name.toLowerCase();
        var standardName = validAriaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

        // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.
        if (standardName == null) {
          warnedProperties[name] = true;
          return false;
        }
        // aria-* attributes should be lowercase; suggest the lowercase version.
        if (name !== standardName) {
          warning$14(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum(debugID));
          warnedProperties[name] = true;
          return true;
        }
      }

      return true;
    }

    function warnInvalidARIAProps(type, props, debugID) {
      var invalidProps = [];

      for (var key in props) {
        var isValid = validateProperty(type, key, debugID);
        if (!isValid) {
          invalidProps.push(key);
        }
      }

      var unknownPropString = invalidProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (invalidProps.length === 1) {
        warning$14(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum(debugID));
      } else if (invalidProps.length > 1) {
        warning$14(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum(debugID));
      }
    }

    function validateProperties(type, props, debugID /* Stack only */) {
      if (isCustomComponent_1(type, props)) {
        return;
      }
      warnInvalidARIAProps(type, props, debugID);
    }

    var ReactDOMInvalidARIAHook$1 = {
      // Fiber
      validateProperties: validateProperties,
      // Stack
      onBeforeMountComponent: function (debugID, element) {
        if (true && element != null && typeof element.type === 'string') {
          validateProperties(element.type, element.props, debugID);
        }
      },
      onBeforeUpdateComponent: function (debugID, element) {
        if (true && element != null && typeof element.type === 'string') {
          validateProperties(element.type, element.props, debugID);
        }
      }
    };

    var ReactDOMInvalidARIAHook_1 = ReactDOMInvalidARIAHook$1;

    {
      var warning$15 = require$$0;

      var _require$6 = ReactGlobalSharedState_1,
          ReactComponentTreeHook$2 = _require$6.ReactComponentTreeHook,
          ReactDebugCurrentFrame$2 = _require$6.ReactDebugCurrentFrame;

      var getStackAddendumByID$1 = ReactComponentTreeHook$2.getStackAddendumByID;
    }

    var didWarnValueNull = false;

    function getStackAddendum$1(debugID) {
      if (debugID != null) {
        // This can only happen on Stack
        return getStackAddendumByID$1(debugID);
      } else {
        // This can only happen on Fiber / Server
        var stack = ReactDebugCurrentFrame$2.getStackAddendum();
        return stack != null ? stack : '';
      }
    }

    function validateProperties$1(type, props, debugID /* Stack only */) {
      if (type !== 'input' && type !== 'textarea' && type !== 'select') {
        return;
      }
      if (props != null && props.value === null && !didWarnValueNull) {
        warning$15(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1(debugID));

        didWarnValueNull = true;
      }
    }

    var ReactDOMNullInputValuePropHook$1 = {
      // Fiber
      validateProperties: validateProperties$1,
      // Stack
      onBeforeMountComponent: function (debugID, element) {
        if (true && element != null && typeof element.type === 'string') {
          validateProperties$1(element.type, element.props, debugID);
        }
      },
      onBeforeUpdateComponent: function (debugID, element) {
        if (true && element != null && typeof element.type === 'string') {
          validateProperties$1(element.type, element.props, debugID);
        }
      }
    };

    var ReactDOMNullInputValuePropHook_1 = ReactDOMNullInputValuePropHook$1;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule possibleStandardNames
     */

    // When adding attributes to the HTML or SVG whitelist, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames$1 = {
      // HTML
      accept: 'accept',
      acceptcharset: 'acceptCharset',
      'accept-charset': 'acceptCharset',
      accesskey: 'accessKey',
      action: 'action',
      allowfullscreen: 'allowFullScreen',
      allowtransparency: 'allowTransparency',
      alt: 'alt',
      as: 'as',
      async: 'async',
      autocapitalize: 'autoCapitalize',
      autocomplete: 'autoComplete',
      autocorrect: 'autoCorrect',
      autofocus: 'autoFocus',
      autoplay: 'autoPlay',
      autosave: 'autoSave',
      capture: 'capture',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing',
      challenge: 'challenge',
      charset: 'charSet',
      checked: 'checked',
      children: 'children',
      cite: 'cite',
      'class': 'className',
      classid: 'classID',
      classname: 'className',
      cols: 'cols',
      colspan: 'colSpan',
      content: 'content',
      contenteditable: 'contentEditable',
      contextmenu: 'contextMenu',
      controls: 'controls',
      controlslist: 'controlsList',
      coords: 'coords',
      crossorigin: 'crossOrigin',
      dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
      data: 'data',
      datetime: 'dateTime',
      'default': 'default',
      defaultchecked: 'defaultChecked',
      defaultvalue: 'defaultValue',
      defer: 'defer',
      dir: 'dir',
      disabled: 'disabled',
      download: 'download',
      draggable: 'draggable',
      enctype: 'encType',
      'for': 'htmlFor',
      form: 'form',
      formmethod: 'formMethod',
      formaction: 'formAction',
      formenctype: 'formEncType',
      formnovalidate: 'formNoValidate',
      formtarget: 'formTarget',
      frameborder: 'frameBorder',
      headers: 'headers',
      height: 'height',
      hidden: 'hidden',
      high: 'high',
      href: 'href',
      hreflang: 'hrefLang',
      htmlfor: 'htmlFor',
      httpequiv: 'httpEquiv',
      'http-equiv': 'httpEquiv',
      icon: 'icon',
      id: 'id',
      innerhtml: 'innerHTML',
      inputmode: 'inputMode',
      integrity: 'integrity',
      is: 'is',
      itemid: 'itemID',
      itemprop: 'itemProp',
      itemref: 'itemRef',
      itemscope: 'itemScope',
      itemtype: 'itemType',
      keyparams: 'keyParams',
      keytype: 'keyType',
      kind: 'kind',
      label: 'label',
      lang: 'lang',
      list: 'list',
      loop: 'loop',
      low: 'low',
      manifest: 'manifest',
      marginwidth: 'marginWidth',
      marginheight: 'marginHeight',
      max: 'max',
      maxlength: 'maxLength',
      media: 'media',
      mediagroup: 'mediaGroup',
      method: 'method',
      min: 'min',
      minlength: 'minLength',
      multiple: 'multiple',
      muted: 'muted',
      name: 'name',
      nonce: 'nonce',
      novalidate: 'noValidate',
      open: 'open',
      optimum: 'optimum',
      pattern: 'pattern',
      placeholder: 'placeholder',
      playsinline: 'playsInline',
      poster: 'poster',
      preload: 'preload',
      profile: 'profile',
      radiogroup: 'radioGroup',
      readonly: 'readOnly',
      referrerpolicy: 'referrerPolicy',
      rel: 'rel',
      required: 'required',
      reversed: 'reversed',
      role: 'role',
      rows: 'rows',
      rowspan: 'rowSpan',
      sandbox: 'sandbox',
      scope: 'scope',
      scoped: 'scoped',
      scrolling: 'scrolling',
      seamless: 'seamless',
      selected: 'selected',
      shape: 'shape',
      size: 'size',
      sizes: 'sizes',
      span: 'span',
      spellcheck: 'spellCheck',
      src: 'src',
      srcdoc: 'srcDoc',
      srclang: 'srcLang',
      srcset: 'srcSet',
      start: 'start',
      step: 'step',
      style: 'style',
      summary: 'summary',
      tabindex: 'tabIndex',
      target: 'target',
      title: 'title',
      type: 'type',
      usemap: 'useMap',
      value: 'value',
      width: 'width',
      wmode: 'wmode',
      wrap: 'wrap',

      // SVG
      about: 'about',
      accentheight: 'accentHeight',
      'accent-height': 'accentHeight',
      accumulate: 'accumulate',
      additive: 'additive',
      alignmentbaseline: 'alignmentBaseline',
      'alignment-baseline': 'alignmentBaseline',
      allowreorder: 'allowReorder',
      alphabetic: 'alphabetic',
      amplitude: 'amplitude',
      arabicform: 'arabicForm',
      'arabic-form': 'arabicForm',
      ascent: 'ascent',
      attributename: 'attributeName',
      attributetype: 'attributeType',
      autoreverse: 'autoReverse',
      azimuth: 'azimuth',
      basefrequency: 'baseFrequency',
      baselineshift: 'baselineShift',
      'baseline-shift': 'baselineShift',
      baseprofile: 'baseProfile',
      bbox: 'bbox',
      begin: 'begin',
      bias: 'bias',
      by: 'by',
      calcmode: 'calcMode',
      capheight: 'capHeight',
      'cap-height': 'capHeight',
      clip: 'clip',
      clippath: 'clipPath',
      'clip-path': 'clipPath',
      clippathunits: 'clipPathUnits',
      cliprule: 'clipRule',
      'clip-rule': 'clipRule',
      color: 'color',
      colorinterpolation: 'colorInterpolation',
      'color-interpolation': 'colorInterpolation',
      colorinterpolationfilters: 'colorInterpolationFilters',
      'color-interpolation-filters': 'colorInterpolationFilters',
      colorprofile: 'colorProfile',
      'color-profile': 'colorProfile',
      colorrendering: 'colorRendering',
      'color-rendering': 'colorRendering',
      contentscripttype: 'contentScriptType',
      contentstyletype: 'contentStyleType',
      cursor: 'cursor',
      cx: 'cx',
      cy: 'cy',
      d: 'd',
      datatype: 'datatype',
      decelerate: 'decelerate',
      descent: 'descent',
      diffuseconstant: 'diffuseConstant',
      direction: 'direction',
      display: 'display',
      divisor: 'divisor',
      dominantbaseline: 'dominantBaseline',
      'dominant-baseline': 'dominantBaseline',
      dur: 'dur',
      dx: 'dx',
      dy: 'dy',
      edgemode: 'edgeMode',
      elevation: 'elevation',
      enablebackground: 'enableBackground',
      'enable-background': 'enableBackground',
      end: 'end',
      exponent: 'exponent',
      externalresourcesrequired: 'externalResourcesRequired',
      fill: 'fill',
      fillopacity: 'fillOpacity',
      'fill-opacity': 'fillOpacity',
      fillrule: 'fillRule',
      'fill-rule': 'fillRule',
      filter: 'filter',
      filterres: 'filterRes',
      filterunits: 'filterUnits',
      floodopacity: 'floodOpacity',
      'flood-opacity': 'floodOpacity',
      floodcolor: 'floodColor',
      'flood-color': 'floodColor',
      focusable: 'focusable',
      fontfamily: 'fontFamily',
      'font-family': 'fontFamily',
      fontsize: 'fontSize',
      'font-size': 'fontSize',
      fontsizeadjust: 'fontSizeAdjust',
      'font-size-adjust': 'fontSizeAdjust',
      fontstretch: 'fontStretch',
      'font-stretch': 'fontStretch',
      fontstyle: 'fontStyle',
      'font-style': 'fontStyle',
      fontvariant: 'fontVariant',
      'font-variant': 'fontVariant',
      fontweight: 'fontWeight',
      'font-weight': 'fontWeight',
      format: 'format',
      from: 'from',
      fx: 'fx',
      fy: 'fy',
      g1: 'g1',
      g2: 'g2',
      glyphname: 'glyphName',
      'glyph-name': 'glyphName',
      glyphorientationhorizontal: 'glyphOrientationHorizontal',
      'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
      glyphorientationvertical: 'glyphOrientationVertical',
      'glyph-orientation-vertical': 'glyphOrientationVertical',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      hanging: 'hanging',
      horizadvx: 'horizAdvX',
      'horiz-adv-x': 'horizAdvX',
      horizoriginx: 'horizOriginX',
      'horiz-origin-x': 'horizOriginX',
      ideographic: 'ideographic',
      imagerendering: 'imageRendering',
      'image-rendering': 'imageRendering',
      in2: 'in2',
      'in': 'in',
      inlist: 'inlist',
      intercept: 'intercept',
      k1: 'k1',
      k2: 'k2',
      k3: 'k3',
      k4: 'k4',
      k: 'k',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      kerning: 'kerning',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      letterspacing: 'letterSpacing',
      'letter-spacing': 'letterSpacing',
      lightingcolor: 'lightingColor',
      'lighting-color': 'lightingColor',
      limitingconeangle: 'limitingConeAngle',
      local: 'local',
      markerend: 'markerEnd',
      'marker-end': 'markerEnd',
      markerheight: 'markerHeight',
      markermid: 'markerMid',
      'marker-mid': 'markerMid',
      markerstart: 'markerStart',
      'marker-start': 'markerStart',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      mask: 'mask',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      mathematical: 'mathematical',
      mode: 'mode',
      numoctaves: 'numOctaves',
      offset: 'offset',
      opacity: 'opacity',
      operator: 'operator',
      order: 'order',
      orient: 'orient',
      orientation: 'orientation',
      origin: 'origin',
      overflow: 'overflow',
      overlineposition: 'overlinePosition',
      'overline-position': 'overlinePosition',
      overlinethickness: 'overlineThickness',
      'overline-thickness': 'overlineThickness',
      paintorder: 'paintOrder',
      'paint-order': 'paintOrder',
      panose1: 'panose1',
      'panose-1': 'panose1',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointerevents: 'pointerEvents',
      'pointer-events': 'pointerEvents',
      points: 'points',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      prefix: 'prefix',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      property: 'property',
      r: 'r',
      radius: 'radius',
      refx: 'refX',
      refy: 'refY',
      renderingintent: 'renderingIntent',
      'rendering-intent': 'renderingIntent',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      resource: 'resource',
      restart: 'restart',
      result: 'result',
      results: 'results',
      rotate: 'rotate',
      rx: 'rx',
      ry: 'ry',
      scale: 'scale',
      security: 'security',
      seed: 'seed',
      shaperendering: 'shapeRendering',
      'shape-rendering': 'shapeRendering',
      slope: 'slope',
      spacing: 'spacing',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      speed: 'speed',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stemh: 'stemh',
      stemv: 'stemv',
      stitchtiles: 'stitchTiles',
      stopcolor: 'stopColor',
      'stop-color': 'stopColor',
      stopopacity: 'stopOpacity',
      'stop-opacity': 'stopOpacity',
      strikethroughposition: 'strikethroughPosition',
      'strikethrough-position': 'strikethroughPosition',
      strikethroughthickness: 'strikethroughThickness',
      'strikethrough-thickness': 'strikethroughThickness',
      string: 'string',
      stroke: 'stroke',
      strokedasharray: 'strokeDasharray',
      'stroke-dasharray': 'strokeDasharray',
      strokedashoffset: 'strokeDashoffset',
      'stroke-dashoffset': 'strokeDashoffset',
      strokelinecap: 'strokeLinecap',
      'stroke-linecap': 'strokeLinecap',
      strokelinejoin: 'strokeLinejoin',
      'stroke-linejoin': 'strokeLinejoin',
      strokemiterlimit: 'strokeMiterlimit',
      'stroke-miterlimit': 'strokeMiterlimit',
      strokewidth: 'strokeWidth',
      'stroke-width': 'strokeWidth',
      strokeopacity: 'strokeOpacity',
      'stroke-opacity': 'strokeOpacity',
      suppresscontenteditablewarning: 'suppressContentEditableWarning',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textanchor: 'textAnchor',
      'text-anchor': 'textAnchor',
      textdecoration: 'textDecoration',
      'text-decoration': 'textDecoration',
      textlength: 'textLength',
      textrendering: 'textRendering',
      'text-rendering': 'textRendering',
      to: 'to',
      transform: 'transform',
      'typeof': 'typeof',
      u1: 'u1',
      u2: 'u2',
      underlineposition: 'underlinePosition',
      'underline-position': 'underlinePosition',
      underlinethickness: 'underlineThickness',
      'underline-thickness': 'underlineThickness',
      unicode: 'unicode',
      unicodebidi: 'unicodeBidi',
      'unicode-bidi': 'unicodeBidi',
      unicoderange: 'unicodeRange',
      'unicode-range': 'unicodeRange',
      unitsperem: 'unitsPerEm',
      'units-per-em': 'unitsPerEm',
      unselectable: 'unselectable',
      valphabetic: 'vAlphabetic',
      'v-alphabetic': 'vAlphabetic',
      values: 'values',
      vectoreffect: 'vectorEffect',
      'vector-effect': 'vectorEffect',
      version: 'version',
      vertadvy: 'vertAdvY',
      'vert-adv-y': 'vertAdvY',
      vertoriginx: 'vertOriginX',
      'vert-origin-x': 'vertOriginX',
      vertoriginy: 'vertOriginY',
      'vert-origin-y': 'vertOriginY',
      vhanging: 'vHanging',
      'v-hanging': 'vHanging',
      videographic: 'vIdeographic',
      'v-ideographic': 'vIdeographic',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      visibility: 'visibility',
      vmathematical: 'vMathematical',
      'v-mathematical': 'vMathematical',
      vocab: 'vocab',
      widths: 'widths',
      wordspacing: 'wordSpacing',
      'word-spacing': 'wordSpacing',
      writingmode: 'writingMode',
      'writing-mode': 'writingMode',
      x1: 'x1',
      x2: 'x2',
      x: 'x',
      xchannelselector: 'xChannelSelector',
      xheight: 'xHeight',
      'x-height': 'xHeight',
      xlinkactuate: 'xlinkActuate',
      'xlink:actuate': 'xlinkActuate',
      xlinkarcrole: 'xlinkArcrole',
      'xlink:arcrole': 'xlinkArcrole',
      xlinkhref: 'xlinkHref',
      'xlink:href': 'xlinkHref',
      xlinkrole: 'xlinkRole',
      'xlink:role': 'xlinkRole',
      xlinkshow: 'xlinkShow',
      'xlink:show': 'xlinkShow',
      xlinktitle: 'xlinkTitle',
      'xlink:title': 'xlinkTitle',
      xlinktype: 'xlinkType',
      'xlink:type': 'xlinkType',
      xmlbase: 'xmlBase',
      'xml:base': 'xmlBase',
      xmllang: 'xmlLang',
      'xml:lang': 'xmlLang',
      xmlns: 'xmlns',
      'xml:space': 'xmlSpace',
      xmlnsxlink: 'xmlnsXlink',
      'xmlns:xlink': 'xmlnsXlink',
      xmlspace: 'xmlSpace',
      y1: 'y1',
      y2: 'y2',
      y: 'y',
      ychannelselector: 'yChannelSelector',
      z: 'z',
      zoomandpan: 'zoomAndPan'
    };

    var possibleStandardNames_1 = possibleStandardNames$1;

    {
      var warning$16 = require$$0;

      var _require$7 = ReactGlobalSharedState_1,
          ReactComponentTreeHook$3 = _require$7.ReactComponentTreeHook,
          ReactDebugCurrentFrame$3 = _require$7.ReactDebugCurrentFrame;

      var getStackAddendumByID$2 = ReactComponentTreeHook$3.getStackAddendumByID;
    }

    function getStackAddendum$2(debugID) {
      if (debugID != null) {
        // This can only happen on Stack
        return getStackAddendumByID$2(debugID);
      } else {
        // This can only happen on Fiber / Server
        var stack = ReactDebugCurrentFrame$3.getStackAddendum();
        return stack != null ? stack : '';
      }
    }

    {
      var warnedProperties$1 = {};
      var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
      var EVENT_NAME_REGEX = /^on[A-Z]/;
      var rARIA$1 = new RegExp('^(aria)-[' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
      var possibleStandardNames = possibleStandardNames_1;

      var validateProperty$1 = function (tagName, name, value, debugID) {
        if (hasOwnProperty$1.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }

        if (EventPluginRegistry_1.registrationNameModules.hasOwnProperty(name)) {
          return true;
        }

        if (EventPluginRegistry_1.plugins.length === 0 && EVENT_NAME_REGEX.test(name)) {
          // If no event plugins have been injected, we might be in a server environment.
          // Don't check events in this case.
          return true;
        }

        var lowerCasedName = name.toLowerCase();
        var registrationName = EventPluginRegistry_1.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry_1.possibleRegistrationNames[lowerCasedName] : null;

        if (registrationName != null) {
          warning$16(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2(debugID));
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName.indexOf('on') === 0) {
          warning$16(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2(debugID));
          warnedProperties$1[name] = true;
          return true;
        }

        // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }

        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
          warning$16(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'innerhtml') {
          warning$16(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'aria') {
          warning$16(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
          warning$16(false, 'Received a `%s` for string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2(debugID));
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'number' && isNaN(value)) {
          warning$16(false, 'Received NaN for numeric attribute `%s`. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2(debugID));
          warnedProperties$1[name] = true;
          return true;
        }

        var isReserved = DOMProperty_1.isReservedProp(name);

        // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];
          if (standardName !== name) {
            warning$16(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2(debugID));
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          // Unknown attributes should have lowercase casing since that's how they
          // will be cased anyway with server rendering.
          warning$16(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2(debugID));
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'boolean') {
          warning$16(DOMProperty_1.shouldAttributeAcceptBooleanValue(name), 'Received `%s` for non-boolean attribute `%s`. If this is expected, cast ' + 'the value to a string.%s', value, name, getStackAddendum$2(debugID));
          warnedProperties$1[name] = true;
          return true;
        }

        // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) {
          return true;
        }

        // Warn when a known attribute is a bad type
        if (!DOMProperty_1.shouldSetAttribute(name, value)) {
          warnedProperties$1[name] = true;
          return false;
        }

        return true;
      };
    }

    var warnUnknownProperties = function (type, props, debugID) {
      var unknownProps = [];
      for (var key in props) {
        var isValid = validateProperty$1(type, key, props[key], debugID);
        if (!isValid) {
          unknownProps.push(key);
        }
      }

      var unknownPropString = unknownProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');
      if (unknownProps.length === 1) {
        warning$16(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2(debugID));
      } else if (unknownProps.length > 1) {
        warning$16(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2(debugID));
      }
    };

    function validateProperties$2(type, props, debugID /* Stack only */) {
      if (isCustomComponent_1(type, props)) {
        return;
      }
      warnUnknownProperties(type, props, debugID);
    }

    var ReactDOMUnknownPropertyHook$1 = {
      // Fiber
      validateProperties: validateProperties$2,
      // Stack
      onBeforeMountComponent: function (debugID, element) {
        if (true && element != null && typeof element.type === 'string') {
          validateProperties$2(element.type, element.props, debugID);
        }
      },
      onBeforeUpdateComponent: function (debugID, element) {
        if (true && element != null && typeof element.type === 'string') {
          validateProperties$2(element.type, element.props, debugID);
        }
      }
    };

    var ReactDOMUnknownPropertyHook_1 = ReactDOMUnknownPropertyHook$1;

    var getCurrentFiberOwnerName = ReactDebugCurrentFiber_1.getCurrentFiberOwnerName;

    var DOCUMENT_NODE$1 = HTMLNodeType_1.DOCUMENT_NODE;
    var DOCUMENT_FRAGMENT_NODE$1 = HTMLNodeType_1.DOCUMENT_FRAGMENT_NODE;

    {
      var warning$3 = require$$0;

      var _require3$1 = ReactDebugCurrentFiber_1,
          getCurrentFiberStackAddendum = _require3$1.getCurrentFiberStackAddendum;

      var ReactDOMInvalidARIAHook = ReactDOMInvalidARIAHook_1;
      var ReactDOMNullInputValuePropHook = ReactDOMNullInputValuePropHook_1;
      var ReactDOMUnknownPropertyHook = ReactDOMUnknownPropertyHook_1;
      var validateARIAProperties = ReactDOMInvalidARIAHook.validateProperties;
      var validateInputProperties = ReactDOMNullInputValuePropHook.validateProperties;
      var validateUnknownProperties = ReactDOMUnknownPropertyHook.validateProperties;
    }

    var didWarnInvalidHydration = false;
    var didWarnShadyDOM = false;

    var listenTo = ReactBrowserEventEmitter_1.listenTo;
    var registrationNameModules = EventPluginRegistry_1.registrationNameModules;

    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML = '__html';

    var HTML_NAMESPACE$1 = DOMNamespaces.Namespaces.html;
    var getIntrinsicNamespace$1 = DOMNamespaces.getIntrinsicNamespace;

    {
      var warnedUnknownTags = {
        // Chrome is the only major browser not shipping <time>. But as of July
        // 2017 it intends to ship it due to widespread usage. We intentionally
        // *don't* warn for <time> even if it's unrecognized by Chrome because
        // it soon will be, and many apps have been using it anyway.
        time: true
      };

      var validatePropertiesInDevelopment = function (type, props) {
        validateARIAProperties(type, props);
        validateInputProperties(type, props);
        validateUnknownProperties(type, props);
      };

      var warnForTextDifference = function (serverText, clientText) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        warning$3(false, 'Text content did not match. Server: "%s" Client: "%s"', serverText, clientText);
      };

      var warnForPropDifference = function (propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        warning$3(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(serverValue), JSON.stringify(clientValue));
      };

      var warnForExtraAttributes = function (attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function (name) {
          names.push(name);
        });
        warning$3(false, 'Extra attributes from the server: %s', names);
      };

      var warnForInvalidEventListener = function (registrationName, listener) {
        warning$3(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum());
      };

      var testDocument;
      // Parse the HTML and read it back to normalize the HTML string so that it
      // can be used for comparison.
      var normalizeHTML = function (parent, html) {
        if (!testDocument) {
          testDocument = document.implementation.createHTMLDocument();
        }
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? testDocument.createElement(parent.tagName) : testDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }

    function ensureListeningTo(rootContainerElement, registrationName) {
      var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE$1 || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE$1;
      var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
      listenTo(registrationName, doc);
    }

    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE$1 ? rootContainerElement : rootContainerElement.ownerDocument;
    }

    // There are so many media events, it makes sense to just
    // maintain a list rather than create a `trapBubbledEvent` for each
    var mediaEvents = {
      topAbort: 'abort',
      topCanPlay: 'canplay',
      topCanPlayThrough: 'canplaythrough',
      topDurationChange: 'durationchange',
      topEmptied: 'emptied',
      topEncrypted: 'encrypted',
      topEnded: 'ended',
      topError: 'error',
      topLoadedData: 'loadeddata',
      topLoadedMetadata: 'loadedmetadata',
      topLoadStart: 'loadstart',
      topPause: 'pause',
      topPlay: 'play',
      topPlaying: 'playing',
      topProgress: 'progress',
      topRateChange: 'ratechange',
      topSeeked: 'seeked',
      topSeeking: 'seeking',
      topStalled: 'stalled',
      topSuspend: 'suspend',
      topTimeUpdate: 'timeupdate',
      topVolumeChange: 'volumechange',
      topWaiting: 'waiting'
    };

    function trapClickOnNonInteractiveElement(node) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
      // Just set it using the onclick property so that we don't have to manage any
      // bookkeeping for it. Not sure if we need to clear it when the listener is
      // removed.
      // TODO: Only do this for the relevant Safaris maybe?
      node.onclick = emptyFunction;
    }

    function setInitialDOMProperties(domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = nextProps[propKey];
        if (propKey === STYLE) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          }
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          CSSPropertyOperations_1.setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;
          if (nextHtml != null) {
            setInnerHTML_1(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string') {
            setTextContent_1(domElement, nextProp);
          } else if (typeof nextProp === 'number') {
            setTextContent_1(domElement, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING) {
          // Noop
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (isCustomComponentTag) {
          DOMPropertyOperations_1.setValueForAttribute(domElement, propKey, nextProp);
        } else if (nextProp != null) {
          // If we're updating to null or undefined, we should remove the property
          // from the DOM node instead of inadvertently setting to a string. This
          // brings us in line with the same behavior we have on initial render.
          DOMPropertyOperations_1.setValueForProperty(domElement, propKey, nextProp);
        }
      }
    }

    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      // TODO: Handle wasCustomComponentTag
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];
        if (propKey === STYLE) {
          CSSPropertyOperations_1.setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML_1(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent_1(domElement, propValue);
        } else if (isCustomComponentTag) {
          if (propValue != null) {
            DOMPropertyOperations_1.setValueForAttribute(domElement, propKey, propValue);
          } else {
            DOMPropertyOperations_1.deleteValueForAttribute(domElement, propKey);
          }
        } else if (propValue != null) {
          DOMPropertyOperations_1.setValueForProperty(domElement, propKey, propValue);
        } else {
          // If we're updating to null or undefined, we should remove the property
          // from the DOM node instead of inadvertently setting to a string. This
          // brings us in line with the same behavior we have on initial render.
          DOMPropertyOperations_1.deleteValueForProperty(domElement, propKey);
        }
      }
    }

    var ReactDOMFiberComponent = {
      createElement: function (type, props, rootContainerElement, parentNamespace) {
        // We create tags in the namespace of their parent container, except HTML
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) {
          namespaceURI = getIntrinsicNamespace$1(type);
        }
        if (namespaceURI === HTML_NAMESPACE$1) {
          {
            var isCustomComponentTag = isCustomComponent_1(type, props);
            // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            warning$3(isCustomComponentTag || type === type.toLowerCase(), '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' + 'in React.', type);
          }

          if (type === 'script') {
            // Create the script via .innerHTML so its "parser-inserted" flag is
            // set to true and it does not execute
            var div = ownerDocument.createElement('div');
            div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
            // This is guaranteed to yield a script element.
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === 'string') {
            // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, { is: props.is });
          } else {
            // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
            // See discussion in https://github.com/facebook/react/pull/6896
            // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
            domElement = ownerDocument.createElement(type);
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }

        {
          if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              warning$3(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
            }
          }
        }

        return domElement;
      },
      createTextNode: function (text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      },
      setInitialProperties: function (domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent_1(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
          if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
            warning$3(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName() || 'A component');
            didWarnShadyDOM = true;
          }
        }

        // TODO: Make sure that we check isMounted before firing any of these events.
        var props;
        switch (tag) {
          case 'iframe':
          case 'object':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', domElement);
            props = rawProps;
            break;
          case 'video':
          case 'audio':
            // Create listener for each media event
            for (var event in mediaEvents) {
              if (mediaEvents.hasOwnProperty(event)) {
                ReactBrowserEventEmitter_1.trapBubbledEvent(event, mediaEvents[event], domElement);
              }
            }
            props = rawProps;
            break;
          case 'source':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', domElement);
            props = rawProps;
            break;
          case 'img':
          case 'image':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', domElement);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', domElement);
            props = rawProps;
            break;
          case 'form':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topReset', 'reset', domElement);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topSubmit', 'submit', domElement);
            props = rawProps;
            break;
          case 'details':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topToggle', 'toggle', domElement);
            props = rawProps;
            break;
          case 'input':
            ReactDOMFiberInput.initWrapperState(domElement, rawProps);
            props = ReactDOMFiberInput.getHostProps(domElement, rawProps);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
            // For controlled components we always need to ensure we're listening
            // to onChange. Even if there is no listener.
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          case 'option':
            ReactDOMFiberOption.validateProps(domElement, rawProps);
            props = ReactDOMFiberOption.getHostProps(domElement, rawProps);
            break;
          case 'select':
            ReactDOMFiberSelect.initWrapperState(domElement, rawProps);
            props = ReactDOMFiberSelect.getHostProps(domElement, rawProps);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
            // For controlled components we always need to ensure we're listening
            // to onChange. Even if there is no listener.
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          case 'textarea':
            ReactDOMFiberTextarea.initWrapperState(domElement, rawProps);
            props = ReactDOMFiberTextarea.getHostProps(domElement, rawProps);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
            // For controlled components we always need to ensure we're listening
            // to onChange. Even if there is no listener.
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          default:
            props = rawProps;
        }

        assertValidProps_1(tag, props, getCurrentFiberOwnerName);

        setInitialDOMProperties(domElement, rootContainerElement, props, isCustomComponentTag);

        switch (tag) {
          case 'input':
            // TODO: Make sure we check if this is still unmounted or do any clean
            // up necessary since we never stop tracking anymore.
            inputValueTracking_1.track(domElement);
            ReactDOMFiberInput.postMountWrapper(domElement, rawProps);
            break;
          case 'textarea':
            // TODO: Make sure we check if this is still unmounted or do any clean
            // up necessary since we never stop tracking anymore.
            inputValueTracking_1.track(domElement);
            ReactDOMFiberTextarea.postMountWrapper(domElement, rawProps);
            break;
          case 'option':
            ReactDOMFiberOption.postMountWrapper(domElement, rawProps);
            break;
          case 'select':
            ReactDOMFiberSelect.postMountWrapper(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === 'function') {
              // TODO: This cast may not be sound for SVG, MathML or custom elements.
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      },

      // Calculate the diff between the two objects.
      diffProperties: function (domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }

        var updatePayload = null;

        var lastProps;
        var nextProps;
        switch (tag) {
          case 'input':
            lastProps = ReactDOMFiberInput.getHostProps(domElement, lastRawProps);
            nextProps = ReactDOMFiberInput.getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case 'option':
            lastProps = ReactDOMFiberOption.getHostProps(domElement, lastRawProps);
            nextProps = ReactDOMFiberOption.getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case 'select':
            lastProps = ReactDOMFiberSelect.getHostProps(domElement, lastRawProps);
            nextProps = ReactDOMFiberSelect.getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case 'textarea':
            lastProps = ReactDOMFiberTextarea.getHostProps(domElement, lastRawProps);
            nextProps = ReactDOMFiberTextarea.getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
              // TODO: This cast may not be sound for SVG, MathML or custom elements.
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }

        assertValidProps_1(tag, nextProps, getCurrentFiberOwnerName);

        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = '';
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
            // Noop. This is handled by the clear text mechanism.
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING) {
            // Noop
          } else if (registrationNameModules.hasOwnProperty(propKey)) {
            // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            // For all other deleted properties we add it to the queue. We use
            // the whitelist in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : undefined;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              // Unset styles on `lastProp` but not on `nextProp`.
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = '';
                }
              }
              // Update styles that changed since `lastProp`.
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              // Relies on `updateStylesByID` not mutating `styleUpdates`.
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML] : undefined;
            var lastHtml = lastProp ? lastProp[HTML] : undefined;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
              }
            } else {
              // TODO: It might be too late to clear this if we have children
              // inserted already.
            }
          } else if (propKey === CHILDREN) {
            if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
              (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING) {
            // Noop
          } else if (registrationNameModules.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              // We eagerly listen to this even though we haven't committed yet.
              if (true && typeof nextProp !== 'function') {
                warnForInvalidEventListener(propKey, nextProp);
              }
              ensureListeningTo(rootContainerElement, propKey);
            }
            if (!updatePayload && lastProp !== nextProp) {
              // This is a special case. If any listener updates we need to ensure
              // that the "current" props pointer gets updated so we need a commit
              // to update this element.
              updatePayload = [];
            }
          } else {
            // For any other property we always add it to the queue and then we
            // filter it out using the whitelist during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      },

      // Apply the diff.
      updateProperties: function (domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        var wasCustomComponentTag = isCustomComponent_1(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent_1(tag, nextRawProps);
        // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

        // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch (tag) {
          case 'input':
            // Update the wrapper around inputs *after* updating props. This has to
            // happen after `updateDOMProperties`. Otherwise HTML5 input validations
            // raise warnings and prevent the new value from being assigned.
            ReactDOMFiberInput.updateWrapper(domElement, nextRawProps);

            // We also check that we haven't missed a value update, such as a
            // Radio group shifting the checked value to another named radio input.
            inputValueTracking_1.updateValueIfChanged(domElement);
            break;
          case 'textarea':
            ReactDOMFiberTextarea.updateWrapper(domElement, nextRawProps);
            break;
          case 'select':
            // <select> value update needs to occur after <option> children
            // reconciliation
            ReactDOMFiberSelect.postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      },
      diffHydratedProperties: function (domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        {
          var isCustomComponentTag = isCustomComponent_1(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
          if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
            warning$3(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName() || 'A component');
            didWarnShadyDOM = true;
          }
        }

        // TODO: Make sure that we check isMounted before firing any of these events.
        switch (tag) {
          case 'iframe':
          case 'object':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', domElement);
            break;
          case 'video':
          case 'audio':
            // Create listener for each media event
            for (var event in mediaEvents) {
              if (mediaEvents.hasOwnProperty(event)) {
                ReactBrowserEventEmitter_1.trapBubbledEvent(event, mediaEvents[event], domElement);
              }
            }
            break;
          case 'source':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', domElement);
            break;
          case 'img':
          case 'image':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', domElement);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', domElement);
            break;
          case 'form':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topReset', 'reset', domElement);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topSubmit', 'submit', domElement);
            break;
          case 'details':
            ReactBrowserEventEmitter_1.trapBubbledEvent('topToggle', 'toggle', domElement);
            break;
          case 'input':
            ReactDOMFiberInput.initWrapperState(domElement, rawProps);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
            // For controlled components we always need to ensure we're listening
            // to onChange. Even if there is no listener.
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          case 'option':
            ReactDOMFiberOption.validateProps(domElement, rawProps);
            break;
          case 'select':
            ReactDOMFiberSelect.initWrapperState(domElement, rawProps);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
            // For controlled components we always need to ensure we're listening
            // to onChange. Even if there is no listener.
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
          case 'textarea':
            ReactDOMFiberTextarea.initWrapperState(domElement, rawProps);
            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
            // For controlled components we always need to ensure we're listening
            // to onChange. Even if there is no listener.
            ensureListeningTo(rootContainerElement, 'onChange');
            break;
        }

        assertValidProps_1(tag, rawProps, getCurrentFiberOwnerName);

        {
          var extraAttributeNames = new Set();
          var attributes = domElement.attributes;
          for (var i = 0; i < attributes.length; i++) {
            var name = attributes[i].name.toLowerCase();
            switch (name) {
              // Built-in SSR attribute is whitelisted
              case 'data-reactroot':
                break;
              // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              case 'value':
                break;
              case 'checked':
                break;
              case 'selected':
                break;
              default:
                // Intentionally use the original name.
                // See discussion in https://github.com/facebook/react/pull/10676.
                extraAttributeNames.add(attributes[i].name);
            }
          }
        }

        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            // For text content children we compare against textContent. This
            // might match additional HTML that is hidden when we read it using
            // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
            // satisfies our requirement. Our requirement is not to produce perfect
            // HTML and attributes. Ideally we should preserve structure but it's
            // ok not to if the visible content is still enough to indicate what
            // even listeners these nodes might be wired up to.
            // TODO: Warn if there is more than a single textNode as a child.
            // TODO: Should we use domElement.firstChild.nodeValue to compare?
            if (typeof nextProp === 'string') {
              if (domElement.textContent !== nextProp) {
                {
                  warnForTextDifference(domElement.textContent, nextProp);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === 'number') {
              if (domElement.textContent !== '' + nextProp) {
                {
                  warnForTextDifference(domElement.textContent, nextProp);
                }
                updatePayload = [CHILDREN, '' + nextProp];
              }
            }
          } else if (registrationNameModules.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (true && typeof nextProp !== 'function') {
                warnForInvalidEventListener(propKey, nextProp);
              }
              ensureListeningTo(rootContainerElement, propKey);
            }
          } else {
            // Validate that the properties correspond to their expected values.
            var serverValue;
            var propertyInfo;
            if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
            // Controlled attributes are not validated
            // TODO: Only ignore them on controlled tags.
            propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
              // Noop
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var rawHtml = nextProp ? nextProp[HTML] || '' : '';
              var serverHTML = domElement.innerHTML;
              var expectedHTML = normalizeHTML(domElement, rawHtml);
              if (expectedHTML !== serverHTML) {
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
            } else if (propKey === STYLE) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames['delete'](propKey);
              var expectedStyle = CSSPropertyOperations_1.createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute('style');
              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            } else if (isCustomComponentTag) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames['delete'](propKey.toLowerCase());
              serverValue = DOMPropertyOperations_1.getValueForAttribute(domElement, propKey, nextProp);

              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (DOMProperty_1.shouldSetAttribute(propKey, nextProp)) {
              if (propertyInfo = DOMProperty_1.getPropertyInfo(propKey)) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames['delete'](propertyInfo.attributeName);
                serverValue = DOMPropertyOperations_1.getValueForProperty(domElement, propKey, nextProp);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE$1) {
                  ownNamespace = getIntrinsicNamespace$1(tag);
                }
                if (ownNamespace === HTML_NAMESPACE$1) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames['delete'](propKey.toLowerCase());
                } else {
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames['delete'](propKey);
                }
                serverValue = DOMPropertyOperations_1.getValueForAttribute(domElement, propKey, nextProp);
              }

              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }

        {
          // $FlowFixMe - Should be inferred as not undefined.
          if (extraAttributeNames.size > 0) {
            // $FlowFixMe - Should be inferred as not undefined.
            warnForExtraAttributes(extraAttributeNames);
          }
        }

        switch (tag) {
          case 'input':
            // TODO: Make sure we check if this is still unmounted or do any clean
            // up necessary since we never stop tracking anymore.
            inputValueTracking_1.track(domElement);
            ReactDOMFiberInput.postMountWrapper(domElement, rawProps);
            break;
          case 'textarea':
            // TODO: Make sure we check if this is still unmounted or do any clean
            // up necessary since we never stop tracking anymore.
            inputValueTracking_1.track(domElement);
            ReactDOMFiberTextarea.postMountWrapper(domElement, rawProps);
            break;
          case 'select':
          case 'option':
            // For input and textarea we current always set the value property at
            // post mount to force it to diverge from attributes. However, for
            // option and select we don't quite do the same thing and select
            // is not resilient to the DOM state changing so we don't do that here.
            // TODO: Consider not doing this for input and textarea.
            break;
          default:
            if (typeof rawProps.onClick === 'function') {
              // TODO: This cast may not be sound for SVG, MathML or custom elements.
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }

        return updatePayload;
      },
      diffHydratedText: function (textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        {
          if (isDifferent) {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        return isDifferent;
      },
      warnForDeletedHydratableElement: function (parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          warning$3(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      },
      warnForDeletedHydratableText: function (parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          warning$3(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      },
      warnForInsertedHydratedElement: function (parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          warning$3(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
        }
      },
      warnForInsertedHydratedText: function (parentNode, text) {
        {
          if (text === '') {
            // We expect to insert empty text nodes since they're not represented in
            // the HTML.
            // TODO: Remove this special case if we can just avoid inserting empty
            // text nodes.
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          warning$3(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      },
      restoreControlledState: function (domElement, tag, props) {
        switch (tag) {
          case 'input':
            ReactDOMFiberInput.restoreControlledState(domElement, props);
            return;
          case 'textarea':
            ReactDOMFiberTextarea.restoreControlledState(domElement, props);
            return;
          case 'select':
            ReactDOMFiberSelect.restoreControlledState(domElement, props);
            return;
        }
      }
    };

    var ReactDOMFiberComponent_1 = ReactDOMFiberComponent;

    // This is a built-in polyfill for requestIdleCallback. It works by scheduling
    // a requestAnimationFrame, storing the time for the start of the frame, then
    // scheduling a postMessage which gets scheduled after paint. Within the
    // postMessage handler do as much work as possible until time + frame rate.
    // By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.


    {
      var warning$17 = require$$0;

      if (ExecutionEnvironment.canUseDOM && typeof requestAnimationFrame !== 'function') {
        warning$17(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
      }
    }

    // TODO: There's no way to cancel, because Fiber doesn't atm.
    var rIC = void 0;

    if (!ExecutionEnvironment.canUseDOM) {
      rIC = function (frameCallback) {
        setTimeout(function () {
          frameCallback({
            timeRemaining: function () {
              return Infinity;
            }
          });
        });
        return 0;
      };
    } else if (typeof requestIdleCallback !== 'function') {
      // Polyfill requestIdleCallback.

      var scheduledRAFCallback = null;
      var scheduledRICCallback = null;

      var isIdleScheduled = false;
      var isAnimationFrameScheduled = false;

      var frameDeadline = 0;
      // We start out assuming that we run at 30fps but then the heuristic tracking
      // will adjust this value to a faster fps if we get more frequent animation
      // frames.
      var previousFrameTime = 33;
      var activeFrameTime = 33;

      var frameDeadlineObject = {
        timeRemaining: typeof performance === 'object' && typeof performance.now === 'function' ? function () {
          // We assume that if we have a performance timer that the rAF callback
          // gets a performance timer value. Not sure if this is always true.
          return frameDeadline - performance.now();
        } : function () {
          // As a fallback we use Date.now.
          return frameDeadline - Date.now();
        }
      };

      // We use the postMessage trick to defer idle work until after the repaint.
      var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
      var idleTick = function (event) {
        if (event.source !== window || event.data !== messageKey) {
          return;
        }
        isIdleScheduled = false;
        var callback = scheduledRICCallback;
        scheduledRICCallback = null;
        if (callback !== null) {
          callback(frameDeadlineObject);
        }
      };
      // Assumes that we have addEventListener in this environment. Might need
      // something better for old IE.
      window.addEventListener('message', idleTick, false);

      var animationTick = function (rafTime) {
        isAnimationFrameScheduled = false;
        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
          if (nextFrameTime < 8) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If we get lower than that, it is probably a bug.
            nextFrameTime = 8;
          }
          // If one frame goes long, then the next one can be short to catch up.
          // If two frames are short in a row, then that's an indication that we
          // actually have a higher frame rate than what we're currently optimizing.
          // We adjust our heuristic dynamically accordingly. For example, if we're
          // running on 120hz display or 90hz VR display.
          // Take the max of the two in case one of them was an anomaly due to
          // missed frame deadlines.
          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
        } else {
          previousFrameTime = nextFrameTime;
        }
        frameDeadline = rafTime + activeFrameTime;
        if (!isIdleScheduled) {
          isIdleScheduled = true;
          window.postMessage(messageKey, '*');
        }
        var callback = scheduledRAFCallback;
        scheduledRAFCallback = null;
        if (callback !== null) {
          callback(rafTime);
        }
      };

      rIC = function (callback) {
        // This assumes that we only schedule one callback at a time because that's
        // how Fiber uses it.
        scheduledRICCallback = callback;
        if (!isAnimationFrameScheduled) {
          // If rAF didn't already schedule one, we need to schedule a frame.
          // TODO: If this rAF doesn't materialize because the browser throttles, we
          // might want to still have setTimeout trigger rIC as a backup to ensure
          // that we keep performing work.
          isAnimationFrameScheduled = true;
          requestAnimationFrame(animationTick);
        }
        return 0;
      };
    } else {
      rIC = requestIdleCallback;
    }

    var rIC_1 = rIC;

    var ReactDOMFrameScheduling = {
      rIC: rIC_1
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactFeatureFlags
     * 
     */

    var ReactFeatureFlags = {
      enableAsyncSubtreeAPI: true
    };

    var ReactFeatureFlags_1 = ReactFeatureFlags;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactPriorityLevel
     * 
     */

    var ReactPriorityLevel = {
      NoWork: 0, // No work is pending.
      SynchronousPriority: 1, // For controlled text inputs. Synchronous side-effects.
      TaskPriority: 2, // Completes at the end of the current tick.
      HighPriority: 3, // Interaction that needs to complete pretty soon to feel responsive.
      LowPriority: 4, // Data fetching, or result from updating stores.
      OffscreenPriority: 5 };

    var CallbackEffect = ReactTypeOfSideEffect.Callback;

    var NoWork = ReactPriorityLevel.NoWork;
    var SynchronousPriority = ReactPriorityLevel.SynchronousPriority;
    var TaskPriority = ReactPriorityLevel.TaskPriority;

    var ClassComponent$2 = ReactTypeOfWork.ClassComponent;
    var HostRoot$2 = ReactTypeOfWork.HostRoot;

    {
      var warning$19 = require$$0;
    }

    // Callbacks are not validated until invocation


    // Singly linked-list of updates. When an update is scheduled, it is added to
    // the queue of the current fiber and the work-in-progress fiber. The two queues
    // are separate but they share a persistent structure.
    //
    // During reconciliation, updates are removed from the work-in-progress fiber,
    // but they remain on the current fiber. That ensures that if a work-in-progress
    // is aborted, the aborted updates are recovered by cloning from current.
    //
    // The work-in-progress queue is always a subset of the current queue.
    //
    // When the tree is committed, the work-in-progress becomes the current.


    var _queue1 = void 0;
    var _queue2 = void 0;

    function comparePriority(a, b) {
      // When comparing update priorities, treat sync and Task work as equal.
      // TODO: Could we avoid the need for this by always coercing sync priority
      // to Task when scheduling an update?
      if ((a === TaskPriority || a === SynchronousPriority) && (b === TaskPriority || b === SynchronousPriority)) {
        return 0;
      }
      if (a === NoWork && b !== NoWork) {
        return -255;
      }
      if (a !== NoWork && b === NoWork) {
        return 255;
      }
      return a - b;
    }

    function createUpdateQueue() {
      var queue = {
        first: null,
        last: null,
        hasForceUpdate: false,
        callbackList: null
      };
      {
        queue.isProcessing = false;
      }
      return queue;
    }

    function cloneUpdate(update) {
      return {
        priorityLevel: update.priorityLevel,
        partialState: update.partialState,
        callback: update.callback,
        isReplace: update.isReplace,
        isForced: update.isForced,
        isTopLevelUnmount: update.isTopLevelUnmount,
        next: null
      };
    }

    function insertUpdateIntoQueue(queue, update, insertAfter, insertBefore) {
      if (insertAfter !== null) {
        insertAfter.next = update;
      } else {
        // This is the first item in the queue.
        update.next = queue.first;
        queue.first = update;
      }

      if (insertBefore !== null) {
        update.next = insertBefore;
      } else {
        // This is the last item in the queue.
        queue.last = update;
      }
    }

    // Returns the update after which the incoming update should be inserted into
    // the queue, or null if it should be inserted at beginning.
    function findInsertionPosition(queue, update) {
      var priorityLevel = update.priorityLevel;
      var insertAfter = null;
      var insertBefore = null;
      if (queue.last !== null && comparePriority(queue.last.priorityLevel, priorityLevel) <= 0) {
        // Fast path for the common case where the update should be inserted at
        // the end of the queue.
        insertAfter = queue.last;
      } else {
        insertBefore = queue.first;
        while (insertBefore !== null && comparePriority(insertBefore.priorityLevel, priorityLevel) <= 0) {
          insertAfter = insertBefore;
          insertBefore = insertBefore.next;
        }
      }
      return insertAfter;
    }

    function ensureUpdateQueues(fiber) {
      var alternateFiber = fiber.alternate;

      var queue1 = fiber.updateQueue;
      if (queue1 === null) {
        queue1 = fiber.updateQueue = createUpdateQueue();
      }

      var queue2 = void 0;
      if (alternateFiber !== null) {
        queue2 = alternateFiber.updateQueue;
        if (queue2 === null) {
          queue2 = alternateFiber.updateQueue = createUpdateQueue();
        }
      } else {
        queue2 = null;
      }

      _queue1 = queue1;
      // Return null if there is no alternate queue, or if its queue is the same.
      _queue2 = queue2 !== queue1 ? queue2 : null;
    }

    // The work-in-progress queue is a subset of the current queue (if it exists).
    // We need to insert the incoming update into both lists. However, it's possible
    // that the correct position in one list will be different from the position in
    // the other. Consider the following case:
    //
    //     Current:             3-5-6
    //     Work-in-progress:        6
    //
    // Then we receive an update with priority 4 and insert it into each list:
    //
    //     Current:             3-4-5-6
    //     Work-in-progress:        4-6
    //
    // In the current queue, the new update's `next` pointer points to the update
    // with priority 5. But in the work-in-progress queue, the pointer points to the
    // update with priority 6. Because these two queues share the same persistent
    // data structure, this won't do. (This can only happen when the incoming update
    // has higher priority than all the updates in the work-in-progress queue.)
    //
    // To solve this, in the case where the incoming update needs to be inserted
    // into two different positions, we'll make a clone of the update and insert
    // each copy into a separate queue. This forks the list while maintaining a
    // persistent structure, because the update that is added to the work-in-progress
    // is always added to the front of the list.
    //
    // However, if incoming update is inserted into the same position of both lists,
    // we shouldn't make a copy.
    //
    // If the update is cloned, it returns the cloned update.
    function insertUpdate(fiber, update) {
      // We'll have at least one and at most two distinct update queues.
      ensureUpdateQueues(fiber);
      var queue1 = _queue1;
      var queue2 = _queue2;

      // Warn if an update is scheduled from inside an updater function.
      {
        if (queue1.isProcessing || queue2 !== null && queue2.isProcessing) {
          warning$19(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
        }
      }

      // Find the insertion position in the first queue.
      var insertAfter1 = findInsertionPosition(queue1, update);
      var insertBefore1 = insertAfter1 !== null ? insertAfter1.next : queue1.first;

      if (queue2 === null) {
        // If there's no alternate queue, there's nothing else to do but insert.
        insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1);
        return null;
      }

      // If there is an alternate queue, find the insertion position.
      var insertAfter2 = findInsertionPosition(queue2, update);
      var insertBefore2 = insertAfter2 !== null ? insertAfter2.next : queue2.first;

      // Now we can insert into the first queue. This must come after finding both
      // insertion positions because it mutates the list.
      insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1);

      // See if the insertion positions are equal. Be careful to only compare
      // non-null values.
      if (insertBefore1 === insertBefore2 && insertBefore1 !== null || insertAfter1 === insertAfter2 && insertAfter1 !== null) {
        // The insertion positions are the same, so when we inserted into the first
        // queue, it also inserted into the alternate. All we need to do is update
        // the alternate queue's `first` and `last` pointers, in case they
        // have changed.
        if (insertAfter2 === null) {
          queue2.first = update;
        }
        if (insertBefore2 === null) {
          queue2.last = null;
        }
        return null;
      } else {
        // The insertion positions are different, so we need to clone the update and
        // insert the clone into the alternate queue.
        var update2 = cloneUpdate(update);
        insertUpdateIntoQueue(queue2, update2, insertAfter2, insertBefore2);
        return update2;
      }
    }

    function addUpdate(fiber, partialState, callback, priorityLevel) {
      var update = {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: false,
        isForced: false,
        isTopLevelUnmount: false,
        next: null
      };
      insertUpdate(fiber, update);
    }
    var addUpdate_1 = addUpdate;

    function addReplaceUpdate(fiber, state, callback, priorityLevel) {
      var update = {
        priorityLevel: priorityLevel,
        partialState: state,
        callback: callback,
        isReplace: true,
        isForced: false,
        isTopLevelUnmount: false,
        next: null
      };
      insertUpdate(fiber, update);
    }
    var addReplaceUpdate_1 = addReplaceUpdate;

    function addForceUpdate(fiber, callback, priorityLevel) {
      var update = {
        priorityLevel: priorityLevel,
        partialState: null,
        callback: callback,
        isReplace: false,
        isForced: true,
        isTopLevelUnmount: false,
        next: null
      };
      insertUpdate(fiber, update);
    }
    var addForceUpdate_1 = addForceUpdate;

    function getUpdatePriority(fiber) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        return NoWork;
      }
      if (fiber.tag !== ClassComponent$2 && fiber.tag !== HostRoot$2) {
        return NoWork;
      }
      return updateQueue.first !== null ? updateQueue.first.priorityLevel : NoWork;
    }
    var getUpdatePriority_1 = getUpdatePriority;

    function addTopLevelUpdate$1(fiber, partialState, callback, priorityLevel) {
      var isTopLevelUnmount = partialState.element === null;

      var update = {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: false,
        isForced: false,
        isTopLevelUnmount: isTopLevelUnmount,
        next: null
      };
      var update2 = insertUpdate(fiber, update);

      if (isTopLevelUnmount) {
        // TODO: Redesign the top-level mount/update/unmount API to avoid this
        // special case.
        var queue1 = _queue1;
        var queue2 = _queue2;

        // Drop all updates that are lower-priority, so that the tree is not
        // remounted. We need to do this for both queues.
        if (queue1 !== null && update.next !== null) {
          update.next = null;
          queue1.last = update;
        }
        if (queue2 !== null && update2 !== null && update2.next !== null) {
          update2.next = null;
          queue2.last = update;
        }
      }
    }
    var addTopLevelUpdate_1 = addTopLevelUpdate$1;

    function getStateFromUpdate(update, instance, prevState, props) {
      var partialState = update.partialState;
      if (typeof partialState === 'function') {
        var updateFn = partialState;
        return updateFn.call(instance, prevState, props);
      } else {
        return partialState;
      }
    }

    function beginUpdateQueue(current, workInProgress, queue, instance, prevState, props, priorityLevel) {
      if (current !== null && current.updateQueue === queue) {
        // We need to create a work-in-progress queue, by cloning the current queue.
        var currentQueue = queue;
        queue = workInProgress.updateQueue = {
          first: currentQueue.first,
          last: currentQueue.last,
          // These fields are no longer valid because they were already committed.
          // Reset them.
          callbackList: null,
          hasForceUpdate: false
        };
      }

      {
        // Set this flag so we can warn if setState is called inside the update
        // function of another setState.
        queue.isProcessing = true;
      }

      // Calculate these using the the existing values as a base.
      var callbackList = queue.callbackList;
      var hasForceUpdate = queue.hasForceUpdate;

      // Applies updates with matching priority to the previous state to create
      // a new state object.
      var state = prevState;
      var dontMutatePrevState = true;
      var update = queue.first;
      while (update !== null && comparePriority(update.priorityLevel, priorityLevel) <= 0) {
        // Remove each update from the queue right before it is processed. That way
        // if setState is called from inside an updater function, the new update
        // will be inserted in the correct position.
        queue.first = update.next;
        if (queue.first === null) {
          queue.last = null;
        }

        var _partialState = void 0;
        if (update.isReplace) {
          state = getStateFromUpdate(update, instance, state, props);
          dontMutatePrevState = true;
        } else {
          _partialState = getStateFromUpdate(update, instance, state, props);
          if (_partialState) {
            if (dontMutatePrevState) {
              state = _assign({}, state, _partialState);
            } else {
              state = _assign(state, _partialState);
            }
            dontMutatePrevState = false;
          }
        }
        if (update.isForced) {
          hasForceUpdate = true;
        }
        // Second condition ignores top-level unmount callbacks if they are not the
        // last update in the queue, since a subsequent update will cause a remount.
        if (update.callback !== null && !(update.isTopLevelUnmount && update.next !== null)) {
          callbackList = callbackList !== null ? callbackList : [];
          callbackList.push(update.callback);
          workInProgress.effectTag |= CallbackEffect;
        }
        update = update.next;
      }

      queue.callbackList = callbackList;
      queue.hasForceUpdate = hasForceUpdate;

      if (queue.first === null && callbackList === null && !hasForceUpdate) {
        // The queue is empty and there are no callbacks. We can reset it.
        workInProgress.updateQueue = null;
      }

      {
        // No longer processing.
        queue.isProcessing = false;
      }

      return state;
    }
    var beginUpdateQueue_1 = beginUpdateQueue;

    function commitCallbacks(finishedWork, queue, context) {
      var callbackList = queue.callbackList;
      if (callbackList === null) {
        return;
      }

      // Set the list to null to make sure they don't get called more than once.
      queue.callbackList = null;

      for (var i = 0; i < callbackList.length; i++) {
        var _callback = callbackList[i];
        !(typeof _callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback) : void 0;
        _callback.call(context);
      }
    }
    var commitCallbacks_1 = commitCallbacks;

    var ReactFiberUpdateQueue = {
      addUpdate: addUpdate_1,
      addReplaceUpdate: addReplaceUpdate_1,
      addForceUpdate: addForceUpdate_1,
      getUpdatePriority: getUpdatePriority_1,
      addTopLevelUpdate: addTopLevelUpdate_1,
      beginUpdateQueue: beginUpdateQueue_1,
      commitCallbacks: commitCallbacks_1
    };

    {
      var warning$21 = require$$0;
    }

    var valueStack = [];

    {
      var fiberStack = [];
    }

    var index = -1;

    var createCursor$1 = function (defaultValue) {
      return {
        current: defaultValue
      };
    };

    var isEmpty = function () {
      return index === -1;
    };

    var pop$1 = function (cursor, fiber) {
      if (index < 0) {
        {
          warning$21(false, 'Unexpected pop.');
        }
        return;
      }

      {
        if (fiber !== fiberStack[index]) {
          warning$21(false, 'Unexpected Fiber popped.');
        }
      }

      cursor.current = valueStack[index];

      valueStack[index] = null;

      {
        fiberStack[index] = null;
      }

      index--;
    };

    var push$1 = function (cursor, value, fiber) {
      index++;

      valueStack[index] = cursor.current;

      {
        fiberStack[index] = fiber;
      }

      cursor.current = value;
    };

    var reset = function () {
      while (index > -1) {
        valueStack[index] = null;

        {
          fiberStack[index] = null;
        }

        index--;
      }
    };

    var ReactFiberStack = {
      createCursor: createCursor$1,
      isEmpty: isEmpty,
      pop: pop$1,
      push: push$1,
      reset: reset
    };

    // Trust the developer to only use this with a true check
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactDebugFiberPerf
     * 
     */

    var ReactDebugFiberPerf = null;

    {
      var _require$8 = ReactTypeOfWork,
          HostRoot$4 = _require$8.HostRoot,
          HostComponent$4 = _require$8.HostComponent,
          HostText$2 = _require$8.HostText,
          HostPortal$1 = _require$8.HostPortal,
          YieldComponent = _require$8.YieldComponent,
          Fragment = _require$8.Fragment;

      var getComponentName$5 = getComponentName_1;

      // Prefix measurements so that it's possible to filter them.
      // Longer prefixes are hard to read in DevTools.
      var reactEmoji = '\u269B';
      var warningEmoji = '\u26D4';
      var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

      // Keep track of current fiber so that we know the path to unwind on pause.
      // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
      var currentFiber = null;
      // If we're in the middle of user code, which fiber and method is it?
      // Reusing `currentFiber` would be confusing for this because user code fiber
      // can change during commit phase too, but we don't need to unwind it (since
      // lifecycles in the commit phase don't resemble a tree).
      var currentPhase = null;
      var currentPhaseFiber = null;
      // Did lifecycle hook schedule an update? This is often a performance problem,
      // so we will keep track of it, and include it in the report.
      // Track commits caused by cascading updates.
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      // During commits, we only show a measurement once per method name
      // to avoid stretch the commit phase with measurement overhead.
      var labelsInCurrentCommit = new Set();

      var formatMarkName = function (markName) {
        return reactEmoji + ' ' + markName;
      };

      var formatLabel = function (label, warning) {
        var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
        var suffix = warning ? ' Warning: ' + warning : '';
        return '' + prefix + label + suffix;
      };

      var beginMark = function (markName) {
        performance.mark(formatMarkName(markName));
      };

      var clearMark = function (markName) {
        performance.clearMarks(formatMarkName(markName));
      };

      var endMark = function (label, markName, warning) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning);
        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {}
        // If previous mark was missing for some reason, this will throw.
        // This could only happen if React crashed in an unexpected place earlier.
        // Don't pile on with more errors.

        // Clear marks immediately to avoid growing buffer.
        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };

      var getFiberMarkName = function (label, debugID) {
        return label + ' (#' + debugID + ')';
      };

      var getFiberLabel = function (componentName, isMounted, phase) {
        if (phase === null) {
          // These are composite component total time measurements.
          return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
        } else {
          // Composite component methods.
          return componentName + '.' + phase;
        }
      };

      var beginFiberMark = function (fiber, phase) {
        var componentName = getComponentName$5(fiber) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);

        if (isCommitting && labelsInCurrentCommit.has(label)) {
          // During the commit phase, we don't show duplicate labels because
          // there is a fixed overhead for every measurement, and we don't
          // want to stretch the commit phase beyond necessary.
          return false;
        }
        labelsInCurrentCommit.add(label);

        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };

      var clearFiberMark = function (fiber, phase) {
        var componentName = getComponentName$5(fiber) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };

      var endFiberMark = function (fiber, phase, warning) {
        var componentName = getComponentName$5(fiber) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning);
      };

      var shouldIgnoreFiber = function (fiber) {
        // Host components should be skipped in the timeline.
        // We could check typeof fiber.type, but does this work with RN?
        switch (fiber.tag) {
          case HostRoot$4:
          case HostComponent$4:
          case HostText$2:
          case HostPortal$1:
          case YieldComponent:
          case Fragment:
            return true;
          default:
            return false;
        }
      };

      var clearPendingPhaseMeasurement = function () {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }
        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };

      var pauseTimers = function () {
        // Stops all currently active measurements so that they can be resumed
        // if we continue in a later deferred loop from the same unit of work.
        var fiber = currentFiber;
        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }
          fiber = fiber['return'];
        }
      };

      var resumeTimersRecursively = function (fiber) {
        if (fiber['return'] !== null) {
          resumeTimersRecursively(fiber['return']);
        }
        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };

      var resumeTimers = function () {
        // Resumes all measurements that were active during the last deferred loop.
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };

      ReactDebugFiberPerf = {
        recordEffect: function () {
          effectCountInCurrentCommit++;
        },
        recordScheduleUpdate: function () {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }
          if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
            hasScheduledUpdateInCurrentPhase = true;
          }
        },
        startWorkTimer: function (fiber) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          // If we pause, this is the fiber to unwind from.
          currentFiber = fiber;
          if (!beginFiberMark(fiber, null)) {
            return;
          }
          fiber._debugIsCurrentlyTiming = true;
        },
        cancelWorkTimer: function (fiber) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          // Remember we shouldn't complete measurement for this fiber.
          // Otherwise flamechart will be deep even for small updates.
          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        },
        stopWorkTimer: function (fiber) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          // If we pause, its parent is the fiber to unwind from.
          currentFiber = fiber['return'];
          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }
          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        },
        stopFailedWorkTimer: function (fiber) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }
          // If we pause, its parent is the fiber to unwind from.
          currentFiber = fiber['return'];
          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }
          fiber._debugIsCurrentlyTiming = false;
          var warning = 'An error was thrown inside this error boundary';
          endFiberMark(fiber, null, warning);
        },
        startPhaseTimer: function (fiber, phase) {
          if (!supportsUserTiming) {
            return;
          }
          clearPendingPhaseMeasurement();
          if (!beginFiberMark(fiber, phase)) {
            return;
          }
          currentPhaseFiber = fiber;
          currentPhase = phase;
        },
        stopPhaseTimer: function () {
          if (!supportsUserTiming) {
            return;
          }
          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning);
          }
          currentPhase = null;
          currentPhaseFiber = null;
        },
        startWorkLoopTimer: function () {
          if (!supportsUserTiming) {
            return;
          }
          commitCountInCurrentWorkLoop = 0;
          // This is top level call.
          // Any other measurements are performed within.
          beginMark('(React Tree Reconciliation)');
          // Resume any measurements that were in progress during the last loop.
          resumeTimers();
        },
        stopWorkLoopTimer: function () {
          if (!supportsUserTiming) {
            return;
          }
          var warning = commitCountInCurrentWorkLoop > 1 ? 'There were cascading updates' : null;
          commitCountInCurrentWorkLoop = 0;
          // Pause any measurements until the next loop.
          pauseTimers();
          endMark('(React Tree Reconciliation)', '(React Tree Reconciliation)', warning);
        },
        startCommitTimer: function () {
          if (!supportsUserTiming) {
            return;
          }
          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark('(Committing Changes)');
        },
        stopCommitTimer: function () {
          if (!supportsUserTiming) {
            return;
          }

          var warning = null;
          if (hasScheduledUpdateInCurrentCommit) {
            warning = 'Lifecycle hook scheduled a cascading update';
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning = 'Caused by a cascading update in earlier commit';
          }
          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();

          endMark('(Committing Changes)', '(Committing Changes)', warning);
        },
        startCommitHostEffectsTimer: function () {
          if (!supportsUserTiming) {
            return;
          }
          effectCountInCurrentCommit = 0;
          beginMark('(Committing Host Effects)');
        },
        stopCommitHostEffectsTimer: function () {
          if (!supportsUserTiming) {
            return;
          }
          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
        },
        startCommitLifeCyclesTimer: function () {
          if (!supportsUserTiming) {
            return;
          }
          effectCountInCurrentCommit = 0;
          beginMark('(Calling Lifecycle Methods)');
        },
        stopCommitLifeCyclesTimer: function () {
          if (!supportsUserTiming) {
            return;
          }
          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
        }
      };
    }

    var ReactDebugFiberPerf_1 = ReactDebugFiberPerf;

    var isFiberMounted$1 = ReactFiberTreeReflection.isFiberMounted;

    var ClassComponent$3 = ReactTypeOfWork.ClassComponent;
    var HostRoot$3 = ReactTypeOfWork.HostRoot;

    var createCursor = ReactFiberStack.createCursor;
    var pop = ReactFiberStack.pop;
    var push = ReactFiberStack.push;

    {
      var warning$20 = require$$0;
      var checkPropTypes$1 = checkPropTypes;
      var ReactDebugCurrentFiber$2 = ReactDebugCurrentFiber_1;

      var _require4 = ReactDebugFiberPerf_1,
          startPhaseTimer = _require4.startPhaseTimer,
          stopPhaseTimer = _require4.stopPhaseTimer;

      var warnedAboutMissingGetChildContext = {};
    }

    // A cursor to the current merged context object on the stack.
    var contextStackCursor = createCursor(emptyObject);
    // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false);
    // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyObject;

    function getUnmaskedContext(workInProgress) {
      var hasOwnContext = isContextProvider$1(workInProgress);
      if (hasOwnContext) {
        // If the fiber is a context provider itself, when we read its context
        // we have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
      }
      return contextStackCursor.current;
    }
    var getUnmaskedContext_1 = getUnmaskedContext;

    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      var instance = workInProgress.stateNode;
      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    var cacheContext_1 = cacheContext;

    var getMaskedContext = function (workInProgress, unmaskedContext) {
      var type = workInProgress.type;
      var contextTypes = type.contextTypes;
      if (!contextTypes) {
        return emptyObject;
      }

      // Avoid recreating masked context unless unmasked context has changed.
      // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
      // This may trigger infinite loops if componentWillReceiveProps calls setState.
      var instance = workInProgress.stateNode;
      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }

      var context = {};
      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      {
        var name = getComponentName_1(workInProgress) || 'Unknown';
        ReactDebugCurrentFiber$2.setCurrentFiber(workInProgress, null);
        checkPropTypes$1(contextTypes, context, 'context', name, ReactDebugCurrentFiber$2.getCurrentFiberStackAddendum);
        ReactDebugCurrentFiber$2.resetCurrentFiber();
      }

      // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // Context is created before the class component is instantiated so check for instance.
      if (instance) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return context;
    };

    var hasContextChanged = function () {
      return didPerformWorkStackCursor.current;
    };

    function isContextConsumer(fiber) {
      return fiber.tag === ClassComponent$3 && fiber.type.contextTypes != null;
    }
    var isContextConsumer_1 = isContextConsumer;

    function isContextProvider$1(fiber) {
      return fiber.tag === ClassComponent$3 && fiber.type.childContextTypes != null;
    }
    var isContextProvider_1 = isContextProvider$1;

    function popContextProvider(fiber) {
      if (!isContextProvider$1(fiber)) {
        return;
      }

      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }
    var popContextProvider_1 = popContextProvider;

    var popTopLevelContextObject = function (fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    };

    var pushTopLevelContextObject = function (fiber, context, didChange) {
      !(contextStackCursor.cursor == null) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    };

    function processChildContext$1(fiber, parentContext, isReconciling) {
      var instance = fiber.stateNode;
      var childContextTypes = fiber.type.childContextTypes;

      // TODO (bvaughn) Replace this behavior with an invariant() in the future.
      // It has only been added in Fiber to match the (unintentional) behavior in Stack.
      if (typeof instance.getChildContext !== 'function') {
        {
          var componentName = getComponentName_1(fiber) || 'Unknown';

          if (!warnedAboutMissingGetChildContext[componentName]) {
            warnedAboutMissingGetChildContext[componentName] = true;
            warning$20(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
          }
        }
        return parentContext;
      }

      var childContext = void 0;
      {
        ReactDebugCurrentFiber$2.setCurrentFiber(fiber, 'getChildContext');
        startPhaseTimer(fiber, 'getChildContext');
        childContext = instance.getChildContext();
        stopPhaseTimer();
        ReactDebugCurrentFiber$2.resetCurrentFiber();
      }
      for (var contextKey in childContext) {
        !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName_1(fiber) || 'Unknown', contextKey) : void 0;
      }
      {
        var name = getComponentName_1(fiber) || 'Unknown';
        // We can only provide accurate element stacks if we pass work-in-progress tree
        // during the begin or complete phase. However currently this function is also
        // called from unstable_renderSubtree legacy implementation. In this case it unsafe to
        // assume anything about the given fiber. We won't pass it down if we aren't sure.
        // TODO: remove this hack when we delete unstable_renderSubtree in Fiber.
        var workInProgress = isReconciling ? fiber : null;
        ReactDebugCurrentFiber$2.setCurrentFiber(workInProgress, null);
        checkPropTypes$1(childContextTypes, childContext, 'child context', name, ReactDebugCurrentFiber$2.getCurrentFiberStackAddendum);
        ReactDebugCurrentFiber$2.resetCurrentFiber();
      }

      return _assign({}, parentContext, childContext);
    }
    var processChildContext_1 = processChildContext$1;

    var pushContextProvider = function (workInProgress) {
      if (!isContextProvider$1(workInProgress)) {
        return false;
      }

      var instance = workInProgress.stateNode;
      // We push the context as early as possible to ensure stack integrity.
      // If the instance does not exist yet, we will push null at first,
      // and replace it on the stack later when invalidating the context.
      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;

      // Remember the parent context so we can merge with it later.
      // Inherit the parent's did-perform-work value to avoid inadvertantly blocking updates.
      previousContext = contextStackCursor.current;
      push(contextStackCursor, memoizedMergedChildContext, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

      return true;
    };

    var invalidateContextProvider = function (workInProgress, didChange) {
      var instance = workInProgress.stateNode;
      !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didChange) {
        // Merge parent and own context.
        // Skip this if we're not updating due to sCU.
        // This avoids unnecessarily recomputing memoized values.
        var mergedContext = processChildContext$1(workInProgress, previousContext, true);
        instance.__reactInternalMemoizedMergedChildContext = mergedContext;

        // Replace the old (or empty) context with the new one.
        // It is important to unwind the context in the reverse order.
        pop(didPerformWorkStackCursor, workInProgress);
        pop(contextStackCursor, workInProgress);
        // Now push the new context and mark that it has changed.
        push(contextStackCursor, mergedContext, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      } else {
        pop(didPerformWorkStackCursor, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      }
    };

    var resetContext = function () {
      previousContext = emptyObject;
      contextStackCursor.current = emptyObject;
      didPerformWorkStackCursor.current = false;
    };

    var findCurrentUnmaskedContext$1 = function (fiber) {
      // Currently this is only used with renderSubtreeIntoContainer; not sure if it
      // makes sense elsewhere
      !(isFiberMounted$1(fiber) && fiber.tag === ClassComponent$3) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      var node = fiber;
      while (node.tag !== HostRoot$3) {
        if (isContextProvider$1(node)) {
          return node.stateNode.__reactInternalMemoizedMergedChildContext;
        }
        var parent = node['return'];
        !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        node = parent;
      }
      return node.stateNode.context;
    };

    var ReactFiberContext = {
      getUnmaskedContext: getUnmaskedContext_1,
      cacheContext: cacheContext_1,
      getMaskedContext: getMaskedContext,
      hasContextChanged: hasContextChanged,
      isContextConsumer: isContextConsumer_1,
      isContextProvider: isContextProvider_1,
      popContextProvider: popContextProvider_1,
      popTopLevelContextObject: popTopLevelContextObject,
      pushTopLevelContextObject: pushTopLevelContextObject,
      processChildContext: processChildContext_1,
      pushContextProvider: pushContextProvider,
      invalidateContextProvider: invalidateContextProvider,
      resetContext: resetContext,
      findCurrentUnmaskedContext: findCurrentUnmaskedContext$1
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactTypeOfInternalContext
     * 
     */

    var ReactTypeOfInternalContext = {
      NoContext: 0,
      AsyncUpdates: 1
    };

    var IndeterminateComponent$1 = ReactTypeOfWork.IndeterminateComponent;
    var ClassComponent$4 = ReactTypeOfWork.ClassComponent;
    var HostRoot$5 = ReactTypeOfWork.HostRoot;
    var HostComponent$5 = ReactTypeOfWork.HostComponent;
    var HostText$3 = ReactTypeOfWork.HostText;
    var HostPortal$2 = ReactTypeOfWork.HostPortal;
    var CoroutineComponent = ReactTypeOfWork.CoroutineComponent;
    var YieldComponent$1 = ReactTypeOfWork.YieldComponent;
    var Fragment$1 = ReactTypeOfWork.Fragment;

    var NoWork$1 = ReactPriorityLevel.NoWork;

    var NoContext = ReactTypeOfInternalContext.NoContext;

    var NoEffect$1 = ReactTypeOfSideEffect.NoEffect;

    {
      var getComponentName$6 = getComponentName_1;
      var hasBadMapPolyfill = false;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* eslint-disable no-new */
        new Map([[nonExtensibleObject, null]]);
        new Set([nonExtensibleObject]);
        /* eslint-enable no-new */
      } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
      }
    }

    // A Fiber is work on a Component that needs to be done or was done. There can
    // be more than one per component.


    {
      var debugCounter = 1;
    }

    function FiberNode(tag, key, internalContextTag) {
      // Instance
      this.tag = tag;
      this.key = key;
      this.type = null;
      this.stateNode = null;

      // Fiber
      this['return'] = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;

      this.ref = null;

      this.pendingProps = null;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;

      this.internalContextTag = internalContextTag;

      // Effects
      this.effectTag = NoEffect$1;
      this.nextEffect = null;

      this.firstEffect = null;
      this.lastEffect = null;

      this.pendingWorkPriority = NoWork$1;

      this.alternate = null;

      {
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugIsCurrentlyTiming = false;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
          Object.preventExtensions(this);
        }
      }
    }

    // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function (tag, key, internalContextTag) {
      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
      return new FiberNode(tag, key, internalContextTag);
    };

    function shouldConstruct(Component) {
      return !!(Component.prototype && Component.prototype.isReactComponent);
    }

    // This is used to create an alternate fiber to do work on.
    var createWorkInProgress = function (current, renderPriority) {
      var workInProgress = current.alternate;
      if (workInProgress === null) {
        // We use a double buffering pooling technique because we know that we'll
        // only ever need at most two versions of a tree. We pool the "other" unused
        // node that we're free to reuse. This is lazily created to avoid allocating
        // extra objects for things that are never updated. It also allow us to
        // reclaim the extra memory if needed.
        workInProgress = createFiber(current.tag, current.key, current.internalContextTag);
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;

        {
          // DEV-only fields
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
        }

        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        // We already have an alternate.
        // Reset the effect tag.
        workInProgress.effectTag = NoEffect$1;

        // The effect list is no longer valid.
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
      }

      workInProgress.pendingWorkPriority = renderPriority;

      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;

      // pendingProps is set by the parent during reconciliation.
      // TODO: Pass this as an argument.

      // These will be overridden during the parent's reconciliation
      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;

      return workInProgress;
    };

    var createHostRootFiber$1 = function () {
      var fiber = createFiber(HostRoot$5, null, NoContext);
      return fiber;
    };

    var createFiberFromElement = function (element, internalContextTag, priorityLevel) {
      var owner = null;
      {
        owner = element._owner;
      }

      var fiber = createFiberFromElementType(element.type, element.key, internalContextTag, owner);
      fiber.pendingProps = element.props;
      fiber.pendingWorkPriority = priorityLevel;

      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }

      return fiber;
    };

    var createFiberFromFragment = function (elements, internalContextTag, priorityLevel) {
      // TODO: Consider supporting keyed fragments. Technically, we accidentally
      // support that in the existing React.
      var fiber = createFiber(Fragment$1, null, internalContextTag);
      fiber.pendingProps = elements;
      fiber.pendingWorkPriority = priorityLevel;
      return fiber;
    };

    var createFiberFromText = function (content, internalContextTag, priorityLevel) {
      var fiber = createFiber(HostText$3, null, internalContextTag);
      fiber.pendingProps = content;
      fiber.pendingWorkPriority = priorityLevel;
      return fiber;
    };

    function createFiberFromElementType(type, key, internalContextTag, debugOwner) {
      var fiber = void 0;
      if (typeof type === 'function') {
        fiber = shouldConstruct(type) ? createFiber(ClassComponent$4, key, internalContextTag) : createFiber(IndeterminateComponent$1, key, internalContextTag);
        fiber.type = type;
      } else if (typeof type === 'string') {
        fiber = createFiber(HostComponent$5, key, internalContextTag);
        fiber.type = type;
      } else if (typeof type === 'object' && type !== null && typeof type.tag === 'number') {
        // Currently assumed to be a continuation and therefore is a fiber already.
        // TODO: The yield system is currently broken for updates in some cases.
        // The reified yield stores a fiber, but we don't know which fiber that is;
        // the current or a workInProgress? When the continuation gets rendered here
        // we don't know if we can reuse that fiber or if we need to clone it.
        // There is probably a clever way to restructure this.
        fiber = type;
      } else {
        var info = '';
        {
          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in.";
          }
          var ownerName = debugOwner ? getComponentName$6(debugOwner) : null;
          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }
        }
        invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
      }
      return fiber;
    }

    var createFiberFromElementType_1 = createFiberFromElementType;

    var createFiberFromHostInstanceForDeletion = function () {
      var fiber = createFiber(HostComponent$5, null, NoContext);
      fiber.type = 'DELETED';
      return fiber;
    };

    var createFiberFromCoroutine = function (coroutine, internalContextTag, priorityLevel) {
      var fiber = createFiber(CoroutineComponent, coroutine.key, internalContextTag);
      fiber.type = coroutine.handler;
      fiber.pendingProps = coroutine;
      fiber.pendingWorkPriority = priorityLevel;
      return fiber;
    };

    var createFiberFromYield = function (yieldNode, internalContextTag, priorityLevel) {
      var fiber = createFiber(YieldComponent$1, null, internalContextTag);
      return fiber;
    };

    var createFiberFromPortal = function (portal, internalContextTag, priorityLevel) {
      var fiber = createFiber(HostPortal$2, portal.key, internalContextTag);
      fiber.pendingProps = portal.children || [];
      fiber.pendingWorkPriority = priorityLevel;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        implementation: portal.implementation
      };
      return fiber;
    };

    var largerPriority = function (p1, p2) {
      return p1 !== NoWork$1 && (p2 === NoWork$1 || p2 > p1) ? p1 : p2;
    };

    var ReactFiber = {
      createWorkInProgress: createWorkInProgress,
      createHostRootFiber: createHostRootFiber$1,
      createFiberFromElement: createFiberFromElement,
      createFiberFromFragment: createFiberFromFragment,
      createFiberFromText: createFiberFromText,
      createFiberFromElementType: createFiberFromElementType_1,
      createFiberFromHostInstanceForDeletion: createFiberFromHostInstanceForDeletion,
      createFiberFromCoroutine: createFiberFromCoroutine,
      createFiberFromYield: createFiberFromYield,
      createFiberFromPortal: createFiberFromPortal,
      largerPriority: largerPriority
    };

    var createHostRootFiber = ReactFiber.createHostRootFiber;

    var createFiberRoot$1 = function (containerInfo) {
      // Cyclic construction. This cheats the type system right now because
      // stateNode is any.
      var uninitializedFiber = createHostRootFiber();
      var root = {
        current: uninitializedFiber,
        containerInfo: containerInfo,
        isScheduled: false,
        nextScheduledRoot: null,
        context: null,
        pendingContext: null
      };
      uninitializedFiber.stateNode = root;
      return root;
    };

    var ReactFiberRoot = {
      createFiberRoot: createFiberRoot$1
    };

    var defaultShowDialog = function (capturedError) {
      return true;
    };

    var showDialog = defaultShowDialog;

    function logCapturedError$1(capturedError) {
      var logError = showDialog(capturedError);

      // Allow injected showDialog() to prevent default console.error logging.
      // This enables renderers like ReactNative to better manage redbox behavior.
      if (logError === false) {
        return;
      }

      var error = capturedError.error;
      {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry;

        var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

        var errorBoundaryMessage = void 0;
        // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
        if (errorBoundaryFound && errorBoundaryName) {
          if (willRetry) {
            errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
          } else {
            errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
          }
        } else {
          errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'You can learn more about error boundaries at https://fb.me/react-error-boundaries.';
        }
        var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

        // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
        console.error(combinedMessage);
      }
    }

    var injection$1 = {
      /**
       * Display custom dialog for lifecycle errors.
       * Return false to prevent default behavior of logging to console.error.
       */
      injectDialog: function (fn) {
        !(showDialog === defaultShowDialog) ? invariant(false, 'The custom dialog was already injected.') : void 0;
        !(typeof fn === 'function') ? invariant(false, 'Injected showDialog() must be a function.') : void 0;
        showDialog = fn;
      }
    };

    var logCapturedError_1 = logCapturedError$1;

    var ReactFiberErrorLogger = {
      injection: injection$1,
      logCapturedError: logCapturedError_1
    };

    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactCoroutine
     * 
     */

    // The Symbol used to tag the special React types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_COROUTINE_TYPE$1;
    var REACT_YIELD_TYPE$1;
    if (typeof Symbol === 'function' && Symbol['for']) {
      REACT_COROUTINE_TYPE$1 = Symbol['for']('react.coroutine');
      REACT_YIELD_TYPE$1 = Symbol['for']('react.yield');
    } else {
      REACT_COROUTINE_TYPE$1 = 0xeac8;
      REACT_YIELD_TYPE$1 = 0xeac9;
    }

    var createCoroutine = function (children, handler, props) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      var coroutine = {
        // This tag allow us to uniquely identify this as a React Coroutine
        $$typeof: REACT_COROUTINE_TYPE$1,
        key: key == null ? null : '' + key,
        children: children,
        handler: handler,
        props: props
      };

      {
        // TODO: Add _store property for marking this as validated.
        if (Object.freeze) {
          Object.freeze(coroutine.props);
          Object.freeze(coroutine);
        }
      }

      return coroutine;
    };

    var createYield = function (value) {
      var yieldNode = {
        // This tag allow us to uniquely identify this as a React Yield
        $$typeof: REACT_YIELD_TYPE$1,
        value: value
      };

      {
        // TODO: Add _store property for marking this as validated.
        if (Object.freeze) {
          Object.freeze(yieldNode);
        }
      }

      return yieldNode;
    };

    /**
     * Verifies the object is a coroutine object.
     */
    var isCoroutine = function (object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_COROUTINE_TYPE$1;
    };

    /**
     * Verifies the object is a yield object.
     */
    var isYield = function (object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_YIELD_TYPE$1;
    };

    var REACT_YIELD_TYPE_1 = REACT_YIELD_TYPE$1;
    var REACT_COROUTINE_TYPE_1 = REACT_COROUTINE_TYPE$1;

    var ReactCoroutine = {
      createCoroutine: createCoroutine,
      createYield: createYield,
      isCoroutine: isCoroutine,
      isYield: isYield,
      REACT_YIELD_TYPE: REACT_YIELD_TYPE_1,
      REACT_COROUTINE_TYPE: REACT_COROUTINE_TYPE_1
    };

    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactPortal
     * 
     */

    // The Symbol used to tag the special React types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_PORTAL_TYPE$1 = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.portal') || 0xeaca;

    var createPortal$1 = function (children, containerInfo,
    // TODO: figure out the API for cross-renderer implementation.
    implementation) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE$1,
        key: key == null ? null : '' + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    };

    /**
     * Verifies the object is a portal object.
     */
    var isPortal = function (object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_PORTAL_TYPE$1;
    };

    var REACT_PORTAL_TYPE_1 = REACT_PORTAL_TYPE$1;

    var ReactPortal = {
      createPortal: createPortal$1,
      isPortal: isPortal,
      REACT_PORTAL_TYPE: REACT_PORTAL_TYPE_1
    };

    var REACT_COROUTINE_TYPE = ReactCoroutine.REACT_COROUTINE_TYPE;
    var REACT_YIELD_TYPE = ReactCoroutine.REACT_YIELD_TYPE;

    var REACT_PORTAL_TYPE = ReactPortal.REACT_PORTAL_TYPE;

    {
      var _require3$4 = ReactDebugCurrentFiber_1,
          getCurrentFiberStackAddendum$5 = _require3$4.getCurrentFiberStackAddendum;

      var warning$24 = require$$0;
      var didWarnAboutMaps = false;
      /**
       * Warn if there's no key explicitly set on dynamic arrays of children or
       * object keys are not valid. This allows us to keep track of children between
       * updates.
       */
      var ownerHasKeyUseWarning = {};

      var warnForMissingKey = function (child) {
        if (child === null || typeof child !== 'object') {
          return;
        }
        if (!child._store || child._store.validated || child.key != null) {
          return;
        }
        !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        child._store.validated = true;

        var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$5() || '');
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

        warning$24(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$5());
      };
    }

    var createWorkInProgress$2 = ReactFiber.createWorkInProgress;
    var createFiberFromElement$1 = ReactFiber.createFiberFromElement;
    var createFiberFromFragment$1 = ReactFiber.createFiberFromFragment;
    var createFiberFromText$1 = ReactFiber.createFiberFromText;
    var createFiberFromCoroutine$1 = ReactFiber.createFiberFromCoroutine;
    var createFiberFromYield$1 = ReactFiber.createFiberFromYield;
    var createFiberFromPortal$1 = ReactFiber.createFiberFromPortal;

    var isArray = Array.isArray;

    var FunctionalComponent$2 = ReactTypeOfWork.FunctionalComponent;
    var ClassComponent$7 = ReactTypeOfWork.ClassComponent;
    var HostText$5 = ReactTypeOfWork.HostText;
    var HostPortal$5 = ReactTypeOfWork.HostPortal;
    var CoroutineComponent$2 = ReactTypeOfWork.CoroutineComponent;
    var YieldComponent$3 = ReactTypeOfWork.YieldComponent;
    var Fragment$3 = ReactTypeOfWork.Fragment;
    var NoEffect$2 = ReactTypeOfSideEffect.NoEffect;
    var Placement$3 = ReactTypeOfSideEffect.Placement;
    var Deletion$1 = ReactTypeOfSideEffect.Deletion;

    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    // The Symbol used to tag the ReactElement type. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable === 'undefined') {
        return null;
      }
      var iteratorFn = ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
      return null;
    }

    function coerceRef(current, element) {
      var mixedRef = element.ref;
      if (mixedRef !== null && typeof mixedRef !== 'function') {
        if (element._owner) {
          var owner = element._owner;
          var inst = void 0;
          if (owner) {
            if (typeof owner.tag === 'number') {
              var ownerFiber = owner;
              !(ownerFiber.tag === ClassComponent$7) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
              inst = ownerFiber.stateNode;
            } else {
              // Stack
              inst = owner.getPublicInstance();
            }
          }
          !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
          var stringRef = '' + mixedRef;
          // Check if previous string ref matches new string ref
          if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
            return current.ref;
          }
          var ref = function (value) {
            var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };
          ref._stringRef = stringRef;
          return ref;
        } else {
          !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;
          !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).', mixedRef) : void 0;
        }
      }
      return mixedRef;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== 'textarea') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$5() || '');
        }
        invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
      }
    }

    function warnOnFunctionType() {
      warning$24(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$5() || '');
    }

    // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldClone, shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return;
        }
        if (!shouldClone) {
          // When we're reconciling in place we have a work in progress copy. We
          // actually want the current copy. If there is no current copy, then we
          // don't need to track deletion side-effects.
          if (childToDelete.alternate === null) {
            return;
          }
          childToDelete = childToDelete.alternate;
        }
        // Deletions are added in reversed order so we add it to the front.
        // At this point, the return fiber's effect list is empty except for
        // deletions, so we can just append the deletion to the list. The remaining
        // effects aren't added until the complete phase. Once we implement
        // resuming, this may not be true.
        var last = returnFiber.lastEffect;
        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
        childToDelete.nextEffect = null;
        childToDelete.effectTag = Deletion$1;
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return null;
        }

        // TODO: For the shouldClone case, this could be micro-optimized a bit by
        // assuming that after the first child we've already added everything.
        var childToDelete = currentFirstChild;
        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }
        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        // Add the remaining children to a temporary map so that we can find them by
        // keys quickly. Implicit (null) keys get added to this set with their index
        var existingChildren = new Map();

        var existingChild = currentFirstChild;
        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }
          existingChild = existingChild.sibling;
        }
        return existingChildren;
      }

      function useFiber(fiber, priority) {
        // We currently set sibling to null and index to 0 here because it is easy
        // to forget to do before returning it. E.g. for the single child case.
        if (shouldClone) {
          var clone = createWorkInProgress$2(fiber, priority);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        } else {
          // We override the pending priority even if it is higher, because if
          // we're reconciling at a lower priority that means that this was
          // down-prioritized.
          fiber.pendingWorkPriority = priority;
          fiber.effectTag = NoEffect$2;
          fiber.index = 0;
          fiber.sibling = null;
          return fiber;
        }
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) {
          // Noop.
          return lastPlacedIndex;
        }
        var current = newFiber.alternate;
        if (current !== null) {
          var oldIndex = current.index;
          if (oldIndex < lastPlacedIndex) {
            // This is a move.
            newFiber.effectTag = Placement$3;
            return lastPlacedIndex;
          } else {
            // This item can stay in place.
            return oldIndex;
          }
        } else {
          // This is an insertion.
          newFiber.effectTag = Placement$3;
          return lastPlacedIndex;
        }
      }

      function placeSingleChild(newFiber) {
        // This is simpler for the single child case. We only need to do a
        // placement for inserting new children.
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.effectTag = Placement$3;
        }
        return newFiber;
      }

      function updateTextNode(returnFiber, current, textContent, priority) {
        if (current === null || current.tag !== HostText$5) {
          // Insert
          var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
          created['return'] = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, priority);
          existing.pendingProps = textContent;
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function updateElement(returnFiber, current, element, priority) {
        if (current === null || current.type !== element.type) {
          // Insert
          var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
          created.ref = coerceRef(current, element);
          created['return'] = returnFiber;
          return created;
        } else {
          // Move based on index
          var existing = useFiber(current, priority);
          existing.ref = coerceRef(current, element);
          existing.pendingProps = element.props;
          existing['return'] = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        }
      }

      function updateCoroutine(returnFiber, current, coroutine, priority) {
        // TODO: Should this also compare handler to determine whether to reuse?
        if (current === null || current.tag !== CoroutineComponent$2) {
          // Insert
          var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
          created['return'] = returnFiber;
          return created;
        } else {
          // Move based on index
          var existing = useFiber(current, priority);
          existing.pendingProps = coroutine;
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function updateYield(returnFiber, current, yieldNode, priority) {
        if (current === null || current.tag !== YieldComponent$3) {
          // Insert
          var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
          created.type = yieldNode.value;
          created['return'] = returnFiber;
          return created;
        } else {
          // Move based on index
          var existing = useFiber(current, priority);
          existing.type = yieldNode.value;
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function updatePortal(returnFiber, current, portal, priority) {
        if (current === null || current.tag !== HostPortal$5 || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
          // Insert
          var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
          created['return'] = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, priority);
          existing.pendingProps = portal.children || [];
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function updateFragment(returnFiber, current, fragment, priority) {
        if (current === null || current.tag !== Fragment$3) {
          // Insert
          var created = createFiberFromFragment$1(fragment, returnFiber.internalContextTag, priority);
          created['return'] = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, priority);
          existing.pendingProps = fragment;
          existing['return'] = returnFiber;
          return existing;
        }
      }

      function createChild(returnFiber, newChild, priority) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes doesn't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          var created = createFiberFromText$1('' + newChild, returnFiber.internalContextTag, priority);
          created['return'] = returnFiber;
          return created;
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _created = createFiberFromElement$1(newChild, returnFiber.internalContextTag, priority);
                _created.ref = coerceRef(null, newChild);
                _created['return'] = returnFiber;
                return _created;
              }

            case REACT_COROUTINE_TYPE:
              {
                var _created2 = createFiberFromCoroutine$1(newChild, returnFiber.internalContextTag, priority);
                _created2['return'] = returnFiber;
                return _created2;
              }

            case REACT_YIELD_TYPE:
              {
                var _created3 = createFiberFromYield$1(newChild, returnFiber.internalContextTag, priority);
                _created3.type = newChild.value;
                _created3['return'] = returnFiber;
                return _created3;
              }

            case REACT_PORTAL_TYPE:
              {
                var _created4 = createFiberFromPortal$1(newChild, returnFiber.internalContextTag, priority);
                _created4['return'] = returnFiber;
                return _created4;
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _created5 = createFiberFromFragment$1(newChild, returnFiber.internalContextTag, priority);
            _created5['return'] = returnFiber;
            return _created5;
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, priority) {
        // Update the fiber if the keys match, otherwise return null.

        var key = oldFiber !== null ? oldFiber.key : null;

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes doesn't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          if (key !== null) {
            return null;
          }
          return updateTextNode(returnFiber, oldFiber, '' + newChild, priority);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  return updateElement(returnFiber, oldFiber, newChild, priority);
                } else {
                  return null;
                }
              }

            case REACT_COROUTINE_TYPE:
              {
                if (newChild.key === key) {
                  return updateCoroutine(returnFiber, oldFiber, newChild, priority);
                } else {
                  return null;
                }
              }

            case REACT_YIELD_TYPE:
              {
                // Yields doesn't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a
                // yield.
                if (key === null) {
                  return updateYield(returnFiber, oldFiber, newChild, priority);
                } else {
                  return null;
                }
              }

            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, priority);
                } else {
                  return null;
                }
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            // Fragments doesn't have keys so if the previous key is implicit we can
            // update it.
            if (key !== null) {
              return null;
            }
            return updateFragment(returnFiber, oldFiber, newChild, priority);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        return null;
      }

      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, priority) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes doesn't have keys, so we neither have to check the old nor
          // new node for the key. If both are text nodes, they match.
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, '' + newChild, priority);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, priority);
              }

            case REACT_COROUTINE_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateCoroutine(returnFiber, _matchedFiber2, newChild, priority);
              }

            case REACT_YIELD_TYPE:
              {
                // Yields doesn't have keys, so we neither have to check the old nor
                // new node for the key. If both are yields, they match.
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateYield(returnFiber, _matchedFiber3, newChild, priority);
              }

            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber4, newChild, priority);
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber5 = existingChildren.get(newIdx) || null;
            return updateFragment(returnFiber, _matchedFiber5, newChild, priority);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        return null;
      }

      /**
       * Warns if there is a duplicate or missing key
       */
      function warnOnInvalidKey(child, knownKeys) {
        {
          if (typeof child !== 'object' || child === null) {
            return knownKeys;
          }
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_COROUTINE_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child);
              var key = child.key;
              if (typeof key !== 'string') {
                break;
              }
              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              warning$24(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$5());
              break;
            default:
              break;
          }
        }
        return knownKeys;
      }

      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, priority) {
        // This algorithm can't optimize by searching from boths ends since we
        // don't have backpointers on fibers. I'm trying to see how far we can get
        // with that model. If it ends up not being worth the tradeoffs, we can
        // add it later.

        // Even with a two ended optimization, we'd want to optimize for the case
        // where there are few changes and brute force the comparison instead of
        // going for the Map. It'd like to explore hitting that path first in
        // forward-only mode and only go for the Map once we notice that we need
        // lots of look ahead. This doesn't handle reversal as well as two ended
        // search but that's unusual. Besides, for the two ended optimization to
        // work on Iterables, we'd need to copy the whole set.

        // In this first iteration, we'll just live with hitting the bad case
        // (adding everything to a Map) in for every insert/move.

        // If you change this code, also update reconcileChildrenIterator() which
        // uses the same algorithm.

        {
          // First, validate keys.
          var knownKeys = null;
          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }

        var resultingFirstChild = null;
        var previousNewFiber = null;

        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], priority);
          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], priority);
            if (!_newFiber) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }
            previousNewFiber = _newFiber;
          }
          return resultingFirstChild;
        }

        // Add all children to a key map for quick lookups.
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

        // Keep scanning and use the map to restore deleted items as moves.
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], priority);
          if (_newFiber2) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren['delete'](_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }
            previousNewFiber = _newFiber2;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, priority) {
        // This is the same implementation as reconcileChildrenArray(),
        // but using the iterator instead.

        var iteratorFn = getIteratorFn(newChildrenIterable);
        !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

        {
          // Warn about using Maps as children
          if (typeof newChildrenIterable.entries === 'function') {
            var possibleMap = newChildrenIterable;
            if (possibleMap.entries === iteratorFn) {
              warning$24(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$5());
              didWarnAboutMaps = true;
            }
          }

          // First, validate keys.
          // We'll get a different iterator later for the main pass.
          var _newChildren = iteratorFn.call(newChildrenIterable);
          if (_newChildren) {
            var knownKeys = null;
            var _step = _newChildren.next();
            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
        }

        var newChildren = iteratorFn.call(newChildrenIterable);
        !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

        var resultingFirstChild = null;
        var previousNewFiber = null;

        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;

        var step = newChildren.next();
        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, priority);
          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (!oldFiber) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, priority);
            if (_newFiber3 === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }
            previousNewFiber = _newFiber3;
          }
          return resultingFirstChild;
        }

        // Add all children to a key map for quick lookups.
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

        // Keep scanning and use the map to restore deleted items as moves.
        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, priority);
          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren['delete'](_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }
            previousNewFiber = _newFiber4;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, priority) {
        // There's no need to check for keys on text nodes since we don't have a
        // way to define them.
        if (currentFirstChild !== null && currentFirstChild.tag === HostText$5) {
          // We already have an existing node so let's just update it and delete
          // the rest.
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, priority);
          existing.pendingProps = textContent;
          existing['return'] = returnFiber;
          return existing;
        }
        // The existing first child is not a text node so we need to create one
        // and delete the existing ones.
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
        created['return'] = returnFiber;
        return created;
      }

      function reconcileSingleElement(returnFiber, currentFirstChild, element, priority) {
        var key = element.key;
        var child = currentFirstChild;
        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.type === element.type) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, priority);
              existing.ref = coerceRef(child, element);
              existing.pendingProps = element.props;
              existing['return'] = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }

        var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
        created.ref = coerceRef(currentFirstChild, element);
        created['return'] = returnFiber;
        return created;
      }

      function reconcileSingleCoroutine(returnFiber, currentFirstChild, coroutine, priority) {
        var key = coroutine.key;
        var child = currentFirstChild;
        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === CoroutineComponent$2) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, priority);
              existing.pendingProps = coroutine;
              existing['return'] = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }

        var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
        created['return'] = returnFiber;
        return created;
      }

      function reconcileSingleYield(returnFiber, currentFirstChild, yieldNode, priority) {
        // There's no need to check for keys on yields since they're stateless.
        var child = currentFirstChild;
        if (child !== null) {
          if (child.tag === YieldComponent$3) {
            deleteRemainingChildren(returnFiber, child.sibling);
            var existing = useFiber(child, priority);
            existing.type = yieldNode.value;
            existing['return'] = returnFiber;
            return existing;
          } else {
            deleteRemainingChildren(returnFiber, child);
          }
        }

        var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
        created.type = yieldNode.value;
        created['return'] = returnFiber;
        return created;
      }

      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, priority) {
        var key = portal.key;
        var child = currentFirstChild;
        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === HostPortal$5 && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, priority);
              existing.pendingProps = portal.children || [];
              existing['return'] = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }

        var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
        created['return'] = returnFiber;
        return created;
      }

      // This API will tag the children with the side-effect of the reconciliation
      // itself. They will be added to the side-effect list as we pass through the
      // children and the parent.
      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, priority) {
        // This function is not recursive.
        // If the top level item is an array, we treat it as a set of children,
        // not as a fragment. Nested arrays on the other hand will be treated as
        // fragment nodes. Recursion happens at the normal flow.

        // Handle object types
        var isObject = typeof newChild === 'object' && newChild !== null;
        if (isObject) {
          // Support only the subset of return types that Stack supports. Treat
          // everything else as empty, but log a warning.
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));

            case REACT_COROUTINE_TYPE:
              return placeSingleChild(reconcileSingleCoroutine(returnFiber, currentFirstChild, newChild, priority));

            case REACT_YIELD_TYPE:
              return placeSingleChild(reconcileSingleYield(returnFiber, currentFirstChild, newChild, priority));

            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
          }
        }

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, priority));
        }

        if (isArray(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, priority);
        }

        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, priority);
        }

        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        if (typeof newChild === 'undefined') {
          // If the new child is undefined, and the return fiber is a composite
          // component, throw an error. If Fiber return types are disabled,
          // we already threw above.
          switch (returnFiber.tag) {
            case ClassComponent$7:
              {
                {
                  var instance = returnFiber.stateNode;
                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break;
                  }
                }
              }
            // Intentionally fall through to the next case, which handles both
            // functions and classes
            // eslint-disable-next-lined no-fallthrough
            case FunctionalComponent$2:
              {
                var Component = returnFiber.type;
                invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
              }
          }
        }

        // Remaining cases are all treated as empty.
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers$1 = ChildReconciler(true, true);

    var reconcileChildFibersInPlace$1 = ChildReconciler(false, true);

    var mountChildFibersInPlace$1 = ChildReconciler(false, false);

    var cloneChildFibers$1 = function (current, workInProgress) {
      !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

      if (workInProgress.child === null) {
        return;
      }

      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
      // TODO: Pass this as an argument, since it's easy to forget.
      newChild.pendingProps = currentChild.pendingProps;
      workInProgress.child = newChild;

      newChild['return'] = workInProgress;
      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
        newChild.pendingProps = currentChild.pendingProps;
        newChild['return'] = workInProgress;
      }
      newChild.sibling = null;
    };

    var ReactChildFiber = {
      reconcileChildFibers: reconcileChildFibers$1,
      reconcileChildFibersInPlace: reconcileChildFibersInPlace$1,
      mountChildFibersInPlace: mountChildFibersInPlace$1,
      cloneChildFibers: cloneChildFibers$1
    };

    var Update$1 = ReactTypeOfSideEffect.Update;

    var AsyncUpdates$1 = ReactTypeOfInternalContext.AsyncUpdates;

    var cacheContext$1 = ReactFiberContext.cacheContext;
    var getMaskedContext$2 = ReactFiberContext.getMaskedContext;
    var getUnmaskedContext$2 = ReactFiberContext.getUnmaskedContext;
    var isContextConsumer$1 = ReactFiberContext.isContextConsumer;

    var addUpdate$1 = ReactFiberUpdateQueue.addUpdate;
    var addReplaceUpdate$1 = ReactFiberUpdateQueue.addReplaceUpdate;
    var addForceUpdate$1 = ReactFiberUpdateQueue.addForceUpdate;
    var beginUpdateQueue$2 = ReactFiberUpdateQueue.beginUpdateQueue;

    var _require5 = ReactFiberContext;
    var hasContextChanged$2 = _require5.hasContextChanged;

    var isMounted$1 = ReactFiberTreeReflection.isMounted;

    var fakeInternalInstance = {};
    var isArray$1 = Array.isArray;

    {
      var _require7$1 = ReactDebugFiberPerf_1,
          startPhaseTimer$1 = _require7$1.startPhaseTimer,
          stopPhaseTimer$1 = _require7$1.stopPhaseTimer;

      var warning$25 = require$$0;
      var warnOnInvalidCallback = function (callback, callerName) {
        warning$25(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
      };

      // This is so gross but it's at least non-critical and can be removed if
      // it causes problems. This is meant to give a nicer error message for
      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
      // ...)) which otherwise throws a "_processChildContext is not a function"
      // exception.
      Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function () {
          invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
        }
      });
      Object.freeze(fakeInternalInstance);
    }

    var ReactFiberClassComponent = function (scheduleUpdate, getPriorityContext, memoizeProps, memoizeState) {
      // Class component state updater
      var updater = {
        isMounted: isMounted$1,
        enqueueSetState: function (instance, partialState, callback) {
          var fiber = ReactInstanceMap_1.get(instance);
          var priorityLevel = getPriorityContext(fiber, false);
          callback = callback === undefined ? null : callback;
          {
            warnOnInvalidCallback(callback, 'setState');
          }
          addUpdate$1(fiber, partialState, callback, priorityLevel);
          scheduleUpdate(fiber, priorityLevel);
        },
        enqueueReplaceState: function (instance, state, callback) {
          var fiber = ReactInstanceMap_1.get(instance);
          var priorityLevel = getPriorityContext(fiber, false);
          callback = callback === undefined ? null : callback;
          {
            warnOnInvalidCallback(callback, 'replaceState');
          }
          addReplaceUpdate$1(fiber, state, callback, priorityLevel);
          scheduleUpdate(fiber, priorityLevel);
        },
        enqueueForceUpdate: function (instance, callback) {
          var fiber = ReactInstanceMap_1.get(instance);
          var priorityLevel = getPriorityContext(fiber, false);
          callback = callback === undefined ? null : callback;
          {
            warnOnInvalidCallback(callback, 'forceUpdate');
          }
          addForceUpdate$1(fiber, callback, priorityLevel);
          scheduleUpdate(fiber, priorityLevel);
        }
      };

      function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
        if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
          // If the workInProgress already has an Update effect, return true
          return true;
        }

        var instance = workInProgress.stateNode;
        var type = workInProgress.type;
        if (typeof instance.shouldComponentUpdate === 'function') {
          {
            startPhaseTimer$1(workInProgress, 'shouldComponentUpdate');
          }
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
          {
            stopPhaseTimer$1();
          }

          {
            warning$25(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName_1(workInProgress) || 'Unknown');
          }

          return shouldUpdate;
        }

        if (type.prototype && type.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }

        return true;
      }

      function checkClassInstance(workInProgress) {
        var instance = workInProgress.stateNode;
        var type = workInProgress.type;
        {
          var name = getComponentName_1(workInProgress);
          var renderPresent = instance.render;
          warning$25(renderPresent, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
          var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
          warning$25(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
          var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
          warning$25(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
          var noInstancePropTypes = !instance.propTypes;
          warning$25(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
          var noInstanceContextTypes = !instance.contextTypes;
          warning$25(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
          var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
          warning$25(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
          if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
            warning$25(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName_1(workInProgress) || 'A pure component');
          }
          var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
          warning$25(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
          var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
          warning$25(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
          var hasMutatedProps = instance.props !== workInProgress.pendingProps;
          warning$25(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
          var noInstanceDefaultProps = !instance.defaultProps;
          warning$25(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
        }

        var state = instance.state;
        if (state && (typeof state !== 'object' || isArray$1(state))) {
          invariant(false, '%s.state: must be set to an object or null', getComponentName_1(workInProgress));
        }
        if (typeof instance.getChildContext === 'function') {
          !(typeof workInProgress.type.childContextTypes === 'object') ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', getComponentName_1(workInProgress)) : void 0;
        }
      }

      function resetInputPointers(workInProgress, instance) {
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
      }

      function adoptClassInstance(workInProgress, instance) {
        instance.updater = updater;
        workInProgress.stateNode = instance;
        // The instance needs access to the fiber so that it can schedule updates
        ReactInstanceMap_1.set(instance, workInProgress);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }

      function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type;
        var unmaskedContext = getUnmaskedContext$2(workInProgress);
        var needsContext = isContextConsumer$1(workInProgress);
        var context = needsContext ? getMaskedContext$2(workInProgress, unmaskedContext) : emptyObject;
        var instance = new ctor(props, context);
        adoptClassInstance(workInProgress, instance);

        // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (needsContext) {
          cacheContext$1(workInProgress, unmaskedContext, context);
        }

        return instance;
      }

      function callComponentWillMount(workInProgress, instance) {
        {
          startPhaseTimer$1(workInProgress, 'componentWillMount');
        }
        var oldState = instance.state;
        instance.componentWillMount();
        {
          stopPhaseTimer$1();
        }

        if (oldState !== instance.state) {
          {
            warning$25(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName_1(workInProgress));
          }
          updater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
        {
          startPhaseTimer$1(workInProgress, 'componentWillReceiveProps');
        }
        var oldState = instance.state;
        instance.componentWillReceiveProps(newProps, newContext);
        {
          stopPhaseTimer$1();
        }

        if (instance.state !== oldState) {
          {
            warning$25(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName_1(workInProgress));
          }
          updater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      // Invokes the mount life-cycles on a previously never rendered instance.
      function mountClassInstance(workInProgress, priorityLevel) {
        var current = workInProgress.alternate;

        {
          checkClassInstance(workInProgress);
        }

        var instance = workInProgress.stateNode;
        var state = instance.state || null;

        var props = workInProgress.pendingProps;
        !props ? invariant(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;

        var unmaskedContext = getUnmaskedContext$2(workInProgress);

        instance.props = props;
        instance.state = state;
        instance.refs = emptyObject;
        instance.context = getMaskedContext$2(workInProgress, unmaskedContext);

        if (ReactFeatureFlags_1.enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
          workInProgress.internalContextTag |= AsyncUpdates$1;
        }

        if (typeof instance.componentWillMount === 'function') {
          callComponentWillMount(workInProgress, instance);
          // If we had additional state updates during this life-cycle, let's
          // process them now.
          var updateQueue = workInProgress.updateQueue;
          if (updateQueue !== null) {
            instance.state = beginUpdateQueue$2(current, workInProgress, updateQueue, instance, state, props, priorityLevel);
          }
        }
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update$1;
        }
      }

      // Called on a preexisting class instance. Returns false if a resumed render
      // could be reused.
      // function resumeMountClassInstance(
      //   workInProgress: Fiber,
      //   priorityLevel: PriorityLevel,
      // ): boolean {
      //   const instance = workInProgress.stateNode;
      //   resetInputPointers(workInProgress, instance);

      //   let newState = workInProgress.memoizedState;
      //   let newProps = workInProgress.pendingProps;
      //   if (!newProps) {
      //     // If there isn't any new props, then we'll reuse the memoized props.
      //     // This could be from already completed work.
      //     newProps = workInProgress.memoizedProps;
      //     invariant(
      //       newProps != null,
      //       'There should always be pending or memoized props. This error is ' +
      //         'likely caused by a bug in React. Please file an issue.',
      //     );
      //   }
      //   const newUnmaskedContext = getUnmaskedContext(workInProgress);
      //   const newContext = getMaskedContext(workInProgress, newUnmaskedContext);

      //   const oldContext = instance.context;
      //   const oldProps = workInProgress.memoizedProps;

      //   if (
      //     typeof instance.componentWillReceiveProps === 'function' &&
      //     (oldProps !== newProps || oldContext !== newContext)
      //   ) {
      //     callComponentWillReceiveProps(
      //       workInProgress,
      //       instance,
      //       newProps,
      //       newContext,
      //     );
      //   }

      //   // Process the update queue before calling shouldComponentUpdate
      //   const updateQueue = workInProgress.updateQueue;
      //   if (updateQueue !== null) {
      //     newState = beginUpdateQueue(
      //       workInProgress,
      //       updateQueue,
      //       instance,
      //       newState,
      //       newProps,
      //       priorityLevel,
      //     );
      //   }

      //   // TODO: Should we deal with a setState that happened after the last
      //   // componentWillMount and before this componentWillMount? Probably
      //   // unsupported anyway.

      //   if (
      //     !checkShouldComponentUpdate(
      //       workInProgress,
      //       workInProgress.memoizedProps,
      //       newProps,
      //       workInProgress.memoizedState,
      //       newState,
      //       newContext,
      //     )
      //   ) {
      //     // Update the existing instance's state, props, and context pointers even
      //     // though we're bailing out.
      //     instance.props = newProps;
      //     instance.state = newState;
      //     instance.context = newContext;
      //     return false;
      //   }

      //   // Update the input pointers now so that they are correct when we call
      //   // componentWillMount
      //   instance.props = newProps;
      //   instance.state = newState;
      //   instance.context = newContext;

      //   if (typeof instance.componentWillMount === 'function') {
      //     callComponentWillMount(workInProgress, instance);
      //     // componentWillMount may have called setState. Process the update queue.
      //     const newUpdateQueue = workInProgress.updateQueue;
      //     if (newUpdateQueue !== null) {
      //       newState = beginUpdateQueue(
      //         workInProgress,
      //         newUpdateQueue,
      //         instance,
      //         newState,
      //         newProps,
      //         priorityLevel,
      //       );
      //     }
      //   }

      //   if (typeof instance.componentDidMount === 'function') {
      //     workInProgress.effectTag |= Update;
      //   }

      //   instance.state = newState;

      //   return true;
      // }

      // Invokes the update life-cycles and returns false if it shouldn't rerender.
      function updateClassInstance(current, workInProgress, priorityLevel) {
        var instance = workInProgress.stateNode;
        resetInputPointers(workInProgress, instance);

        var oldProps = workInProgress.memoizedProps;
        var newProps = workInProgress.pendingProps;
        if (!newProps) {
          // If there aren't any new props, then we'll reuse the memoized props.
          // This could be from already completed work.
          newProps = oldProps;
          !(newProps != null) ? invariant(false, 'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        }
        var oldContext = instance.context;
        var newUnmaskedContext = getUnmaskedContext$2(workInProgress);
        var newContext = getMaskedContext$2(workInProgress, newUnmaskedContext);

        // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.

        if (typeof instance.componentWillReceiveProps === 'function' && (oldProps !== newProps || oldContext !== newContext)) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
        }

        // Compute the next state using the memoized state and the update queue.
        var oldState = workInProgress.memoizedState;
        // TODO: Previous state can be null.
        var newState = void 0;
        if (workInProgress.updateQueue !== null) {
          newState = beginUpdateQueue$2(current, workInProgress, workInProgress.updateQueue, instance, oldState, newProps, priorityLevel);
        } else {
          newState = oldState;
        }

        if (oldProps === newProps && oldState === newState && !hasContextChanged$2() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
          // If an update was already in progress, we should schedule an Update
          // effect even though we're bailing out, so that cWU/cDU are called.
          if (typeof instance.componentDidUpdate === 'function') {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update$1;
            }
          }
          return false;
        }

        var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

        if (shouldUpdate) {
          if (typeof instance.componentWillUpdate === 'function') {
            {
              startPhaseTimer$1(workInProgress, 'componentWillUpdate');
            }
            instance.componentWillUpdate(newProps, newState, newContext);
            {
              stopPhaseTimer$1();
            }
          }
          if (typeof instance.componentDidUpdate === 'function') {
            workInProgress.effectTag |= Update$1;
          }
        } else {
          // If an update was already in progress, we should schedule an Update
          // effect even though we're bailing out, so that cWU/cDU are called.
          if (typeof instance.componentDidUpdate === 'function') {
            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.effectTag |= Update$1;
            }
          }

          // If shouldComponentUpdate returned false, we should still update the
          // memoized props/state to indicate that this work can be reused.
          memoizeProps(workInProgress, newProps);
          memoizeState(workInProgress, newState);
        }

        // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = newContext;

        return shouldUpdate;
      }

      return {
        adoptClassInstance: adoptClassInstance,
        constructClassInstance: constructClassInstance,
        mountClassInstance: mountClassInstance,
        // resumeMountClassInstance,
        updateClassInstance: updateClassInstance
      };
    };

    var mountChildFibersInPlace = ReactChildFiber.mountChildFibersInPlace;
    var reconcileChildFibers = ReactChildFiber.reconcileChildFibers;
    var reconcileChildFibersInPlace = ReactChildFiber.reconcileChildFibersInPlace;
    var cloneChildFibers = ReactChildFiber.cloneChildFibers;

    var beginUpdateQueue$1 = ReactFiberUpdateQueue.beginUpdateQueue;

    var getMaskedContext$1 = ReactFiberContext.getMaskedContext;
    var getUnmaskedContext$1 = ReactFiberContext.getUnmaskedContext;
    var hasContextChanged$1 = ReactFiberContext.hasContextChanged;
    var pushContextProvider$1 = ReactFiberContext.pushContextProvider;
    var pushTopLevelContextObject$1 = ReactFiberContext.pushTopLevelContextObject;
    var invalidateContextProvider$1 = ReactFiberContext.invalidateContextProvider;

    var IndeterminateComponent$2 = ReactTypeOfWork.IndeterminateComponent;
    var FunctionalComponent$1 = ReactTypeOfWork.FunctionalComponent;
    var ClassComponent$6 = ReactTypeOfWork.ClassComponent;
    var HostRoot$7 = ReactTypeOfWork.HostRoot;
    var HostComponent$7 = ReactTypeOfWork.HostComponent;
    var HostText$4 = ReactTypeOfWork.HostText;
    var HostPortal$4 = ReactTypeOfWork.HostPortal;
    var CoroutineComponent$1 = ReactTypeOfWork.CoroutineComponent;
    var CoroutineHandlerPhase = ReactTypeOfWork.CoroutineHandlerPhase;
    var YieldComponent$2 = ReactTypeOfWork.YieldComponent;
    var Fragment$2 = ReactTypeOfWork.Fragment;

    var NoWork$3 = ReactPriorityLevel.NoWork;
    var OffscreenPriority$1 = ReactPriorityLevel.OffscreenPriority;

    var PerformedWork$1 = ReactTypeOfSideEffect.PerformedWork;
    var Placement$2 = ReactTypeOfSideEffect.Placement;
    var ContentReset$1 = ReactTypeOfSideEffect.ContentReset;
    var Err$1 = ReactTypeOfSideEffect.Err;
    var Ref$1 = ReactTypeOfSideEffect.Ref;

    var ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner;

    {
      var ReactDebugCurrentFiber$4 = ReactDebugCurrentFiber_1;

      var _require7 = ReactDebugFiberPerf_1,
          cancelWorkTimer = _require7.cancelWorkTimer;

      var warning$23 = require$$0;

      var warnedAboutStatelessRefs = {};
    }

    var ReactFiberBeginWork = function (config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext) {
      var shouldSetTextContent = config.shouldSetTextContent,
          useSyncScheduling = config.useSyncScheduling,
          shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
      var pushHostContext = hostContext.pushHostContext,
          pushHostContainer = hostContext.pushHostContainer;
      var enterHydrationState = hydrationContext.enterHydrationState,
          resetHydrationState = hydrationContext.resetHydrationState,
          tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

      var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState),
          adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
          constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
          mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
          updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

      function reconcileChildren(current, workInProgress, nextChildren) {
        var priorityLevel = workInProgress.pendingWorkPriority;
        reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel);
      }

      function reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel) {
        if (current === null) {
          // If this is a fresh new component that hasn't been rendered yet, we
          // won't update its child set by applying minimal side-effects. Instead,
          // we will add them all to the child before it gets rendered. That means
          // we can optimize this reconciliation pass by not tracking side-effects.
          workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
        } else if (current.child === workInProgress.child) {
          // If the current child is the same as the work in progress, it means that
          // we haven't yet started any work on these children. Therefore, we use
          // the clone algorithm to create a copy of all the current children.

          // If we had any progressed work already, that is invalid at this point so
          // let's throw it out.
          workInProgress.child = reconcileChildFibers(workInProgress, workInProgress.child, nextChildren, priorityLevel);
        } else {
          // If, on the other hand, it is already using a clone, that means we've
          // already begun some work on this tree and we can continue where we left
          // off by reconciling against the existing children.
          workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
        }
      }

      function updateFragment(current, workInProgress) {
        var nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) {
          // Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
          if (nextChildren === null) {
            nextChildren = workInProgress.memoizedProps;
          }
        } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }
        reconcileChildren(current, workInProgress, nextChildren);
        memoizeProps(workInProgress, nextChildren);
        return workInProgress.child;
      }

      function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        if (ref !== null && (!current || current.ref !== ref)) {
          // Schedule a Ref effect
          workInProgress.effectTag |= Ref$1;
        }
      }

      function updateFunctionalComponent(current, workInProgress) {
        var fn = workInProgress.type;
        var nextProps = workInProgress.pendingProps;

        var memoizedProps = workInProgress.memoizedProps;
        if (hasContextChanged$1()) {
          // Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
          if (nextProps === null) {
            nextProps = memoizedProps;
          }
        } else {
          if (nextProps === null || memoizedProps === nextProps) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }
          // TODO: consider bringing fn.shouldComponentUpdate() back.
          // It used to be here.
        }

        var unmaskedContext = getUnmaskedContext$1(workInProgress);
        var context = getMaskedContext$1(workInProgress, unmaskedContext);

        var nextChildren;

        {
          ReactCurrentOwner$2.current = workInProgress;
          ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, 'render');
          nextChildren = fn(nextProps, context);
          ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, null);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork$1;
        reconcileChildren(current, workInProgress, nextChildren);
        memoizeProps(workInProgress, nextProps);
        return workInProgress.child;
      }

      function updateClassComponent(current, workInProgress, priorityLevel) {
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext = pushContextProvider$1(workInProgress);

        var shouldUpdate = void 0;
        if (current === null) {
          if (!workInProgress.stateNode) {
            // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, workInProgress.pendingProps);
            mountClassInstance(workInProgress, priorityLevel);
            shouldUpdate = true;
          } else {
            invariant(false, 'Resuming work not yet implemented.');
            // In a resume, we'll already have an instance we can reuse.
            // shouldUpdate = resumeMountClassInstance(workInProgress, priorityLevel);
          }
        } else {
          shouldUpdate = updateClassInstance(current, workInProgress, priorityLevel);
        }
        return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
      }

      function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current, workInProgress);

        if (!shouldUpdate) {
          // Context providers should defer to sCU for rendering
          if (hasContext) {
            invalidateContextProvider$1(workInProgress, false);
          }

          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        var instance = workInProgress.stateNode;

        // Rerender
        ReactCurrentOwner$2.current = workInProgress;
        var nextChildren = void 0;
        {
          ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, 'render');
          nextChildren = instance.render();
          ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, null);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork$1;
        reconcileChildren(current, workInProgress, nextChildren);
        // Memoize props and state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        memoizeState(workInProgress, instance.state);
        memoizeProps(workInProgress, instance.props);

        // The context might have changed so we need to recalculate it.
        if (hasContext) {
          invalidateContextProvider$1(workInProgress, true);
        }

        return workInProgress.child;
      }

      function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) {
          pushTopLevelContextObject$1(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        } else if (root.context) {
          // Should always be set
          pushTopLevelContextObject$1(workInProgress, root.context, false);
        }
        pushHostContainer(workInProgress, root.containerInfo);
      }

      function updateHostRoot(current, workInProgress, priorityLevel) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
          var prevState = workInProgress.memoizedState;
          var state = beginUpdateQueue$1(current, workInProgress, updateQueue, null, prevState, null, priorityLevel);
          if (prevState === state) {
            // If the state is the same as before, that's a bailout because we had
            // no work matching this priority.
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }
          var element = state.element;
          if ((current === null || current.child === null) && enterHydrationState(workInProgress)) {
            // If we don't have any current children this might be the first pass.
            // We always try to hydrate. If this isn't a hydration pass there won't
            // be any children to hydrate which is effectively the same thing as
            // not hydrating.

            // This is a bit of a hack. We track the host root as a placement to
            // know that we're currently in a mounting state. That way isMounted
            // works as expected. We must reset this before committing.
            // TODO: Delete this when we delete isMounted and findDOMNode.
            workInProgress.effectTag |= Placement$2;

            // Ensure that children mount into this root without tracking
            // side-effects. This ensures that we don't store Placement effects on
            // nodes that will be hydrated.
            workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, element, priorityLevel);
          } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            resetHydrationState();
            reconcileChildren(current, workInProgress, element);
          }
          memoizeState(workInProgress, state);
          return workInProgress.child;
        }
        resetHydrationState();
        // If there is no update queue, that's a bailout because the root has no props.
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }

      function updateHostComponent(current, workInProgress, renderPriority) {
        pushHostContext(workInProgress);

        if (current === null) {
          tryToClaimNextHydratableInstance(workInProgress);
        }

        var type = workInProgress.type;
        var memoizedProps = workInProgress.memoizedProps;
        var nextProps = workInProgress.pendingProps;
        if (nextProps === null) {
          nextProps = memoizedProps;
          !(nextProps !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        }
        var prevProps = current !== null ? current.memoizedProps : null;

        if (hasContextChanged$1()) {
          // Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
        } else if (nextProps === null || memoizedProps === nextProps) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);

        if (isDirectTextChild) {
          // We special case a direct text child of a host node. This is a common
          // case. We won't handle it as a reified child. We will instead handle
          // this in the host environment that also have access to this prop. That
          // avoids allocating another HostText fiber and traversing it.
          nextChildren = null;
        } else if (prevProps && shouldSetTextContent(type, prevProps)) {
          // If we're switching from a direct text child to a normal child, or to
          // empty, we need to schedule the text content to be reset.
          workInProgress.effectTag |= ContentReset$1;
        }

        markRef(current, workInProgress);

        // Check the host config to see if the children are offscreen/hidden.
        if (renderPriority !== OffscreenPriority$1 && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
          // Down-prioritize the children.
          workInProgress.pendingWorkPriority = OffscreenPriority$1;
          // Bailout and come back to this fiber later at OffscreenPriority.
          return null;
        }

        reconcileChildren(current, workInProgress, nextChildren);
        memoizeProps(workInProgress, nextProps);
        return workInProgress.child;
      }

      function updateHostText(current, workInProgress) {
        if (current === null) {
          tryToClaimNextHydratableInstance(workInProgress);
        }
        var nextProps = workInProgress.pendingProps;
        if (nextProps === null) {
          nextProps = workInProgress.memoizedProps;
        }
        memoizeProps(workInProgress, nextProps);
        // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
      }

      function mountIndeterminateComponent(current, workInProgress, priorityLevel) {
        !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var fn = workInProgress.type;
        var props = workInProgress.pendingProps;
        var unmaskedContext = getUnmaskedContext$1(workInProgress);
        var context = getMaskedContext$1(workInProgress, unmaskedContext);

        var value;

        {
          ReactCurrentOwner$2.current = workInProgress;
          value = fn(props, context);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork$1;

        if (typeof value === 'object' && value !== null && typeof value.render === 'function') {
          // Proceed under the assumption that this is a class instance
          workInProgress.tag = ClassComponent$6;

          // Push context providers early to prevent context stack mismatches.
          // During mounting we don't know the child context yet as the instance doesn't exist.
          // We will invalidate the child context in finishClassComponent() right after rendering.
          var hasContext = pushContextProvider$1(workInProgress);
          adoptClassInstance(workInProgress, value);
          mountClassInstance(workInProgress, priorityLevel);
          return finishClassComponent(current, workInProgress, true, hasContext);
        } else {
          // Proceed under the assumption that this is a functional component
          workInProgress.tag = FunctionalComponent$1;
          {
            var Component = workInProgress.type;

            if (Component) {
              warning$23(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
            }
            if (workInProgress.ref !== null) {
              var info = '';
              var ownerName = ReactDebugCurrentFiber$4.getCurrentFiberOwnerName();
              if (ownerName) {
                info += '\n\nCheck the render method of `' + ownerName + '`.';
              }

              var warningKey = ownerName || workInProgress._debugID || '';
              var debugSource = workInProgress._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
              }
              if (!warnedAboutStatelessRefs[warningKey]) {
                warnedAboutStatelessRefs[warningKey] = true;
                warning$23(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber$4.getCurrentFiberStackAddendum());
              }
            }
          }
          reconcileChildren(current, workInProgress, value);
          memoizeProps(workInProgress, props);
          return workInProgress.child;
        }
      }

      function updateCoroutineComponent(current, workInProgress) {
        var nextCoroutine = workInProgress.pendingProps;
        if (hasContextChanged$1()) {
          // Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
          if (nextCoroutine === null) {
            nextCoroutine = current && current.memoizedProps;
            !(nextCoroutine !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          }
        } else if (nextCoroutine === null || workInProgress.memoizedProps === nextCoroutine) {
          nextCoroutine = workInProgress.memoizedProps;
          // TODO: When bailing out, we might need to return the stateNode instead
          // of the child. To check it for work.
          // return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        var nextChildren = nextCoroutine.children;
        var priorityLevel = workInProgress.pendingWorkPriority;

        // The following is a fork of reconcileChildrenAtPriority but using
        // stateNode to store the child.
        if (current === null) {
          workInProgress.stateNode = mountChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel);
        } else if (current.child === workInProgress.child) {
          workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel);
        } else {
          workInProgress.stateNode = reconcileChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel);
        }

        memoizeProps(workInProgress, nextCoroutine);
        // This doesn't take arbitrary time so we could synchronously just begin
        // eagerly do the work of workInProgress.child as an optimization.
        return workInProgress.stateNode;
      }

      function updatePortalComponent(current, workInProgress) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var priorityLevel = workInProgress.pendingWorkPriority;
        var nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) {
          // Normally we can bail out on props equality but if context has changed
          // we don't do the bailout and we have to reuse existing props instead.
          if (nextChildren === null) {
            nextChildren = current && current.memoizedProps;
            !(nextChildren != null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          }
        } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        if (current === null) {
          // Portals are special because we don't append the children during mount
          // but at commit. Therefore we need to track insertions which the normal
          // flow doesn't do during mount. This doesn't happen at the root because
          // the root always starts with a "current" with a null child.
          // TODO: Consider unifying this with how the root works.
          workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
          memoizeProps(workInProgress, nextChildren);
        } else {
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
        }
        return workInProgress.child;
      }

      /*
      function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
        let child = firstChild;
        do {
          // Ensure that the first and last effect of the parent corresponds
          // to the children's first and last effect.
          if (!returnFiber.firstEffect) {
            returnFiber.firstEffect = child.firstEffect;
          }
          if (child.lastEffect) {
            if (returnFiber.lastEffect) {
              returnFiber.lastEffect.nextEffect = child.firstEffect;
            }
            returnFiber.lastEffect = child.lastEffect;
          }
        } while (child = child.sibling);
      }
      */

      function bailoutOnAlreadyFinishedWork(current, workInProgress) {
        {
          cancelWorkTimer(workInProgress);
        }

        // TODO: We should ideally be able to bail out early if the children have no
        // more work to do. However, since we don't have a separation of this
        // Fiber's priority and its children yet - we don't know without doing lots
        // of the same work we do anyway. Once we have that separation we can just
        // bail out here if the children has no more work at this priority level.
        // if (workInProgress.priorityOfChildren <= priorityLevel) {
        //   // If there are side-effects in these children that have not yet been
        //   // committed we need to ensure that they get properly transferred up.
        //   if (current && current.child !== workInProgress.child) {
        //     reuseChildrenEffects(workInProgress, child);
        //   }
        //   return null;
        // }

        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
      }

      function bailoutOnLowPriority(current, workInProgress) {
        {
          cancelWorkTimer(workInProgress);
        }

        // TODO: Handle HostComponent tags here as well and call pushHostContext()?
        // See PR 8590 discussion for context
        switch (workInProgress.tag) {
          case HostRoot$7:
            pushHostRootContext(workInProgress);
            break;
          case ClassComponent$6:
            pushContextProvider$1(workInProgress);
            break;
          case HostPortal$4:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            break;
        }
        // TODO: What if this is currently in progress?
        // How can that happen? How is this not being cloned?
        return null;
      }

      // TODO: Delete memoizeProps/State and move to reconcile/bailout instead
      function memoizeProps(workInProgress, nextProps) {
        workInProgress.memoizedProps = nextProps;
      }

      function memoizeState(workInProgress, nextState) {
        workInProgress.memoizedState = nextState;
        // Don't reset the updateQueue, in case there are pending updates. Resetting
        // is handled by beginUpdateQueue.
      }

      function beginWork(current, workInProgress, priorityLevel) {
        if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) {
          return bailoutOnLowPriority(current, workInProgress);
        }

        {
          ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, null);
        }

        switch (workInProgress.tag) {
          case IndeterminateComponent$2:
            return mountIndeterminateComponent(current, workInProgress, priorityLevel);
          case FunctionalComponent$1:
            return updateFunctionalComponent(current, workInProgress);
          case ClassComponent$6:
            return updateClassComponent(current, workInProgress, priorityLevel);
          case HostRoot$7:
            return updateHostRoot(current, workInProgress, priorityLevel);
          case HostComponent$7:
            return updateHostComponent(current, workInProgress, priorityLevel);
          case HostText$4:
            return updateHostText(current, workInProgress);
          case CoroutineHandlerPhase:
            // This is a restart. Reset the tag to the initial phase.
            workInProgress.tag = CoroutineComponent$1;
          // Intentionally fall through since this is now the same.
          case CoroutineComponent$1:
            return updateCoroutineComponent(current, workInProgress);
          case YieldComponent$2:
            // A yield component is just a placeholder, we can just run through the
            // next one immediately.
            return null;
          case HostPortal$4:
            return updatePortalComponent(current, workInProgress);
          case Fragment$2:
            return updateFragment(current, workInProgress);
          default:
            invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
        }
      }

      function beginFailedWork(current, workInProgress, priorityLevel) {
        // Push context providers here to avoid a push/pop context mismatch.
        switch (workInProgress.tag) {
          case ClassComponent$6:
            pushContextProvider$1(workInProgress);
            break;
          case HostRoot$7:
            pushHostRootContext(workInProgress);
            break;
          default:
            invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
        }

        // Add an error effect so we can handle the error during the commit phase
        workInProgress.effectTag |= Err$1;

        // This is a weird case where we do "resume" work — work that failed on
        // our first attempt. Because we no longer have a notion of "progressed
        // deletions," reset the child to the current child to make sure we delete
        // it again. TODO: Find a better way to handle this, perhaps during a more
        // general overhaul of error handling.
        if (current === null) {
          workInProgress.child = null;
        } else if (workInProgress.child !== current.child) {
          workInProgress.child = current.child;
        }

        if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) {
          return bailoutOnLowPriority(current, workInProgress);
        }

        // If we don't bail out, we're going be recomputing our children so we need
        // to drop our effect list.
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;

        // Unmount the current children as if the component rendered null
        var nextChildren = null;
        reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel);

        if (workInProgress.tag === ClassComponent$6) {
          var instance = workInProgress.stateNode;
          workInProgress.memoizedProps = instance.props;
          workInProgress.memoizedState = instance.state;
        }

        return workInProgress.child;
      }

      return {
        beginWork: beginWork,
        beginFailedWork: beginFailedWork
      };
    };

    var reconcileChildFibers$2 = ReactChildFiber.reconcileChildFibers;

    var popContextProvider$2 = ReactFiberContext.popContextProvider;
    var popTopLevelContextObject$1 = ReactFiberContext.popTopLevelContextObject;

    var IndeterminateComponent$3 = ReactTypeOfWork.IndeterminateComponent;
    var FunctionalComponent$3 = ReactTypeOfWork.FunctionalComponent;
    var ClassComponent$8 = ReactTypeOfWork.ClassComponent;
    var HostRoot$8 = ReactTypeOfWork.HostRoot;
    var HostComponent$8 = ReactTypeOfWork.HostComponent;
    var HostText$6 = ReactTypeOfWork.HostText;
    var HostPortal$6 = ReactTypeOfWork.HostPortal;
    var CoroutineComponent$3 = ReactTypeOfWork.CoroutineComponent;
    var CoroutineHandlerPhase$1 = ReactTypeOfWork.CoroutineHandlerPhase;
    var YieldComponent$4 = ReactTypeOfWork.YieldComponent;
    var Fragment$4 = ReactTypeOfWork.Fragment;
    var Placement$4 = ReactTypeOfSideEffect.Placement;
    var Ref$2 = ReactTypeOfSideEffect.Ref;
    var Update$2 = ReactTypeOfSideEffect.Update;
    var OffscreenPriority$2 = ReactPriorityLevel.OffscreenPriority;

    {
      var ReactDebugCurrentFiber$5 = ReactDebugCurrentFiber_1;
    }

    var ReactFiberCompleteWork = function (config, hostContext, hydrationContext) {
      var createInstance = config.createInstance,
          createTextInstance = config.createTextInstance,
          appendInitialChild = config.appendInitialChild,
          finalizeInitialChildren = config.finalizeInitialChildren,
          prepareUpdate = config.prepareUpdate;
      var getRootHostContainer = hostContext.getRootHostContainer,
          popHostContext = hostContext.popHostContext,
          getHostContext = hostContext.getHostContext,
          popHostContainer = hostContext.popHostContainer;
      var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
          prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
          popHydrationState = hydrationContext.popHydrationState;

      function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // an UpdateAndPlacement.
        workInProgress.effectTag |= Update$2;
      }

      function markRef(workInProgress) {
        workInProgress.effectTag |= Ref$2;
      }

      function appendAllYields(yields, workInProgress) {
        var node = workInProgress.stateNode;
        if (node) {
          node['return'] = workInProgress;
        }
        while (node !== null) {
          if (node.tag === HostComponent$8 || node.tag === HostText$6 || node.tag === HostPortal$6) {
            invariant(false, 'A coroutine cannot have host component children.');
          } else if (node.tag === YieldComponent$4) {
            yields.push(node.type);
          } else if (node.child !== null) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }
          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === workInProgress) {
              return;
            }
            node = node['return'];
          }
          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      }

      function moveCoroutineToHandlerPhase(current, workInProgress) {
        var coroutine = workInProgress.memoizedProps;
        !coroutine ? invariant(false, 'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.') : void 0;

        // First step of the coroutine has completed. Now we need to do the second.
        // TODO: It would be nice to have a multi stage coroutine represented by a
        // single component, or at least tail call optimize nested ones. Currently
        // that requires additional fields that we don't want to add to the fiber.
        // So this requires nested handlers.
        // Note: This doesn't mutate the alternate node. I don't think it needs to
        // since this stage is reset for every pass.
        workInProgress.tag = CoroutineHandlerPhase$1;

        // Build up the yields.
        // TODO: Compare this to a generator or opaque helpers like Children.
        var yields = [];
        appendAllYields(yields, workInProgress);
        var fn = coroutine.handler;
        var props = coroutine.props;
        var nextChildren = fn(props, yields);

        var currentFirstChild = current !== null ? current.child : null;
        // Inherit the priority of the returnFiber.
        var priority = workInProgress.pendingWorkPriority;
        workInProgress.child = reconcileChildFibers$2(workInProgress, currentFirstChild, nextChildren, priority);
        return workInProgress.child;
      }

      function appendAllChildren(parent, workInProgress) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while (node !== null) {
          if (node.tag === HostComponent$8 || node.tag === HostText$6) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal$6) {
            // If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node = node.child;
            continue;
          }
          if (node === workInProgress) {
            return;
          }
          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === workInProgress) {
              return;
            }
            node = node['return'];
          }
          node = node.sibling;
        }
      }

      function completeWork(current, workInProgress, renderPriority) {
        {
          ReactDebugCurrentFiber$5.setCurrentFiber(workInProgress, null);
        }

        // Get the latest props.
        var newProps = workInProgress.pendingProps;
        if (newProps === null) {
          newProps = workInProgress.memoizedProps;
        } else if (workInProgress.pendingWorkPriority !== OffscreenPriority$2 || renderPriority === OffscreenPriority$2) {
          // Reset the pending props, unless this was a down-prioritization.
          workInProgress.pendingProps = null;
        }

        switch (workInProgress.tag) {
          case FunctionalComponent$3:
            return null;
          case ClassComponent$8:
            {
              // We are leaving this subtree, so pop context if any.
              popContextProvider$2(workInProgress);
              return null;
            }
          case HostRoot$8:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject$1(workInProgress);
              var fiberRoot = workInProgress.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }

              if (current === null || current.child === null) {
                // If we hydrated, pop so that we can delete any remaining children
                // that weren't hydrated.
                popHydrationState(workInProgress);
                // This resets the hacky state to fix isMounted before committing.
                // TODO: Delete this when we delete isMounted and findDOMNode.
                workInProgress.effectTag &= ~Placement$4;
              }
              return null;
            }
          case HostComponent$8:
            {
              popHostContext(workInProgress);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress.type;
              if (current !== null && workInProgress.stateNode != null) {
                // If we have an alternate, that means this is an update and we need to
                // schedule a side-effect to do the updates.
                var oldProps = current.memoizedProps;
                // If we get updated because one of our children updated, we don't
                // have newProps so we'll have to reuse them.
                // TODO: Split the update API as separate for the props vs. children.
                // Even better would be if children weren't special cased at all tho.
                var instance = workInProgress.stateNode;
                var currentHostContext = getHostContext();
                var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);

                // TODO: Type this specific to this type of component.
                workInProgress.updateQueue = updatePayload;
                // If the update payload indicates that there is a change or if there
                // is a new ref we mark this as an update.
                if (updatePayload) {
                  markUpdate(workInProgress);
                }
                if (current.ref !== workInProgress.ref) {
                  markRef(workInProgress);
                }
              } else {
                if (!newProps) {
                  !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                  // This can happen when we abort work.
                  return null;
                }

                var _currentHostContext = getHostContext();
                // TODO: Move createInstance to beginWork and keep it on a context
                // "stack" as the parent. Then append children as we go in beginWork
                // or completeWork depending on we want to add then top->down or
                // bottom->up. Top->down is faster in IE11.
                var wasHydrated = popHydrationState(workInProgress);
                if (wasHydrated) {
                  // TOOD: Move this and createInstance step into the beginPhase
                  // to consolidate.
                  if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                    // If changes to the hydrated node needs to be applied at the
                    // commit-phase we mark this as such.
                    markUpdate(workInProgress);
                  }
                } else {
                  var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

                  appendAllChildren(_instance, workInProgress);

                  // Certain renderers require commit-time effects for initial mount.
                  // (eg DOM renderer supports auto-focus for certain elements).
                  // Make sure such renderers get scheduled for later work.
                  if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress);
                  }
                  workInProgress.stateNode = _instance;
                }

                if (workInProgress.ref !== null) {
                  // If there is a ref on a host node we need to schedule a callback
                  markRef(workInProgress);
                }
              }
              return null;
            }
          case HostText$6:
            {
              var newText = newProps;
              if (current && workInProgress.stateNode != null) {
                var oldText = current.memoizedProps;
                // If we have an alternate, that means this is an update and we need
                // to schedule a side-effect to do the updates.
                if (oldText !== newText) {
                  markUpdate(workInProgress);
                }
              } else {
                if (typeof newText !== 'string') {
                  !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                  // This can happen when we abort work.
                  return null;
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext2 = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress);
                if (_wasHydrated) {
                  if (prepareToHydrateHostTextInstance(workInProgress)) {
                    markUpdate(workInProgress);
                  }
                } else {
                  workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                }
              }
              return null;
            }
          case CoroutineComponent$3:
            return moveCoroutineToHandlerPhase(current, workInProgress);
          case CoroutineHandlerPhase$1:
            // Reset the tag to now be a first phase coroutine.
            workInProgress.tag = CoroutineComponent$3;
            return null;
          case YieldComponent$4:
            // Does nothing.
            return null;
          case Fragment$4:
            return null;
          case HostPortal$6:
            // TODO: Only mark this as an update if we have any pending callbacks.
            markUpdate(workInProgress);
            popHostContainer(workInProgress);
            return null;
          // Error cases
          case IndeterminateComponent$3:
            invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
          // eslint-disable-next-line no-fallthrough
          default:
            invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
        }
      }

      return {
        completeWork: completeWork
      };
    };

    {
      var warning$26 = require$$0;
    }

    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;

    function catchErrors(fn) {
      return function (arg) {
        try {
          return fn(arg);
        } catch (err) {
          if (true && !hasLoggedError) {
            hasLoggedError = true;
            warning$26(false, 'React DevTools encountered an error: %s', err);
          }
        }
      };
    }

    function injectInternals$1(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // No DevTools
        return false;
      }
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!hook.supportsFiber) {
        {
          warning$26(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
        }
        // DevTools exists, even though it doesn't support Fiber.
        return true;
      }
      try {
        var rendererID = hook.inject(internals);
        // We have successfully injected, so now it is safe to set up hooks.
        onCommitFiberRoot = catchErrors(function (root) {
          return hook.onCommitFiberRoot(rendererID, root);
        });
        onCommitFiberUnmount = catchErrors(function (fiber) {
          return hook.onCommitFiberUnmount(rendererID, fiber);
        });
      } catch (err) {
        // Catch all errors because it is unsafe to throw during initialization.
        {
          warning$26(false, 'React DevTools encountered an error: %s.', err);
        }
      }
      // DevTools exists
      return true;
    }

    function onCommitRoot$1(root) {
      if (typeof onCommitFiberRoot === 'function') {
        onCommitFiberRoot(root);
      }
    }

    function onCommitUnmount$1(fiber) {
      if (typeof onCommitFiberUnmount === 'function') {
        onCommitFiberUnmount(fiber);
      }
    }

    var injectInternals_1 = injectInternals$1;
    var onCommitRoot_1 = onCommitRoot$1;
    var onCommitUnmount_1 = onCommitUnmount$1;

    var ReactFiberDevToolsHook = {
      injectInternals: injectInternals_1,
      onCommitRoot: onCommitRoot_1,
      onCommitUnmount: onCommitUnmount_1
    };

    var ClassComponent$9 = ReactTypeOfWork.ClassComponent;
    var HostRoot$9 = ReactTypeOfWork.HostRoot;
    var HostComponent$9 = ReactTypeOfWork.HostComponent;
    var HostText$7 = ReactTypeOfWork.HostText;
    var HostPortal$7 = ReactTypeOfWork.HostPortal;
    var CoroutineComponent$4 = ReactTypeOfWork.CoroutineComponent;

    var commitCallbacks$1 = ReactFiberUpdateQueue.commitCallbacks;

    var onCommitUnmount = ReactFiberDevToolsHook.onCommitUnmount;

    var invokeGuardedCallback$2 = ReactErrorUtils_1.invokeGuardedCallback;
    var hasCaughtError$1 = ReactErrorUtils_1.hasCaughtError;
    var clearCaughtError$1 = ReactErrorUtils_1.clearCaughtError;

    var Placement$5 = ReactTypeOfSideEffect.Placement;
    var Update$3 = ReactTypeOfSideEffect.Update;
    var Callback$1 = ReactTypeOfSideEffect.Callback;
    var ContentReset$2 = ReactTypeOfSideEffect.ContentReset;

    {
      var _require5$1 = ReactDebugFiberPerf_1,
          startPhaseTimer$2 = _require5$1.startPhaseTimer,
          stopPhaseTimer$2 = _require5$1.stopPhaseTimer;
    }

    var ReactFiberCommitWork = function (config, captureError) {
      var commitMount = config.commitMount,
          commitUpdate = config.commitUpdate,
          resetTextContent = config.resetTextContent,
          commitTextUpdate = config.commitTextUpdate,
          appendChild = config.appendChild,
          appendChildToContainer = config.appendChildToContainer,
          insertBefore = config.insertBefore,
          insertInContainerBefore = config.insertInContainerBefore,
          removeChild = config.removeChild,
          removeChildFromContainer = config.removeChildFromContainer,
          getPublicInstance = config.getPublicInstance;

      {
        var callComponentWillUnmountWithTimerInDev = function (current, instance) {
          startPhaseTimer$2(current, 'componentWillUnmount');
          instance.props = current.memoizedProps;
          instance.state = current.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer$2();
        };
      }

      // Capture errors so they don't interrupt unmounting.
      function safelyCallComponentWillUnmount(current, instance) {
        {
          invokeGuardedCallback$2(null, callComponentWillUnmountWithTimerInDev, null, current, instance);
          if (hasCaughtError$1()) {
            var unmountError = clearCaughtError$1();
            captureError(current, unmountError);
          }
        }
      }

      function safelyDetachRef(current) {
        var ref = current.ref;
        if (ref !== null) {
          {
            invokeGuardedCallback$2(null, ref, null, null);
            if (hasCaughtError$1()) {
              var refError = clearCaughtError$1();
              captureError(current, refError);
            }
          }
        }
      }

      function getHostParentFiber(fiber) {
        var parent = fiber['return'];
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent['return'];
        }
        invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
      }

      function isHostParent(fiber) {
        return fiber.tag === HostComponent$9 || fiber.tag === HostRoot$9 || fiber.tag === HostPortal$7;
      }

      function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        var node = fiber;
        siblings: while (true) {
          // If we didn't find anything, let's try the next sibling.
          while (node.sibling === null) {
            if (node['return'] === null || isHostParent(node['return'])) {
              // If we pop out of the root or hit the parent the fiber we are the
              // last sibling.
              return null;
            }
            node = node['return'];
          }
          node.sibling['return'] = node['return'];
          node = node.sibling;
          while (node.tag !== HostComponent$9 && node.tag !== HostText$7) {
            // If it is not host node and, we might have a host node inside it.
            // Try to search down until we find one.
            if (node.effectTag & Placement$5) {
              // If we don't have a child, try the siblings instead.
              continue siblings;
            }
            // If we don't have a child, try the siblings instead.
            // We also skip portals because they are not part of this host tree.
            if (node.child === null || node.tag === HostPortal$7) {
              continue siblings;
            } else {
              node.child['return'] = node;
              node = node.child;
            }
          }
          // Check if this host node is stable or about to be placed.
          if (!(node.effectTag & Placement$5)) {
            // Found it!
            return node.stateNode;
          }
        }
      }

      function commitPlacement(finishedWork) {
        // Recursively insert all host nodes into the parent.
        var parentFiber = getHostParentFiber(finishedWork);
        var parent = void 0;
        var isContainer = void 0;
        switch (parentFiber.tag) {
          case HostComponent$9:
            parent = parentFiber.stateNode;
            isContainer = false;
            break;
          case HostRoot$9:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = true;
            break;
          case HostPortal$7:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = true;
            break;
          default:
            invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
        }
        if (parentFiber.effectTag & ContentReset$2) {
          // Reset the text content of the parent before doing any insertions
          resetTextContent(parent);
          // Clear ContentReset from the effect tag
          parentFiber.effectTag &= ~ContentReset$2;
        }

        var before = getHostSibling(finishedWork);
        // We only have the top Fiber that was inserted but we need recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while (true) {
          if (node.tag === HostComponent$9 || node.tag === HostText$7) {
            if (before) {
              if (isContainer) {
                insertInContainerBefore(parent, node.stateNode, before);
              } else {
                insertBefore(parent, node.stateNode, before);
              }
            } else {
              if (isContainer) {
                appendChildToContainer(parent, node.stateNode);
              } else {
                appendChild(parent, node.stateNode);
              }
            }
          } else if (node.tag === HostPortal$7) {
            // If the insertion itself is a portal, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) {
            return;
          }
          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === finishedWork) {
              return;
            }
            node = node['return'];
          }
          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      }

      function commitNestedUnmounts(root) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        var node = root;
        while (true) {
          commitUnmount(node);
          // Visit children because they may contain more composite or host nodes.
          // Skip portals because commitUnmount() currently visits them recursively.
          if (node.child !== null && node.tag !== HostPortal$7) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }
          if (node === root) {
            return;
          }
          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === root) {
              return;
            }
            node = node['return'];
          }
          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      }

      function unmountHostComponents(current) {
        // We only have the top Fiber that was inserted but we need recurse down its
        var node = current;

        // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false;
        var currentParent = void 0;
        var currentParentIsContainer = void 0;

        while (true) {
          if (!currentParentIsValid) {
            var parent = node['return'];
            findParent: while (true) {
              !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              switch (parent.tag) {
                case HostComponent$9:
                  currentParent = parent.stateNode;
                  currentParentIsContainer = false;
                  break findParent;
                case HostRoot$9:
                  currentParent = parent.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;
                case HostPortal$7:
                  currentParent = parent.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;
              }
              parent = parent['return'];
            }
            currentParentIsValid = true;
          }

          if (node.tag === HostComponent$9 || node.tag === HostText$7) {
            commitNestedUnmounts(node);
            // After all the children have unmounted, it is now safe to remove the
            // node from the tree.
            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, node.stateNode);
            } else {
              removeChild(currentParent, node.stateNode);
            }
            // Don't visit children because we already visited them.
          } else if (node.tag === HostPortal$7) {
            // When we go into a portal, it becomes the parent to remove from.
            // We will reassign it back when we pop the portal on the way up.
            currentParent = node.stateNode.containerInfo;
            // Visit children because portals might contain host components.
            if (node.child !== null) {
              node.child['return'] = node;
              node = node.child;
              continue;
            }
          } else {
            commitUnmount(node);
            // Visit children because we may find more host components below.
            if (node.child !== null) {
              node.child['return'] = node;
              node = node.child;
              continue;
            }
          }
          if (node === current) {
            return;
          }
          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === current) {
              return;
            }
            node = node['return'];
            if (node.tag === HostPortal$7) {
              // When we go out of the portal, we need to restore the parent.
              // Since we don't keep a stack of them, we will search for it.
              currentParentIsValid = false;
            }
          }
          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      }

      function commitDeletion(current) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(current);

        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        current['return'] = null;
        current.child = null;
        if (current.alternate) {
          current.alternate.child = null;
          current.alternate['return'] = null;
        }
      }

      // User-originating errors (lifecycles and refs) should not interrupt
      // deletion, so don't let them throw. Host-originating errors should
      // interrupt deletion, so it's okay
      function commitUnmount(current) {
        if (typeof onCommitUnmount === 'function') {
          onCommitUnmount(current);
        }

        switch (current.tag) {
          case ClassComponent$9:
            {
              safelyDetachRef(current);
              var instance = current.stateNode;
              if (typeof instance.componentWillUnmount === 'function') {
                safelyCallComponentWillUnmount(current, instance);
              }
              return;
            }
          case HostComponent$9:
            {
              safelyDetachRef(current);
              return;
            }
          case CoroutineComponent$4:
            {
              commitNestedUnmounts(current.stateNode);
              return;
            }
          case HostPortal$7:
            {
              // TODO: this is recursive.
              // We are also not using this parent because
              // the portal will get pushed immediately.
              unmountHostComponents(current);
              return;
            }
        }
      }

      function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case ClassComponent$9:
            {
              return;
            }
          case HostComponent$9:
            {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                // Commit the work prepared earlier.
                var newProps = finishedWork.memoizedProps;
                // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldProps = current !== null ? current.memoizedProps : newProps;
                var type = finishedWork.type;
                // TODO: Type the updateQueue to be specific to host components.
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                }
              }
              return;
            }
          case HostText$7:
            {
              !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.
              var oldText = current !== null ? current.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
          case HostRoot$9:
            {
              return;
            }
          case HostPortal$7:
            {
              return;
            }
          default:
            {
              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
        }
      }

      function commitLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case ClassComponent$9:
            {
              var instance = finishedWork.stateNode;
              if (finishedWork.effectTag & Update$3) {
                if (current === null) {
                  {
                    startPhaseTimer$2(finishedWork, 'componentDidMount');
                  }
                  instance.props = finishedWork.memoizedProps;
                  instance.state = finishedWork.memoizedState;
                  instance.componentDidMount();
                  {
                    stopPhaseTimer$2();
                  }
                } else {
                  var prevProps = current.memoizedProps;
                  var prevState = current.memoizedState;
                  {
                    startPhaseTimer$2(finishedWork, 'componentDidUpdate');
                  }
                  instance.props = finishedWork.memoizedProps;
                  instance.state = finishedWork.memoizedState;
                  instance.componentDidUpdate(prevProps, prevState);
                  {
                    stopPhaseTimer$2();
                  }
                }
              }
              if (finishedWork.effectTag & Callback$1 && finishedWork.updateQueue !== null) {
                commitCallbacks$1(finishedWork, finishedWork.updateQueue, instance);
              }
              return;
            }
          case HostRoot$9:
            {
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                var _instance = finishedWork.child && finishedWork.child.stateNode;
                commitCallbacks$1(finishedWork, updateQueue, _instance);
              }
              return;
            }
          case HostComponent$9:
            {
              var _instance2 = finishedWork.stateNode;

              // Renderers may schedule work to be done after host components are mounted
              // (eg DOM renderer may schedule auto-focus for inputs and form controls).
              // These effects should only be committed when components are first mounted,
              // aka when there is no current/alternate.
              if (current === null && finishedWork.effectTag & Update$3) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props, finishedWork);
              }

              return;
            }
          case HostText$7:
            {
              // We have no life-cycles associated with text.
              return;
            }
          case HostPortal$7:
            {
              // We have no life-cycles associated with portals.
              return;
            }
          default:
            {
              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
        }
      }

      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          switch (finishedWork.tag) {
            case HostComponent$9:
              ref(getPublicInstance(instance));
              break;
            default:
              ref(instance);
          }
        }
      }

      function commitDetachRef(current) {
        var currentRef = current.ref;
        if (currentRef !== null) {
          currentRef(null);
        }
      }

      return {
        commitPlacement: commitPlacement,
        commitDeletion: commitDeletion,
        commitWork: commitWork,
        commitLifeCycles: commitLifeCycles,
        commitAttachRef: commitAttachRef,
        commitDetachRef: commitDetachRef
      };
    };

    var createCursor$2 = ReactFiberStack.createCursor;
    var pop$2 = ReactFiberStack.pop;
    var push$2 = ReactFiberStack.push;

    var NO_CONTEXT = {};

    var ReactFiberHostContext = function (config) {
      var getChildHostContext = config.getChildHostContext,
          getRootHostContext = config.getRootHostContext;

      var contextStackCursor = createCursor$2(NO_CONTEXT);
      var contextFiberStackCursor = createCursor$2(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor$2(NO_CONTEXT);

      function requiredContext(c) {
        !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        return c;
      }

      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }

      function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push$2(rootInstanceStackCursor, nextRootInstance, fiber);

        var nextRootContext = getRootHostContext(nextRootInstance);

        // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push$2(contextFiberStackCursor, fiber, fiber);
        push$2(contextStackCursor, nextRootContext, fiber);
      }

      function popHostContainer(fiber) {
        pop$2(contextStackCursor, fiber);
        pop$2(contextFiberStackCursor, fiber);
        pop$2(rootInstanceStackCursor, fiber);
      }

      function getHostContext() {
        var context = requiredContext(contextStackCursor.current);
        return context;
      }

      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor.current);
        var nextContext = getChildHostContext(context, fiber.type, rootInstance);

        // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) {
          return;
        }

        // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push$2(contextFiberStackCursor, fiber, fiber);
        push$2(contextStackCursor, nextContext, fiber);
      }

      function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }

        pop$2(contextStackCursor, fiber);
        pop$2(contextFiberStackCursor, fiber);
      }

      function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT;
        rootInstanceStackCursor.current = NO_CONTEXT;
      }

      return {
        getHostContext: getHostContext,
        getRootHostContainer: getRootHostContainer,
        popHostContainer: popHostContainer,
        popHostContext: popHostContext,
        pushHostContainer: pushHostContainer,
        pushHostContext: pushHostContext,
        resetHostContainer: resetHostContainer
      };
    };

    var HostComponent$10 = ReactTypeOfWork.HostComponent;
    var HostText$8 = ReactTypeOfWork.HostText;
    var HostRoot$10 = ReactTypeOfWork.HostRoot;

    var Deletion$2 = ReactTypeOfSideEffect.Deletion;
    var Placement$6 = ReactTypeOfSideEffect.Placement;

    var createFiberFromHostInstanceForDeletion$1 = ReactFiber.createFiberFromHostInstanceForDeletion;

    var ReactFiberHydrationContext = function (config) {
      var shouldSetTextContent = config.shouldSetTextContent,
          canHydrateInstance = config.canHydrateInstance,
          canHydrateTextInstance = config.canHydrateTextInstance,
          getNextHydratableSibling = config.getNextHydratableSibling,
          getFirstHydratableChild = config.getFirstHydratableChild,
          hydrateInstance = config.hydrateInstance,
          hydrateTextInstance = config.hydrateTextInstance,
          didNotHydrateInstance = config.didNotHydrateInstance,
          didNotFindHydratableInstance = config.didNotFindHydratableInstance,
          didNotFindHydratableTextInstance = config.didNotFindHydratableTextInstance;

      // If this doesn't have hydration mode.

      if (!(canHydrateInstance && canHydrateTextInstance && getNextHydratableSibling && getFirstHydratableChild && hydrateInstance && hydrateTextInstance && didNotHydrateInstance && didNotFindHydratableInstance && didNotFindHydratableTextInstance)) {
        return {
          enterHydrationState: function () {
            return false;
          },
          resetHydrationState: function () {},
          tryToClaimNextHydratableInstance: function () {},
          prepareToHydrateHostInstance: function () {
            invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
          },
          prepareToHydrateHostTextInstance: function () {
            invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
          },
          popHydrationState: function (fiber) {
            return false;
          }
        };
      }

      // The deepest Fiber on the stack involved in a hydration context.
      // This may have been an insertion or a hydration.
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;

      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
      }

      function deleteHydratableInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot$10:
              didNotHydrateInstance(returnFiber.stateNode.containerInfo, instance);
              break;
            case HostComponent$10:
              didNotHydrateInstance(returnFiber.stateNode, instance);
              break;
          }
        }

        var childToDelete = createFiberFromHostInstanceForDeletion$1();
        childToDelete.stateNode = instance;
        childToDelete['return'] = returnFiber;
        childToDelete.effectTag = Deletion$2;

        // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
          returnFiber.lastEffect.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
      }

      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag |= Placement$6;
        {
          var parentInstance;
          switch (returnFiber.tag) {
            // TODO: Currently we don't warn for insertions into the root because
            // we always insert into the root in the non-hydrating case. We just
            // delete the existing content. Reenable this once we have a better
            // strategy for determining if we're hydrating or not.
            // case HostRoot:
            //   parentInstance = returnFiber.stateNode.containerInfo;
            //   break;
            case HostComponent$10:
              parentInstance = returnFiber.stateNode;
              break;
            default:
              return;
          }
          switch (fiber.tag) {
            case HostComponent$10:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableInstance(parentInstance, type, props);
              break;
            case HostText$8:
              var text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentInstance, text);
              break;
          }
        }
      }

      function canHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent$10:
            {
              var type = fiber.type;
              var props = fiber.pendingProps;
              return canHydrateInstance(nextInstance, type, props);
            }
          case HostText$8:
            {
              var text = fiber.pendingProps;
              return canHydrateTextInstance(nextInstance, text);
            }
          default:
            return false;
        }
      }

      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        if (!canHydrate(fiber, nextInstance)) {
          // If we can't hydrate this instance let's try the next one.
          // We use this as a heuristic. It's based on intuition and not data so it
          // might be flawed or unnecessary.
          nextInstance = getNextHydratableSibling(nextInstance);
          if (!nextInstance || !canHydrate(fiber, nextInstance)) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          // We matched the next one, we'll now assume that the first one was
          // superfluous and we'll delete it. Since we can't eagerly delete it
          // we'll have to schedule a deletion. To do that, this node needs a dummy
          // fiber associated with it.
          deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
        }
        fiber.stateNode = nextInstance;
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
      }

      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload;
        // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }

      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var shouldUpdate = hydrateTextInstance(textInstance, fiber.memoizedProps, fiber);
        return shouldUpdate;
      }

      function popToNextHostParent(fiber) {
        var parent = fiber['return'];
        while (parent !== null && parent.tag !== HostComponent$10 && parent.tag !== HostRoot$10) {
          parent = parent['return'];
        }
        hydrationParentFiber = parent;
      }

      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          // We're deeper than the current hydration context, inside an inserted
          // tree.
          return false;
        }
        if (!isHydrating) {
          // If we're not currently hydrating but we're in a hydration context, then
          // we were an insertion and now need to pop up reenter hydration of our
          // siblings.
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }

        var type = fiber.type;

        // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent$10 || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            deleteHydratableInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }

        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
      }

      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
      }

      return {
        enterHydrationState: enterHydrationState,
        resetHydrationState: resetHydrationState,
        tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
        prepareToHydrateHostInstance: prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
        popHydrationState: popHydrationState
      };
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactFiberInstrumentation
     * 
     */

    // This lets us hook into Fiber to debug what it's doing.
    // See https://github.com/facebook/react/pull/8033.
    // This is not part of the public API, not even for React DevTools.
    // You may only inject a debugTool if you work on React Fiber itself.

    var ReactFiberInstrumentation$2 = {
      debugTool: null
    };

    var ReactFiberInstrumentation_1 = ReactFiberInstrumentation$2;

    var popContextProvider$1 = ReactFiberContext.popContextProvider;

    var reset$1 = ReactFiberStack.reset;

    var getStackAddendumByWorkInProgressFiber$2 = ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber;

    var logCapturedError = ReactFiberErrorLogger.logCapturedError;

    var invokeGuardedCallback$1 = ReactErrorUtils_1.invokeGuardedCallback;
    var hasCaughtError = ReactErrorUtils_1.hasCaughtError;
    var clearCaughtError = ReactErrorUtils_1.clearCaughtError;

    var ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner;

    var createWorkInProgress$1 = ReactFiber.createWorkInProgress;
    var largerPriority$1 = ReactFiber.largerPriority;

    var onCommitRoot = ReactFiberDevToolsHook.onCommitRoot;

    var NoWork$2 = ReactPriorityLevel.NoWork;
    var SynchronousPriority$1 = ReactPriorityLevel.SynchronousPriority;
    var TaskPriority$1 = ReactPriorityLevel.TaskPriority;
    var HighPriority = ReactPriorityLevel.HighPriority;
    var LowPriority = ReactPriorityLevel.LowPriority;
    var OffscreenPriority = ReactPriorityLevel.OffscreenPriority;

    var AsyncUpdates = ReactTypeOfInternalContext.AsyncUpdates;

    var PerformedWork = ReactTypeOfSideEffect.PerformedWork;
    var Placement$1 = ReactTypeOfSideEffect.Placement;
    var Update = ReactTypeOfSideEffect.Update;
    var PlacementAndUpdate = ReactTypeOfSideEffect.PlacementAndUpdate;
    var Deletion = ReactTypeOfSideEffect.Deletion;
    var ContentReset = ReactTypeOfSideEffect.ContentReset;
    var Callback = ReactTypeOfSideEffect.Callback;
    var Err = ReactTypeOfSideEffect.Err;
    var Ref = ReactTypeOfSideEffect.Ref;

    var HostRoot$6 = ReactTypeOfWork.HostRoot;
    var HostComponent$6 = ReactTypeOfWork.HostComponent;
    var HostPortal$3 = ReactTypeOfWork.HostPortal;
    var ClassComponent$5 = ReactTypeOfWork.ClassComponent;

    var getUpdatePriority$1 = ReactFiberUpdateQueue.getUpdatePriority;

    var _require14 = ReactFiberContext;
    var resetContext$1 = _require14.resetContext;

    {
      var warning$22 = require$$0;
      var ReactFiberInstrumentation$1 = ReactFiberInstrumentation_1;
      var ReactDebugCurrentFiber$3 = ReactDebugCurrentFiber_1;

      var _require15 = ReactDebugFiberPerf_1,
          recordEffect = _require15.recordEffect,
          recordScheduleUpdate = _require15.recordScheduleUpdate,
          startWorkTimer = _require15.startWorkTimer,
          stopWorkTimer = _require15.stopWorkTimer,
          stopFailedWorkTimer = _require15.stopFailedWorkTimer,
          startWorkLoopTimer = _require15.startWorkLoopTimer,
          stopWorkLoopTimer = _require15.stopWorkLoopTimer,
          startCommitTimer = _require15.startCommitTimer,
          stopCommitTimer = _require15.stopCommitTimer,
          startCommitHostEffectsTimer = _require15.startCommitHostEffectsTimer,
          stopCommitHostEffectsTimer = _require15.stopCommitHostEffectsTimer,
          startCommitLifeCyclesTimer = _require15.startCommitLifeCyclesTimer,
          stopCommitLifeCyclesTimer = _require15.stopCommitLifeCyclesTimer;

      var warnAboutUpdateOnUnmounted = function (instance) {
        var ctor = instance.constructor;
        warning$22(false, 'Can only update a mounted or mounting component. This usually means ' + 'you called setState, replaceState, or forceUpdate on an unmounted ' + 'component. This is a no-op.\n\nPlease check the code for the ' + '%s component.', ctor && (ctor.displayName || ctor.name) || 'ReactClass');
      };

      var warnAboutInvalidUpdates = function (instance) {
        switch (ReactDebugCurrentFiber$3.phase) {
          case 'getChildContext':
            warning$22(false, 'setState(...): Cannot call setState() inside getChildContext()');
            break;
          case 'render':
            warning$22(false, 'Cannot update during an existing state transition (such as within ' + "`render` or another component's constructor). Render methods should " + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
            break;
        }
      };
    }

    var timeHeuristicForUnitOfWork = 1;

    var ReactFiberScheduler = function (config) {
      var hostContext = ReactFiberHostContext(config);
      var hydrationContext = ReactFiberHydrationContext(config);
      var popHostContainer = hostContext.popHostContainer,
          popHostContext = hostContext.popHostContext,
          resetHostContainer = hostContext.resetHostContainer;

      var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext),
          beginWork = _ReactFiberBeginWork.beginWork,
          beginFailedWork = _ReactFiberBeginWork.beginFailedWork;

      var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
          completeWork = _ReactFiberCompleteWo.completeWork;

      var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
          commitPlacement = _ReactFiberCommitWork.commitPlacement,
          commitDeletion = _ReactFiberCommitWork.commitDeletion,
          commitWork = _ReactFiberCommitWork.commitWork,
          commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
          commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
          commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

      var scheduleDeferredCallback = config.scheduleDeferredCallback,
          useSyncScheduling = config.useSyncScheduling,
          prepareForCommit = config.prepareForCommit,
          resetAfterCommit = config.resetAfterCommit;

      // The priority level to use when scheduling an update. We use NoWork to
      // represent the default priority.
      // TODO: Should we change this to an array instead of using the call stack?
      // Might be less confusing.

      var priorityContext = NoWork$2;

      // Keeps track of whether we're currently in a work loop.
      var isPerformingWork = false;

      // Keeps track of whether the current deadline has expired.
      var deadlineHasExpired = false;

      // Keeps track of whether we should should batch sync updates.
      var isBatchingUpdates = false;

      // This is needed for the weird case where the initial mount is synchronous
      // even inside batchedUpdates :(
      var isUnbatchingUpdates = false;

      // The next work in progress fiber that we're currently working on.
      var nextUnitOfWork = null;
      var nextPriorityLevel = NoWork$2;

      // The next fiber with an effect that we're currently committing.
      var nextEffect = null;

      var pendingCommit = null;

      // Linked list of roots with scheduled work on them.
      var nextScheduledRoot = null;
      var lastScheduledRoot = null;

      // Keep track of which host environment callbacks are scheduled.
      var isCallbackScheduled = false;

      // Keep track of which fibers have captured an error that need to be handled.
      // Work is removed from this collection after componentDidCatch is called.
      var capturedErrors = null;
      // Keep track of which fibers have failed during the current batch of work.
      // This is a different set than capturedErrors, because it is not reset until
      // the end of the batch. This is needed to propagate errors correctly if a
      // subtree fails more than once.
      var failedBoundaries = null;
      // Error boundaries that captured an error during the current commit.
      var commitPhaseBoundaries = null;
      var firstUncaughtError = null;
      var didFatal = false;

      var isCommitting = false;
      var isUnmounting = false;

      // Use these to prevent an infinite loop of nested updates
      var NESTED_UPDATE_LIMIT = 1000;
      var nestedUpdateCount = 0;
      var nextRenderedTree = null;

      function resetContextStack() {
        // Reset the stack
        reset$1();
        // Reset the cursors
        resetContext$1();
        resetHostContainer();
      }

      // resetNextUnitOfWork mutates the current priority context. It is reset after
      // after the workLoop exits, so never call resetNextUnitOfWork from outside
      // the work loop.
      function resetNextUnitOfWork() {
        // Clear out roots with no more work on them, or if they have uncaught errors
        while (nextScheduledRoot !== null && nextScheduledRoot.current.pendingWorkPriority === NoWork$2) {
          // Unschedule this root.
          nextScheduledRoot.isScheduled = false;
          // Read the next pointer now.
          // We need to clear it in case this root gets scheduled again later.
          var next = nextScheduledRoot.nextScheduledRoot;
          nextScheduledRoot.nextScheduledRoot = null;
          // Exit if we cleared all the roots and there's no work to do.
          if (nextScheduledRoot === lastScheduledRoot) {
            nextScheduledRoot = null;
            lastScheduledRoot = null;
            nextPriorityLevel = NoWork$2;
            return null;
          }
          // Continue with the next root.
          // If there's no work on it, it will get unscheduled too.
          nextScheduledRoot = next;
        }

        var root = nextScheduledRoot;
        var highestPriorityRoot = null;
        var highestPriorityLevel = NoWork$2;
        while (root !== null) {
          if (root.current.pendingWorkPriority !== NoWork$2 && (highestPriorityLevel === NoWork$2 || highestPriorityLevel > root.current.pendingWorkPriority)) {
            highestPriorityLevel = root.current.pendingWorkPriority;
            highestPriorityRoot = root;
          }
          // We didn't find anything to do in this root, so let's try the next one.
          root = root.nextScheduledRoot;
        }
        if (highestPriorityRoot !== null) {
          nextPriorityLevel = highestPriorityLevel;
          // Before we start any new work, let's make sure that we have a fresh
          // stack to work from.
          // TODO: This call is buried a bit too deep. It would be nice to have
          // a single point which happens right before any new work and
          // unfortunately this is it.
          resetContextStack();

          nextUnitOfWork = createWorkInProgress$1(highestPriorityRoot.current, highestPriorityLevel);
          if (highestPriorityRoot !== nextRenderedTree) {
            // We've switched trees. Reset the nested update counter.
            nestedUpdateCount = 0;
            nextRenderedTree = highestPriorityRoot;
          }
          return;
        }

        nextPriorityLevel = NoWork$2;
        nextUnitOfWork = null;
        nextRenderedTree = null;
        return;
      }

      function commitAllHostEffects() {
        while (nextEffect !== null) {
          {
            ReactDebugCurrentFiber$3.setCurrentFiber(nextEffect, null);
            recordEffect();
          }

          var effectTag = nextEffect.effectTag;
          if (effectTag & ContentReset) {
            config.resetTextContent(nextEffect.stateNode);
          }

          if (effectTag & Ref) {
            var current = nextEffect.alternate;
            if (current !== null) {
              commitDetachRef(current);
            }
          }

          // The following switch statement is only concerned about placement,
          // updates, and deletions. To avoid needing to add a case for every
          // possible bitmap value, we remove the secondary effects from the
          // effect tag and switch on that value.
          var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);
          switch (primaryEffectTag) {
            case Placement$1:
              {
                commitPlacement(nextEffect);
                // Clear the "placement" from effect tag so that we know that this is inserted, before
                // any life-cycles like componentDidMount gets called.
                // TODO: findDOMNode doesn't rely on this any more but isMounted
                // does and isMounted is deprecated anyway so we should be able
                // to kill this.
                nextEffect.effectTag &= ~Placement$1;
                break;
              }
            case PlacementAndUpdate:
              {
                // Placement
                commitPlacement(nextEffect);
                // Clear the "placement" from effect tag so that we know that this is inserted, before
                // any life-cycles like componentDidMount gets called.
                nextEffect.effectTag &= ~Placement$1;

                // Update
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
            case Update:
              {
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
            case Deletion:
              {
                isUnmounting = true;
                commitDeletion(nextEffect);
                isUnmounting = false;
                break;
              }
          }
          nextEffect = nextEffect.nextEffect;
        }

        {
          ReactDebugCurrentFiber$3.resetCurrentFiber();
        }
      }

      function commitAllLifeCycles() {
        while (nextEffect !== null) {
          var effectTag = nextEffect.effectTag;

          // Use Task priority for lifecycle updates
          if (effectTag & (Update | Callback)) {
            {
              recordEffect();
            }
            var current = nextEffect.alternate;
            commitLifeCycles(current, nextEffect);
          }

          if (effectTag & Ref) {
            {
              recordEffect();
            }
            commitAttachRef(nextEffect);
          }

          if (effectTag & Err) {
            {
              recordEffect();
            }
            commitErrorHandling(nextEffect);
          }

          var next = nextEffect.nextEffect;
          // Ensure that we clean these up so that we don't accidentally keep them.
          // I'm not actually sure this matters because we can't reset firstEffect
          // and lastEffect since they're on every node, not just the effectful
          // ones. So we have to clean everything as we reuse nodes anyway.
          nextEffect.nextEffect = null;
          // Ensure that we reset the effectTag here so that we can rely on effect
          // tags to reason about the current life-cycle.
          nextEffect = next;
        }
      }

      function commitAllWork(finishedWork) {
        // We keep track of this so that captureError can collect any boundaries
        // that capture an error during the commit phase. The reason these aren't
        // local to this function is because errors that occur during cWU are
        // captured elsewhere, to prevent the unmount from being interrupted.
        isCommitting = true;
        {
          startCommitTimer();
        }

        pendingCommit = null;
        var root = finishedWork.stateNode;
        !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;

        if (nextPriorityLevel === SynchronousPriority$1 || nextPriorityLevel === TaskPriority$1) {
          // Keep track of the number of iterations to prevent an infinite
          // update loop.
          nestedUpdateCount++;
        }

        // Reset this to null before calling lifecycles
        ReactCurrentOwner$1.current = null;

        var firstEffect = void 0;
        if (finishedWork.effectTag > PerformedWork) {
          // A fiber's effect list consists only of its children, not itself. So if
          // the root has an effect, we need to add it to the end of the list. The
          // resulting list is the set that would belong to the root's parent, if
          // it had one; that is, all the effects in the tree including the root.
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          // There is no effect on the root.
          firstEffect = finishedWork.firstEffect;
        }

        prepareForCommit();

        // Commit all the side-effects within a tree. We'll do this in two passes.
        // The first pass performs all the host insertions, updates, deletions and
        // ref unmounts.
        nextEffect = firstEffect;
        {
          startCommitHostEffectsTimer();
        }
        while (nextEffect !== null) {
          var didError = false;
          var _error = void 0;
          {
            invokeGuardedCallback$1(null, commitAllHostEffects, null);
            if (hasCaughtError()) {
              didError = true;
              _error = clearCaughtError();
            }
          }
          if (didError) {
            !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            captureError(nextEffect, _error);
            // Clean-up
            if (nextEffect !== null) {
              nextEffect = nextEffect.nextEffect;
            }
          }
        }
        {
          stopCommitHostEffectsTimer();
        }

        resetAfterCommit();

        // The work-in-progress tree is now the current tree. This must come after
        // the first pass of the commit phase, so that the previous tree is still
        // current during componentWillUnmount, but before the second pass, so that
        // the finished work is current during componentDidMount/Update.
        root.current = finishedWork;

        // In the second pass we'll perform all life-cycles and ref callbacks.
        // Life-cycles happen as a separate pass so that all placements, updates,
        // and deletions in the entire tree have already been invoked.
        // This pass also triggers any renderer-specific initial effects.
        nextEffect = firstEffect;
        {
          startCommitLifeCyclesTimer();
        }
        while (nextEffect !== null) {
          var _didError = false;
          var _error2 = void 0;
          {
            invokeGuardedCallback$1(null, commitAllLifeCycles, null);
            if (hasCaughtError()) {
              _didError = true;
              _error2 = clearCaughtError();
            }
          }
          if (_didError) {
            !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            captureError(nextEffect, _error2);
            if (nextEffect !== null) {
              nextEffect = nextEffect.nextEffect;
            }
          }
        }

        isCommitting = false;
        {
          stopCommitLifeCyclesTimer();
          stopCommitTimer();
        }
        if (typeof onCommitRoot === 'function') {
          onCommitRoot(finishedWork.stateNode);
        }
        if (true && ReactFiberInstrumentation$1.debugTool) {
          ReactFiberInstrumentation$1.debugTool.onCommitWork(finishedWork);
        }

        // If we caught any errors during this commit, schedule their boundaries
        // to update.
        if (commitPhaseBoundaries) {
          commitPhaseBoundaries.forEach(scheduleErrorRecovery);
          commitPhaseBoundaries = null;
        }

        // This tree is done. Reset the unit of work pointer to the next highest
        // priority root. If there's no more work left, the pointer is set to null.
        resetNextUnitOfWork();
      }

      function resetWorkPriority(workInProgress, renderPriority) {
        if (workInProgress.pendingWorkPriority !== NoWork$2 && workInProgress.pendingWorkPriority > renderPriority) {
          // This was a down-prioritization. Don't bubble priority from children.
          return;
        }

        // Check for pending update priority.
        var newPriority = getUpdatePriority$1(workInProgress);

        // TODO: Coroutines need to visit stateNode

        var child = workInProgress.child;
        while (child !== null) {
          // Ensure that remaining work priority bubbles up.
          newPriority = largerPriority$1(newPriority, child.pendingWorkPriority);
          child = child.sibling;
        }
        workInProgress.pendingWorkPriority = newPriority;
      }

      function completeUnitOfWork(workInProgress) {
        while (true) {
          // The current, flushed, state of this fiber is the alternate.
          // Ideally nothing should rely on this, but relying on it here
          // means that we don't need an additional field on the work in
          // progress.
          var current = workInProgress.alternate;
          var next = completeWork(current, workInProgress, nextPriorityLevel);

          var returnFiber = workInProgress['return'];
          var siblingFiber = workInProgress.sibling;

          resetWorkPriority(workInProgress, nextPriorityLevel);

          if (next !== null) {
            {
              stopWorkTimer(workInProgress);
            }
            if (true && ReactFiberInstrumentation$1.debugTool) {
              ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress);
            }
            // If completing this work spawned new work, do that next. We'll come
            // back here again.
            return next;
          }

          if (returnFiber !== null) {
            // Append all the effects of the subtree and this fiber onto the effect
            // list of the parent. The completion order of the children affects the
            // side-effect order.
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = workInProgress.firstEffect;
            }
            if (workInProgress.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
              }
              returnFiber.lastEffect = workInProgress.lastEffect;
            }

            // If this fiber had side-effects, we append it AFTER the children's
            // side-effects. We can perform certain side-effects earlier if
            // needed, by doing multiple passes over the effect list. We don't want
            // to schedule our own side-effect on our own list because if end up
            // reusing children we'll schedule this effect onto itself since we're
            // at the end.
            var effectTag = workInProgress.effectTag;
            // Skip both NoWork and PerformedWork tags when creating the effect list.
            // PerformedWork effect is read by React DevTools but shouldn't be committed.
            if (effectTag > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress;
              } else {
                returnFiber.firstEffect = workInProgress;
              }
              returnFiber.lastEffect = workInProgress;
            }
          }

          {
            stopWorkTimer(workInProgress);
          }
          if (true && ReactFiberInstrumentation$1.debugTool) {
            ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            // We've reached the root. Mark the root as pending commit. Depending
            // on how much time we have left, we'll either commit it now or in
            // the next frame.
            pendingCommit = workInProgress;
            return null;
          }
        }

        // Without this explicit null return Flow complains of invalid return type
        // TODO Remove the above while(true) loop
        // eslint-disable-next-line no-unreachable
        return null;
      }

      function performUnitOfWork(workInProgress) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current = workInProgress.alternate;

        // See if beginning this work spawns more work.
        {
          startWorkTimer(workInProgress);
        }
        var next = beginWork(current, workInProgress, nextPriorityLevel);
        if (true && ReactFiberInstrumentation$1.debugTool) {
          ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress);
        }

        if (next === null) {
          // If this doesn't spawn new work, complete the current work.
          next = completeUnitOfWork(workInProgress);
        }

        ReactCurrentOwner$1.current = null;
        {
          ReactDebugCurrentFiber$3.resetCurrentFiber();
        }

        return next;
      }

      function performFailedUnitOfWork(workInProgress) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current = workInProgress.alternate;

        // See if beginning this work spawns more work.
        {
          startWorkTimer(workInProgress);
        }
        var next = beginFailedWork(current, workInProgress, nextPriorityLevel);
        if (true && ReactFiberInstrumentation$1.debugTool) {
          ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress);
        }

        if (next === null) {
          // If this doesn't spawn new work, complete the current work.
          next = completeUnitOfWork(workInProgress);
        }

        ReactCurrentOwner$1.current = null;
        {
          ReactDebugCurrentFiber$3.resetCurrentFiber();
        }

        return next;
      }

      function performDeferredWork(deadline) {
        performWork(OffscreenPriority, deadline);
      }

      function handleCommitPhaseErrors() {
        // This is a special work loop for handling commit phase errors. It's
        // similar to the syncrhonous work loop, but does an additional check on
        // each fiber to see if it's an error boundary with an unhandled error. If
        // so, it uses a forked version of performUnitOfWork that unmounts the
        // failed subtree.
        //
        // The loop stops once the children have unmounted and error lifecycles are
        // called. Then we return to the regular flow.

        if (capturedErrors !== null && capturedErrors.size > 0 && nextPriorityLevel === TaskPriority$1) {
          while (nextUnitOfWork !== null) {
            if (hasCapturedError(nextUnitOfWork)) {
              // Use a forked version of performUnitOfWork
              nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
            } else {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
            if (nextUnitOfWork === null) {
              !(pendingCommit !== null) ? invariant(false, 'Should have a pending commit. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              // We just completed a root. Commit it now.
              priorityContext = TaskPriority$1;
              commitAllWork(pendingCommit);
              priorityContext = nextPriorityLevel;

              if (capturedErrors === null || capturedErrors.size === 0 || nextPriorityLevel !== TaskPriority$1) {
                // There are no more unhandled errors. We can exit this special
                // work loop. If there's still additional work, we'll perform it
                // using one of the normal work loops.
                break;
              }
              // The commit phase produced additional errors. Continue working.
            }
          }
        }
      }

      function workLoop(minPriorityLevel, deadline) {
        if (pendingCommit !== null) {
          priorityContext = TaskPriority$1;
          commitAllWork(pendingCommit);
          handleCommitPhaseErrors();
        } else if (nextUnitOfWork === null) {
          resetNextUnitOfWork();
        }

        if (nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel) {
          return;
        }

        // During the render phase, updates should have the same priority at which
        // we're rendering.
        priorityContext = nextPriorityLevel;

        loop: do {
          if (nextPriorityLevel <= TaskPriority$1) {
            // Flush all synchronous and task work.
            while (nextUnitOfWork !== null) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
              if (nextUnitOfWork === null) {
                !(pendingCommit !== null) ? invariant(false, 'Should have a pending commit. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                // We just completed a root. Commit it now.
                priorityContext = TaskPriority$1;
                commitAllWork(pendingCommit);
                priorityContext = nextPriorityLevel;
                // Clear any errors that were scheduled during the commit phase.
                handleCommitPhaseErrors();
                // The priority level may have changed. Check again.
                if (nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel > TaskPriority$1) {
                  // The priority level does not match.
                  break;
                }
              }
            }
          } else if (deadline !== null) {
            // Flush asynchronous work until the deadline expires.
            while (nextUnitOfWork !== null && !deadlineHasExpired) {
              if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                // In a deferred work batch, iff nextUnitOfWork returns null, we just
                // completed a root and a pendingCommit exists. Logically, we could
                // omit either of the checks in the following condition, but we need
                // both to satisfy Flow.
                if (nextUnitOfWork === null) {
                  !(pendingCommit !== null) ? invariant(false, 'Should have a pending commit. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                  // We just completed a root. If we have time, commit it now.
                  // Otherwise, we'll commit it in the next frame.
                  if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                    priorityContext = TaskPriority$1;
                    commitAllWork(pendingCommit);
                    priorityContext = nextPriorityLevel;
                    // Clear any errors that were scheduled during the commit phase.
                    handleCommitPhaseErrors();
                    // The priority level may have changed. Check again.
                    if (nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel < HighPriority) {
                      // The priority level does not match.
                      break;
                    }
                  } else {
                    deadlineHasExpired = true;
                  }
                }
              } else {
                deadlineHasExpired = true;
              }
            }
          }

          // There might be work left. Depending on the priority, we should
          // either perform it now or schedule a callback to perform it later.
          switch (nextPriorityLevel) {
            case SynchronousPriority$1:
            case TaskPriority$1:
              // We have remaining synchronous or task work. Keep performing it,
              // regardless of whether we're inside a callback.
              if (nextPriorityLevel <= minPriorityLevel) {
                continue loop;
              }
              break loop;
            case HighPriority:
            case LowPriority:
            case OffscreenPriority:
              // We have remaining async work.
              if (deadline === null) {
                // We're not inside a callback. Exit and perform the work during
                // the next callback.
                break loop;
              }
              // We are inside a callback.
              if (!deadlineHasExpired && nextPriorityLevel <= minPriorityLevel) {
                // We still have time. Keep working.
                continue loop;
              }
              // We've run out of time. Exit.
              break loop;
            case NoWork$2:
              // No work left. We can exit.
              break loop;
            default:
              invariant(false, 'Switch statement should be exhuastive. This error is likely caused by a bug in React. Please file an issue.');
          }
        } while (true);
      }

      function performWorkCatchBlock(failedWork, boundary, minPriorityLevel, deadline) {
        // We're going to restart the error boundary that captured the error.
        // Conceptually, we're unwinding the stack. We need to unwind the
        // context stack, too.
        unwindContexts(failedWork, boundary);

        // Restart the error boundary using a forked version of
        // performUnitOfWork that deletes the boundary's children. The entire
        // failed subree will be unmounted. During the commit phase, a special
        // lifecycle method is called on the error boundary, which triggers
        // a re-render.
        nextUnitOfWork = performFailedUnitOfWork(boundary);

        // Continue working.
        workLoop(minPriorityLevel, deadline);
      }

      function performWork(minPriorityLevel, deadline) {
        {
          startWorkLoopTimer();
        }

        !!isPerformingWork ? invariant(false, 'performWork was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        isPerformingWork = true;

        // The priority context changes during the render phase. We'll need to
        // reset it at the end.
        var previousPriorityContext = priorityContext;

        var didError = false;
        var error = null;
        {
          invokeGuardedCallback$1(null, workLoop, null, minPriorityLevel, deadline);
          if (hasCaughtError()) {
            didError = true;
            error = clearCaughtError();
          }
        }

        // An error was thrown during the render phase.
        while (didError) {
          if (didFatal) {
            // This was a fatal error. Don't attempt to recover from it.
            firstUncaughtError = error;
            break;
          }

          var failedWork = nextUnitOfWork;
          if (failedWork === null) {
            // An error was thrown but there's no current unit of work. This can
            // happen during the commit phase if there's a bug in the renderer.
            didFatal = true;
            continue;
          }

          // "Capture" the error by finding the nearest boundary. If there is no
          // error boundary, we use the root.
          var boundary = captureError(failedWork, error);
          !(boundary !== null) ? invariant(false, 'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.') : void 0;

          if (didFatal) {
            // The error we just captured was a fatal error. This happens
            // when the error propagates to the root more than once.
            continue;
          }

          didError = false;
          error = null;
          {
            invokeGuardedCallback$1(null, performWorkCatchBlock, null, failedWork, boundary, minPriorityLevel, deadline);
            if (hasCaughtError()) {
              didError = true;
              error = clearCaughtError();
              continue;
            }
          }
          // We're finished working. Exit the error loop.
          break;
        }

        // Reset the priority context to its previous value.
        priorityContext = previousPriorityContext;

        // If we're inside a callback, set this to false, since we just flushed it.
        if (deadline !== null) {
          isCallbackScheduled = false;
        }
        // If there's remaining async work, make sure we schedule another callback.
        if (nextPriorityLevel > TaskPriority$1 && !isCallbackScheduled) {
          scheduleDeferredCallback(performDeferredWork);
          isCallbackScheduled = true;
        }

        var errorToThrow = firstUncaughtError;

        // We're done performing work. Time to clean up.
        isPerformingWork = false;
        deadlineHasExpired = false;
        didFatal = false;
        firstUncaughtError = null;
        capturedErrors = null;
        failedBoundaries = null;
        nextRenderedTree = null;
        nestedUpdateCount = 0;

        {
          stopWorkLoopTimer();
        }

        // It's safe to throw any unhandled errors.
        if (errorToThrow !== null) {
          throw errorToThrow;
        }
      }

      // Returns the boundary that captured the error, or null if the error is ignored
      function captureError(failedWork, error) {
        // It is no longer valid because we exited the user code.
        ReactCurrentOwner$1.current = null;
        {
          ReactDebugCurrentFiber$3.resetCurrentFiber();
        }

        // Search for the nearest error boundary.
        var boundary = null;

        // Passed to logCapturedError()
        var errorBoundaryFound = false;
        var willRetry = false;
        var errorBoundaryName = null;

        // Host containers are a special case. If the failed work itself is a host
        // container, then it acts as its own boundary. In all other cases, we
        // ignore the work itself and only search through the parents.
        if (failedWork.tag === HostRoot$6) {
          boundary = failedWork;

          if (isFailedBoundary(failedWork)) {
            // If this root already failed, there must have been an error when
            // attempting to unmount it. This is a worst-case scenario and
            // should only be possible if there's a bug in the renderer.
            didFatal = true;
          }
        } else {
          var node = failedWork['return'];
          while (node !== null && boundary === null) {
            if (node.tag === ClassComponent$5) {
              var instance = node.stateNode;
              if (typeof instance.componentDidCatch === 'function') {
                errorBoundaryFound = true;
                errorBoundaryName = getComponentName_1(node);

                // Found an error boundary!
                boundary = node;
                willRetry = true;
              }
            } else if (node.tag === HostRoot$6) {
              // Treat the root like a no-op error boundary
              boundary = node;
            }

            if (isFailedBoundary(node)) {
              // This boundary is already in a failed state.

              // If we're currently unmounting, that means this error was
              // thrown while unmounting a failed subtree. We should ignore
              // the error.
              if (isUnmounting) {
                return null;
              }

              // If we're in the commit phase, we should check to see if
              // this boundary already captured an error during this commit.
              // This case exists because multiple errors can be thrown during
              // a single commit without interruption.
              if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
                // If so, we should ignore this error.
                return null;
              }

              // The error should propagate to the next boundary -— we keep looking.
              boundary = null;
              willRetry = false;
            }

            node = node['return'];
          }
        }

        if (boundary !== null) {
          // Add to the collection of failed boundaries. This lets us know that
          // subsequent errors in this subtree should propagate to the next boundary.
          if (failedBoundaries === null) {
            failedBoundaries = new Set();
          }
          failedBoundaries.add(boundary);

          // This method is unsafe outside of the begin and complete phases.
          // We might be in the commit phase when an error is captured.
          // The risk is that the return path from this Fiber may not be accurate.
          // That risk is acceptable given the benefit of providing users more context.
          var _componentStack = getStackAddendumByWorkInProgressFiber$2(failedWork);
          var _componentName = getComponentName_1(failedWork);

          // Add to the collection of captured errors. This is stored as a global
          // map of errors and their component stack location keyed by the boundaries
          // that capture them. We mostly use this Map as a Set; it's a Map only to
          // avoid adding a field to Fiber to store the error.
          if (capturedErrors === null) {
            capturedErrors = new Map();
          }

          var capturedError = {
            componentName: _componentName,
            componentStack: _componentStack,
            error: error,
            errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
            errorBoundaryFound: errorBoundaryFound,
            errorBoundaryName: errorBoundaryName,
            willRetry: willRetry
          };

          capturedErrors.set(boundary, capturedError);

          try {
            logCapturedError(capturedError);
          } catch (e) {
            // Prevent cycle if logCapturedError() throws.
            // A cycle may still occur if logCapturedError renders a component that throws.
            console.error(e);
          }

          // If we're in the commit phase, defer scheduling an update on the
          // boundary until after the commit is complete
          if (isCommitting) {
            if (commitPhaseBoundaries === null) {
              commitPhaseBoundaries = new Set();
            }
            commitPhaseBoundaries.add(boundary);
          } else {
            // Otherwise, schedule an update now.
            // TODO: Is this actually necessary during the render phase? Is it
            // possible to unwind and continue rendering at the same priority,
            // without corrupting internal state?
            scheduleErrorRecovery(boundary);
          }
          return boundary;
        } else if (firstUncaughtError === null) {
          // If no boundary is found, we'll need to throw the error
          firstUncaughtError = error;
        }
        return null;
      }

      function hasCapturedError(fiber) {
        // TODO: capturedErrors should store the boundary instance, to avoid needing
        // to check the alternate.
        return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
      }

      function isFailedBoundary(fiber) {
        // TODO: failedBoundaries should store the boundary instance, to avoid
        // needing to check the alternate.
        return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
      }

      function commitErrorHandling(effectfulFiber) {
        var capturedError = void 0;
        if (capturedErrors !== null) {
          capturedError = capturedErrors.get(effectfulFiber);
          capturedErrors['delete'](effectfulFiber);
          if (capturedError == null) {
            if (effectfulFiber.alternate !== null) {
              effectfulFiber = effectfulFiber.alternate;
              capturedError = capturedErrors.get(effectfulFiber);
              capturedErrors['delete'](effectfulFiber);
            }
          }
        }

        !(capturedError != null) ? invariant(false, 'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.') : void 0;

        switch (effectfulFiber.tag) {
          case ClassComponent$5:
            var instance = effectfulFiber.stateNode;

            var info = {
              componentStack: capturedError.componentStack
            };

            // Allow the boundary to handle the error, usually by scheduling
            // an update to itself
            instance.componentDidCatch(capturedError.error, info);
            return;
          case HostRoot$6:
            if (firstUncaughtError === null) {
              // If this is the host container, we treat it as a no-op error
              // boundary. We'll throw the first uncaught error once it's safe to
              // do so, at the end of the batch.
              firstUncaughtError = capturedError.error;
            }
            return;
          default:
            invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
        }
      }

      function unwindContexts(from, to) {
        var node = from;
        while (node !== null) {
          switch (node.tag) {
            case ClassComponent$5:
              popContextProvider$1(node);
              break;
            case HostComponent$6:
              popHostContext(node);
              break;
            case HostRoot$6:
              popHostContainer(node);
              break;
            case HostPortal$3:
              popHostContainer(node);
              break;
          }
          if (node === to || node.alternate === to) {
            {
              stopFailedWorkTimer(node);
            }
            break;
          } else {
            stopWorkTimer(node);
          }
          node = node['return'];
        }
      }

      function scheduleRoot(root, priorityLevel) {
        if (priorityLevel === NoWork$2) {
          return;
        }

        if (!root.isScheduled) {
          root.isScheduled = true;
          if (lastScheduledRoot) {
            // Schedule ourselves to the end.
            lastScheduledRoot.nextScheduledRoot = root;
            lastScheduledRoot = root;
          } else {
            // We're the only work scheduled.
            nextScheduledRoot = root;
            lastScheduledRoot = root;
          }
        }
      }

      function scheduleUpdate(fiber, priorityLevel) {
        return scheduleUpdateImpl(fiber, priorityLevel, false);
      }

      function scheduleUpdateImpl(fiber, priorityLevel, isErrorRecovery) {
        {
          recordScheduleUpdate();
        }

        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          didFatal = true;
          invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
        }

        if (!isPerformingWork && priorityLevel <= nextPriorityLevel) {
          // We must reset the current unit of work pointer so that we restart the
          // search from the root during the next tick, in case there is now higher
          // priority work somewhere earlier than before.
          nextUnitOfWork = null;
        }

        {
          if (!isErrorRecovery && fiber.tag === ClassComponent$5) {
            var instance = fiber.stateNode;
            warnAboutInvalidUpdates(instance);
          }
        }

        var node = fiber;
        var shouldContinue = true;
        while (node !== null && shouldContinue) {
          // Walk the parent path to the root and update each node's priority. Once
          // we reach a node whose priority matches (and whose alternate's priority
          // matches) we can exit safely knowing that the rest of the path is correct.
          shouldContinue = false;
          if (node.pendingWorkPriority === NoWork$2 || node.pendingWorkPriority > priorityLevel) {
            // Priority did not match. Update and keep going.
            shouldContinue = true;
            node.pendingWorkPriority = priorityLevel;
          }
          if (node.alternate !== null) {
            if (node.alternate.pendingWorkPriority === NoWork$2 || node.alternate.pendingWorkPriority > priorityLevel) {
              // Priority did not match. Update and keep going.
              shouldContinue = true;
              node.alternate.pendingWorkPriority = priorityLevel;
            }
          }
          if (node['return'] === null) {
            if (node.tag === HostRoot$6) {
              var root = node.stateNode;
              scheduleRoot(root, priorityLevel);
              if (!isPerformingWork) {
                switch (priorityLevel) {
                  case SynchronousPriority$1:
                    // Perform this update now.
                    if (isUnbatchingUpdates) {
                      // We're inside unbatchedUpdates, which is inside either
                      // batchedUpdates or a lifecycle. We should only flush
                      // synchronous work, not task work.
                      performWork(SynchronousPriority$1, null);
                    } else {
                      // Flush both synchronous and task work.
                      performWork(TaskPriority$1, null);
                    }
                    break;
                  case TaskPriority$1:
                    !isBatchingUpdates ? invariant(false, 'Task updates can only be scheduled as a nested update or inside batchedUpdates.') : void 0;
                    break;
                  default:
                    // Schedule a callback to perform the work later.
                    if (!isCallbackScheduled) {
                      scheduleDeferredCallback(performDeferredWork);
                      isCallbackScheduled = true;
                    }
                }
              }
            } else {
              {
                if (!isErrorRecovery && fiber.tag === ClassComponent$5) {
                  warnAboutUpdateOnUnmounted(fiber.stateNode);
                }
              }
              return;
            }
          }
          node = node['return'];
        }
      }

      function getPriorityContext(fiber, forceAsync) {
        var priorityLevel = priorityContext;
        if (priorityLevel === NoWork$2) {
          if (!useSyncScheduling || fiber.internalContextTag & AsyncUpdates || forceAsync) {
            priorityLevel = LowPriority;
          } else {
            priorityLevel = SynchronousPriority$1;
          }
        }

        // If we're in a batch, or if we're already performing work, downgrade sync
        // priority to task priority
        if (priorityLevel === SynchronousPriority$1 && (isPerformingWork || isBatchingUpdates)) {
          return TaskPriority$1;
        }
        return priorityLevel;
      }

      function scheduleErrorRecovery(fiber) {
        scheduleUpdateImpl(fiber, TaskPriority$1, true);
      }

      function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;
        try {
          return fn(a);
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates;
          // If we're not already inside a batch, we need to flush any task work
          // that was created by the user-provided function.
          if (!isPerformingWork && !isBatchingUpdates) {
            performWork(TaskPriority$1, null);
          }
        }
      }

      function unbatchedUpdates(fn) {
        var previousIsUnbatchingUpdates = isUnbatchingUpdates;
        var previousIsBatchingUpdates = isBatchingUpdates;
        // This is only true if we're nested inside batchedUpdates.
        isUnbatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = false;
        try {
          return fn();
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates;
          isUnbatchingUpdates = previousIsUnbatchingUpdates;
        }
      }

      function flushSync(batch) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        var previousPriorityContext = priorityContext;
        isBatchingUpdates = true;
        priorityContext = SynchronousPriority$1;
        try {
          return batch();
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates;
          priorityContext = previousPriorityContext;

          !!isPerformingWork ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
          performWork(TaskPriority$1, null);
        }
      }

      function deferredUpdates(fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = LowPriority;
        try {
          return fn();
        } finally {
          priorityContext = previousPriorityContext;
        }
      }

      return {
        scheduleUpdate: scheduleUpdate,
        getPriorityContext: getPriorityContext,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        flushSync: flushSync,
        deferredUpdates: deferredUpdates
      };
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule getContextForSubtree
     * 
     */

    var getContextFiber = function (arg) {
      invariant(false, 'Missing injection for fiber getContextForSubtree');
    };

    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyObject;
      }

      var instance = ReactInstanceMap_1.get(parentComponent);
      if (typeof instance.tag === 'number') {
        return getContextFiber(instance);
      } else {
        return instance._processChildContext(instance._context);
      }
    }

    getContextForSubtree._injectFiber = function (fn) {
      getContextFiber = fn;
    };

    var getContextForSubtree_1 = getContextForSubtree;

    var addTopLevelUpdate = ReactFiberUpdateQueue.addTopLevelUpdate;

    var findCurrentUnmaskedContext = ReactFiberContext.findCurrentUnmaskedContext;
    var isContextProvider = ReactFiberContext.isContextProvider;
    var processChildContext = ReactFiberContext.processChildContext;

    var createFiberRoot = ReactFiberRoot.createFiberRoot;

    var HostComponent$3 = ReactTypeOfWork.HostComponent;

    {
      var warning$18 = require$$0;
      var ReactFiberInstrumentation = ReactFiberInstrumentation_1;
      var ReactDebugCurrentFiber$1 = ReactDebugCurrentFiber_1;
      var getComponentName$4 = getComponentName_1;
    }

    var findCurrentHostFiber$1 = ReactFiberTreeReflection.findCurrentHostFiber;
    var findCurrentHostFiberWithNoPortals$1 = ReactFiberTreeReflection.findCurrentHostFiberWithNoPortals;

    getContextForSubtree_1._injectFiber(function (fiber) {
      var parentContext = findCurrentUnmaskedContext(fiber);
      return isContextProvider(fiber) ? processChildContext(fiber, parentContext, false) : parentContext;
    });

    var ReactFiberReconciler = function (config) {
      var getPublicInstance = config.getPublicInstance;

      var _ReactFiberScheduler = ReactFiberScheduler(config),
          scheduleUpdate = _ReactFiberScheduler.scheduleUpdate,
          getPriorityContext = _ReactFiberScheduler.getPriorityContext,
          batchedUpdates = _ReactFiberScheduler.batchedUpdates,
          unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
          flushSync = _ReactFiberScheduler.flushSync,
          deferredUpdates = _ReactFiberScheduler.deferredUpdates;

      function scheduleTopLevelUpdate(current, element, callback) {
        {
          if (ReactDebugCurrentFiber$1.phase === 'render' && ReactDebugCurrentFiber$1.current !== null) {
            warning$18(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName$4(ReactDebugCurrentFiber$1.current) || 'Unknown');
          }
        }

        // Check if the top-level element is an async wrapper component. If so, treat
        // updates to the root as async. This is a bit weird but lets us avoid a separate
        // `renderAsync` API.
        var forceAsync = ReactFeatureFlags_1.enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true;
        var priorityLevel = getPriorityContext(current, forceAsync);
        var nextState = { element: element };
        callback = callback === undefined ? null : callback;
        {
          warning$18(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
        }
        addTopLevelUpdate(current, nextState, callback, priorityLevel);
        scheduleUpdate(current, priorityLevel);
      }

      return {
        createContainer: function (containerInfo) {
          return createFiberRoot(containerInfo);
        },
        updateContainer: function (element, container, parentComponent, callback) {
          // TODO: If this is a nested container, this won't be the root.
          var current = container.current;

          {
            if (ReactFiberInstrumentation.debugTool) {
              if (current.alternate === null) {
                ReactFiberInstrumentation.debugTool.onMountContainer(container);
              } else if (element === null) {
                ReactFiberInstrumentation.debugTool.onUnmountContainer(container);
              } else {
                ReactFiberInstrumentation.debugTool.onUpdateContainer(container);
              }
            }
          }

          var context = getContextForSubtree_1(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }

          scheduleTopLevelUpdate(current, element, callback);
        },

        batchedUpdates: batchedUpdates,

        unbatchedUpdates: unbatchedUpdates,

        deferredUpdates: deferredUpdates,

        flushSync: flushSync,

        getPublicRootInstance: function (container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent$3:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        },
        findHostInstance: function (fiber) {
          var hostFiber = findCurrentHostFiber$1(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        },
        findHostInstanceWithNoPortals: function (fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals$1(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
      };
    };

    var TEXT_NODE$3 = HTMLNodeType_1.TEXT_NODE;

    /**
     * Given any node return the first leaf node without children.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {DOMElement|DOMTextNode}
     */

    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }
      return node;
    }

    /**
     * Get the next sibling within a container. This will walk up the
     * DOM if a node's siblings have been exhausted.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {?DOMElement|DOMTextNode}
     */
    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }
        node = node.parentNode;
      }
    }

    /**
     * Get object describing the nodes which contain characters at offset.
     *
     * @param {DOMElement|DOMTextNode} root
     * @param {number} offset
     * @return {?object}
     */
    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;

      while (node) {
        if (node.nodeType === TEXT_NODE$3) {
          nodeEnd = nodeStart + node.textContent.length;

          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }

          nodeStart = nodeEnd;
        }

        node = getLeafNode(getSiblingNode(node));
      }
    }

    var getNodeForCharacterOffset_1 = getNodeForCharacterOffset;

    var contentKey = null;

    /**
     * Gets the key used to access text content on a DOM node.
     *
     * @return {?string} Key used to access text content.
     * @internal
     */
    function getTextContentAccessor() {
      if (!contentKey && ExecutionEnvironment.canUseDOM) {
        // Prefer textContent to innerText because many browsers support both but
        // SVG <text> elements don't support innerText even when <div> does.
        contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
      }
      return contentKey;
    }

    var getTextContentAccessor_1 = getTextContentAccessor;

    /**
     * While `isCollapsed` is available on the Selection object and `collapsed`
     * is available on the Range object, IE11 sometimes gets them wrong.
     * If the anchor/focus nodes and offsets are the same, the range is collapsed.
     */
    function isCollapsed(anchorNode, anchorOffset, focusNode$$1, focusOffset) {
      return anchorNode === focusNode$$1 && anchorOffset === focusOffset;
    }

    /**
     * @param {DOMElement} node
     * @return {?object}
     */
    function getModernOffsets(node) {
      var selection = window.getSelection && window.getSelection();

      if (!selection || selection.rangeCount === 0) {
        return null;
      }

      var anchorNode = selection.anchorNode;
      var anchorOffset = selection.anchorOffset;
      var focusNode$$1 = selection.focusNode;
      var focusOffset = selection.focusOffset;

      var currentRange = selection.getRangeAt(0);

      // In Firefox, range.startContainer and range.endContainer can be "anonymous
      // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
      // divs do not seem to expose properties, triggering a "Permission denied
      // error" if any of its properties are accessed. The only seemingly possible
      // way to avoid erroring is to access a property that typically works for
      // non-anonymous divs and catch any error that may otherwise arise. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
      try {
        /* eslint-disable no-unused-expressions */
        currentRange.startContainer.nodeType;
        currentRange.endContainer.nodeType;
        /* eslint-enable no-unused-expressions */
      } catch (e) {
        return null;
      }

      // If the node and offset values are the same, the selection is collapsed.
      // `Selection.isCollapsed` is available natively, but IE sometimes gets
      // this value wrong.
      var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

      var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

      var tempRange = currentRange.cloneRange();
      tempRange.selectNodeContents(node);
      tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

      var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

      var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
      var end = start + rangeLength;

      // Detect whether the selection is backward.
      var detectionRange = document.createRange();
      detectionRange.setStart(anchorNode, anchorOffset);
      detectionRange.setEnd(focusNode$$1, focusOffset);
      var isBackward = detectionRange.collapsed;

      return {
        start: isBackward ? end : start,
        end: isBackward ? start : end
      };
    }

    /**
     * In modern non-IE browsers, we can support both forward and backward
     * selections.
     *
     * Note: IE10+ supports the Selection object, but it does not support
     * the `extend` method, which means that even in modern IE, it's not possible
     * to programmatically create a backward selection. Thus, for all IE
     * versions, we use the old IE API to create our selections.
     *
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */
    function setModernOffsets(node, offsets) {
      if (!window.getSelection) {
        return;
      }

      var selection = window.getSelection();
      var length = node[getTextContentAccessor_1()].length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

      // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }

      var startMarker = getNodeForCharacterOffset_1(node, start);
      var endMarker = getNodeForCharacterOffset_1(node, end);

      if (startMarker && endMarker) {
        var range = document.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();

        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }

    var ReactDOMSelection = {
      /**
       * @param {DOMElement} node
       */
      getOffsets: getModernOffsets,

      /**
       * @param {DOMElement|DOMTextNode} node
       * @param {object} offsets
       */
      setOffsets: setModernOffsets
    };

    var ReactDOMSelection_1 = ReactDOMSelection;

    var ELEMENT_NODE$2 = HTMLNodeType_1.ELEMENT_NODE;

    function isInDocument(node) {
      return containsNode(document.documentElement, node);
    }

    /**
     * @ReactInputSelection: React input selection module. Based on Selection.js,
     * but modified to be suitable for react and has a couple of bug fixes (doesn't
     * assume buttons have range selections allowed).
     * Input selection module for React.
     */
    var ReactInputSelection = {
      hasSelectionCapabilities: function (elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
      },

      getSelectionInformation: function () {
        var focusedElem = getActiveElement();
        return {
          focusedElem: focusedElem,
          selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
        };
      },

      /**
       * @restoreSelection: If any selection information was potentially lost,
       * restore it. This is useful when performing operations that could remove dom
       * nodes and place them back in, resulting in focus being lost.
       */
      restoreSelection: function (priorSelectionInformation) {
        var curFocusedElem = getActiveElement();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
            ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
          }

          // Focusing a node can change the scroll position, which is undesirable
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE$2) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }

          focusNode(priorFocusedElem);

          for (var i = 0; i < ancestors.length; i++) {
            var info = ancestors[i];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
      },

      /**
       * @getSelection: Gets the selection bounds of a focused textarea, input or
       * contentEditable node.
       * -@input: Look up selection bounds of this input
       * -@return {start: selectionStart, end: selectionEnd}
       */
      getSelection: function (input) {
        var selection;

        if ('selectionStart' in input) {
          // Modern browser with input or textarea.
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          // Content editable or old IE textarea.
          selection = ReactDOMSelection_1.getOffsets(input);
        }

        return selection || { start: 0, end: 0 };
      },

      /**
       * @setSelection: Sets the selection bounds of a textarea or input and focuses
       * the input.
       * -@input     Set selection bounds of this input or textarea
       * -@offsets   Object of same form that is returned from get*
       */
      setSelection: function (input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) {
          end = start;
        }

        if ('selectionStart' in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          ReactDOMSelection_1.setOffsets(input, offsets);
        }
      }
    };

    var ReactInputSelection_1 = ReactInputSelection;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule ReactVersion
     */

    var ReactVersion = '16.0.0';

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule findDOMNode
     * 
     */

    var ELEMENT_NODE$3 = HTMLNodeType_1.ELEMENT_NODE;

    var ReactCurrentOwner$3 = ReactGlobalSharedState_1.ReactCurrentOwner;

    {
      var warning$27 = require$$0;
    }

    var findFiber = function (arg) {
      invariant(false, 'Missing injection for fiber findDOMNode');
    };
    var findStack = function (arg) {
      invariant(false, 'Missing injection for stack findDOMNode');
    };

    var findDOMNode = function (componentOrElement) {
      {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null) {
          var isFiber = typeof owner.tag === 'number';
          var warnedAboutRefsInRender = isFiber ? owner.stateNode._warnedAboutRefsInRender : owner._warnedAboutRefsInRender;
          warning$27(warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName_1(owner) || 'A component');
          if (isFiber) {
            owner.stateNode._warnedAboutRefsInRender = true;
          } else {
            owner._warnedAboutRefsInRender = true;
          }
        }
      }
      if (componentOrElement == null) {
        return null;
      }
      if (componentOrElement.nodeType === ELEMENT_NODE$3) {
        return componentOrElement;
      }

      var inst = ReactInstanceMap_1.get(componentOrElement);
      if (inst) {
        if (typeof inst.tag === 'number') {
          return findFiber(inst);
        } else {
          return findStack(inst);
        }
      }

      if (typeof componentOrElement.render === 'function') {
        invariant(false, 'Unable to find node on an unmounted component.');
      } else {
        invariant(false, 'Element appears to be neither ReactComponent nor DOMNode. Keys: %s', Object.keys(componentOrElement));
      }
    };

    findDOMNode._injectFiber = function (fn) {
      findFiber = fn;
    };
    findDOMNode._injectStack = function (fn) {
      findStack = fn;
    };

    var findDOMNode_1 = findDOMNode;

    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule lowPriorityWarning
     */

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning$1 = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning$1 = function (condition, format) {
        if (format === undefined) {
          throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning_1 = lowPriorityWarning$1;

    var validateDOMNesting$1 = emptyFunction;

    {
      var warning$28 = require$$0;

      var _require$13 = ReactDebugCurrentFiber_1,
          getCurrentFiberStackAddendum$6 = _require$13.getCurrentFiberStackAddendum;

      // This validation code was written based on the HTML5 parsing spec:
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      //
      // Note: this does not catch all invalid nesting, nor does it try to (as it's
      // not clear what practical benefit doing so provides); instead, we warn only
      // for cases where the parser will give a parse tree differing from what React
      // intended. For example, <b><div></div></b> is invalid but we don't warn
      // because it still parses correctly; we do warn for other cases like nested
      // <p> tags where the beginning of the second element implicitly closes the
      // first, causing a confusing mess.

      // https://html.spec.whatwg.org/multipage/syntax.html#special


      var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

      // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
      // TODO: Distinguish by namespace here -- for <title>, including it here
      // errs on the side of fewer warnings
      'foreignObject', 'desc', 'title'];

      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
      var buttonScopeTags = inScopeTags.concat(['button']);

      // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
      var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

      var emptyAncestorInfo = {
        current: null,

        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,

        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };

      var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {
        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
        var info = { tag: tag, instance: instance };

        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        }

        // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }

        ancestorInfo.current = info;

        if (tag === 'form') {
          ancestorInfo.formTag = info;
        }
        if (tag === 'a') {
          ancestorInfo.aTagInScope = info;
        }
        if (tag === 'button') {
          ancestorInfo.buttonTagInScope = info;
        }
        if (tag === 'nobr') {
          ancestorInfo.nobrTagInScope = info;
        }
        if (tag === 'p') {
          ancestorInfo.pTagInButtonScope = info;
        }
        if (tag === 'li') {
          ancestorInfo.listItemTagAutoclosing = info;
        }
        if (tag === 'dd' || tag === 'dt') {
          ancestorInfo.dlItemTagAutoclosing = info;
        }

        return ancestorInfo;
      };

      /**
       * Returns whether
       */
      var isTagValidWithParent = function (tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch (parentTag) {
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
          case 'select':
            return tag === 'option' || tag === 'optgroup' || tag === '#text';
          case 'optgroup':
            return tag === 'option' || tag === '#text';
          // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
          // but
          case 'option':
            return tag === '#text';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
          // No special behavior since these rules fall back to "in body" mode for
          // all except special table nodes which cause bad parsing behavior anyway.

          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
          case 'tr':
            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
          case 'tbody':
          case 'thead':
          case 'tfoot':
            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
          case 'colgroup':
            return tag === 'col' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
          case 'table':
            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
          case 'head':
            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
          case 'html':
            return tag === 'head' || tag === 'body';
          case '#document':
            return tag === 'html';
        }

        // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch (tag) {
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

          case 'rp':
          case 'rt':
            return impliedEndTags.indexOf(parentTag) === -1;

          case 'body':
          case 'caption':
          case 'col':
          case 'colgroup':
          case 'frame':
          case 'head':
          case 'html':
          case 'tbody':
          case 'td':
          case 'tfoot':
          case 'th':
          case 'thead':
          case 'tr':
            // These tags are only valid with a few parents that have special child
            // parsing rules -- if we're down here, then none of those matched and
            // so we allow it only if we don't know what the parent is, as all other
            // cases are invalid.
            return parentTag == null;
        }

        return true;
      };

      /**
       * Returns whether
       */
      var findInvalidAncestorForTag = function (tag, ancestorInfo) {
        switch (tag) {
          case 'address':
          case 'article':
          case 'aside':
          case 'blockquote':
          case 'center':
          case 'details':
          case 'dialog':
          case 'dir':
          case 'div':
          case 'dl':
          case 'fieldset':
          case 'figcaption':
          case 'figure':
          case 'footer':
          case 'header':
          case 'hgroup':
          case 'main':
          case 'menu':
          case 'nav':
          case 'ol':
          case 'p':
          case 'section':
          case 'summary':
          case 'ul':
          case 'pre':
          case 'listing':
          case 'table':
          case 'hr':
          case 'xmp':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return ancestorInfo.pTagInButtonScope;

          case 'form':
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

          case 'li':
            return ancestorInfo.listItemTagAutoclosing;

          case 'dd':
          case 'dt':
            return ancestorInfo.dlItemTagAutoclosing;

          case 'button':
            return ancestorInfo.buttonTagInScope;

          case 'a':
            // Spec says something about storing a list of markers, but it sounds
            // equivalent to this check.
            return ancestorInfo.aTagInScope;

          case 'nobr':
            return ancestorInfo.nobrTagInScope;
        }

        return null;
      };

      /**
       * Given a ReactCompositeComponent instance, return a list of its recursive
       * owners, starting at the root and ending with the instance itself.
       */
      var findOwnerStack = function (instance) {
        if (!instance) {
          return [];
        }

        var stack = [];
        do {
          stack.push(instance);
        } while (instance = instance._currentElement._owner);
        stack.reverse();
        return stack;
      };

      var getOwnerInfo = function (childInstance, childTag, ancestorInstance, ancestorTag, isParent) {
        var childOwner = childInstance && childInstance._currentElement._owner;
        var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

        var childOwners = findOwnerStack(childOwner);
        var ancestorOwners = findOwnerStack(ancestorOwner);

        var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
        var i;

        var deepestCommon = -1;
        for (i = 0; i < minStackLen; i++) {
          if (childOwners[i] === ancestorOwners[i]) {
            deepestCommon = i;
          } else {
            break;
          }
        }

        var UNKNOWN = '(unknown)';
        var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
          return getComponentName_1(inst) || UNKNOWN;
        });
        var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
          return getComponentName_1(inst) || UNKNOWN;
        });
        var ownerInfo = [].concat(
        // If the parent and child instances have a common owner ancestor, start
        // with that -- otherwise we just start with the parent's owners.
        deepestCommon !== -1 ? getComponentName_1(childOwners[deepestCommon]) || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
        // If we're warning about an invalid (non-parent) ancestry, add '...'
        isParent ? [] : ['...'], childOwnerNames, childTag).join(' > ');

        return ownerInfo;
      };

      var didWarn = {};

      validateDOMNesting$1 = function (childTag, childText, childInstance, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;

        if (childText != null) {
          warning$28(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');
          childTag = '#text';
        }

        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) {
          return;
        }

        var ancestorInstance = invalidParentOrAncestor.instance;
        var ancestorTag = invalidParentOrAncestor.tag;
        var addendum;

        if (childInstance != null) {
          addendum = ' See ' + getOwnerInfo(childInstance, childTag, ancestorInstance, ancestorTag, !!invalidParent) + '.';
        } else {
          addendum = getCurrentFiberStackAddendum$6();
        }

        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
        if (didWarn[warnKey]) {
          return;
        }
        didWarn[warnKey] = true;

        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
          if (/\S/.test(childText)) {
            tagDisplayName = 'Text nodes';
          } else {
            tagDisplayName = 'Whitespace text nodes';
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
          }
        } else {
          tagDisplayName = '<' + childTag + '>';
        }

        if (invalidParent) {
          var info = '';
          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }
          warning$28(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
        } else {
          warning$28(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
        }
      };

      validateDOMNesting$1.updatedAncestorInfo = updatedAncestorInfo$1;

      // For testing
      validateDOMNesting$1.isTagValidInContext = function (tag, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
      };
    }

    var validateDOMNesting_1 = validateDOMNesting$1;

    var HostComponent$11 = ReactTypeOfWork.HostComponent;

    function getParent(inst) {
      if (inst._hostParent !== undefined) {
        return inst._hostParent;
      }
      if (typeof inst.tag === 'number') {
        do {
          inst = inst['return'];
          // TODO: If this is a HostRoot we might want to bail out.
          // That is depending on if we want nested subtrees (layers) to bubble
          // events to their parent. We could also go through parentNode on the
          // host node but that wouldn't work for React Native and doesn't let us
          // do the portal feature.
        } while (inst && inst.tag !== HostComponent$11);
        if (inst) {
          return inst;
        }
      }
      return null;
    }

    /**
     * Return the lowest common ancestor of A and B, or null if they are in
     * different trees.
     */
    function getLowestCommonAncestor(instA, instB) {
      var depthA = 0;
      for (var tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }
      var depthB = 0;
      for (var tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
      }

      // If A is deeper, crawl up.
      while (depthA - depthB > 0) {
        instA = getParent(instA);
        depthA--;
      }

      // If B is deeper, crawl up.
      while (depthB - depthA > 0) {
        instB = getParent(instB);
        depthB--;
      }

      // Walk in lockstep until we find a match.
      var depth = depthA;
      while (depth--) {
        if (instA === instB || instA === instB.alternate) {
          return instA;
        }
        instA = getParent(instA);
        instB = getParent(instB);
      }
      return null;
    }

    /**
     * Return if A is an ancestor of B.
     */
    function isAncestor(instA, instB) {
      while (instB) {
        if (instA === instB || instA === instB.alternate) {
          return true;
        }
        instB = getParent(instB);
      }
      return false;
    }

    /**
     * Return the parent instance of the passed-in instance.
     */
    function getParentInstance(inst) {
      return getParent(inst);
    }

    /**
     * Simulates the traversal of a two-phase, capture/bubble event dispatch.
     */
    function traverseTwoPhase(inst, fn, arg) {
      var path = [];
      while (inst) {
        path.push(inst);
        inst = getParent(inst);
      }
      var i;
      for (i = path.length; i-- > 0;) {
        fn(path[i], 'captured', arg);
      }
      for (i = 0; i < path.length; i++) {
        fn(path[i], 'bubbled', arg);
      }
    }

    /**
     * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
     * should would receive a `mouseEnter` or `mouseLeave` event.
     *
     * Does not invoke the callback on the nearest common ancestor because nothing
     * "entered" or "left" that element.
     */
    function traverseEnterLeave(from, to, fn, argFrom, argTo) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      var pathFrom = [];
      while (from && from !== common) {
        pathFrom.push(from);
        from = getParent(from);
      }
      var pathTo = [];
      while (to && to !== common) {
        pathTo.push(to);
        to = getParent(to);
      }
      var i;
      for (i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], 'bubbled', argFrom);
      }
      for (i = pathTo.length; i-- > 0;) {
        fn(pathTo[i], 'captured', argTo);
      }
    }

    var ReactTreeTraversal = {
      isAncestor: isAncestor,
      getLowestCommonAncestor: getLowestCommonAncestor,
      getParentInstance: getParentInstance,
      traverseTwoPhase: traverseTwoPhase,
      traverseEnterLeave: traverseEnterLeave
    };

    var getListener = EventPluginHub_1.getListener;

    {
      var warning$29 = require$$0;
    }

    /**
     * Some event types have a notion of different registration names for different
     * "phases" of propagation. This finds listeners by a given phase.
     */
    function listenerAtPhase(inst, event, propagationPhase) {
      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
      return getListener(inst, registrationName);
    }

    /**
     * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
     * here, allows us to not have to bind or create functions for each event.
     * Mutating the event's members allows us to not have to create a wrapping
     * "dispatch" object that pairs the event with the listener.
     */
    function accumulateDirectionalDispatches(inst, phase, event) {
      {
        warning$29(inst, 'Dispatching inst must not be null');
      }
      var listener = listenerAtPhase(inst, event, phase);
      if (listener) {
        event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst);
      }
    }

    /**
     * Collect dispatches (must be entirely collected before dispatching - see unit
     * tests). Lazily allocate the array to conserve memory.  We must loop through
     * each event and perform the traversal for each one. We cannot perform a
     * single traversal for the entire collection of events because each event may
     * have a different target.
     */
    function accumulateTwoPhaseDispatchesSingle(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
      }
    }

    /**
     * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
     */
    function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst;
        var parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
      }
    }

    /**
     * Accumulates without regard to direction, does not look for phased
     * registration names. Same as `accumulateDirectDispatchesSingle` but without
     * requiring that the `dispatchMarker` be the same as the dispatched ID.
     */
    function accumulateDispatches(inst, ignoredDirection, event) {
      if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName;
        var listener = getListener(inst, registrationName);
        if (listener) {
          event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst);
        }
      }
    }

    /**
     * Accumulates dispatches on an `SyntheticEvent`, but only for the
     * `dispatchMarker`.
     * @param {SyntheticEvent} event
     */
    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        accumulateDispatches(event._targetInst, null, event);
      }
    }

    function accumulateTwoPhaseDispatches(events) {
      forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
    }

    function accumulateTwoPhaseDispatchesSkipTarget(events) {
      forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
    }

    function accumulateEnterLeaveDispatches(leave, enter, from, to) {
      ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
    }

    function accumulateDirectDispatches(events) {
      forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
    }

    /**
     * A small set of propagation patterns, each of which will accept a small amount
     * of information, and generate a set of "dispatch ready event objects" - which
     * are sets of events that have already been annotated with a set of dispatched
     * listener functions/ids. The API is designed this way to discourage these
     * propagation strategies from actually executing the dispatches, since we
     * always want to collect the entire set of dispatches before executing even a
     * single one.
     *
     * @constructor EventPropagators
     */
    var EventPropagators = {
      accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
      accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
      accumulateDirectDispatches: accumulateDirectDispatches,
      accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
    };

    var EventPropagators_1 = EventPropagators;

    /**
     * This helper object stores information about text content of a target node,
     * allowing comparison of content before and after a given event.
     *
     * Identify the node where selection currently begins, then observe
     * both its text content and its current position in the DOM. Since the
     * browser may natively replace the target node during composition, we can
     * use its position to find its replacement.
     * 
     *
     */
    var compositionState = {
      _root: null,
      _startText: null,
      _fallbackText: null
    };

    var FallbackCompositionState = {
      initialize: function (nativeEventTarget) {
        compositionState._root = nativeEventTarget;
        compositionState._startText = FallbackCompositionState.getText();
        return true;
      },
      reset: function () {
        compositionState._root = null;
        compositionState._startText = null;
        compositionState._fallbackText = null;
      },
      getData: function () {
        if (compositionState._fallbackText) {
          return compositionState._fallbackText;
        }

        var start;
        var startValue = compositionState._startText;
        var startLength = startValue.length;
        var end;
        var endValue = FallbackCompositionState.getText();
        var endLength = endValue.length;

        for (start = 0; start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }

        var minEnd = startLength - start;
        for (end = 1; end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }

        var sliceTail = end > 1 ? 1 - end : undefined;
        compositionState._fallbackText = endValue.slice(start, sliceTail);
        return compositionState._fallbackText;
      },
      getText: function () {
        if ('value' in compositionState._root) {
          return compositionState._root.value;
        }
        return compositionState._root[getTextContentAccessor_1()];
      }
    };

    var FallbackCompositionState_1 = FallbackCompositionState;

    var didWarnForAddedNewProperty = false;
    var isProxySupported = typeof Proxy === 'function';
    var EVENT_POOL_SIZE = 10;

    {
      var warning$30 = require$$0;
    }

    var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var EventInterface = {
      type: null,
      target: null,
      // currentTarget is set when dispatching; no use in copying it here
      currentTarget: emptyFunction.thatReturnsNull,
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function (event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null
    };

    /**
     * Synthetic events are dispatched by event plugins, typically in response to a
     * top-level event delegation handler.
     *
     * These systems should generally use pooling to reduce the frequency of garbage
     * collection. The system should check `isPersistent` to determine whether the
     * event should be released into the pool after being dispatched. Users that
     * need a persisted event should invoke `persist`.
     *
     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
     * normalizing browser quirks. Subclasses do not necessarily have to implement a
     * DOM interface; custom application-specific events can also subclass this.
     *
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {*} targetInst Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @param {DOMEventTarget} nativeEventTarget Target node.
     */
    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
      {
        // these have a getter/setter for warnings
        delete this.nativeEvent;
        delete this.preventDefault;
        delete this.stopPropagation;
      }

      this.dispatchConfig = dispatchConfig;
      this._targetInst = targetInst;
      this.nativeEvent = nativeEvent;

      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        if (!Interface.hasOwnProperty(propName)) {
          continue;
        }
        {
          delete this[propName]; // this has a getter/setter for warnings
        }
        var normalize = Interface[propName];
        if (normalize) {
          this[propName] = normalize(nativeEvent);
        } else {
          if (propName === 'target') {
            this.target = nativeEventTarget;
          } else {
            this[propName] = nativeEvent[propName];
          }
        }
      }

      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
      if (defaultPrevented) {
        this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
      } else {
        this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
      }
      this.isPropagationStopped = emptyFunction.thatReturnsFalse;
      return this;
    }

    _assign(SyntheticEvent.prototype, {
      preventDefault: function () {
        this.defaultPrevented = true;
        var event = this.nativeEvent;
        if (!event) {
          return;
        }

        if (event.preventDefault) {
          event.preventDefault();
        } else if (typeof event.returnValue !== 'unknown') {
          event.returnValue = false;
        }
        this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
      },

      stopPropagation: function () {
        var event = this.nativeEvent;
        if (!event) {
          return;
        }

        if (event.stopPropagation) {
          event.stopPropagation();
        } else if (typeof event.cancelBubble !== 'unknown') {
          // The ChangeEventPlugin registers a "propertychange" event for
          // IE. This event does not support bubbling or cancelling, and
          // any references to cancelBubble throw "Member not found".  A
          // typeof check of "unknown" circumvents this issue (and is also
          // IE specific).
          event.cancelBubble = true;
        }

        this.isPropagationStopped = emptyFunction.thatReturnsTrue;
      },

      /**
       * We release all dispatched `SyntheticEvent`s after each event loop, adding
       * them back into the pool. This allows a way to hold onto a reference that
       * won't be added back into the pool.
       */
      persist: function () {
        this.isPersistent = emptyFunction.thatReturnsTrue;
      },

      /**
       * Checks if this event should be released back into the pool.
       *
       * @return {boolean} True if this should not be released, false otherwise.
       */
      isPersistent: emptyFunction.thatReturnsFalse,

      /**
       * `PooledClass` looks for `destructor` on each instance it releases.
       */
      destructor: function () {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
          {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
          }
        }
        for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
          this[shouldBeReleasedProperties[i]] = null;
        }
        {
          Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
          Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
          Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
        }
      }
    });

    SyntheticEvent.Interface = EventInterface;

    /**
     * Helper to reduce boilerplate when creating subclasses.
     *
     * @param {function} Class
     * @param {?object} Interface
     */
    SyntheticEvent.augmentClass = function (Class, Interface) {
      var Super = this;

      var E = function () {};
      E.prototype = Super.prototype;
      var prototype = new E();

      _assign(prototype, Class.prototype);
      Class.prototype = prototype;
      Class.prototype.constructor = Class;

      Class.Interface = _assign({}, Super.Interface, Interface);
      Class.augmentClass = Super.augmentClass;
      addEventPoolingTo(Class);
    };

    /** Proxying after everything set on SyntheticEvent
      * to resolve Proxy issue on some WebKit browsers
      * in which some Event properties are set to undefined (GH#10010)
      */
    {
      if (isProxySupported) {
        /*eslint-disable no-func-assign */
        SyntheticEvent = new Proxy(SyntheticEvent, {
          construct: function (target, args) {
            return this.apply(target, Object.create(target.prototype), args);
          },
          apply: function (constructor, that, args) {
            return new Proxy(constructor.apply(that, args), {
              set: function (target, prop, value) {
                if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                  warning$30(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
                  didWarnForAddedNewProperty = true;
                }
                target[prop] = value;
                return true;
              }
            });
          }
        });
        /*eslint-enable no-func-assign */
      }
    }

    addEventPoolingTo(SyntheticEvent);

    var SyntheticEvent_1 = SyntheticEvent;

    /**
      * Helper to nullify syntheticEvent instance properties when destructing
      *
      * @param {String} propName
      * @param {?object} getVal
      * @return {object} defineProperty object
      */
    function getPooledWarningPropertyDefinition(propName, getVal) {
      var isFunction = typeof getVal === 'function';
      return {
        configurable: true,
        set: set,
        get: get
      };

      function set(val) {
        var action = isFunction ? 'setting the method' : 'setting the property';
        warn(action, 'This is effectively a no-op');
        return val;
      }

      function get() {
        var action = isFunction ? 'accessing the method' : 'accessing the property';
        var result = isFunction ? 'This is a no-op function' : 'This is set to null';
        warn(action, result);
        return getVal;
      }

      function warn(action, result) {
        var warningCondition = false;
        warning$30(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
      }
    }

    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
      var EventConstructor = this;
      if (EventConstructor.eventPool.length) {
        var instance = EventConstructor.eventPool.pop();
        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
      }
      return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }

    function releasePooledEvent(event) {
      var EventConstructor = this;
      !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;
      event.destructor();
      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
        EventConstructor.eventPool.push(event);
      }
    }

    function addEventPoolingTo(EventConstructor) {
      EventConstructor.eventPool = [];
      EventConstructor.getPooled = getPooledEvent;
      EventConstructor.release = releasePooledEvent;
    }

    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
     */
    var CompositionEventInterface = {
      data: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticEvent_1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

    var SyntheticCompositionEvent_1 = SyntheticCompositionEvent;

    /**
     * @interface Event
     * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
     *      /#events-inputevents
     */
    var InputEventInterface = {
      data: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticEvent_1.augmentClass(SyntheticInputEvent, InputEventInterface);

    var SyntheticInputEvent_1 = SyntheticInputEvent;

    var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;

    var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

    var documentMode = null;
    if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
      documentMode = document.documentMode;
    }

    // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

    // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

    /**
     * Opera <= 12 includes TextEvent in window, but does not fire
     * text input events. Rely on keypress instead.
     */
    function isPresto() {
      var opera = window.opera;
      return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
    }

    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

    // Events and their corresponding property names.
    var eventTypes = {
      beforeInput: {
        phasedRegistrationNames: {
          bubbled: 'onBeforeInput',
          captured: 'onBeforeInputCapture'
        },
        dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
      },
      compositionEnd: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionEnd',
          captured: 'onCompositionEndCapture'
        },
        dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
      },
      compositionStart: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionStart',
          captured: 'onCompositionStartCapture'
        },
        dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
      },
      compositionUpdate: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionUpdate',
          captured: 'onCompositionUpdateCapture'
        },
        dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
      }
    };

    // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;

    /**
     * Return whether a native keypress event is assumed to be a command.
     * This is required because Firefox fires `keypress` events for key commands
     * (cut, copy, select-all, etc.) even though no character is inserted.
     */
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
      // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }

    /**
     * Translate native top level events into event types.
     *
     * @param {string} topLevelType
     * @return {object}
     */
    function getCompositionEventType(topLevelType) {
      switch (topLevelType) {
        case 'topCompositionStart':
          return eventTypes.compositionStart;
        case 'topCompositionEnd':
          return eventTypes.compositionEnd;
        case 'topCompositionUpdate':
          return eventTypes.compositionUpdate;
      }
    }

    /**
     * Does our fallback best-guess model think this event signifies that
     * composition has begun?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isFallbackCompositionStart(topLevelType, nativeEvent) {
      return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
    }

    /**
     * Does our fallback mode think that this event is the end of composition?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isFallbackCompositionEnd(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case 'topKeyUp':
          // Command keys insert or clear IME input.
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case 'topKeyDown':
          // Expect IME keyCode on each keydown. If we get any other
          // code we must have exited earlier.
          return nativeEvent.keyCode !== START_KEYCODE;
        case 'topKeyPress':
        case 'topMouseDown':
        case 'topBlur':
          // Events are not possible without cancelling IME.
          return true;
        default:
          return false;
      }
    }

    /**
     * Google Input Tools provides composition data via a CustomEvent,
     * with the `data` property populated in the `detail` object. If this
     * is available on the event object, use it. If not, this is a plain
     * composition event and we have nothing special to extract.
     *
     * @param {object} nativeEvent
     * @return {?string}
     */
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === 'object' && 'data' in detail) {
        return detail.data;
      }
      return null;
    }

    // Track the current IME composition status, if any.
    var isComposing = false;

    /**
     * @return {?object} A SyntheticCompositionEvent.
     */
    function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var eventType;
      var fallbackData;

      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(topLevelType);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
          eventType = eventTypes.compositionStart;
        }
      } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionEnd;
      }

      if (!eventType) {
        return null;
      }

      if (useFallbackCompositionData) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!isComposing && eventType === eventTypes.compositionStart) {
          isComposing = FallbackCompositionState_1.initialize(nativeEventTarget);
        } else if (eventType === eventTypes.compositionEnd) {
          if (isComposing) {
            fallbackData = FallbackCompositionState_1.getData();
          }
        }
      }

      var event = SyntheticCompositionEvent_1.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

      if (fallbackData) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
      } else {
        var customData = getDataFromCustomEvent(nativeEvent);
        if (customData !== null) {
          event.data = customData;
        }
      }

      EventPropagators_1.accumulateTwoPhaseDispatches(event);
      return event;
    }

    /**
     * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The string corresponding to this `beforeInput` event.
     */
    function getNativeBeforeInputChars(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case 'topCompositionEnd':
          return getDataFromCustomEvent(nativeEvent);
        case 'topKeyPress':
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return null;
          }

          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;

        case 'topTextInput':
          // Record the characters to be added to the DOM.
          var chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }

          return chars;

        default:
          // For other native event types, do nothing.
          return null;
      }
    }

    /**
     * For browsers that do not provide the `textInput` event, extract the
     * appropriate string to use for SyntheticInputEvent.
     *
     * @param {string} topLevelType Record from `BrowserEventConstants`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The fallback string for this `beforeInput` event.
     */
    function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      // If composition event is available, we extract a string only at
      // compositionevent, otherwise extract it at fallback events.
      if (isComposing) {
        if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
          var chars = FallbackCompositionState_1.getData();
          FallbackCompositionState_1.reset();
          isComposing = false;
          return chars;
        }
        return null;
      }

      switch (topLevelType) {
        case 'topPaste':
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          return null;
        case 'topKeyPress':
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (!isKeypressCommand(nativeEvent)) {
            // IE fires the `keypress` event when a user types an emoji via
            // Touch keyboard of Windows.  In such a case, the `char` property
            // holds an emoji character like `\uD83D\uDE0A`.  Because its length
            // is 2, the property `which` does not represent an emoji correctly.
            // In such a case, we directly return the `char` property instead of
            // using `which`.
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }
          return null;
        case 'topCompositionEnd':
          return useFallbackCompositionData ? null : nativeEvent.data;
        default:
          return null;
      }
    }

    /**
     * Extract a SyntheticInputEvent for `beforeInput`, based on either native
     * `textInput` or fallback behavior.
     *
     * @return {?object} A SyntheticInputEvent.
     */
    function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var chars;

      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
      }

      // If no characters are being inserted, no BeforeInput event should
      // be fired.
      if (!chars) {
        return null;
      }

      var event = SyntheticInputEvent_1.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

      event.data = chars;
      EventPropagators_1.accumulateTwoPhaseDispatches(event);
      return event;
    }

    /**
     * Create an `onBeforeInput` event to match
     * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
     *
     * This event plugin is based on the native `textInput` event
     * available in Chrome, Safari, Opera, and IE. This event fires after
     * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
     *
     * `beforeInput` is spec'd but not implemented in any browsers, and
     * the `input` event does not provide any useful information about what has
     * actually been added, contrary to the spec. Thus, `textInput` is the best
     * available event to identify the characters that have actually been inserted
     * into the target node.
     *
     * This plugin is also responsible for emitting `composition` events, thus
     * allowing us to share composition fallback code for both `beforeInput` and
     * `composition` event types.
     */
    var BeforeInputEventPlugin = {
      eventTypes: eventTypes,

      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
      }
    };

    var BeforeInputEventPlugin_1 = BeforeInputEventPlugin;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule isTextInputElement
     * 
     */

    /**
     * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
     */

    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      'datetime-local': true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };

    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

      if (nodeName === 'input') {
        return !!supportedInputTypes[elem.type];
      }

      if (nodeName === 'textarea') {
        return true;
      }

      return false;
    }

    var isTextInputElement_1 = isTextInputElement;

    var eventTypes$1 = {
      change: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        },
        dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
      }
    };

    function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
      var event = SyntheticEvent_1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
      event.type = 'change';
      // Flag this event loop as needing state restore.
      ReactControlledComponent_1.enqueueStateRestore(target);
      EventPropagators_1.accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * For IE shims
     */
    var activeElement = null;
    var activeElementInst = null;

    /**
     * SECTION: handle `change` event
     */
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }

    function manualDispatchChangeEvent(nativeEvent) {
      var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget_1(nativeEvent));

      // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      //
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.
      ReactGenericBatching_1.batchedUpdates(runEventInBatch, event);
    }

    function runEventInBatch(event) {
      EventPluginHub_1.enqueueEvents(event);
      EventPluginHub_1.processEventQueue(false);
    }

    function getInstIfValueChanged(targetInst) {
      var targetNode = ReactDOMComponentTree_1.getNodeFromInstance(targetInst);
      if (inputValueTracking_1.updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }

    function getTargetInstForChangeEvent(topLevelType, targetInst) {
      if (topLevelType === 'topChange') {
        return targetInst;
      }
    }

    /**
     * SECTION: handle `input` event
     */
    var isInputEventSupported = false;
    if (ExecutionEnvironment.canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events.
      isInputEventSupported = isEventSupported_1('input') && (!document.documentMode || document.documentMode > 9);
    }

    /**
     * (For IE <=9) Starts tracking propertychange events on the passed-in element
     * and override the value property so that we can distinguish user events from
     * value changes in JS.
     */
    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }

    /**
     * (For IE <=9) Removes the event listeners from the currently-tracked element,
     * if any exists.
     */
    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }
      activeElement.detachEvent('onpropertychange', handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }

    /**
     * (For IE <=9) Handles a propertychange event, sending a `change` event if
     * the value of the active element has changed.
     */
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }
      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }

    function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
      if (topLevelType === 'topFocus') {
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        //
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (topLevelType === 'topBlur') {
        stopWatchingForValueChange();
      }
    }

    // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
      if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
      }
    }

    /**
     * SECTION: handle `click` event
     */
    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }

    function getTargetInstForClickEvent(topLevelType, targetInst) {
      if (topLevelType === 'topClick') {
        return getInstIfValueChanged(targetInst);
      }
    }

    function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
      if (topLevelType === 'topInput' || topLevelType === 'topChange') {
        return getInstIfValueChanged(targetInst);
      }
    }

    function handleControlledInputBlur(inst, node) {
      // TODO: In IE, inst is occasionally null. Why?
      if (inst == null) {
        return;
      }

      // Fiber and ReactDOM keep wrapper state in separate places
      var state = inst._wrapperState || node._wrapperState;

      if (!state || !state.controlled || node.type !== 'number') {
        return;
      }

      // If controlled, assign the value attribute to the current value on blur
      var value = '' + node.value;
      if (node.getAttribute('value') !== value) {
        node.setAttribute('value', value);
      }
    }

    /**
     * This plugin creates an `onChange` event that normalizes change events
     * across form elements. This event fires at a time when it's possible to
     * change the element's value without seeing a flicker.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - select
     */
    var ChangeEventPlugin = {
      eventTypes: eventTypes$1,

      _isInputEventSupported: isInputEventSupported,

      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var targetNode = targetInst ? ReactDOMComponentTree_1.getNodeFromInstance(targetInst) : window;

        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement_1(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }

        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(topLevelType, targetInst);
          if (inst) {
            var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
            return event;
          }
        }

        if (handleEventFunc) {
          handleEventFunc(topLevelType, targetNode, targetInst);
        }

        // When blurring, set the value attribute for number inputs
        if (topLevelType === 'topBlur') {
          handleControlledInputBlur(targetInst, targetNode);
        }
      }
    };

    var ChangeEventPlugin_1 = ChangeEventPlugin;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule DOMEventPluginOrder
     */

    /**
     * Module that is injectable into `EventPluginHub`, that specifies a
     * deterministic ordering of `EventPlugin`s. A convenient way to reason about
     * plugins, without having to package every one of them. This is better than
     * having plugins be ordered in the same order that they are injected because
     * that ordering would be influenced by the packaging order.
     * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
     * preventing default on events is convenient in `SimpleEventPlugin` handlers.
     */

    var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

    var DOMEventPluginOrder_1 = DOMEventPluginOrder;

    /**
     * @interface UIEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var UIEventInterface = {
      view: function (event) {
        if (event.view) {
          return event.view;
        }

        var target = getEventTarget_1(event);
        if (target.window === target) {
          // target is a window object
          return target;
        }

        var doc = target.ownerDocument;
        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
        if (doc) {
          return doc.defaultView || doc.parentWindow;
        } else {
          return window;
        }
      },
      detail: function (event) {
        return event.detail || 0;
      }
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticEvent}
     */
    function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticEvent_1.augmentClass(SyntheticUIEvent, UIEventInterface);

    var SyntheticUIEvent_1 = SyntheticUIEvent;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule getEventModifierState
     */

    /**
     * Translation from modifier key to the associated property in the event.
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
     */

    var modifierKeyToProp = {
      Alt: 'altKey',
      Control: 'ctrlKey',
      Meta: 'metaKey',
      Shift: 'shiftKey'
    };

    // IE8 does not implement getModifierState so we simply map it to the only
    // modifier keys exposed by the event itself, does not support Lock-keys.
    // Currently, all major browsers except Chrome seems to support Lock-keys.
    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }

    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }

    var getEventModifierState_1 = getEventModifierState;

    /**
     * @interface MouseEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var MouseEventInterface = {
      screenX: null,
      screenY: null,
      clientX: null,
      clientY: null,
      pageX: null,
      pageY: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      getModifierState: getEventModifierState_1,
      button: null,
      buttons: null,
      relatedTarget: function (event) {
        return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
      }
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticUIEvent_1.augmentClass(SyntheticMouseEvent, MouseEventInterface);

    var SyntheticMouseEvent_1 = SyntheticMouseEvent;

    var eventTypes$2 = {
      mouseEnter: {
        registrationName: 'onMouseEnter',
        dependencies: ['topMouseOut', 'topMouseOver']
      },
      mouseLeave: {
        registrationName: 'onMouseLeave',
        dependencies: ['topMouseOut', 'topMouseOver']
      }
    };

    var EnterLeaveEventPlugin = {
      eventTypes: eventTypes$2,

      /**
       * For almost every interaction we care about, there will be both a top-level
       * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
       * we do not extract duplicate events. However, moving the mouse into the
       * browser from outside will not fire a `mouseout` event. In this case, we use
       * the `mouseover` top-level event.
       */
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
          return null;
        }
        if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
          // Must not be a mouse in or mouse out - ignoring.
          return null;
        }

        var win;
        if (nativeEventTarget.window === nativeEventTarget) {
          // `nativeEventTarget` is probably a window object.
          win = nativeEventTarget;
        } else {
          // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }

        var from;
        var to;
        if (topLevelType === 'topMouseOut') {
          from = targetInst;
          var related = nativeEvent.relatedTarget || nativeEvent.toElement;
          to = related ? ReactDOMComponentTree_1.getClosestInstanceFromNode(related) : null;
        } else {
          // Moving to a node from outside the window.
          from = null;
          to = targetInst;
        }

        if (from === to) {
          // Nothing pertains to our managed components.
          return null;
        }

        var fromNode = from == null ? win : ReactDOMComponentTree_1.getNodeFromInstance(from);
        var toNode = to == null ? win : ReactDOMComponentTree_1.getNodeFromInstance(to);

        var leave = SyntheticMouseEvent_1.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);
        leave.type = 'mouseleave';
        leave.target = fromNode;
        leave.relatedTarget = toNode;

        var enter = SyntheticMouseEvent_1.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);
        enter.type = 'mouseenter';
        enter.target = toNode;
        enter.relatedTarget = fromNode;

        EventPropagators_1.accumulateEnterLeaveDispatches(leave, enter, from, to);

        return [leave, enter];
      }
    };

    var EnterLeaveEventPlugin_1 = EnterLeaveEventPlugin;

    var DOCUMENT_NODE$2 = HTMLNodeType_1.DOCUMENT_NODE;

    var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

    var eventTypes$3 = {
      select: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        },
        dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
      }
    };

    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;

    // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.
    var isListeningToAllDependencies = ReactBrowserEventEmitter_1.isListeningToAllDependencies;

    /**
     * Get an object which is a unique representation of the current selection.
     *
     * The return value will not be consistent across nodes or browsers, but
     * two identical selections on the same node will return identical objects.
     *
     * @param {DOMElement} node
     * @return {object}
     */
    function getSelection(node) {
      if ('selectionStart' in node && ReactInputSelection_1.hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else if (window.getSelection) {
        var selection = window.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }

    /**
     * Poll selection to see whether it's changed.
     *
     * @param {object} nativeEvent
     * @return {?SyntheticEvent}
     */
    function constructSelectEvent(nativeEvent, nativeEventTarget) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {
        return null;
      }

      // Only fire when selection has actually changed.
      var currentSelection = getSelection(activeElement$1);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;

        var syntheticEvent = SyntheticEvent_1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

        syntheticEvent.type = 'select';
        syntheticEvent.target = activeElement$1;

        EventPropagators_1.accumulateTwoPhaseDispatches(syntheticEvent);

        return syntheticEvent;
      }

      return null;
    }

    /**
     * This plugin creates an `onSelect` event that normalizes select events
     * across form elements.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - contentEditable
     *
     * This differs from native browser implementations in the following ways:
     * - Fires on contentEditable fields as well as inputs.
     * - Fires for collapsed selection.
     * - Fires after user input.
     */
    var SelectEventPlugin = {
      eventTypes: eventTypes$3,

      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE$2 ? nativeEventTarget : nativeEventTarget.ownerDocument;
        if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
          return null;
        }

        var targetNode = targetInst ? ReactDOMComponentTree_1.getNodeFromInstance(targetInst) : window;

        switch (topLevelType) {
          // Track the input node that has focus.
          case 'topFocus':
            if (isTextInputElement_1(targetNode) || targetNode.contentEditable === 'true') {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case 'topBlur':
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          // Don't fire the event while the user is dragging. This matches the
          // semantics of the native select event.
          case 'topMouseDown':
            mouseDown = true;
            break;
          case 'topContextMenu':
          case 'topMouseUp':
            mouseDown = false;
            return constructSelectEvent(nativeEvent, nativeEventTarget);
          // Chrome and IE fire non-standard event when selection is changed (and
          // sometimes when it hasn't). IE's event fires out of order with respect
          // to key and input events on deletion, so we discard it.
          //
          // Firefox doesn't support selectionchange, so check selection status
          // after each key entry. The selection changes after keydown and before
          // keyup, but we check on keydown as well in the case of holding down a
          // key, when multiple keydown events are fired but only one keyup is.
          // This is also our approach for IE handling, for the reason above.
          case 'topSelectionChange':
            if (skipSelectionChangeEvent) {
              break;
            }
          // falls through
          case 'topKeyDown':
          case 'topKeyUp':
            return constructSelectEvent(nativeEvent, nativeEventTarget);
        }

        return null;
      }
    };

    var SelectEventPlugin_1 = SelectEventPlugin;

    /**
     * @interface Event
     * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
     */
    var AnimationEventInterface = {
      animationName: null,
      elapsedTime: null,
      pseudoElement: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticEvent}
     */
    function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticEvent_1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

    var SyntheticAnimationEvent_1 = SyntheticAnimationEvent;

    /**
     * @interface Event
     * @see http://www.w3.org/TR/clipboard-apis/
     */
    var ClipboardEventInterface = {
      clipboardData: function (event) {
        return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
      }
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticEvent_1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

    var SyntheticClipboardEvent_1 = SyntheticClipboardEvent;

    /**
     * @interface FocusEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var FocusEventInterface = {
      relatedTarget: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticUIEvent_1.augmentClass(SyntheticFocusEvent, FocusEventInterface);

    var SyntheticFocusEvent_1 = SyntheticFocusEvent;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule getEventCharCode
     */

    /**
     * `charCode` represents the actual "character code" and is safe to use with
     * `String.fromCharCode`. As such, only keys that correspond to printable
     * characters produce a valid `charCode`, the only exception to this is Enter.
     * The Tab-key is considered non-printable and does not have a `charCode`,
     * presumably because it does not produce a tab-character in browsers.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {number} Normalized `charCode` property.
     */

    function getEventCharCode(nativeEvent) {
      var charCode;
      var keyCode = nativeEvent.keyCode;

      if ('charCode' in nativeEvent) {
        charCode = nativeEvent.charCode;

        // FF does not set `charCode` for the Enter-key, check against `keyCode`.
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      }

      // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }

      return 0;
    }

    var getEventCharCode_1 = getEventCharCode;

    /**
     * Normalization of deprecated HTML5 `key` values
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */
    var normalizeKey = {
      Esc: 'Escape',
      Spacebar: ' ',
      Left: 'ArrowLeft',
      Up: 'ArrowUp',
      Right: 'ArrowRight',
      Down: 'ArrowDown',
      Del: 'Delete',
      Win: 'OS',
      Menu: 'ContextMenu',
      Apps: 'ContextMenu',
      Scroll: 'ScrollLock',
      MozPrintableKey: 'Unidentified'
    };

    /**
     * Translation from legacy `keyCode` to HTML5 `key`
     * Only special keys supported, all others depend on keyboard layout or browser
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */
    var translateToKey = {
      8: 'Backspace',
      9: 'Tab',
      12: 'Clear',
      13: 'Enter',
      16: 'Shift',
      17: 'Control',
      18: 'Alt',
      19: 'Pause',
      20: 'CapsLock',
      27: 'Escape',
      32: ' ',
      33: 'PageUp',
      34: 'PageDown',
      35: 'End',
      36: 'Home',
      37: 'ArrowLeft',
      38: 'ArrowUp',
      39: 'ArrowRight',
      40: 'ArrowDown',
      45: 'Insert',
      46: 'Delete',
      112: 'F1',
      113: 'F2',
      114: 'F3',
      115: 'F4',
      116: 'F5',
      117: 'F6',
      118: 'F7',
      119: 'F8',
      120: 'F9',
      121: 'F10',
      122: 'F11',
      123: 'F12',
      144: 'NumLock',
      145: 'ScrollLock',
      224: 'Meta'
    };

    /**
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `key` property.
     */
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.

        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== 'Unidentified') {
          return key;
        }
      }

      // Browser does not implement `key`, polyfill as much of it as we can.
      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode_1(nativeEvent);

        // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.
        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }
      return '';
    }

    var getEventKey_1 = getEventKey;

    /**
     * @interface KeyboardEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var KeyboardEventInterface = {
      key: getEventKey_1,
      location: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      repeat: null,
      locale: null,
      getModifierState: getEventModifierState_1,
      // Legacy Interface
      charCode: function (event) {
        // `charCode` is the result of a KeyPress event and represents the value of
        // the actual printable character.

        // KeyPress is deprecated, but its replacement is not yet final and not
        // implemented in any major browser. Only KeyPress has charCode.
        if (event.type === 'keypress') {
          return getEventCharCode_1(event);
        }
        return 0;
      },
      keyCode: function (event) {
        // `keyCode` is the result of a KeyDown/Up event and represents the value of
        // physical keyboard key.

        // The actual meaning of the value depends on the users' keyboard layout
        // which cannot be detected. Assuming that it is a US keyboard layout
        // provides a surprisingly accurate mapping for US and European users.
        // Due to this, it is left to the user to implement at this time.
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      },
      which: function (event) {
        // `which` is an alias for either `keyCode` or `charCode` depending on the
        // type of the event.
        if (event.type === 'keypress') {
          return getEventCharCode_1(event);
        }
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      }
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticUIEvent_1.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

    var SyntheticKeyboardEvent_1 = SyntheticKeyboardEvent;

    /**
     * @interface DragEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var DragEventInterface = {
      dataTransfer: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticMouseEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticMouseEvent_1.augmentClass(SyntheticDragEvent, DragEventInterface);

    var SyntheticDragEvent_1 = SyntheticDragEvent;

    /**
     * @interface TouchEvent
     * @see http://www.w3.org/TR/touch-events/
     */
    var TouchEventInterface = {
      touches: null,
      targetTouches: null,
      changedTouches: null,
      altKey: null,
      metaKey: null,
      ctrlKey: null,
      shiftKey: null,
      getModifierState: getEventModifierState_1
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticUIEvent_1.augmentClass(SyntheticTouchEvent, TouchEventInterface);

    var SyntheticTouchEvent_1 = SyntheticTouchEvent;

    /**
     * @interface Event
     * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
     */
    var TransitionEventInterface = {
      propertyName: null,
      elapsedTime: null,
      pseudoElement: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticEvent}
     */
    function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticEvent_1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

    var SyntheticTransitionEvent_1 = SyntheticTransitionEvent;

    /**
     * @interface WheelEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var WheelEventInterface = {
      deltaX: function (event) {
        return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
        'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
      },
      deltaY: function (event) {
        return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
        'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
        'wheelDelta' in event ? -event.wheelDelta : 0;
      },
      deltaZ: null,

      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticMouseEvent}
     */
    function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      return SyntheticMouseEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }

    SyntheticMouseEvent_1.augmentClass(SyntheticWheelEvent, WheelEventInterface);

    var SyntheticWheelEvent_1 = SyntheticWheelEvent;

    /**
     * Turns
     * ['abort', ...]
     * into
     * eventTypes = {
     *   'abort': {
     *     phasedRegistrationNames: {
     *       bubbled: 'onAbort',
     *       captured: 'onAbortCapture',
     *     },
     *     dependencies: ['topAbort'],
     *   },
     *   ...
     * };
     * topLevelEventsToDispatchConfig = {
     *   'topAbort': { sameConfig }
     * };
     */
    var eventTypes$4 = {};
    var topLevelEventsToDispatchConfig = {};
    ['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'toggle', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
      var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
      var onEvent = 'on' + capitalizedEvent;
      var topEvent = 'top' + capitalizedEvent;

      var type = {
        phasedRegistrationNames: {
          bubbled: onEvent,
          captured: onEvent + 'Capture'
        },
        dependencies: [topEvent]
      };
      eventTypes$4[event] = type;
      topLevelEventsToDispatchConfig[topEvent] = type;
    });

    var SimpleEventPlugin = {
      eventTypes: eventTypes$4,

      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
        if (!dispatchConfig) {
          return null;
        }
        var EventConstructor;
        switch (topLevelType) {
          case 'topAbort':
          case 'topCancel':
          case 'topCanPlay':
          case 'topCanPlayThrough':
          case 'topClose':
          case 'topDurationChange':
          case 'topEmptied':
          case 'topEncrypted':
          case 'topEnded':
          case 'topError':
          case 'topInput':
          case 'topInvalid':
          case 'topLoad':
          case 'topLoadedData':
          case 'topLoadedMetadata':
          case 'topLoadStart':
          case 'topPause':
          case 'topPlay':
          case 'topPlaying':
          case 'topProgress':
          case 'topRateChange':
          case 'topReset':
          case 'topSeeked':
          case 'topSeeking':
          case 'topStalled':
          case 'topSubmit':
          case 'topSuspend':
          case 'topTimeUpdate':
          case 'topToggle':
          case 'topVolumeChange':
          case 'topWaiting':
            // HTML Events
            // @see http://www.w3.org/TR/html5/index.html#events-0
            EventConstructor = SyntheticEvent_1;
            break;
          case 'topKeyPress':
            // Firefox creates a keypress event for function keys too. This removes
            // the unwanted keypress events. Enter is however both printable and
            // non-printable. One would expect Tab to be as well (but it isn't).
            if (getEventCharCode_1(nativeEvent) === 0) {
              return null;
            }
          /* falls through */
          case 'topKeyDown':
          case 'topKeyUp':
            EventConstructor = SyntheticKeyboardEvent_1;
            break;
          case 'topBlur':
          case 'topFocus':
            EventConstructor = SyntheticFocusEvent_1;
            break;
          case 'topClick':
            // Firefox creates a click event on right mouse clicks. This removes the
            // unwanted click events.
            if (nativeEvent.button === 2) {
              return null;
            }
          /* falls through */
          case 'topDoubleClick':
          case 'topMouseDown':
          case 'topMouseMove':
          case 'topMouseUp':
          // TODO: Disabled elements should not respond to mouse events
          /* falls through */
          case 'topMouseOut':
          case 'topMouseOver':
          case 'topContextMenu':
            EventConstructor = SyntheticMouseEvent_1;
            break;
          case 'topDrag':
          case 'topDragEnd':
          case 'topDragEnter':
          case 'topDragExit':
          case 'topDragLeave':
          case 'topDragOver':
          case 'topDragStart':
          case 'topDrop':
            EventConstructor = SyntheticDragEvent_1;
            break;
          case 'topTouchCancel':
          case 'topTouchEnd':
          case 'topTouchMove':
          case 'topTouchStart':
            EventConstructor = SyntheticTouchEvent_1;
            break;
          case 'topAnimationEnd':
          case 'topAnimationIteration':
          case 'topAnimationStart':
            EventConstructor = SyntheticAnimationEvent_1;
            break;
          case 'topTransitionEnd':
            EventConstructor = SyntheticTransitionEvent_1;
            break;
          case 'topScroll':
            EventConstructor = SyntheticUIEvent_1;
            break;
          case 'topWheel':
            EventConstructor = SyntheticWheelEvent_1;
            break;
          case 'topCopy':
          case 'topCut':
          case 'topPaste':
            EventConstructor = SyntheticClipboardEvent_1;
            break;
        }
        !EventConstructor ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : void 0;
        var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        EventPropagators_1.accumulateTwoPhaseDispatches(event);
        return event;
      }
    };

    var SimpleEventPlugin_1 = SimpleEventPlugin;

    ReactDOMEventListener_1.setHandleTopLevel(ReactBrowserEventEmitter_1.handleTopLevel);

    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */
    EventPluginHub_1.injection.injectEventPluginOrder(DOMEventPluginOrder_1);
    EventPluginUtils_1.injection.injectComponentTree(ReactDOMComponentTree_1);

    /**
     * Some important event plugins included by default (without having to require
     * them).
     */
    EventPluginHub_1.injection.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin_1,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin_1,
      ChangeEventPlugin: ChangeEventPlugin_1,
      SelectEventPlugin: SelectEventPlugin_1,
      BeforeInputEventPlugin: BeforeInputEventPlugin_1
    });

    var MUST_USE_PROPERTY = DOMProperty_1.injection.MUST_USE_PROPERTY;
    var HAS_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_BOOLEAN_VALUE;
    var HAS_NUMERIC_VALUE = DOMProperty_1.injection.HAS_NUMERIC_VALUE;
    var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty_1.injection.HAS_POSITIVE_NUMERIC_VALUE;
    var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
    var HAS_STRING_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_STRING_BOOLEAN_VALUE;

    var HTMLDOMPropertyConfig = {
      // When adding attributes to this list, be sure to also add them to
      // the `possibleStandardNames` module to ensure casing and incorrect
      // name warnings.
      Properties: {
        allowFullScreen: HAS_BOOLEAN_VALUE,
        // IE only true/false iFrame attribute
        // https://msdn.microsoft.com/en-us/library/ms533072(v=vs.85).aspx
        allowTransparency: HAS_STRING_BOOLEAN_VALUE,
        // specifies target context for links with `preload` type
        async: HAS_BOOLEAN_VALUE,
        // autoFocus is polyfilled/normalized by AutoFocusUtils
        // autoFocus: HAS_BOOLEAN_VALUE,
        autoPlay: HAS_BOOLEAN_VALUE,
        capture: HAS_BOOLEAN_VALUE,
        checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        cols: HAS_POSITIVE_NUMERIC_VALUE,
        contentEditable: HAS_STRING_BOOLEAN_VALUE,
        controls: HAS_BOOLEAN_VALUE,
        'default': HAS_BOOLEAN_VALUE,
        defer: HAS_BOOLEAN_VALUE,
        disabled: HAS_BOOLEAN_VALUE,
        download: HAS_OVERLOADED_BOOLEAN_VALUE,
        draggable: HAS_STRING_BOOLEAN_VALUE,
        formNoValidate: HAS_BOOLEAN_VALUE,
        hidden: HAS_BOOLEAN_VALUE,
        loop: HAS_BOOLEAN_VALUE,
        // Caution; `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`.
        multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        noValidate: HAS_BOOLEAN_VALUE,
        open: HAS_BOOLEAN_VALUE,
        playsInline: HAS_BOOLEAN_VALUE,
        readOnly: HAS_BOOLEAN_VALUE,
        required: HAS_BOOLEAN_VALUE,
        reversed: HAS_BOOLEAN_VALUE,
        rows: HAS_POSITIVE_NUMERIC_VALUE,
        rowSpan: HAS_NUMERIC_VALUE,
        scoped: HAS_BOOLEAN_VALUE,
        seamless: HAS_BOOLEAN_VALUE,
        selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        size: HAS_POSITIVE_NUMERIC_VALUE,
        start: HAS_NUMERIC_VALUE,
        // support for projecting regular DOM Elements via V1 named slots ( shadow dom )
        span: HAS_POSITIVE_NUMERIC_VALUE,
        spellCheck: HAS_STRING_BOOLEAN_VALUE,
        // Style must be explicitly set in the attribute list. React components
        // expect a style object
        style: 0,
        // itemScope is for for Microdata support.
        // See http://schema.org/docs/gs.html
        itemScope: HAS_BOOLEAN_VALUE,
        // These attributes must stay in the white-list because they have
        // different attribute names (see DOMAttributeNames below)
        acceptCharset: 0,
        className: 0,
        htmlFor: 0,
        httpEquiv: 0,
        // Attributes with mutation methods must be specified in the whitelist
        // Set the string boolean flag to allow the behavior
        value: HAS_STRING_BOOLEAN_VALUE
      },
      DOMAttributeNames: {
        acceptCharset: 'accept-charset',
        className: 'class',
        htmlFor: 'for',
        httpEquiv: 'http-equiv'
      },
      DOMMutationMethods: {
        value: function (node, value) {
          if (value == null) {
            return node.removeAttribute('value');
          }

          // Number inputs get special treatment due to some edge cases in
          // Chrome. Let everything else assign the value attribute as normal.
          // https://github.com/facebook/react/issues/7253#issuecomment-236074326
          if (node.type !== 'number' || node.hasAttribute('value') === false) {
            node.setAttribute('value', '' + value);
          } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
            // Don't assign an attribute if validation reports bad
            // input. Chrome will clear the value. Additionally, don't
            // operate on inputs that have focus, otherwise Chrome might
            // strip off trailing decimal places and cause the user's
            // cursor position to jump to the beginning of the input.
            //
            // In ReactDOMInput, we have an onBlur event that will trigger
            // this function again when focus is lost.
            node.setAttribute('value', '' + value);
          }
        }
      }
    };

    var HTMLDOMPropertyConfig_1 = HTMLDOMPropertyConfig;

    var HAS_STRING_BOOLEAN_VALUE$1 = DOMProperty_1.injection.HAS_STRING_BOOLEAN_VALUE;

    var NS = {
      xlink: 'http://www.w3.org/1999/xlink',
      xml: 'http://www.w3.org/XML/1998/namespace'
    };

    /**
     * This is a list of all SVG attributes that need special casing,
     * namespacing, or boolean value assignment.
     *
     * When adding attributes to this list, be sure to also add them to
     * the `possibleStandardNames` module to ensure casing and incorrect
     * name warnings.
     *
     * SVG Attributes List:
     * https://www.w3.org/TR/SVG/attindex.html
     * SMIL Spec:
     * https://www.w3.org/TR/smil
     */
    var ATTRS = ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'x-height', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xmlns:xlink', 'xml:lang', 'xml:space'];

    var SVGDOMPropertyConfig = {
      Properties: {
        autoReverse: HAS_STRING_BOOLEAN_VALUE$1,
        externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,
        preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1
      },
      DOMAttributeNames: {
        autoReverse: 'autoReverse',
        externalResourcesRequired: 'externalResourcesRequired',
        preserveAlpha: 'preserveAlpha'
      },
      DOMAttributeNamespaces: {
        xlinkActuate: NS.xlink,
        xlinkArcrole: NS.xlink,
        xlinkHref: NS.xlink,
        xlinkRole: NS.xlink,
        xlinkShow: NS.xlink,
        xlinkTitle: NS.xlink,
        xlinkType: NS.xlink,
        xmlBase: NS.xml,
        xmlLang: NS.xml,
        xmlSpace: NS.xml
      }
    };

    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function (token) {
      return token[1].toUpperCase();
    };

    ATTRS.forEach(function (original) {
      var reactName = original.replace(CAMELIZE, capitalize);

      SVGDOMPropertyConfig.Properties[reactName] = 0;
      SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original;
    });

    var SVGDOMPropertyConfig_1 = SVGDOMPropertyConfig;

    DOMProperty_1.injection.injectDOMPropertyConfig(HTMLDOMPropertyConfig_1);
    DOMProperty_1.injection.injectDOMPropertyConfig(SVGDOMPropertyConfig_1);

    var injectInternals = ReactFiberDevToolsHook.injectInternals;

    var ELEMENT_NODE = HTMLNodeType_1.ELEMENT_NODE;
    var TEXT_NODE = HTMLNodeType_1.TEXT_NODE;
    var COMMENT_NODE = HTMLNodeType_1.COMMENT_NODE;
    var DOCUMENT_NODE = HTMLNodeType_1.DOCUMENT_NODE;
    var DOCUMENT_FRAGMENT_NODE = HTMLNodeType_1.DOCUMENT_FRAGMENT_NODE;

    var ROOT_ATTRIBUTE_NAME = DOMProperty_1.ROOT_ATTRIBUTE_NAME;

    var getChildNamespace = DOMNamespaces.getChildNamespace;
    var createElement = ReactDOMFiberComponent_1.createElement;
    var createTextNode = ReactDOMFiberComponent_1.createTextNode;
    var setInitialProperties = ReactDOMFiberComponent_1.setInitialProperties;
    var diffProperties = ReactDOMFiberComponent_1.diffProperties;
    var updateProperties = ReactDOMFiberComponent_1.updateProperties;
    var diffHydratedProperties = ReactDOMFiberComponent_1.diffHydratedProperties;
    var diffHydratedText = ReactDOMFiberComponent_1.diffHydratedText;
    var warnForDeletedHydratableElement = ReactDOMFiberComponent_1.warnForDeletedHydratableElement;
    var warnForDeletedHydratableText = ReactDOMFiberComponent_1.warnForDeletedHydratableText;
    var warnForInsertedHydratedElement = ReactDOMFiberComponent_1.warnForInsertedHydratedElement;
    var warnForInsertedHydratedText = ReactDOMFiberComponent_1.warnForInsertedHydratedText;
    var precacheFiberNode = ReactDOMComponentTree_1.precacheFiberNode;
    var updateFiberProps = ReactDOMComponentTree_1.updateFiberProps;

    {
      var lowPriorityWarning = lowPriorityWarning_1;
      var warning = require$$0;
      var validateDOMNesting = validateDOMNesting_1;
      var updatedAncestorInfo = validateDOMNesting.updatedAncestorInfo;

      if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
        warning(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
      }
    }

    ReactControlledComponent_1.injection.injectFiberControlledHostComponent(ReactDOMFiberComponent_1);
    findDOMNode_1._injectFiber(function (fiber) {
      return DOMRenderer.findHostInstance(fiber);
    });

    var eventsEnabled = null;
    var selectionInformation = null;

    /**
     * True if the supplied DOM node is a valid node element.
     *
     * @param {?DOMElement} node The candidate DOM node.
     * @return {boolean} True if the DOM is a valid DOM node.
     * @internal
     */
    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }

    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }

      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }

    function shouldHydrateDueToLegacyHeuristic(container) {
      var rootElement = getReactRootElementInContainer(container);
      return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }

    function shouldAutoFocusHostComponent(type, props) {
      switch (type) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
          return !!props.autoFocus;
      }
      return false;
    }

    var DOMRenderer = ReactFiberReconciler({
      getRootHostContext: function (rootContainerInstance) {
        var type = void 0;
        var namespace = void 0;
        if (rootContainerInstance.nodeType === DOCUMENT_NODE) {
          type = '#document';
          var root = rootContainerInstance.documentElement;
          namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        } else {
          var container = rootContainerInstance.nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
        }
        {
          var validatedTag = type.toLowerCase();
          var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
          return { namespace: namespace, ancestorInfo: _ancestorInfo };
        }
        return namespace;
      },
      getChildHostContext: function (parentHostContext, type) {
        {
          var parentHostContextDev = parentHostContext;
          var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
          return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
        }
        var parentNamespace = parentHostContext;
        return getChildNamespace(parentNamespace, type);
      },
      getPublicInstance: function (instance) {
        return instance;
      },
      prepareForCommit: function () {
        eventsEnabled = ReactBrowserEventEmitter_1.isEnabled();
        selectionInformation = ReactInputSelection_1.getSelectionInformation();
        ReactBrowserEventEmitter_1.setEnabled(false);
      },
      resetAfterCommit: function () {
        ReactInputSelection_1.restoreSelection(selectionInformation);
        selectionInformation = null;
        ReactBrowserEventEmitter_1.setEnabled(eventsEnabled);
        eventsEnabled = null;
      },
      createInstance: function (type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace = void 0;
        {
          // TODO: take namespace into account when validating.
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, null, hostContextDev.ancestorInfo);
          if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
            validateDOMNesting(null, string, null, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      },
      appendInitialChild: function (parentInstance, child) {
        parentInstance.appendChild(child);
      },
      finalizeInitialChildren: function (domElement, type, props, rootContainerInstance) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
      },
      prepareUpdate: function (domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
            validateDOMNesting(null, string, null, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
      },
      commitMount: function (domElement, type, newProps, internalInstanceHandle) {
        domElement.focus();
      },
      commitUpdate: function (domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps);
        // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
      },
      shouldSetTextContent: function (type, props) {
        return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';
      },
      resetTextContent: function (domElement) {
        domElement.textContent = '';
      },
      shouldDeprioritizeSubtree: function (type, props) {
        return !!props.hidden;
      },
      createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, null, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      },
      commitTextUpdate: function (textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      },
      appendChild: function (parentInstance, child) {
        parentInstance.appendChild(child);
      },
      appendChildToContainer: function (container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, container);
        } else {
          container.appendChild(child);
        }
      },
      insertBefore: function (parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      },
      insertInContainerBefore: function (container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      },
      removeChild: function (parentInstance, child) {
        parentInstance.removeChild(child);
      },
      removeChildFromContainer: function (container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      },
      canHydrateInstance: function (instance, type, props) {
        return instance.nodeType === ELEMENT_NODE && type === instance.nodeName.toLowerCase();
      },
      canHydrateTextInstance: function (instance, text) {
        if (text === '') {
          // Empty strings are not parsed by HTML so there won't be a correct match here.
          return false;
        }
        return instance.nodeType === TEXT_NODE;
      },
      getNextHydratableSibling: function (instance) {
        var node = instance.nextSibling;
        // Skip non-hydratable nodes.
        while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
          node = node.nextSibling;
        }
        return node;
      },
      getFirstHydratableChild: function (parentInstance) {
        var next = parentInstance.firstChild;
        // Skip non-hydratable nodes.
        while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
          next = next.nextSibling;
        }
        return next;
      },
      hydrateInstance: function (instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance);
        // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace = void 0;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
      },
      hydrateTextInstance: function (textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
      },
      didNotHydrateInstance: function (parentInstance, instance) {
        if (instance.nodeType === 1) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      },
      didNotFindHydratableInstance: function (parentInstance, type, props) {
        warnForInsertedHydratedElement(parentInstance, type, props);
      },
      didNotFindHydratableTextInstance: function (parentInstance, text) {
        warnForInsertedHydratedText(parentInstance, text);
      },

      scheduleDeferredCallback: ReactDOMFrameScheduling.rIC,

      useSyncScheduling: !ReactDOMFeatureFlags_1.fiberAsyncScheduling
    });

    ReactGenericBatching_1.injection.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates);

    var warnedAboutHydrateAPI = false;

    function renderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

      {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer.current);
          if (hostInstance) {
            warning(hostInstance.parentNode === container, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
          }
        }

        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && ReactDOMComponentTree_1.getInstanceFromNode(rootEl));

        warning(!hasNonRootReactChild || isRootRenderedBySomeReact, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');

        warning(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
      }

      var root = container._reactRootContainer;
      if (!root) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
        // First clear any existing content.
        if (!shouldHydrate) {
          var warned = false;
          var rootSibling = void 0;
          while (rootSibling = container.lastChild) {
            {
              if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                warned = true;
                warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
              }
            }
            container.removeChild(rootSibling);
          }
        }
        {
          if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            lowPriorityWarning(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
          }
        }
        var newRoot = DOMRenderer.createContainer(container);
        root = container._reactRootContainer = newRoot;
        // Initial mount should not be batched.
        DOMRenderer.unbatchedUpdates(function () {
          DOMRenderer.updateContainer(children, newRoot, parentComponent, callback);
        });
      } else {
        DOMRenderer.updateContainer(children, root, parentComponent, callback);
      }
      return DOMRenderer.getPublicRootInstance(root);
    }

    function createPortal(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
      // TODO: pass ReactDOM portal implementation as third argument
      return ReactPortal.createPortal(children, container, null, key);
    }

    var ReactDOMFiber = {
      createPortal: createPortal,

      hydrate: function (element, container, callback) {
        // TODO: throw or warn if we couldn't hydrate?
        return renderSubtreeIntoContainer(null, element, container, true, callback);
      },
      render: function (element, container, callback) {
        return renderSubtreeIntoContainer(null, element, container, false, callback);
      },
      unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
        !(parentComponent != null && ReactInstanceMap_1.has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
        return renderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      },
      unmountComponentAtNode: function (container) {
        !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !ReactDOMComponentTree_1.getInstanceFromNode(rootEl);
            warning(!renderedByDifferentReact, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
          }

          // Unmount should not be batched.
          DOMRenderer.unbatchedUpdates(function () {
            renderSubtreeIntoContainer(null, null, container, false, function () {
              container._reactRootContainer = null;
            });
          });
          // If you call unmountComponentAtNode twice in quick succession, you'll
          // get `true` twice. That's probably fine?
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && ReactDOMComponentTree_1.getInstanceFromNode(_rootEl));

            // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

            warning(!hasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
          }

          return false;
        }
      },

      findDOMNode: findDOMNode_1,

      // Temporary alias since we already shipped React 16 RC with it.
      // TODO: remove in React 17.
      unstable_createPortal: createPortal,

      unstable_batchedUpdates: ReactGenericBatching_1.batchedUpdates,

      unstable_deferredUpdates: DOMRenderer.deferredUpdates,

      flushSync: DOMRenderer.flushSync,

      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        // For TapEventPlugin which is popular in open source
        EventPluginHub: EventPluginHub_1,
        // Used by test-utils
        EventPluginRegistry: EventPluginRegistry_1,
        EventPropagators: EventPropagators_1,
        ReactControlledComponent: ReactControlledComponent_1,
        ReactDOMComponentTree: ReactDOMComponentTree_1,
        ReactDOMEventListener: ReactDOMEventListener_1
      }
    };

    var foundDevTools = injectInternals({
      findFiberByHostInstance: ReactDOMComponentTree_1.getClosestInstanceFromNode,
      findHostInstanceByFiber: DOMRenderer.findHostInstance,
      // This is an enum because we may add more (e.g. profiler build)
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: 'react-dom'
    });

    {
      if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          var protocol = window.location.protocol;
          // Don't warn in exotic cases like chrome-extension://.
          if (/^(https?|file):$/.test(protocol)) {
            console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
          }
        }
      }
    }

    var ReactDOMFiberEntry = ReactDOMFiber;

    module.exports = ReactDOMFiberEntry;
  })();
}
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/hyphenateStyleName.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

'use strict';

var hyphenate = require('37');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/hyphenate.js", function(__filename, __dirname, require, module, exports) {
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/camelizeStyleName.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

'use strict';

var camelize = require('39');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/camelize.js", function(__filename, __dirname, require, module, exports) {
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/performanceNow.js", function(__filename, __dirname, require, module, exports) {
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var performance = require('40');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/fbjs/lib/performance.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('42');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/prop-types/index.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if ('development' !== 'production') {
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;

  var isValidElement = function (object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('2763')(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('2764')();
}
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/prop-types/factoryWithTypeCheckers.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var emptyFunction = require('2795');
var invariant = require('2796');
var warning = require('2797');
var assign = require('2798');

var ReactPropTypesSecret = require('2799');
var checkPropTypes = require('2800');

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if ('development' !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
        } else if ('development' !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] &&
          // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      'development' !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      'development' !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
});
__sbPundle.registerModule("$app/node_modules/react-dom/node_modules/prop-types/factoryWithThrowingShims.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var emptyFunction = require('2792');
var invariant = require('2793');
var ReactPropTypesSecret = require('2794');

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/createElement.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gloss = require('2540');

exports.default = _gloss.createElement;
//# sourceMappingURL=createElement.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/gloss.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createElement = exports.decorator = undefined;

var _gloss = require('2761');

var _gloss2 = _interopRequireDefault(_gloss);

var _baseStyles = require('2762');

var _baseStyles2 = _interopRequireDefault(_baseStyles);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const Gloss = (0, _gloss2.default)({
  baseStyles: _baseStyles2.default,
  glossProp: 'css',
  themeProp: 'theme',
  tagName: 'tagName',
  isColor: color => color && !!color.rgb,
  toColor: obj => {
    const { model, color, valpha } = obj;
    const hasAlpha = typeof valpha === 'number' && valpha !== 1;
    if (model === 'rgb') {
      const inner = `${color[0]}, ${color[1]}, ${color[2]}`;
      if (hasAlpha) {
        return `rgba(${inner}, ${valpha})`;
      }
      return `rgb(${inner})`;
    }
    if (model === 'hsl') {
      const inner = `${color[0]}, ${Math.round(color[1], 4)}%, ${Math.round(color[2], 4)}%`;
      if (hasAlpha) {
        return `hsla(${inner}, ${valpha})`;
      }
      return `hsl(${inner})`;
    }
    return obj.toString();
  }
});

window.Gloss = Gloss;

const { decorator, createElement } = Gloss;
exports.decorator = decorator;
exports.createElement = createElement;
//# sourceMappingURL=gloss.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Gloss = exports.Helpers = exports.ThemeProvide = exports.Theme = undefined;
exports.default = glossFactory;

var _fancyElement = require('2787');

var _fancyElement2 = _interopRequireDefault(_fancyElement);

var _css = require('2788');

var Helpers_ = _interopRequireWildcard(_css);

var _stylesheet = require('2789');

var _stylesheet2 = _interopRequireDefault(_stylesheet);

var _themeProvide = require('2790');

var _themeProvide2 = _interopRequireDefault(_themeProvide);

var _theme = require('2791');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// exports
const Theme = exports.Theme = _theme2.default;
const ThemeProvide = exports.ThemeProvide = _themeProvide2.default;
const Helpers = exports.Helpers = Helpers_;

// type exports


const { hash } = Helpers;

const DEFAULT_OPTS = {
  themeKey: 'theme'
};

let idCounter = 0;
function uid() {
  return idCounter++;
}

let Gloss = exports.Gloss = class Gloss {

  constructor(opts = DEFAULT_OPTS) {
    this.Helpers = Helpers;
    this.attachedStyles = {};

    this.decorator = Child => {
      if (Child.prototype) {
        const { attachStyles, css } = this;

        Child.prototype.glossElement = this.createElement;
        Child.prototype.gloss = this;
        Child.prototype.glossStylesheet = this.stylesheet;

        const hasTheme = Child.theme && typeof Child.theme === 'function';
        const themeSheet = _stylesheet2.default.createStyleSheet().attach();
        const ViewCache = {};
        const id = `${Math.random()}`.replace('.', '');

        if (hasTheme) {
          Child.prototype.glossUpdateTheme = function (props) {
            this.theme = this.theme || themeSheet;
            let activeTheme;
            if (typeof props.theme === 'object') {
              activeTheme = { base: props.theme };
            } else {
              activeTheme = this.context.uiThemes && this.context.uiThemes[props.theme || this.context.uiActiveThemeName];
            }
            if (activeTheme) {
              const childTheme = Child.theme(props, activeTheme, this);

              // cache
              const oldKey = this.themeKey;
              this.themeKey = `${id}${hash(childTheme)}`;
              if (ViewCache[this.themeKey]) {
                ViewCache[this.themeKey]++;
                return;
              }
              if (oldKey) {
                ViewCache[this.themeKey]--;
                if (ViewCache[this.themeKey] === 0) {
                  for (const key of this.themeActiveRules) {
                    this.theme.deleteRule(key);
                  }
                }
              }
              ViewCache[this.themeKey] = 1;

              const rules = {};
              for (const name of Object.keys(childTheme)) {
                const style = css(childTheme[name]);
                const selector = `${name}--${this.themeKey}--theme`;
                rules[selector] = style;
                this.theme.deleteRule(selector);
              }
              this.themeActiveRules = Object.keys(rules);
              this.theme.addRules(rules);
            }
          };

          // updateTheme on willUpdate
          const ogcomponentWillUpdate = Child.prototype.componentWillUpdate;
          Child.prototype.componentWillUpdate = function (...args) {
            this.glossUpdateTheme(args[0]);
            if (ogcomponentWillUpdate) {
              return ogcomponentWillUpdate.call(this, ...args);
            }
          };

          const ogcomponentWillUnmount = Child.prototype.componentWillUnmount;
          Child.prototype.componentWillUnmount = function (...args) {
            // remove cache
            ViewCache[this.themeKey]--;
            if (ViewCache[this.themeKey] === 0 && this.themeActiveRules) {
              for (const key of this.themeActiveRules) {
                this.theme.deleteRule(key);
              }
            }
            if (ogcomponentWillUnmount) {
              return ogcomponentWillUnmount.call(this, ...args);
            }
          };
        }

        // ONLY IN DEV -- ALWAYS UPDATE STYLESHEET SO HMR STYLE CHANGES WORK
        if ('development' !== 'production') {
          let lastUpdatedStyles = null;
          const ogrender = Child.prototype.render;
          Child.prototype.render = function (...args) {
            if (!lastUpdatedStyles || window.lastHotReload && lastUpdatedStyles > window.lastHotReload) {
              attachStyles(Child.glossUID, Child.style, true);
              lastUpdatedStyles = Date.now();
            }
            if (ogrender) {
              return ogrender.call(this, ...args);
            }
          };
        }

        // on first mount, attach styles
        const ogComponentWillMount = Child.prototype.componentWillMount;
        Child.prototype.componentWillMount = function (...args) {
          if (!Child.glossUID) {
            Child.glossUID = uid();
          }
          if (hasTheme) {
            this.glossUpdateTheme(this.props);
          }
          if (ogComponentWillMount) {
            return ogComponentWillMount.call(this, ...args);
          }
        };
      }
    };

    this.attachStyles = (childKey, styles, force = false) => {
      if (!styles) {
        return null;
      }
      for (const key of Object.keys(styles)) {
        const style = styles[key];
        const stylesKey = childKey ? `${key}--${childKey}` : key;
        if (typeof style === 'function') {
          this.stylesheet[stylesKey] = style;
          continue;
        }
        if (force) {
          this.stylesheet.deleteRule(stylesKey);
        }
        if (!this.stylesheet.getRule(stylesKey)) {
          const niceStyle = this.css(style);
          this.stylesheet.addRule(stylesKey, niceStyle);
        }
      }
    };

    this.options = opts;
    this.css = (0, Helpers_.default)(opts);
    this.helpers = this.css.helpers;
    this.stylesheet = _stylesheet2.default.createStyleSheet();
    this.stylesheet.attach();
    if (opts.baseStyles) {
      this.baseStyles = true;
      this.attachStyles(null, opts.baseStyles);
    }
    this.createElement = (0, _fancyElement2.default)(this, this.stylesheet);
    this.decorator.createElement = this.createElement;
  }

  // runs niceStyleSheet on non-function styles
};
function glossFactory(options) {
  return new Gloss(options);
}
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/fancyElement.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = fancyElementFactory;

var _react = require('2834');

var React = _interopRequireWildcard(_react);

var _deepExtend = require('2835');

var _deepExtend2 = _interopRequireDefault(_deepExtend);

var _htmlTags = require('2836');

var _htmlTags2 = _interopRequireDefault(_htmlTags);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

const IS_PROD = 'development' === 'production';
const $ = '$';
const ogCreateElement = React.createElement.bind(React);
const VALID_TAGS = _htmlTags2.default.reduce((acc, cur) => _extends({}, acc, { [cur]: true }), {});

const arrayOfObjectsToObject = arr => {
  let res = {};
  for (let i = 0; i < arr.length; i++) {
    if (!arr[i]) {
      continue;
    }
    (0, _deepExtend2.default)(res, arr[i]);
  }
  return res;
};

// tags that are dangerous to use
const TAG_NAME_MAP = {
  title: 'div',
  body: 'div',
  meta: 'div',
  head: 'div'

  // factory that returns fancyElement helper
};function fancyElementFactory(Gloss, styles) {
  const { baseStyles, options, css } = Gloss;

  // Fast object reduce
  function objToCamel(style) {
    let newStyle = {};
    for (const name of Object.keys(style)) {
      if (name.indexOf('-')) {
        newStyle[Gloss.helpers.snakeToCamel(name)] = style[name];
      } else {
        newStyle[name] = style[name];
      }
    }
    return newStyle;
  }

  return function fancyElement(type_, props, ...children) {
    let type = type_;
    if (!type) {
      throw new Error(`Didn't get a valid type: ${type}, props: ${JSON.stringify(props)}, children: ${children ? children.toString() : children}`);
    }

    const propNames = props ? Object.keys(props) : null;
    const isTag = typeof type === 'string';
    const name = !isTag ? `${type.name}` : type;
    const finalProps = {};
    const finalStyles = [];
    const { theme } = this;
    const { glossUID } = this.constructor;

    const addStyle = (obj, key, val, checkTheme) => {
      const style = obj[key] || obj.getRule ? obj.getRule(key) : obj[key];
      if (!style) {
        return null;
      }
      // dynamic
      if (typeof style === 'function') {
        const res = css(style(val));
        return res;
      } else {
        finalStyles.push(style);
      }
      if (checkTheme && theme) {
        const themeKey = `${key.replace(`--${glossUID}`, `--${this.themeKey}`)}--theme`;
        const themeStyle = theme.getRule(themeKey);
        if (themeStyle) {
          finalStyles.push(themeStyle);
        }
      }
    };

    if (styles && name) {
      addStyle(styles, `${name}--${glossUID}`, null, true);
    }

    let style;

    if (propNames) {
      for (const prop of propNames) {
        const val = props && props[prop];
        // ignore most falsy values (except 0)
        if (val === false || val === null || val === undefined) {
          continue;
        }
        // style={}
        if (prop === 'style') {
          style = _extends({}, style, val);
          continue;
        }
        // css={}
        if (options.glossProp && prop === options.glossProp) {
          if (val && Object.keys(val).length) {
            // css={}
            const extraStyle = css(val, { snakeCase: false });
            style = _extends({}, style, extraStyle);
          }
          continue;
        }
        // tagName={}
        if (options.tagName && prop === options.tagName && isTag && typeof val === 'string') {
          type = val;
          continue;
        }
        // ensure before tagName={} so it passes tagName down
        if (prop[0] !== $) {
          // pass props down if not glossProp style prop
          finalProps[prop] = val;
          continue;
        }
        // $$style={}
        if (baseStyles) {
          const isParentStyle = prop[1] === $;
          if (isParentStyle) {
            const inlineStyle = addStyle(styles, prop.slice(2), val, false);
            if (inlineStyle) {
              style = _extends({}, style, inlineStyle);
            }
            continue;
          }
        }
        // $style={}
        if (styles) {
          const inlineStyle = addStyle(styles, `${prop.slice(1)}--${glossUID}`, val, true);
          if (inlineStyle) {
            style = _extends({}, style, objToCamel(inlineStyle));
          }
        }
      }
    }

    if (style) {
      finalProps.style = style;
    }

    // styles => props
    if (finalStyles.length) {
      if (isTag) {
        const css = (...styles) => styles.map(x => x.className || x.selectorText.slice(1)).join(' ');

        // tags get className
        if (IS_PROD) {
          finalProps.className = css(...finalStyles);
        } else {
          try {
            finalProps.className = css(...finalStyles);
          } catch (e) {
            console.error('Error applying style to', name, finalStyles, this);
          }
        }

        // keep original finalStyles
        if (props && props.className) {
          if (typeof props.className === 'string') {
            finalProps.className += ` ${props.className}`;
          }
        }
      } else {
        // children get a style prop
        if (props) {
          finalProps.style = objToCamel(arrayOfObjectsToObject([...finalStyles.map(style => style && style.style), finalProps.style]));
        }
      }
    }

    if (isTag) {
      if (!VALID_TAGS[type]) {
        finalProps['data-tagname'] = type;
        type = 'div';
      }
      type = TAG_NAME_MAP[type] || type;
    }

    return ogCreateElement(type, finalProps, ...children);
  };
}
//# sourceMappingURL=fancyElement.js.map
});
__sbPundle.registerModule("../node_modules/deep-extend/lib/deep-extend.js", function(__filename, __dirname, require, module, exports) {
(function(i0){var Buffer = i0.Buffer;
/*!
 * @description Recursive object extending
 * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>
 * @license MIT
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2015 Viacheslav Lotsmanov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

'use strict';

function isSpecificValue(val) {
  return val instanceof Buffer || val instanceof Date || val instanceof RegExp ? true : false;
}

function cloneSpecificValue(val) {
  if (val instanceof Buffer) {
    var x = new Buffer(val.length);
    val.copy(x);
    return x;
  } else if (val instanceof Date) {
    return new Date(val.getTime());
  } else if (val instanceof RegExp) {
    return new RegExp(val);
  } else {
    throw new Error('Unexpected situation');
  }
}

/**
 * Recursive cloning array.
 */
function deepCloneArray(arr) {
  var clone = [];
  arr.forEach(function (item, index) {
    if (typeof item === 'object' && item !== null) {
      if (Array.isArray(item)) {
        clone[index] = deepCloneArray(item);
      } else if (isSpecificValue(item)) {
        clone[index] = cloneSpecificValue(item);
      } else {
        clone[index] = deepExtend({}, item);
      }
    } else {
      clone[index] = item;
    }
  });
  return clone;
}

/**
 * Extening object that entered in first argument.
 *
 * Returns extended object or false if have no target object or incorrect type.
 *
 * If you wish to clone source object (without modify it), just use empty new
 * object as first argument, like this:
 *   deepExtend({}, yourObj_1, [yourObj_N]);
 */
var deepExtend = module.exports = function () /*obj_1, [obj_2], [obj_N]*/{
  if (arguments.length < 1 || typeof arguments[0] !== 'object') {
    return false;
  }

  if (arguments.length < 2) {
    return arguments[0];
  }

  var target = arguments[0];

  // convert arguments to array and cut off target object
  var args = Array.prototype.slice.call(arguments, 1);

  var val, src, clone;

  args.forEach(function (obj) {
    // skip argument if isn't an object, is null, or is an array
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) {
      return;
    }

    Object.keys(obj).forEach(function (key) {
      src = target[key]; // source value
      val = obj[key]; // new value

      // recursion prevention
      if (val === target) {
        return;

        /**
         * if new value isn't object then just overwrite by new value
         * instead of extending.
         */
      } else if (typeof val !== 'object' || val === null) {
        target[key] = val;
        return;

        // just clone arrays (and recursive clone objects inside)
      } else if (Array.isArray(val)) {
        target[key] = deepCloneArray(val);
        return;

        // custom cloning and overwrite for specific objects
      } else if (isSpecificValue(val)) {
        target[key] = cloneSpecificValue(val);
        return;

        // overwrite by new value if source isn't object or array
      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {
        target[key] = deepExtend({}, val);
        return;

        // source value and new value is objects both, extending...
      } else {
        target[key] = deepExtend(src, val);
        return;
      }
    });
  });

  return target;
};
})(require(1103))
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/buffer/index.js", function(__filename, __dirname, require, module, exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict';

var base64 = require('1091');
var ieee754 = require('1092');
var isArray = require('1093');

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () {
        return 42;
      } };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/base64-js/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
}

function byteLength(b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64);
}

function toByteArray(b64) {
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/ieee754/index.js", function(__filename, __dirname, require, module, exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/isarray/index.js", function(__filename, __dirname, require, module, exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};
});
__sbPundle.registerModule("../node_modules/html-tags/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

module.exports = require('1105');
});
__sbPundle.registerModule("../node_modules/html-tags/html-tags.json", function(__filename, __dirname, require, module, exports) {
module.exports = ["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","math","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","slot","small","source","span","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"]
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/node_modules/@mcro/css/dist/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

// exports


var _helpers = require('2853');

Object.keys(_helpers).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _helpers[key];
    }
  });
});
exports.default = motionStyle;

var _cssNameMap = require('2854');

var COLOR_KEYS = new Set(['color', 'backgroundColor', 'borderColor']);
var TRANSFORM_KEYS_MAP = {
  x: 'translateX',
  y: 'translateY',
  z: 'translateZ',
  dropShadow: 'drop-shadow'
};

var COMMA_JOINED = {
  boxShadow: true,
  transition: true
};

var SHORTHANDS = {
  borderLeftRadius: ['borderTopLeftRadius', 'borderBottomLeftRadius'],
  borderRightRadius: ['borderTopRightRadius', 'borderBottomRightRadius'],
  borderBottomRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius'],
  borderTopRadius: ['borderTopRightRadius', 'borderTopLeftRadius']
};

var FALSE_VALUES = {
  background: 'transparent',
  backgroundColor: 'transparent',
  borderColor: 'transparent'
};

var BORDER_KEY = {
  border: true,
  borderLeft: true,
  borderRight: true,
  borderBottom: true,
  borderTop: true

  // helpers
};var px = function px(x) {
  return (/px$/.test('' + x) ? x : x + 'px'
  );
};

// style transform creator
function motionStyle() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var isColor = function isColor(color) {
    return (0, _helpers.isColorLike)(color, options);
  };
  var toColor = function toColor(color) {
    return (0, _helpers.colorToString)(color, options);
  };

  var OBJECT_TRANSFORM = {
    textShadow: function textShadow(_ref) {
      var x = _ref.x,
          y = _ref.y,
          blur = _ref.blur,
          color = _ref.color;
      return px(x) + ' ' + px(y) + ' ' + px(blur) + ' ' + toColor(color);
    },
    boxShadow: function boxShadow(v) {
      return v.inset || v.x || v.y || v.blur || v.spread || v.color ? (v.inset ? 'inset' : '') + ' ' + px(v.x) + ' ' + px(v.y) + ' ' + px(v.blur) + ' ' + px(v.spread) + ' ' + toColor(v.color) : toColor(v);
    },
    background: function background(v) {
      return isColor(v) ? toColor(v) : toColor(v.color) + ' ' + (v.image || '') + ' ' + ((v.position ? v.position.join(' ') : v.position) || '') + ' ' + (v.repeat || '');
    }
  };

  function processArrayItem(key, val) {
    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    // recurse
    if (isColor(val)) {
      return toColor(val);
    }
    if (Array.isArray(val)) {
      return processArray(key, val, level + 1);
    }
    return typeof val === 'number' ? val + 'px' : val;
  }

  function processArray(key, value) {
    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    if (key === 'background') {
      if (isColor(value)) {
        return toColor(value);
      }
    }
    // solid default option for borders
    if (BORDER_KEY[key] && value.length === 2) {
      value.push('solid');
    }
    return value.map(function (val) {
      return processArrayItem(key, val);
    }).join(level === 0 && COMMA_JOINED[key] ? ', ' : ' ');
  }

  function objectValue(key, value) {
    if (Array.isArray(value)) {
      return processArray(key, value);
    }
    if (OBJECT_TRANSFORM[key]) {
      return OBJECT_TRANSFORM[key](value);
    }
    if (key === 'scale' || key === 'grayscale' || key === 'brightness') {
      return value;
    }
    if (typeof value === 'number') {
      return value + 'px';
    }
    return value;
  }

  var arrayOrObject = function arrayOrObject(arr, obj) {
    return function (val) {
      return Array.isArray(val) ? arr(val) : obj(val);
    };
  };

  var GRADIENT = {
    linearGradient: function linearGradient(key, object) {
      return 'linear-gradient(' + arrayOrObject(function (all) {
        return processArray(key, all);
      }, function (_ref2) {
        var deg = _ref2.deg,
            from = _ref2.from,
            to = _ref2.to;
        return (deg || 0) + 'deg, ' + (from || 'transparent') + ', ' + (to || 'transparent');
      })(object) + ')';
    },
    radialGradient: processArray
  };

  function processObject(key, object) {
    if (key === 'background' || key === 'color' || key === 'borderColor' || key === 'backgroundColor') {
      if (object.linearGradient) {
        return GRADIENT.linearGradient(key, object.linearGradient);
      }
      if (object.radialGradient) {
        return GRADIENT.radialGradient(key, object.radialGradient);
      }
      if (isColor(object)) {
        return toColor(object);
      }
    }
    var toReturn = [];
    for (var subKey in object) {
      if (!object.hasOwnProperty(subKey)) {
        continue;
      }
      var value = object[subKey];
      value = objectValue(subKey, value);
      toReturn.push((TRANSFORM_KEYS_MAP[subKey] || subKey) + '(' + value + ')');
    }
    return toReturn.join(' ');
  }

  // RETURN THIS
  // style transformer
  function processStyles(styles, opts) {
    var toReturn = {};
    for (var key in styles) {
      if (!styles.hasOwnProperty(key)) {
        continue;
      }

      var value = styles[key];
      var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
      var finalKey = key;
      var shouldSnake = !opts || opts.snakeCase !== false;

      // convert camel to snake
      if (shouldSnake) {
        finalKey = _cssNameMap.CAMEL_TO_SNAKE[key] || key;
      }

      // get real values
      if (valueType === false) {
        value === FALSE_VALUES[key];
        valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
      }

      // simple syles
      if (valueType === 'undefined' || value === null || value === false) {
        continue;
      }

      var respond = void 0;
      var firstChar = key[0];

      if (valueType === 'string' || valueType === 'number') {
        toReturn[finalKey] = value;
        respond = true;
      } else if (COLOR_KEYS.has(key)) {
        toReturn[finalKey] = toColor(value);
        respond = true;
      } else if (Array.isArray(value)) {
        if (key === 'fontFamily') {
          toReturn[finalKey] = value.map(function (x) {
            return x.indexOf(' ') ? '"' + x + '"' : x;
          }).join(', ');
        } else {
          toReturn[finalKey] = processArray(key, value);
        }
        respond = true;
      } else if (firstChar === '&' || firstChar === '@') {
        // recurse into psuedo or media query
        toReturn[finalKey] = processStyles(value, opts);
        respond = true;
      } else if (valueType === 'object') {
        toReturn[finalKey] = processObject(key, value);
        respond = true;
      }

      // shorthands
      if (SHORTHANDS[key]) {
        key = SHORTHANDS[key];
        if (Array.isArray(key)) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = key[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var k = _step.value;

              k = shouldSnake ? _cssNameMap.CAMEL_TO_SNAKE[k] || k : k;
              toReturn[k] = value;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }

      if (respond) {
        continue;
      }

      throw new Error((opts && opts.errorMessage || 'Error') + ': Invalid style value for ' + key + ': ' + JSON.stringify(value));
    }

    return toReturn;
  }

  // expose helpers
  processStyles.helpers = {
    hash: _helpers.hash,
    toColor: toColor,
    isColor: isColor,
    processArray: processArray,
    processObject: processObject,
    snakeToCamel: _helpers.snakeToCamel,
    camelToSnake: _helpers.camelToSnake
  };

  return processStyles;
}
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/node_modules/@mcro/css/dist/helpers.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isColorLike = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

exports.hash = hash;
exports.camelToSnake = camelToSnake;
exports.snakeToCamel = snakeToCamel;
exports.colorToString = colorToString;
exports.isColorLikeString = isColorLikeString;
exports.isColorLikeArray = isColorLikeArray;
exports.isColorLikeObject = isColorLikeObject;
exports.isColorLikeLibrary = isColorLikeLibrary;
exports.getColorLikeLibraryValue = getColorLikeLibraryValue;
exports.expandCSSArray = expandCSSArray;

var _colorNames = require('2866');

var _colorNames2 = _interopRequireDefault(_colorNames);

var _cssNameMap = require('2867');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

function hash(thing) {
  var str = thing;
  if (thing instanceof Object) {
    str = JSON.stringify(thing);
  }
  if (typeof str === 'string') {
    var _hash = 5381;
    var i = str.length;
    while (i) {
      _hash = _hash * 33 ^ str.charCodeAt(--i);
    }
    /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
     * integers. Since we want the results to be always positive, convert the
     * signed int to an unsigned by doing an unsigned bitshift. */
    return _hash >>> 0;
  }
}

function camelToSnake(key) {
  return _cssNameMap.CAMEL_TO_SNAKE[key] || key;
}

function snakeToCamel(key) {
  return _cssNameMap.SNAKE_TO_CAMEL[key] || key;
}

function memoize(cb) {
  var _this = this;

  var Cache = new WeakMap();

  return function (key) {
    for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    // use first argument as key
    var mappable = key && (typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object';
    if (mappable) {
      var res = Cache.get(key);
      if (res) {
        return res;
      }
    }
    var newVal = cb.call.apply(cb, [_this, key].concat(rest));
    if (mappable) {
      Cache.set(key, newVal);
    }
    return newVal;
  };
}

function colorToString(color, options) {
  if (typeof color === 'string') {
    return color;
  }
  if (!color) {
    return 'transparent';
  }
  var res = color;
  if (isColorLikeLibrary(color, options)) {
    res = getColorLikeLibraryValue(color, options);
  }
  res = objectToColor(res);
  return '' + res;
}

var isColorLike = exports.isColorLike = memoize(function (object, options) {
  if (!object) {
    return false;
  }
  if (typeof object === 'string' && isColorLikeString(object)) {
    return true;
  }
  if (Array.isArray(object)) {
    return isColorLikeArray(object);
  }
  if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object') {
    return isColorLikeLibrary(object, options) || isColorLikeObject(object);
  }
  return false;
});

function isColorLikeString(str) {
  if (str[0] === '#' && (str.length === 4 || str.length === 7)) {
    return true;
  }
  if (str.indexOf('rgb(') === 0 || str.indexOf('rgba(') === 0) {
    return true;
  }
  if (_colorNames2.default[str]) {
    return true;
  }
  return false;
}

function isColorLikeArray(array) {
  return typeof array[0] === 'number' && typeof array[1] === 'number' && typeof array[2] === 'number' && (typeof array[3] === 'undefined' || typeof array[3] === 'number') && typeof array[4] === 'undefined';
}

function isColorLikeObject(object) {
  var keyLen = Object.keys(object).length;
  if (keyLen !== 3 || keyLen !== 4) return false;
  if (keyLen === 3 && object.r && object.g && object.b) return true;
  if (keyLen === 4 && object.a) return true;
  return false;
}

function isColorLikeLibrary(val, options) {
  return options && options.isColor && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && options.isColor(val) || typeof val.toCSS === 'function' || typeof val.css === 'function' || typeof val.rgb === 'function' || typeof val.rgba === 'function';
}

// attempts to work with a variety of css libraries
function getColorLikeLibraryValue(val, options) {
  var res = val;
  if (options && options.isColor(val)) {
    return options.toColor(val);
  }
  if (typeof val.css === 'function') {
    res = val.css();
  } else if (typeof val.toCSS === 'function') {
    res = val.toCSS();
  } else if (typeof val.rgba === 'function') {
    res = val.rgba();
  } else if (typeof val.rgb === 'function') {
    res = val.rgb();
  }
  return res;
}

var objectToColor = memoize(function (color) {
  // final processing of objects and arrays
  if (Array.isArray(color)) {
    var length = color.length;
    if (length === 4) {
      return 'rgba(' + color.join(', ') + ')';
    }
    if (length === 3) {
      return 'rgb(' + color.join(', ') + ')';
    }
  } else if (color instanceof Object) {
    if (color.a) {
      return 'rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', ' + color.a + ')';
    }
    return 'rgb(' + color.r + ', ' + color.g + ', ' + color.b + ')';
  }
  return color.toString();
});

var arr3to4 = function arr3to4(arr) {
  return [].concat(_toConsumableArray(arr), [arr[1]]);
};
var arr2to4 = function arr2to4(arr) {
  return [].concat(_toConsumableArray(arr), [arr[0], arr[1]]);
};
var arr1to4 = function arr1to4(arr) {
  return [].concat(_toConsumableArray(arr), [arr[0], arr[0], arr[1]]);
};

function expandCSSArray(given) {
  if (typeof given === 'number') {
    return [given, given, given, given];
  }
  if (Array.isArray(given)) {
    switch (given.length) {
      case 3:
        return arr3to4(given);
      case 2:
        return arr2to4(given);
      case 1:
        return arr1to4(given);
      default:
        return given;
    }
  }
  throw new Error('Invalid type given');
}
//# sourceMappingURL=helpers.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/node_modules/@mcro/css/dist/colorNames.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  aliceblue: '#f0f8ff',
  antiquewhite: '#faebd7',
  aqua: '#00ffff',
  aquamarine: '#7fffd4',
  azure: '#f0ffff',
  beige: '#f5f5dc',
  bisque: '#ffe4c4',
  black: '#000000',
  blanchedalmond: '#ffebcd',
  blue: '#0000ff',
  blueviolet: '#8a2be2',
  brown: '#a52a2a',
  burlywood: '#deb887',
  cadetblue: '#5f9ea0',
  chartreuse: '#7fff00',
  chocolate: '#d2691e',
  coral: '#ff7f50',
  cornflowerblue: '#6495ed',
  cornsilk: '#fff8dc',
  crimson: '#dc143c',
  cyan: '#00ffff',
  darkblue: '#00008b',
  darkcyan: '#008b8b',
  darkgoldenrod: '#b8860b',
  darkgray: '#a9a9a9',
  darkgreen: '#006400',
  darkgrey: '#a9a9a9',
  darkkhaki: '#bdb76b',
  darkmagenta: '#8b008b',
  darkolivegreen: '#556b2f',
  darkorange: '#ff8c00',
  darkorchid: '#9932cc',
  darkred: '#8b0000',
  darksalmon: '#e9967a',
  darkseagreen: '#8fbc8f',
  darkslateblue: '#483d8b',
  darkslategray: '#2f4f4f',
  darkslategrey: '#2f4f4f',
  darkturquoise: '#00ced1',
  darkviolet: '#9400d3',
  deeppink: '#ff1493',
  deepskyblue: '#00bfff',
  dimgray: '#696969',
  dimgrey: '#696969',
  dodgerblue: '#1e90ff',
  firebrick: '#b22222',
  floralwhite: '#fffaf0',
  forestgreen: '#228b22',
  fuchsia: '#ff00ff',
  gainsboro: '#dcdcdc',
  ghostwhite: '#f8f8ff',
  gold: '#ffd700',
  goldenrod: '#daa520',
  gray: '#808080',
  green: '#008000',
  greenyellow: '#adff2f',
  grey: '#808080',
  honeydew: '#f0fff0',
  hotpink: '#ff69b4',
  indianred: '#cd5c5c',
  indigo: '#4b0082',
  ivory: '#fffff0',
  khaki: '#f0e68c',
  lavender: '#e6e6fa',
  lavenderblush: '#fff0f5',
  lawngreen: '#7cfc00',
  lemonchiffon: '#fffacd',
  lightblue: '#add8e6',
  lightcoral: '#f08080',
  lightcyan: '#e0ffff',
  lightgoldenrodyellow: '#fafad2',
  lightgray: '#d3d3d3',
  lightgreen: '#90ee90',
  lightgrey: '#d3d3d3',
  lightpink: '#ffb6c1',
  lightsalmon: '#ffa07a',
  lightseagreen: '#20b2aa',
  lightskyblue: '#87cefa',
  lightslategray: '#778899',
  lightslategrey: '#778899',
  lightsteelblue: '#b0c4de',
  lightyellow: '#ffffe0',
  lime: '#00ff00',
  limegreen: '#32cd32',
  linen: '#faf0e6',
  magenta: '#ff00ff',
  maroon: '#800000',
  mediumaquamarine: '#66cdaa',
  mediumblue: '#0000cd',
  mediumorchid: '#ba55d3',
  mediumpurple: '#9370db',
  mediumseagreen: '#3cb371',
  mediumslateblue: '#7b68ee',
  mediumspringgreen: '#00fa9a',
  mediumturquoise: '#48d1cc',
  mediumvioletred: '#c71585',
  midnightblue: '#191970',
  mintcream: '#f5fffa',
  mistyrose: '#ffe4e1',
  moccasin: '#ffe4b5',
  navajowhite: '#ffdead',
  navy: '#000080',
  oldlace: '#fdf5e6',
  olive: '#808000',
  olivedrab: '#6b8e23',
  orange: '#ffa500',
  orangered: '#ff4500',
  orchid: '#da70d6',
  palegoldenrod: '#eee8aa',
  palegreen: '#98fb98',
  paleturquoise: '#afeeee',
  palevioletred: '#db7093',
  papayawhip: '#ffefd5',
  peachpuff: '#ffdab9',
  peru: '#cd853f',
  pink: '#ffc0cb',
  plum: '#dda0dd',
  powderblue: '#b0e0e6',
  purple: '#800080',
  rebeccapurple: '#663399',
  red: '#ff0000',
  rosybrown: '#bc8f8f',
  royalblue: '#4169e1',
  saddlebrown: '#8b4513',
  salmon: '#fa8072',
  sandybrown: '#f4a460',
  seagreen: '#2e8b57',
  seashell: '#fff5ee',
  sienna: '#a0522d',
  silver: '#c0c0c0',
  skyblue: '#87ceeb',
  slateblue: '#6a5acd',
  slategray: '#708090',
  slategrey: '#708090',
  snow: '#fffafa',
  springgreen: '#00ff7f',
  steelblue: '#4682b4',
  tan: '#d2b48c',
  teal: '#008080',
  thistle: '#d8bfd8',
  tomato: '#ff6347',
  turquoise: '#40e0d0',
  violet: '#ee82ee',
  wheat: '#f5deb3',
  white: '#ffffff',
  whitesmoke: '#f5f5f5',
  yellow: '#ffff00',
  yellowgreen: '#9acd32'
};
//# sourceMappingURL=colorNames.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/node_modules/@mcro/css/dist/cssNameMap.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var CAMEL_TO_SNAKE = exports.CAMEL_TO_SNAKE = {
  pointerEvents: 'pointer-events',
  WebkitAppRegion: '-webkit-app-region',
  alignContent: 'align-content',
  alignItems: 'align-items',
  alignSelf: 'align-self',
  animationDelay: 'animation-delay',
  animationDirection: 'animation-direction',
  animationDuration: 'animation-duration',
  animationFillMode: 'animation-fill-mode',
  animationIterationCount: 'animation-iteration-count',
  animationName: 'animation-name',
  animationPlayState: 'animation-play-state',
  animationTimingFunction: 'animation-timing-function',
  backfaceVisibility: 'backface-visibility',
  backgroundAttachment: 'background-attachment',
  backgroundBlendMode: 'background-blend-mode',
  backgroundClip: 'background-clip',
  backgroundColor: 'background-color',
  backgroundImage: 'background-image',
  backgroundOrigin: 'background-origin',
  backgroundPosition: 'background-position',
  backgroundRepeat: 'background-repeat',
  backgroundSize: 'background-size',
  backdropFilter: 'backdrop-filter',
  borderBottom: 'border-bottom',
  borderBottomColor: 'border-bottom-color',
  borderBottomLeftRadius: 'border-bottom-left-radius',
  borderBottomRightRadius: 'border-bottom-right-radius',
  borderBottomStyle: 'border-bottom-style',
  borderBottomWidth: 'border-bottom-width',
  borderRadiusSize: 'border-radius-size',
  borderCollapse: 'border-collapse',
  borderColor: 'border-color',
  borderImage: 'border-image',
  borderImageOutset: 'border-image-outset',
  borderImageRepeat: 'border-image-repeat',
  borderImageSlice: 'border-image-slice',
  borderImageSource: 'border-image-source',
  borderImageWidth: 'border-image-width',
  borderLeft: 'border-left',
  borderLeftColor: 'border-left-color',
  borderLeftStyle: 'border-left-style',
  borderLeftWidth: 'border-left-width',
  borderRadius: 'border-radius',
  borderRight: 'border-right',
  borderRightColor: 'border-right-color',
  borderRightStyle: 'border-right-style',
  borderRightWidth: 'border-right-width',
  borderSpacing: 'border-spacing',
  borderStyle: 'border-style',
  borderTop: 'border-top',
  borderTopColor: 'border-top-color',
  borderTopLeftRadius: 'border-top-left-radius',
  borderTopRightRadius: 'border-top-right-radius',
  borderTopStyle: 'border-top-style',
  borderTopWidth: 'border-top-width',
  borderWidth: 'border-width',
  boxShadow: 'box-shadow',
  boxSizing: 'box-sizing',
  captionSide: 'caption-side',
  columnCount: 'column-count',
  columnFill: 'column-fill',
  columnGap: 'column-gap',
  columnRule: 'column-rule',
  columnRuleColor: 'column-rule-color',
  columnRuleStyle: 'column-rule-style',
  columnRuleWidth: 'column-rule-width',
  columnSpan: 'column-span',
  columnWidth: 'column-width',
  counterIncrement: 'counter-increment',
  counterReset: 'counter-reset',
  emptyCells: 'empty-cells',
  flexBasis: 'flex-basis',
  flexDirection: 'flex-direction',
  flexFlow: 'flex-flow',
  flexGrow: 'flex-grow',
  flexShrink: 'flex-shrink',
  flexWrap: 'flex-wrap',
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  hangingPunctuation: 'hanging-punctuation',
  justifyContent: 'justify-content',
  letterSpacing: 'letter-spacing',
  lineHeight: 'line-height',
  listStyle: 'list-style',
  listStyleImage: 'list-style-image',
  listStylePosition: 'list-style-position',
  listStyleType: 'list-style-type',
  marginBottom: 'margin-bottom',
  marginLeft: 'margin-left',
  marginRight: 'margin-right',
  marginTop: 'margin-top',
  maxHeight: 'max-height',
  maxWidth: 'max-width',
  minHeight: 'min-height',
  minWidth: 'min-width',
  navDown: 'nav-down',
  navIndex: 'nav-index',
  navLeft: 'nav-left',
  navRight: 'nav-right',
  navUp: 'nav-up',
  outlineColor: 'outline-color',
  outlineOffset: 'outline-offset',
  outlineStyle: 'outline-style',
  outlineWidth: 'outline-width',
  overflowX: 'overflow-x',
  overflowY: 'overflow-y',
  paddingBottom: 'padding-bottom',
  paddingLeft: 'padding-left',
  paddingRight: 'padding-right',
  paddingTop: 'padding-top',
  pageBreakAfter: 'page-break-after',
  pageBreakBefore: 'page-break-before',
  pageBreakInside: 'page-break-inside',
  perspectiveOrigin: 'perspective-origin',
  tabSize: 'tab-size',
  tableLayout: 'table-layout',
  textAlign: 'text-align',
  textAlignLast: 'text-align-last',
  textDecoration: 'text-decoration',
  textDecorationColor: 'text-decoration-color',
  textDecorationLine: 'text-decoration-line',
  textDecorationStyle: 'text-decoration-style',
  textIndent: 'text-indent',
  textJustify: 'text-justify',
  textOverflow: 'text-overflow',
  textShadow: 'text-shadow',
  textTransform: 'text-transform',
  transformOrigin: 'transform-origin',
  transformStyle: 'transform-style',
  transitionDelay: 'transition-delay',
  transitionDuration: 'transition-duration',
  transitionProperty: 'transition-property',
  transitionTimingFunction: 'transition-timing-function',
  unicodeBidi: 'unicode-bidi',
  verticalAlign: 'vertical-align',
  whiteSpace: 'white-space',
  wordBreak: 'word-break',
  wordSpacing: 'word-spacing',
  wordWrap: 'word-wrap',
  zIndex: 'z-index'
};

var SNAKE_TO_CAMEL = exports.SNAKE_TO_CAMEL = Object.keys(CAMEL_TO_SNAKE).reduce(function (acc, cur) {
  return _extends({}, acc, _defineProperty({}, CAMEL_TO_SNAKE[cur], cur));
}, {});
//# sourceMappingURL=cssNameMap.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/stylesheet.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jssNested = require('2837');

var _jssNested2 = _interopRequireDefault(_jssNested);

var _jssDefaultUnit = require('2838');

var _jssDefaultUnit2 = _interopRequireDefault(_jssDefaultUnit);

var _jssPropsSort = require('2839');

var _jssPropsSort2 = _interopRequireDefault(_jssPropsSort);

var _jss = require('2840');

var JSS = _interopRequireWildcard(_jss);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const jss = JSS.create();

jss.use((0, _jssNested2.default)(), (0, _jssDefaultUnit2.default)(), (0, _jssPropsSort2.default)());

exports.default = jss;

window.JSS = jss;
//# sourceMappingURL=stylesheet.js.map
});
__sbPundle.registerModule("../node_modules/jss-nested/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = jssNested;

var _warning = require('1096');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var separatorRegExp = /\s*,\s*/g;
var parentRegExp = /&/g;
var refRegExp = /\$([\w-]+)/g;

/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */
function jssNested() {
  // Get a function to be used for $ref replacement.
  function getReplaceRef(container) {
    return function (match, key) {
      var rule = container.getRule(key);
      if (rule) return rule.selector;
      (0, _warning2.default)(false, '[JSS] Could not find the referenced rule %s in %s.', key, container.options.meta || container);
      return key;
    };
  }

  var hasAnd = function hasAnd(str) {
    return str.indexOf('&') !== -1;
  };

  function replaceParentRefs(nestedProp, parentProp) {
    var parentSelectors = parentProp.split(separatorRegExp);
    var nestedSelectors = nestedProp.split(separatorRegExp);

    var result = '';

    for (var i = 0; i < parentSelectors.length; i++) {
      var parent = parentSelectors[i];

      for (var j = 0; j < nestedSelectors.length; j++) {
        var nested = nestedSelectors[j];
        if (result) result += ', ';
        // Replace all & by the parent or prefix & with the parent.
        result += hasAnd(nested) ? nested.replace(parentRegExp, parent) : parent + ' ' + nested;
      }
    }

    return result;
  }

  function getOptions(rule, container, options) {
    // Options has been already created, now we only increase index.
    if (options) return _extends({}, options, { index: options.index + 1 });

    var nestingLevel = rule.options.nestingLevel;

    nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;

    return _extends({}, rule.options, {
      nestingLevel: nestingLevel,
      index: container.indexOf(rule) + 1
    });
  }

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;
    var container = rule.options.parent;
    var options = void 0;
    var replaceRef = void 0;
    for (var prop in style) {
      var isNested = hasAnd(prop);
      var isNestedConditional = prop[0] === '@';

      if (!isNested && !isNestedConditional) continue;

      options = getOptions(rule, container, options);

      if (isNested) {
        var selector = replaceParentRefs(prop, rule.selector
        // Lazily create the ref replacer function just once for
        // all nested rules within the sheet.
        );if (!replaceRef) replaceRef = getReplaceRef(container
        // Replace all $refs.
        );selector = selector.replace(refRegExp, replaceRef);

        container.addRule(selector, style[prop], _extends({}, options, { selector: selector }));
      } else if (isNestedConditional) {
        // Place conditional right after the parent rule to ensure right ordering.
        container.addRule(prop, _defineProperty({}, rule.key, style[prop]), options);
      }

      delete style[prop];
    }

    return style;
  }

  return { onProcessStyle: onProcessStyle };
}
});
__sbPundle.registerModule("../node_modules/warning/browser.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function () {};

if ('development' !== 'production') {
  warning = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
});
__sbPundle.registerModule("../node_modules/jss-default-unit/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

exports['default'] = defaultUnit;

var _defaultUnits = require('1104');

var _defaultUnits2 = _interopRequireDefault(_defaultUnits);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

/**
 * Clones the object and adds a camel cased property version.
 */
function addCamelCasedVersion(obj) {
  var regExp = /(-[a-z])/g;
  var replace = function replace(str) {
    return str[1].toUpperCase();
  };
  var newObj = {};
  for (var key in obj) {
    newObj[key] = obj[key];
    newObj[key.replace(regExp, replace)] = obj[key];
  }
  return newObj;
}

var units = addCamelCasedVersion(_defaultUnits2['default']);

/**
 * Recursive deep style passing function
 *
 * @param {String} current property
 * @param {(Object|Array|Number|String)} property value
 * @param {Object} options
 * @return {(Object|Array|Number|String)} resulting value
 */
function iterate(prop, value, options) {
  if (!value) return value;

  var convertedValue = value;

  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  if (type === 'object' && Array.isArray(value)) type = 'array';

  switch (type) {
    case 'object':
      if (prop === 'fallbacks') {
        for (var innerProp in value) {
          value[innerProp] = iterate(innerProp, value[innerProp], options);
        }
        break;
      }
      for (var _innerProp in value) {
        value[_innerProp] = iterate(prop + '-' + _innerProp, value[_innerProp], options);
      }
      break;
    case 'array':
      for (var i = 0; i < value.length; i++) {
        value[i] = iterate(prop, value[i], options);
      }
      break;
    case 'number':
      if (value !== 0) {
        convertedValue = value + (options[prop] || units[prop] || '');
      }
      break;
    default:
      break;
  }

  return convertedValue;
}

/**
 * Add unit to numeric values.
 */
function defaultUnit() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var camelCasedOptions = addCamelCasedVersion(options);

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;

    for (var prop in style) {
      style[prop] = iterate(prop, style[prop], camelCasedOptions);
    }

    return style;
  }

  function onChangeValue(value, prop) {
    return iterate(prop, value, camelCasedOptions);
  }

  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };
}
});
__sbPundle.registerModule("../node_modules/jss-default-unit/lib/defaultUnits.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Generated jss-default-unit CSS property units
 *
 * @type object
 */
exports['default'] = {
  'animation-delay': 'ms',
  'animation-duration': 'ms',
  'background-position': 'px',
  'background-position-x': 'px',
  'background-position-y': 'px',
  'background-size': 'px',
  border: 'px',
  'border-bottom': 'px',
  'border-bottom-left-radius': 'px',
  'border-bottom-right-radius': 'px',
  'border-bottom-width': 'px',
  'border-left': 'px',
  'border-left-width': 'px',
  'border-radius': 'px',
  'border-right': 'px',
  'border-right-width': 'px',
  'border-spacing': 'px',
  'border-top': 'px',
  'border-top-left-radius': 'px',
  'border-top-right-radius': 'px',
  'border-top-width': 'px',
  'border-width': 'px',
  'border-after-width': 'px',
  'border-before-width': 'px',
  'border-end-width': 'px',
  'border-horizontal-spacing': 'px',
  'border-start-width': 'px',
  'border-vertical-spacing': 'px',
  bottom: 'px',
  'box-shadow': 'px',
  'column-gap': 'px',
  'column-rule': 'px',
  'column-rule-width': 'px',
  'column-width': 'px',
  'flex-basis': 'px',
  'font-size': 'px',
  'font-size-delta': 'px',
  height: 'px',
  left: 'px',
  'letter-spacing': 'px',
  'logical-height': 'px',
  'logical-width': 'px',
  margin: 'px',
  'margin-after': 'px',
  'margin-before': 'px',
  'margin-bottom': 'px',
  'margin-left': 'px',
  'margin-right': 'px',
  'margin-top': 'px',
  'max-height': 'px',
  'max-width': 'px',
  'margin-end': 'px',
  'margin-start': 'px',
  'mask-position-x': 'px',
  'mask-position-y': 'px',
  'mask-size': 'px',
  'max-logical-height': 'px',
  'max-logical-width': 'px',
  'min-height': 'px',
  'min-width': 'px',
  'min-logical-height': 'px',
  'min-logical-width': 'px',
  motion: 'px',
  'motion-offset': 'px',
  outline: 'px',
  'outline-offset': 'px',
  'outline-width': 'px',
  padding: 'px',
  'padding-bottom': 'px',
  'padding-left': 'px',
  'padding-right': 'px',
  'padding-top': 'px',
  'padding-after': 'px',
  'padding-before': 'px',
  'padding-end': 'px',
  'padding-start': 'px',
  'perspective-origin-x': '%',
  'perspective-origin-y': '%',
  perspective: 'px',
  right: 'px',
  'shape-margin': 'px',
  size: 'px',
  'text-indent': 'px',
  'text-stroke': 'px',
  'text-stroke-width': 'px',
  top: 'px',
  'transform-origin': '%',
  'transform-origin-x': '%',
  'transform-origin-y': '%',
  'transform-origin-z': '%',
  'transition-delay': 'ms',
  'transition-duration': 'ms',
  'vertical-align': 'px',
  width: 'px',
  'word-spacing': 'px',
  // Not existing properties.
  // Used to avoid issues with jss-expand intergration.
  'box-shadow-x': 'px',
  'box-shadow-y': 'px',
  'box-shadow-blur': 'px',
  'box-shadow-spread': 'px',
  'font-line-height': 'px',
  'text-shadow-x': 'px',
  'text-shadow-y': 'px',
  'text-shadow-blur': 'px'
};
});
__sbPundle.registerModule("../node_modules/jss-props-sort/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = jssPropsSort;
/**
 * Sort props by length.
 */
function jssPropsSort() {
  function sort(prop0, prop1) {
    return prop0.length - prop1.length;
  }

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;

    var newStyle = {};
    var props = Object.keys(style).sort(sort);
    for (var prop in props) {
      newStyle[props[prop]] = style[props[prop]];
    }
    return newStyle;
  }

  return { onProcessStyle: onProcessStyle };
}
});
__sbPundle.registerModule("../node_modules/jss/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = exports.sheets = exports.RuleList = exports.SheetsManager = exports.SheetsRegistry = exports.getDynamicStyles = undefined;

var _getDynamicStyles = require('1097');

Object.defineProperty(exports, 'getDynamicStyles', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getDynamicStyles)['default'];
  }
});

var _SheetsRegistry = require('1098');

Object.defineProperty(exports, 'SheetsRegistry', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_SheetsRegistry)['default'];
  }
});

var _SheetsManager = require('1099');

Object.defineProperty(exports, 'SheetsManager', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_SheetsManager)['default'];
  }
});

var _RuleList = require('1100');

Object.defineProperty(exports, 'RuleList', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RuleList)['default'];
  }
});

var _sheets = require('1101');

Object.defineProperty(exports, 'sheets', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sheets)['default'];
  }
});

var _Jss = require('1102');

var _Jss2 = _interopRequireDefault(_Jss);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

/**
 * Creates a new instance of Jss.
 */
var create = exports.create = function create(options) {
  return new _Jss2['default'](options);
};

/**
 * A global Jss instance.
 */
exports['default'] = create();
});
__sbPundle.registerModule("../node_modules/jss/lib/utils/getDynamicStyles.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

/**
 * Extracts a styles object with only props that contain function values.
 */
exports['default'] = function (styles) {
  // eslint-disable-next-line no-shadow
  function extract(styles) {
    var to = null;

    for (var key in styles) {
      var value = styles[key];
      var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

      if (type === 'function') {
        if (!to) to = {};
        to[key] = value;
      } else if (type === 'object' && value !== null && !Array.isArray(value)) {
        var extracted = extract(value);
        if (extracted) {
          if (!to) to = {};
          to[key] = extracted;
        }
      }
    }

    return to;
  }

  return extract(styles);
};
});
__sbPundle.registerModule("../node_modules/jss/lib/SheetsRegistry.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * Sheets registry to access them all at one place.
 */
var SheetsRegistry = function () {
  function SheetsRegistry() {
    _classCallCheck(this, SheetsRegistry);

    this.registry = [];
  }

  _createClass(SheetsRegistry, [{
    key: 'add',

    /**
     * Register a Style Sheet.
     */
    value: function add(sheet) {
      var registry = this.registry;
      var index = sheet.options.index;

      if (registry.indexOf(sheet) !== -1) return;

      if (registry.length === 0 || index >= this.index) {
        registry.push(sheet);
        return;
      }

      // Find a position.
      for (var i = 0; i < registry.length; i++) {
        if (registry[i].options.index > index) {
          registry.splice(i, 0, sheet);
          return;
        }
      }
    }

    /**
     * Reset the registry.
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.registry = [];
    }

    /**
     * Remove a Style Sheet.
     */

  }, {
    key: 'remove',
    value: function remove(sheet) {
      var index = this.registry.indexOf(sheet);
      this.registry.splice(index, 1);
    }

    /**
     * Convert all attached sheets to a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString(options) {
      return this.registry.filter(function (sheet) {
        return sheet.attached;
      }).map(function (sheet) {
        return sheet.toString(options);
      }).join('\n');
    }
  }, {
    key: 'index',

    /**
     * Current highest index number.
     */
    get: function get() {
      return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
    }
  }]);

  return SheetsRegistry;
}();

exports['default'] = SheetsRegistry;
});
__sbPundle.registerModule("../node_modules/jss/lib/SheetsManager.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _warning = require('1257');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * SheetsManager is like a WeakMap which is designed to count StyleSheet
 * instances and attach/detach automatically.
 */
var SheetsManager = function () {
  function SheetsManager() {
    _classCallCheck(this, SheetsManager);

    this.sheets = [];
    this.refs = [];
    this.keys = [];
  }

  _createClass(SheetsManager, [{
    key: 'get',
    value: function get(key) {
      var index = this.keys.indexOf(key);
      return this.sheets[index];
    }
  }, {
    key: 'add',
    value: function add(key, sheet) {
      var sheets = this.sheets,
          refs = this.refs,
          keys = this.keys;

      var index = sheets.indexOf(sheet);

      if (index !== -1) return index;

      sheets.push(sheet);
      refs.push(0);
      keys.push(key);

      return sheets.length - 1;
    }
  }, {
    key: 'manage',
    value: function manage(key) {
      var index = this.keys.indexOf(key);
      var sheet = this.sheets[index];
      if (this.refs[index] === 0) sheet.attach();
      this.refs[index]++;
      if (!this.keys[index]) this.keys.splice(index, 0, key);
      return sheet;
    }
  }, {
    key: 'unmanage',
    value: function unmanage(key) {
      var index = this.keys.indexOf(key);
      if (index === -1) {
        // eslint-ignore-next-line no-console
        (0, _warning2['default'])('SheetsManager: can\'t find sheet to unmanage');
        return;
      }
      if (this.refs[index] > 0) {
        this.refs[index]--;
        if (this.refs[index] === 0) this.sheets[index].detach();
      }
    }
  }]);

  return SheetsManager;
}();

exports['default'] = SheetsManager;
});
__sbPundle.registerModule("../node_modules/jss/lib/RuleList.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _createRule = require('1259');

var _createRule2 = _interopRequireDefault(_createRule);

var _updateRule = require('1260');

var _updateRule2 = _interopRequireDefault(_updateRule);

var _linkRule = require('1261');

var _linkRule2 = _interopRequireDefault(_linkRule);

var _StyleRule = require('1262');

var _StyleRule2 = _interopRequireDefault(_StyleRule);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * Contains rules objects and allows adding/removing etc.
 * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
 */
var RuleList = function () {

  // Original styles object.
  function RuleList(options) {
    _classCallCheck(this, RuleList);

    this.map = {};
    this.raw = {};
    this.index = [];

    this.options = options;
    this.classes = options.classes;
  }

  /**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */

  // Used to ensure correct rules order.

  // Rules registry for access by .get() method.
  // It contains the same rule registered by name and by selector.


  _createClass(RuleList, [{
    key: 'add',
    value: function add(name, decl, options) {
      var _options = this.options,
          parent = _options.parent,
          sheet = _options.sheet,
          jss = _options.jss,
          Renderer = _options.Renderer,
          generateClassName = _options.generateClassName;

      options = _extends({
        classes: this.classes,
        parent: parent,
        sheet: sheet,
        jss: jss,
        Renderer: Renderer,
        generateClassName: generateClassName
      }, options);

      if (!options.selector && this.classes[name]) options.selector = '.' + this.classes[name];

      this.raw[name] = decl;

      var rule = (0, _createRule2['default'])(name, decl, options);
      this.register(rule);

      var index = options.index === undefined ? this.index.length : options.index;
      this.index.splice(index, 0, rule);

      return rule;
    }

    /**
     * Get a rule.
     */

  }, {
    key: 'get',
    value: function get(name) {
      return this.map[name];
    }

    /**
     * Delete a rule.
     */

  }, {
    key: 'remove',
    value: function remove(rule) {
      this.unregister(rule);
      this.index.splice(this.indexOf(rule), 1);
    }

    /**
     * Get index of a rule.
     */

  }, {
    key: 'indexOf',
    value: function indexOf(rule) {
      return this.index.indexOf(rule);
    }

    /**
     * Run `onProcessRule()` plugins on every rule.
     */

  }, {
    key: 'process',
    value: function process() {
      var plugins = this.options.jss.plugins;
      // We need to clone array because if we modify the index somewhere else during a loop
      // we end up with very hard-to-track-down side effects.

      this.index.slice(0).forEach(plugins.onProcessRule, plugins);
    }

    /**
     * Register a rule in `.map` and `.classes` maps.
     */

  }, {
    key: 'register',
    value: function register(rule) {
      this.map[rule.key] = rule;
      if (rule instanceof _StyleRule2['default']) {
        this.map[rule.selector] = rule;
        this.classes[rule.key] = rule.selector.substr(1);
      }
    }

    /**
     * Unregister a rule.
     */

  }, {
    key: 'unregister',
    value: function unregister(rule) {
      delete this.map[rule.key];
      delete this.classes[rule.key];
      if (rule instanceof _StyleRule2['default']) delete this.map[rule.selector];
    }

    /**
     * Update the function values with a new data.
     */

  }, {
    key: 'update',
    value: function update(name, data) {
      if (typeof name === 'string') {
        (0, _updateRule2['default'])(this.get(name), data, RuleList);
        return;
      }

      for (var index = 0; index < this.index.length; index++) {
        (0, _updateRule2['default'])(this.index[index], name, RuleList);
      }
    }

    /**
     * Link renderable rules with CSSRuleList.
     */

  }, {
    key: 'link',
    value: function link(cssRules) {
      for (var i = 0; i < cssRules.length; i++) {
        var cssRule = cssRules[i];
        var rule = this.get(this.options.sheet.renderer.getSelector(cssRule));
        if (rule) (0, _linkRule2['default'])(rule, cssRule);
      }
    }

    /**
     * Convert rules to a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString(options) {
      var str = '';

      for (var index = 0; index < this.index.length; index++) {
        var rule = this.index[index];
        var css = rule.toString(options);

        // No need to render an empty rule.
        if (!css) continue;

        if (str) str += '\n';
        str += css;
      }

      return str;
    }
  }]);

  return RuleList;
}();

exports['default'] = RuleList;
});
__sbPundle.registerModule("../node_modules/jss/lib/utils/createRule.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = createRule;

var _warning = require('1380');

var _warning2 = _interopRequireDefault(_warning);

var _StyleRule = require('1381');

var _StyleRule2 = _interopRequireDefault(_StyleRule);

var _cloneStyle = require('1382');

var _cloneStyle2 = _interopRequireDefault(_cloneStyle);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

/**
 * Create a rule instance.
 */
function createRule() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unnamed';
  var decl = arguments[1];
  var options = arguments[2];
  var jss = options.jss;

  var declCopy = (0, _cloneStyle2['default'])(decl);

  var rule = jss.plugins.onCreateRule(name, declCopy, options);
  if (rule) return rule;

  // It is an at-rule and it has no instance.
  if (name[0] === '@') {
    (0, _warning2['default'])(false, '[JSS] Unknown at-rule %s', name);
  }

  return new _StyleRule2['default'](name, declCopy, options);
}
});
__sbPundle.registerModule("../node_modules/jss/lib/rules/StyleRule.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _toCss = require('1386');

var _toCss2 = _interopRequireDefault(_toCss);

var _toCssValue = require('1387');

var _toCssValue2 = _interopRequireDefault(_toCssValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var StyleRule = function () {
  function StyleRule(key, style, options) {
    _classCallCheck(this, StyleRule);

    this.type = 'style';
    this.isProcessed = false;
    var generateClassName = options.generateClassName,
        sheet = options.sheet,
        Renderer = options.Renderer,
        selector = options.selector;

    this.key = key;
    this.options = options;
    this.style = style;
    this.selectorText = selector || '.' + generateClassName(this, sheet);
    this.renderer = sheet ? sheet.renderer : new Renderer();
  }

  /**
   * Set selector string.
   * TODO rewrite this #419
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */

  _createClass(StyleRule, [{
    key: 'prop',

    /**
     * Get or set a style property.
     */
    value: function prop(name, nextValue) {
      var $name = typeof this.style[name] === 'function' ? '$' + name : name;
      var currValue = this.style[$name];

      // Its a setter.
      if (nextValue != null) {
        // Don't do anything if the value has not changed.
        if (currValue !== nextValue) {
          nextValue = this.options.jss.plugins.onChangeValue(nextValue, name, this);
          Object.defineProperty(this.style, $name, {
            value: nextValue,
            writable: true
          });
          // Defined if StyleSheet option `link` is true.
          if (this.renderable) this.renderer.setStyle(this.renderable, name, nextValue);
        }
        return this;
      }

      // Its a getter, read the value from the DOM if its not cached.
      if (this.renderable && currValue == null) {
        // Cache the value after we have got it from the DOM first time.
        Object.defineProperty(this.style, $name, {
          value: this.renderer.getStyle(this.renderable, name),
          writable: true
        });
      }

      return this.style[$name];
    }

    /**
     * Apply rule to an element inline.
     */

  }, {
    key: 'applyTo',
    value: function applyTo(renderable) {
      var json = this.toJSON();
      for (var prop in json) {
        this.renderer.setStyle(renderable, prop, json[prop]);
      }return this;
    }

    /**
     * Returns JSON representation of the rule.
     * Fallbacks are not supported.
     * Useful for inline styles.
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      var json = {};
      for (var prop in this.style) {
        var value = this.style[prop];
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
        if (type === 'function') json[prop] = this.style['$' + prop];else if (type !== 'object') json[prop] = value;else if (Array.isArray(value)) json[prop] = (0, _toCssValue2['default'])(value);
      }
      return json;
    }

    /**
     * Generates a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString(options) {
      return (0, _toCss2['default'])(this.selector, this.style, options);
    }
  }, {
    key: 'selector',
    set: function set(selector) {
      var sheet = this.options.sheet;

      // After we modify a selector, ref by old selector needs to be removed.

      if (sheet) sheet.rules.unregister(this);

      this.selectorText = selector;

      if (!this.renderable) {
        // Register the rule with new selector.
        if (sheet) sheet.rules.register(this);
        return;
      }

      var changed = this.renderer.setSelector(this.renderable, selector);

      if (changed && sheet) {
        sheet.rules.register(this);
        return;
      }

      // If selector setter is not implemented, rerender the sheet.
      // We need to delete renderable from the rule, because when sheet.deploy()
      // calls rule.toString, it will get the old selector.
      delete this.renderable;
      if (sheet) {
        sheet.rules.register(this);
        sheet.deploy().link();
      }
    }

    /**
     * Get selector string.
     */

    , get: function get() {
      if (this.renderable) {
        return this.renderer.getSelector(this.renderable);
      }

      return this.selectorText;
    }
  }]);

  return StyleRule;
}();

exports['default'] = StyleRule;
});
__sbPundle.registerModule("../node_modules/jss/lib/utils/toCss.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = toCss;

var _toCssValue = require('1475');

var _toCssValue2 = _interopRequireDefault(_toCssValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */
function indentStr(str, indent) {
  var result = '';
  for (var index = 0; index < indent; index++) {
    result += '  ';
  }return result + str;
}

/**
 * Converts a Rule to CSS string.
 */

function toCss(selector, style) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var result = '';

  if (!style) return result;

  var _options$indent = options.indent,
      indent = _options$indent === undefined ? 0 : _options$indent;
  var fallbacks = style.fallbacks;

  indent++;

  // Apply fallbacks first.
  if (fallbacks) {
    // Array syntax {fallbacks: [{prop: value}]}
    if (Array.isArray(fallbacks)) {
      for (var index = 0; index < fallbacks.length; index++) {
        var fallback = fallbacks[index];
        for (var prop in fallback) {
          var value = fallback[prop];
          if (value != null) {
            result += '\n' + indentStr(prop + ': ' + (0, _toCssValue2['default'])(value) + ';', indent);
          }
        }
      }
    }
    // Object syntax {fallbacks: {prop: value}}
    else {
        for (var _prop in fallbacks) {
          var _value = fallbacks[_prop];
          if (_value != null) {
            result += '\n' + indentStr(_prop + ': ' + (0, _toCssValue2['default'])(_value) + ';', indent);
          }
        }
      }
  }

  var hasFunctionValue = false;

  for (var _prop2 in style) {
    var _value2 = style[_prop2];
    if (typeof _value2 === 'function') {
      _value2 = style['$' + _prop2];
      hasFunctionValue = true;
    }
    if (_value2 != null && _prop2 !== 'fallbacks') {
      result += '\n' + indentStr(_prop2 + ': ' + (0, _toCssValue2['default'])(_value2) + ';', indent);
    }
  }

  if (!result && !hasFunctionValue) return result;

  indent--;
  result = indentStr(selector + ' {' + result + '\n', indent) + indentStr('}', indent);

  return result;
}
});
__sbPundle.registerModule("../node_modules/jss/lib/utils/toCssValue.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = toCssValue;
var joinWithSpace = function joinWithSpace(value) {
  return value.join(' ');
};

/**
 * Converts array values to string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 */
function toCssValue(value) {
  if (!Array.isArray(value)) return value;

  // Support space separated values.
  if (Array.isArray(value[0])) {
    return toCssValue(value.map(joinWithSpace));
  }

  return value.join(', ');
}
});
__sbPundle.registerModule("../node_modules/jss/lib/utils/cloneStyle.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

exports.default = cloneStyle;
var isArray = Array.isArray;
function cloneStyle(style) {
  // Support empty values in case user ends up with them by accident.
  if (style == null) return style;

  // Support string value for SimpleRule.
  var typeOfStyle = typeof style === 'undefined' ? 'undefined' : _typeof(style);
  if (typeOfStyle === 'string' || typeOfStyle === 'number') return style;

  // Support array for FontFaceRule.
  if (isArray(style)) return style.map(cloneStyle);

  var newStyle = {};
  for (var name in style) {
    var value = style[name];
    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
      newStyle[name] = cloneStyle(value);
      continue;
    }
    newStyle[name] = value;
  }

  return newStyle;
}
});
__sbPundle.registerModule("../node_modules/jss/lib/utils/updateRule.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports['default'] = function (rule, data, RuleList) {
  if (rule.type === 'style') {
    for (var prop in rule.style) {
      var value = rule.style[prop];
      if (typeof value === 'function') {
        rule.prop(prop, value(data));
      }
    }
  } else if (rule.rules instanceof RuleList) {
    rule.rules.update(data);
  }
};
});
__sbPundle.registerModule("../node_modules/jss/lib/utils/linkRule.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = linkRule;
/**
 * Link rule with CSSStyleRule and nested rules with corresponding nested cssRules if both exists.
 */
function linkRule(rule, cssRule) {
  rule.renderable = cssRule;
  if (rule.rules && cssRule.cssRules) rule.rules.link(cssRule.cssRules);
}
});
__sbPundle.registerModule("../node_modules/jss/lib/sheets.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _SheetsRegistry = require('1258');

var _SheetsRegistry2 = _interopRequireDefault(_SheetsRegistry);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

/**
 * This is a global sheets registry. Only DomRenderer will add sheets to it.
 * On the server one should use an own SheetsRegistry instance and add the
 * sheets to it, because you need to make sure to create a new registry for
 * each request in order to not leak sheets across requests.
 */
exports['default'] = new _SheetsRegistry2['default']();
});
__sbPundle.registerModule("../node_modules/jss/lib/Jss.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _StyleSheet = require('1263');

var _StyleSheet2 = _interopRequireDefault(_StyleSheet);

var _PluginsRegistry = require('1264');

var _PluginsRegistry2 = _interopRequireDefault(_PluginsRegistry);

var _rules = require('1265');

var _rules2 = _interopRequireDefault(_rules);

var _sheets = require('1266');

var _sheets2 = _interopRequireDefault(_sheets);

var _createGenerateClassName = require('1267');

var _createGenerateClassName2 = _interopRequireDefault(_createGenerateClassName);

var _createRule2 = require('1268');

var _createRule3 = _interopRequireDefault(_createRule2);

var _findRenderer = require('1269');

var _findRenderer2 = _interopRequireDefault(_findRenderer);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Jss = function () {
  function Jss(options) {
    _classCallCheck(this, Jss);

    this.version = "8.1.0";
    this.plugins = new _PluginsRegistry2['default']();

    // eslint-disable-next-line prefer-spread
    this.use.apply(this, _rules2['default']);
    this.setup(options);
  }

  _createClass(Jss, [{
    key: 'setup',
    value: function setup() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var createGenerateClassName = options.createGenerateClassName || _createGenerateClassName2['default'];
      this.generateClassName = createGenerateClassName();
      this.options = _extends({}, options, {
        createGenerateClassName: createGenerateClassName,
        Renderer: (0, _findRenderer2['default'])(options)
        // eslint-disable-next-line prefer-spread
      });if (options.plugins) this.use.apply(this, options.plugins);
      return this;
    }

    /**
     * Create a Style Sheet.
     */

  }, {
    key: 'createStyleSheet',
    value: function createStyleSheet(styles) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var index = options.index;
      if (typeof index !== 'number') {
        index = _sheets2['default'].index === 0 ? 0 : _sheets2['default'].index + 1;
      }
      var sheet = new _StyleSheet2['default'](styles, _extends({}, options, {
        jss: this,
        generateClassName: options.generateClassName || this.generateClassName,
        insertionPoint: this.options.insertionPoint,
        Renderer: this.options.Renderer,
        index: index
      }));
      this.plugins.onProcessSheet(sheet);
      return sheet;
    }

    /**
     * Detach the Style Sheet and remove it from the registry.
     */

  }, {
    key: 'removeStyleSheet',
    value: function removeStyleSheet(sheet) {
      sheet.detach();
      _sheets2['default'].remove(sheet);
      return this;
    }

    /**
     * Create a rule without a Style Sheet.
     */

  }, {
    key: 'createRule',
    value: function createRule(name) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // Enable rule without name for inline styles.
      if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
        options = style;
        style = name;
        name = undefined;
      }

      // Cast from RuleFactoryOptions to RuleOptions
      // https://stackoverflow.com/questions/41328728/force-casting-in-flow
      var ruleOptions = options;

      ruleOptions.jss = this;
      ruleOptions.Renderer = this.options.Renderer;
      if (!ruleOptions.generateClassName) ruleOptions.generateClassName = this.generateClassName;
      if (!ruleOptions.classes) ruleOptions.classes = {};
      var rule = (0, _createRule3['default'])(name, style, ruleOptions);
      this.plugins.onProcessRule(rule);

      return rule;
    }

    /**
     * Register plugin. Passed function will be invoked with a rule instance.
     */

  }, {
    key: 'use',
    value: function use() {
      var _this = this;

      for (var _len = arguments.length, plugins = Array(_len), _key = 0; _key < _len; _key++) {
        plugins[_key] = arguments[_key];
      }

      plugins.forEach(function (plugin) {
        return _this.plugins.use(plugin);
      });
      return this;
    }
  }]);

  return Jss;
}();

exports['default'] = Jss;
});
__sbPundle.registerModule("../node_modules/jss/lib/StyleSheet.js", function(__filename, __dirname, require, module, exports) {
(function(process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _linkRule = require('1373');

var _linkRule2 = _interopRequireDefault(_linkRule);

var _RuleList = require('1374');

var _RuleList2 = _interopRequireDefault(_RuleList);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var StyleSheet = function () {
  function StyleSheet(styles, options) {
    _classCallCheck(this, StyleSheet);

    this.attached = false;
    this.deployed = false;
    this.linked = false;
    this.classes = {};
    this.options = _extends({}, options, {
      sheet: this,
      parent: this,
      classes: this.classes
    });
    this.renderer = new options.Renderer(this);
    this.rules = new _RuleList2['default'](this.options);

    for (var name in styles) {
      this.rules.add(name, styles[name]);
    }

    this.rules.process();
  }

  /**
   * Attach renderable to the render tree.
   */

  _createClass(StyleSheet, [{
    key: 'attach',
    value: function attach() {
      if (this.attached) return this;
      if (!this.deployed) this.deploy();
      this.renderer.attach();
      if (!this.linked && this.options.link) this.link();
      this.attached = true;
      return this;
    }

    /**
     * Remove renderable from render tree.
     */

  }, {
    key: 'detach',
    value: function detach() {
      if (!this.attached) return this;
      this.renderer.detach();
      this.attached = false;
      return this;
    }

    /**
     * Add a rule to the current stylesheet.
     * Will insert a rule also after the stylesheet has been rendered first time.
     */

  }, {
    key: 'addRule',
    value: function addRule(name, decl, options) {
      var queue = this.queue;

      // Plugins can create rules.
      // In order to preserve the right order, we need to queue all `.addRule` calls,
      // which happen after the first `rules.add()` call.

      if (this.attached && !queue) this.queue = [];

      var rule = this.rules.add(name, decl, options);
      this.options.jss.plugins.onProcessRule(rule);

      if (this.attached) {
        if (!this.deployed) return rule;
        // Don't insert rule directly if there is no stringified version yet.
        // It will be inserted all together when .attach is called.
        if (queue) queue.push(rule);else {
          this.insertRule(rule);
          if (this.queue) {
            this.queue.forEach(this.insertRule, this);
            this.queue = undefined;
          }
        }
        return rule;
      }

      // We can't add rules to a detached style node.
      // We will redeploy the sheet once user will attach it.
      this.deployed = false;

      return rule;
    }

    /**
     * Insert rule into the StyleSheet
     */

  }, {
    key: 'insertRule',
    value: function insertRule(rule) {
      var renderable = this.renderer.insertRule(rule);
      if (renderable && this.options.link) (0, _linkRule2['default'])(rule, renderable);
    }

    /**
     * Create and add rules.
     * Will render also after Style Sheet was rendered the first time.
     */

  }, {
    key: 'addRules',
    value: function addRules(styles, options) {
      var added = [];
      for (var name in styles) {
        added.push(this.addRule(name, styles[name], options));
      }
      return added;
    }

    /**
     * Get a rule by name.
     */

  }, {
    key: 'getRule',
    value: function getRule(name) {
      return this.rules.get(name);
    }

    /**
     * Delete a rule by name.
     * Returns `true`: if rule has been deleted from the DOM.
     */

  }, {
    key: 'deleteRule',
    value: function deleteRule(name) {
      var rule = this.rules.get(name);

      if (!rule) return false;

      this.rules.remove(rule);

      if (this.attached && rule.renderable) {
        return this.renderer.deleteRule(rule.renderable);
      }

      return true;
    }

    /**
     * Get index of a rule.
     */

  }, {
    key: 'indexOf',
    value: function indexOf(rule) {
      return this.rules.indexOf(rule);
    }

    /**
     * Deploy pure CSS string to a renderable.
     */

  }, {
    key: 'deploy',
    value: function deploy() {
      this.renderer.deploy();
      this.deployed = true;
      return this;
    }

    /**
     * Link renderable CSS rules from sheet with their corresponding models.
     */

  }, {
    key: 'link',
    value: function link() {
      var cssRules = this.renderer.getRules();

      // Is undefined when VirtualRenderer is used.
      if (cssRules) this.rules.link(cssRules);
      this.linked = true;
      return this;
    }

    /**
     * Update the function values with a new data.
     */

  }, {
    key: 'update',
    value: function update(name, data) {
      this.rules.update(name, data);
      return this;
    }

    /**
     * Convert rules to a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString(options) {
      return this.rules.toString(options);
    }
  }]);

  return StyleSheet;
}();

exports['default'] = StyleSheet;
})(require(1375))
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/process/browser.js", function(__filename, __dirname, require, module, exports) {
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;

  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};

// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};
});
__sbPundle.registerModule("../node_modules/jss/lib/PluginsRegistry.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _warning = require('1372');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var PluginsRegistry = function () {
  function PluginsRegistry() {
    _classCallCheck(this, PluginsRegistry);

    this.hooks = {
      onCreateRule: [],
      onProcessRule: [],
      onProcessStyle: [],
      onProcessSheet: [],
      onChangeValue: []

      /**
       * Call `onCreateRule` hooks and return an object if returned by a hook.
       */
    };
  }

  _createClass(PluginsRegistry, [{
    key: 'onCreateRule',
    value: function onCreateRule(name, decl, options) {
      for (var i = 0; i < this.hooks.onCreateRule.length; i++) {
        var rule = this.hooks.onCreateRule[i](name, decl, options);
        if (rule) return rule;
      }
      return null;
    }

    /**
     * Call `onProcessRule` hooks.
     */

  }, {
    key: 'onProcessRule',
    value: function onProcessRule(rule) {
      if (rule.isProcessed) return;
      var sheet = rule.options.sheet;

      for (var i = 0; i < this.hooks.onProcessRule.length; i++) {
        this.hooks.onProcessRule[i](rule, sheet);
      }

      // $FlowFixMe
      if (rule.style) this.onProcessStyle(rule.style, rule, sheet);

      rule.isProcessed = true;
    }

    /**
     * Call `onProcessStyle` hooks.
     */

  }, {
    key: 'onProcessStyle',
    value: function onProcessStyle(style, rule, sheet) {
      var nextStyle = style;

      for (var i = 0; i < this.hooks.onProcessStyle.length; i++) {
        nextStyle = this.hooks.onProcessStyle[i](nextStyle, rule, sheet);
        // $FlowFixMe
        rule.style = nextStyle;
      }
    }

    /**
     * Call `onProcessSheet` hooks.
     */

  }, {
    key: 'onProcessSheet',
    value: function onProcessSheet(sheet) {
      for (var i = 0; i < this.hooks.onProcessSheet.length; i++) {
        this.hooks.onProcessSheet[i](sheet);
      }
    }

    /**
     * Call `onChangeValue` hooks.
     */

  }, {
    key: 'onChangeValue',
    value: function onChangeValue(value, prop, rule) {
      var processedValue = value;
      for (var i = 0; i < this.hooks.onChangeValue.length; i++) {
        processedValue = this.hooks.onChangeValue[i](processedValue, prop, rule);
      }
      return processedValue;
    }

    /**
     * Register a plugin.
     * If function is passed, it is a shortcut for `{onProcessRule}`.
     */

  }, {
    key: 'use',
    value: function use(plugin) {
      for (var name in plugin) {
        if (this.hooks[name]) this.hooks[name].push(plugin[name]);else (0, _warning2['default'])(false, '[JSS] Unknown hook "%s".', name);
      }
    }
  }]);

  return PluginsRegistry;
}();

exports['default'] = PluginsRegistry;
});
__sbPundle.registerModule("../node_modules/jss/lib/plugins/rules.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _SimpleRule = require('1388');

var _SimpleRule2 = _interopRequireDefault(_SimpleRule);

var _KeyframesRule = require('1389');

var _KeyframesRule2 = _interopRequireDefault(_KeyframesRule);

var _ConditionalRule = require('1390');

var _ConditionalRule2 = _interopRequireDefault(_ConditionalRule);

var _FontFaceRule = require('1391');

var _FontFaceRule2 = _interopRequireDefault(_FontFaceRule);

var _ViewportRule = require('1392');

var _ViewportRule2 = _interopRequireDefault(_ViewportRule);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var classes = {
  '@charset': _SimpleRule2['default'],
  '@import': _SimpleRule2['default'],
  '@namespace': _SimpleRule2['default'],
  '@keyframes': _KeyframesRule2['default'],
  '@media': _ConditionalRule2['default'],
  '@supports': _ConditionalRule2['default'],
  '@font-face': _FontFaceRule2['default'],
  '@viewport': _ViewportRule2['default'],
  '@-ms-viewport': _ViewportRule2['default']

  /**
   * Generate plugins which will register all rules.
   */
};
exports['default'] = Object.keys(classes).map(function (key) {
  // https://jsperf.com/indexof-vs-substr-vs-regex-at-the-beginning-3
  var re = new RegExp('^' + key);
  var onCreateRule = function onCreateRule(name, decl, options) {
    return re.test(name) ? new classes[key](name, decl, options) : null;
  };
  return { onCreateRule: onCreateRule };
});
});
__sbPundle.registerModule("../node_modules/jss/lib/rules/SimpleRule.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var SimpleRule = function () {
  function SimpleRule(key, value, options) {
    _classCallCheck(this, SimpleRule);

    this.type = 'simple';
    this.isProcessed = false;

    this.key = key;
    this.value = value;
    this.options = options;
  }

  /**
   * Generates a CSS string.
   */
  // eslint-disable-next-line no-unused-vars


  _createClass(SimpleRule, [{
    key: 'toString',
    value: function toString(options) {
      if (Array.isArray(this.value)) {
        var str = '';
        for (var index = 0; index < this.value.length; index++) {
          str += this.key + ' ' + this.value[index] + ';';
          if (this.value[index + 1]) str += '\n';
        }
        return str;
      }

      return this.key + ' ' + this.value + ';';
    }
  }]);

  return SimpleRule;
}();

exports['default'] = SimpleRule;
});
__sbPundle.registerModule("../node_modules/jss/lib/rules/KeyframesRule.js", function(__filename, __dirname, require, module, exports) {
(function(process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _RuleList = require('1473');

var _RuleList2 = _interopRequireDefault(_RuleList);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * Rule for @keyframes
 */
var KeyframesRule = function () {
  function KeyframesRule(key, frames, options) {
    _classCallCheck(this, KeyframesRule);

    this.type = 'keyframes';
    this.isProcessed = false;

    this.key = key;
    this.options = options;
    this.rules = new _RuleList2['default'](_extends({}, options, { parent: this }));

    for (var name in frames) {
      this.rules.add(name, frames[name], _extends({}, this.options, {
        parent: this,
        selector: name
      }));
    }

    this.rules.process();
  }

  /**
   * Generates a CSS string.
   */

  _createClass(KeyframesRule, [{
    key: 'toString',
    value: function toString() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { indent: 1 };

      var inner = this.rules.toString(options);
      if (inner) inner += '\n';
      return this.key + ' {\n' + inner + '}';
    }
  }]);

  return KeyframesRule;
}();

exports['default'] = KeyframesRule;
})(require(1474))
});
__sbPundle.registerModule("../node_modules/jss/lib/rules/ConditionalRule.js", function(__filename, __dirname, require, module, exports) {
(function(process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _RuleList = require('1476');

var _RuleList2 = _interopRequireDefault(_RuleList);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * Conditional rule for @media, @supports
 */
var ConditionalRule = function () {
  function ConditionalRule(key, styles, options) {
    _classCallCheck(this, ConditionalRule);

    this.type = 'conditional';
    this.isProcessed = false;

    this.key = key;
    this.options = options;
    this.rules = new _RuleList2['default'](_extends({}, options, { parent: this }));

    for (var name in styles) {
      this.rules.add(name, styles[name]);
    }

    this.rules.process();
  }

  /**
   * Get a rule.
   */

  _createClass(ConditionalRule, [{
    key: 'getRule',
    value: function getRule(name) {
      return this.rules.get(name);
    }

    /**
     * Get index of a rule.
     */

  }, {
    key: 'indexOf',
    value: function indexOf(rule) {
      return this.rules.indexOf(rule);
    }

    /**
     * Create and register rule, run plugins.
     */

  }, {
    key: 'addRule',
    value: function addRule(name, style, options) {
      var rule = this.rules.add(name, style, options);
      this.options.jss.plugins.onProcessRule(rule);
      return rule;
    }

    /**
     * Generates a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { indent: 1 };

      var inner = this.rules.toString(options);
      return inner ? this.key + ' {\n' + inner + '\n}' : '';
    }
  }]);

  return ConditionalRule;
}();

exports['default'] = ConditionalRule;
})(require(1477))
});
__sbPundle.registerModule("../node_modules/jss/lib/rules/FontFaceRule.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _toCss = require('1479');

var _toCss2 = _interopRequireDefault(_toCss);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var FontFaceRule = function () {
  function FontFaceRule(key, style, options) {
    _classCallCheck(this, FontFaceRule);

    this.type = 'font-face';
    this.isProcessed = false;

    this.key = key;
    this.style = style;
    this.options = options;
  }

  /**
   * Generates a CSS string.
   */

  _createClass(FontFaceRule, [{
    key: 'toString',
    value: function toString(options) {
      if (Array.isArray(this.style)) {
        var str = '';
        for (var index = 0; index < this.style.length; index++) {
          str += (0, _toCss2['default'])(this.key, this.style[index]);
          if (this.style[index + 1]) str += '\n';
        }
        return str;
      }

      return (0, _toCss2['default'])(this.key, this.style, options);
    }
  }]);

  return FontFaceRule;
}();

exports['default'] = FontFaceRule;
});
__sbPundle.registerModule("../node_modules/jss/lib/rules/ViewportRule.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _toCss = require('1478');

var _toCss2 = _interopRequireDefault(_toCss);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var ViewportRule = function () {
  function ViewportRule(key, style, options) {
    _classCallCheck(this, ViewportRule);

    this.type = 'viewport';
    this.isProcessed = false;

    this.key = key;
    this.style = style;
    this.options = options;
  }

  /**
   * Generates a CSS string.
   */

  _createClass(ViewportRule, [{
    key: 'toString',
    value: function toString(options) {
      return (0, _toCss2['default'])(this.key, this.style, options);
    }
  }]);

  return ViewportRule;
}();

exports['default'] = ViewportRule;
});
__sbPundle.registerModule("../node_modules/jss/lib/utils/createGenerateClassName.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var globalRef = typeof window === 'undefined' ? global : window;

var namespace = '__JSS_VERSION_COUNTER__';
if (globalRef[namespace] == null) globalRef[namespace] = 0;
// In case we have more than one JSS version.
var jssCounter = globalRef[namespace]++;

/**
 * Returns a function which generates unique class names based on counters.
 * When new generator function is created, rule counter is reseted.
 * We need to reset the rule counter for SSR for each request.
 */

exports['default'] = function () {
  var ruleCounter = 0;

  return function (rule) {
    return rule.key + '-' + jssCounter + '-' + ruleCounter++;
  };
};
});
__sbPundle.registerModule("../node_modules/jss/lib/utils/findRenderer.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = findRenderer;

var _isInBrowser = require('1383');

var _isInBrowser2 = _interopRequireDefault(_isInBrowser);

var _DomRenderer = require('1384');

var _DomRenderer2 = _interopRequireDefault(_DomRenderer);

var _VirtualRenderer = require('1385');

var _VirtualRenderer2 = _interopRequireDefault(_VirtualRenderer);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

/**
 * Find proper renderer.
 * Option `virtual` is used to force use of VirtualRenderer even if DOM is
 * detected, used for testing only.
 */
function findRenderer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (options.Renderer) return options.Renderer;
  var useVirtual = options.virtual || !_isInBrowser2['default'];
  return useVirtual ? _VirtualRenderer2['default'] : _DomRenderer2['default'];
}
});
__sbPundle.registerModule("../node_modules/jss/node_modules/is-in-browser/dist/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var isBrowser = exports.isBrowser = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof(document)) === 'object' && document.nodeType === 9;

exports.default = isBrowser;
});
__sbPundle.registerModule("../node_modules/jss/lib/renderers/DomRenderer.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _warning = require('1471');

var _warning2 = _interopRequireDefault(_warning);

var _sheets = require('1472');

var _sheets2 = _interopRequireDefault(_sheets);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * Get a style property.
 */
function getStyle(rule, prop) {
  try {
    return rule.style.getPropertyValue(prop);
  } catch (err) {
    // IE may throw if property is unknown.
    return '';
  }
}

/**
 * Set a style property.
 */
function setStyle(rule, prop, value) {
  try {
    rule.style.setProperty(prop, value);
  } catch (err) {
    // IE may throw if property is unknown.
    return false;
  }
  return true;
}

function extractSelector(cssText) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  return cssText.substr(from, cssText.indexOf('{') - 1);
}

var CSSRuleTypes = {
  STYLE_RULE: 1,
  KEYFRAMES_RULE: 7

  /**
   * Get the selector.
   */
};function getSelector(rule) {
  if (rule.type === CSSRuleTypes.STYLE_RULE) return rule.selectorText;
  if (rule.type === CSSRuleTypes.KEYFRAMES_RULE) {
    var name = rule.name;

    if (name) return '@keyframes ' + name;

    // There is no rule.name in the following browsers:
    // - IE 9
    // - Safari 7.1.8
    // - Mobile Safari 9.0.0
    var cssText = rule.cssText;

    return '@' + extractSelector(cssText, cssText.indexOf('keyframes'));
  }

  return extractSelector(rule.cssText);
}

/**
 * Set the selector.
 */
function setSelector(rule, selectorText) {
  rule.selectorText = selectorText;

  // Return false if setter was not successful.
  // Currently works in chrome only.
  return rule.selectorText === selectorText;
}

/**
 * Gets the `head` element upon the first call and caches it.
 */
var getHead = function () {
  var head = void 0;
  return function () {
    if (!head) head = document.head || document.getElementsByTagName('head')[0];
    return head;
  };
}();

/**
 * Find attached sheet with an index higher than the passed one.
 */
function findHigherSheet(registry, options) {
  for (var i = 0; i < registry.length; i++) {
    var sheet = registry[i];
    if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
      return sheet;
    }
  }
  return null;
}

/**
 * Find attached sheet with the highest index.
 */
function findHighestSheet(registry, options) {
  for (var i = registry.length - 1; i >= 0; i--) {
    var sheet = registry[i];
    if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
      return sheet;
    }
  }
  return null;
}

/**
 * Find a comment with "jss" inside.
 */
function findCommentNode(text) {
  var head = getHead();
  for (var i = 0; i < head.childNodes.length; i++) {
    var node = head.childNodes[i];
    if (node.nodeType === 8 && node.nodeValue.trim() === text) {
      return node;
    }
  }
  return null;
}

/**
 * Find a node before which we can insert the sheet.
 */
function findPrevNode(options) {
  var registry = _sheets2['default'].registry;

  if (registry.length > 0) {
    // Try to insert before the next higher sheet.
    var sheet = findHigherSheet(registry, options);
    if (sheet) return sheet.renderer.element;

    // Otherwise insert after the last attached.
    sheet = findHighestSheet(registry, options);
    if (sheet) return sheet.renderer.element.nextElementSibling;
  }

  // Try to find a comment placeholder if registry is empty.
  var insertionPoint = options.insertionPoint;

  if (insertionPoint && typeof insertionPoint === 'string') {
    var comment = findCommentNode(insertionPoint);
    if (comment) return comment.nextSibling;
    // If user specifies an insertion point and it can't be found in the document -
    // bad specificity issues may appear.
    (0, _warning2['default'])(insertionPoint === 'jss', '[JSS] Insertion point "%s" not found.', insertionPoint);
  }

  return null;
}

/**
 * Insert style element into the DOM.
 */
function insertStyle(style, options) {
  var insertionPoint = options.insertionPoint;

  var prevNode = findPrevNode(options);

  if (prevNode) {
    var parentNode = prevNode.parentNode;

    if (parentNode) parentNode.insertBefore(style, prevNode);
    return;
  }

  // Works with iframes and any node types.
  if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
    // https://stackoverflow.com/questions/41328728/force-casting-in-flow
    var insertionPointElement = insertionPoint;
    var _parentNode = insertionPointElement.parentNode;

    if (_parentNode) _parentNode.insertBefore(style, insertionPointElement.nextSibling);else (0, _warning2['default'])(false, '[JSS] Insertion point is not in the DOM.');
    return;
  }

  getHead().insertBefore(style, prevNode);
}

var DomRenderer = function () {
  function DomRenderer(sheet) {
    _classCallCheck(this, DomRenderer);

    this.getStyle = getStyle;
    this.setStyle = setStyle;
    this.setSelector = setSelector;
    this.getSelector = getSelector;
    this.hasInsertedRules = false;

    // There is no sheet when the renderer is used from a standalone StyleRule.
    if (sheet) _sheets2['default'].add(sheet);

    this.sheet = sheet;

    var _ref = this.sheet ? this.sheet.options : {},
        media = _ref.media,
        meta = _ref.meta,
        element = _ref.element;

    this.element = element || document.createElement('style');
    this.element.type = 'text/css';
    this.element.setAttribute('data-jss', '');
    if (media) this.element.setAttribute('media', media);
    if (meta) this.element.setAttribute('data-meta', meta);
  }

  /**
   * Insert style element into render tree.
   */

  // HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696


  _createClass(DomRenderer, [{
    key: 'attach',
    value: function attach() {
      // In the case the element node is external and it is already in the DOM.
      if (this.element.parentNode || !this.sheet) return;

      // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
      // browsers remove those rules.
      // TODO figure out if its a bug and if it is known.
      // Workaround is to redeploy the sheet before attaching as a string.
      if (this.hasInsertedRules) {
        this.deploy();
        this.hasInsertedRules = false;
      }

      insertStyle(this.element, this.sheet.options);
    }

    /**
     * Remove style element from render tree.
     */

  }, {
    key: 'detach',
    value: function detach() {
      this.element.parentNode.removeChild(this.element);
    }

    /**
     * Inject CSS string into element.
     */

  }, {
    key: 'deploy',
    value: function deploy() {
      if (!this.sheet) return;
      this.element.textContent = '\n' + this.sheet.toString() + '\n';
    }

    /**
     * Insert a rule into element.
     */

  }, {
    key: 'insertRule',
    value: function insertRule(rule) {
      var sheet = this.element.sheet;
      var cssRules = sheet.cssRules;

      var index = cssRules.length;
      var str = rule.toString();

      if (!str) return false;

      try {
        sheet.insertRule(str, index);
      } catch (err) {
        (0, _warning2['default'])(false, '[JSS] Can not insert an unsupported rule \n\r%s', rule);
        return false;
      }

      this.hasInsertedRules = true;

      return cssRules[index];
    }

    /**
     * Delete a rule.
     */

  }, {
    key: 'deleteRule',
    value: function deleteRule(rule) {
      var sheet = this.element.sheet;
      var cssRules = sheet.cssRules;

      for (var _index = 0; _index < cssRules.length; _index++) {
        if (rule === cssRules[_index]) {
          sheet.deleteRule(_index);
          return true;
        }
      }
      return false;
    }

    /**
     * Get all rules elements.
     */

  }, {
    key: 'getRules',
    value: function getRules() {
      return this.element.sheet.cssRules;
    }
  }]);

  return DomRenderer;
}();

exports['default'] = DomRenderer;
});
__sbPundle.registerModule("../node_modules/jss/lib/renderers/VirtualRenderer.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/* eslint-disable class-methods-use-this */

/**
 * Rendering backend to do nothing in nodejs.
 */
var VirtualRenderer = function () {
  function VirtualRenderer() {
    _classCallCheck(this, VirtualRenderer);
  }

  _createClass(VirtualRenderer, [{
    key: 'setStyle',
    value: function setStyle() {
      return true;
    }
  }, {
    key: 'getStyle',
    value: function getStyle() {
      return '';
    }
  }, {
    key: 'setSelector',
    value: function setSelector() {
      return true;
    }
  }, {
    key: 'getSelector',
    value: function getSelector() {
      return '';
    }
  }, {
    key: 'attach',
    value: function attach() {}
  }, {
    key: 'detach',
    value: function detach() {}
  }, {
    key: 'deploy',
    value: function deploy() {}
  }, {
    key: 'insertRule',
    value: function insertRule() {
      return false;
    }
  }, {
    key: 'deleteRule',
    value: function deleteRule() {
      return true;
    }
  }, {
    key: 'getRules',
    value: function getRules() {}
  }]);

  return VirtualRenderer;
}();

exports['default'] = VirtualRenderer;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/components/themeProvide.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp;

var _react = require('2841');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('2842');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

let ThemeProvide = (_temp = _class = class ThemeProvide extends _react2.default.Component {

  getChildContext() {
    return {
      uiThemes: this.props,
      provided: {}
    };
  }

  render() {
    return this.props.children;
  }
}, _class.childContextTypes = {
  uiThemes: _propTypes.object,
  provided: _propTypes.object
}, _temp);
exports.default = ThemeProvide;
//# sourceMappingURL=themeProvide.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/components/theme.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp;

var _react = require('2843');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('2844');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

let Theme = (_temp = _class = class Theme extends _react2.default.Component {

  getChildContext() {
    if (this.props.name) {
      const uiActiveTheme = this.props.name || this.props.theme;
      return {
        uiActiveTheme,
        theme: this.context.uiTheme[uiActiveTheme]
      };
    }
  }

  render() {
    return this.props.children;
  }
}, _class.contextTypes = {
  uiTheme: _propTypes.object
}, _class.childContextTypes = {
  uiActiveTheme: _propTypes.string,
  theme: _propTypes.object
}, _temp);
exports.default = Theme;
//# sourceMappingURL=theme.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/baseStyles.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  style: styles => styles,
  flex: flex => ({ flex: flex === true ? 1 : flex }),
  absolute: ([top, right, bottom, left]) => ({
    top,
    left,
    bottom,
    right,
    position: 'absolute'
  }),
  // direct
  opacity: opacity => ({ opacity }),
  zIndex: zIndex => ({ zIndex }),
  color: color => ({ color }),
  top: top => ({ top }),
  right: right => ({ right }),
  fontSize: fontSize => ({ fontSize }),
  lineHeight: lineHeight => ({ lineHeight }),
  bottom: bottom => ({ bottom }),
  left: left => ({ left }),
  position: position => ({ position }),
  padding: padding => ({ padding }),
  paddingLeft: paddingLeft => ({ paddingLeft }),
  paddingRight: paddingRight => ({ paddingRight }),
  paddingTop: paddingTop => ({ paddingTop }),
  paddingBottom: paddingBottom => ({ paddingBottom }),
  margin: margin => ({ margin }),
  marginLeft: marginLeft => ({ marginLeft }),
  marginRight: marginRight => ({ marginRight }),
  marginTop: marginTop => ({ marginTop }),
  marginBottom: marginBottom => ({ marginBottom }),
  borderLeft: borderLeft => ({ borderLeft }),
  borderRight: borderRight => ({ borderRight }),
  borderTop: borderTop => ({ borderTop }),
  borderBottom: borderBottom => ({ borderBottom }),
  align: alignItems => ({ alignItems }),
  alignItems: alignItems => ({ alignItems }),
  minHeight: minHeight => ({ minHeight }),
  maxHeight: maxHeight => ({ maxHeight }),
  minWidth: minWidth => ({ minWidth }),
  maxWidth: maxWidth => ({ maxWidth }),
  width: width => ({ width }),
  height: height => ({ height }),
  overflow: overflow => ({ overflow }),
  background: background => ({ background }),
  transition: transition => ({ transition }),
  hidden: val => ({ display: val ? 'none' : 'auto' }),
  show: val => ({ opacity: val ? 1 : 0 }),
  alignSelf: alignSelf => ({ alignSelf }),
  justify: justifyContent => ({ justifyContent }),
  row: {
    flexFlow: 'row'
  },
  col: {
    flexFlow: 'column'
  },
  centered: {
    alignItems: 'center',
    justifyContent: 'center',
    textAlign: 'center'
  },
  alignEnd: {
    alignItems: 'flex-end'
  },
  alignStart: {
    alignItems: 'flex-start'
  },
  justifyEnd: {
    justifyContent: 'flex-end'
  },
  justifyStart: {
    justifyContent: 'flex-start'
  },
  spaceBetween: {
    justifyContent: 'space-between'
  },
  fullscreen: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  },
  passthrough: {
    flexGrow: 'inherit',
    flexShrink: 'inherit',
    flexDirection: 'inherit',
    justifyContent: 'inherit',
    alignItems: 'inherit'
  },
  ellipse: {
    display: 'block',
    whiteSpace: 'pre',
    textOverflow: 'ellipsis',
    overflow: 'hidden'
  },
  draggable: {
    WebkitAppRegion: 'drag'
  },
  undraggable: {
    WebkitAppRegion: 'no-drag'
  },
  scrollable: {
    flex: 1,
    overflowY: 'auto'
  },
  padded: {
    padding: 20
  },
  ul: {
    margin: [10, 0, 10, 30],
    padding: 20
  },
  ol: {
    margin: [10, 0, 10, 20],
    padding: 0
  },
  li: {
    margin: 0,
    padding: 0,
    transition: 'opacity 150ms ease-in'
  },
  archive: {
    opacity: 0.4
  },
  noSelect: {
    userSelect: 'none'
  }
};
//# sourceMappingURL=baseStyles.js.map
});
__sbPundle.registerModule("$app/src/themes.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _ui = require('2');

const Theme = new _ui.ThemeMaker();
const highlightColor = '#fff';
const highlightBackground = 'rgb(114, 121, 167)';
const blank = {
  highlightBackground: 'transparent',
  highlightColor: 'transparent',
  background: 'transparent',
  color: '#fff',
  borderColor: 'transparent',
  buttonBackground: 'transparent'
};

const Themes = {
  light: Theme.fromStyles({
    highlightBackground,
    highlightColor,
    background: '#fff',
    color: '#555',
    borderColor: '#eee',
    buttonBackground: 'linear-gradient(#fff, #fefefe)'
  }),
  blank: {
    base: blank,
    hover: blank,
    active: blank,
    focus: blank,
    highlight: blank
  },
  clear: _extends({
    button: {
      borderTopWidth: 0,
      borderLeftWidth: 0,
      borderRightWidth: 0
    },
    glow: {
      color: [255, 255, 255, 0.1]
    }
  }, Theme.fromStyles({
    highlightBackground,
    highlightColor,
    background: [255, 255, 255, 1],
    color: '#555',
    borderColor: [0, 0, 0, 0.1]
  })),
  gray: Theme.fromStyles({
    highlightBackground,
    highlightColor,
    background: '#eee',
    color: '#666',
    borderColor: '#eee'
  }),
  dark: Theme.fromStyles({
    highlightBackground: [0, 0, 0, 0.05],
    highlightColor,
    background: '#333',
    color: '#fff',
    borderColor: '#222'
  })
};

window.Themes = Themes;
exports.default = Themes;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeText = exports.Select = exports.Field = exports.Toggle = exports.Checkbox = exports.Input = exports.Form = exports.Glint = exports.TiltHoverGlow = exports.Poof = exports.Grain = exports.HoverGlow = exports.Date = exports.SizedSurface = exports.Surface = exports.Circle = exports.View = exports.Progress = exports.Popover = exports.Text = exports.Tag = exports.Placeholder = exports.Title = exports.TabPane = exports.Row = exports.Pane = exports.Modal = exports.Icon = exports.Grid = exports.Loading = exports.ListItem = exports.List = exports.Link = exports.Card = exports.ContextMenu = exports.Ellipse = exports.Dropdown = exports.Drawer = exports.DefinitionList = exports.Button = exports.Badge = exports.Arrow = exports.keycode = exports.getTarget = exports.inject = exports.StableContainer = exports.Portal = exports.Virtualized = exports.offset = exports.PassProps = exports.Theme = exports.ThemeMaker = exports.ThemeProvide = exports.color = undefined;

var _color = require('2486');

var _color2 = _interopRequireDefault(_color);

var _gloss = require('2487');

var _themeMaker = require('2488');

var _themeMaker2 = _interopRequireDefault(_themeMaker);

var _theme = require('2489');

var _theme2 = _interopRequireDefault(_theme);

var _passProps = require('2490');

var _passProps2 = _interopRequireDefault(_passProps);

var _offset = require('2491');

var _offset2 = _interopRequireDefault(_offset);

var _reactVirtualized = require('2492');

var import_Virtualized = _interopRequireWildcard(_reactVirtualized);

var _portal = require('2493');

var _portal2 = _interopRequireDefault(_portal);

var _stableContainer = require('2494');

var _stableContainer2 = _interopRequireDefault(_stableContainer);

var _inject = require('2495');

var _inject2 = _interopRequireDefault(_inject);

var _getTarget = require('2496');

var _getTarget2 = _interopRequireDefault(_getTarget);

var _keycode = require('2497');

var _keycode2 = _interopRequireDefault(_keycode);

var _arrow = require('2498');

var _arrow2 = _interopRequireDefault(_arrow);

var _badge = require('2499');

var _badge2 = _interopRequireDefault(_badge);

var _button = require('2500');

var _button2 = _interopRequireDefault(_button);

var _definitionList = require('2501');

var _definitionList2 = _interopRequireDefault(_definitionList);

var _drawer = require('2502');

var _drawer2 = _interopRequireDefault(_drawer);

var _dropdown = require('2503');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _ellipse = require('2504');

var _ellipse2 = _interopRequireDefault(_ellipse);

var _contextMenu = require('2505');

var _contextMenu2 = _interopRequireDefault(_contextMenu);

var _card = require('2506');

var _card2 = _interopRequireDefault(_card);

var _link = require('2507');

var _link2 = _interopRequireDefault(_link);

var _list = require('2508');

var _list2 = _interopRequireDefault(_list);

var _listItem = require('2509');

var _listItem2 = _interopRequireDefault(_listItem);

var _loading = require('2510');

var _loading2 = _interopRequireDefault(_loading);

var _grid = require('2511');

var _grid2 = _interopRequireDefault(_grid);

var _icon = require('2512');

var _icon2 = _interopRequireDefault(_icon);

var _modal = require('2513');

var _modal2 = _interopRequireDefault(_modal);

var _pane = require('2514');

var _pane2 = _interopRequireDefault(_pane);

var _row = require('2515');

var _row2 = _interopRequireDefault(_row);

var _tabPane = require('2516');

var _tabPane2 = _interopRequireDefault(_tabPane);

var _title = require('2517');

var _title2 = _interopRequireDefault(_title);

var _placeholder = require('2518');

var _placeholder2 = _interopRequireDefault(_placeholder);

var _tag = require('2519');

var _tag2 = _interopRequireDefault(_tag);

var _text = require('2520');

var _text2 = _interopRequireDefault(_text);

var _popover = require('2521');

var _popover2 = _interopRequireDefault(_popover);

var _progress = require('2522');

var _progress2 = _interopRequireDefault(_progress);

var _view = require('2523');

var _view2 = _interopRequireDefault(_view);

var _circle = require('2524');

var _circle2 = _interopRequireDefault(_circle);

var _surface = require('2525');

var _surface2 = _interopRequireDefault(_surface);

var _sizedSurface = require('2526');

var _sizedSurface2 = _interopRequireDefault(_sizedSurface);

var _date = require('2527');

var _date2 = _interopRequireDefault(_date);

var _fakeText = require('2528');

var _fakeText2 = _interopRequireDefault(_fakeText);

var _hoverGlow = require('2529');

var _hoverGlow2 = _interopRequireDefault(_hoverGlow);

var _grain = require('2530');

var _grain2 = _interopRequireDefault(_grain);

var _poof = require('2531');

var _poof2 = _interopRequireDefault(_poof);

var _tiltHoverGlow = require('2532');

var _tiltHoverGlow2 = _interopRequireDefault(_tiltHoverGlow);

var _glint = require('2533');

var _glint2 = _interopRequireDefault(_glint);

var _form = require('2534');

var _form2 = _interopRequireDefault(_form);

var _input = require('2535');

var _input2 = _interopRequireDefault(_input);

var _checkbox = require('2536');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _toggle = require('2537');

var _toggle2 = _interopRequireDefault(_toggle);

var _field = require('2538');

var _field2 = _interopRequireDefault(_field);

var _select = require('2539');

var _select2 = _interopRequireDefault(_select);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// form


// base

// helpers
const color = exports.color = _color2.default;

// effects
const ThemeProvide = exports.ThemeProvide = _gloss.ThemeProvide;
const ThemeMaker = exports.ThemeMaker = _themeMaker2.default;
const Theme = exports.Theme = _theme2.default;
const PassProps = exports.PassProps = _passProps2.default;
const offset = exports.offset = _offset2.default;
const Virtualized = exports.Virtualized = import_Virtualized;
const Portal = exports.Portal = _portal2.default;
const StableContainer = exports.StableContainer = _stableContainer2.default;
const inject = exports.inject = _inject2.default;
const getTarget = exports.getTarget = _getTarget2.default;
const keycode = exports.keycode = _keycode2.default;
const Arrow = exports.Arrow = _arrow2.default;
const Badge = exports.Badge = _badge2.default;
const Button = exports.Button = _button2.default;
const DefinitionList = exports.DefinitionList = _definitionList2.default;
const Drawer = exports.Drawer = _drawer2.default;
const Dropdown = exports.Dropdown = _dropdown2.default;
const Ellipse = exports.Ellipse = _ellipse2.default;
const ContextMenu = exports.ContextMenu = _contextMenu2.default;
const Card = exports.Card = _card2.default;
const Link = exports.Link = _link2.default;
const List = exports.List = _list2.default;
const ListItem = exports.ListItem = _listItem2.default;
const Loading = exports.Loading = _loading2.default;
const Grid = exports.Grid = _grid2.default;
const Icon = exports.Icon = _icon2.default;
const Modal = exports.Modal = _modal2.default;
const Pane = exports.Pane = _pane2.default;
const Row = exports.Row = _row2.default;
const TabPane = exports.TabPane = _tabPane2.default;
const Title = exports.Title = _title2.default;
const Placeholder = exports.Placeholder = _placeholder2.default;
const Tag = exports.Tag = _tag2.default;
const Text = exports.Text = _text2.default;
const Popover = exports.Popover = _popover2.default;
const Progress = exports.Progress = _progress2.default;
const View = exports.View = _view2.default;
const Circle = exports.Circle = _circle2.default;
const Surface = exports.Surface = _surface2.default;
const SizedSurface = exports.SizedSurface = _sizedSurface2.default;
const Date = exports.Date = _date2.default;
const HoverGlow = exports.HoverGlow = _hoverGlow2.default;
const Grain = exports.Grain = _grain2.default;
const Poof = exports.Poof = _poof2.default;
const TiltHoverGlow = exports.TiltHoverGlow = _tiltHoverGlow2.default;
const Glint = exports.Glint = _glint2.default;
const Form = exports.Form = _form2.default;
const Input = exports.Input = _input2.default;
const Checkbox = exports.Checkbox = _checkbox2.default;
const Toggle = exports.Toggle = _toggle2.default;
const Field = exports.Field = _field2.default;
const Select = exports.Select = _select2.default;
const FakeText = exports.FakeText = _fakeText2.default;
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("../node_modules/color/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

var colorString = require('785');
var convert = require('786');

var _slice = [].slice;

var skippedModels = [
// to be honest, I don't really feel like keyword belongs in color convert, but eh.
'keyword',

// gray conflicts with some method names, and has its own method defined.
'gray',

// shouldn't really be in color-convert either...
'hex'];

var hashedModelKeys = {};
Object.keys(convert).forEach(function (model) {
  hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
});

var limiters = {};

function Color(obj, model) {
  if (!(this instanceof Color)) {
    return new Color(obj, model);
  }

  if (model && model in skippedModels) {
    model = null;
  }

  if (model && !(model in convert)) {
    throw new Error('Unknown model: ' + model);
  }

  var i;
  var channels;

  if (!obj) {
    this.model = 'rgb';
    this.color = [0, 0, 0];
    this.valpha = 1;
  } else if (obj instanceof Color) {
    this.model = obj.model;
    this.color = obj.color.slice();
    this.valpha = obj.valpha;
  } else if (typeof obj === 'string') {
    var result = colorString.get(obj);
    if (result === null) {
      throw new Error('Unable to parse color from string: ' + obj);
    }

    this.model = result.model;
    channels = convert[this.model].channels;
    this.color = result.value.slice(0, channels);
    this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
  } else if (obj.length) {
    this.model = model || 'rgb';
    channels = convert[this.model].channels;
    var newArr = _slice.call(obj, 0, channels);
    this.color = zeroArray(newArr, channels);
    this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
  } else if (typeof obj === 'number') {
    // this is always RGB - can be converted later on.
    obj &= 0xFFFFFF;
    this.model = 'rgb';
    this.color = [obj >> 16 & 0xFF, obj >> 8 & 0xFF, obj & 0xFF];
    this.valpha = 1;
  } else {
    this.valpha = 1;

    var keys = Object.keys(obj);
    if ('alpha' in obj) {
      keys.splice(keys.indexOf('alpha'), 1);
      this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
    }

    var hashedKeys = keys.sort().join('');
    if (!(hashedKeys in hashedModelKeys)) {
      throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
    }

    this.model = hashedModelKeys[hashedKeys];

    var labels = convert[this.model].labels;
    var color = [];
    for (i = 0; i < labels.length; i++) {
      color.push(obj[labels[i]]);
    }

    this.color = zeroArray(color);
  }

  // perform limitations (clamping, etc.)
  if (limiters[this.model]) {
    channels = convert[this.model].channels;
    for (i = 0; i < channels; i++) {
      var limit = limiters[this.model][i];
      if (limit) {
        this.color[i] = limit(this.color[i]);
      }
    }
  }

  this.valpha = Math.max(0, Math.min(1, this.valpha));

  if (Object.freeze) {
    Object.freeze(this);
  }
}

Color.prototype = {
  toString: function () {
    return this.string();
  },

  toJSON: function () {
    return this[this.model]();
  },

  string: function (places) {
    var self = this.model in colorString.to ? this : this.rgb();
    self = self.round(typeof places === 'number' ? places : 1);
    var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
    return colorString.to[self.model](args);
  },

  percentString: function (places) {
    var self = this.rgb().round(typeof places === 'number' ? places : 1);
    var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
    return colorString.to.rgb.percent(args);
  },

  array: function () {
    return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
  },

  object: function () {
    var result = {};
    var channels = convert[this.model].channels;
    var labels = convert[this.model].labels;

    for (var i = 0; i < channels; i++) {
      result[labels[i]] = this.color[i];
    }

    if (this.valpha !== 1) {
      result.alpha = this.valpha;
    }

    return result;
  },

  unitArray: function () {
    var rgb = this.rgb().color;
    rgb[0] /= 255;
    rgb[1] /= 255;
    rgb[2] /= 255;

    if (this.valpha !== 1) {
      rgb.push(this.valpha);
    }

    return rgb;
  },

  unitObject: function () {
    var rgb = this.rgb().object();
    rgb.r /= 255;
    rgb.g /= 255;
    rgb.b /= 255;

    if (this.valpha !== 1) {
      rgb.alpha = this.valpha;
    }

    return rgb;
  },

  round: function (places) {
    places = Math.max(places || 0, 0);
    return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
  },

  alpha: function (val) {
    if (arguments.length) {
      return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
    }

    return this.valpha;
  },

  // rgb
  red: getset('rgb', 0, maxfn(255)),
  green: getset('rgb', 1, maxfn(255)),
  blue: getset('rgb', 2, maxfn(255)),

  hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) {
    return (val % 360 + 360) % 360;
  }), // eslint-disable-line brace-style

  saturationl: getset('hsl', 1, maxfn(100)),
  lightness: getset('hsl', 2, maxfn(100)),

  saturationv: getset('hsv', 1, maxfn(100)),
  value: getset('hsv', 2, maxfn(100)),

  chroma: getset('hcg', 1, maxfn(100)),
  gray: getset('hcg', 2, maxfn(100)),

  white: getset('hwb', 1, maxfn(100)),
  wblack: getset('hwb', 2, maxfn(100)),

  cyan: getset('cmyk', 0, maxfn(100)),
  magenta: getset('cmyk', 1, maxfn(100)),
  yellow: getset('cmyk', 2, maxfn(100)),
  black: getset('cmyk', 3, maxfn(100)),

  x: getset('xyz', 0, maxfn(100)),
  y: getset('xyz', 1, maxfn(100)),
  z: getset('xyz', 2, maxfn(100)),

  l: getset('lab', 0, maxfn(100)),
  a: getset('lab', 1),
  b: getset('lab', 2),

  keyword: function (val) {
    if (arguments.length) {
      return new Color(val);
    }

    return convert[this.model].keyword(this.color);
  },

  hex: function (val) {
    if (arguments.length) {
      return new Color(val);
    }

    return colorString.to.hex(this.rgb().round().color);
  },

  rgbNumber: function () {
    var rgb = this.rgb().color;
    return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;
  },

  luminosity: function () {
    // http://www.w3.org/TR/WCAG20/#relativeluminancedef
    var rgb = this.rgb().color;

    var lum = [];
    for (var i = 0; i < rgb.length; i++) {
      var chan = rgb[i] / 255;
      lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
    }

    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
  },

  contrast: function (color2) {
    // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    var lum1 = this.luminosity();
    var lum2 = color2.luminosity();

    if (lum1 > lum2) {
      return (lum1 + 0.05) / (lum2 + 0.05);
    }

    return (lum2 + 0.05) / (lum1 + 0.05);
  },

  level: function (color2) {
    var contrastRatio = this.contrast(color2);
    if (contrastRatio >= 7.1) {
      return 'AAA';
    }

    return contrastRatio >= 4.5 ? 'AA' : '';
  },

  dark: function () {
    // YIQ equation from http://24ways.org/2010/calculating-color-contrast
    var rgb = this.rgb().color;
    var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    return yiq < 128;
  },

  light: function () {
    return !this.dark();
  },

  negate: function () {
    var rgb = this.rgb();
    for (var i = 0; i < 3; i++) {
      rgb.color[i] = 255 - rgb.color[i];
    }
    return rgb;
  },

  lighten: function (ratio) {
    var hsl = this.hsl();
    hsl.color[2] += hsl.color[2] * ratio;
    return hsl;
  },

  darken: function (ratio) {
    var hsl = this.hsl();
    hsl.color[2] -= hsl.color[2] * ratio;
    return hsl;
  },

  saturate: function (ratio) {
    var hsl = this.hsl();
    hsl.color[1] += hsl.color[1] * ratio;
    return hsl;
  },

  desaturate: function (ratio) {
    var hsl = this.hsl();
    hsl.color[1] -= hsl.color[1] * ratio;
    return hsl;
  },

  whiten: function (ratio) {
    var hwb = this.hwb();
    hwb.color[1] += hwb.color[1] * ratio;
    return hwb;
  },

  blacken: function (ratio) {
    var hwb = this.hwb();
    hwb.color[2] += hwb.color[2] * ratio;
    return hwb;
  },

  grayscale: function () {
    // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    var rgb = this.rgb().color;
    var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    return Color.rgb(val, val, val);
  },

  fade: function (ratio) {
    return this.alpha(this.valpha - this.valpha * ratio);
  },

  opaquer: function (ratio) {
    return this.alpha(this.valpha + this.valpha * ratio);
  },

  rotate: function (degrees) {
    var hsl = this.hsl();
    var hue = hsl.color[0];
    hue = (hue + degrees) % 360;
    hue = hue < 0 ? 360 + hue : hue;
    hsl.color[0] = hue;
    return hsl;
  },

  mix: function (mixinColor, weight) {
    // ported from sass implementation in C
    // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
    var color1 = mixinColor.rgb();
    var color2 = this.rgb();
    var p = weight === undefined ? 0.5 : weight;

    var w = 2 * p - 1;
    var a = color1.alpha() - color2.alpha();

    var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    var w2 = 1 - w1;

    return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
  }
};

// model conversion methods and static constructors
Object.keys(convert).forEach(function (model) {
  if (skippedModels.indexOf(model) !== -1) {
    return;
  }

  var channels = convert[model].channels;

  // conversion methods
  Color.prototype[model] = function () {
    if (this.model === model) {
      return new Color(this);
    }

    if (arguments.length) {
      return new Color(arguments, model);
    }

    var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
    return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
  };

  // 'static' construction methods
  Color[model] = function (color) {
    if (typeof color === 'number') {
      color = zeroArray(_slice.call(arguments), channels);
    }
    return new Color(color, model);
  };
});

function roundTo(num, places) {
  return Number(num.toFixed(places));
}

function roundToPlace(places) {
  return function (num) {
    return roundTo(num, places);
  };
}

function getset(model, channel, modifier) {
  model = Array.isArray(model) ? model : [model];

  model.forEach(function (m) {
    (limiters[m] || (limiters[m] = []))[channel] = modifier;
  });

  model = model[0];

  return function (val) {
    var result;

    if (arguments.length) {
      if (modifier) {
        val = modifier(val);
      }

      result = this[model]();
      result.color[channel] = val;
      return result;
    }

    result = this[model]().color[channel];
    if (modifier) {
      result = modifier(result);
    }

    return result;
  };
}

function maxfn(max) {
  return function (v) {
    return Math.max(0, Math.min(max, v));
  };
}

function assertArray(val) {
  return Array.isArray(val) ? val : [val];
}

function zeroArray(arr, length) {
  for (var i = 0; i < length; i++) {
    if (typeof arr[i] !== 'number') {
      arr[i] = 0;
    }
  }

  return arr;
}

module.exports = Color;
});
__sbPundle.registerModule("../node_modules/color-string/index.js", function(__filename, __dirname, require, module, exports) {
/* MIT license */
var colorNames = require('1009');
var swizzle = require('1010');

var reverseNames = {};

// create a list of reverse color names
for (var name in colorNames) {
  if (colorNames.hasOwnProperty(name)) {
    reverseNames[colorNames[name]] = name;
  }
}

var cs = module.exports = {
  to: {}
};

cs.get = function (string) {
  var prefix = string.substring(0, 3).toLowerCase();
  var val;
  var model;
  switch (prefix) {
    case 'hsl':
      val = cs.get.hsl(string);
      model = 'hsl';
      break;
    case 'hwb':
      val = cs.get.hwb(string);
      model = 'hwb';
      break;
    default:
      val = cs.get.rgb(string);
      model = 'rgb';
      break;
  }

  if (!val) {
    return null;
  }

  return { model: model, value: val };
};

cs.get.rgb = function (string) {
  if (!string) {
    return null;
  }

  var abbr = /^#([a-f0-9]{3,4})$/i;
  var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
  var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  var keyword = /(\D+)/;

  var rgb = [0, 0, 0, 1];
  var match;
  var i;
  var hexAlpha;

  if (match = string.match(hex)) {
    hexAlpha = match[2];
    match = match[1];

    for (i = 0; i < 3; i++) {
      // https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
      var i2 = i * 2;
      rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
    }

    if (hexAlpha) {
      rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
    }
  } else if (match = string.match(abbr)) {
    match = match[1];
    hexAlpha = match[3];

    for (i = 0; i < 3; i++) {
      rgb[i] = parseInt(match[i] + match[i], 16);
    }

    if (hexAlpha) {
      rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
    }
  } else if (match = string.match(rgba)) {
    for (i = 0; i < 3; i++) {
      rgb[i] = parseInt(match[i + 1], 0);
    }

    if (match[4]) {
      rgb[3] = parseFloat(match[4]);
    }
  } else if (match = string.match(per)) {
    for (i = 0; i < 3; i++) {
      rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
    }

    if (match[4]) {
      rgb[3] = parseFloat(match[4]);
    }
  } else if (match = string.match(keyword)) {
    if (match[1] === 'transparent') {
      return [0, 0, 0, 0];
    }

    rgb = colorNames[match[1]];

    if (!rgb) {
      return null;
    }

    rgb[3] = 1;

    return rgb;
  } else {
    return null;
  }

  for (i = 0; i < 3; i++) {
    rgb[i] = clamp(rgb[i], 0, 255);
  }
  rgb[3] = clamp(rgb[3], 0, 1);

  return rgb;
};

cs.get.hsl = function (string) {
  if (!string) {
    return null;
  }

  var hsl = /^hsla?\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  var match = string.match(hsl);

  if (match) {
    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) % 360 + 360) % 360;
    var s = clamp(parseFloat(match[2]), 0, 100);
    var l = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

    return [h, s, l, a];
  }

  return null;
};

cs.get.hwb = function (string) {
  if (!string) {
    return null;
  }

  var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  var match = string.match(hwb);

  if (match) {
    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) % 360 + 360) % 360;
    var w = clamp(parseFloat(match[2]), 0, 100);
    var b = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    return [h, w, b, a];
  }

  return null;
};

cs.to.hex = function () {
  var rgba = swizzle(arguments);

  return '#' + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : '');
};

cs.to.rgb = function () {
  var rgba = swizzle(arguments);

  return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')' : 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
  var rgba = swizzle(arguments);

  var r = Math.round(rgba[0] / 255 * 100);
  var g = Math.round(rgba[1] / 255 * 100);
  var b = Math.round(rgba[2] / 255 * 100);

  return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)' : 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
  var hsla = swizzle(arguments);
  return hsla.length < 4 || hsla[3] === 1 ? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)' : 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
  var hwba = swizzle(arguments);

  var a = '';
  if (hwba.length >= 4 && hwba[3] !== 1) {
    a = ', ' + hwba[3];
  }

  return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
  return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
  return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return str.length < 2 ? '0' + str : str;
}
});
__sbPundle.registerModule("../node_modules/color-name/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

module.exports = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};
});
__sbPundle.registerModule("../node_modules/simple-swizzle/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

var isArrayish = require('1095');

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
  var results = [];

  for (var i = 0, len = args.length; i < len; i++) {
    var arg = args[i];

    if (isArrayish(arg)) {
      // http://jsperf.com/javascript-array-concat-vs-push/98
      results = concat.call(results, slice.call(arg));
    } else {
      results.push(arg);
    }
  }

  return results;
};

swizzle.wrap = function (fn) {
  return function () {
    return fn(swizzle(arguments));
  };
};
});
__sbPundle.registerModule("../node_modules/simple-swizzle/node_modules/is-arrayish/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

module.exports = function isArrayish(obj) {
  if (!obj || typeof obj === 'string') {
    return false;
  }

  return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');
};
});
__sbPundle.registerModule("../node_modules/color-convert/index.js", function(__filename, __dirname, require, module, exports) {
var conversions = require('1007');
var route = require('1008');

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
  var wrappedFn = function (args) {
    if (args === undefined || args === null) {
      return args;
    }

    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }

    return fn(args);
  };

  // preserve .conversion property if there is one
  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

function wrapRounded(fn) {
  var wrappedFn = function (args) {
    if (args === undefined || args === null) {
      return args;
    }

    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }

    var result = fn(args);

    // we're assuming the result is an array here.
    // see notice in conversions.js; don't use box types
    // in conversion functions.
    if (typeof result === 'object') {
      for (var len = result.length, i = 0; i < len; i++) {
        result[i] = Math.round(result[i]);
      }
    }

    return result;
  };

  // preserve .conversion property if there is one
  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

models.forEach(function (fromModel) {
  convert[fromModel] = {};

  Object.defineProperty(convert[fromModel], 'channels', { value: conversions[fromModel].channels });
  Object.defineProperty(convert[fromModel], 'labels', { value: conversions[fromModel].labels });

  var routes = route(fromModel);
  var routeModels = Object.keys(routes);

  routeModels.forEach(function (toModel) {
    var fn = routes[toModel];

    convert[fromModel][toModel] = wrapRounded(fn);
    convert[fromModel][toModel].raw = wrapRaw(fn);
  });
});

module.exports = convert;
});
__sbPundle.registerModule("../node_modules/color-convert/conversions.js", function(__filename, __dirname, require, module, exports) {
/* MIT license */
var cssKeywords = require('1075');

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in cssKeywords) {
  if (cssKeywords.hasOwnProperty(key)) {
    reverseKeywords[cssKeywords[key]] = key;
  }
}

var convert = module.exports = {
  rgb: { channels: 3, labels: 'rgb' },
  hsl: { channels: 3, labels: 'hsl' },
  hsv: { channels: 3, labels: 'hsv' },
  hwb: { channels: 3, labels: 'hwb' },
  cmyk: { channels: 4, labels: 'cmyk' },
  xyz: { channels: 3, labels: 'xyz' },
  lab: { channels: 3, labels: 'lab' },
  lch: { channels: 3, labels: 'lch' },
  hex: { channels: 1, labels: ['hex'] },
  keyword: { channels: 1, labels: ['keyword'] },
  ansi16: { channels: 1, labels: ['ansi16'] },
  ansi256: { channels: 1, labels: ['ansi256'] },
  hcg: { channels: 3, labels: ['h', 'c', 'g'] },
  apple: { channels: 3, labels: ['r16', 'g16', 'b16'] },
  gray: { channels: 1, labels: ['gray'] }
};

// hide .channels and .labels properties
for (var model in convert) {
  if (convert.hasOwnProperty(model)) {
    if (!('channels' in convert[model])) {
      throw new Error('missing channels property: ' + model);
    }

    if (!('labels' in convert[model])) {
      throw new Error('missing channel labels property: ' + model);
    }

    if (convert[model].labels.length !== convert[model].channels) {
      throw new Error('channel and label counts mismatch: ' + model);
    }

    var channels = convert[model].channels;
    var labels = convert[model].labels;
    delete convert[model].channels;
    delete convert[model].labels;
    Object.defineProperty(convert[model], 'channels', { value: channels });
    Object.defineProperty(convert[model], 'labels', { value: labels });
  }
}

convert.rgb.hsl = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var min = Math.min(r, g, b);
  var max = Math.max(r, g, b);
  var delta = max - min;
  var h;
  var s;
  var l;

  if (max === min) {
    h = 0;
  } else if (r === max) {
    h = (g - b) / delta;
  } else if (g === max) {
    h = 2 + (b - r) / delta;
  } else if (b === max) {
    h = 4 + (r - g) / delta;
  }

  h = Math.min(h * 60, 360);

  if (h < 0) {
    h += 360;
  }

  l = (min + max) / 2;

  if (max === min) {
    s = 0;
  } else if (l <= 0.5) {
    s = delta / (max + min);
  } else {
    s = delta / (2 - max - min);
  }

  return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
  var r = rgb[0];
  var g = rgb[1];
  var b = rgb[2];
  var min = Math.min(r, g, b);
  var max = Math.max(r, g, b);
  var delta = max - min;
  var h;
  var s;
  var v;

  if (max === 0) {
    s = 0;
  } else {
    s = delta / max * 1000 / 10;
  }

  if (max === min) {
    h = 0;
  } else if (r === max) {
    h = (g - b) / delta;
  } else if (g === max) {
    h = 2 + (b - r) / delta;
  } else if (b === max) {
    h = 4 + (r - g) / delta;
  }

  h = Math.min(h * 60, 360);

  if (h < 0) {
    h += 360;
  }

  v = max / 255 * 1000 / 10;

  return [h, s, v];
};

convert.rgb.hwb = function (rgb) {
  var r = rgb[0];
  var g = rgb[1];
  var b = rgb[2];
  var h = convert.rgb.hsl(rgb)[0];
  var w = 1 / 255 * Math.min(r, Math.min(g, b));

  b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

  return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var c;
  var m;
  var y;
  var k;

  k = Math.min(1 - r, 1 - g, 1 - b);
  c = (1 - r - k) / (1 - k) || 0;
  m = (1 - g - k) / (1 - k) || 0;
  y = (1 - b - k) / (1 - k) || 0;

  return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
  return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
}

convert.rgb.keyword = function (rgb) {
  var reversed = reverseKeywords[rgb];
  if (reversed) {
    return reversed;
  }

  var currentClosestDistance = Infinity;
  var currentClosestKeyword;

  for (var keyword in cssKeywords) {
    if (cssKeywords.hasOwnProperty(keyword)) {
      var value = cssKeywords[keyword];

      // Compute comparative distance
      var distance = comparativeDistance(rgb, value);

      // Check if its less, if so set as closest
      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
  }

  return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
  return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;

  // assume sRGB
  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;

  var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
  var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
  var z = r * 0.0193 + g * 0.1192 + b * 0.9505;

  return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
  var xyz = convert.rgb.xyz(rgb);
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;

  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
  var h = hsl[0] / 360;
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var t1;
  var t2;
  var t3;
  var rgb;
  var val;

  if (s === 0) {
    val = l * 255;
    return [val, val, val];
  }

  if (l < 0.5) {
    t2 = l * (1 + s);
  } else {
    t2 = l + s - l * s;
  }

  t1 = 2 * l - t2;

  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * -(i - 1);
    if (t3 < 0) {
      t3++;
    }
    if (t3 > 1) {
      t3--;
    }

    if (6 * t3 < 1) {
      val = t1 + (t2 - t1) * 6 * t3;
    } else if (2 * t3 < 1) {
      val = t2;
    } else if (3 * t3 < 2) {
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    } else {
      val = t1;
    }

    rgb[i] = val * 255;
  }

  return rgb;
};

convert.hsl.hsv = function (hsl) {
  var h = hsl[0];
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var smin = s;
  var lmin = Math.max(l, 0.01);
  var sv;
  var v;

  l *= 2;
  s *= l <= 1 ? l : 2 - l;
  smin *= lmin <= 1 ? lmin : 2 - lmin;
  v = (l + s) / 2;
  sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);

  return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
  var h = hsv[0] / 60;
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var hi = Math.floor(h) % 6;

  var f = h - Math.floor(h);
  var p = 255 * v * (1 - s);
  var q = 255 * v * (1 - s * f);
  var t = 255 * v * (1 - s * (1 - f));
  v *= 255;

  switch (hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
};

convert.hsv.hsl = function (hsv) {
  var h = hsv[0];
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var vmin = Math.max(v, 0.01);
  var lmin;
  var sl;
  var l;

  l = (2 - s) * v;
  lmin = (2 - s) * vmin;
  sl = s * vmin;
  sl /= lmin <= 1 ? lmin : 2 - lmin;
  sl = sl || 0;
  l /= 2;

  return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
  var h = hwb[0] / 360;
  var wh = hwb[1] / 100;
  var bl = hwb[2] / 100;
  var ratio = wh + bl;
  var i;
  var v;
  var f;
  var n;

  // wh + bl cant be > 1
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }

  i = Math.floor(6 * h);
  v = 1 - bl;
  f = 6 * h - i;

  if ((i & 0x01) !== 0) {
    f = 1 - f;
  }

  n = wh + f * (v - wh); // linear interpolation

  var r;
  var g;
  var b;
  switch (i) {
    default:
    case 6:
    case 0:
      r = v;g = n;b = wh;break;
    case 1:
      r = n;g = v;b = wh;break;
    case 2:
      r = wh;g = v;b = n;break;
    case 3:
      r = wh;g = n;b = v;break;
    case 4:
      r = n;g = wh;b = v;break;
    case 5:
      r = v;g = wh;b = n;break;
  }

  return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
  var c = cmyk[0] / 100;
  var m = cmyk[1] / 100;
  var y = cmyk[2] / 100;
  var k = cmyk[3] / 100;
  var r;
  var g;
  var b;

  r = 1 - Math.min(1, c * (1 - k) + k);
  g = 1 - Math.min(1, m * (1 - k) + k);
  b = 1 - Math.min(1, y * (1 - k) + k);

  return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
  var x = xyz[0] / 100;
  var y = xyz[1] / 100;
  var z = xyz[2] / 100;
  var r;
  var g;
  var b;

  r = x * 3.2406 + y * -1.5372 + z * -0.4986;
  g = x * -0.9689 + y * 1.8758 + z * 0.0415;
  b = x * 0.0557 + y * -0.2040 + z * 1.0570;

  // assume sRGB
  r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;

  g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;

  b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;

  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);

  return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;

  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
};

convert.lab.xyz = function (lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var x;
  var y;
  var z;

  y = (l + 16) / 116;
  x = a / 500 + y;
  z = y - b / 200;

  var y2 = Math.pow(y, 3);
  var x2 = Math.pow(x, 3);
  var z2 = Math.pow(z, 3);
  y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
  x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
  z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

  x *= 95.047;
  y *= 100;
  z *= 108.883;

  return [x, y, z];
};

convert.lab.lch = function (lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var hr;
  var h;
  var c;

  hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;

  if (h < 0) {
    h += 360;
  }

  c = Math.sqrt(a * a + b * b);

  return [l, c, h];
};

convert.lch.lab = function (lch) {
  var l = lch[0];
  var c = lch[1];
  var h = lch[2];
  var a;
  var b;
  var hr;

  hr = h / 360 * 2 * Math.PI;
  a = c * Math.cos(hr);
  b = c * Math.sin(hr);

  return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
  var r = args[0];
  var g = args[1];
  var b = args[2];
  var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

  value = Math.round(value / 50);

  if (value === 0) {
    return 30;
  }

  var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

  if (value === 2) {
    ansi += 60;
  }

  return ansi;
};

convert.hsv.ansi16 = function (args) {
  // optimization here; we already know the value and don't need to get
  // it converted for us.
  return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
  var r = args[0];
  var g = args[1];
  var b = args[2];

  // we use the extended greyscale palette here, with the exception of
  // black and white. normal palette only has 4 greyscale shades.
  if (r === g && g === b) {
    if (r < 8) {
      return 16;
    }

    if (r > 248) {
      return 231;
    }

    return Math.round((r - 8) / 247 * 24) + 232;
  }

  var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);

  return ansi;
};

convert.ansi16.rgb = function (args) {
  var color = args % 10;

  // handle greyscale
  if (color === 0 || color === 7) {
    if (args > 50) {
      color += 3.5;
    }

    color = color / 10.5 * 255;

    return [color, color, color];
  }

  var mult = (~~(args > 50) + 1) * 0.5;
  var r = (color & 1) * mult * 255;
  var g = (color >> 1 & 1) * mult * 255;
  var b = (color >> 2 & 1) * mult * 255;

  return [r, g, b];
};

convert.ansi256.rgb = function (args) {
  // handle greyscale
  if (args >= 232) {
    var c = (args - 232) * 10 + 8;
    return [c, c, c];
  }

  args -= 16;

  var rem;
  var r = Math.floor(args / 36) / 5 * 255;
  var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  var b = rem % 6 / 5 * 255;

  return [r, g, b];
};

convert.rgb.hex = function (args) {
  var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);

  var string = integer.toString(16).toUpperCase();
  return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
  var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  if (!match) {
    return [0, 0, 0];
  }

  var colorString = match[0];

  if (match[0].length === 3) {
    colorString = colorString.split('').map(function (char) {
      return char + char;
    }).join('');
  }

  var integer = parseInt(colorString, 16);
  var r = integer >> 16 & 0xFF;
  var g = integer >> 8 & 0xFF;
  var b = integer & 0xFF;

  return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var max = Math.max(Math.max(r, g), b);
  var min = Math.min(Math.min(r, g), b);
  var chroma = max - min;
  var grayscale;
  var hue;

  if (chroma < 1) {
    grayscale = min / (1 - chroma);
  } else {
    grayscale = 0;
  }

  if (chroma <= 0) {
    hue = 0;
  } else if (max === r) {
    hue = (g - b) / chroma % 6;
  } else if (max === g) {
    hue = 2 + (b - r) / chroma;
  } else {
    hue = 4 + (r - g) / chroma + 4;
  }

  hue /= 6;
  hue %= 1;

  return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var c = 1;
  var f = 0;

  if (l < 0.5) {
    c = 2.0 * s * l;
  } else {
    c = 2.0 * s * (1.0 - l);
  }

  if (c < 1.0) {
    f = (l - 0.5 * c) / (1.0 - c);
  }

  return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;

  var c = s * v;
  var f = 0;

  if (c < 1.0) {
    f = (v - c) / (1 - c);
  }

  return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
  var h = hcg[0] / 360;
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;

  if (c === 0.0) {
    return [g * 255, g * 255, g * 255];
  }

  var pure = [0, 0, 0];
  var hi = h % 1 * 6;
  var v = hi % 1;
  var w = 1 - v;
  var mg = 0;

  switch (Math.floor(hi)) {
    case 0:
      pure[0] = 1;pure[1] = v;pure[2] = 0;break;
    case 1:
      pure[0] = w;pure[1] = 1;pure[2] = 0;break;
    case 2:
      pure[0] = 0;pure[1] = 1;pure[2] = v;break;
    case 3:
      pure[0] = 0;pure[1] = w;pure[2] = 1;break;
    case 4:
      pure[0] = v;pure[1] = 0;pure[2] = 1;break;
    default:
      pure[0] = 1;pure[1] = 0;pure[2] = w;
  }

  mg = (1.0 - c) * g;

  return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
};

convert.hcg.hsv = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;

  var v = c + g * (1.0 - c);
  var f = 0;

  if (v > 0.0) {
    f = c / v;
  }

  return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;

  var l = g * (1.0 - c) + 0.5 * c;
  var s = 0;

  if (l > 0.0 && l < 0.5) {
    s = c / (2 * l);
  } else if (l >= 0.5 && l < 1.0) {
    s = c / (2 * (1 - l));
  }

  return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var v = c + g * (1.0 - c);
  return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
  var w = hwb[1] / 100;
  var b = hwb[2] / 100;
  var v = 1 - b;
  var c = v - w;
  var g = 0;

  if (c < 1) {
    g = (v - c) / (1 - c);
  }

  return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
};

convert.rgb.apple = function (rgb) {
  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
};

convert.gray.rgb = function (args) {
  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
  return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
  return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
  return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
  return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
  var val = Math.round(gray[0] / 100 * 255) & 0xFF;
  var integer = (val << 16) + (val << 8) + val;

  var string = integer.toString(16).toUpperCase();
  return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
  var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  return [val / 255 * 100];
};
});
__sbPundle.registerModule("../node_modules/color-convert/route.js", function(__filename, __dirname, require, module, exports) {
var conversions = require('1074');

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

// https://jsperf.com/object-keys-vs-for-in-with-closure/3
var models = Object.keys(conversions);

function buildGraph() {
  var graph = {};

  for (var len = models.length, i = 0; i < len; i++) {
    graph[models[i]] = {
      // http://jsperf.com/1-vs-infinity
      // micro-opt, but this is simple.
      distance: -1,
      parent: null
    };
  }

  return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
  var graph = buildGraph();
  var queue = [fromModel]; // unshift -> queue -> pop

  graph[fromModel].distance = 0;

  while (queue.length) {
    var current = queue.pop();
    var adjacents = Object.keys(conversions[current]);

    for (var len = adjacents.length, i = 0; i < len; i++) {
      var adjacent = adjacents[i];
      var node = graph[adjacent];

      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }

  return graph;
}

function link(from, to) {
  return function (args) {
    return to(from(args));
  };
}

function wrapConversion(toModel, graph) {
  var path = [graph[toModel].parent, toModel];
  var fn = conversions[graph[toModel].parent][toModel];

  var cur = graph[toModel].parent;
  while (graph[cur].parent) {
    path.unshift(graph[cur].parent);
    fn = link(conversions[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }

  fn.conversion = path;
  return fn;
}

module.exports = function (fromModel) {
  var graph = deriveBFS(fromModel);
  var conversion = {};

  var models = Object.keys(graph);
  for (var len = models.length, i = 0; i < len; i++) {
    var toModel = models[i];
    var node = graph[toModel];

    if (node.parent === null) {
      // no possible conversion, or this node is the source model.
      continue;
    }

    conversion[toModel] = wrapConversion(toModel, graph);
  }

  return conversion;
};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/themeMaker.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _color = require('2679');

var _color2 = _interopRequireDefault(_color);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

let ThemeMaker = class ThemeMaker {
  constructor() {
    this.cache = {};

    this.colorize = obj => Object.keys(obj).reduce((acc, cur) => _extends({}, acc, {
      [cur]: obj[cur] instanceof _color2.default ? obj[cur] : (0, _color2.default)(obj[cur])
    }), {});

    this.fromColor = colorName => {
      if (typeof colorName !== 'string') {
        return null;
      }
      if (this.cache[colorName]) {
        return this.cache[colorName];
      }
      let base;
      try {
        base = (0, _color2.default)(colorName);
      } catch (e) {
        if (e.message.indexOf('parse color from string') > -1) {
          return null;
        }
        throw e;
      }

      const opposite = base.mix(base.lighten(1));
      const theme = this.fromStyles({
        highlightColor: base,
        background: base,
        color: opposite.lighten(0.2),
        borderColor: opposite.darken(0.2)
      });
      this.cache[colorName] = theme; // cache
      return theme;
    };

    this.fromStyles = _ref => {
      let {
        highlightColor,
        highlightBackground,
        background,
        color,
        borderColor
      } = _ref,
          rest = _objectWithoutProperties(_ref, ['highlightColor', 'highlightBackground', 'background', 'color', 'borderColor']);

      const _colorize = this.colorize({
        highlightColor,
        highlightBackground,
        background,
        color,
        borderColor
      }),
            {
        highlightColor: hlColor,
        highlightBackground: hlBackgorund
      } = _colorize,
            styles = _objectWithoutProperties(_colorize, ['highlightColor', 'highlightBackground']);

      const lighten = {
        true: 'darken',
        false: 'lighten'
      };
      const darken = {
        true: 'lighten',
        false: 'darken'
      };

      const str = x => `${x}`;
      const MIN_ADJUST = 0.1;
      const smallAmt = color => Math.min(0.5, Math.max(MIN_ADJUST, 2 * Math.log(20 / color.lightness()))); // goes 0 #fff to 0.3 #000
      const largeAmt = color => smallAmt(color) * 1.25;
      const adjust = (color, adjuster, opposite = false) => {
        const isLight = color.lightness() > 50;
        const direction = isLight ? darken[str(opposite)] : lighten[str(opposite)];
        return color[direction](adjuster(color));
      };

      const focused = {
        background: adjust(styles.background, largeAmt, true),
        borderColor: adjust(styles.borderColor, largeAmt, true)
      };

      const highlightColorFinal = hlColor || (0, _color2.default)('#fff');
      const highlightBgFinal = hlBackgorund || highlightColorFinal.negate();
      const highlight = {
        color: highlightColorFinal,
        background: highlightBgFinal,
        borderColor: adjust(highlightBgFinal, largeAmt, true)
      };

      return _extends({}, rest, {
        base: styles,
        hover: _extends({}, styles, {
          color: adjust(styles.color, smallAmt),
          background: adjust(styles.background, smallAmt),
          borderColor: adjust(styles.borderColor, smallAmt)
        }, rest.hover),
        active: _extends({}, styles, focused, rest.active),
        focus: _extends({}, styles, focused, rest.focus),
        highlight: _extends({}, styles, highlight, rest.highlight)
      });
    };
  }

};
exports.default = ThemeMaker;
//# sourceMappingURL=themeMaker.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/theme.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp2;

var _react = require('2680');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('2681');

var _getThemeFromContext = require('2682');

var _getThemeFromContext2 = _interopRequireDefault(_getThemeFromContext);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

let Theme = (_temp2 = _class = class Theme extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.theme = (0, _getThemeFromContext2.default)('name'), _temp;
  }

  getChildContext() {
    const context = this.theme();
    if (context) {
      return context;
    }
  }

  render() {
    return this.props.children;
  }
}, _class.contextTypes = {
  uiActiveThemeName: _propTypes.string,
  uiActiveTheme: _propTypes.object,
  uiThemes: _propTypes.object
}, _class.childContextTypes = {
  uiActiveThemeName: _propTypes.string,
  uiActiveTheme: _propTypes.object,
  uiThemes: _propTypes.object
}, _temp2);
exports.default = Theme;
//# sourceMappingURL=theme.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/getThemeFromContext.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = getThemeFromContext;

var _themeMaker = require('2785');

var _themeMaker2 = _interopRequireDefault(_themeMaker);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const Theme = new _themeMaker2.default();

function getThemeFromContext(propName = 'theme') {
  return function getContext() {
    const prop = this.props[propName];
    if (prop) {
      if (this.context.uiThemes[prop]) {
        return {
          uiActiveThemeName: prop,
          uiActiveTheme: this.context.uiThemes[prop]
        };
      }
      // no found theme, try making custom
      const theme = Theme.fromColor(prop);
      if (theme) {
        return {
          uiThemes: _extends({}, this.context.uiThemes, {
            [prop]: theme
          }),
          uiActiveThemeName: prop,
          uiActiveTheme: theme
        };
      }
    }
  };
}
//# sourceMappingURL=getThemeFromContext.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/passProps.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _react = require('2683');

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

let PassProps = class PassProps extends React.Component {
  render() {
    const _props = this.props,
          { children, containerProps } = _props,
          props = _objectWithoutProperties(_props, ['children', 'containerProps']);

    const getChild = child => {
      if (React.isValidElement(child)) {
        return React.cloneElement(child, props);
      }
      const Child = child;
      return React.createElement(Child, props);
    };

    if (!React.Children.count(children)) {
      return getChild(children);
    }

    return React.createElement('div', _extends({
      style: {
        flexOrder: 'inherit',
        flexBasis: 'inherit',
        flexDirection: 'inherit',
        flexFlow: 'inherit'
      }
    }, containerProps), React.Children.map(children, getChild));
  }
};
exports.default = PassProps;
//# sourceMappingURL=passProps.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/offset.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = offset;
function offset(ev, target, out) {
  target = target || ev.currentTarget || ev.srcElement;
  if (!Array.isArray(out)) {
    out = [0, 0];
  }
  const cx = ev.clientX || 0;
  const cy = ev.clientY || 0;
  const rect = target.getBoundingClientRect();
  out[0] = cx - rect.left;
  out[1] = cy - rect.top;
  return out;
}
//# sourceMappingURL=offset.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ArrowKeyStepper = require('392');

Object.defineProperty(exports, "ArrowKeyStepper", {
  enumerable: true,
  get: function get() {
    return _ArrowKeyStepper.ArrowKeyStepper;
  }
});

var _AutoSizer = require('393');

Object.defineProperty(exports, "AutoSizer", {
  enumerable: true,
  get: function get() {
    return _AutoSizer.AutoSizer;
  }
});

var _CellMeasurer = require('394');

Object.defineProperty(exports, "CellMeasurer", {
  enumerable: true,
  get: function get() {
    return _CellMeasurer.CellMeasurer;
  }
});
Object.defineProperty(exports, "CellMeasurerCache", {
  enumerable: true,
  get: function get() {
    return _CellMeasurer.CellMeasurerCache;
  }
});

var _Collection = require('395');

Object.defineProperty(exports, "Collection", {
  enumerable: true,
  get: function get() {
    return _Collection.Collection;
  }
});

var _ColumnSizer = require('396');

Object.defineProperty(exports, "ColumnSizer", {
  enumerable: true,
  get: function get() {
    return _ColumnSizer.ColumnSizer;
  }
});

var _Grid = require('397');

Object.defineProperty(exports, "accessibilityOverscanIndicesGetter", {
  enumerable: true,
  get: function get() {
    return _Grid.accessibilityOverscanIndicesGetter;
  }
});
Object.defineProperty(exports, "defaultCellRangeRenderer", {
  enumerable: true,
  get: function get() {
    return _Grid.defaultCellRangeRenderer;
  }
});
Object.defineProperty(exports, "defaultOverscanIndicesGetter", {
  enumerable: true,
  get: function get() {
    return _Grid.defaultOverscanIndicesGetter;
  }
});
Object.defineProperty(exports, "Grid", {
  enumerable: true,
  get: function get() {
    return _Grid.Grid;
  }
});

var _InfiniteLoader = require('398');

Object.defineProperty(exports, "InfiniteLoader", {
  enumerable: true,
  get: function get() {
    return _InfiniteLoader.InfiniteLoader;
  }
});

var _List = require('399');

Object.defineProperty(exports, "List", {
  enumerable: true,
  get: function get() {
    return _List.List;
  }
});

var _Masonry = require('400');

Object.defineProperty(exports, "createMasonryCellPositioner", {
  enumerable: true,
  get: function get() {
    return _Masonry.createCellPositioner;
  }
});
Object.defineProperty(exports, "Masonry", {
  enumerable: true,
  get: function get() {
    return _Masonry.Masonry;
  }
});

var _MultiGrid = require('401');

Object.defineProperty(exports, "MultiGrid", {
  enumerable: true,
  get: function get() {
    return _MultiGrid.MultiGrid;
  }
});

var _ScrollSync = require('402');

Object.defineProperty(exports, "ScrollSync", {
  enumerable: true,
  get: function get() {
    return _ScrollSync.ScrollSync;
  }
});

var _Table = require('403');

Object.defineProperty(exports, "defaultTableCellDataGetter", {
  enumerable: true,
  get: function get() {
    return _Table.defaultCellDataGetter;
  }
});
Object.defineProperty(exports, "defaultTableCellRenderer", {
  enumerable: true,
  get: function get() {
    return _Table.defaultCellRenderer;
  }
});
Object.defineProperty(exports, "defaultTableHeaderRenderer", {
  enumerable: true,
  get: function get() {
    return _Table.defaultHeaderRenderer;
  }
});
Object.defineProperty(exports, "defaultTableHeaderRowRenderer", {
  enumerable: true,
  get: function get() {
    return _Table.defaultHeaderRowRenderer;
  }
});
Object.defineProperty(exports, "defaultTableRowRenderer", {
  enumerable: true,
  get: function get() {
    return _Table.defaultRowRenderer;
  }
});
Object.defineProperty(exports, "Table", {
  enumerable: true,
  get: function get() {
    return _Table.Table;
  }
});
Object.defineProperty(exports, "Column", {
  enumerable: true,
  get: function get() {
    return _Table.Column;
  }
});
Object.defineProperty(exports, "SortDirection", {
  enumerable: true,
  get: function get() {
    return _Table.SortDirection;
  }
});
Object.defineProperty(exports, "SortIndicator", {
  enumerable: true,
  get: function get() {
    return _Table.SortIndicator;
  }
});

var _WindowScroller = require('404');

Object.defineProperty(exports, "WindowScroller", {
  enumerable: true,
  get: function get() {
    return _WindowScroller.WindowScroller;
  }
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ArrowKeyStepper/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ArrowKeyStepper = require('483');

Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ArrowKeyStepper).default;
  }
});
Object.defineProperty(exports, "ArrowKeyStepper", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ArrowKeyStepper).default;
  }
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ArrowKeyStepper/ArrowKeyStepper.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = require('756');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var babelPluginFlowReactPropTypes_proptype_RenderedSection = require('757').babelPluginFlowReactPropTypes_proptype_RenderedSection || require('758').any;

var babelPluginFlowReactPropTypes_proptype_ScrollIndices = require('759').babelPluginFlowReactPropTypes_proptype_ScrollIndices || require('760').any;

/**
 * This HOC decorates a virtualized component and responds to arrow-key events by scrolling one row or column at a time.
 */

var ArrowKeyStepper = function (_React$PureComponent) {
  _inherits(ArrowKeyStepper, _React$PureComponent);

  function ArrowKeyStepper(props) {
    _classCallCheck(this, ArrowKeyStepper);

    var _this = _possibleConstructorReturn(this, (ArrowKeyStepper.__proto__ || Object.getPrototypeOf(ArrowKeyStepper)).call(this, props));

    _this._columnStartIndex = 0;
    _this._columnStopIndex = 0;
    _this._rowStartIndex = 0;
    _this._rowStopIndex = 0;

    _this._onKeyDown = function (event) {
      var _this$props = _this.props,
          columnCount = _this$props.columnCount,
          disabled = _this$props.disabled,
          mode = _this$props.mode,
          rowCount = _this$props.rowCount;

      if (disabled) {
        return;
      }

      var _this$_getScrollState = _this._getScrollState(),
          scrollToColumnPrevious = _this$_getScrollState.scrollToColumn,
          scrollToRowPrevious = _this$_getScrollState.scrollToRow;

      var _this$_getScrollState2 = _this._getScrollState(),
          scrollToColumn = _this$_getScrollState2.scrollToColumn,
          scrollToRow = _this$_getScrollState2.scrollToRow;

      // The above cases all prevent default event event behavior.
      // This is to keep the grid from scrolling after the snap-to update.


      switch (event.key) {
        case "ArrowDown":
          scrollToRow = mode === "cells" ? Math.min(scrollToRow + 1, rowCount - 1) : Math.min(_this._rowStopIndex + 1, rowCount - 1);
          break;
        case "ArrowLeft":
          scrollToColumn = mode === "cells" ? Math.max(scrollToColumn - 1, 0) : Math.max(_this._columnStartIndex - 1, 0);
          break;
        case "ArrowRight":
          scrollToColumn = mode === "cells" ? Math.min(scrollToColumn + 1, columnCount - 1) : Math.min(_this._columnStopIndex + 1, columnCount - 1);
          break;
        case "ArrowUp":
          scrollToRow = mode === "cells" ? Math.max(scrollToRow - 1, 0) : Math.max(_this._rowStartIndex - 1, 0);
          break;
      }

      if (scrollToColumn !== scrollToColumnPrevious || scrollToRow !== scrollToRowPrevious) {
        event.preventDefault();

        _this._updateScrollState({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
      }
    };

    _this._onSectionRendered = function (_ref) {
      var columnStartIndex = _ref.columnStartIndex,
          columnStopIndex = _ref.columnStopIndex,
          rowStartIndex = _ref.rowStartIndex,
          rowStopIndex = _ref.rowStopIndex;

      _this._columnStartIndex = columnStartIndex;
      _this._columnStopIndex = columnStopIndex;
      _this._rowStartIndex = rowStartIndex;
      _this._rowStopIndex = rowStopIndex;
    };

    _this.state = {
      scrollToColumn: props.scrollToColumn,
      scrollToRow: props.scrollToRow
    };
    return _this;
  }

  _createClass(ArrowKeyStepper, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.isControlled) {
        return;
      }

      var scrollToColumn = nextProps.scrollToColumn,
          scrollToRow = nextProps.scrollToRow;
      var _props = this.props,
          prevScrollToColumn = _props.scrollToColumn,
          prevScrollToRow = _props.scrollToRow;

      if (prevScrollToColumn !== scrollToColumn && prevScrollToRow !== scrollToRow) {
        this.setState({
          scrollToColumn: scrollToColumn,
          scrollToRow: scrollToRow
        });
      } else if (prevScrollToColumn !== scrollToColumn) {
        this.setState({ scrollToColumn: scrollToColumn });
      } else if (prevScrollToRow !== scrollToRow) {
        this.setState({ scrollToRow: scrollToRow });
      }
    }
  }, {
    key: "setScrollIndexes",
    value: function setScrollIndexes(_ref2) {
      var scrollToColumn = _ref2.scrollToColumn,
          scrollToRow = _ref2.scrollToRow;

      this.setState({
        scrollToRow: scrollToRow,
        scrollToColumn: scrollToColumn
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          children = _props2.children;

      var _getScrollState2 = this._getScrollState(),
          scrollToColumn = _getScrollState2.scrollToColumn,
          scrollToRow = _getScrollState2.scrollToRow;

      return _react2.default.createElement("div", { className: className, onKeyDown: this._onKeyDown }, children({
        onSectionRendered: this._onSectionRendered,
        scrollToColumn: scrollToColumn,
        scrollToRow: scrollToRow
      }));
    }
  }, {
    key: "_getScrollState",
    value: function _getScrollState() {
      return this.props.isControlled ? this.props : this.state;
    }
  }, {
    key: "_updateScrollState",
    value: function _updateScrollState(_ref3) {
      var scrollToColumn = _ref3.scrollToColumn,
          scrollToRow = _ref3.scrollToRow;
      var _props3 = this.props,
          isControlled = _props3.isControlled,
          onScrollToChange = _props3.onScrollToChange;

      if (typeof onScrollToChange === "function") {
        onScrollToChange({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
      }

      if (!isControlled) {
        this.setState({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
      }
    }
  }]);

  return ArrowKeyStepper;
}(_react2.default.PureComponent);

ArrowKeyStepper.defaultProps = {
  disabled: false,
  isControlled: false,
  mode: "edges",
  scrollToColumn: 0,
  scrollToRow: 0
};
ArrowKeyStepper.propTypes = {
  children: require('761').func.isRequired,
  className: require('762').string,
  columnCount: require('763').number.isRequired,
  disabled: require('764').bool.isRequired,
  isControlled: require('765').bool.isRequired,
  mode: require('766').oneOf(["cells", "edges"]).isRequired,
  onScrollToChange: require('767').func,
  rowCount: require('768').number.isRequired,
  scrollToColumn: require('769').number.isRequired,
  scrollToRow: require('770').number.isRequired
};
exports.default = ArrowKeyStepper;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Grid = require('465');

Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Grid).default;
  }
});
Object.defineProperty(exports, "Grid", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Grid).default;
  }
});

var _accessibilityOverscanIndicesGetter = require('466');

Object.defineProperty(exports, "accessibilityOverscanIndicesGetter", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_accessibilityOverscanIndicesGetter).default;
  }
});

var _defaultCellRangeRenderer = require('467');

Object.defineProperty(exports, "defaultCellRangeRenderer", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_defaultCellRangeRenderer).default;
  }
});

var _defaultOverscanIndicesGetter = require('468');

Object.defineProperty(exports, "defaultOverscanIndicesGetter", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_defaultOverscanIndicesGetter).default;
  }
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/Grid.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = require('628');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('629');

var _classnames2 = _interopRequireDefault(_classnames);

var _calculateSizeAndPositionDataAndUpdateScrollOffset = require('630');

var _calculateSizeAndPositionDataAndUpdateScrollOffset2 = _interopRequireDefault(_calculateSizeAndPositionDataAndUpdateScrollOffset);

var _ScalingCellSizeAndPositionManager = require('631');

var _ScalingCellSizeAndPositionManager2 = _interopRequireDefault(_ScalingCellSizeAndPositionManager);

var _createCallbackMemoizer = require('632');

var _createCallbackMemoizer2 = _interopRequireDefault(_createCallbackMemoizer);

var _defaultOverscanIndicesGetter = require('633');

var _defaultOverscanIndicesGetter2 = _interopRequireDefault(_defaultOverscanIndicesGetter);

var _updateScrollIndexHelper = require('634');

var _updateScrollIndexHelper2 = _interopRequireDefault(_updateScrollIndexHelper);

var _defaultCellRangeRenderer = require('635');

var _defaultCellRangeRenderer2 = _interopRequireDefault(_defaultCellRangeRenderer);

var _scrollbarSize = require('636');

var _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);

var _requestAnimationTimeout = require('637');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectDestructuringEmpty(obj) {
  if (obj == null) throw new TypeError("Cannot destructure undefined");
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var babelPluginFlowReactPropTypes_proptype_Alignment = require('638').babelPluginFlowReactPropTypes_proptype_Alignment || require('639').any;

var babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter = require('640').babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter || require('641').any;

var babelPluginFlowReactPropTypes_proptype_RenderedSection = require('642').babelPluginFlowReactPropTypes_proptype_RenderedSection || require('643').any;

var babelPluginFlowReactPropTypes_proptype_ScrollbarPresenceChange = require('644').babelPluginFlowReactPropTypes_proptype_ScrollbarPresenceChange || require('645').any;

var babelPluginFlowReactPropTypes_proptype_Scroll = require('646').babelPluginFlowReactPropTypes_proptype_Scroll || require('647').any;

var babelPluginFlowReactPropTypes_proptype_NoContentRenderer = require('648').babelPluginFlowReactPropTypes_proptype_NoContentRenderer || require('649').any;

var babelPluginFlowReactPropTypes_proptype_CellSizeGetter = require('650').babelPluginFlowReactPropTypes_proptype_CellSizeGetter || require('651').any;

var babelPluginFlowReactPropTypes_proptype_CellSize = require('652').babelPluginFlowReactPropTypes_proptype_CellSize || require('653').any;

var babelPluginFlowReactPropTypes_proptype_CellPosition = require('654').babelPluginFlowReactPropTypes_proptype_CellPosition || require('655').any;

var babelPluginFlowReactPropTypes_proptype_CellRangeRenderer = require('656').babelPluginFlowReactPropTypes_proptype_CellRangeRenderer || require('657').any;

var babelPluginFlowReactPropTypes_proptype_CellRenderer = require('658').babelPluginFlowReactPropTypes_proptype_CellRenderer || require('659').any;

var babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId = require('660').babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId || require('661').any;

/**
 * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.
 * This improves performance and makes scrolling smoother.
 */
var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;

/**
 * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
 * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
 */
var SCROLL_POSITION_CHANGE_REASONS = {
  OBSERVED: "observed",
  REQUESTED: "requested"
};

var renderNull = function renderNull() {
  return null;
};

/**
 * Renders tabular data with virtualization along the vertical and horizontal axes.
 * Row heights and column widths must be known ahead of time and specified as properties.
 */
var Grid = function (_React$PureComponent) {
  _inherits(Grid, _React$PureComponent);

  // Invokes onSectionRendered callback only when start/stop row or column indices change
  function Grid(props) {
    _classCallCheck(this, Grid);

    var _this = _possibleConstructorReturn(this, (Grid.__proto__ || Object.getPrototypeOf(Grid)).call(this, props));

    _this.state = {
      isScrolling: false,
      scrollDirectionHorizontal: _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD,
      scrollDirectionVertical: _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD,
      scrollLeft: 0,
      scrollTop: 0
    };
    _this._onGridRenderedMemoizer = (0, _createCallbackMemoizer2.default)();
    _this._onScrollMemoizer = (0, _createCallbackMemoizer2.default)(false);
    _this._deferredInvalidateColumnIndex = null;
    _this._deferredInvalidateRowIndex = null;
    _this._recomputeScrollLeftFlag = false;
    _this._recomputeScrollTopFlag = false;
    _this._horizontalScrollBarSize = 0;
    _this._verticalScrollBarSize = 0;
    _this._scrollbarPresenceChanged = false;
    _this._cellCache = {};
    _this._styleCache = {};
    _this._scrollbarSizeMeasured = false;
    _this._renderedColumnStartIndex = 0;
    _this._renderedColumnStopIndex = 0;
    _this._renderedRowStartIndex = 0;
    _this._renderedRowStopIndex = 0;

    _this._debounceScrollEndedCallback = function () {
      _this._disablePointerEventsTimeoutId = null;
      _this._resetStyleCache();
    };

    _this._invokeOnGridRenderedHelper = function () {
      var onSectionRendered = _this.props.onSectionRendered;

      _this._onGridRenderedMemoizer({
        callback: onSectionRendered,
        indices: {
          columnOverscanStartIndex: _this._columnStartIndex,
          columnOverscanStopIndex: _this._columnStopIndex,
          columnStartIndex: _this._renderedColumnStartIndex,
          columnStopIndex: _this._renderedColumnStopIndex,
          rowOverscanStartIndex: _this._rowStartIndex,
          rowOverscanStopIndex: _this._rowStopIndex,
          rowStartIndex: _this._renderedRowStartIndex,
          rowStopIndex: _this._renderedRowStopIndex
        }
      });
    };

    _this._setScrollingContainerRef = function (ref) {
      _this._scrollingContainer = ref;
    };

    _this._onScroll = function (event) {
      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
      // See issue #404 for more information.
      if (event.target === _this._scrollingContainer) {
        _this.handleScrollEvent(event.target);
      }
    };

    _this._columnWidthGetter = _this._wrapSizeGetter(props.columnWidth);
    _this._rowHeightGetter = _this._wrapSizeGetter(props.rowHeight);

    var deferredMeasurementCache = props.deferredMeasurementCache;

    _this._columnSizeAndPositionManager = new _ScalingCellSizeAndPositionManager2.default({
      batchAllCells: deferredMeasurementCache !== undefined && !deferredMeasurementCache.hasFixedHeight(),
      cellCount: props.columnCount,
      cellSizeGetter: function cellSizeGetter(params) {
        return _this._columnWidthGetter(params);
      },
      estimatedCellSize: _this._getEstimatedColumnSize(props)
    });
    _this._rowSizeAndPositionManager = new _ScalingCellSizeAndPositionManager2.default({
      batchAllCells: deferredMeasurementCache !== undefined && !deferredMeasurementCache.hasFixedWidth(),
      cellCount: props.rowCount,
      cellSizeGetter: function cellSizeGetter(params) {
        return _this._rowHeightGetter(params);
      },
      estimatedCellSize: _this._getEstimatedRowSize(props)
    });
    return _this;
  }

  /**
   * Gets offsets for a given cell and alignment.
   */

  // See defaultCellRangeRenderer() for more information on the usage of these caches


  _createClass(Grid, [{
    key: "getOffsetForCell",
    value: function getOffsetForCell() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$alignment = _ref.alignment,
          alignment = _ref$alignment === undefined ? this.props.scrollToAlignment : _ref$alignment,
          _ref$columnIndex = _ref.columnIndex,
          columnIndex = _ref$columnIndex === undefined ? this.props.scrollToColumn : _ref$columnIndex,
          _ref$rowIndex = _ref.rowIndex,
          rowIndex = _ref$rowIndex === undefined ? this.props.scrollToRow : _ref$rowIndex;

      var offsetProps = _extends({}, this.props, {
        scrollToAlignment: alignment,
        scrollToColumn: columnIndex,
        scrollToRow: rowIndex
      });

      return {
        scrollLeft: this._getCalculatedScrollLeft(offsetProps),
        scrollTop: this._getCalculatedScrollTop(offsetProps)
      };
    }

    /**
     * This method handles a scroll event originating from an external scroll control.
     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.
     */

  }, {
    key: "handleScrollEvent",
    value: function handleScrollEvent(_ref2) {
      var _ref2$scrollLeft = _ref2.scrollLeft,
          scrollLeftParam = _ref2$scrollLeft === undefined ? 0 : _ref2$scrollLeft,
          _ref2$scrollTop = _ref2.scrollTop,
          scrollTopParam = _ref2$scrollTop === undefined ? 0 : _ref2$scrollTop;

      // On iOS, we can arrive at negative offsets by swiping past the start.
      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.
      if (scrollTopParam < 0) {
        return;
      }

      // Prevent pointer events from interrupting a smooth scroll
      this._debounceScrollEnded();

      var _props = this.props,
          autoHeight = _props.autoHeight,
          autoWidth = _props.autoWidth,
          height = _props.height,
          width = _props.width;

      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
      // This causes a series of rapid renders that is slow for long lists.
      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.

      var scrollbarSize = this._scrollbarSize;
      var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();
      var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();
      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);
      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam);

      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
      // Don't force a re-render if this is the case.
      // The mouse may move faster then the animation frame does.
      // Use requestAnimationFrame to avoid over-updating.
      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {
        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.
        // Don't change direction for an axis unless scroll offset has changed.
        var _scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;
        var _scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;

        var newState = {
          isScrolling: true,
          scrollDirectionHorizontal: _scrollDirectionHorizontal,
          scrollDirectionVertical: _scrollDirectionVertical,
          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED
        };

        if (!autoHeight) {
          newState.scrollTop = scrollTop;
        }

        if (!autoWidth) {
          newState.scrollLeft = scrollLeft;
        }

        this.setState(newState);
      }

      this._invokeOnScrollMemoizer({
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        totalColumnsWidth: totalColumnsWidth,
        totalRowsHeight: totalRowsHeight
      });
    }

    /**
     * Invalidate Grid size and recompute visible cells.
     * This is a deferred wrapper for recomputeGridSize().
     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.
     * This method is intended for advanced use-cases like CellMeasurer.
     */
    // @TODO (bvaughn) Add automated test coverage for this.

  }, {
    key: "invalidateCellSizeAfterRender",
    value: function invalidateCellSizeAfterRender(_ref3) {
      var columnIndex = _ref3.columnIndex,
          rowIndex = _ref3.rowIndex;

      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === "number" ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;
      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === "number" ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;
    }

    /**
     * Pre-measure all columns and rows in a Grid.
     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.
     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).
     */

  }, {
    key: "measureAllCells",
    value: function measureAllCells() {
      var _props2 = this.props,
          columnCount = _props2.columnCount,
          rowCount = _props2.rowCount;

      this._columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);
      this._rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);
    }

    /**
     * Forced recompute of row heights and column widths.
     * This function should be called if dynamic column or row sizes have changed but nothing else has.
     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.
     */

  }, {
    key: "recomputeGridSize",
    value: function recomputeGridSize() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$columnIndex = _ref4.columnIndex,
          columnIndex = _ref4$columnIndex === undefined ? 0 : _ref4$columnIndex,
          _ref4$rowIndex = _ref4.rowIndex,
          rowIndex = _ref4$rowIndex === undefined ? 0 : _ref4$rowIndex;

      var _props3 = this.props,
          scrollToColumn = _props3.scrollToColumn,
          scrollToRow = _props3.scrollToRow;

      this._columnSizeAndPositionManager.resetCell(columnIndex);
      this._rowSizeAndPositionManager.resetCell(rowIndex);

      // Cell sizes may be determined by a function property.
      // In this case the cDU handler can't know if they changed.
      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.
      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && columnIndex <= scrollToColumn;
      this._recomputeScrollTopFlag = scrollToRow >= 0 && rowIndex <= scrollToRow;

      // Clear cell cache in case we are scrolling;
      // Invalid row heights likely mean invalid cached content as well.
      this._cellCache = {};
      this._styleCache = {};

      this.forceUpdate();
    }

    /**
     * Ensure column and row are visible.
     */

  }, {
    key: "scrollToCell",
    value: function scrollToCell(_ref5) {
      var columnIndex = _ref5.columnIndex,
          rowIndex = _ref5.rowIndex;
      var columnCount = this.props.columnCount;

      var props = this.props;

      // Don't adjust scroll offset for single-column grids (eg List, Table).
      // This can cause a funky scroll offset because of the vertical scrollbar width.
      if (columnCount > 1 && columnIndex !== undefined) {
        this._updateScrollLeftForScrollToColumn(_extends({}, props, {
          scrollToColumn: columnIndex
        }));
      }

      if (rowIndex !== undefined) {
        this._updateScrollTopForScrollToRow(_extends({}, props, {
          scrollToRow: rowIndex
        }));
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _props4 = this.props,
          getScrollbarSize = _props4.getScrollbarSize,
          height = _props4.height,
          scrollLeft = _props4.scrollLeft,
          scrollToColumn = _props4.scrollToColumn,
          scrollTop = _props4.scrollTop,
          scrollToRow = _props4.scrollToRow,
          width = _props4.width;

      // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.
      // We must do this at the start of the method as we may calculate and update scroll position below.

      this._handleInvalidatedGridSize();

      // If this component was first rendered server-side, scrollbar size will be undefined.
      // In that event we need to remeasure.
      if (!this._scrollbarSizeMeasured) {
        this._scrollbarSize = getScrollbarSize();
        this._scrollbarSizeMeasured = true;
        this.setState({});
      }

      if (typeof scrollLeft === "number" && scrollLeft >= 0 || typeof scrollTop === "number" && scrollTop >= 0) {
        this.scrollToPosition({ scrollLeft: scrollLeft, scrollTop: scrollTop });
      }

      // Don't update scroll offset if the size is 0; we don't render any cells in this case.
      // Setting a state may cause us to later thing we've updated the offce when we haven't.
      var sizeIsBiggerThanZero = height > 0 && width > 0;
      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {
        this._updateScrollLeftForScrollToColumn();
      }
      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {
        this._updateScrollTopForScrollToRow();
      }

      // Update onRowsRendered callback
      this._invokeOnGridRenderedHelper();

      // Initialize onScroll callback
      this._invokeOnScrollMemoizer({
        scrollLeft: scrollLeft || 0,
        scrollTop: scrollTop || 0,
        totalColumnsWidth: this._columnSizeAndPositionManager.getTotalSize(),
        totalRowsHeight: this._rowSizeAndPositionManager.getTotalSize()
      });

      this._maybeCallOnScrollbarPresenceChange();
    }

    /**
     * @private
     * This method updates scrollLeft/scrollTop in state for the following conditions:
     * 1) New scroll-to-cell props have been set
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      var _props5 = this.props,
          autoHeight = _props5.autoHeight,
          autoWidth = _props5.autoWidth,
          columnCount = _props5.columnCount,
          height = _props5.height,
          rowCount = _props5.rowCount,
          scrollToAlignment = _props5.scrollToAlignment,
          scrollToColumn = _props5.scrollToColumn,
          scrollToRow = _props5.scrollToRow,
          width = _props5.width;
      var _state = this.state,
          scrollLeft = _state.scrollLeft,
          scrollPositionChangeReason = _state.scrollPositionChangeReason,
          scrollTop = _state.scrollTop;

      // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.
      // We must do this at the start of the method as we may calculate and update scroll position below.

      this._handleInvalidatedGridSize();

      // Handle edge case where column or row count has only just increased over 0.
      // In this case we may have to restore a previously-specified scroll offset.
      // For more info see bvaughn/react-virtualized/issues/218
      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0;

      // Make sure requested changes to :scrollLeft or :scrollTop get applied.
      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
      // So we only set these when we require an adjustment of the scroll position.
      // See issue #2 for more information.
      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {
        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).
        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.
        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {
          this._scrollingContainer.scrollLeft = scrollLeft;
        }
        if (!autoHeight && scrollTop >= 0 && (scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {
          this._scrollingContainer.scrollTop = scrollTop;
        }
      }

      // Special case where the previous size was 0:
      // In this case we don't show any windowed cells at all.
      // So we should always recalculate offset afterwards.
      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0;

      // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it
      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?
      if (this._recomputeScrollLeftFlag) {
        this._recomputeScrollLeftFlag = false;
        this._updateScrollLeftForScrollToColumn(this.props);
      } else {
        (0, _updateScrollIndexHelper2.default)({
          cellSizeAndPositionManager: this._columnSizeAndPositionManager,
          previousCellsCount: prevProps.columnCount,
          previousCellSize: typeof prevProps.columnWidth === "number" ? prevProps.columnWidth : null,
          previousScrollToAlignment: prevProps.scrollToAlignment,
          previousScrollToIndex: prevProps.scrollToColumn,
          previousSize: prevProps.width,
          scrollOffset: scrollLeft,
          scrollToAlignment: scrollToAlignment,
          scrollToIndex: scrollToColumn,
          size: width,
          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,
          updateScrollIndexCallback: function updateScrollIndexCallback() {
            return _this2._updateScrollLeftForScrollToColumn(_this2.props);
          }
        });
      }

      if (this._recomputeScrollTopFlag) {
        this._recomputeScrollTopFlag = false;
        this._updateScrollTopForScrollToRow(this.props);
      } else {
        (0, _updateScrollIndexHelper2.default)({
          cellSizeAndPositionManager: this._rowSizeAndPositionManager,
          previousCellsCount: prevProps.rowCount,
          previousCellSize: typeof prevProps.rowHeight === "number" ? prevProps.rowHeight : null,
          previousScrollToAlignment: prevProps.scrollToAlignment,
          previousScrollToIndex: prevProps.scrollToRow,
          previousSize: prevProps.height,
          scrollOffset: scrollTop,
          scrollToAlignment: scrollToAlignment,
          scrollToIndex: scrollToRow,
          size: height,
          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,
          updateScrollIndexCallback: function updateScrollIndexCallback() {
            return _this2._updateScrollTopForScrollToRow(_this2.props);
          }
        });
      }

      // Update onRowsRendered callback if start/stop indices have changed
      this._invokeOnGridRenderedHelper();

      // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners
      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {
        var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();
        var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();

        this._invokeOnScrollMemoizer({
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
          totalColumnsWidth: totalColumnsWidth,
          totalRowsHeight: totalRowsHeight
        });
      }

      this._maybeCallOnScrollbarPresenceChange();
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      var getScrollbarSize = this.props.getScrollbarSize;

      // If this component is being rendered server-side, getScrollbarSize() will return undefined.
      // We handle this case in componentDidMount()

      this._scrollbarSize = getScrollbarSize();
      if (this._scrollbarSize === undefined) {
        this._scrollbarSizeMeasured = false;
        this._scrollbarSize = 0;
      } else {
        this._scrollbarSizeMeasured = true;
      }

      this._calculateChildrenToRender();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._disablePointerEventsTimeoutId) {
        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._disablePointerEventsTimeoutId);
      }
    }

    /**
     * @private
     * This method updates scrollLeft/scrollTop in state for the following conditions:
     * 1) Empty content (0 rows or columns)
     * 2) New scroll props overriding the current state
     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
     */

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this3 = this;

      var _state2 = this.state,
          scrollLeft = _state2.scrollLeft,
          scrollTop = _state2.scrollTop;

      if (nextProps.columnCount === 0 && scrollLeft !== 0 || nextProps.rowCount === 0 && scrollTop !== 0) {
        this.scrollToPosition({
          scrollLeft: 0,
          scrollTop: 0
        });
      } else if (nextProps.scrollLeft !== this.props.scrollLeft || nextProps.scrollTop !== this.props.scrollTop) {
        var newState = {};

        if (nextProps.scrollLeft != null) {
          newState.scrollLeft = nextProps.scrollLeft;
        }
        if (nextProps.scrollTop != null) {
          newState.scrollTop = nextProps.scrollTop;
        }

        this.scrollToPosition(newState);
      }

      if (nextProps.columnWidth !== this.props.columnWidth || nextProps.rowHeight !== this.props.rowHeight) {
        this._styleCache = {};
      }

      this._columnWidthGetter = this._wrapSizeGetter(nextProps.columnWidth);
      this._rowHeightGetter = this._wrapSizeGetter(nextProps.rowHeight);

      this._columnSizeAndPositionManager.configure({
        cellCount: nextProps.columnCount,
        estimatedCellSize: this._getEstimatedColumnSize(nextProps)
      });
      this._rowSizeAndPositionManager.configure({
        cellCount: nextProps.rowCount,
        estimatedCellSize: this._getEstimatedRowSize(nextProps)
      });

      var _props6 = this.props,
          columnCount = _props6.columnCount,
          rowCount = _props6.rowCount;

      // Special case when either cols or rows were 0
      // This would prevent any cells from rendering
      // So we need to reset row scroll if cols changed from 0 (and vice versa)

      if (columnCount === 0 || rowCount === 0) {
        columnCount = 0;
        rowCount = 0;
      }

      // If scrolling is controlled outside this component, clear cache when scrolling stops
      if (nextProps.autoHeight && nextProps.isScrolling === false && this.props.isScrolling === true) {
        this._resetStyleCache();
      }

      // Update scroll offsets if the size or number of cells have changed, invalidating the previous value
      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset2.default)({
        cellCount: columnCount,
        cellSize: typeof this.props.columnWidth === "number" ? this.props.columnWidth : null,
        computeMetadataCallback: function computeMetadataCallback() {
          return _this3._columnSizeAndPositionManager.resetCell(0);
        },
        computeMetadataCallbackProps: nextProps,
        nextCellsCount: nextProps.columnCount,
        nextCellSize: typeof nextProps.columnWidth === "number" ? nextProps.columnWidth : null,
        nextScrollToIndex: nextProps.scrollToColumn,
        scrollToIndex: this.props.scrollToColumn,
        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
          return _this3._updateScrollLeftForScrollToColumn(nextProps, _this3.state);
        }
      });
      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset2.default)({
        cellCount: rowCount,
        cellSize: typeof this.props.rowHeight === "number" ? this.props.rowHeight : null,
        computeMetadataCallback: function computeMetadataCallback() {
          return _this3._rowSizeAndPositionManager.resetCell(0);
        },
        computeMetadataCallbackProps: nextProps,
        nextCellsCount: nextProps.rowCount,
        nextCellSize: typeof nextProps.rowHeight === "number" ? nextProps.rowHeight : null,
        nextScrollToIndex: nextProps.scrollToRow,
        scrollToIndex: this.props.scrollToRow,
        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
          return _this3._updateScrollTopForScrollToRow(nextProps, _this3.state);
        }
      });
    }
  }, {
    key: "componentWillUpdate",
    value: function componentWillUpdate(nextProps, nextState) {
      this._calculateChildrenToRender(nextProps, nextState);
    }
  }, {
    key: "render",
    value: function render() {
      var _props7 = this.props,
          autoContainerWidth = _props7.autoContainerWidth,
          autoHeight = _props7.autoHeight,
          autoWidth = _props7.autoWidth,
          className = _props7.className,
          containerProps = _props7.containerProps,
          containerRole = _props7.containerRole,
          containerStyle = _props7.containerStyle,
          height = _props7.height,
          id = _props7.id,
          noContentRenderer = _props7.noContentRenderer,
          role = _props7.role,
          style = _props7.style,
          tabIndex = _props7.tabIndex,
          width = _props7.width;

      var isScrolling = this._isScrolling();

      var gridStyle = {
        boxSizing: "border-box",
        direction: "ltr",
        height: autoHeight ? "auto" : height,
        position: "relative",
        width: autoWidth ? "auto" : width,
        WebkitOverflowScrolling: "touch",
        willChange: "transform"
      };

      var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();
      var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();

      // Force browser to hide scrollbars when we know they aren't necessary.
      // Otherwise once scrollbars appear they may not disappear again.
      // For more info see issue #116
      var verticalScrollBarSize = totalRowsHeight > height ? this._scrollbarSize : 0;
      var horizontalScrollBarSize = totalColumnsWidth > width ? this._scrollbarSize : 0;

      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {
        this._horizontalScrollBarSize = horizontalScrollBarSize;
        this._verticalScrollBarSize = verticalScrollBarSize;
        this._scrollbarPresenceChanged = true;
      }

      // Also explicitly init styles to 'auto' if scrollbars are required.
      // This works around an obscure edge case where external CSS styles have not yet been loaded,
      // But an initial scroll index of offset is set as an external prop.
      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
      // This was originally reported via clauderic/react-infinite-calendar/issues/23
      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? "hidden" : "auto";
      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? "hidden" : "auto";

      var childrenToDisplay = this._childrenToDisplay;

      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;

      return _react2.default.createElement("div", _extends({
        ref: this._setScrollingContainerRef
      }, containerProps, {
        "aria-label": this.props["aria-label"],
        "aria-readonly": this.props["aria-readonly"],
        className: (0, _classnames2.default)("ReactVirtualized__Grid", className),
        id: id,
        onScroll: this._onScroll,
        role: role,
        style: _extends({}, gridStyle, style),
        tabIndex: tabIndex
      }), childrenToDisplay.length > 0 && _react2.default.createElement("div", {
        className: "ReactVirtualized__Grid__innerScrollContainer",
        role: containerRole,
        style: _extends({
          width: autoContainerWidth ? "auto" : totalColumnsWidth,
          height: totalRowsHeight,
          maxWidth: totalColumnsWidth,
          maxHeight: totalRowsHeight,
          overflow: "hidden",
          pointerEvents: isScrolling ? "none" : "",
          position: "relative"
        }, containerStyle)
      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());
    }

    /* ---------------------------- Helper methods ---------------------------- */

  }, {
    key: "_calculateChildrenToRender",
    value: function _calculateChildrenToRender() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var cellRenderer = props.cellRenderer,
          cellRangeRenderer = props.cellRangeRenderer,
          columnCount = props.columnCount,
          deferredMeasurementCache = props.deferredMeasurementCache,
          height = props.height,
          overscanColumnCount = props.overscanColumnCount,
          overscanIndicesGetter = props.overscanIndicesGetter,
          overscanRowCount = props.overscanRowCount,
          rowCount = props.rowCount,
          width = props.width;
      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,
          scrollDirectionVertical = state.scrollDirectionVertical,
          scrollLeft = state.scrollLeft,
          scrollTop = state.scrollTop;

      var isScrolling = this._isScrolling(props, state);

      this._childrenToDisplay = [];

      // Render only enough columns and rows to cover the visible area of the grid.
      if (height > 0 && width > 0) {
        var visibleColumnIndices = this._columnSizeAndPositionManager.getVisibleCellRange({
          containerSize: width,
          offset: scrollLeft
        });
        var visibleRowIndices = this._rowSizeAndPositionManager.getVisibleCellRange({
          containerSize: height,
          offset: scrollTop
        });

        var horizontalOffsetAdjustment = this._columnSizeAndPositionManager.getOffsetAdjustment({
          containerSize: width,
          offset: scrollLeft
        });
        var verticalOffsetAdjustment = this._rowSizeAndPositionManager.getOffsetAdjustment({
          containerSize: height,
          offset: scrollTop
        });

        // Store for _invokeOnGridRenderedHelper()
        this._renderedColumnStartIndex = visibleColumnIndices.start;
        this._renderedColumnStopIndex = visibleColumnIndices.stop;
        this._renderedRowStartIndex = visibleRowIndices.start;
        this._renderedRowStopIndex = visibleRowIndices.stop;

        var overscanColumnIndices = overscanIndicesGetter({
          direction: "horizontal",
          cellCount: columnCount,
          overscanCellsCount: overscanColumnCount,
          scrollDirection: scrollDirectionHorizontal,
          startIndex: typeof this._renderedColumnStartIndex === "number" ? this._renderedColumnStartIndex : 0,
          stopIndex: typeof this._renderedColumnStopIndex === "number" ? this._renderedColumnStopIndex : -1
        });

        var overscanRowIndices = overscanIndicesGetter({
          direction: "vertical",
          cellCount: rowCount,
          overscanCellsCount: overscanRowCount,
          scrollDirection: scrollDirectionVertical,
          startIndex: typeof this._renderedRowStartIndex === "number" ? this._renderedRowStartIndex : 0,
          stopIndex: typeof this._renderedRowStopIndex === "number" ? this._renderedRowStopIndex : -1
          // stopIndex: this._renderedRowStopIndex
        });

        // Store for _invokeOnGridRenderedHelper()
        this._columnStartIndex = overscanColumnIndices.overscanStartIndex;
        this._columnStopIndex = overscanColumnIndices.overscanStopIndex;
        this._rowStartIndex = overscanRowIndices.overscanStartIndex;
        this._rowStopIndex = overscanRowIndices.overscanStopIndex;

        this._childrenToDisplay = cellRangeRenderer({
          cellCache: this._cellCache,
          cellRenderer: cellRenderer,
          columnSizeAndPositionManager: this._columnSizeAndPositionManager,
          columnStartIndex: this._columnStartIndex,
          columnStopIndex: this._columnStopIndex,
          deferredMeasurementCache: deferredMeasurementCache,
          horizontalOffsetAdjustment: horizontalOffsetAdjustment,
          isScrolling: isScrolling,
          parent: this,
          rowSizeAndPositionManager: this._rowSizeAndPositionManager,
          rowStartIndex: this._rowStartIndex,
          rowStopIndex: this._rowStopIndex,
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
          styleCache: this._styleCache,
          verticalOffsetAdjustment: verticalOffsetAdjustment,
          visibleColumnIndices: visibleColumnIndices,
          visibleRowIndices: visibleRowIndices
        });
      }
    }

    /**
     * Sets an :isScrolling flag for a small window of time.
     * This flag is used to disable pointer events on the scrollable portion of the Grid.
     * This prevents jerky/stuttery mouse-wheel scrolling.
     */

  }, {
    key: "_debounceScrollEnded",
    value: function _debounceScrollEnded() {
      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;

      if (this._disablePointerEventsTimeoutId) {
        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._disablePointerEventsTimeoutId);
      }

      this._disablePointerEventsTimeoutId = (0, _requestAnimationTimeout.requestAnimationTimeout)(this._debounceScrollEndedCallback, scrollingResetTimeInterval);
    }
  }, {
    key: "_getEstimatedColumnSize",
    value: function _getEstimatedColumnSize(props) {
      return typeof props.columnWidth === "number" ? props.columnWidth : props.estimatedColumnSize;
    }
  }, {
    key: "_getEstimatedRowSize",
    value: function _getEstimatedRowSize(props) {
      return typeof props.rowHeight === "number" ? props.rowHeight : props.estimatedRowSize;
    }

    /**
     * Check for batched CellMeasurer size invalidations.
     * This will occur the first time one or more previously unmeasured cells are rendered.
     */

  }, {
    key: "_handleInvalidatedGridSize",
    value: function _handleInvalidatedGridSize() {
      if (typeof this._deferredInvalidateColumnIndex === "number" && typeof this._deferredInvalidateRowIndex === "number") {
        var columnIndex = this._deferredInvalidateColumnIndex;
        var rowIndex = this._deferredInvalidateRowIndex;

        this._deferredInvalidateColumnIndex = null;
        this._deferredInvalidateRowIndex = null;

        this.recomputeGridSize({ columnIndex: columnIndex, rowIndex: rowIndex });
      }
    }
  }, {
    key: "_invokeOnScrollMemoizer",
    value: function _invokeOnScrollMemoizer(_ref6) {
      var _this4 = this;

      var scrollLeft = _ref6.scrollLeft,
          scrollTop = _ref6.scrollTop,
          totalColumnsWidth = _ref6.totalColumnsWidth,
          totalRowsHeight = _ref6.totalRowsHeight;

      this._onScrollMemoizer({
        callback: function callback(_ref7) {
          var scrollLeft = _ref7.scrollLeft,
              scrollTop = _ref7.scrollTop;
          var _props8 = _this4.props,
              height = _props8.height,
              onScroll = _props8.onScroll,
              width = _props8.width;

          onScroll({
            clientHeight: height,
            clientWidth: width,
            scrollHeight: totalRowsHeight,
            scrollLeft: scrollLeft,
            scrollTop: scrollTop,
            scrollWidth: totalColumnsWidth
          });
        },
        indices: {
          scrollLeft: scrollLeft,
          scrollTop: scrollTop
        }
      });
    }
  }, {
    key: "_isScrolling",
    value: function _isScrolling() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

      // If isScrolling is defined in props, use it to override the value in state
      // This is a performance optimization for WindowScroller + Grid
      return Object.hasOwnProperty.call(props, "isScrolling") ? Boolean(props.isScrolling) : Boolean(state.isScrolling);
    }
  }, {
    key: "_maybeCallOnScrollbarPresenceChange",
    value: function _maybeCallOnScrollbarPresenceChange() {
      if (this._scrollbarPresenceChanged) {
        var _onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;

        this._scrollbarPresenceChanged = false;

        _onScrollbarPresenceChange({
          horizontal: this._horizontalScrollBarSize > 0,
          size: this._scrollbarSize,
          vertical: this._verticalScrollBarSize > 0
        });
      }
    }
  }, {
    key: "scrollToPosition",

    /**
     * Scroll to the specified offset(s).
     * Useful for animating position changes.
     */
    value: function scrollToPosition(_ref8) {
      var scrollLeft = _ref8.scrollLeft,
          scrollTop = _ref8.scrollTop;

      var newState = {
        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
      };

      if (typeof scrollLeft === "number" && scrollLeft >= 0) {
        newState.scrollDirectionHorizontal = scrollLeft > this.state.scrollLeft ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD;
        newState.scrollLeft = scrollLeft;
      }

      if (typeof scrollTop === "number" && scrollTop >= 0) {
        newState.scrollDirectionVertical = scrollTop > this.state.scrollTop ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD;
        newState.scrollTop = scrollTop;
      }

      if (typeof scrollLeft === "number" && scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || typeof scrollTop === "number" && scrollTop >= 0 && scrollTop !== this.state.scrollTop) {
        this.setState(newState);
      }
    }
  }, {
    key: "_wrapSizeGetter",
    value: function _wrapSizeGetter(value) {
      return typeof value === "function" ? value : function () {
        return value;
      };
    }
  }, {
    key: "_getCalculatedScrollLeft",
    value: function _getCalculatedScrollLeft() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var columnCount = props.columnCount,
          height = props.height,
          scrollToAlignment = props.scrollToAlignment,
          scrollToColumn = props.scrollToColumn,
          width = props.width;
      var scrollLeft = state.scrollLeft;

      if (columnCount > 0) {
        var finalColumn = columnCount - 1;
        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);
        var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();
        var scrollBarSize = totalRowsHeight > height ? this._scrollbarSize : 0;

        return this._columnSizeAndPositionManager.getUpdatedOffsetForIndex({
          align: scrollToAlignment,
          containerSize: width - scrollBarSize,
          currentOffset: scrollLeft,
          targetIndex: targetIndex
        });
      }
    }
  }, {
    key: "_updateScrollLeftForScrollToColumn",
    value: function _updateScrollLeftForScrollToColumn() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var scrollLeft = state.scrollLeft;

      var calculatedScrollLeft = this._getCalculatedScrollLeft(props, state);

      if (typeof calculatedScrollLeft === "number" && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {
        this.scrollToPosition({
          scrollLeft: calculatedScrollLeft,
          scrollTop: -1
        });
      }
    }
  }, {
    key: "_getCalculatedScrollTop",
    value: function _getCalculatedScrollTop() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var height = props.height,
          rowCount = props.rowCount,
          scrollToAlignment = props.scrollToAlignment,
          scrollToRow = props.scrollToRow,
          width = props.width;
      var scrollTop = state.scrollTop;

      if (rowCount > 0) {
        var finalRow = rowCount - 1;
        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);
        var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();
        var scrollBarSize = totalColumnsWidth > width ? this._scrollbarSize : 0;

        return this._rowSizeAndPositionManager.getUpdatedOffsetForIndex({
          align: scrollToAlignment,
          containerSize: height - scrollBarSize,
          currentOffset: scrollTop,
          targetIndex: targetIndex
        });
      }
    }
  }, {
    key: "_resetStyleCache",
    value: function _resetStyleCache() {
      var styleCache = this._styleCache;

      // Reset cell and style caches once scrolling stops.
      // This makes Grid simpler to use (since cells commonly change).
      // And it keeps the caches from growing too large.
      // Performance is most sensitive when a user is scrolling.
      this._cellCache = {};
      this._styleCache = {};

      // Copy over the visible cell styles so avoid unnecessary re-render.
      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {
        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {
          var key = rowIndex + "-" + columnIndex;
          this._styleCache[key] = styleCache[key];
        }
      }

      this.setState({
        isScrolling: false
      });
    }
  }, {
    key: "_updateScrollTopForScrollToRow",
    value: function _updateScrollTopForScrollToRow() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var scrollTop = state.scrollTop;

      var calculatedScrollTop = this._getCalculatedScrollTop(props, state);

      if (typeof calculatedScrollTop === "number" && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {
        this.scrollToPosition({
          scrollLeft: -1,
          scrollTop: calculatedScrollTop
        });
      }
    }
  }]);

  return Grid;
}(_react2.default.PureComponent);

Grid.defaultProps = {
  "aria-label": "grid",
  "aria-readonly": true,
  autoContainerWidth: false,
  autoHeight: false,
  autoWidth: false,
  cellRangeRenderer: _defaultCellRangeRenderer2.default,
  containerRole: "rowgroup",
  containerStyle: {},
  estimatedColumnSize: 100,
  estimatedRowSize: 30,
  getScrollbarSize: _scrollbarSize2.default,
  noContentRenderer: renderNull,
  onScroll: function onScroll(_ref9) {
    _objectDestructuringEmpty(_ref9);
  },
  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},
  onSectionRendered: function onSectionRendered(_ref10) {
    _objectDestructuringEmpty(_ref10);
  },
  overscanColumnCount: 0,
  overscanIndicesGetter: _defaultOverscanIndicesGetter2.default,
  overscanRowCount: 10,
  role: "grid",
  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,
  scrollToAlignment: "auto",
  scrollToColumn: -1,
  scrollToRow: -1,
  style: {},
  tabIndex: 0
};
Grid.propTypes = {
  "aria-label": require('662').string.isRequired,
  "aria-readonly": require('663').bool,
  autoContainerWidth: require('664').bool.isRequired,
  autoHeight: require('665').bool.isRequired,
  autoWidth: require('666').bool.isRequired,
  cellRenderer: typeof babelPluginFlowReactPropTypes_proptype_CellRenderer === "function" ? babelPluginFlowReactPropTypes_proptype_CellRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_CellRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_CellRenderer : require('667').shape(babelPluginFlowReactPropTypes_proptype_CellRenderer).isRequired,
  cellRangeRenderer: typeof babelPluginFlowReactPropTypes_proptype_CellRangeRenderer === "function" ? babelPluginFlowReactPropTypes_proptype_CellRangeRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_CellRangeRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_CellRangeRenderer : require('668').shape(babelPluginFlowReactPropTypes_proptype_CellRangeRenderer).isRequired,
  className: require('669').string,
  columnCount: require('670').number.isRequired,
  columnWidth: typeof babelPluginFlowReactPropTypes_proptype_CellSize === "function" ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired : babelPluginFlowReactPropTypes_proptype_CellSize : require('671').shape(babelPluginFlowReactPropTypes_proptype_CellSize).isRequired,
  containerProps: require('672').object,
  containerRole: require('673').string.isRequired,
  containerStyle: require('674').object.isRequired,
  deferredMeasurementCache: require('675').object,
  estimatedColumnSize: require('676').number.isRequired,
  estimatedRowSize: require('677').number.isRequired,
  getScrollbarSize: require('678').func.isRequired,
  height: require('679').number.isRequired,
  id: require('680').string,
  isScrolling: require('681').bool,
  noContentRenderer: typeof babelPluginFlowReactPropTypes_proptype_NoContentRenderer === "function" ? babelPluginFlowReactPropTypes_proptype_NoContentRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_NoContentRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_NoContentRenderer : require('682').shape(babelPluginFlowReactPropTypes_proptype_NoContentRenderer).isRequired,
  onScroll: require('683').func.isRequired,
  onScrollbarPresenceChange: require('684').func.isRequired,
  onSectionRendered: require('685').func.isRequired,
  overscanColumnCount: require('686').number.isRequired,
  overscanIndicesGetter: typeof babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter === "function" ? babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter.isRequired ? babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter.isRequired : babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter : require('687').shape(babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter).isRequired,
  overscanRowCount: require('688').number.isRequired,
  role: require('689').string.isRequired,
  rowHeight: typeof babelPluginFlowReactPropTypes_proptype_CellSize === "function" ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired : babelPluginFlowReactPropTypes_proptype_CellSize : require('690').shape(babelPluginFlowReactPropTypes_proptype_CellSize).isRequired,
  rowCount: require('691').number.isRequired,
  scrollingResetTimeInterval: require('692').number.isRequired,
  scrollLeft: require('693').number,
  scrollToAlignment: typeof babelPluginFlowReactPropTypes_proptype_Alignment === "function" ? babelPluginFlowReactPropTypes_proptype_Alignment.isRequired ? babelPluginFlowReactPropTypes_proptype_Alignment.isRequired : babelPluginFlowReactPropTypes_proptype_Alignment : require('694').shape(babelPluginFlowReactPropTypes_proptype_Alignment).isRequired,
  scrollToColumn: require('695').number.isRequired,
  scrollTop: require('696').number,
  scrollToRow: require('697').number.isRequired,
  style: require('698').object.isRequired,
  tabIndex: require('699').number.isRequired,
  width: require('700').number.isRequired
};
exports.default = Grid;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/node_modules/classnames/index.js", function(__filename, __dirname, require, module, exports) {
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
  'use strict';

  var hasOwn = {}.hasOwnProperty;

  function classNames() {
    var classes = [];

    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (!arg) continue;

      var argType = typeof arg;

      if (argType === 'string' || argType === 'number') {
        classes.push(arg);
      } else if (Array.isArray(arg)) {
        classes.push(classNames.apply(null, arg));
      } else if (argType === 'object') {
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes.push(key);
          }
        }
      }
    }

    return classes.join(' ');
  }

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = classNames;
  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
    // register as 'classnames', consistent with npm package name
    define('classnames', [], function () {
      return classNames;
    });
  } else {
    window.classNames = classNames;
  }
})();
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/utils/calculateSizeAndPositionDataAndUpdateScrollOffset.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calculateSizeAndPositionDataAndUpdateScrollOffset;
function calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {
  var cellCount = _ref.cellCount,
      cellSize = _ref.cellSize,
      computeMetadataCallback = _ref.computeMetadataCallback,
      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,
      nextCellsCount = _ref.nextCellsCount,
      nextCellSize = _ref.nextCellSize,
      nextScrollToIndex = _ref.nextScrollToIndex,
      scrollToIndex = _ref.scrollToIndex,
      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;

  // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.
  // In that event users should use the manual recompute methods to inform of changes.
  if (cellCount !== nextCellsCount || (typeof cellSize === "number" || typeof nextCellSize === "number") && cellSize !== nextCellSize) {
    computeMetadataCallback(computeMetadataCallbackProps);

    // Updated cell metadata may have hidden the previous scrolled-to item.
    // In this case we should also update the scrollTop to ensure it stays visible.
    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {
      updateScrollOffsetForScrollToIndex();
    }
  }
}

/**
 * Helper method that determines when to recalculate row or column metadata.
 */
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/utils/ScalingCellSizeAndPositionManager.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_MAX_SCROLL_SIZE = undefined;

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _CellSizeAndPositionManager = require('926');

var _CellSizeAndPositionManager2 = _interopRequireDefault(_CellSizeAndPositionManager);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var babelPluginFlowReactPropTypes_proptype_VisibleCellRange = require('927').babelPluginFlowReactPropTypes_proptype_VisibleCellRange || require('928').any;

var babelPluginFlowReactPropTypes_proptype_CellSizeGetter = require('929').babelPluginFlowReactPropTypes_proptype_CellSizeGetter || require('930').any;

var babelPluginFlowReactPropTypes_proptype_Alignment = require('931').babelPluginFlowReactPropTypes_proptype_Alignment || require('932').any;

/**
 * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).
 * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).
 * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.
 */
var DEFAULT_MAX_SCROLL_SIZE = exports.DEFAULT_MAX_SCROLL_SIZE = 1500000;

/**
 * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.
 */
var ScalingCellSizeAndPositionManager = function () {
  function ScalingCellSizeAndPositionManager(_ref) {
    var _ref$maxScrollSize = _ref.maxScrollSize,
        maxScrollSize = _ref$maxScrollSize === undefined ? DEFAULT_MAX_SCROLL_SIZE : _ref$maxScrollSize,
        params = _objectWithoutProperties(_ref, ["maxScrollSize"]);

    _classCallCheck(this, ScalingCellSizeAndPositionManager);

    // Favor composition over inheritance to simplify IE10 support
    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager2.default(params);
    this._maxScrollSize = maxScrollSize;
  }

  _createClass(ScalingCellSizeAndPositionManager, [{
    key: "areOffsetsAdjusted",
    value: function areOffsetsAdjusted() {
      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;
    }
  }, {
    key: "configure",
    value: function configure(params) {
      this._cellSizeAndPositionManager.configure(params);
    }
  }, {
    key: "getCellCount",
    value: function getCellCount() {
      return this._cellSizeAndPositionManager.getCellCount();
    }
  }, {
    key: "getEstimatedCellSize",
    value: function getEstimatedCellSize() {
      return this._cellSizeAndPositionManager.getEstimatedCellSize();
    }
  }, {
    key: "getLastMeasuredIndex",
    value: function getLastMeasuredIndex() {
      return this._cellSizeAndPositionManager.getLastMeasuredIndex();
    }

    /**
     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.
     * The offset passed to this function is scaled (safe) as well.
     */

  }, {
    key: "getOffsetAdjustment",
    value: function getOffsetAdjustment(_ref2) {
      var containerSize = _ref2.containerSize,
          offset = _ref2.offset;

      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
      var safeTotalSize = this.getTotalSize();
      var offsetPercentage = this._getOffsetPercentage({
        containerSize: containerSize,
        offset: offset,
        totalSize: safeTotalSize
      });

      return Math.round(offsetPercentage * (safeTotalSize - totalSize));
    }
  }, {
    key: "getSizeAndPositionOfCell",
    value: function getSizeAndPositionOfCell(index) {
      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);
    }
  }, {
    key: "getSizeAndPositionOfLastMeasuredCell",
    value: function getSizeAndPositionOfLastMeasuredCell() {
      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();
    }

    /** See CellSizeAndPositionManager#getTotalSize */

  }, {
    key: "getTotalSize",
    value: function getTotalSize() {
      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());
    }

    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */

  }, {
    key: "getUpdatedOffsetForIndex",
    value: function getUpdatedOffsetForIndex(_ref3) {
      var _ref3$align = _ref3.align,
          align = _ref3$align === undefined ? "auto" : _ref3$align,
          containerSize = _ref3.containerSize,
          currentOffset = _ref3.currentOffset,
          targetIndex = _ref3.targetIndex;

      currentOffset = this._safeOffsetToOffset({
        containerSize: containerSize,
        offset: currentOffset
      });

      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({
        align: align,
        containerSize: containerSize,
        currentOffset: currentOffset,
        targetIndex: targetIndex
      });

      return this._offsetToSafeOffset({
        containerSize: containerSize,
        offset: offset
      });
    }

    /** See CellSizeAndPositionManager#getVisibleCellRange */

  }, {
    key: "getVisibleCellRange",
    value: function getVisibleCellRange(_ref4) {
      var containerSize = _ref4.containerSize,
          offset = _ref4.offset;

      offset = this._safeOffsetToOffset({
        containerSize: containerSize,
        offset: offset
      });

      return this._cellSizeAndPositionManager.getVisibleCellRange({
        containerSize: containerSize,
        offset: offset
      });
    }
  }, {
    key: "resetCell",
    value: function resetCell(index) {
      this._cellSizeAndPositionManager.resetCell(index);
    }
  }, {
    key: "_getOffsetPercentage",
    value: function _getOffsetPercentage(_ref5) {
      var containerSize = _ref5.containerSize,
          offset = _ref5.offset,
          totalSize = _ref5.totalSize;

      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);
    }
  }, {
    key: "_offsetToSafeOffset",
    value: function _offsetToSafeOffset(_ref6) {
      var containerSize = _ref6.containerSize,
          offset = _ref6.offset;

      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
      var safeTotalSize = this.getTotalSize();

      if (totalSize === safeTotalSize) {
        return offset;
      } else {
        var offsetPercentage = this._getOffsetPercentage({
          containerSize: containerSize,
          offset: offset,
          totalSize: totalSize
        });

        return Math.round(offsetPercentage * (safeTotalSize - containerSize));
      }
    }
  }, {
    key: "_safeOffsetToOffset",
    value: function _safeOffsetToOffset(_ref7) {
      var containerSize = _ref7.containerSize,
          offset = _ref7.offset;

      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
      var safeTotalSize = this.getTotalSize();

      if (totalSize === safeTotalSize) {
        return offset;
      } else {
        var offsetPercentage = this._getOffsetPercentage({
          containerSize: containerSize,
          offset: offset,
          totalSize: safeTotalSize
        });

        return Math.round(offsetPercentage * (totalSize - containerSize));
      }
    }
  }]);

  return ScalingCellSizeAndPositionManager;
}();

exports.default = ScalingCellSizeAndPositionManager;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/utils/CellSizeAndPositionManager.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var babelPluginFlowReactPropTypes_proptype_VisibleCellRange = require('956').babelPluginFlowReactPropTypes_proptype_VisibleCellRange || require('957').any;

var babelPluginFlowReactPropTypes_proptype_CellSizeGetter = require('958').babelPluginFlowReactPropTypes_proptype_CellSizeGetter || require('959').any;

var babelPluginFlowReactPropTypes_proptype_Alignment = require('960').babelPluginFlowReactPropTypes_proptype_Alignment || require('961').any;

/**
 * Just-in-time calculates and caches size and position information for a collection of cells.
 */

var CellSizeAndPositionManager = function () {

  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.
  function CellSizeAndPositionManager(_ref) {
    var _ref$batchAllCells = _ref.batchAllCells,
        batchAllCells = _ref$batchAllCells === undefined ? false : _ref$batchAllCells,
        cellCount = _ref.cellCount,
        cellSizeGetter = _ref.cellSizeGetter,
        estimatedCellSize = _ref.estimatedCellSize;

    _classCallCheck(this, CellSizeAndPositionManager);

    this._cellSizeAndPositionData = {};
    this._lastMeasuredIndex = -1;
    this._lastBatchedIndex = -1;

    this._batchAllCells = batchAllCells;
    this._cellSizeGetter = cellSizeGetter;
    this._cellCount = cellCount;
    this._estimatedCellSize = estimatedCellSize;
  }

  // Used in deferred mode to track which cells have been queued for measurement.

  // Cache of size and position data for cells, mapped by cell index.
  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex


  _createClass(CellSizeAndPositionManager, [{
    key: "areOffsetsAdjusted",
    value: function areOffsetsAdjusted() {
      return false;
    }
  }, {
    key: "configure",
    value: function configure(_ref2) {
      var cellCount = _ref2.cellCount,
          estimatedCellSize = _ref2.estimatedCellSize;

      this._cellCount = cellCount;
      this._estimatedCellSize = estimatedCellSize;
    }
  }, {
    key: "getCellCount",
    value: function getCellCount() {
      return this._cellCount;
    }
  }, {
    key: "getEstimatedCellSize",
    value: function getEstimatedCellSize() {
      return this._estimatedCellSize;
    }
  }, {
    key: "getLastMeasuredIndex",
    value: function getLastMeasuredIndex() {
      return this._lastMeasuredIndex;
    }
  }, {
    key: "getOffsetAdjustment",
    value: function getOffsetAdjustment() {
      return 0;
    }

    /**
     * This method returns the size and position for the cell at the specified index.
     * It just-in-time calculates (or used cached values) for cells leading up to the index.
     */

  }, {
    key: "getSizeAndPositionOfCell",
    value: function getSizeAndPositionOfCell(index) {
      if (index < 0 || index >= this._cellCount) {
        throw Error("Requested index " + index + " is outside of range 0.." + this._cellCount);
      }

      if (index > this._lastMeasuredIndex) {
        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
        var _offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;

        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {
          var _size = this._cellSizeGetter({ index: i });

          // undefined or NaN probably means a logic error in the size getter.
          // null means we're using CellMeasurer and haven't yet measured a given index.
          if (_size === undefined || isNaN(_size)) {
            throw Error("Invalid size returned for cell " + i + " of value " + _size);
          } else if (_size === null) {
            this._cellSizeAndPositionData[i] = {
              offset: _offset,
              size: 0
            };

            this._lastBatchedIndex = index;
          } else {
            this._cellSizeAndPositionData[i] = {
              offset: _offset,
              size: _size
            };

            _offset += _size;

            this._lastMeasuredIndex = index;
          }
        }
      }

      return this._cellSizeAndPositionData[index];
    }
  }, {
    key: "getSizeAndPositionOfLastMeasuredCell",
    value: function getSizeAndPositionOfLastMeasuredCell() {
      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {
        offset: 0,
        size: 0
      };
    }

    /**
     * Total size of all cells being measured.
     * This value will be completely estimated initially.
     * As cells are measured, the estimate will be updated.
     */

  }, {
    key: "getTotalSize",
    value: function getTotalSize() {
      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;
      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;
      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;
      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;
    }

    /**
     * Determines a new offset that ensures a certain cell is visible, given the current offset.
     * If the cell is already visible then the current offset will be returned.
     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
     *
     * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
     * @param containerSize Size (width or height) of the container viewport
     * @param currentOffset Container's current (x or y) offset
     * @param totalSize Total size (width or height) of all cells
     * @return Offset to use to ensure the specified cell is visible
     */

  }, {
    key: "getUpdatedOffsetForIndex",
    value: function getUpdatedOffsetForIndex(_ref3) {
      var _ref3$align = _ref3.align,
          align = _ref3$align === undefined ? "auto" : _ref3$align,
          containerSize = _ref3.containerSize,
          currentOffset = _ref3.currentOffset,
          targetIndex = _ref3.targetIndex;

      if (containerSize <= 0) {
        return 0;
      }

      var datum = this.getSizeAndPositionOfCell(targetIndex);
      var maxOffset = datum.offset;
      var minOffset = maxOffset - containerSize + datum.size;

      var idealOffset = void 0;

      switch (align) {
        case "start":
          idealOffset = maxOffset;
          break;
        case "end":
          idealOffset = minOffset;
          break;
        case "center":
          idealOffset = maxOffset - (containerSize - datum.size) / 2;
          break;
        default:
          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));
          break;
      }

      var totalSize = this.getTotalSize();

      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));
    }
  }, {
    key: "getVisibleCellRange",
    value: function getVisibleCellRange(params) {
      // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.
      // eg we can't know a row's height without measuring the height of all columns within that row.
      if (this._batchAllCells) {
        return {
          start: 0,
          stop: this._cellCount - 1
        };
      }

      var containerSize = params.containerSize,
          offset = params.offset;

      var totalSize = this.getTotalSize();

      if (totalSize === 0) {
        return {};
      }

      var maxOffset = offset + containerSize;
      var start = this._findNearestCell(offset);

      var datum = this.getSizeAndPositionOfCell(start);
      offset = datum.offset + datum.size;

      var stop = start;

      while (offset < maxOffset && stop < this._cellCount - 1) {
        stop++;

        offset += this.getSizeAndPositionOfCell(stop).size;
      }

      return {
        start: start,
        stop: stop
      };
    }

    /**
     * Clear all cached values for cells after the specified index.
     * This method should be called for any cell that has changed its size.
     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.
     */

  }, {
    key: "resetCell",
    value: function resetCell(index) {
      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);
    }
  }, {
    key: "_binarySearch",
    value: function _binarySearch(high, low, offset) {
      while (low <= high) {
        var middle = low + Math.floor((high - low) / 2);
        var _currentOffset = this.getSizeAndPositionOfCell(middle).offset;

        if (_currentOffset === offset) {
          return middle;
        } else if (_currentOffset < offset) {
          low = middle + 1;
        } else if (_currentOffset > offset) {
          high = middle - 1;
        }
      }

      if (low > 0) {
        return low - 1;
      } else {
        return 0;
      }
    }
  }, {
    key: "_exponentialSearch",
    value: function _exponentialSearch(index, offset) {
      var interval = 1;

      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {
        index += interval;
        interval *= 2;
      }

      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);
    }

    /**
     * Searches for the cell (index) nearest the specified offset.
     *
     * If no exact match is found the next lowest cell index will be returned.
     * This allows partially visible cells (with offsets just before/above the fold) to be visible.
     */

  }, {
    key: "_findNearestCell",
    value: function _findNearestCell(offset) {
      if (isNaN(offset)) {
        throw Error("Invalid offset " + offset + " specified");
      }

      // Our search algorithms find the nearest match at or below the specified offset.
      // So make sure the offset is at least 0 or no match will be found.
      offset = Math.max(0, offset);

      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);

      if (lastMeasuredCellSizeAndPosition.offset >= offset) {
        // If we've already measured cells within this range just use a binary search as it's faster.
        return this._binarySearch(lastMeasuredIndex, 0, offset);
      } else {
        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.
        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.
        // The overall complexity for this approach is O(log n).
        return this._exponentialSearch(lastMeasuredIndex, offset);
      }
    }
  }]);

  return CellSizeAndPositionManager;
}();

exports.default = CellSizeAndPositionManager;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/types.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var _react = require('834');

var _react2 = _interopRequireDefault(_react);

var _ScalingCellSizeAndPositionManager = require('835');

var _ScalingCellSizeAndPositionManager2 = _interopRequireDefault(_ScalingCellSizeAndPositionManager);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellPosition", {
  value: {
    columnIndex: require('836').number.isRequired,
    rowIndex: require('837').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellRendererParams", {
  value: {
    columnIndex: require('838').number.isRequired,
    isScrolling: require('839').bool.isRequired,
    isVisible: require('840').bool.isRequired,
    key: require('841').string.isRequired,
    parent: require('842').object.isRequired,
    rowIndex: require('843').number.isRequired,
    style: require('844').object.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellRenderer", {
  value: require('845').func,
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellRangeRendererParams", {
  value: {
    cellCache: require('846').object.isRequired,
    cellRenderer: require('847').func.isRequired,
    columnSizeAndPositionManager: typeof _ScalingCellSizeAndPositionManager2.default === "function" ? require('848').instanceOf(_ScalingCellSizeAndPositionManager2.default).isRequired : require('849').any.isRequired,
    columnStartIndex: require('850').number.isRequired,
    columnStopIndex: require('851').number.isRequired,
    deferredMeasurementCache: require('852').object,
    horizontalOffsetAdjustment: require('853').number.isRequired,
    isScrolling: require('854').bool.isRequired,
    parent: require('855').object.isRequired,
    rowSizeAndPositionManager: typeof _ScalingCellSizeAndPositionManager2.default === "function" ? require('856').instanceOf(_ScalingCellSizeAndPositionManager2.default).isRequired : require('857').any.isRequired,
    rowStartIndex: require('858').number.isRequired,
    rowStopIndex: require('859').number.isRequired,
    scrollLeft: require('860').number.isRequired,
    scrollTop: require('861').number.isRequired,
    styleCache: require('862').object.isRequired,
    verticalOffsetAdjustment: require('863').number.isRequired,
    visibleColumnIndices: require('864').object.isRequired,
    visibleRowIndices: require('865').object.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellRangeRenderer", {
  value: require('866').func,
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellSizeGetter", {
  value: require('867').func,
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellSize", {
  value: require('868').oneOfType([require('869').func, require('870').number]),
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_NoContentRenderer", {
  value: require('871').func,
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_Scroll", {
  value: {
    clientHeight: require('872').number.isRequired,
    clientWidth: require('873').number.isRequired,
    scrollHeight: require('874').number.isRequired,
    scrollLeft: require('875').number.isRequired,
    scrollTop: require('876').number.isRequired,
    scrollWidth: require('877').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_ScrollbarPresenceChange", {
  value: {
    horizontal: require('878').bool.isRequired,
    vertical: require('879').bool.isRequired,
    size: require('880').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_RenderedSection", {
  value: {
    columnOverscanStartIndex: require('881').number.isRequired,
    columnOverscanStopIndex: require('882').number.isRequired,
    columnStartIndex: require('883').number.isRequired,
    columnStopIndex: require('884').number.isRequired,
    rowOverscanStartIndex: require('885').number.isRequired,
    rowOverscanStopIndex: require('886').number.isRequired,
    rowStartIndex: require('887').number.isRequired,
    rowStopIndex: require('888').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams", {
  value: {
    direction: require('889').oneOf(["horizontal", "vertical"]).isRequired,
    scrollDirection: require('890').oneOf([-1, 1]).isRequired,
    cellCount: require('891').number.isRequired,
    overscanCellsCount: require('892').number.isRequired,
    startIndex: require('893').number.isRequired,
    stopIndex: require('894').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_OverscanIndices", {
  value: {
    overscanStartIndex: require('895').number.isRequired,
    overscanStopIndex: require('896').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter", {
  value: require('897').func,
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_Alignment", {
  value: require('898').oneOf(["auto", "end", "start", "center"]),
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_VisibleCellRange", {
  value: {
    start: require('899').number,
    stop: require('900').number
  },
  configurable: true
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/utils/createCallbackMemoizer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCallbackMemoizer;
/**
 * Helper utility that updates the specified callback whenever any of the specified indices have changed.
 */
function createCallbackMemoizer() {
  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  var cachedIndices = {};

  return function (_ref) {
    var callback = _ref.callback,
        indices = _ref.indices;

    var keys = Object.keys(indices);
    var allInitialized = !requireAllKeys || keys.every(function (key) {
      var value = indices[key];
      return Array.isArray(value) ? value.length > 0 : value >= 0;
    });
    var indexChanged = keys.length !== Object.keys(cachedIndices).length || keys.some(function (key) {
      var cachedValue = cachedIndices[key];
      var value = indices[key];

      return Array.isArray(value) ? cachedValue.join(",") !== value.join(",") : cachedValue !== value;
    });

    cachedIndices = indices;

    if (allInitialized && indexChanged) {
      callback(indices);
    }
  };
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/defaultOverscanIndicesGetter.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultOverscanIndicesGetter;

var babelPluginFlowReactPropTypes_proptype_OverscanIndices = require('576').babelPluginFlowReactPropTypes_proptype_OverscanIndices || require('577').any;

var babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams = require('578').babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams || require('579').any;

var SCROLL_DIRECTION_BACKWARD = exports.SCROLL_DIRECTION_BACKWARD = -1;
var SCROLL_DIRECTION_FORWARD = exports.SCROLL_DIRECTION_FORWARD = 1;

var SCROLL_DIRECTION_HORIZONTAL = exports.SCROLL_DIRECTION_HORIZONTAL = "horizontal";
var SCROLL_DIRECTION_VERTICAL = exports.SCROLL_DIRECTION_VERTICAL = "vertical";

/**
 * Calculates the number of cells to overscan before and after a specified range.
 * This function ensures that overscanning doesn't exceed the available cells.
 */

function defaultOverscanIndicesGetter(_ref) {
  var cellCount = _ref.cellCount,
      overscanCellsCount = _ref.overscanCellsCount,
      scrollDirection = _ref.scrollDirection,
      startIndex = _ref.startIndex,
      stopIndex = _ref.stopIndex;

  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {
    return {
      overscanStartIndex: Math.max(0, startIndex),
      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)
    };
  } else {
    return {
      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),
      overscanStopIndex: Math.min(cellCount - 1, stopIndex)
    };
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/utils/updateScrollIndexHelper.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateScrollIndexHelper;

var _ScalingCellSizeAndPositionManager = require('923');

var _ScalingCellSizeAndPositionManager2 = _interopRequireDefault(_ScalingCellSizeAndPositionManager);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var babelPluginFlowReactPropTypes_proptype_Alignment = require('924').babelPluginFlowReactPropTypes_proptype_Alignment || require('925').any;

/**
 * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.
 * This function also ensures that the scroll ofset isn't past the last column/row of cells.
 */

function updateScrollIndexHelper(_ref) {
  var cellSize = _ref.cellSize,
      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,
      previousCellsCount = _ref.previousCellsCount,
      previousCellSize = _ref.previousCellSize,
      previousScrollToAlignment = _ref.previousScrollToAlignment,
      previousScrollToIndex = _ref.previousScrollToIndex,
      previousSize = _ref.previousSize,
      scrollOffset = _ref.scrollOffset,
      scrollToAlignment = _ref.scrollToAlignment,
      scrollToIndex = _ref.scrollToIndex,
      size = _ref.size,
      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,
      updateScrollIndexCallback = _ref.updateScrollIndexCallback;

  var cellCount = cellSizeAndPositionManager.getCellCount();
  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;
  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === "number" && cellSize !== previousCellSize;

  // If we have a new scroll target OR if height/row-height has changed,
  // We should ensure that the scroll target is visible.
  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {
    updateScrollIndexCallback(scrollToIndex);

    // If we don't have a selected item but list size or number of children have decreased,
    // Make sure we aren't scrolled too far past the current content.
  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {
    // We need to ensure that the current scroll offset is still within the collection's range.
    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.
    // Just check to make sure we're still okay.
    // Only adjust the scroll position if we've scrolled below the last set of rows.
    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {
      updateScrollIndexCallback(cellCount - 1);
    }
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/defaultCellRangeRenderer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultCellRangeRenderer;

/**
 * Default implementation of cellRangeRenderer used by Grid.
 * This renderer supports cell-caching while the user is scrolling.
 */

var babelPluginFlowReactPropTypes_proptype_CellRangeRendererParams = require('574').babelPluginFlowReactPropTypes_proptype_CellRangeRendererParams || require('575').any;

function defaultCellRangeRenderer(_ref) {
  var cellCache = _ref.cellCache,
      cellRenderer = _ref.cellRenderer,
      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,
      columnStartIndex = _ref.columnStartIndex,
      columnStopIndex = _ref.columnStopIndex,
      deferredMeasurementCache = _ref.deferredMeasurementCache,
      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,
      isScrolling = _ref.isScrolling,
      parent = _ref.parent,
      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,
      rowStartIndex = _ref.rowStartIndex,
      rowStopIndex = _ref.rowStopIndex,
      styleCache = _ref.styleCache,
      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,
      visibleColumnIndices = _ref.visibleColumnIndices,
      visibleRowIndices = _ref.visibleRowIndices;

  var renderedCells = [];

  // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).
  // User cannot scroll beyond these size limitations.
  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.
  // We should never cache styles for compressed offsets though as this can lead to bugs.
  // See issue #576 for more.
  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();

  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;

  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {
    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);

    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {
      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);
      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;
      var key = rowIndex + "-" + columnIndex;
      var style = void 0;

      // Cache style objects so shallow-compare doesn't re-render unnecessarily.
      if (canCacheStyle && styleCache[key]) {
        style = styleCache[key];
      } else {
        // In deferred mode, cells will be initially rendered before we know their size.
        // Don't interfere with CellMeasurer's measurements by setting an invalid size.
        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {
          // Position not-yet-measured cells at top/left 0,0,
          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.
          // Positioning them further to the right/bottom influences their measured size.
          style = {
            height: "auto",
            left: 0,
            position: "absolute",
            top: 0,
            width: "auto"
          };
        } else {
          style = {
            height: rowDatum.size,
            left: columnDatum.offset + horizontalOffsetAdjustment,
            position: "absolute",
            top: rowDatum.offset + verticalOffsetAdjustment,
            width: columnDatum.size
          };

          styleCache[key] = style;
        }
      }

      var cellRendererParams = {
        columnIndex: columnIndex,
        isScrolling: isScrolling,
        isVisible: isVisible,
        key: key,
        parent: parent,
        rowIndex: rowIndex,
        style: style
      };

      var renderedCell = void 0;

      // Avoid re-creating cells while scrolling.
      // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
      // If a scroll is in progress- cache and reuse cells.
      // This cache will be thrown away once scrolling completes.
      // However if we are scaling scroll positions and sizes, we should also avoid caching.
      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.
      // For more info refer to issue #395
      if (isScrolling && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {
        if (!cellCache[key]) {
          cellCache[key] = cellRenderer(cellRendererParams);
        }

        renderedCell = cellCache[key];

        // If the user is no longer scrolling, don't cache cells.
        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.
      } else {
        renderedCell = cellRenderer(cellRendererParams);
      }

      if (renderedCell == null || renderedCell === false) {
        continue;
      }

      if ('development' !== "production") {
        warnAboutMissingStyle(parent, renderedCell);
      }

      renderedCells.push(renderedCell);
    }
  }

  return renderedCells;
}

function warnAboutMissingStyle(parent, renderedCell) {
  if ('development' !== "production") {
    if (renderedCell) {
      // If the direct child is a CellMeasurer, then we should check its child
      // See issue #611
      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {
        renderedCell = renderedCell.props.children;
      }

      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {
        parent.__warnedAboutMissingStyle = true;

        console.warn("Rendered cell should include style property for positioning.");
      }
    }
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/node_modules/dom-helpers/util/scrollbarSize.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (recalc) {
  if (!size || recalc) {
    if (_inDOM2.default) {
      var scrollDiv = document.createElement('div');

      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.width = '50px';
      scrollDiv.style.height = '50px';
      scrollDiv.style.overflow = 'scroll';

      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }

  return size;
};

var _inDOM = require('1094');

var _inDOM2 = _interopRequireDefault(_inDOM);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var size = void 0;

module.exports = exports['default'];
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/node_modules/dom-helpers/util/inDOM.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
module.exports = exports['default'];
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/utils/requestAnimationTimeout.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestAnimationTimeout = exports.cancelAnimationTimeout = undefined;

var _animationFrame = require('916');

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId", {
  value: {
    id: require('917').number.isRequired
  },
  configurable: true
});
var cancelAnimationTimeout = exports.cancelAnimationTimeout = function cancelAnimationTimeout(frame) {
  return (0, _animationFrame.caf)(frame.id);
};

/**
 * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.
 * When the delay time has been reached the function you're timing out will be called.
 *
 * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)
 */
var requestAnimationTimeout = exports.requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {
  var start = Date.now();

  var timeout = function timeout() {
    if (Date.now() - start >= delay) {
      callback.call();
    } else {
      frame.id = (0, _animationFrame.raf)(timeout);
    }
  };

  var frame = {
    id: (0, _animationFrame.raf)(timeout)
  };

  return frame;
};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/utils/animationFrame.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

// Properly handle server-side rendering.
var win = void 0;

if (typeof window !== "undefined") {
  win = window;
} else if (typeof self !== "undefined") {
  win = self;
} else {
  win = {};
}

// requestAnimationFrame() shim by Paul Irish
// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
var request = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {
  return win.setTimeout(callback, 1000 / 60);
};

var cancel = win.cancelAnimationFrame || win.webkitCancelAnimationFrame || win.mozCancelAnimationFrame || win.oCancelAnimationFrame || win.msCancelAnimationFrame || function (id) {
  win.clearTimeout(id);
};

var raf = exports.raf = request;
var caf = exports.caf = cancel;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/accessibilityOverscanIndicesGetter.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultOverscanIndicesGetter;

var babelPluginFlowReactPropTypes_proptype_OverscanIndices = require('570').babelPluginFlowReactPropTypes_proptype_OverscanIndices || require('571').any;

var babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams = require('572').babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams || require('573').any;

var SCROLL_DIRECTION_BACKWARD = exports.SCROLL_DIRECTION_BACKWARD = -1;
var SCROLL_DIRECTION_FORWARD = exports.SCROLL_DIRECTION_FORWARD = 1;

var SCROLL_DIRECTION_HORIZONTAL = exports.SCROLL_DIRECTION_HORIZONTAL = "horizontal";
var SCROLL_DIRECTION_VERTICAL = exports.SCROLL_DIRECTION_VERTICAL = "vertical";

/**
 * Calculates the number of cells to overscan before and after a specified range.
 * This function ensures that overscanning doesn't exceed the available cells.
 */

function defaultOverscanIndicesGetter(_ref) {
  var cellCount = _ref.cellCount,
      overscanCellsCount = _ref.overscanCellsCount,
      scrollDirection = _ref.scrollDirection,
      startIndex = _ref.startIndex,
      stopIndex = _ref.stopIndex;

  // Make sure we render at least 1 cell extra before and after (except near boundaries)
  // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases
  // For more info see issues #625
  overscanCellsCount = Math.max(1, overscanCellsCount);

  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {
    return {
      overscanStartIndex: Math.max(0, startIndex - 1),
      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)
    };
  } else {
    return {
      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),
      overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)
    };
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ArrowKeyStepper/types.js", function(__filename, __dirname, require, module, exports) {
"use strict";

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_ScrollIndices", {
  value: {
    scrollToColumn: require('920').number.isRequired,
    scrollToRow: require('921').number.isRequired
  },
  configurable: true
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/AutoSizer/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AutoSizer = require('461');

Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AutoSizer).default;
  }
});
Object.defineProperty(exports, "AutoSizer", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AutoSizer).default;
  }
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/AutoSizer/AutoSizer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = require('547');

var _react2 = _interopRequireDefault(_react);

var _detectElementResize = require('548');

var _detectElementResize2 = _interopRequireDefault(_detectElementResize);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var babelPluginFlowReactPropTypes_proptype_Size = require('549').babelPluginFlowReactPropTypes_proptype_Size || require('550').any;

/**
 * Decorator component that automatically adjusts the width and height of a single child.
 * Child component should not be declared as a child but should rather be specified by a `ChildComponent` property.
 * All other properties will be passed through to the child component.
 */

var AutoSizer = function (_React$PureComponent) {
  _inherits(AutoSizer, _React$PureComponent);

  function AutoSizer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AutoSizer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AutoSizer.__proto__ || Object.getPrototypeOf(AutoSizer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      height: 0,
      width: 0
    }, _this._onResize = function () {
      var _this$props = _this.props,
          disableHeight = _this$props.disableHeight,
          disableWidth = _this$props.disableWidth,
          onResize = _this$props.onResize;

      if (_this._parentNode) {
        // Guard against AutoSizer component being removed from the DOM immediately after being added.
        // This can result in invalid style values which can result in NaN values if we don't handle them.
        // See issue #150 for more context.

        var height = _this._parentNode.offsetHeight || 0;
        var width = _this._parentNode.offsetWidth || 0;

        var style = window.getComputedStyle(_this._parentNode) || {};
        var paddingLeft = parseInt(style.paddingLeft, 10) || 0;
        var paddingRight = parseInt(style.paddingRight, 10) || 0;
        var paddingTop = parseInt(style.paddingTop, 10) || 0;
        var paddingBottom = parseInt(style.paddingBottom, 10) || 0;

        var newHeight = height - paddingTop - paddingBottom;
        var newWidth = width - paddingLeft - paddingRight;

        if (!disableHeight && _this.state.height !== newHeight || !disableWidth && _this.state.width !== newWidth) {
          _this.setState({
            height: height - paddingTop - paddingBottom,
            width: width - paddingLeft - paddingRight
          });

          onResize({ height: height, width: width });
        }
      }
    }, _this._setRef = function (autoSizer) {
      _this._autoSizer = autoSizer;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AutoSizer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var nonce = this.props.nonce;

      if (this._autoSizer && this._autoSizer.parentNode instanceof HTMLElement) {
        // Delay access of parentNode until mount.
        // This handles edge-cases where the component has already been unmounted before its ref has been set,
        // As well as libraries like react-lite which have a slightly different lifecycle.
        this._parentNode = this._autoSizer.parentNode;

        // Defer requiring resize handler in order to support server-side rendering.
        // See issue #41
        this._detectElementResize = (0, _detectElementResize2.default)(nonce);
        this._detectElementResize.addResizeListener(this._parentNode, this._onResize);

        this._onResize();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._detectElementResize && this._parentNode) {
        this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          children = _props.children,
          disableHeight = _props.disableHeight,
          disableWidth = _props.disableWidth;
      var _state = this.state,
          height = _state.height,
          width = _state.width;

      // Outer div should not force width/height since that may prevent containers from shrinking.
      // Inner component should overflow and use calculated width/height.
      // See issue #68 for more information.

      var outerStyle = { overflow: "visible" };

      if (!disableHeight) {
        outerStyle.height = 0;
      }

      if (!disableWidth) {
        outerStyle.width = 0;
      }

      /**
       * TODO: Avoid rendering children before the initial measurements have been collected.
       * At best this would just be wasting cycles.
       * Add this check into version 10 though as it could break too many ref callbacks in version 9.
      if (
        height !== 0 &&
        width !== 0
      ) {
        child = children({ height, width })
      }
      */

      return _react2.default.createElement("div", { ref: this._setRef, style: outerStyle }, children({ height: height, width: width }));
    }
  }]);

  return AutoSizer;
}(_react2.default.PureComponent);

AutoSizer.defaultProps = {
  onResize: function onResize() {},
  disableHeight: false,
  disableWidth: false
};
AutoSizer.propTypes = {
  children: require('551').func.isRequired,
  disableHeight: require('552').bool.isRequired,
  disableWidth: require('553').bool.isRequired,
  nonce: require('554').string,
  onResize: require('555').func.isRequired
};
exports.default = AutoSizer;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/vendor/detectElementResize.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDetectElementResize;
/**
 * Detect Element Resize.
 * https://github.com/sdecima/javascript-detect-element-resize
 * Sebastian Decima
 *
 * Forked from version 0.5.3; includes the following modifications:
 * 1) Guard against unsafe 'window' and 'document' references (to support SSR).
 * 2) Defer initialization code via a top-level function wrapper (to support SSR).
 * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.
 * 4) Add nonce for style element.
 **/

function createDetectElementResize(nonce) {
  // Check `document` and `window` in case of server-side rendering
  var _window;
  if (typeof window !== "undefined") {
    _window = window;
  } else if (typeof self !== "undefined") {
    _window = self;
  } else {
    _window = this;
  }

  var attachEvent = typeof document !== "undefined" && document.attachEvent;

  if (!attachEvent) {
    var requestFrame = function () {
      var raf = _window.requestAnimationFrame || _window.mozRequestAnimationFrame || _window.webkitRequestAnimationFrame || function (fn) {
        return _window.setTimeout(fn, 20);
      };
      return function (fn) {
        return raf(fn);
      };
    }();

    var cancelFrame = function () {
      var cancel = _window.cancelAnimationFrame || _window.mozCancelAnimationFrame || _window.webkitCancelAnimationFrame || _window.clearTimeout;
      return function (id) {
        return cancel(id);
      };
    }();

    var resetTriggers = function resetTriggers(element) {
      var triggers = element.__resizeTriggers__,
          expand = triggers.firstElementChild,
          contract = triggers.lastElementChild,
          expandChild = expand.firstElementChild;
      contract.scrollLeft = contract.scrollWidth;
      contract.scrollTop = contract.scrollHeight;
      expandChild.style.width = expand.offsetWidth + 1 + "px";
      expandChild.style.height = expand.offsetHeight + 1 + "px";
      expand.scrollLeft = expand.scrollWidth;
      expand.scrollTop = expand.scrollHeight;
    };

    var checkTriggers = function checkTriggers(element) {
      return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;
    };

    var scrollListener = function scrollListener(e) {
      // Don't measure (which forces) reflow for scrolls that happen inside of children!
      if (e.target.className.indexOf("contract-trigger") < 0 && e.target.className.indexOf("expand-trigger") < 0) {
        return;
      }

      var element = this;
      resetTriggers(this);
      if (this.__resizeRAF__) cancelFrame(this.__resizeRAF__);
      this.__resizeRAF__ = requestFrame(function () {
        if (checkTriggers(element)) {
          element.__resizeLast__.width = element.offsetWidth;
          element.__resizeLast__.height = element.offsetHeight;
          element.__resizeListeners__.forEach(function (fn) {
            fn.call(element, e);
          });
        }
      });
    };

    /* Detect CSS Animations support to detect element display/re-attach */
    var animation = false,
        keyframeprefix = "",
        animationstartevent = "animationstart",
        domPrefixes = "Webkit Moz O ms".split(" "),
        startEvents = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "),
        pfx = "";
    {
      var elm = document.createElement("fakeelement");
      if (elm.style.animationName !== undefined) {
        animation = true;
      }

      if (animation === false) {
        for (var i = 0; i < domPrefixes.length; i++) {
          if (elm.style[domPrefixes[i] + "AnimationName"] !== undefined) {
            pfx = domPrefixes[i];
            keyframeprefix = "-" + pfx.toLowerCase() + "-";
            animationstartevent = startEvents[i];
            animation = true;
            break;
          }
        }
      }
    }

    var animationName = "resizeanim";
    var animationKeyframes = "@" + keyframeprefix + "keyframes " + animationName + " { from { opacity: 0; } to { opacity: 0; } } ";
    var animationStyle = keyframeprefix + "animation: 1ms " + animationName + "; ";
  }

  var createStyles = function createStyles() {
    if (!document.getElementById("detectElementResize")) {
      //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360
      var css = (animationKeyframes ? animationKeyframes : "") + ".resize-triggers { " + (animationStyle ? animationStyle : "") + "visibility: hidden; opacity: 0; } " + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
          head = document.head || document.getElementsByTagName("head")[0],
          style = document.createElement("style");

      style.id = "detectElementResize";
      style.type = "text/css";

      if (nonce != null) {
        style.setAttribute("nonce", nonce);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }

      head.appendChild(style);
    }
  };

  var addResizeListener = function addResizeListener(element, fn) {
    if (attachEvent) element.attachEvent("onresize", fn);else {
      if (!element.__resizeTriggers__) {
        var elementStyle = _window.getComputedStyle(element);
        if (elementStyle && elementStyle.position == "static") {
          element.style.position = "relative";
        }
        createStyles();
        element.__resizeLast__ = {};
        element.__resizeListeners__ = [];
        (element.__resizeTriggers__ = document.createElement("div")).className = "resize-triggers";
        element.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div>' + '<div class="contract-trigger"></div>';
        element.appendChild(element.__resizeTriggers__);
        resetTriggers(element);
        element.addEventListener("scroll", scrollListener, true);

        /* Listen for a css animation to detect element display/re-attach */
        if (animationstartevent) {
          element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
            if (e.animationName == animationName) resetTriggers(element);
          };
          element.__resizeTriggers__.addEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
        }
      }
      element.__resizeListeners__.push(fn);
    }
  };

  var removeResizeListener = function removeResizeListener(element, fn) {
    if (attachEvent) element.detachEvent("onresize", fn);else {
      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
      if (!element.__resizeListeners__.length) {
        element.removeEventListener("scroll", scrollListener, true);
        if (element.__resizeTriggers__.__animationListener__) {
          element.__resizeTriggers__.removeEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
          element.__resizeTriggers__.__animationListener__ = null;
        }
        try {
          element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
        } catch (e) {
          // Preact compat; see developit/preact-compat/issues/228
        }
      }
    }
  };

  return {
    addResizeListener: addResizeListener,
    removeResizeListener: removeResizeListener
  };
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/AutoSizer/types.js", function(__filename, __dirname, require, module, exports) {
"use strict";

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_Size", {
  value: {
    height: require('816').number.isRequired,
    width: require('817').number.isRequired
  },
  configurable: true
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/CellMeasurer/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CellMeasurerCache = exports.CellMeasurer = exports.default = undefined;

var _CellMeasurer2 = require('459');

var _CellMeasurer3 = _interopRequireDefault(_CellMeasurer2);

var _CellMeasurerCache2 = require('460');

var _CellMeasurerCache3 = _interopRequireDefault(_CellMeasurerCache2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _CellMeasurer3.default;
exports.CellMeasurer = _CellMeasurer3.default;
exports.CellMeasurerCache = _CellMeasurerCache3.default;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/CellMeasurer/CellMeasurer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = require('532');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('533');

var _CellMeasurerCache = require('534');

var _CellMeasurerCache2 = _interopRequireDefault(_CellMeasurerCache);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * Wraps a cell and measures its rendered content.
 * Measurements are stored in a per-cell cache.
 * Cached-content is not be re-measured.
 */
var CellMeasurer = function (_React$PureComponent) {
  _inherits(CellMeasurer, _React$PureComponent);

  function CellMeasurer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CellMeasurer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CellMeasurer.__proto__ || Object.getPrototypeOf(CellMeasurer)).call.apply(_ref, [this].concat(args))), _this), _this._measure = function () {
      var _this$props = _this.props,
          cache = _this$props.cache,
          _this$props$columnInd = _this$props.columnIndex,
          columnIndex = _this$props$columnInd === undefined ? 0 : _this$props$columnInd,
          parent = _this$props.parent,
          _this$props$rowIndex = _this$props.rowIndex,
          rowIndex = _this$props$rowIndex === undefined ? _this.props.index || 0 : _this$props$rowIndex;

      var _this$_getCellMeasure = _this._getCellMeasurements(),
          height = _this$_getCellMeasure.height,
          width = _this$_getCellMeasure.width;

      if (height !== cache.getHeight(rowIndex, columnIndex) || width !== cache.getWidth(rowIndex, columnIndex)) {
        cache.set(rowIndex, columnIndex, width, height);

        if (parent && typeof parent.recomputeGridSize === "function") {
          parent.recomputeGridSize({
            columnIndex: columnIndex,
            rowIndex: rowIndex
          });
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CellMeasurer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._maybeMeasureCell();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._maybeMeasureCell();
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;

      return typeof children === "function" ? children({ measure: this._measure }) : children;
    }
  }, {
    key: "_getCellMeasurements",
    value: function _getCellMeasurements() {
      var cache = this.props.cache;

      var node = (0, _reactDom.findDOMNode)(this);

      // TODO Check for a bad combination of fixedWidth and missing numeric width or vice versa with height

      if (node instanceof HTMLElement) {
        var styleWidth = node.style.width;
        var styleHeight = node.style.height;

        // If we are re-measuring a cell that has already been measured,
        // It will have a hard-coded width/height from the previous measurement.
        // The fact that we are measuring indicates this measurement is probably stale,
        // So explicitly clear it out (eg set to "auto") so we can recalculate.
        // See issue #593 for more info.
        // Even if we are measuring initially- if we're inside of a MultiGrid component,
        // Explicitly clear width/height before measuring to avoid being tainted by another Grid.
        // eg top/left Grid renders before bottom/right Grid
        // Since the CellMeasurerCache is shared between them this taints derived cell size values.
        if (!cache.hasFixedWidth()) {
          node.style.width = "auto";
        }
        if (!cache.hasFixedHeight()) {
          node.style.height = "auto";
        }

        var height = Math.ceil(node.offsetHeight);
        var width = Math.ceil(node.offsetWidth);

        // Reset after measuring to avoid breaking styles; see #660
        if (styleWidth) {
          node.style.width = styleWidth;
        }
        if (styleHeight) {
          node.style.height = styleHeight;
        }

        return { height: height, width: width };
      } else {
        return { height: 0, width: 0 };
      }
    }
  }, {
    key: "_maybeMeasureCell",
    value: function _maybeMeasureCell() {
      var _props = this.props,
          cache = _props.cache,
          _props$columnIndex = _props.columnIndex,
          columnIndex = _props$columnIndex === undefined ? 0 : _props$columnIndex,
          parent = _props.parent,
          _props$rowIndex = _props.rowIndex,
          rowIndex = _props$rowIndex === undefined ? this.props.index || 0 : _props$rowIndex;

      if (!cache.has(rowIndex, columnIndex)) {
        var _getCellMeasurements2 = this._getCellMeasurements(),
            height = _getCellMeasurements2.height,
            width = _getCellMeasurements2.width;

        cache.set(rowIndex, columnIndex, width, height);

        // If size has changed, let Grid know to re-render.
        if (parent && typeof parent.invalidateCellSizeAfterRender === "function") {
          parent.invalidateCellSizeAfterRender({
            columnIndex: columnIndex,
            rowIndex: rowIndex
          });
        }
      }
    }
  }]);

  return CellMeasurer;
}(_react2.default.PureComponent);

// Used for DEV mode warning check


CellMeasurer.__internalCellMeasurerFlag = false;
CellMeasurer.propTypes = {
  cache: typeof _CellMeasurerCache2.default === "function" ? require('535').instanceOf(_CellMeasurerCache2.default).isRequired : require('536').any.isRequired,
  children: require('537').oneOfType([require('538').func, typeof (_react2.default.Element == null ? {} : _react2.default.Element) === "function" ? require('539').instanceOf(_react2.default.Element == null ? {} : _react2.default.Element) : require('540').any]).isRequired,
  columnIndex: require('541').number,
  index: require('542').number,
  parent: require('543').shape({
    invalidateCellSizeAfterRender: require('544').func,
    recomputeGridSize: require('545').func
  }).isRequired,
  rowIndex: require('546').number
};
exports.default = CellMeasurer;
if ('development' !== "production") {
  CellMeasurer.__internalCellMeasurerFlag = true;
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/CellMeasurer/CellMeasurerCache.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var DEFAULT_HEIGHT = exports.DEFAULT_HEIGHT = 30;
var DEFAULT_WIDTH = exports.DEFAULT_WIDTH = 100;

// Enables more intelligent mapping of a given column and row index to an item ID.
// This prevents a cell cache from being invalidated when its parent collection is modified.

/**
 * Caches measurements for a given cell.
 */
var CellMeasurerCache = function () {
  function CellMeasurerCache() {
    var _this = this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CellMeasurerCache);

    this._cellHeightCache = {};
    this._cellWidthCache = {};
    this._columnWidthCache = {};
    this._rowHeightCache = {};
    this._columnCount = 0;
    this._rowCount = 0;

    this.columnWidth = function (_ref) {
      var index = _ref.index;

      var key = _this._keyMapper(0, index);

      return _this._columnWidthCache.hasOwnProperty(key) ? _this._columnWidthCache[key] : _this._defaultWidth;
    };

    this.rowHeight = function (_ref2) {
      var index = _ref2.index;

      var key = _this._keyMapper(index, 0);

      return _this._rowHeightCache.hasOwnProperty(key) ? _this._rowHeightCache[key] : _this._defaultHeight;
    };

    var defaultHeight = params.defaultHeight,
        defaultWidth = params.defaultWidth,
        fixedHeight = params.fixedHeight,
        fixedWidth = params.fixedWidth,
        keyMapper = params.keyMapper,
        minHeight = params.minHeight,
        minWidth = params.minWidth;

    this._hasFixedHeight = fixedHeight === true;
    this._hasFixedWidth = fixedWidth === true;
    this._minHeight = minHeight || 0;
    this._minWidth = minWidth || 0;
    this._keyMapper = keyMapper || defaultKeyMapper;

    this._defaultHeight = Math.max(this._minHeight, typeof defaultHeight === "number" ? defaultHeight : DEFAULT_HEIGHT);
    this._defaultWidth = Math.max(this._minWidth, typeof defaultWidth === "number" ? defaultWidth : DEFAULT_WIDTH);

    if ('development' !== "production") {
      if (this._hasFixedHeight === false && this._hasFixedWidth === false) {
        console.warn("CellMeasurerCache should only measure a cell's width or height. " + "You have configured CellMeasurerCache to measure both. " + "This will result in poor performance.");
      }

      if (this._hasFixedHeight === false && this._defaultHeight === 0) {
        console.warn("Fixed height CellMeasurerCache should specify a :defaultHeight greater than 0. " + "Failing to do so will lead to unnecessary layout and poor performance.");
      }

      if (this._hasFixedWidth === false && this._defaultWidth === 0) {
        console.warn("Fixed width CellMeasurerCache should specify a :defaultWidth greater than 0. " + "Failing to do so will lead to unnecessary layout and poor performance.");
      }
    }
  }

  _createClass(CellMeasurerCache, [{
    key: "clear",
    value: function clear(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var key = this._keyMapper(rowIndex, columnIndex);

      delete this._cellHeightCache[key];
      delete this._cellWidthCache[key];

      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);
    }
  }, {
    key: "clearAll",
    value: function clearAll() {
      this._cellHeightCache = {};
      this._cellWidthCache = {};
      this._columnWidthCache = {};
      this._rowHeightCache = {};
      this._rowCount = 0;
      this._columnCount = 0;
    }
  }, {
    key: "hasFixedHeight",
    value: function hasFixedHeight() {
      return this._hasFixedHeight;
    }
  }, {
    key: "hasFixedWidth",
    value: function hasFixedWidth() {
      return this._hasFixedWidth;
    }
  }, {
    key: "getHeight",
    value: function getHeight(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (this._hasFixedHeight) {
        return this._defaultHeight;
      } else {
        var _key = this._keyMapper(rowIndex, columnIndex);

        return this._cellHeightCache.hasOwnProperty(_key) ? Math.max(this._minHeight, this._cellHeightCache[_key]) : this._defaultHeight;
      }
    }
  }, {
    key: "getWidth",
    value: function getWidth(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (this._hasFixedWidth) {
        return this._defaultWidth;
      } else {
        var _key2 = this._keyMapper(rowIndex, columnIndex);

        return this._cellWidthCache.hasOwnProperty(_key2) ? Math.max(this._minWidth, this._cellWidthCache[_key2]) : this._defaultWidth;
      }
    }
  }, {
    key: "has",
    value: function has(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var key = this._keyMapper(rowIndex, columnIndex);

      return this._cellHeightCache.hasOwnProperty(key);
    }
  }, {
    key: "set",
    value: function set(rowIndex, columnIndex, width, height) {
      var key = this._keyMapper(rowIndex, columnIndex);

      if (columnIndex >= this._columnCount) {
        this._columnCount = columnIndex + 1;
      }
      if (rowIndex >= this._rowCount) {
        this._rowCount = rowIndex + 1;
      }

      // Size is cached per cell so we don't have to re-measure if cells are re-ordered.
      this._cellHeightCache[key] = height;
      this._cellWidthCache[key] = width;

      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);
    }
  }, {
    key: "_updateCachedColumnAndRowSizes",
    value: function _updateCachedColumnAndRowSizes(rowIndex, columnIndex) {
      // :columnWidth and :rowHeight are derived based on all cells in a column/row.
      // Pre-cache these derived values for faster lookup later.
      // Reads are expected to occur more frequently than writes in this case.
      // Only update non-fixed dimensions though to avoid doing unnecessary work.
      if (!this._hasFixedWidth) {
        var columnWidth = 0;
        for (var i = 0; i < this._rowCount; i++) {
          columnWidth = Math.max(columnWidth, this.getWidth(i, columnIndex));
        }
        var columnKey = this._keyMapper(0, columnIndex);
        this._columnWidthCache[columnKey] = columnWidth;
      }
      if (!this._hasFixedHeight) {
        var rowHeight = 0;
        for (var _i = 0; _i < this._columnCount; _i++) {
          rowHeight = Math.max(rowHeight, this.getHeight(rowIndex, _i));
        }
        var rowKey = this._keyMapper(rowIndex, 0);
        this._rowHeightCache[rowKey] = rowHeight;
      }
    }
  }, {
    key: "defaultHeight",
    get: function get() {
      return this._defaultHeight;
    }
  }, {
    key: "defaultWidth",
    get: function get() {
      return this._defaultWidth;
    }
  }]);

  return CellMeasurerCache;
}();

exports.default = CellMeasurerCache;

function defaultKeyMapper(rowIndex, columnIndex) {
  return rowIndex + "-" + columnIndex;
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collection = exports.default = undefined;

var _Collection2 = require('462');

var _Collection3 = _interopRequireDefault(_Collection2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _Collection3.default;
exports.Collection = _Collection3.default;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/Collection.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _propTypes = require('556');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('557');

var _react2 = _interopRequireDefault(_react);

var _CollectionView = require('558');

var _CollectionView2 = _interopRequireDefault(_CollectionView);

var _calculateSizeAndPositionData2 = require('559');

var _calculateSizeAndPositionData3 = _interopRequireDefault(_calculateSizeAndPositionData2);

var _getUpdatedOffsetForIndex = require('560');

var _getUpdatedOffsetForIndex2 = _interopRequireDefault(_getUpdatedOffsetForIndex);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * Renders scattered or non-linear data.
 * Unlike Grid, which renders checkerboard data, Collection can render arbitrarily positioned- even overlapping- data.
 */
var babelPluginFlowReactPropTypes_proptype_SizeInfo = require('561').babelPluginFlowReactPropTypes_proptype_SizeInfo || require('562').any;

var babelPluginFlowReactPropTypes_proptype_ScrollPosition = require('563').babelPluginFlowReactPropTypes_proptype_ScrollPosition || require('564').any;

var Collection = function (_PureComponent) {
  _inherits(Collection, _PureComponent);

  function Collection(props, context) {
    _classCallCheck(this, Collection);

    var _this = _possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).call(this, props, context));

    _this._cellMetadata = [];
    _this._lastRenderedCellIndices = [];

    // Cell cache during scroll (for perforamnce)
    _this._cellCache = [];

    _this._isScrollingChange = _this._isScrollingChange.bind(_this);
    _this._setCollectionViewRef = _this._setCollectionViewRef.bind(_this);
    return _this;
  }

  _createClass(Collection, [{
    key: "forceUpdate",
    value: function forceUpdate() {
      if (this._collectionView !== undefined) {
        this._collectionView.forceUpdate();
      }
    }

    /** See Collection#recomputeCellSizesAndPositions */

  }, {
    key: "recomputeCellSizesAndPositions",
    value: function recomputeCellSizesAndPositions() {
      this._cellCache = [];
      this._collectionView.recomputeCellSizesAndPositions();
    }

    /** React lifecycle methods */

  }, {
    key: "render",
    value: function render() {
      var props = _objectWithoutProperties(this.props, []);

      return _react2.default.createElement(_CollectionView2.default, _extends({
        cellLayoutManager: this,
        isScrollingChange: this._isScrollingChange,
        ref: this._setCollectionViewRef
      }, props));
    }

    /** CellLayoutManager interface */

  }, {
    key: "calculateSizeAndPositionData",
    value: function calculateSizeAndPositionData() {
      var _props = this.props,
          cellCount = _props.cellCount,
          cellSizeAndPositionGetter = _props.cellSizeAndPositionGetter,
          sectionSize = _props.sectionSize;

      var data = (0, _calculateSizeAndPositionData3.default)({
        cellCount: cellCount,
        cellSizeAndPositionGetter: cellSizeAndPositionGetter,
        sectionSize: sectionSize
      });

      this._cellMetadata = data.cellMetadata;
      this._sectionManager = data.sectionManager;
      this._height = data.height;
      this._width = data.width;
    }

    /**
     * Returns the most recently rendered set of cell indices.
     */

  }, {
    key: "getLastRenderedIndices",
    value: function getLastRenderedIndices() {
      return this._lastRenderedCellIndices;
    }

    /**
     * Calculates the minimum amount of change from the current scroll position to ensure the specified cell is (fully) visible.
     */

  }, {
    key: "getScrollPositionForCell",
    value: function getScrollPositionForCell(_ref) {
      var align = _ref.align,
          cellIndex = _ref.cellIndex,
          height = _ref.height,
          scrollLeft = _ref.scrollLeft,
          scrollTop = _ref.scrollTop,
          width = _ref.width;
      var cellCount = this.props.cellCount;

      if (cellIndex >= 0 && cellIndex < cellCount) {
        var cellMetadata = this._cellMetadata[cellIndex];

        scrollLeft = (0, _getUpdatedOffsetForIndex2.default)({
          align: align,
          cellOffset: cellMetadata.x,
          cellSize: cellMetadata.width,
          containerSize: width,
          currentOffset: scrollLeft,
          targetIndex: cellIndex
        });

        scrollTop = (0, _getUpdatedOffsetForIndex2.default)({
          align: align,
          cellOffset: cellMetadata.y,
          cellSize: cellMetadata.height,
          containerSize: height,
          currentOffset: scrollTop,
          targetIndex: cellIndex
        });
      }

      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }
  }, {
    key: "getTotalSize",
    value: function getTotalSize() {
      return {
        height: this._height,
        width: this._width
      };
    }
  }, {
    key: "cellRenderers",
    value: function cellRenderers(_ref2) {
      var _this2 = this;

      var height = _ref2.height,
          isScrolling = _ref2.isScrolling,
          width = _ref2.width,
          x = _ref2.x,
          y = _ref2.y;
      var _props2 = this.props,
          cellGroupRenderer = _props2.cellGroupRenderer,
          cellRenderer = _props2.cellRenderer;

      // Store for later calls to getLastRenderedIndices()

      this._lastRenderedCellIndices = this._sectionManager.getCellIndices({
        height: height,
        width: width,
        x: x,
        y: y
      });

      return cellGroupRenderer({
        cellCache: this._cellCache,
        cellRenderer: cellRenderer,
        cellSizeAndPositionGetter: function cellSizeAndPositionGetter(_ref3) {
          var index = _ref3.index;
          return _this2._sectionManager.getCellMetadata({ index: index });
        },
        indices: this._lastRenderedCellIndices,
        isScrolling: isScrolling
      });
    }
  }, {
    key: "_isScrollingChange",
    value: function _isScrollingChange(isScrolling) {
      if (!isScrolling) {
        this._cellCache = [];
      }
    }
  }, {
    key: "_setCollectionViewRef",
    value: function _setCollectionViewRef(ref) {
      this._collectionView = ref;
    }
  }]);

  return Collection;
}(_react.PureComponent);

Collection.defaultProps = {
  "aria-label": "grid",
  cellGroupRenderer: defaultCellGroupRenderer
};
exports.default = Collection;
Collection.propTypes = 'development' !== "production" ? {
  "aria-label": _propTypes2.default.string,

  /**
   * Number of cells in Collection.
   */
  cellCount: _propTypes2.default.number.isRequired,

  /**
   * Responsible for rendering a group of cells given their indices.
   * Should implement the following interface: ({
   *   cellSizeAndPositionGetter:Function,
   *   indices: Array<number>,
   *   cellRenderer: Function
   * }): Array<PropTypes.node>
   */
  cellGroupRenderer: _propTypes2.default.func.isRequired,

  /**
   * Responsible for rendering a cell given an row and column index.
   * Should implement the following interface: ({ index: number, key: string, style: object }): PropTypes.element
   */
  cellRenderer: _propTypes2.default.func.isRequired,

  /**
   * Callback responsible for returning size and offset/position information for a given cell (index).
   * ({ index: number }): { height: number, width: number, x: number, y: number }
   */
  cellSizeAndPositionGetter: _propTypes2.default.func.isRequired,

  /**
   * Optionally override the size of the sections a Collection's cells are split into.
   */
  sectionSize: _propTypes2.default.number
} : {};

function defaultCellGroupRenderer(_ref4) {
  var cellCache = _ref4.cellCache,
      cellRenderer = _ref4.cellRenderer,
      cellSizeAndPositionGetter = _ref4.cellSizeAndPositionGetter,
      indices = _ref4.indices,
      isScrolling = _ref4.isScrolling;

  return indices.map(function (index) {
    var cellMetadata = cellSizeAndPositionGetter({ index: index });

    var cellRendererProps = {
      index: index,
      isScrolling: isScrolling,
      key: index,
      style: {
        height: cellMetadata.height,
        left: cellMetadata.x,
        position: "absolute",
        top: cellMetadata.y,
        width: cellMetadata.width
      }
    };

    // Avoid re-creating cells while scrolling.
    // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
    // If a scroll is in progress- cache and reuse cells.
    // This cache will be thrown away once scrolling complets.
    if (isScrolling) {
      if (!(index in cellCache)) {
        cellCache[index] = cellRenderer(cellRendererProps);
      }

      return cellCache[index];
    } else {
      return cellRenderer(cellRendererProps);
    }
  }).filter(function (renderedCell) {
    return !!renderedCell;
  });
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/CollectionView.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _propTypes = require('818');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('819');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('820');

var _classnames2 = _interopRequireDefault(_classnames);

var _createCallbackMemoizer = require('821');

var _createCallbackMemoizer2 = _interopRequireDefault(_createCallbackMemoizer);

var _scrollbarSize = require('822');

var _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

// @TODO Merge Collection and CollectionView

/**
 * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.
 * This improves performance and makes scrolling smoother.
 */
var IS_SCROLLING_TIMEOUT = 150;

/**
 * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
 * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
 */
var SCROLL_POSITION_CHANGE_REASONS = {
  OBSERVED: "observed",
  REQUESTED: "requested"
};

/**
 * Monitors changes in properties (eg. cellCount) and state (eg. scroll offsets) to determine when rendering needs to occur.
 * This component does not render any visible content itself; it defers to the specified :cellLayoutManager.
 */

var CollectionView = function (_PureComponent) {
  _inherits(CollectionView, _PureComponent);

  function CollectionView(props, context) {
    _classCallCheck(this, CollectionView);

    var _this = _possibleConstructorReturn(this, (CollectionView.__proto__ || Object.getPrototypeOf(CollectionView)).call(this, props, context));

    _this.state = {
      isScrolling: false,
      scrollLeft: 0,
      scrollTop: 0
    };

    _this._calculateSizeAndPositionDataOnNextUpdate = false;

    // Invokes callbacks only when their values have changed.
    _this._onSectionRenderedMemoizer = (0, _createCallbackMemoizer2.default)();
    _this._onScrollMemoizer = (0, _createCallbackMemoizer2.default)(false);

    // Bind functions to instance so they don't lose context when passed around.
    _this._invokeOnSectionRenderedHelper = _this._invokeOnSectionRenderedHelper.bind(_this);
    _this._onScroll = _this._onScroll.bind(_this);
    _this._setScrollingContainerRef = _this._setScrollingContainerRef.bind(_this);
    _this._updateScrollPositionForScrollToCell = _this._updateScrollPositionForScrollToCell.bind(_this);
    return _this;
  }

  /**
   * Forced recompute of cell sizes and positions.
   * This function should be called if cell sizes have changed but nothing else has.
   * Since cell positions are calculated by callbacks, the collection view has no way of detecting when the underlying data has changed.
   */

  _createClass(CollectionView, [{
    key: "recomputeCellSizesAndPositions",
    value: function recomputeCellSizesAndPositions() {
      this._calculateSizeAndPositionDataOnNextUpdate = true;
      this.forceUpdate();
    }

    /* ---------------------------- Component lifecycle methods ---------------------------- */

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _props = this.props,
          cellLayoutManager = _props.cellLayoutManager,
          scrollLeft = _props.scrollLeft,
          scrollToCell = _props.scrollToCell,
          scrollTop = _props.scrollTop;

      // If this component was first rendered server-side, scrollbar size will be undefined.
      // In that event we need to remeasure.

      if (!this._scrollbarSizeMeasured) {
        this._scrollbarSize = (0, _scrollbarSize2.default)();
        this._scrollbarSizeMeasured = true;
        this.setState({});
      }

      if (scrollToCell >= 0) {
        this._updateScrollPositionForScrollToCell();
      } else if (scrollLeft >= 0 || scrollTop >= 0) {
        this._setScrollPosition({ scrollLeft: scrollLeft, scrollTop: scrollTop });
      }

      // Update onSectionRendered callback.
      this._invokeOnSectionRenderedHelper();

      var _cellLayoutManager$ge = cellLayoutManager.getTotalSize(),
          totalHeight = _cellLayoutManager$ge.height,
          totalWidth = _cellLayoutManager$ge.width;

      // Initialize onScroll callback.


      this._invokeOnScrollMemoizer({
        scrollLeft: scrollLeft || 0,
        scrollTop: scrollTop || 0,
        totalHeight: totalHeight,
        totalWidth: totalWidth
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _props2 = this.props,
          height = _props2.height,
          scrollToAlignment = _props2.scrollToAlignment,
          scrollToCell = _props2.scrollToCell,
          width = _props2.width;
      var _state = this.state,
          scrollLeft = _state.scrollLeft,
          scrollPositionChangeReason = _state.scrollPositionChangeReason,
          scrollTop = _state.scrollTop;

      // Make sure requested changes to :scrollLeft or :scrollTop get applied.
      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
      // So we only set these when we require an adjustment of the scroll position.
      // See issue #2 for more information.

      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {
        if (scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft) {
          this._scrollingContainer.scrollLeft = scrollLeft;
        }
        if (scrollTop >= 0 && scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop) {
          this._scrollingContainer.scrollTop = scrollTop;
        }
      }

      // Update scroll offsets if the current :scrollToCell values requires it
      if (height !== prevProps.height || scrollToAlignment !== prevProps.scrollToAlignment || scrollToCell !== prevProps.scrollToCell || width !== prevProps.width) {
        this._updateScrollPositionForScrollToCell();
      }

      // Update onRowsRendered callback if start/stop indices have changed
      this._invokeOnSectionRenderedHelper();
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      var cellLayoutManager = this.props.cellLayoutManager;

      cellLayoutManager.calculateSizeAndPositionData();

      // If this component is being rendered server-side, getScrollbarSize() will return undefined.
      // We handle this case in componentDidMount()
      this._scrollbarSize = (0, _scrollbarSize2.default)();
      if (this._scrollbarSize === undefined) {
        this._scrollbarSizeMeasured = false;
        this._scrollbarSize = 0;
      } else {
        this._scrollbarSizeMeasured = true;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._disablePointerEventsTimeoutId) {
        clearTimeout(this._disablePointerEventsTimeoutId);
      }
    }

    /**
     * @private
     * This method updates scrollLeft/scrollTop in state for the following conditions:
     * 1) Empty content (0 rows or columns)
     * 2) New scroll props overriding the current state
     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
     */

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _state2 = this.state,
          scrollLeft = _state2.scrollLeft,
          scrollTop = _state2.scrollTop;

      if (nextProps.cellCount === 0 && (scrollLeft !== 0 || scrollTop !== 0)) {
        this._setScrollPosition({
          scrollLeft: 0,
          scrollTop: 0
        });
      } else if (nextProps.scrollLeft !== this.props.scrollLeft || nextProps.scrollTop !== this.props.scrollTop) {
        this._setScrollPosition({
          scrollLeft: nextProps.scrollLeft,
          scrollTop: nextProps.scrollTop
        });
      }

      if (nextProps.cellCount !== this.props.cellCount || nextProps.cellLayoutManager !== this.props.cellLayoutManager || this._calculateSizeAndPositionDataOnNextUpdate) {
        nextProps.cellLayoutManager.calculateSizeAndPositionData();
      }

      if (this._calculateSizeAndPositionDataOnNextUpdate) {
        this._calculateSizeAndPositionDataOnNextUpdate = false;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props3 = this.props,
          autoHeight = _props3.autoHeight,
          cellCount = _props3.cellCount,
          cellLayoutManager = _props3.cellLayoutManager,
          className = _props3.className,
          height = _props3.height,
          horizontalOverscanSize = _props3.horizontalOverscanSize,
          id = _props3.id,
          noContentRenderer = _props3.noContentRenderer,
          style = _props3.style,
          verticalOverscanSize = _props3.verticalOverscanSize,
          width = _props3.width;
      var _state3 = this.state,
          isScrolling = _state3.isScrolling,
          scrollLeft = _state3.scrollLeft,
          scrollTop = _state3.scrollTop;

      var _cellLayoutManager$ge2 = cellLayoutManager.getTotalSize(),
          totalHeight = _cellLayoutManager$ge2.height,
          totalWidth = _cellLayoutManager$ge2.width;

      // Safely expand the rendered area by the specified overscan amount


      var left = Math.max(0, scrollLeft - horizontalOverscanSize);
      var top = Math.max(0, scrollTop - verticalOverscanSize);
      var right = Math.min(totalWidth, scrollLeft + width + horizontalOverscanSize);
      var bottom = Math.min(totalHeight, scrollTop + height + verticalOverscanSize);

      var childrenToDisplay = height > 0 && width > 0 ? cellLayoutManager.cellRenderers({
        height: bottom - top,
        isScrolling: isScrolling,
        width: right - left,
        x: left,
        y: top
      }) : [];

      var collectionStyle = {
        boxSizing: "border-box",
        direction: "ltr",
        height: autoHeight ? "auto" : height,
        position: "relative",
        WebkitOverflowScrolling: "touch",
        width: width,
        willChange: "transform"
      };

      // Force browser to hide scrollbars when we know they aren't necessary.
      // Otherwise once scrollbars appear they may not disappear again.
      // For more info see issue #116
      var verticalScrollBarSize = totalHeight > height ? this._scrollbarSize : 0;
      var horizontalScrollBarSize = totalWidth > width ? this._scrollbarSize : 0;

      // Also explicitly init styles to 'auto' if scrollbars are required.
      // This works around an obscure edge case where external CSS styles have not yet been loaded,
      // But an initial scroll index of offset is set as an external prop.
      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
      // This was originally reported via clauderic/react-infinite-calendar/issues/23
      collectionStyle.overflowX = totalWidth + verticalScrollBarSize <= width ? "hidden" : "auto";
      collectionStyle.overflowY = totalHeight + horizontalScrollBarSize <= height ? "hidden" : "auto";

      return _react2.default.createElement("div", {
        ref: this._setScrollingContainerRef,
        "aria-label": this.props["aria-label"],
        className: (0, _classnames2.default)("ReactVirtualized__Collection", className),
        id: id,
        onScroll: this._onScroll,
        role: "grid",
        style: _extends({}, collectionStyle, style),
        tabIndex: 0
      }, cellCount > 0 && _react2.default.createElement("div", {
        className: "ReactVirtualized__Collection__innerScrollContainer",
        style: {
          height: totalHeight,
          maxHeight: totalHeight,
          maxWidth: totalWidth,
          overflow: "hidden",
          pointerEvents: isScrolling ? "none" : "",
          width: totalWidth
        }
      }, childrenToDisplay), cellCount === 0 && noContentRenderer());
    }

    /* ---------------------------- Helper methods ---------------------------- */

    /**
     * Sets an :isScrolling flag for a small window of time.
     * This flag is used to disable pointer events on the scrollable portion of the Collection.
     * This prevents jerky/stuttery mouse-wheel scrolling.
     */

  }, {
    key: "_enablePointerEventsAfterDelay",
    value: function _enablePointerEventsAfterDelay() {
      var _this2 = this;

      if (this._disablePointerEventsTimeoutId) {
        clearTimeout(this._disablePointerEventsTimeoutId);
      }

      this._disablePointerEventsTimeoutId = setTimeout(function () {
        var isScrollingChange = _this2.props.isScrollingChange;

        isScrollingChange(false);

        _this2._disablePointerEventsTimeoutId = null;
        _this2.setState({
          isScrolling: false
        });
      }, IS_SCROLLING_TIMEOUT);
    }
  }, {
    key: "_invokeOnSectionRenderedHelper",
    value: function _invokeOnSectionRenderedHelper() {
      var _props4 = this.props,
          cellLayoutManager = _props4.cellLayoutManager,
          onSectionRendered = _props4.onSectionRendered;

      this._onSectionRenderedMemoizer({
        callback: onSectionRendered,
        indices: {
          indices: cellLayoutManager.getLastRenderedIndices()
        }
      });
    }
  }, {
    key: "_invokeOnScrollMemoizer",
    value: function _invokeOnScrollMemoizer(_ref) {
      var _this3 = this;

      var scrollLeft = _ref.scrollLeft,
          scrollTop = _ref.scrollTop,
          totalHeight = _ref.totalHeight,
          totalWidth = _ref.totalWidth;

      this._onScrollMemoizer({
        callback: function callback(_ref2) {
          var scrollLeft = _ref2.scrollLeft,
              scrollTop = _ref2.scrollTop;
          var _props5 = _this3.props,
              height = _props5.height,
              onScroll = _props5.onScroll,
              width = _props5.width;

          onScroll({
            clientHeight: height,
            clientWidth: width,
            scrollHeight: totalHeight,
            scrollLeft: scrollLeft,
            scrollTop: scrollTop,
            scrollWidth: totalWidth
          });
        },
        indices: {
          scrollLeft: scrollLeft,
          scrollTop: scrollTop
        }
      });
    }
  }, {
    key: "_setScrollingContainerRef",
    value: function _setScrollingContainerRef(ref) {
      this._scrollingContainer = ref;
    }
  }, {
    key: "_setScrollPosition",
    value: function _setScrollPosition(_ref3) {
      var scrollLeft = _ref3.scrollLeft,
          scrollTop = _ref3.scrollTop;

      var newState = {
        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
      };

      if (scrollLeft >= 0) {
        newState.scrollLeft = scrollLeft;
      }

      if (scrollTop >= 0) {
        newState.scrollTop = scrollTop;
      }

      if (scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || scrollTop >= 0 && scrollTop !== this.state.scrollTop) {
        this.setState(newState);
      }
    }
  }, {
    key: "_updateScrollPositionForScrollToCell",
    value: function _updateScrollPositionForScrollToCell() {
      var _props6 = this.props,
          cellLayoutManager = _props6.cellLayoutManager,
          height = _props6.height,
          scrollToAlignment = _props6.scrollToAlignment,
          scrollToCell = _props6.scrollToCell,
          width = _props6.width;
      var _state4 = this.state,
          scrollLeft = _state4.scrollLeft,
          scrollTop = _state4.scrollTop;

      if (scrollToCell >= 0) {
        var scrollPosition = cellLayoutManager.getScrollPositionForCell({
          align: scrollToAlignment,
          cellIndex: scrollToCell,
          height: height,
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
          width: width
        });

        if (scrollPosition.scrollLeft !== scrollLeft || scrollPosition.scrollTop !== scrollTop) {
          this._setScrollPosition(scrollPosition);
        }
      }
    }
  }, {
    key: "_onScroll",
    value: function _onScroll(event) {
      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
      // See issue #404 for more information.
      if (event.target !== this._scrollingContainer) {
        return;
      }

      // Prevent pointer events from interrupting a smooth scroll
      this._enablePointerEventsAfterDelay();

      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
      // This causes a series of rapid renders that is slow for long lists.
      // We can avoid that by doing some simple bounds checking to ensure that scrollTop never exceeds the total height.
      var _props7 = this.props,
          cellLayoutManager = _props7.cellLayoutManager,
          height = _props7.height,
          isScrollingChange = _props7.isScrollingChange,
          width = _props7.width;

      var scrollbarSize = this._scrollbarSize;

      var _cellLayoutManager$ge3 = cellLayoutManager.getTotalSize(),
          totalHeight = _cellLayoutManager$ge3.height,
          totalWidth = _cellLayoutManager$ge3.width;

      var scrollLeft = Math.max(0, Math.min(totalWidth - width + scrollbarSize, event.target.scrollLeft));
      var scrollTop = Math.max(0, Math.min(totalHeight - height + scrollbarSize, event.target.scrollTop));

      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
      // Don't force a re-render if this is the case.
      // The mouse may move faster then the animation frame does.
      // Use requestAnimationFrame to avoid over-updating.
      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {
        // Browsers with cancelable scroll events (eg. Firefox) interrupt scrolling animations if scrollTop/scrollLeft is set.
        // Other browsers (eg. Safari) don't scroll as well without the help under certain conditions (DOM or style changes during scrolling).
        // All things considered, this seems to be the best current work around that I'm aware of.
        // For more information see https://github.com/bvaughn/react-virtualized/pull/124
        var scrollPositionChangeReason = event.cancelable ? SCROLL_POSITION_CHANGE_REASONS.OBSERVED : SCROLL_POSITION_CHANGE_REASONS.REQUESTED;

        // Synchronously set :isScrolling the first time (since _setNextState will reschedule its animation frame each time it's called)
        if (!this.state.isScrolling) {
          isScrollingChange(true);
        }

        this.setState({
          isScrolling: true,
          scrollLeft: scrollLeft,
          scrollPositionChangeReason: scrollPositionChangeReason,
          scrollTop: scrollTop
        });
      }

      this._invokeOnScrollMemoizer({
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        totalWidth: totalWidth,
        totalHeight: totalHeight
      });
    }
  }]);

  return CollectionView;
}(_react.PureComponent);

CollectionView.defaultProps = {
  "aria-label": "grid",
  horizontalOverscanSize: 0,
  noContentRenderer: function noContentRenderer() {
    return null;
  },
  onScroll: function onScroll() {
    return null;
  },
  onSectionRendered: function onSectionRendered() {
    return null;
  },
  scrollToAlignment: "auto",
  scrollToCell: -1,
  style: {},
  verticalOverscanSize: 0
};
exports.default = CollectionView;
CollectionView.propTypes = 'development' !== "production" ? {
  "aria-label": _propTypes2.default.string,

  /**
   * Removes fixed height from the scrollingContainer so that the total height
   * of rows can stretch the window. Intended for use with WindowScroller
   */
  autoHeight: _propTypes2.default.bool,

  /**
   * Number of cells in collection.
   */
  cellCount: _propTypes2.default.number.isRequired,

  /**
   * Calculates cell sizes and positions and manages rendering the appropriate cells given a specified window.
   */
  cellLayoutManager: _propTypes2.default.object.isRequired,

  /**
   * Optional custom CSS class name to attach to root Collection element.
   */
  className: _propTypes2.default.string,

  /**
   * Height of Collection; this property determines the number of visible (vs virtualized) rows.
   */
  height: _propTypes2.default.number.isRequired,

  /**
   * Optional custom id to attach to root Collection element.
   */
  id: _propTypes2.default.string,

  /**
   * Enables the `Collection` to horiontally "overscan" its content similar to how `Grid` does.
   * This can reduce flicker around the edges when a user scrolls quickly.
   */
  horizontalOverscanSize: _propTypes2.default.number.isRequired,

  isScrollingChange: _propTypes2.default.func,

  /**
   * Optional renderer to be used in place of rows when either :rowCount or :cellCount is 0.
   */
  noContentRenderer: _propTypes2.default.func.isRequired,

  /**
   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
   * This callback can be used to sync scrolling between lists, tables, or grids.
   * ({ clientHeight, clientWidth, scrollHeight, scrollLeft, scrollTop, scrollWidth }): void
   */
  onScroll: _propTypes2.default.func.isRequired,

  /**
   * Callback invoked with information about the section of the Collection that was just rendered.
   * This callback is passed a named :indices parameter which is an Array of the most recently rendered section indices.
   */
  onSectionRendered: _propTypes2.default.func.isRequired,

  /**
   * Horizontal offset.
   */
  scrollLeft: _propTypes2.default.number,

  /**
   * Controls scroll-to-cell behavior of the Grid.
   * The default ("auto") scrolls the least amount possible to ensure that the specified cell is fully visible.
   * Use "start" to align cells to the top/left of the Grid and "end" to align bottom/right.
   */
  scrollToAlignment: _propTypes2.default.oneOf(["auto", "end", "start", "center"]).isRequired,

  /**
   * Cell index to ensure visible (by forcefully scrolling if necessary).
   */
  scrollToCell: _propTypes2.default.number.isRequired,

  /**
   * Vertical offset.
   */
  scrollTop: _propTypes2.default.number,

  /**
   * Optional custom inline style to attach to root Collection element.
   */
  style: _propTypes2.default.object,

  /**
   * Enables the `Collection` to vertically "overscan" its content similar to how `Grid` does.
   * This can reduce flicker around the edges when a user scrolls quickly.
   */
  verticalOverscanSize: _propTypes2.default.number.isRequired,

  /**
   * Width of Collection; this property determines the number of visible (vs virtualized) columns.
   */
  width: _propTypes2.default.number.isRequired
} : {};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/utils/calculateSizeAndPositionData.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calculateSizeAndPositionData;

var _SectionManager = require('922');

var _SectionManager2 = _interopRequireDefault(_SectionManager);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function calculateSizeAndPositionData(_ref) {
  var cellCount = _ref.cellCount,
      cellSizeAndPositionGetter = _ref.cellSizeAndPositionGetter,
      sectionSize = _ref.sectionSize;

  var cellMetadata = [];
  var sectionManager = new _SectionManager2.default(sectionSize);
  var height = 0;
  var width = 0;

  for (var index = 0; index < cellCount; index++) {
    var cellMetadatum = cellSizeAndPositionGetter({ index: index });

    if (cellMetadatum.height == null || isNaN(cellMetadatum.height) || cellMetadatum.width == null || isNaN(cellMetadatum.width) || cellMetadatum.x == null || isNaN(cellMetadatum.x) || cellMetadatum.y == null || isNaN(cellMetadatum.y)) {
      throw Error("Invalid metadata returned for cell " + index + ":\n        x:" + cellMetadatum.x + ", y:" + cellMetadatum.y + ", width:" + cellMetadatum.width + ", height:" + cellMetadatum.height);
    }

    height = Math.max(height, cellMetadatum.y + cellMetadatum.height);
    width = Math.max(width, cellMetadatum.x + cellMetadatum.width);

    cellMetadata[index] = cellMetadatum;
    sectionManager.registerCell({
      cellMetadatum: cellMetadatum,
      index: index
    });
  }

  return {
    cellMetadata: cellMetadata,
    height: height,
    sectionManager: sectionManager,
    width: width
  };
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/SectionManager.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}(); /**
      * Window Sections are used to group nearby cells.
      * This enables us to more quickly determine which cells to display in a given region of the Window.
      * 
      */

var _Section = require('951');

var _Section2 = _interopRequireDefault(_Section);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo = require('952').babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo || require('953').any;

var babelPluginFlowReactPropTypes_proptype_Index = require('954').babelPluginFlowReactPropTypes_proptype_Index || require('955').any;

var SECTION_SIZE = 100;

/**
 * Contains 0 to many Sections.
 * Grows (and adds Sections) dynamically as cells are registered.
 * Automatically adds cells to the appropriate Section(s).
 */
var SectionManager = function () {
  function SectionManager() {
    var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;

    _classCallCheck(this, SectionManager);

    this._sectionSize = sectionSize;

    this._cellMetadata = [];
    this._sections = {};
  }

  /**
   * Gets all cell indices contained in the specified region.
   * A region may encompass 1 or more Sections.
   */

  _createClass(SectionManager, [{
    key: "getCellIndices",
    value: function getCellIndices(_ref) {
      var height = _ref.height,
          width = _ref.width,
          x = _ref.x,
          y = _ref.y;

      var indices = {};

      this.getSections({ height: height, width: width, x: x, y: y }).forEach(function (section) {
        return section.getCellIndices().forEach(function (index) {
          indices[index] = index;
        });
      });

      // Object keys are strings; this function returns numbers
      return Object.keys(indices).map(function (index) {
        return indices[index];
      });
    }

    /** Get size and position information for the cell specified. */

  }, {
    key: "getCellMetadata",
    value: function getCellMetadata(_ref2) {
      var index = _ref2.index;

      return this._cellMetadata[index];
    }

    /** Get all Sections overlapping the specified region. */

  }, {
    key: "getSections",
    value: function getSections(_ref3) {
      var height = _ref3.height,
          width = _ref3.width,
          x = _ref3.x,
          y = _ref3.y;

      var sectionXStart = Math.floor(x / this._sectionSize);
      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);
      var sectionYStart = Math.floor(y / this._sectionSize);
      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);

      var sections = [];

      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {
        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {
          var key = sectionX + "." + sectionY;

          if (!this._sections[key]) {
            this._sections[key] = new _Section2.default({
              height: this._sectionSize,
              width: this._sectionSize,
              x: sectionX * this._sectionSize,
              y: sectionY * this._sectionSize
            });
          }

          sections.push(this._sections[key]);
        }
      }

      return sections;
    }

    /** Total number of Sections based on the currently registered cells. */

  }, {
    key: "getTotalSectionCount",
    value: function getTotalSectionCount() {
      return Object.keys(this._sections).length;
    }

    /** Intended for debugger/test purposes only */

  }, {
    key: "toString",
    value: function toString() {
      var _this = this;

      return Object.keys(this._sections).map(function (index) {
        return _this._sections[index].toString();
      });
    }

    /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */

  }, {
    key: "registerCell",
    value: function registerCell(_ref4) {
      var cellMetadatum = _ref4.cellMetadatum,
          index = _ref4.index;

      this._cellMetadata[index] = cellMetadatum;

      this.getSections(cellMetadatum).forEach(function (section) {
        return section.addCellIndex({ index: index });
      });
    }
  }]);

  return SectionManager;
}();

exports.default = SectionManager;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/Section.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * A section of the Window.
 * Window Sections are used to group nearby cells.
 * This enables us to more quickly determine which cells to display in a given region of the Window.
 * Sections have a fixed size and contain 0 to many cells (tracked by their indices).
 */
var babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo = require('970').babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo || require('971').any; /** @rlow */

var babelPluginFlowReactPropTypes_proptype_Index = require('972').babelPluginFlowReactPropTypes_proptype_Index || require('973').any;

var Section = function () {
  function Section(_ref) {
    var height = _ref.height,
        width = _ref.width,
        x = _ref.x,
        y = _ref.y;

    _classCallCheck(this, Section);

    this.height = height;
    this.width = width;
    this.x = x;
    this.y = y;

    this._indexMap = {};
    this._indices = [];
  }

  /** Add a cell to this section. */

  _createClass(Section, [{
    key: "addCellIndex",
    value: function addCellIndex(_ref2) {
      var index = _ref2.index;

      if (!this._indexMap[index]) {
        this._indexMap[index] = true;
        this._indices.push(index);
      }
    }

    /** Get all cell indices that have been added to this section. */

  }, {
    key: "getCellIndices",
    value: function getCellIndices() {
      return this._indices;
    }

    /** Intended for debugger/test purposes only */

  }, {
    key: "toString",
    value: function toString() {
      return this.x + "," + this.y + " " + this.width + "x" + this.height;
    }
  }]);

  return Section;
}();

exports.default = Section;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/types.js", function(__filename, __dirname, require, module, exports) {
"use strict";

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_Index", {
  value: {
    index: require('823').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_PositionInfo", {
  value: {
    x: require('824').number.isRequired,
    y: require('825').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_ScrollPosition", {
  value: {
    scrollLeft: require('826').number.isRequired,
    scrollTop: require('827').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo", {
  value: {
    height: require('828').number.isRequired,
    width: require('829').number.isRequired,
    x: require('830').number.isRequired,
    y: require('831').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_SizeInfo", {
  value: {
    height: require('832').number.isRequired,
    width: require('833').number.isRequired
  },
  configurable: true
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/utils/getUpdatedOffsetForIndex.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUpdatedOffsetForIndex;
/**
 * Determines a new offset that ensures a certain cell is visible, given the current offset.
 * If the cell is already visible then the current offset will be returned.
 * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
 *
 * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
 * @param cellOffset Offset (x or y) position for cell
 * @param cellSize Size (width or height) of cell
 * @param containerSize Total size (width or height) of the container
 * @param currentOffset Container's current (x or y) offset
 * @return Offset to use to ensure the specified cell is visible
 */
function getUpdatedOffsetForIndex(_ref) {
  var _ref$align = _ref.align,
      align = _ref$align === undefined ? "auto" : _ref$align,
      cellOffset = _ref.cellOffset,
      cellSize = _ref.cellSize,
      containerSize = _ref.containerSize,
      currentOffset = _ref.currentOffset;

  var maxOffset = cellOffset;
  var minOffset = maxOffset - containerSize + cellSize;

  switch (align) {
    case "start":
      return maxOffset;
    case "end":
      return minOffset;
    case "center":
      return maxOffset - (containerSize - cellSize) / 2;
    default:
      return Math.max(minOffset, Math.min(maxOffset, currentOffset));
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ColumnSizer/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColumnSizer = exports.default = undefined;

var _ColumnSizer2 = require('463');

var _ColumnSizer3 = _interopRequireDefault(_ColumnSizer2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _ColumnSizer3.default;
exports.ColumnSizer = _ColumnSizer3.default;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ColumnSizer/ColumnSizer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _propTypes = require('565');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('566');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * High-order component that auto-calculates column-widths for `Grid` cells.
 */
var ColumnSizer = function (_PureComponent) {
  _inherits(ColumnSizer, _PureComponent);

  function ColumnSizer(props, context) {
    _classCallCheck(this, ColumnSizer);

    var _this = _possibleConstructorReturn(this, (ColumnSizer.__proto__ || Object.getPrototypeOf(ColumnSizer)).call(this, props, context));

    _this._registerChild = _this._registerChild.bind(_this);
    return _this;
  }

  _createClass(ColumnSizer, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _props = this.props,
          columnMaxWidth = _props.columnMaxWidth,
          columnMinWidth = _props.columnMinWidth,
          columnCount = _props.columnCount,
          width = _props.width;

      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {
        if (this._registeredChild) {
          this._registeredChild.recomputeGridSize();
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          columnMaxWidth = _props2.columnMaxWidth,
          columnMinWidth = _props2.columnMinWidth,
          columnCount = _props2.columnCount,
          width = _props2.width;

      var safeColumnMinWidth = columnMinWidth || 1;

      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;

      var columnWidth = width / columnCount;
      columnWidth = Math.max(safeColumnMinWidth, columnWidth);
      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);
      columnWidth = Math.floor(columnWidth);

      var adjustedWidth = Math.min(width, columnWidth * columnCount);

      return children({
        adjustedWidth: adjustedWidth,
        columnWidth: columnWidth,
        getColumnWidth: function getColumnWidth() {
          return columnWidth;
        },
        registerChild: this._registerChild
      });
    }
  }, {
    key: "_registerChild",
    value: function _registerChild(child) {
      if (child && typeof child.recomputeGridSize !== "function") {
        throw Error("Unexpected child type registered; only Grid/MultiGrid children are supported.");
      }

      this._registeredChild = child;

      if (this._registeredChild) {
        this._registeredChild.recomputeGridSize();
      }
    }
  }]);

  return ColumnSizer;
}(_react.PureComponent);

exports.default = ColumnSizer;
ColumnSizer.propTypes = 'development' !== "production" ? {
  /**
   * Function responsible for rendering a virtualized Grid.
   * This function should implement the following signature:
   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element
   *
   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.
   * The :registerChild should be passed to the Grid's :ref property.
   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.
   */
  children: _propTypes2.default.func.isRequired,

  /** Optional maximum allowed column width */
  columnMaxWidth: _propTypes2.default.number,

  /** Optional minimum allowed column width */
  columnMinWidth: _propTypes2.default.number,

  /** Number of columns in Grid or Table child */
  columnCount: _propTypes2.default.number.isRequired,

  /** Width of Grid or Table child */
  width: _propTypes2.default.number.isRequired
} : {};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/InfiniteLoader/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InfiniteLoader = exports.default = undefined;

var _InfiniteLoader2 = require('464');

var _InfiniteLoader3 = _interopRequireDefault(_InfiniteLoader2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _InfiniteLoader3.default;
exports.InfiniteLoader = _InfiniteLoader3.default;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/InfiniteLoader/InfiniteLoader.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

exports.isRangeVisible = isRangeVisible;
exports.scanForUnloadedRanges = scanForUnloadedRanges;
exports.forceUpdateReactVirtualizedComponent = forceUpdateReactVirtualizedComponent;

var _react = require('567');

var _propTypes = require('568');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createCallbackMemoizer = require('569');

var _createCallbackMemoizer2 = _interopRequireDefault(_createCallbackMemoizer);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * Higher-order component that manages lazy-loading for "infinite" data.
 * This component decorates a virtual component and just-in-time prefetches rows as a user scrolls.
 * It is intended as a convenience component; fork it if you'd like finer-grained control over data-loading.
 */
var InfiniteLoader = function (_PureComponent) {
  _inherits(InfiniteLoader, _PureComponent);

  function InfiniteLoader(props, context) {
    _classCallCheck(this, InfiniteLoader);

    var _this = _possibleConstructorReturn(this, (InfiniteLoader.__proto__ || Object.getPrototypeOf(InfiniteLoader)).call(this, props, context));

    _this._loadMoreRowsMemoizer = (0, _createCallbackMemoizer2.default)();

    _this._onRowsRendered = _this._onRowsRendered.bind(_this);
    _this._registerChild = _this._registerChild.bind(_this);
    return _this;
  }

  _createClass(InfiniteLoader, [{
    key: "resetLoadMoreRowsCache",
    value: function resetLoadMoreRowsCache(autoReload) {
      this._loadMoreRowsMemoizer = (0, _createCallbackMemoizer2.default)();

      if (autoReload) {
        this._doStuff(this._lastRenderedStartIndex, this._lastRenderedStopIndex);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;

      return children({
        onRowsRendered: this._onRowsRendered,
        registerChild: this._registerChild
      });
    }
  }, {
    key: "_loadUnloadedRanges",
    value: function _loadUnloadedRanges(unloadedRanges) {
      var _this2 = this;

      var loadMoreRows = this.props.loadMoreRows;

      unloadedRanges.forEach(function (unloadedRange) {
        var promise = loadMoreRows(unloadedRange);
        if (promise) {
          promise.then(function () {
            // Refresh the visible rows if any of them have just been loaded.
            // Otherwise they will remain in their unloaded visual state.
            if (isRangeVisible({
              lastRenderedStartIndex: _this2._lastRenderedStartIndex,
              lastRenderedStopIndex: _this2._lastRenderedStopIndex,
              startIndex: unloadedRange.startIndex,
              stopIndex: unloadedRange.stopIndex
            })) {
              if (_this2._registeredChild) {
                forceUpdateReactVirtualizedComponent(_this2._registeredChild, _this2._lastRenderedStartIndex);
              }
            }
          });
        }
      });
    }
  }, {
    key: "_onRowsRendered",
    value: function _onRowsRendered(_ref) {
      var startIndex = _ref.startIndex,
          stopIndex = _ref.stopIndex;

      this._lastRenderedStartIndex = startIndex;
      this._lastRenderedStopIndex = stopIndex;

      this._doStuff(startIndex, stopIndex);
    }
  }, {
    key: "_doStuff",
    value: function _doStuff(startIndex, stopIndex) {
      var _this3 = this;

      var _props = this.props,
          isRowLoaded = _props.isRowLoaded,
          minimumBatchSize = _props.minimumBatchSize,
          rowCount = _props.rowCount,
          threshold = _props.threshold;

      var unloadedRanges = scanForUnloadedRanges({
        isRowLoaded: isRowLoaded,
        minimumBatchSize: minimumBatchSize,
        rowCount: rowCount,
        startIndex: Math.max(0, startIndex - threshold),
        stopIndex: Math.min(rowCount - 1, stopIndex + threshold)
      });

      // For memoize comparison
      var squashedUnloadedRanges = unloadedRanges.reduce(function (reduced, unloadedRange) {
        return reduced.concat([unloadedRange.startIndex, unloadedRange.stopIndex]);
      }, []);

      this._loadMoreRowsMemoizer({
        callback: function callback() {
          _this3._loadUnloadedRanges(unloadedRanges);
        },
        indices: { squashedUnloadedRanges: squashedUnloadedRanges }
      });
    }
  }, {
    key: "_registerChild",
    value: function _registerChild(registeredChild) {
      this._registeredChild = registeredChild;
    }
  }]);

  return InfiniteLoader;
}(_react.PureComponent);

/**
 * Determines if the specified start/stop range is visible based on the most recently rendered range.
 */

InfiniteLoader.defaultProps = {
  minimumBatchSize: 10,
  rowCount: 0,
  threshold: 15
};
exports.default = InfiniteLoader;
InfiniteLoader.propTypes = 'development' !== "production" ? {
  /**
   * Function responsible for rendering a virtualized component.
   * This function should implement the following signature:
   * ({ onRowsRendered, registerChild }) => PropTypes.element
   *
   * The specified :onRowsRendered function should be passed through to the child's :onRowsRendered property.
   * The :registerChild callback should be set as the virtualized component's :ref.
   */
  children: _propTypes2.default.func.isRequired,

  /**
   * Function responsible for tracking the loaded state of each row.
   * It should implement the following signature: ({ index: number }): boolean
   */
  isRowLoaded: _propTypes2.default.func.isRequired,

  /**
   * Callback to be invoked when more rows must be loaded.
   * It should implement the following signature: ({ startIndex, stopIndex }): Promise
   * The returned Promise should be resolved once row data has finished loading.
   * It will be used to determine when to refresh the list with the newly-loaded data.
   * This callback may be called multiple times in reaction to a single scroll event.
   */
  loadMoreRows: _propTypes2.default.func.isRequired,

  /**
   * Minimum number of rows to be loaded at a time.
   * This property can be used to batch requests to reduce HTTP requests.
   */
  minimumBatchSize: _propTypes2.default.number.isRequired,

  /**
   * Number of rows in list; can be arbitrary high number if actual number is unknown.
   */
  rowCount: _propTypes2.default.number.isRequired,

  /**
   * Threshold at which to pre-fetch data.
   * A threshold X means that data will start loading when a user scrolls within X rows.
   * This value defaults to 15.
   */
  threshold: _propTypes2.default.number.isRequired
} : {};
function isRangeVisible(_ref2) {
  var lastRenderedStartIndex = _ref2.lastRenderedStartIndex,
      lastRenderedStopIndex = _ref2.lastRenderedStopIndex,
      startIndex = _ref2.startIndex,
      stopIndex = _ref2.stopIndex;

  return !(startIndex > lastRenderedStopIndex || stopIndex < lastRenderedStartIndex);
}

/**
 * Returns all of the ranges within a larger range that contain unloaded rows.
 */
function scanForUnloadedRanges(_ref3) {
  var isRowLoaded = _ref3.isRowLoaded,
      minimumBatchSize = _ref3.minimumBatchSize,
      rowCount = _ref3.rowCount,
      startIndex = _ref3.startIndex,
      stopIndex = _ref3.stopIndex;

  var unloadedRanges = [];

  var rangeStartIndex = null;
  var rangeStopIndex = null;

  for (var index = startIndex; index <= stopIndex; index++) {
    var loaded = isRowLoaded({ index: index });

    if (!loaded) {
      rangeStopIndex = index;
      if (rangeStartIndex === null) {
        rangeStartIndex = index;
      }
    } else if (rangeStopIndex !== null) {
      unloadedRanges.push({
        startIndex: rangeStartIndex,
        stopIndex: rangeStopIndex
      });

      rangeStartIndex = rangeStopIndex = null;
    }
  }

  // If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.
  // Scan forward to try filling our :minimumBatchSize.
  if (rangeStopIndex !== null) {
    var potentialStopIndex = Math.min(Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1), rowCount - 1);

    for (var _index = rangeStopIndex + 1; _index <= potentialStopIndex; _index++) {
      if (!isRowLoaded({ index: _index })) {
        rangeStopIndex = _index;
      } else {
        break;
      }
    }

    unloadedRanges.push({
      startIndex: rangeStartIndex,
      stopIndex: rangeStopIndex
    });
  }

  // Check to see if our first range ended prematurely.
  // In this case we should scan backwards to try filling our :minimumBatchSize.
  if (unloadedRanges.length) {
    var firstUnloadedRange = unloadedRanges[0];

    while (firstUnloadedRange.stopIndex - firstUnloadedRange.startIndex + 1 < minimumBatchSize && firstUnloadedRange.startIndex > 0) {
      var _index2 = firstUnloadedRange.startIndex - 1;

      if (!isRowLoaded({ index: _index2 })) {
        firstUnloadedRange.startIndex = _index2;
      } else {
        break;
      }
    }
  }

  return unloadedRanges;
}

/**
 * Since RV components use shallowCompare we need to force a render (even though props haven't changed).
 * However InfiniteLoader may wrap a Grid or it may wrap a Table or List.
 * In the first case the built-in React forceUpdate() method is sufficient to force a re-render,
 * But in the latter cases we need to use the RV-specific forceUpdateGrid() method.
 * Else the inner Grid will not be re-rendered and visuals may be stale.
 *
 * Additionally, while a Grid is scrolling the cells can be cached,
 * So it's important to invalidate that cache by recalculating sizes
 * before forcing a rerender.
 */
function forceUpdateReactVirtualizedComponent(component) {
  var currentIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var recomputeSize = typeof component.recomputeGridSize === "function" ? component.recomputeGridSize : component.recomputeRowHeights;

  if (recomputeSize) {
    recomputeSize.call(component, currentIndex);
  } else {
    component.forceUpdate();
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/List/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _List = require('469');

Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_List).default;
  }
});
Object.defineProperty(exports, "List", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_List).default;
  }
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/List/List.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _Grid = require('584');

var _Grid2 = _interopRequireDefault(_Grid);

var _react = require('585');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('586');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var babelPluginFlowReactPropTypes_proptype_Scroll = require('587').babelPluginFlowReactPropTypes_proptype_Scroll || require('588').any;

var babelPluginFlowReactPropTypes_proptype_CellRendererParams = require('589').babelPluginFlowReactPropTypes_proptype_CellRendererParams || require('590').any;

var babelPluginFlowReactPropTypes_proptype_RenderedSection = require('591').babelPluginFlowReactPropTypes_proptype_RenderedSection || require('592').any;

var babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter = require('593').babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter || require('594').any;

var babelPluginFlowReactPropTypes_proptype_CellPosition = require('595').babelPluginFlowReactPropTypes_proptype_CellPosition || require('596').any;

var babelPluginFlowReactPropTypes_proptype_CellSize = require('597').babelPluginFlowReactPropTypes_proptype_CellSize || require('598').any;

var babelPluginFlowReactPropTypes_proptype_Alignment = require('599').babelPluginFlowReactPropTypes_proptype_Alignment || require('600').any;

var babelPluginFlowReactPropTypes_proptype_NoContentRenderer = require('601').babelPluginFlowReactPropTypes_proptype_NoContentRenderer || require('602').any;

var babelPluginFlowReactPropTypes_proptype_Scroll = require('603').babelPluginFlowReactPropTypes_proptype_Scroll || require('604').any;

var babelPluginFlowReactPropTypes_proptype_RenderedRows = require('605').babelPluginFlowReactPropTypes_proptype_RenderedRows || require('606').any;

var babelPluginFlowReactPropTypes_proptype_RowRenderer = require('607').babelPluginFlowReactPropTypes_proptype_RowRenderer || require('608').any;

/**
 * It is inefficient to create and manage a large list of DOM elements within a scrolling container
 * if only a few of those elements are visible. The primary purpose of this component is to improve
 * performance by only rendering the DOM nodes that a user is able to see based on their current
 * scroll position.
 *
 * This component renders a virtualized list of elements with either fixed or dynamic heights.
 */

var List = function (_React$PureComponent) {
  _inherits(List, _React$PureComponent);

  function List() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, List);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = List.__proto__ || Object.getPrototypeOf(List)).call.apply(_ref, [this].concat(args))), _this), _this._cellRenderer = function (_ref2) {
      var rowIndex = _ref2.rowIndex,
          style = _ref2.style,
          isScrolling = _ref2.isScrolling,
          isVisible = _ref2.isVisible,
          key = _ref2.key;
      var rowRenderer = _this.props.rowRenderer;

      // TRICKY The style object is sometimes cached by Grid.
      // This prevents new style objects from bypassing shallowCompare().
      // However as of React 16, style props are auto-frozen (at least in dev mode)
      // Check to make sure we can still modify the style before proceeding.
      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713

      var _Object$getOwnPropert = Object.getOwnPropertyDescriptor(style, "width"),
          writable = _Object$getOwnPropert.writable;

      if (writable) {
        // By default, List cells should be 100% width.
        // This prevents them from flowing under a scrollbar (if present).
        style.width = "100%";
      }

      return rowRenderer({
        index: rowIndex,
        style: style,
        isScrolling: isScrolling,
        isVisible: isVisible,
        key: key,
        parent: _this
      });
    }, _this._setRef = function (ref) {
      _this.Grid = ref;
    }, _this._onScroll = function (_ref3) {
      var clientHeight = _ref3.clientHeight,
          scrollHeight = _ref3.scrollHeight,
          scrollTop = _ref3.scrollTop;
      var onScroll = _this.props.onScroll;

      onScroll({ clientHeight: clientHeight, scrollHeight: scrollHeight, scrollTop: scrollTop });
    }, _this._onSectionRendered = function (_ref4) {
      var rowOverscanStartIndex = _ref4.rowOverscanStartIndex,
          rowOverscanStopIndex = _ref4.rowOverscanStopIndex,
          rowStartIndex = _ref4.rowStartIndex,
          rowStopIndex = _ref4.rowStopIndex;
      var onRowsRendered = _this.props.onRowsRendered;

      onRowsRendered({
        overscanStartIndex: rowOverscanStartIndex,
        overscanStopIndex: rowOverscanStopIndex,
        startIndex: rowStartIndex,
        stopIndex: rowStopIndex
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(List, [{
    key: "forceUpdateGrid",
    value: function forceUpdateGrid() {
      if (this.Grid) {
        this.Grid.forceUpdate();
      }
    }

    /** See Grid#getOffsetForCell */

  }, {
    key: "getOffsetForRow",
    value: function getOffsetForRow(_ref5) {
      var alignment = _ref5.alignment,
          index = _ref5.index;

      if (this.Grid) {
        var _Grid$getOffsetForCel = this.Grid.getOffsetForCell({
          alignment: alignment,
          rowIndex: index,
          columnIndex: 0
        }),
            _scrollTop = _Grid$getOffsetForCel.scrollTop;

        return _scrollTop;
      }
      return 0;
    }

    /** CellMeasurer compatibility */

  }, {
    key: "invalidateCellSizeAfterRender",
    value: function invalidateCellSizeAfterRender(_ref6) {
      var columnIndex = _ref6.columnIndex,
          rowIndex = _ref6.rowIndex;

      if (this.Grid) {
        this.Grid.invalidateCellSizeAfterRender({
          rowIndex: rowIndex,
          columnIndex: columnIndex
        });
      }
    }

    /** See Grid#measureAllCells */

  }, {
    key: "measureAllRows",
    value: function measureAllRows() {
      if (this.Grid) {
        this.Grid.measureAllCells();
      }
    }

    /** CellMeasurer compatibility */

  }, {
    key: "recomputeGridSize",
    value: function recomputeGridSize() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref7$columnIndex = _ref7.columnIndex,
          columnIndex = _ref7$columnIndex === undefined ? 0 : _ref7$columnIndex,
          _ref7$rowIndex = _ref7.rowIndex,
          rowIndex = _ref7$rowIndex === undefined ? 0 : _ref7$rowIndex;

      if (this.Grid) {
        this.Grid.recomputeGridSize({
          rowIndex: rowIndex,
          columnIndex: columnIndex
        });
      }
    }

    /** See Grid#recomputeGridSize */

  }, {
    key: "recomputeRowHeights",
    value: function recomputeRowHeights() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.recomputeGridSize({
          rowIndex: index,
          columnIndex: 0
        });
      }
    }

    /** See Grid#scrollToPosition */

  }, {
    key: "scrollToPosition",
    value: function scrollToPosition() {
      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.scrollToPosition({ scrollTop: scrollTop });
      }
    }

    /** See Grid#scrollToCell */

  }, {
    key: "scrollToRow",
    value: function scrollToRow() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.scrollToCell({
          columnIndex: 0,
          rowIndex: index
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          className = _props.className,
          noRowsRenderer = _props.noRowsRenderer,
          scrollToIndex = _props.scrollToIndex,
          width = _props.width;

      var classNames = (0, _classnames2.default)("ReactVirtualized__List", className);

      return _react2.default.createElement(_Grid2.default, _extends({}, this.props, {
        autoContainerWidth: true,
        cellRenderer: this._cellRenderer,
        className: classNames,
        columnWidth: width,
        columnCount: 1,
        noContentRenderer: noRowsRenderer,
        onScroll: this._onScroll,
        onSectionRendered: this._onSectionRendered,
        ref: this._setRef,
        scrollToRow: scrollToIndex
      }));
    }
  }]);

  return List;
}(_react2.default.PureComponent);

List.defaultProps = {
  autoHeight: false,
  estimatedRowSize: 30,
  onScroll: function onScroll() {},
  noRowsRenderer: function noRowsRenderer() {
    return null;
  },
  onRowsRendered: function onRowsRendered() {},
  overscanIndicesGetter: _Grid.accessibilityOverscanIndicesGetter,
  overscanRowCount: 10,
  scrollToAlignment: "auto",
  scrollToIndex: -1,
  style: {}
};
List.propTypes = {
  "aria-label": require('609').string,
  autoHeight: require('610').bool.isRequired,
  className: require('611').string,
  estimatedRowSize: require('612').number.isRequired,
  height: require('613').number.isRequired,
  noRowsRenderer: typeof babelPluginFlowReactPropTypes_proptype_NoContentRenderer === "function" ? babelPluginFlowReactPropTypes_proptype_NoContentRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_NoContentRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_NoContentRenderer : require('614').shape(babelPluginFlowReactPropTypes_proptype_NoContentRenderer).isRequired,
  onRowsRendered: require('615').func.isRequired,
  onScroll: require('616').func.isRequired,
  overscanIndicesGetter: typeof babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter === "function" ? babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter.isRequired ? babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter.isRequired : babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter : require('617').shape(babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter).isRequired,
  overscanRowCount: require('618').number.isRequired,
  rowHeight: typeof babelPluginFlowReactPropTypes_proptype_CellSize === "function" ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired : babelPluginFlowReactPropTypes_proptype_CellSize : require('619').shape(babelPluginFlowReactPropTypes_proptype_CellSize).isRequired,
  rowRenderer: typeof babelPluginFlowReactPropTypes_proptype_RowRenderer === "function" ? babelPluginFlowReactPropTypes_proptype_RowRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_RowRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_RowRenderer : require('620').shape(babelPluginFlowReactPropTypes_proptype_RowRenderer).isRequired,
  rowCount: require('621').number.isRequired,
  scrollToAlignment: typeof babelPluginFlowReactPropTypes_proptype_Alignment === "function" ? babelPluginFlowReactPropTypes_proptype_Alignment.isRequired ? babelPluginFlowReactPropTypes_proptype_Alignment.isRequired : babelPluginFlowReactPropTypes_proptype_Alignment : require('622').shape(babelPluginFlowReactPropTypes_proptype_Alignment).isRequired,
  scrollToIndex: require('623').number.isRequired,
  scrollTop: require('624').number,
  style: require('625').object.isRequired,
  tabIndex: require('626').number,
  width: require('627').number.isRequired
};
exports.default = List;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/List/types.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var _react = require('901');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_RowRendererParams", {
  value: {
    index: require('902').number.isRequired,
    isScrolling: require('903').bool.isRequired,
    isVisible: require('904').bool.isRequired,
    key: require('905').string.isRequired,
    parent: require('906').object.isRequired,
    style: require('907').object.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_RowRenderer", {
  value: require('908').func,
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_RenderedRows", {
  value: {
    overscanStartIndex: require('909').number.isRequired,
    overscanStopIndex: require('910').number.isRequired,
    startIndex: require('911').number.isRequired,
    stopIndex: require('912').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_Scroll", {
  value: {
    clientHeight: require('913').number.isRequired,
    scrollHeight: require('914').number.isRequired,
    scrollTop: require('915').number.isRequired
  },
  configurable: true
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Masonry/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCellPositioner = exports.Masonry = exports.default = undefined;

var _Masonry2 = require('470');

var _Masonry3 = _interopRequireDefault(_Masonry2);

var _createCellPositioner2 = require('471');

var _createCellPositioner3 = _interopRequireDefault(_createCellPositioner2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _Masonry3.default;
exports.Masonry = _Masonry3.default;
exports.createCellPositioner = _createCellPositioner3.default;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Masonry/Masonry.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = require('703');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('704');

var _classnames2 = _interopRequireDefault(_classnames);

var _PositionCache = require('705');

var _PositionCache2 = _interopRequireDefault(_PositionCache);

var _requestAnimationTimeout = require('706');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId = require('707').babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId || require('708').any;

var emptyObject = {};

/**
 * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
 * This improves performance and makes scrolling smoother.
 */
var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;

/**
 * This component efficiently displays arbitrarily positioned cells using windowing techniques.
 * Cell position is determined by an injected `cellPositioner` property.
 * Windowing is vertical; this component does not support horizontal scrolling.
 *
 * Rendering occurs in two phases:
 * 1) First pass uses estimated cell sizes (provided by the cache) to determine how many cells to measure in a batch.
 *    Batch size is chosen using a fast, naive layout algorithm that stacks images in order until the viewport has been filled.
 *    After measurement is complete (componentDidMount or componentDidUpdate) this component evaluates positioned cells
 *    in order to determine if another measurement pass is required (eg if actual cell sizes were less than estimated sizes).
 *    All measurements are permanently cached (keyed by `keyMapper`) for performance purposes.
 * 2) Second pass uses the external `cellPositioner` to layout cells.
 *    At this time the positioner has access to cached size measurements for all cells.
 *    The positions it returns are cached by Masonry for fast access later.
 *    Phase one is repeated if the user scrolls beyond the current layout's bounds.
 *    If the layout is invalidated due to eg a resize, cached positions can be cleared using `recomputeCellPositions()`.
 *
 * Animation constraints:
 *   Simple animations are supported (eg translate/slide into place on initial reveal).
 *   More complex animations are not (eg flying from one position to another on resize).
 *
 * Layout constraints:
 *   This component supports multi-column layout.
 *   The height of each item may vary.
 *   The width of each item must not exceed the width of the column it is "in".
 *   The left position of all items within a column must align.
 *   (Items may not span multiple columns.)
 */

var Masonry = function (_PureComponent) {
  _inherits(Masonry, _PureComponent);

  function Masonry(props, context) {
    _classCallCheck(this, Masonry);

    var _this = _possibleConstructorReturn(this, (Masonry.__proto__ || Object.getPrototypeOf(Masonry)).call(this, props, context));

    _this._invalidateOnUpdateStartIndex = null;
    _this._invalidateOnUpdateStopIndex = null;
    _this._positionCache = new _PositionCache2.default();
    _this._startIndex = null;
    _this._startIndexMemoized = null;
    _this._stopIndex = null;
    _this._stopIndexMemoized = null;

    _this.state = {
      isScrolling: false,
      scrollTop: 0
    };

    _this._debounceResetIsScrollingCallback = _this._debounceResetIsScrollingCallback.bind(_this);
    _this._setScrollingContainerRef = _this._setScrollingContainerRef.bind(_this);
    _this._onScroll = _this._onScroll.bind(_this);
    return _this;
  }

  _createClass(Masonry, [{
    key: "clearCellPositions",
    value: function clearCellPositions() {
      this._positionCache = new _PositionCache2.default();
      this.forceUpdate();
    }

    // HACK This method signature was intended for Grid

  }, {
    key: "invalidateCellSizeAfterRender",
    value: function invalidateCellSizeAfterRender(_ref) {
      var index = _ref.rowIndex;

      if (this._invalidateOnUpdateStartIndex === null) {
        this._invalidateOnUpdateStartIndex = index;
        this._invalidateOnUpdateStopIndex = index;
      } else {
        this._invalidateOnUpdateStartIndex = Math.min(this._invalidateOnUpdateStartIndex, index);
        this._invalidateOnUpdateStopIndex = Math.max(this._invalidateOnUpdateStopIndex, index);
      }
    }
  }, {
    key: "recomputeCellPositions",
    value: function recomputeCellPositions() {
      var stopIndex = this._positionCache.count - 1;

      this._positionCache = new _PositionCache2.default();
      this._populatePositionCache(0, stopIndex);

      this.forceUpdate();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._checkInvalidateOnUpdate();
      this._invokeOnScrollCallback();
      this._invokeOnCellsRenderedCallback();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._checkInvalidateOnUpdate();
      this._invokeOnScrollCallback();
      this._invokeOnCellsRenderedCallback();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._debounceResetIsScrollingId) {
        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._debounceResetIsScrollingId);
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var scrollTop = this.props.scrollTop;

      if (scrollTop !== nextProps.scrollTop) {
        this._debounceResetIsScrolling();

        this.setState({
          isScrolling: true,
          scrollTop: nextProps.scrollTop
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          autoHeight = _props.autoHeight,
          cellCount = _props.cellCount,
          cellMeasurerCache = _props.cellMeasurerCache,
          cellRenderer = _props.cellRenderer,
          className = _props.className,
          height = _props.height,
          id = _props.id,
          keyMapper = _props.keyMapper,
          overscanByPixels = _props.overscanByPixels,
          role = _props.role,
          style = _props.style,
          tabIndex = _props.tabIndex,
          width = _props.width;
      var _state = this.state,
          isScrolling = _state.isScrolling,
          scrollTop = _state.scrollTop;

      var children = [];

      var estimateTotalHeight = this._getEstimatedTotalHeight();

      var shortestColumnSize = this._positionCache.shortestColumnSize;
      var measuredCellCount = this._positionCache.count;

      // We need to measure more cells before layout
      if (shortestColumnSize < scrollTop + height + overscanByPixels && measuredCellCount < cellCount) {
        var batchSize = Math.min(cellCount - measuredCellCount, Math.ceil((scrollTop + height + overscanByPixels - shortestColumnSize) / cellMeasurerCache.defaultHeight * width / cellMeasurerCache.defaultWidth));

        for (var _index = measuredCellCount; _index < measuredCellCount + batchSize; _index++) {
          children.push(cellRenderer({
            index: _index,
            isScrolling: isScrolling,
            key: keyMapper(_index),
            parent: this,
            style: {
              width: cellMeasurerCache.getWidth(_index)
            }
          }));
        }
      } else {
        var _stopIndex = void 0;
        var _startIndex = void 0;

        this._positionCache.range(scrollTop - overscanByPixels, height + overscanByPixels, function (index, left, top) {
          if (typeof _startIndex === "undefined") {
            _startIndex = index;
            _stopIndex = index;
          } else {
            _startIndex = Math.min(_startIndex, index);
            _stopIndex = Math.max(_stopIndex, index);
          }

          children.push(cellRenderer({
            index: index,
            isScrolling: isScrolling,
            key: keyMapper(index),
            parent: _this2,
            style: {
              height: cellMeasurerCache.getHeight(index),
              left: left,
              position: "absolute",
              top: top,
              width: cellMeasurerCache.getWidth(index)
            }
          }));

          _this2._startIndex = _startIndex;
          _this2._stopIndex = _stopIndex;
        });
      }

      return _react2.default.createElement("div", {
        ref: this._setScrollingContainerRef,
        "aria-label": this.props["aria-label"],
        className: (0, _classnames2.default)("ReactVirtualized__Masonry", className),
        id: id,
        onScroll: this._onScroll,
        role: role,
        style: _extends({
          boxSizing: "border-box",
          direction: "ltr",
          height: autoHeight ? "auto" : height,
          overflowX: "hidden",
          overflowY: estimateTotalHeight < height ? "hidden" : "auto",
          position: "relative",
          width: width,
          WebkitOverflowScrolling: "touch",
          willChange: "transform"
        }, style),
        tabIndex: tabIndex
      }, _react2.default.createElement("div", {
        className: "ReactVirtualized__Masonry__innerScrollContainer",
        style: {
          width: "100%",
          height: estimateTotalHeight,
          maxWidth: "100%",
          maxHeight: estimateTotalHeight,
          overflow: "hidden",
          pointerEvents: isScrolling ? "none" : "",
          position: "relative"
        }
      }, children));
    }
  }, {
    key: "_checkInvalidateOnUpdate",
    value: function _checkInvalidateOnUpdate() {
      if (typeof this._invalidateOnUpdateStartIndex === "number") {
        var _startIndex2 = this._invalidateOnUpdateStartIndex;
        var _stopIndex2 = this._invalidateOnUpdateStopIndex;

        this._invalidateOnUpdateStartIndex = null;
        this._invalidateOnUpdateStopIndex = null;

        // Query external layout logic for position of newly-measured cells
        this._populatePositionCache(_startIndex2, _stopIndex2);

        this.forceUpdate();
      }
    }
  }, {
    key: "_debounceResetIsScrolling",
    value: function _debounceResetIsScrolling() {
      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;

      if (this._debounceResetIsScrollingId) {
        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._debounceResetIsScrollingId);
      }

      this._debounceResetIsScrollingId = (0, _requestAnimationTimeout.requestAnimationTimeout)(this._debounceResetIsScrollingCallback, scrollingResetTimeInterval);
    }
  }, {
    key: "_debounceResetIsScrollingCallback",
    value: function _debounceResetIsScrollingCallback() {
      this.setState({
        isScrolling: false
      });
    }
  }, {
    key: "_getEstimatedTotalHeight",
    value: function _getEstimatedTotalHeight() {
      var _props2 = this.props,
          cellCount = _props2.cellCount,
          cellMeasurerCache = _props2.cellMeasurerCache,
          width = _props2.width;

      var estimatedColumnCount = Math.floor(width / cellMeasurerCache.defaultWidth);

      return this._positionCache.estimateTotalHeight(cellCount, estimatedColumnCount, cellMeasurerCache.defaultHeight);
    }
  }, {
    key: "_invokeOnScrollCallback",
    value: function _invokeOnScrollCallback() {
      var _props3 = this.props,
          height = _props3.height,
          onScroll = _props3.onScroll;
      var scrollTop = this.state.scrollTop;

      if (this._onScrollMemoized !== scrollTop) {
        onScroll({
          clientHeight: height,
          scrollHeight: this._getEstimatedTotalHeight(),
          scrollTop: scrollTop
        });

        this._onScrollMemoized = scrollTop;
      }
    }
  }, {
    key: "_invokeOnCellsRenderedCallback",
    value: function _invokeOnCellsRenderedCallback() {
      if (this._startIndexMemoized !== this._startIndex || this._stopIndexMemoized !== this._stopIndex) {
        var _onCellsRendered = this.props.onCellsRendered;

        _onCellsRendered({
          startIndex: this._startIndex,
          stopIndex: this._stopIndex
        });

        this._startIndexMemoized = this._startIndex;
        this._stopIndexMemoized = this._stopIndex;
      }
    }
  }, {
    key: "_populatePositionCache",
    value: function _populatePositionCache(startIndex, stopIndex) {
      var _props4 = this.props,
          cellMeasurerCache = _props4.cellMeasurerCache,
          cellPositioner = _props4.cellPositioner;

      for (var _index2 = startIndex; _index2 <= stopIndex; _index2++) {
        var _cellPositioner = cellPositioner(_index2),
            _left = _cellPositioner.left,
            _top = _cellPositioner.top;

        this._positionCache.setPosition(_index2, _left, _top, cellMeasurerCache.getHeight(_index2));
      }
    }
  }, {
    key: "_setScrollingContainerRef",
    value: function _setScrollingContainerRef(ref) {
      this._scrollingContainer = ref;
    }
  }, {
    key: "_onScroll",
    value: function _onScroll(event) {
      var height = this.props.height;

      var eventScrollTop = event.target.scrollTop;

      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
      // This causes a series of rapid renders that is slow for long lists.
      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.
      var scrollTop = Math.min(Math.max(0, this._getEstimatedTotalHeight() - height), eventScrollTop);

      // On iOS, we can arrive at negative offsets by swiping past the start or end.
      // Avoid re-rendering in this case as it can cause problems; see #532 for more.
      if (eventScrollTop !== scrollTop) {
        return;
      }

      // Prevent pointer events from interrupting a smooth scroll
      this._debounceResetIsScrolling();

      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
      // Don't force a re-render if this is the case.
      // The mouse may move faster then the animation frame does.
      // Use requestAnimationFrame to avoid over-updating.
      if (this.state.scrollTop !== scrollTop) {
        this.setState({
          isScrolling: true,
          scrollTop: scrollTop
        });
      }
    }
  }]);

  return Masonry;
}(_react.PureComponent);

Masonry.defaultProps = {
  autoHeight: false,
  keyMapper: identity,
  onCellsRendered: noop,
  onScroll: noop,
  overscanByPixels: 20,
  role: "grid",
  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,
  style: emptyObject,
  tabIndex: 0
};
exports.default = Masonry;

function identity(value) {
  return value;
}

function noop() {}

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellMeasurerCache", {
  value: {
    defaultHeight: require('709').number.isRequired,
    defaultWidth: require('710').number.isRequired,
    getHeight: require('711').func.isRequired,
    getWidth: require('712').func.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_Positioner", {
  value: require('713').func,
  configurable: true
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Masonry/PositionCache.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _intervalTree = require('918');

var _intervalTree2 = _interopRequireDefault(_intervalTree);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// Position cache requirements:
//   O(log(n)) lookup of cells to render for a given viewport size
//   O(1) lookup of shortest measured column (so we know when to enter phase 1)
var PositionCache = function () {
  function PositionCache() {
    _classCallCheck(this, PositionCache);

    this._columnSizeMap = {};
    this._intervalTree = (0, _intervalTree2.default)();
    this._leftMap = {};
  }
  // Tracks the height of each column


  // Store tops and bottoms of each cell for fast intersection lookup.


  // Maps cell index to x coordinates for quick lookup.


  _createClass(PositionCache, [{
    key: "estimateTotalHeight",
    value: function estimateTotalHeight(cellCount, columnCount, defaultCellHeight) {
      var unmeasuredCellCount = cellCount - this.count;
      return this.tallestColumnSize + Math.ceil(unmeasuredCellCount / columnCount) * defaultCellHeight;
    }

    // Render all cells visible within the viewport range defined.

  }, {
    key: "range",
    value: function range(scrollTop, clientHeight, renderCallback) {
      var _this = this;

      this._intervalTree.queryInterval(scrollTop, scrollTop + clientHeight, function (_ref) {
        var _ref2 = _slicedToArray(_ref, 3),
            top = _ref2[0],
            _ = _ref2[1],
            index = _ref2[2];

        return renderCallback(index, _this._leftMap[index], top);
      });
    }
  }, {
    key: "setPosition",
    value: function setPosition(index, left, top, height) {
      this._intervalTree.insert([top, top + height, index]);
      this._leftMap[index] = left;

      var columnSizeMap = this._columnSizeMap;
      var columnHeight = columnSizeMap[left];
      if (columnHeight === undefined) {
        columnSizeMap[left] = top + height;
      } else {
        columnSizeMap[left] = Math.max(columnHeight, top + height);
      }
    }
  }, {
    key: "count",
    get: function get() {
      return this._intervalTree.count;
    }
  }, {
    key: "shortestColumnSize",
    get: function get() {
      var columnSizeMap = this._columnSizeMap;

      var size = 0;

      for (var i in columnSizeMap) {
        var height = columnSizeMap[i];
        size = size === 0 ? height : Math.min(size, height);
      }

      return size;
    }
  }, {
    key: "tallestColumnSize",
    get: function get() {
      var columnSizeMap = this._columnSizeMap;

      var size = 0;

      for (var i in columnSizeMap) {
        var height = columnSizeMap[i];
        size = Math.max(size, height);
      }

      return size;
    }
  }]);

  return PositionCache;
}();

exports.default = PositionCache;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/vendor/intervalTree.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createWrapper;

var _binarySearchBounds = require('949');

var _binarySearchBounds2 = _interopRequireDefault(_binarySearchBounds);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var NOT_FOUND = 0; /**
                    * Binary Search Bounds
                    * https://github.com/mikolalysenko/interval-tree-1d
                    * Mikola Lysenko
                    *
                    * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax in an upstream dependency.
                    * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
                    **/

var SUCCESS = 1;
var EMPTY = 2;

function IntervalTreeNode(mid, left, right, leftPoints, rightPoints) {
  this.mid = mid;
  this.left = left;
  this.right = right;
  this.leftPoints = leftPoints;
  this.rightPoints = rightPoints;
  this.count = (left ? left.count : 0) + (right ? right.count : 0) + leftPoints.length;
}

var proto = IntervalTreeNode.prototype;

function copy(a, b) {
  a.mid = b.mid;
  a.left = b.left;
  a.right = b.right;
  a.leftPoints = b.leftPoints;
  a.rightPoints = b.rightPoints;
  a.count = b.count;
}

function rebuild(node, intervals) {
  var ntree = createIntervalTree(intervals);
  node.mid = ntree.mid;
  node.left = ntree.left;
  node.right = ntree.right;
  node.leftPoints = ntree.leftPoints;
  node.rightPoints = ntree.rightPoints;
  node.count = ntree.count;
}

function rebuildWithInterval(node, interval) {
  var intervals = node.intervals([]);
  intervals.push(interval);
  rebuild(node, intervals);
}

function rebuildWithoutInterval(node, interval) {
  var intervals = node.intervals([]);
  var idx = intervals.indexOf(interval);
  if (idx < 0) {
    return NOT_FOUND;
  }
  intervals.splice(idx, 1);
  rebuild(node, intervals);
  return SUCCESS;
}

proto.intervals = function (result) {
  result.push.apply(result, this.leftPoints);
  if (this.left) {
    this.left.intervals(result);
  }
  if (this.right) {
    this.right.intervals(result);
  }
  return result;
};

proto.insert = function (interval) {
  var weight = this.count - this.leftPoints.length;
  this.count += 1;
  if (interval[1] < this.mid) {
    if (this.left) {
      if (4 * (this.left.count + 1) > 3 * (weight + 1)) {
        rebuildWithInterval(this, interval);
      } else {
        this.left.insert(interval);
      }
    } else {
      this.left = createIntervalTree([interval]);
    }
  } else if (interval[0] > this.mid) {
    if (this.right) {
      if (4 * (this.right.count + 1) > 3 * (weight + 1)) {
        rebuildWithInterval(this, interval);
      } else {
        this.right.insert(interval);
      }
    } else {
      this.right = createIntervalTree([interval]);
    }
  } else {
    var l = _binarySearchBounds2.default.ge(this.leftPoints, interval, compareBegin);
    var r = _binarySearchBounds2.default.ge(this.rightPoints, interval, compareEnd);
    this.leftPoints.splice(l, 0, interval);
    this.rightPoints.splice(r, 0, interval);
  }
};

proto.remove = function (interval) {
  var weight = this.count - this.leftPoints;
  if (interval[1] < this.mid) {
    if (!this.left) {
      return NOT_FOUND;
    }
    var rw = this.right ? this.right.count : 0;
    if (4 * rw > 3 * (weight - 1)) {
      return rebuildWithoutInterval(this, interval);
    }
    var r = this.left.remove(interval);
    if (r === EMPTY) {
      this.left = null;
      this.count -= 1;
      return SUCCESS;
    } else if (r === SUCCESS) {
      this.count -= 1;
    }
    return r;
  } else if (interval[0] > this.mid) {
    if (!this.right) {
      return NOT_FOUND;
    }
    var lw = this.left ? this.left.count : 0;
    if (4 * lw > 3 * (weight - 1)) {
      return rebuildWithoutInterval(this, interval);
    }
    var r = this.right.remove(interval);
    if (r === EMPTY) {
      this.right = null;
      this.count -= 1;
      return SUCCESS;
    } else if (r === SUCCESS) {
      this.count -= 1;
    }
    return r;
  } else {
    if (this.count === 1) {
      if (this.leftPoints[0] === interval) {
        return EMPTY;
      } else {
        return NOT_FOUND;
      }
    }
    if (this.leftPoints.length === 1 && this.leftPoints[0] === interval) {
      if (this.left && this.right) {
        var p = this;
        var n = this.left;
        while (n.right) {
          p = n;
          n = n.right;
        }
        if (p === this) {
          n.right = this.right;
        } else {
          var l = this.left;
          var r = this.right;
          p.count -= n.count;
          p.right = n.left;
          n.left = l;
          n.right = r;
        }
        copy(this, n);
        this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;
      } else if (this.left) {
        copy(this, this.left);
      } else {
        copy(this, this.right);
      }
      return SUCCESS;
    }
    for (var l = _binarySearchBounds2.default.ge(this.leftPoints, interval, compareBegin); l < this.leftPoints.length; ++l) {
      if (this.leftPoints[l][0] !== interval[0]) {
        break;
      }
      if (this.leftPoints[l] === interval) {
        this.count -= 1;
        this.leftPoints.splice(l, 1);
        for (var r = _binarySearchBounds2.default.ge(this.rightPoints, interval, compareEnd); r < this.rightPoints.length; ++r) {
          if (this.rightPoints[r][1] !== interval[1]) {
            break;
          } else if (this.rightPoints[r] === interval) {
            this.rightPoints.splice(r, 1);
            return SUCCESS;
          }
        }
      }
    }
    return NOT_FOUND;
  }
};

function reportLeftRange(arr, hi, cb) {
  for (var i = 0; i < arr.length && arr[i][0] <= hi; ++i) {
    var r = cb(arr[i]);
    if (r) {
      return r;
    }
  }
}

function reportRightRange(arr, lo, cb) {
  for (var i = arr.length - 1; i >= 0 && arr[i][1] >= lo; --i) {
    var r = cb(arr[i]);
    if (r) {
      return r;
    }
  }
}

function reportRange(arr, cb) {
  for (var i = 0; i < arr.length; ++i) {
    var r = cb(arr[i]);
    if (r) {
      return r;
    }
  }
}

proto.queryPoint = function (x, cb) {
  if (x < this.mid) {
    if (this.left) {
      var r = this.left.queryPoint(x, cb);
      if (r) {
        return r;
      }
    }
    return reportLeftRange(this.leftPoints, x, cb);
  } else if (x > this.mid) {
    if (this.right) {
      var r = this.right.queryPoint(x, cb);
      if (r) {
        return r;
      }
    }
    return reportRightRange(this.rightPoints, x, cb);
  } else {
    return reportRange(this.leftPoints, cb);
  }
};

proto.queryInterval = function (lo, hi, cb) {
  if (lo < this.mid && this.left) {
    var r = this.left.queryInterval(lo, hi, cb);
    if (r) {
      return r;
    }
  }
  if (hi > this.mid && this.right) {
    var r = this.right.queryInterval(lo, hi, cb);
    if (r) {
      return r;
    }
  }
  if (hi < this.mid) {
    return reportLeftRange(this.leftPoints, hi, cb);
  } else if (lo > this.mid) {
    return reportRightRange(this.rightPoints, lo, cb);
  } else {
    return reportRange(this.leftPoints, cb);
  }
};

function compareNumbers(a, b) {
  return a - b;
}

function compareBegin(a, b) {
  var d = a[0] - b[0];
  if (d) {
    return d;
  }
  return a[1] - b[1];
}

function compareEnd(a, b) {
  var d = a[1] - b[1];
  if (d) {
    return d;
  }
  return a[0] - b[0];
}

function createIntervalTree(intervals) {
  if (intervals.length === 0) {
    return null;
  }
  var pts = [];
  for (var i = 0; i < intervals.length; ++i) {
    pts.push(intervals[i][0], intervals[i][1]);
  }
  pts.sort(compareNumbers);

  var mid = pts[pts.length >> 1];

  var leftIntervals = [];
  var rightIntervals = [];
  var centerIntervals = [];
  for (var i = 0; i < intervals.length; ++i) {
    var s = intervals[i];
    if (s[1] < mid) {
      leftIntervals.push(s);
    } else if (mid < s[0]) {
      rightIntervals.push(s);
    } else {
      centerIntervals.push(s);
    }
  }

  //Split center intervals
  var leftPoints = centerIntervals;
  var rightPoints = centerIntervals.slice();
  leftPoints.sort(compareBegin);
  rightPoints.sort(compareEnd);

  return new IntervalTreeNode(mid, createIntervalTree(leftIntervals), createIntervalTree(rightIntervals), leftPoints, rightPoints);
}

//User friendly wrapper that makes it possible to support empty trees
function IntervalTree(root) {
  this.root = root;
}

var tproto = IntervalTree.prototype;

tproto.insert = function (interval) {
  if (this.root) {
    this.root.insert(interval);
  } else {
    this.root = new IntervalTreeNode(interval[0], null, null, [interval], [interval]);
  }
};

tproto.remove = function (interval) {
  if (this.root) {
    var r = this.root.remove(interval);
    if (r === EMPTY) {
      this.root = null;
    }
    return r !== NOT_FOUND;
  }
  return false;
};

tproto.queryPoint = function (p, cb) {
  if (this.root) {
    return this.root.queryPoint(p, cb);
  }
};

tproto.queryInterval = function (lo, hi, cb) {
  if (lo <= hi && this.root) {
    return this.root.queryInterval(lo, hi, cb);
  }
};

Object.defineProperty(tproto, "count", {
  get: function get() {
    if (this.root) {
      return this.root.count;
    }
    return 0;
  }
});

Object.defineProperty(tproto, "intervals", {
  get: function get() {
    if (this.root) {
      return this.root.intervals([]);
    }
    return [];
  }
});

function createWrapper(intervals) {
  if (!intervals || intervals.length === 0) {
    return new IntervalTree(null);
  }
  return new IntervalTree(createIntervalTree(intervals));
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/vendor/binarySearchBounds.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Binary Search Bounds
 * https://github.com/mikolalysenko/binary-search-bounds
 * Mikola Lysenko
 *
 * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax.
 * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
 **/

function _GEA(a, l, h, y) {
  var i = h + 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x >= y) {
      i = m;
      h = m - 1;
    } else {
      l = m + 1;
    }
  }
  return i;
}
function _GEP(a, l, h, y, c) {
  var i = h + 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (c(x, y) >= 0) {
      i = m;
      h = m - 1;
    } else {
      l = m + 1;
    }
  }
  return i;
}
function dispatchBsearchGE(a, y, c, l, h) {
  if (typeof c === "function") {
    return _GEP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _GEA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

function _GTA(a, l, h, y) {
  var i = h + 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x > y) {
      i = m;
      h = m - 1;
    } else {
      l = m + 1;
    }
  }
  return i;
}
function _GTP(a, l, h, y, c) {
  var i = h + 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (c(x, y) > 0) {
      i = m;
      h = m - 1;
    } else {
      l = m + 1;
    }
  }
  return i;
}
function dispatchBsearchGT(a, y, c, l, h) {
  if (typeof c === "function") {
    return _GTP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _GTA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

function _LTA(a, l, h, y) {
  var i = l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x < y) {
      i = m;
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return i;
}
function _LTP(a, l, h, y, c) {
  var i = l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (c(x, y) < 0) {
      i = m;
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return i;
}
function dispatchBsearchLT(a, y, c, l, h) {
  if (typeof c === "function") {
    return _LTP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _LTA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

function _LEA(a, l, h, y) {
  var i = l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x <= y) {
      i = m;
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return i;
}
function _LEP(a, l, h, y, c) {
  var i = l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (c(x, y) <= 0) {
      i = m;
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return i;
}
function dispatchBsearchLE(a, y, c, l, h) {
  if (typeof c === "function") {
    return _LEP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _LEA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

function _EQA(a, l, h, y) {
  l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x === y) {
      return m;
    } else if (x <= y) {
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return -1;
}
function _EQP(a, l, h, y, c) {
  l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    var p = c(x, y);
    if (p === 0) {
      return m;
    } else if (p <= 0) {
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return -1;
}
function dispatchBsearchEQ(a, y, c, l, h) {
  if (typeof c === "function") {
    return _EQP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _EQA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

exports.default = {
  ge: dispatchBsearchGE,
  gt: dispatchBsearchGT,
  lt: dispatchBsearchLT,
  le: dispatchBsearchLE,
  eq: dispatchBsearchEQ
};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Masonry/createCellPositioner.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCellPositioner;

var babelPluginFlowReactPropTypes_proptype_Positioner = require('580').babelPluginFlowReactPropTypes_proptype_Positioner || require('581').any;

var babelPluginFlowReactPropTypes_proptype_CellMeasurerCache = require('582').babelPluginFlowReactPropTypes_proptype_CellMeasurerCache || require('583').any;

function createCellPositioner(_ref) {
  var cellMeasurerCache = _ref.cellMeasurerCache,
      columnCount = _ref.columnCount,
      columnWidth = _ref.columnWidth,
      _ref$spacer = _ref.spacer,
      spacer = _ref$spacer === undefined ? 0 : _ref$spacer;

  var columnHeights = void 0;

  initOrResetDerivedValues();

  function cellPositioner(index) {
    // Find the shortest column and use it.
    var columnIndex = 0;
    for (var i = 1; i < columnHeights.length; i++) {
      if (columnHeights[i] < columnHeights[columnIndex]) {
        columnIndex = i;
      }
    }

    var left = columnIndex * (columnWidth + spacer);
    var top = columnHeights[columnIndex] || 0;

    columnHeights[columnIndex] = top + cellMeasurerCache.getHeight(index) + spacer;

    return {
      left: left,
      top: top
    };
  }

  function initOrResetDerivedValues() {
    // Track the height of each column.
    // Layout algorithm below always inserts into the shortest column.
    columnHeights = [];
    for (var i = 0; i < columnCount; i++) {
      columnHeights[i] = 0;
    }
  }

  function reset(params) {
    columnCount = params.columnCount;
    columnWidth = params.columnWidth;
    spacer = params.spacer;

    initOrResetDerivedValues();
  }

  cellPositioner.reset = reset;

  return cellPositioner;
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/MultiGrid/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiGrid = exports.default = undefined;

var _MultiGrid2 = require('472');

var _MultiGrid3 = _interopRequireDefault(_MultiGrid2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _MultiGrid3.default;
exports.MultiGrid = _MultiGrid3.default;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/MultiGrid/MultiGrid.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _propTypes = require('714');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('715');

var _react2 = _interopRequireDefault(_react);

var _CellMeasurerCacheDecorator = require('716');

var _CellMeasurerCacheDecorator2 = _interopRequireDefault(_CellMeasurerCacheDecorator);

var _Grid = require('717');

var _Grid2 = _interopRequireDefault(_Grid);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var SCROLLBAR_SIZE_BUFFER = 20;

/**
 * Renders 1, 2, or 4 Grids depending on configuration.
 * A main (body) Grid will always be rendered.
 * Optionally, 1-2 Grids for sticky header rows will also be rendered.
 * If no sticky columns, only 1 sticky header Grid will be rendered.
 * If sticky columns, 2 sticky header Grids will be rendered.
 */

var MultiGrid = function (_PureComponent) {
  _inherits(MultiGrid, _PureComponent);

  function MultiGrid(props, context) {
    _classCallCheck(this, MultiGrid);

    var _this = _possibleConstructorReturn(this, (MultiGrid.__proto__ || Object.getPrototypeOf(MultiGrid)).call(this, props, context));

    _this.state = {
      scrollLeft: 0,
      scrollTop: 0,
      scrollbarSize: 0,
      showHorizontalScrollbar: false,
      showVerticalScrollbar: false
    };

    _this._deferredInvalidateColumnIndex = null;
    _this._deferredInvalidateRowIndex = null;

    _this._bottomLeftGridRef = _this._bottomLeftGridRef.bind(_this);
    _this._bottomRightGridRef = _this._bottomRightGridRef.bind(_this);
    _this._cellRendererBottomLeftGrid = _this._cellRendererBottomLeftGrid.bind(_this);
    _this._cellRendererBottomRightGrid = _this._cellRendererBottomRightGrid.bind(_this);
    _this._cellRendererTopRightGrid = _this._cellRendererTopRightGrid.bind(_this);
    _this._columnWidthRightGrid = _this._columnWidthRightGrid.bind(_this);
    _this._onScroll = _this._onScroll.bind(_this);
    _this._onScrollbarPresenceChange = _this._onScrollbarPresenceChange.bind(_this);
    _this._onScrollLeft = _this._onScrollLeft.bind(_this);
    _this._onScrollTop = _this._onScrollTop.bind(_this);
    _this._rowHeightBottomGrid = _this._rowHeightBottomGrid.bind(_this);
    _this._topLeftGridRef = _this._topLeftGridRef.bind(_this);
    _this._topRightGridRef = _this._topRightGridRef.bind(_this);
    return _this;
  }

  _createClass(MultiGrid, [{
    key: "forceUpdateGrids",
    value: function forceUpdateGrids() {
      this._bottomLeftGrid && this._bottomLeftGrid.forceUpdate();
      this._bottomRightGrid && this._bottomRightGrid.forceUpdate();
      this._topLeftGrid && this._topLeftGrid.forceUpdate();
      this._topRightGrid && this._topRightGrid.forceUpdate();
    }

    /** See Grid#invalidateCellSizeAfterRender */

  }, {
    key: "invalidateCellSizeAfterRender",
    value: function invalidateCellSizeAfterRender() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$columnIndex = _ref.columnIndex,
          columnIndex = _ref$columnIndex === undefined ? 0 : _ref$columnIndex,
          _ref$rowIndex = _ref.rowIndex,
          rowIndex = _ref$rowIndex === undefined ? 0 : _ref$rowIndex;

      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === "number" ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;
      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === "number" ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;
    }

    /** See Grid#measureAllCells */

  }, {
    key: "measureAllCells",
    value: function measureAllCells() {
      this._bottomLeftGrid && this._bottomLeftGrid.measureAllCells();
      this._bottomRightGrid && this._bottomRightGrid.measureAllCells();
      this._topLeftGrid && this._topLeftGrid.measureAllCells();
      this._topRightGrid && this._topRightGrid.measureAllCells();
    }

    /** See Grid#recomputeGridSize */

  }, {
    key: "recomputeGridSize",
    value: function recomputeGridSize() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$columnIndex = _ref2.columnIndex,
          columnIndex = _ref2$columnIndex === undefined ? 0 : _ref2$columnIndex,
          _ref2$rowIndex = _ref2.rowIndex,
          rowIndex = _ref2$rowIndex === undefined ? 0 : _ref2$rowIndex;

      var _props = this.props,
          fixedColumnCount = _props.fixedColumnCount,
          fixedRowCount = _props.fixedRowCount;

      var adjustedColumnIndex = Math.max(0, columnIndex - fixedColumnCount);
      var adjustedRowIndex = Math.max(0, rowIndex - fixedRowCount);

      this._bottomLeftGrid && this._bottomLeftGrid.recomputeGridSize({
        columnIndex: columnIndex,
        rowIndex: adjustedRowIndex
      });
      this._bottomRightGrid && this._bottomRightGrid.recomputeGridSize({
        columnIndex: adjustedColumnIndex,
        rowIndex: adjustedRowIndex
      });
      this._topLeftGrid && this._topLeftGrid.recomputeGridSize({
        columnIndex: columnIndex,
        rowIndex: rowIndex
      });
      this._topRightGrid && this._topRightGrid.recomputeGridSize({
        columnIndex: adjustedColumnIndex,
        rowIndex: rowIndex
      });

      this._leftGridWidth = null;
      this._topGridHeight = null;
      this._maybeCalculateCachedStyles(null, this.props, null, this.state);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _props2 = this.props,
          scrollLeft = _props2.scrollLeft,
          scrollTop = _props2.scrollTop;

      if (scrollLeft > 0 || scrollTop > 0) {
        var newState = {};

        if (scrollLeft > 0) {
          newState.scrollLeft = scrollLeft;
        }

        if (scrollTop > 0) {
          newState.scrollTop = scrollTop;
        }

        this.setState(newState);
      }
      this._handleInvalidatedGridSize();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._handleInvalidatedGridSize();
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      var _props3 = this.props,
          deferredMeasurementCache = _props3.deferredMeasurementCache,
          fixedColumnCount = _props3.fixedColumnCount,
          fixedRowCount = _props3.fixedRowCount;

      this._maybeCalculateCachedStyles(null, this.props, null, this.state);

      if (deferredMeasurementCache) {
        this._deferredMeasurementCacheBottomLeftGrid = fixedRowCount > 0 ? new _CellMeasurerCacheDecorator2.default({
          cellMeasurerCache: deferredMeasurementCache,
          columnIndexOffset: 0,
          rowIndexOffset: fixedRowCount
        }) : deferredMeasurementCache;

        this._deferredMeasurementCacheBottomRightGrid = fixedColumnCount > 0 || fixedRowCount > 0 ? new _CellMeasurerCacheDecorator2.default({
          cellMeasurerCache: deferredMeasurementCache,
          columnIndexOffset: fixedColumnCount,
          rowIndexOffset: fixedRowCount
        }) : deferredMeasurementCache;

        this._deferredMeasurementCacheTopRightGrid = fixedColumnCount > 0 ? new _CellMeasurerCacheDecorator2.default({
          cellMeasurerCache: deferredMeasurementCache,
          columnIndexOffset: fixedColumnCount,
          rowIndexOffset: 0
        }) : deferredMeasurementCache;
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps, nextState) {
      var _props4 = this.props,
          columnWidth = _props4.columnWidth,
          fixedColumnCount = _props4.fixedColumnCount,
          fixedRowCount = _props4.fixedRowCount,
          rowHeight = _props4.rowHeight;

      if (columnWidth !== nextProps.columnWidth || fixedColumnCount !== nextProps.fixedColumnCount) {
        this._leftGridWidth = null;
      }

      if (fixedRowCount !== nextProps.fixedRowCount || rowHeight !== nextProps.rowHeight) {
        this._topGridHeight = null;
      }

      if (nextProps.scrollLeft !== this.props.scrollLeft || nextProps.scrollTop !== this.props.scrollTop) {
        var newState = {};

        if (nextProps.scrollLeft != null && nextProps.scrollLeft >= 0) {
          newState.scrollLeft = nextProps.scrollLeft;
        }

        if (nextProps.scrollTop != null && nextProps.scrollTop >= 0) {
          newState.scrollTop = nextProps.scrollTop;
        }

        this.setState(newState);
      }

      this._maybeCalculateCachedStyles(this.props, nextProps, this.state, nextState);
    }
  }, {
    key: "render",
    value: function render() {
      var _props5 = this.props,
          onScroll = _props5.onScroll,
          onSectionRendered = _props5.onSectionRendered,
          scrollLeftProp = _props5.scrollLeft,
          scrollToColumn = _props5.scrollToColumn,
          scrollTopProp = _props5.scrollTop,
          scrollToRow = _props5.scrollToRow,
          rest = _objectWithoutProperties(_props5, ["onScroll", "onSectionRendered", "scrollLeft", "scrollToColumn", "scrollTop", "scrollToRow"]);

      // Don't render any of our Grids if there are no cells.
      // This mirrors what Grid does,
      // And prevents us from recording inaccurage measurements when used with CellMeasurer.


      if (this.props.width === 0 || this.props.height === 0) {
        return null;
      }

      // scrollTop and scrollLeft props are explicitly filtered out and ignored

      var _state = this.state,
          scrollLeft = _state.scrollLeft,
          scrollTop = _state.scrollTop;

      return _react2.default.createElement("div", { style: this._containerOuterStyle }, _react2.default.createElement("div", { style: this._containerTopStyle }, this._renderTopLeftGrid(rest), this._renderTopRightGrid(_extends({}, rest, {
        onScroll: onScroll,
        scrollLeft: scrollLeft
      }))), _react2.default.createElement("div", { style: this._containerBottomStyle }, this._renderBottomLeftGrid(_extends({}, rest, {
        onScroll: onScroll,
        scrollTop: scrollTop
      })), this._renderBottomRightGrid(_extends({}, rest, {
        onScroll: onScroll,
        onSectionRendered: onSectionRendered,
        scrollLeft: scrollLeft,
        scrollToColumn: scrollToColumn,
        scrollToRow: scrollToRow,
        scrollTop: scrollTop
      }))));
    }
  }, {
    key: "_bottomLeftGridRef",
    value: function _bottomLeftGridRef(ref) {
      this._bottomLeftGrid = ref;
    }
  }, {
    key: "_bottomRightGridRef",
    value: function _bottomRightGridRef(ref) {
      this._bottomRightGrid = ref;
    }
  }, {
    key: "_cellRendererBottomLeftGrid",
    value: function _cellRendererBottomLeftGrid(_ref3) {
      var rowIndex = _ref3.rowIndex,
          rest = _objectWithoutProperties(_ref3, ["rowIndex"]);

      var _props6 = this.props,
          cellRenderer = _props6.cellRenderer,
          fixedRowCount = _props6.fixedRowCount,
          rowCount = _props6.rowCount;

      if (rowIndex === rowCount - fixedRowCount) {
        return _react2.default.createElement("div", {
          key: rest.key,
          style: _extends({}, rest.style, {
            height: SCROLLBAR_SIZE_BUFFER
          })
        });
      } else {
        return cellRenderer(_extends({}, rest, {
          parent: this,
          rowIndex: rowIndex + fixedRowCount
        }));
      }
    }
  }, {
    key: "_cellRendererBottomRightGrid",
    value: function _cellRendererBottomRightGrid(_ref4) {
      var columnIndex = _ref4.columnIndex,
          rowIndex = _ref4.rowIndex,
          rest = _objectWithoutProperties(_ref4, ["columnIndex", "rowIndex"]);

      var _props7 = this.props,
          cellRenderer = _props7.cellRenderer,
          fixedColumnCount = _props7.fixedColumnCount,
          fixedRowCount = _props7.fixedRowCount;

      return cellRenderer(_extends({}, rest, {
        columnIndex: columnIndex + fixedColumnCount,
        parent: this,
        rowIndex: rowIndex + fixedRowCount
      }));
    }
  }, {
    key: "_cellRendererTopRightGrid",
    value: function _cellRendererTopRightGrid(_ref5) {
      var columnIndex = _ref5.columnIndex,
          rest = _objectWithoutProperties(_ref5, ["columnIndex"]);

      var _props8 = this.props,
          cellRenderer = _props8.cellRenderer,
          columnCount = _props8.columnCount,
          fixedColumnCount = _props8.fixedColumnCount;

      if (columnIndex === columnCount - fixedColumnCount) {
        return _react2.default.createElement("div", {
          key: rest.key,
          style: _extends({}, rest.style, {
            width: SCROLLBAR_SIZE_BUFFER
          })
        });
      } else {
        return cellRenderer(_extends({}, rest, {
          columnIndex: columnIndex + fixedColumnCount,
          parent: this
        }));
      }
    }
  }, {
    key: "_columnWidthRightGrid",
    value: function _columnWidthRightGrid(_ref6) {
      var index = _ref6.index;
      var _props9 = this.props,
          columnCount = _props9.columnCount,
          fixedColumnCount = _props9.fixedColumnCount,
          columnWidth = _props9.columnWidth;
      var _state2 = this.state,
          scrollbarSize = _state2.scrollbarSize,
          showHorizontalScrollbar = _state2.showHorizontalScrollbar;

      // An extra cell is added to the count
      // This gives the smaller Grid extra room for offset,
      // In case the main (bottom right) Grid has a scrollbar
      // If no scrollbar, the extra space is overflow:hidden anyway

      if (showHorizontalScrollbar && index === columnCount - fixedColumnCount) {
        return scrollbarSize;
      }

      return typeof columnWidth === "function" ? columnWidth({ index: index + fixedColumnCount }) : columnWidth;
    }
  }, {
    key: "_getBottomGridHeight",
    value: function _getBottomGridHeight(props) {
      var height = props.height;

      var topGridHeight = this._getTopGridHeight(props);

      return height - topGridHeight;
    }
  }, {
    key: "_getLeftGridWidth",
    value: function _getLeftGridWidth(props) {
      var fixedColumnCount = props.fixedColumnCount,
          columnWidth = props.columnWidth;

      if (this._leftGridWidth == null) {
        if (typeof columnWidth === "function") {
          var leftGridWidth = 0;

          for (var index = 0; index < fixedColumnCount; index++) {
            leftGridWidth += columnWidth({ index: index });
          }

          this._leftGridWidth = leftGridWidth;
        } else {
          this._leftGridWidth = columnWidth * fixedColumnCount;
        }
      }

      return this._leftGridWidth;
    }
  }, {
    key: "_getRightGridWidth",
    value: function _getRightGridWidth(props) {
      var width = props.width;

      var leftGridWidth = this._getLeftGridWidth(props);

      return width - leftGridWidth;
    }
  }, {
    key: "_getTopGridHeight",
    value: function _getTopGridHeight(props) {
      var fixedRowCount = props.fixedRowCount,
          rowHeight = props.rowHeight;

      if (this._topGridHeight == null) {
        if (typeof rowHeight === "function") {
          var topGridHeight = 0;

          for (var index = 0; index < fixedRowCount; index++) {
            topGridHeight += rowHeight({ index: index });
          }

          this._topGridHeight = topGridHeight;
        } else {
          this._topGridHeight = rowHeight * fixedRowCount;
        }
      }

      return this._topGridHeight;
    }
  }, {
    key: "_handleInvalidatedGridSize",
    value: function _handleInvalidatedGridSize() {
      if (typeof this._deferredInvalidateColumnIndex === "number") {
        var columnIndex = this._deferredInvalidateColumnIndex;
        var rowIndex = this._deferredInvalidateRowIndex;

        this._deferredInvalidateColumnIndex = null;
        this._deferredInvalidateRowIndex = null;

        this.recomputeGridSize({
          columnIndex: columnIndex,
          rowIndex: rowIndex
        });
        this.forceUpdate();
      }
    }

    /**
     * Avoid recreating inline styles each render; this bypasses Grid's shallowCompare.
     * This method recalculates styles only when specific props change.
     */

  }, {
    key: "_maybeCalculateCachedStyles",
    value: function _maybeCalculateCachedStyles(prevProps, props) {
      var columnWidth = props.columnWidth,
          enableFixedColumnScroll = props.enableFixedColumnScroll,
          enableFixedRowScroll = props.enableFixedRowScroll,
          height = props.height,
          fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount,
          rowHeight = props.rowHeight,
          style = props.style,
          styleBottomLeftGrid = props.styleBottomLeftGrid,
          styleBottomRightGrid = props.styleBottomRightGrid,
          styleTopLeftGrid = props.styleTopLeftGrid,
          styleTopRightGrid = props.styleTopRightGrid,
          width = props.width;

      var firstRender = !prevProps;
      var sizeChange = firstRender || height !== prevProps.height || width !== prevProps.width;
      var leftSizeChange = firstRender || columnWidth !== prevProps.columnWidth || fixedColumnCount !== prevProps.fixedColumnCount;
      var topSizeChange = firstRender || fixedRowCount !== prevProps.fixedRowCount || rowHeight !== prevProps.rowHeight;

      if (firstRender || sizeChange || style !== prevProps.style) {
        this._containerOuterStyle = _extends({
          height: height,
          overflow: "visible", // Let :focus outline show through
          width: width
        }, style);
      }

      if (firstRender || sizeChange || topSizeChange) {
        this._containerTopStyle = {
          height: this._getTopGridHeight(props),
          position: "relative",
          width: width
        };

        this._containerBottomStyle = {
          height: height - this._getTopGridHeight(props),
          overflow: "visible", // Let :focus outline show through
          position: "relative",
          width: width
        };
      }

      if (firstRender || styleBottomLeftGrid !== prevProps.styleBottomLeftGrid) {
        this._bottomLeftGridStyle = _extends({
          left: 0,
          overflowX: "hidden",
          overflowY: enableFixedColumnScroll ? "auto" : "hidden",
          position: "absolute"
        }, styleBottomLeftGrid);
      }

      if (firstRender || leftSizeChange || styleBottomRightGrid !== prevProps.styleBottomRightGrid) {
        this._bottomRightGridStyle = _extends({
          left: this._getLeftGridWidth(props),
          position: "absolute"
        }, styleBottomRightGrid);
      }

      if (firstRender || styleTopLeftGrid !== prevProps.styleTopLeftGrid) {
        this._topLeftGridStyle = _extends({
          left: 0,
          overflowX: "hidden",
          overflowY: "hidden",
          position: "absolute",
          top: 0
        }, styleTopLeftGrid);
      }

      if (firstRender || leftSizeChange || styleTopRightGrid !== prevProps.styleTopRightGrid) {
        this._topRightGridStyle = _extends({
          left: this._getLeftGridWidth(props),
          overflowX: enableFixedRowScroll ? "auto" : "hidden",
          overflowY: "hidden",
          position: "absolute",
          top: 0
        }, styleTopRightGrid);
      }
    }
  }, {
    key: "_onScroll",
    value: function _onScroll(scrollInfo) {
      var scrollLeft = scrollInfo.scrollLeft,
          scrollTop = scrollInfo.scrollTop;

      this.setState({
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      });
      var onScroll = this.props.onScroll;
      if (onScroll) {
        onScroll(scrollInfo);
      }
    }
  }, {
    key: "_onScrollbarPresenceChange",
    value: function _onScrollbarPresenceChange(_ref7) {
      var horizontal = _ref7.horizontal,
          size = _ref7.size,
          vertical = _ref7.vertical;
      var _state3 = this.state,
          showHorizontalScrollbar = _state3.showHorizontalScrollbar,
          showVerticalScrollbar = _state3.showVerticalScrollbar;

      if (horizontal !== showHorizontalScrollbar || vertical !== showVerticalScrollbar) {
        this.setState({
          scrollbarSize: size,
          showHorizontalScrollbar: horizontal,
          showVerticalScrollbar: vertical
        });
      }
    }
  }, {
    key: "_onScrollLeft",
    value: function _onScrollLeft(scrollInfo) {
      var scrollLeft = scrollInfo.scrollLeft;

      this._onScroll({
        scrollLeft: scrollLeft,
        scrollTop: this.state.scrollTop
      });
    }
  }, {
    key: "_onScrollTop",
    value: function _onScrollTop(scrollInfo) {
      var scrollTop = scrollInfo.scrollTop;

      this._onScroll({
        scrollTop: scrollTop,
        scrollLeft: this.state.scrollLeft
      });
    }
  }, {
    key: "_renderBottomLeftGrid",
    value: function _renderBottomLeftGrid(props) {
      var enableFixedColumnScroll = props.enableFixedColumnScroll,
          fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount,
          rowCount = props.rowCount,
          scrollTop = props.scrollTop;
      var showVerticalScrollbar = this.state.showVerticalScrollbar;

      if (!fixedColumnCount) {
        return null;
      }

      var additionalRowCount = showVerticalScrollbar ? 1 : 0;

      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
        cellRenderer: this._cellRendererBottomLeftGrid,
        className: this.props.classNameBottomLeftGrid,
        columnCount: fixedColumnCount,
        deferredMeasurementCache: this._deferredMeasurementCacheBottomLeftGrid,
        height: this._getBottomGridHeight(props),
        onScroll: enableFixedColumnScroll ? this._onScrollTop : undefined,
        ref: this._bottomLeftGridRef,
        rowCount: Math.max(0, rowCount - fixedRowCount) + additionalRowCount,
        rowHeight: this._rowHeightBottomGrid,
        scrollTop: scrollTop,
        style: this._bottomLeftGridStyle,
        tabIndex: null,
        width: this._getLeftGridWidth(props)
      }));
    }
  }, {
    key: "_renderBottomRightGrid",
    value: function _renderBottomRightGrid(props) {
      var columnCount = props.columnCount,
          fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount,
          rowCount = props.rowCount,
          scrollToColumn = props.scrollToColumn,
          scrollToRow = props.scrollToRow;

      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
        cellRenderer: this._cellRendererBottomRightGrid,
        className: this.props.classNameBottomRightGrid,
        columnCount: Math.max(0, columnCount - fixedColumnCount),
        columnWidth: this._columnWidthRightGrid,
        deferredMeasurementCache: this._deferredMeasurementCacheBottomRightGrid,
        height: this._getBottomGridHeight(props),
        onScroll: this._onScroll,
        onScrollbarPresenceChange: this._onScrollbarPresenceChange,
        ref: this._bottomRightGridRef,
        rowCount: Math.max(0, rowCount - fixedRowCount),
        rowHeight: this._rowHeightBottomGrid,
        scrollToColumn: scrollToColumn - fixedColumnCount,
        scrollToRow: scrollToRow - fixedRowCount,
        style: this._bottomRightGridStyle,
        width: this._getRightGridWidth(props)
      }));
    }
  }, {
    key: "_renderTopLeftGrid",
    value: function _renderTopLeftGrid(props) {
      var fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount;

      if (!fixedColumnCount || !fixedRowCount) {
        return null;
      }

      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
        className: this.props.classNameTopLeftGrid,
        columnCount: fixedColumnCount,
        height: this._getTopGridHeight(props),
        ref: this._topLeftGridRef,
        rowCount: fixedRowCount,
        style: this._topLeftGridStyle,
        tabIndex: null,
        width: this._getLeftGridWidth(props)
      }));
    }
  }, {
    key: "_renderTopRightGrid",
    value: function _renderTopRightGrid(props) {
      var columnCount = props.columnCount,
          enableFixedRowScroll = props.enableFixedRowScroll,
          fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount,
          scrollLeft = props.scrollLeft;
      var showHorizontalScrollbar = this.state.showHorizontalScrollbar;

      if (!fixedRowCount) {
        return null;
      }

      var additionalColumnCount = showHorizontalScrollbar ? 1 : 0;

      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
        cellRenderer: this._cellRendererTopRightGrid,
        className: this.props.classNameTopRightGrid,
        columnCount: Math.max(0, columnCount - fixedColumnCount) + additionalColumnCount,
        columnWidth: this._columnWidthRightGrid,
        deferredMeasurementCache: this._deferredMeasurementCacheTopRightGrid,
        height: this._getTopGridHeight(props),
        onScroll: enableFixedRowScroll ? this._onScrollLeft : undefined,
        ref: this._topRightGridRef,
        rowCount: fixedRowCount,
        scrollLeft: scrollLeft,
        style: this._topRightGridStyle,
        tabIndex: null,
        width: this._getRightGridWidth(props)
      }));
    }
  }, {
    key: "_rowHeightBottomGrid",
    value: function _rowHeightBottomGrid(_ref8) {
      var index = _ref8.index;
      var _props10 = this.props,
          fixedRowCount = _props10.fixedRowCount,
          rowCount = _props10.rowCount,
          rowHeight = _props10.rowHeight;
      var _state4 = this.state,
          scrollbarSize = _state4.scrollbarSize,
          showVerticalScrollbar = _state4.showVerticalScrollbar;

      // An extra cell is added to the count
      // This gives the smaller Grid extra room for offset,
      // In case the main (bottom right) Grid has a scrollbar
      // If no scrollbar, the extra space is overflow:hidden anyway

      if (showVerticalScrollbar && index === rowCount - fixedRowCount) {
        return scrollbarSize;
      }

      return typeof rowHeight === "function" ? rowHeight({ index: index + fixedRowCount }) : rowHeight;
    }
  }, {
    key: "_topLeftGridRef",
    value: function _topLeftGridRef(ref) {
      this._topLeftGrid = ref;
    }
  }, {
    key: "_topRightGridRef",
    value: function _topRightGridRef(ref) {
      this._topRightGrid = ref;
    }
  }]);

  return MultiGrid;
}(_react.PureComponent);

MultiGrid.defaultProps = {
  classNameBottomLeftGrid: "",
  classNameBottomRightGrid: "",
  classNameTopLeftGrid: "",
  classNameTopRightGrid: "",
  enableFixedColumnScroll: false,
  enableFixedRowScroll: false,
  fixedColumnCount: 0,
  fixedRowCount: 0,
  style: {},
  styleBottomLeftGrid: {},
  styleBottomRightGrid: {},
  styleTopLeftGrid: {},
  styleTopRightGrid: {}
};
exports.default = MultiGrid;
MultiGrid.propTypes = 'development' !== "production" ? {
  classNameBottomLeftGrid: _propTypes2.default.string.isRequired,
  classNameBottomRightGrid: _propTypes2.default.string.isRequired,
  classNameTopLeftGrid: _propTypes2.default.string.isRequired,
  classNameTopRightGrid: _propTypes2.default.string.isRequired,
  enableFixedColumnScroll: _propTypes2.default.bool.isRequired,
  enableFixedRowScroll: _propTypes2.default.bool.isRequired,
  fixedColumnCount: _propTypes2.default.number.isRequired,
  fixedRowCount: _propTypes2.default.number.isRequired,
  style: _propTypes2.default.object.isRequired,
  styleBottomLeftGrid: _propTypes2.default.object.isRequired,
  styleBottomRightGrid: _propTypes2.default.object.isRequired,
  styleTopLeftGrid: _propTypes2.default.object.isRequired,
  styleTopRightGrid: _propTypes2.default.object.isRequired
} : {};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/MultiGrid/CellMeasurerCacheDecorator.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _CellMeasurer = require('919');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * Caches measurements for a given cell.
 */
var CellMeasurerCacheDecorator = function () {
  function CellMeasurerCacheDecorator() {
    var _this = this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CellMeasurerCacheDecorator);

    this.columnWidth = function (_ref) {
      var index = _ref.index;

      _this._cellMeasurerCache.columnWidth({
        index: index + _this._columnIndexOffset
      });
    };

    this.rowHeight = function (_ref2) {
      var index = _ref2.index;

      _this._cellMeasurerCache.rowHeight({
        index: index + _this._rowIndexOffset
      });
    };

    var cellMeasurerCache = params.cellMeasurerCache,
        _params$columnIndexOf = params.columnIndexOffset,
        columnIndexOffset = _params$columnIndexOf === undefined ? 0 : _params$columnIndexOf,
        _params$rowIndexOffse = params.rowIndexOffset,
        rowIndexOffset = _params$rowIndexOffse === undefined ? 0 : _params$rowIndexOffse;

    this._cellMeasurerCache = cellMeasurerCache;
    this._columnIndexOffset = columnIndexOffset;
    this._rowIndexOffset = rowIndexOffset;
  }

  _createClass(CellMeasurerCacheDecorator, [{
    key: "clear",
    value: function clear(rowIndex, columnIndex) {
      this._cellMeasurerCache.clear(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
    }
  }, {
    key: "clearAll",
    value: function clearAll() {
      this._cellMeasurerCache.clearAll();
    }
  }, {
    key: "hasFixedHeight",
    value: function hasFixedHeight() {
      return this._cellMeasurerCache.hasFixedHeight();
    }
  }, {
    key: "hasFixedWidth",
    value: function hasFixedWidth() {
      return this._cellMeasurerCache.hasFixedWidth();
    }
  }, {
    key: "getHeight",
    value: function getHeight(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      return this._cellMeasurerCache.getHeight(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
    }
  }, {
    key: "getWidth",
    value: function getWidth(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      return this._cellMeasurerCache.getWidth(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
    }
  }, {
    key: "has",
    value: function has(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      return this._cellMeasurerCache.has(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
    }
  }, {
    key: "set",
    value: function set(rowIndex, columnIndex, width, height) {
      this._cellMeasurerCache.set(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset, width, height);
    }
  }, {
    key: "defaultHeight",
    get: function get() {
      return this._cellMeasurerCache.defaultHeight;
    }
  }, {
    key: "defaultWidth",
    get: function get() {
      return this._cellMeasurerCache.defaultWidth;
    }
  }]);

  return CellMeasurerCacheDecorator;
}();

exports.default = CellMeasurerCacheDecorator;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ScrollSync/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollSync = exports.default = undefined;

var _ScrollSync2 = require('473');

var _ScrollSync3 = _interopRequireDefault(_ScrollSync2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _ScrollSync3.default;
exports.ScrollSync = _ScrollSync3.default;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ScrollSync/ScrollSync.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _propTypes = require('701');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('702');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * HOC that simplifies the process of synchronizing scrolling between two or more virtualized components.
 */
var ScrollSync = function (_PureComponent) {
  _inherits(ScrollSync, _PureComponent);

  function ScrollSync(props, context) {
    _classCallCheck(this, ScrollSync);

    var _this = _possibleConstructorReturn(this, (ScrollSync.__proto__ || Object.getPrototypeOf(ScrollSync)).call(this, props, context));

    _this.state = {
      clientHeight: 0,
      clientWidth: 0,
      scrollHeight: 0,
      scrollLeft: 0,
      scrollTop: 0,
      scrollWidth: 0
    };

    _this._onScroll = _this._onScroll.bind(_this);
    return _this;
  }

  _createClass(ScrollSync, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      var _state = this.state,
          clientHeight = _state.clientHeight,
          clientWidth = _state.clientWidth,
          scrollHeight = _state.scrollHeight,
          scrollLeft = _state.scrollLeft,
          scrollTop = _state.scrollTop,
          scrollWidth = _state.scrollWidth;

      return children({
        clientHeight: clientHeight,
        clientWidth: clientWidth,
        onScroll: this._onScroll,
        scrollHeight: scrollHeight,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        scrollWidth: scrollWidth
      });
    }
  }, {
    key: "_onScroll",
    value: function _onScroll(_ref) {
      var clientHeight = _ref.clientHeight,
          clientWidth = _ref.clientWidth,
          scrollHeight = _ref.scrollHeight,
          scrollLeft = _ref.scrollLeft,
          scrollTop = _ref.scrollTop,
          scrollWidth = _ref.scrollWidth;

      this.setState({
        clientHeight: clientHeight,
        clientWidth: clientWidth,
        scrollHeight: scrollHeight,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        scrollWidth: scrollWidth
      });
    }
  }]);

  return ScrollSync;
}(_react.PureComponent);

exports.default = ScrollSync;
ScrollSync.propTypes = 'development' !== "production" ? {
  /**
   * Function responsible for rendering 2 or more virtualized components.
   * This function should implement the following signature:
   * ({ onScroll, scrollLeft, scrollTop }) => PropTypes.element
   */
  children: _propTypes2.default.func.isRequired
} : {};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SortIndicator = exports.SortDirection = exports.Column = exports.Table = exports.defaultRowRenderer = exports.defaultHeaderRenderer = exports.defaultHeaderRowRenderer = exports.defaultCellRenderer = exports.defaultCellDataGetter = exports.default = undefined;

var _Table2 = require('474');

var _Table3 = _interopRequireDefault(_Table2);

var _defaultCellDataGetter2 = require('475');

var _defaultCellDataGetter3 = _interopRequireDefault(_defaultCellDataGetter2);

var _defaultCellRenderer2 = require('476');

var _defaultCellRenderer3 = _interopRequireDefault(_defaultCellRenderer2);

var _defaultHeaderRowRenderer2 = require('477');

var _defaultHeaderRowRenderer3 = _interopRequireDefault(_defaultHeaderRowRenderer2);

var _defaultHeaderRenderer2 = require('478');

var _defaultHeaderRenderer3 = _interopRequireDefault(_defaultHeaderRenderer2);

var _defaultRowRenderer2 = require('479');

var _defaultRowRenderer3 = _interopRequireDefault(_defaultRowRenderer2);

var _Column2 = require('480');

var _Column3 = _interopRequireDefault(_Column2);

var _SortDirection2 = require('481');

var _SortDirection3 = _interopRequireDefault(_SortDirection2);

var _SortIndicator2 = require('482');

var _SortIndicator3 = _interopRequireDefault(_SortIndicator2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _Table3.default;
exports.defaultCellDataGetter = _defaultCellDataGetter3.default;
exports.defaultCellRenderer = _defaultCellRenderer3.default;
exports.defaultHeaderRowRenderer = _defaultHeaderRowRenderer3.default;
exports.defaultHeaderRenderer = _defaultHeaderRenderer3.default;
exports.defaultRowRenderer = _defaultRowRenderer3.default;
exports.Table = _Table3.default;
exports.Column = _Column3.default;
exports.SortDirection = _SortDirection3.default;
exports.SortIndicator = _SortIndicator3.default;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/Table.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _classnames = require('736');

var _classnames2 = _interopRequireDefault(_classnames);

var _Column = require('737');

var _Column2 = _interopRequireDefault(_Column);

var _propTypes = require('738');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('739');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('740');

var _Grid2 = require('741');

var _Grid3 = _interopRequireDefault(_Grid2);

var _defaultRowRenderer = require('742');

var _defaultRowRenderer2 = _interopRequireDefault(_defaultRowRenderer);

var _defaultHeaderRowRenderer = require('743');

var _defaultHeaderRowRenderer2 = _interopRequireDefault(_defaultHeaderRowRenderer);

var _SortDirection = require('744');

var _SortDirection2 = _interopRequireDefault(_SortDirection);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var babelPluginFlowReactPropTypes_proptype_CellPosition = require('745').babelPluginFlowReactPropTypes_proptype_CellPosition || require('746').any;

/**
 * Table component with fixed headers and virtualized rows for improved performance with large data sets.
 * This component expects explicit width, height, and padding parameters.
 */
var Table = function (_PureComponent) {
  _inherits(Table, _PureComponent);

  function Table(props) {
    _classCallCheck(this, Table);

    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));

    _this.state = {
      scrollbarWidth: 0
    };

    _this._createColumn = _this._createColumn.bind(_this);
    _this._createRow = _this._createRow.bind(_this);
    _this._onScroll = _this._onScroll.bind(_this);
    _this._onSectionRendered = _this._onSectionRendered.bind(_this);
    _this._setRef = _this._setRef.bind(_this);
    return _this;
  }

  _createClass(Table, [{
    key: "forceUpdateGrid",
    value: function forceUpdateGrid() {
      if (this.Grid) {
        this.Grid.forceUpdate();
      }
    }

    /** See Grid#getOffsetForCell */

  }, {
    key: "getOffsetForRow",
    value: function getOffsetForRow(_ref) {
      var alignment = _ref.alignment,
          index = _ref.index;

      if (this.Grid) {
        var _Grid$getOffsetForCel = this.Grid.getOffsetForCell({
          alignment: alignment,
          rowIndex: index
        }),
            scrollTop = _Grid$getOffsetForCel.scrollTop;

        return scrollTop;
      }
      return 0;
    }

    /** CellMeasurer compatibility */

  }, {
    key: "invalidateCellSizeAfterRender",
    value: function invalidateCellSizeAfterRender(_ref2) {
      var columnIndex = _ref2.columnIndex,
          rowIndex = _ref2.rowIndex;

      if (this.Grid) {
        this.Grid.invalidateCellSizeAfterRender({
          rowIndex: rowIndex,
          columnIndex: columnIndex
        });
      }
    }

    /** See Grid#measureAllCells */

  }, {
    key: "measureAllRows",
    value: function measureAllRows() {
      if (this.Grid) {
        this.Grid.measureAllCells();
      }
    }

    /** CellMeasurer compatibility */

  }, {
    key: "recomputeGridSize",
    value: function recomputeGridSize() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$columnIndex = _ref3.columnIndex,
          columnIndex = _ref3$columnIndex === undefined ? 0 : _ref3$columnIndex,
          _ref3$rowIndex = _ref3.rowIndex,
          rowIndex = _ref3$rowIndex === undefined ? 0 : _ref3$rowIndex;

      if (this.Grid) {
        this.Grid.recomputeGridSize({
          rowIndex: rowIndex,
          columnIndex: columnIndex
        });
      }
    }

    /** See Grid#recomputeGridSize */

  }, {
    key: "recomputeRowHeights",
    value: function recomputeRowHeights() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.recomputeGridSize({
          rowIndex: index
        });
      }
    }

    /** See Grid#scrollToPosition */

  }, {
    key: "scrollToPosition",
    value: function scrollToPosition() {
      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.scrollToPosition({ scrollTop: scrollTop });
      }
    }

    /** See Grid#scrollToCell */

  }, {
    key: "scrollToRow",
    value: function scrollToRow() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.scrollToCell({
          columnIndex: 0,
          rowIndex: index
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._setScrollbarWidth();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._setScrollbarWidth();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          disableHeader = _props.disableHeader,
          gridClassName = _props.gridClassName,
          gridStyle = _props.gridStyle,
          headerHeight = _props.headerHeight,
          headerRowRenderer = _props.headerRowRenderer,
          height = _props.height,
          id = _props.id,
          noRowsRenderer = _props.noRowsRenderer,
          rowClassName = _props.rowClassName,
          rowStyle = _props.rowStyle,
          scrollToIndex = _props.scrollToIndex,
          style = _props.style,
          width = _props.width;
      var scrollbarWidth = this.state.scrollbarWidth;

      var availableRowsHeight = disableHeader ? height : height - headerHeight;

      var rowClass = typeof rowClassName === "function" ? rowClassName({ index: -1 }) : rowClassName;
      var rowStyleObject = typeof rowStyle === "function" ? rowStyle({ index: -1 }) : rowStyle;

      // Precompute and cache column styles before rendering rows and columns to speed things up
      this._cachedColumnStyles = [];
      _react2.default.Children.toArray(children).forEach(function (column, index) {
        var flexStyles = _this2._getFlexStyleForColumn(column, column.props.style);

        _this2._cachedColumnStyles[index] = _extends({}, flexStyles, {
          overflow: "hidden"
        });
      });

      // Note that we specify :rowCount, :scrollbarWidth, :sortBy, and :sortDirection as properties on Grid even though these have nothing to do with Grid.
      // This is done because Grid is a pure component and won't update unless its properties or state has changed.
      // Any property that should trigger a re-render of Grid then is specified here to avoid a stale display.
      return _react2.default.createElement("div", {
        className: (0, _classnames2.default)("ReactVirtualized__Table", className),
        id: id,
        role: "grid",
        style: style
      }, !disableHeader && headerRowRenderer({
        className: (0, _classnames2.default)("ReactVirtualized__Table__headerRow", rowClass),
        columns: this._getHeaderColumns(),
        style: _extends({}, rowStyleObject, {
          height: headerHeight,
          overflow: "hidden",
          paddingRight: scrollbarWidth,
          width: width
        })
      }), _react2.default.createElement(_Grid3.default, _extends({}, this.props, {
        autoContainerWidth: true,
        className: (0, _classnames2.default)("ReactVirtualized__Table__Grid", gridClassName),
        cellRenderer: this._createRow,
        columnWidth: width,
        columnCount: 1,
        height: availableRowsHeight,
        id: undefined,
        noContentRenderer: noRowsRenderer,
        onScroll: this._onScroll,
        onSectionRendered: this._onSectionRendered,
        ref: this._setRef,
        role: "rowgroup",
        scrollbarWidth: scrollbarWidth,
        scrollToRow: scrollToIndex,
        style: _extends({}, gridStyle, {
          overflowX: "hidden"
        })
      })));
    }
  }, {
    key: "_createColumn",
    value: function _createColumn(_ref4) {
      var column = _ref4.column,
          columnIndex = _ref4.columnIndex,
          isScrolling = _ref4.isScrolling,
          parent = _ref4.parent,
          rowData = _ref4.rowData,
          rowIndex = _ref4.rowIndex;
      var _column$props = column.props,
          cellDataGetter = _column$props.cellDataGetter,
          cellRenderer = _column$props.cellRenderer,
          className = _column$props.className,
          columnData = _column$props.columnData,
          dataKey = _column$props.dataKey,
          id = _column$props.id;

      var cellData = cellDataGetter({ columnData: columnData, dataKey: dataKey, rowData: rowData });
      var renderedCell = cellRenderer({
        cellData: cellData,
        columnData: columnData,
        columnIndex: columnIndex,
        dataKey: dataKey,
        isScrolling: isScrolling,
        parent: parent,
        rowData: rowData,
        rowIndex: rowIndex
      });

      var style = this._cachedColumnStyles[columnIndex];

      var title = typeof renderedCell === "string" ? renderedCell : null;

      var a11yProps = {
        role: "gridcell"
      };

      if (id) {
        a11yProps["aria-describedby"] = id;
      }

      return _react2.default.createElement("div", _extends({}, a11yProps, {
        key: "Row" + rowIndex + "-Col" + columnIndex,
        className: (0, _classnames2.default)("ReactVirtualized__Table__rowColumn", className),
        style: style,
        title: title
      }), renderedCell);
    }
  }, {
    key: "_createHeader",
    value: function _createHeader(_ref5) {
      var column = _ref5.column,
          index = _ref5.index;
      var _props2 = this.props,
          headerClassName = _props2.headerClassName,
          headerStyle = _props2.headerStyle,
          onHeaderClick = _props2.onHeaderClick,
          sort = _props2.sort,
          sortBy = _props2.sortBy,
          sortDirection = _props2.sortDirection;
      var _column$props2 = column.props,
          dataKey = _column$props2.dataKey,
          disableSort = _column$props2.disableSort,
          headerRenderer = _column$props2.headerRenderer,
          id = _column$props2.id,
          label = _column$props2.label,
          columnData = _column$props2.columnData;

      var sortEnabled = !disableSort && sort;

      var classNames = (0, _classnames2.default)("ReactVirtualized__Table__headerColumn", headerClassName, column.props.headerClassName, {
        ReactVirtualized__Table__sortableHeaderColumn: sortEnabled
      });
      var style = this._getFlexStyleForColumn(column, headerStyle);

      var renderedHeader = headerRenderer({
        columnData: columnData,
        dataKey: dataKey,
        disableSort: disableSort,
        label: label,
        sortBy: sortBy,
        sortDirection: sortDirection
      });

      var a11yProps = {
        role: "columnheader"
      };

      if (sortEnabled || onHeaderClick) {
        // If this is a sortable header, clicking it should update the table data's sorting.
        var newSortDirection = sortBy !== dataKey || sortDirection === _SortDirection2.default.DESC ? _SortDirection2.default.ASC : _SortDirection2.default.DESC;

        var onClick = function onClick(event) {
          sortEnabled && sort({
            sortBy: dataKey,
            sortDirection: newSortDirection
          });
          onHeaderClick && onHeaderClick({ columnData: columnData, dataKey: dataKey, event: event });
        };

        var onKeyDown = function onKeyDown(event) {
          if (event.key === "Enter" || event.key === " ") {
            onClick(event);
          }
        };

        a11yProps["aria-label"] = column.props["aria-label"] || label || dataKey;
        a11yProps.tabIndex = 0;
        a11yProps.onClick = onClick;
        a11yProps.onKeyDown = onKeyDown;
      }

      if (sortBy === dataKey) {
        a11yProps["aria-sort"] = sortDirection === _SortDirection2.default.ASC ? "ascending" : "descending";
      }

      if (id) {
        a11yProps.id = id;
      }

      return _react2.default.createElement("div", _extends({}, a11yProps, {
        key: "Header-Col" + index,
        className: classNames,
        style: style
      }), renderedHeader);
    }
  }, {
    key: "_createRow",
    value: function _createRow(_ref6) {
      var _this3 = this;

      var index = _ref6.rowIndex,
          isScrolling = _ref6.isScrolling,
          key = _ref6.key,
          parent = _ref6.parent,
          style = _ref6.style;
      var _props3 = this.props,
          children = _props3.children,
          onRowClick = _props3.onRowClick,
          onRowDoubleClick = _props3.onRowDoubleClick,
          onRowRightClick = _props3.onRowRightClick,
          onRowMouseOver = _props3.onRowMouseOver,
          onRowMouseOut = _props3.onRowMouseOut,
          rowClassName = _props3.rowClassName,
          rowGetter = _props3.rowGetter,
          rowRenderer = _props3.rowRenderer,
          rowStyle = _props3.rowStyle;
      var scrollbarWidth = this.state.scrollbarWidth;

      var rowClass = typeof rowClassName === "function" ? rowClassName({ index: index }) : rowClassName;
      var rowStyleObject = typeof rowStyle === "function" ? rowStyle({ index: index }) : rowStyle;
      var rowData = rowGetter({ index: index });

      var columns = _react2.default.Children.toArray(children).map(function (column, columnIndex) {
        return _this3._createColumn({
          column: column,
          columnIndex: columnIndex,
          isScrolling: isScrolling,
          parent: parent,
          rowData: rowData,
          rowIndex: index,
          scrollbarWidth: scrollbarWidth
        });
      });

      var className = (0, _classnames2.default)("ReactVirtualized__Table__row", rowClass);
      var flattenedStyle = _extends({}, style, rowStyleObject, {
        height: this._getRowHeight(index),
        overflow: "hidden",
        paddingRight: scrollbarWidth
      });

      return rowRenderer({
        className: className,
        columns: columns,
        index: index,
        isScrolling: isScrolling,
        key: key,
        onRowClick: onRowClick,
        onRowDoubleClick: onRowDoubleClick,
        onRowRightClick: onRowRightClick,
        onRowMouseOver: onRowMouseOver,
        onRowMouseOut: onRowMouseOut,
        rowData: rowData,
        style: flattenedStyle
      });
    }

    /**
     * Determines the flex-shrink, flex-grow, and width values for a cell (header or column).
     */

  }, {
    key: "_getFlexStyleForColumn",
    value: function _getFlexStyleForColumn(column) {
      var customStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var flexValue = column.props.flexGrow + " " + column.props.flexShrink + " " + column.props.width + "px";

      var style = _extends({}, customStyle, {
        flex: flexValue,
        msFlex: flexValue,
        WebkitFlex: flexValue
      });

      if (column.props.maxWidth) {
        style.maxWidth = column.props.maxWidth;
      }

      if (column.props.minWidth) {
        style.minWidth = column.props.minWidth;
      }

      return style;
    }
  }, {
    key: "_getHeaderColumns",
    value: function _getHeaderColumns() {
      var _this4 = this;

      var _props4 = this.props,
          children = _props4.children,
          disableHeader = _props4.disableHeader;

      var items = disableHeader ? [] : _react2.default.Children.toArray(children);

      return items.map(function (column, index) {
        return _this4._createHeader({ column: column, index: index });
      });
    }
  }, {
    key: "_getRowHeight",
    value: function _getRowHeight(rowIndex) {
      var rowHeight = this.props.rowHeight;

      return typeof rowHeight === "function" ? rowHeight({ index: rowIndex }) : rowHeight;
    }
  }, {
    key: "_onScroll",
    value: function _onScroll(_ref7) {
      var clientHeight = _ref7.clientHeight,
          scrollHeight = _ref7.scrollHeight,
          scrollTop = _ref7.scrollTop;
      var onScroll = this.props.onScroll;

      onScroll({ clientHeight: clientHeight, scrollHeight: scrollHeight, scrollTop: scrollTop });
    }
  }, {
    key: "_onSectionRendered",
    value: function _onSectionRendered(_ref8) {
      var rowOverscanStartIndex = _ref8.rowOverscanStartIndex,
          rowOverscanStopIndex = _ref8.rowOverscanStopIndex,
          rowStartIndex = _ref8.rowStartIndex,
          rowStopIndex = _ref8.rowStopIndex;
      var onRowsRendered = this.props.onRowsRendered;

      onRowsRendered({
        overscanStartIndex: rowOverscanStartIndex,
        overscanStopIndex: rowOverscanStopIndex,
        startIndex: rowStartIndex,
        stopIndex: rowStopIndex
      });
    }
  }, {
    key: "_setRef",
    value: function _setRef(ref) {
      this.Grid = ref;
    }
  }, {
    key: "_setScrollbarWidth",
    value: function _setScrollbarWidth() {
      if (this.Grid) {
        var _Grid = (0, _reactDom.findDOMNode)(this.Grid);
        var clientWidth = _Grid.clientWidth || 0;
        var offsetWidth = _Grid.offsetWidth || 0;
        var scrollbarWidth = offsetWidth - clientWidth;

        this.setState({ scrollbarWidth: scrollbarWidth });
      }
    }
  }]);

  return Table;
}(_react.PureComponent);

Table.defaultProps = {
  disableHeader: false,
  estimatedRowSize: 30,
  headerHeight: 0,
  headerStyle: {},
  noRowsRenderer: function noRowsRenderer() {
    return null;
  },
  onRowsRendered: function onRowsRendered() {
    return null;
  },
  onScroll: function onScroll() {
    return null;
  },
  overscanIndicesGetter: _Grid2.accessibilityOverscanIndicesGetter,
  overscanRowCount: 10,
  rowRenderer: _defaultRowRenderer2.default,
  headerRowRenderer: _defaultHeaderRowRenderer2.default,
  rowStyle: {},
  scrollToAlignment: "auto",
  scrollToIndex: -1,
  style: {}
};
exports.default = Table;
Table.propTypes = 'development' !== "production" ? {
  "aria-label": _propTypes2.default.string,

  /**
   * Removes fixed height from the scrollingContainer so that the total height
   * of rows can stretch the window. Intended for use with WindowScroller
   */
  autoHeight: _propTypes2.default.bool,

  /** One or more Columns describing the data displayed in this row */
  children: function children(props) {
    var children = _react2.default.Children.toArray(props.children);
    for (var i = 0; i < children.length; i++) {
      var childType = children[i].type;
      if (childType !== _Column2.default && !(childType.prototype instanceof _Column2.default)) {
        return new Error("Table only accepts children of type Column");
      }
    }
  },

  /** Optional CSS class name */
  className: _propTypes2.default.string,

  /** Disable rendering the header at all */
  disableHeader: _propTypes2.default.bool,

  /**
   * Used to estimate the total height of a Table before all of its rows have actually been measured.
   * The estimated total height is adjusted as rows are rendered.
   */
  estimatedRowSize: _propTypes2.default.number.isRequired,

  /** Optional custom CSS class name to attach to inner Grid element. */
  gridClassName: _propTypes2.default.string,

  /** Optional inline style to attach to inner Grid element. */
  gridStyle: _propTypes2.default.object,

  /** Optional CSS class to apply to all column headers */
  headerClassName: _propTypes2.default.string,

  /** Fixed height of header row */
  headerHeight: _propTypes2.default.number.isRequired,

  /**
   * Responsible for rendering a table row given an array of columns:
   * Should implement the following interface: ({
   *   className: string,
   *   columns: any[],
   *   style: any
   * }): PropTypes.node
   */
  headerRowRenderer: _propTypes2.default.func,

  /** Optional custom inline style to attach to table header columns. */
  headerStyle: _propTypes2.default.object,

  /** Fixed/available height for out DOM element */
  height: _propTypes2.default.number.isRequired,

  /** Optional id */
  id: _propTypes2.default.string,

  /** Optional renderer to be used in place of table body rows when rowCount is 0 */
  noRowsRenderer: _propTypes2.default.func,

  /**
  * Optional callback when a column's header is clicked.
  * ({ columnData: any, dataKey: string }): void
  */
  onHeaderClick: _propTypes2.default.func,

  /**
   * Callback invoked when a user clicks on a table row.
   * ({ index: number }): void
   */
  onRowClick: _propTypes2.default.func,

  /**
   * Callback invoked when a user double-clicks on a table row.
   * ({ index: number }): void
   */
  onRowDoubleClick: _propTypes2.default.func,

  /**
   * Callback invoked when the mouse leaves a table row.
   * ({ index: number }): void
   */
  onRowMouseOut: _propTypes2.default.func,

  /**
   * Callback invoked when a user moves the mouse over a table row.
   * ({ index: number }): void
   */
  onRowMouseOver: _propTypes2.default.func,

  /**
   * Callback invoked when a user right-clicks on a table row.
   * ({ index: number }): void
   */
  onRowRightClick: _propTypes2.default.func,

  /**
   * Callback invoked with information about the slice of rows that were just rendered.
   * ({ startIndex, stopIndex }): void
   */
  onRowsRendered: _propTypes2.default.func,

  /**
   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
   * This callback can be used to sync scrolling between lists, tables, or grids.
   * ({ clientHeight, scrollHeight, scrollTop }): void
   */
  onScroll: _propTypes2.default.func.isRequired,

  /** See Grid#overscanIndicesGetter */
  overscanIndicesGetter: _propTypes2.default.func.isRequired,

  /**
   * Number of rows to render above/below the visible bounds of the list.
   * These rows can help for smoother scrolling on touch devices.
   */
  overscanRowCount: _propTypes2.default.number.isRequired,

  /**
   * Optional CSS class to apply to all table rows (including the header row).
   * This property can be a CSS class name (string) or a function that returns a class name.
   * If a function is provided its signature should be: ({ index: number }): string
   */
  rowClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

  /**
   * Callback responsible for returning a data row given an index.
   * ({ index: number }): any
   */
  rowGetter: _propTypes2.default.func.isRequired,

  /**
   * Either a fixed row height (number) or a function that returns the height of a row given its index.
   * ({ index: number }): number
   */
  rowHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]).isRequired,

  /** Number of rows in table. */
  rowCount: _propTypes2.default.number.isRequired,

  /**
   * Responsible for rendering a table row given an array of columns:
   * Should implement the following interface: ({
   *   className: string,
   *   columns: Array,
   *   index: number,
   *   isScrolling: boolean,
   *   onRowClick: ?Function,
   *   onRowDoubleClick: ?Function,
   *   onRowMouseOver: ?Function,
   *   onRowMouseOut: ?Function,
   *   rowData: any,
   *   style: any
   * }): PropTypes.node
   */
  rowRenderer: _propTypes2.default.func,

  /** Optional custom inline style to attach to table rows. */
  rowStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]).isRequired,

  /** See Grid#scrollToAlignment */
  scrollToAlignment: _propTypes2.default.oneOf(["auto", "end", "start", "center"]).isRequired,

  /** Row index to ensure visible (by forcefully scrolling if necessary) */
  scrollToIndex: _propTypes2.default.number.isRequired,

  /** Vertical offset. */
  scrollTop: _propTypes2.default.number,

  /**
   * Sort function to be called if a sortable header is clicked.
   * ({ sortBy: string, sortDirection: SortDirection }): void
   */
  sort: _propTypes2.default.func,

  /** Table data is currently sorted by this :dataKey (if it is sorted at all) */
  sortBy: _propTypes2.default.string,

  /** Table data is currently sorted in this direction (if it is sorted at all) */
  sortDirection: _propTypes2.default.oneOf([_SortDirection2.default.ASC, _SortDirection2.default.DESC]),

  /** Optional inline style */
  style: _propTypes2.default.object,

  /** Tab index for focus */
  tabIndex: _propTypes2.default.number,

  /** Width of list */
  width: _propTypes2.default.number.isRequired
} : {};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/Column.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('731');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('732');

var _defaultHeaderRenderer = require('733');

var _defaultHeaderRenderer2 = _interopRequireDefault(_defaultHeaderRenderer);

var _defaultCellRenderer = require('734');

var _defaultCellRenderer2 = _interopRequireDefault(_defaultCellRenderer);

var _defaultCellDataGetter = require('735');

var _defaultCellDataGetter2 = _interopRequireDefault(_defaultCellDataGetter);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * Describes the header and cell contents of a table column.
 */
var Column = function (_Component) {
  _inherits(Column, _Component);

  function Column() {
    _classCallCheck(this, Column);

    return _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).apply(this, arguments));
  }

  return Column;
}(_react.Component);

Column.defaultProps = {
  cellDataGetter: _defaultCellDataGetter2.default,
  cellRenderer: _defaultCellRenderer2.default,
  flexGrow: 0,
  flexShrink: 1,
  headerRenderer: _defaultHeaderRenderer2.default,
  style: {}
};
exports.default = Column;
Column.propTypes = 'development' !== "production" ? {
  /** Optional aria-label value to set on the column header */
  "aria-label": _propTypes2.default.string,

  /**
   * Callback responsible for returning a cell's data, given its :dataKey
   * ({ columnData: any, dataKey: string, rowData: any }): any
   */
  cellDataGetter: _propTypes2.default.func,

  /**
   * Callback responsible for rendering a cell's contents.
   * ({ cellData: any, columnData: any, dataKey: string, rowData: any, rowIndex: number }): node
   */
  cellRenderer: _propTypes2.default.func,

  /** Optional CSS class to apply to cell */
  className: _propTypes2.default.string,

  /** Optional additional data passed to this column's :cellDataGetter */
  columnData: _propTypes2.default.object,

  /** Uniquely identifies the row-data attribute corresponding to this cell */
  dataKey: _propTypes2.default.any.isRequired,

  /** If sort is enabled for the table at large, disable it for this column */
  disableSort: _propTypes2.default.bool,

  /** Flex grow style; defaults to 0 */
  flexGrow: _propTypes2.default.number,

  /** Flex shrink style; defaults to 1 */
  flexShrink: _propTypes2.default.number,

  /** Optional CSS class to apply to this column's header */
  headerClassName: _propTypes2.default.string,

  /**
   * Optional callback responsible for rendering a column header contents.
   * ({ columnData: object, dataKey: string, disableSort: boolean, label: node, sortBy: string, sortDirection: string }): PropTypes.node
   */
  headerRenderer: _propTypes2.default.func.isRequired,

  /** Optional id to set on the column header */
  id: _propTypes2.default.string,

  /** Header label for this column */
  label: _propTypes2.default.node,

  /** Maximum width of column; this property will only be used if :flexGrow is > 0. */
  maxWidth: _propTypes2.default.number,

  /** Minimum width of column. */
  minWidth: _propTypes2.default.number,

  /** Optional inline style to apply to cell */
  style: _propTypes2.default.object,

  /** Flex basis (width) for this column; This value can grow or shrink based on :flexGrow and :flexShrink properties. */
  width: _propTypes2.default.number.isRequired
} : {};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultHeaderRenderer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultHeaderRenderer;

var _react = require('720');

var _react2 = _interopRequireDefault(_react);

var _SortIndicator = require('721');

var _SortIndicator2 = _interopRequireDefault(_SortIndicator);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * Default table header renderer.
 */
var babelPluginFlowReactPropTypes_proptype_HeaderRendererParams = require('722').babelPluginFlowReactPropTypes_proptype_HeaderRendererParams || require('723').any;

function defaultHeaderRenderer(_ref) {
  var dataKey = _ref.dataKey,
      label = _ref.label,
      sortBy = _ref.sortBy,
      sortDirection = _ref.sortDirection;

  var showSortIndicator = sortBy === dataKey;
  var children = [_react2.default.createElement("span", {
    className: "ReactVirtualized__Table__headerTruncatedText",
    key: "label",
    title: label
  }, label)];

  if (showSortIndicator) {
    children.push(_react2.default.createElement(_SortIndicator2.default, { key: "SortIndicator", sortDirection: sortDirection }));
  }

  return children;
}
defaultHeaderRenderer.propTypes = babelPluginFlowReactPropTypes_proptype_HeaderRendererParams === require('724').any ? {} : babelPluginFlowReactPropTypes_proptype_HeaderRendererParams;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/SortIndicator.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SortIndicator;

var _classnames = require('752');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('753');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('754');

var _react2 = _interopRequireDefault(_react);

var _SortDirection = require('755');

var _SortDirection2 = _interopRequireDefault(_SortDirection);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * Displayed beside a header to indicate that a Table is currently sorted by this column.
 */
function SortIndicator(_ref) {
  var sortDirection = _ref.sortDirection;

  var classNames = (0, _classnames2.default)("ReactVirtualized__Table__sortableHeaderIcon", {
    "ReactVirtualized__Table__sortableHeaderIcon--ASC": sortDirection === _SortDirection2.default.ASC,
    "ReactVirtualized__Table__sortableHeaderIcon--DESC": sortDirection === _SortDirection2.default.DESC
  });

  return _react2.default.createElement("svg", { className: classNames, width: 18, height: 18, viewBox: "0 0 24 24" }, sortDirection === _SortDirection2.default.ASC ? _react2.default.createElement("path", { d: "M7 14l5-5 5 5z" }) : _react2.default.createElement("path", { d: "M7 10l5 5 5-5z" }), _react2.default.createElement("path", { d: "M0 0h24v24H0z", fill: "none" }));
}

SortIndicator.propTypes = 'development' !== "production" ? {
  sortDirection: _propTypes2.default.oneOf([_SortDirection2.default.ASC, _SortDirection2.default.DESC])
} : {};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/SortDirection.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SortDirection = {
  /**
   * Sort items in ascending order.
   * This means arranging from the lowest value to the highest (e.g. a-z, 0-9).
   */
  ASC: "ASC",

  /**
   * Sort items in descending order.
   * This means arranging from the highest value to the lowest (e.g. z-a, 9-0).
   */
  DESC: "DESC"
};

exports.default = SortDirection;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/types.js", function(__filename, __dirname, require, module, exports) {
"use strict";

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellDataGetterParams", {
  value: {
    columnData: require('787').any,
    dataKey: require('788').string.isRequired,
    rowData: require('789').any.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellRendererParams", {
  value: {
    cellData: require('790').any,
    columnData: require('791').any,
    dataKey: require('792').string.isRequired,
    rowData: require('793').any.isRequired,
    rowIndex: require('794').number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams", {
  value: {
    className: require('795').string.isRequired,
    columns: require('796').arrayOf(require('797').any).isRequired,
    style: require('798').any.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_HeaderRendererParams", {
  value: {
    columnData: require('799').any,
    dataKey: require('800').string.isRequired,
    disableSort: require('801').bool,
    label: require('802').any,
    sortBy: require('803').string,
    sortDirection: require('804').string
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_RowRendererParams", {
  value: {
    className: require('805').string.isRequired,
    columns: require('806').arrayOf(require('807').any).isRequired,
    index: require('808').number.isRequired,
    isScrolling: require('809').bool.isRequired,
    onRowClick: require('810').func,
    onRowDoubleClick: require('811').func,
    onRowMouseOver: require('812').func,
    onRowMouseOut: require('813').func,
    rowData: require('814').any.isRequired,
    style: require('815').any.isRequired
  },
  configurable: true
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultCellRenderer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultCellRenderer;

/**
 * Default cell renderer that displays an attribute as a simple string
 * You should override the column's cellRenderer if your data is some other type of object.
 */
var babelPluginFlowReactPropTypes_proptype_CellRendererParams = require('718').babelPluginFlowReactPropTypes_proptype_CellRendererParams || require('719').any;

function defaultCellRenderer(_ref) {
  var cellData = _ref.cellData;

  if (cellData == null) {
    return "";
  } else {
    return String(cellData);
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultCellDataGetter.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultCellDataGetter;

/**
 * Default accessor for returning a cell value for a given attribute.
 * This function expects to operate on either a vanilla Object or an Immutable Map.
 * You should override the column's cellDataGetter if your data is some other type of object.
 */
var babelPluginFlowReactPropTypes_proptype_CellDataGetterParams = require('725').babelPluginFlowReactPropTypes_proptype_CellDataGetterParams || require('726').any;

function defaultCellDataGetter(_ref) {
  var dataKey = _ref.dataKey,
      rowData = _ref.rowData;

  if (typeof rowData.get === "function") {
    return rowData.get(dataKey);
  } else {
    return rowData[dataKey];
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultRowRenderer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = defaultRowRenderer;

var _react = require('727');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * Default row renderer for Table.
 */
var babelPluginFlowReactPropTypes_proptype_RowRendererParams = require('728').babelPluginFlowReactPropTypes_proptype_RowRendererParams || require('729').any;

function defaultRowRenderer(_ref) {
  var className = _ref.className,
      columns = _ref.columns,
      index = _ref.index,
      key = _ref.key,
      onRowClick = _ref.onRowClick,
      onRowDoubleClick = _ref.onRowDoubleClick,
      onRowMouseOut = _ref.onRowMouseOut,
      onRowMouseOver = _ref.onRowMouseOver,
      onRowRightClick = _ref.onRowRightClick,
      rowData = _ref.rowData,
      style = _ref.style;

  var a11yProps = {};

  if (onRowClick || onRowDoubleClick || onRowMouseOut || onRowMouseOver || onRowRightClick) {
    a11yProps["aria-label"] = "row";
    a11yProps.tabIndex = 0;

    if (onRowClick) {
      a11yProps.onClick = function (event) {
        return onRowClick({ event: event, index: index, rowData: rowData });
      };
    }
    if (onRowDoubleClick) {
      a11yProps.onDoubleClick = function (event) {
        return onRowDoubleClick({ event: event, index: index, rowData: rowData });
      };
    }
    if (onRowMouseOut) {
      a11yProps.onMouseOut = function (event) {
        return onRowMouseOut({ event: event, index: index, rowData: rowData });
      };
    }
    if (onRowMouseOver) {
      a11yProps.onMouseOver = function (event) {
        return onRowMouseOver({ event: event, index: index, rowData: rowData });
      };
    }
    if (onRowRightClick) {
      a11yProps.onContextMenu = function (event) {
        return onRowRightClick({ event: event, index: index, rowData: rowData });
      };
    }
  }

  return _react2.default.createElement("div", _extends({}, a11yProps, {
    className: className,
    key: key,
    role: "row",
    style: style
  }), columns);
}
defaultRowRenderer.propTypes = babelPluginFlowReactPropTypes_proptype_RowRendererParams === require('730').any ? {} : babelPluginFlowReactPropTypes_proptype_RowRendererParams;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultHeaderRowRenderer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultHeaderRowRenderer;

var _react = require('528');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams = require('529').babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams || require('530').any;

function defaultHeaderRowRenderer(_ref) {
  var className = _ref.className,
      columns = _ref.columns,
      style = _ref.style;

  return _react2.default.createElement("div", { className: className, role: "row", style: style }, columns);
}
defaultHeaderRowRenderer.propTypes = babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams === require('531').any ? {} : babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/WindowScroller/index.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IS_SCROLLING_TIMEOUT = exports.WindowScroller = exports.default = undefined;

var _onScroll = require('484');

Object.defineProperty(exports, "IS_SCROLLING_TIMEOUT", {
  enumerable: true,
  get: function get() {
    return _onScroll.IS_SCROLLING_TIMEOUT;
  }
});

var _WindowScroller2 = require('485');

var _WindowScroller3 = _interopRequireDefault(_WindowScroller2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _WindowScroller3.default;
exports.WindowScroller = _WindowScroller3.default;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/WindowScroller/utils/onScroll.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerScrollListener = registerScrollListener;
exports.unregisterScrollListener = unregisterScrollListener;

var _requestAnimationTimeout = require('771');

var mountedInstances = [];
var originalBodyPointerEvents = null;
var disablePointerEventsTimeoutId = null;

function enablePointerEventsIfDisabled() {
  if (disablePointerEventsTimeoutId) {
    disablePointerEventsTimeoutId = null;

    document.body.style.pointerEvents = originalBodyPointerEvents;

    originalBodyPointerEvents = null;
  }
}

function enablePointerEventsAfterDelayCallback() {
  enablePointerEventsIfDisabled();
  mountedInstances.forEach(function (instance) {
    return instance.__resetIsScrolling();
  });
}

function enablePointerEventsAfterDelay() {
  if (disablePointerEventsTimeoutId) {
    (0, _requestAnimationTimeout.cancelAnimationTimeout)(disablePointerEventsTimeoutId);
  }

  var maximumTimeout = 0;
  mountedInstances.forEach(function (instance) {
    maximumTimeout = Math.max(maximumTimeout, instance.props.scrollingResetTimeInterval);
  });

  disablePointerEventsTimeoutId = (0, _requestAnimationTimeout.requestAnimationTimeout)(enablePointerEventsAfterDelayCallback, maximumTimeout);
}

function onScrollWindow(event) {
  if (event.currentTarget === window && originalBodyPointerEvents == null) {
    originalBodyPointerEvents = document.body.style.pointerEvents;

    document.body.style.pointerEvents = "none";
  }
  enablePointerEventsAfterDelay();
  mountedInstances.forEach(function (instance) {
    if (instance.scrollElement === event.currentTarget) {
      instance.__handleWindowScrollEvent(event);
    }
  });
}

function registerScrollListener(component, element) {
  if (!mountedInstances.some(function (instance) {
    return instance.scrollElement === element;
  })) {
    element.addEventListener("scroll", onScrollWindow);
  }
  mountedInstances.push(component);
}

function unregisterScrollListener(component, element) {
  mountedInstances = mountedInstances.filter(function (instance) {
    return instance !== component;
  });
  if (!mountedInstances.length) {
    element.removeEventListener("scroll", onScrollWindow);
    if (disablePointerEventsTimeoutId) {
      (0, _requestAnimationTimeout.cancelAnimationTimeout)(disablePointerEventsTimeoutId);
      enablePointerEventsIfDisabled();
    }
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/WindowScroller/WindowScroller.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IS_SCROLLING_TIMEOUT = undefined;

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _propTypes = require('747');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('748');

var _reactDom = require('749');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _onScroll = require('750');

var _dimensions = require('751');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
 * This improves performance and makes scrolling smoother.
 */
var IS_SCROLLING_TIMEOUT = exports.IS_SCROLLING_TIMEOUT = 150;

var WindowScroller = function (_PureComponent) {
  _inherits(WindowScroller, _PureComponent);

  function WindowScroller(props) {
    _classCallCheck(this, WindowScroller);

    // Handle server-side rendering case
    var _this = _possibleConstructorReturn(this, (WindowScroller.__proto__ || Object.getPrototypeOf(WindowScroller)).call(this, props));

    var _ref = typeof window !== "undefined" ? (0, _dimensions.getDimensions)(props.scrollElement || window) : { width: 0, height: 0 },
        width = _ref.width,
        height = _ref.height;

    _this.state = {
      height: height,
      width: width,
      isScrolling: false,
      scrollLeft: 0,
      scrollTop: 0
    };

    _this._onResize = _this._onResize.bind(_this);
    _this._onChildScroll = _this._onChildScroll.bind(_this);
    _this.__handleWindowScrollEvent = _this.__handleWindowScrollEvent.bind(_this);
    _this.__resetIsScrolling = _this.__resetIsScrolling.bind(_this);
    return _this;
  }

  // Can’t use defaultProps for scrollElement without breaking server-side rendering


  _createClass(WindowScroller, [{
    key: "updatePosition",
    value: function updatePosition(scrollElement) {
      var onResize = this.props.onResize;
      var _state = this.state,
          height = _state.height,
          width = _state.width;

      scrollElement = scrollElement || this.props.scrollElement || window;
      var offset = (0, _dimensions.getPositionOffset)(_reactDom2.default.findDOMNode(this), scrollElement);
      this._positionFromTop = offset.top;
      this._positionFromLeft = offset.left;

      var dimensions = (0, _dimensions.getDimensions)(scrollElement);
      if (height !== dimensions.height || width !== dimensions.width) {
        this.setState({
          height: dimensions.height,
          width: dimensions.width
        });
        onResize({
          height: dimensions.height,
          width: dimensions.width
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var scrollElement = this.props.scrollElement || window;

      this.updatePosition(scrollElement);

      (0, _onScroll.registerScrollListener)(this, scrollElement);

      window.addEventListener("resize", this._onResize, false);

      this._isMounted = true;
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var scrollElement = this.props.scrollElement || window;
      var nextScrollElement = nextProps.scrollElement || window;

      if (scrollElement !== nextScrollElement) {
        this.updatePosition(nextScrollElement);

        (0, _onScroll.unregisterScrollListener)(this, scrollElement);
        (0, _onScroll.registerScrollListener)(this, nextScrollElement);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      (0, _onScroll.unregisterScrollListener)(this, this.props.scrollElement || window);
      window.removeEventListener("resize", this._onResize, false);

      this._isMounted = false;
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var _state2 = this.state,
          isScrolling = _state2.isScrolling,
          scrollTop = _state2.scrollTop,
          scrollLeft = _state2.scrollLeft,
          height = _state2.height,
          width = _state2.width;

      return children({
        onChildScroll: this._onChildScroll,
        height: height,
        isScrolling: isScrolling,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        width: width
      });
    }
  }, {
    key: "_onChildScroll",
    value: function _onChildScroll(_ref2) {
      var scrollTop = _ref2.scrollTop;

      if (this.state.scrollTop === scrollTop) return;

      var scrollElement = this.scrollElement;

      if (typeof scrollElement.scrollTo === "function") {
        scrollElement.scrollTo(0, scrollTop + this._positionFromTop);
      } else {
        scrollElement.scrollTop = scrollTop + this._positionFromTop;
      }
    }
  }, {
    key: "_onResize",
    value: function _onResize() {
      this.updatePosition();
    }

    // Referenced by utils/onScroll

  }, {
    key: "__handleWindowScrollEvent",
    value: function __handleWindowScrollEvent() {
      if (!this._isMounted) return;

      var onScroll = this.props.onScroll;

      var scrollElement = this.props.scrollElement || window;
      var scrollOffset = (0, _dimensions.getScrollOffset)(scrollElement);
      var scrollLeft = Math.max(0, scrollOffset.left - this._positionFromLeft);
      var scrollTop = Math.max(0, scrollOffset.top - this._positionFromTop);

      this.setState({
        isScrolling: true,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      });

      onScroll({
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      });
    }

    // Referenced by utils/onScroll

  }, {
    key: "__resetIsScrolling",
    value: function __resetIsScrolling() {
      this.setState({
        isScrolling: false
      });
    }
  }, {
    key: "scrollElement",
    get: function get() {
      return this.props.scrollElement || window;
    }
  }]);

  return WindowScroller;
}(_react.PureComponent);

WindowScroller.defaultProps = {
  onResize: function onResize() {},
  onScroll: function onScroll() {},
  scrollingResetTimeInterval: IS_SCROLLING_TIMEOUT
};
exports.default = WindowScroller;
WindowScroller.propTypes = 'development' !== "production" ? {
  /**
   * Function responsible for rendering children.
   * This function should implement the following signature:
   * ({ height, isScrolling, scrollLeft, scrollTop, width }) => PropTypes.element
   */
  children: _propTypes2.default.func.isRequired,

  /** Callback to be invoked on-resize: ({ height, width }) */
  onResize: _propTypes2.default.func.isRequired,

  /** Callback to be invoked on-scroll: ({ scrollLeft, scrollTop }) */
  onScroll: _propTypes2.default.func.isRequired,

  /** Element to attach scroll event listeners. Defaults to window. */
  scrollElement: _propTypes2.default.any,

  /**
   * Wait this amount of time after the last scroll event before resetting child `pointer-events`.
   */
  scrollingResetTimeInterval: _propTypes2.default.number.isRequired
} : {};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/WindowScroller/utils/dimensions.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDimensions = getDimensions;
exports.getPositionOffset = getPositionOffset;
exports.getScrollOffset = getScrollOffset;
/**
 * Gets the dimensions of the element, accounting for API differences between
 * `window` and other DOM elements.
 */

function getDimensions(element) {
  if (element === window) {
    return {
      height: typeof window.innerHeight === "number" ? window.innerHeight : 0,
      width: typeof window.innerWidth === "number" ? window.innerWidth : 0
    };
  }

  var _element$getBoundingC = element.getBoundingClientRect(),
      width = _element$getBoundingC.width,
      height = _element$getBoundingC.height;

  return { width: width, height: height };
}

/**
 * Gets the vertical and horizontal position of an element within its scroll container.
 * Elements that have been “scrolled past” return negative values.
 * Handles edge-case where a user is navigating back (history) from an already-scrolled page.
 * In this case the body’s top or left position will be a negative number and this element’s top or left will be increased (by that amount).
 */
function getPositionOffset(element, container) {
  var scrollOffset = container === window ? { top: 0, left: 0 } : getScrollOffset(container);
  var containerElement = container === window ? document.documentElement : container;
  var elementRect = element.getBoundingClientRect();
  var containerRect = containerElement.getBoundingClientRect();
  return {
    top: elementRect.top + scrollOffset.top - containerRect.top,
    left: elementRect.left + scrollOffset.left - containerRect.left
  };
}

/**
 * Gets the vertical and horizontal scroll amount of the element, accounting for IE compatibility
 * and API differences between `window` and other DOM elements.
 */
function getScrollOffset(element) {
  if (element === window) {
    return {
      top: "scrollY" in window ? window.scrollY : document.documentElement.scrollTop,
      left: "scrollX" in window ? window.scrollX : document.documentElement.scrollLeft
    };
  } else {
    return {
      top: element.scrollTop,
      left: element.scrollLeft
    };
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/portal.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp;

var _react = require('2897');

var _propTypes = require('2898');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('2899');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

window.ReactDom = _reactDom2.default;

const useCreatePortal = typeof _reactDom2.default.createPortal === 'function';

let Portal = (_temp = _class = class Portal extends _react.Component {

  componentWillMount() {
    this.popup = document.createElement('div');
    document.body.appendChild(this.popup);
    this.renderLayer();
  }

  componentDidUpdate() {
    this.renderLayer();
  }

  componentWillUnmount() {
    if (!useCreatePortal) {
      _reactDom2.default.unmountComponentAtNode(this.popup);
    }
    document.body.removeChild(this.popup);
  }

  renderLayer() {
    if (!useCreatePortal) {
      _reactDom2.default.unstable_renderSubtreeIntoContainer(this, this.props.children, this.popup);
    }
  }

  render() {
    if (useCreatePortal) {
      return _reactDom2.default.createPortal(this.props.children, this.popup);
    }
    return null;
  }
}, _class.propTypes = {
  children: _propTypes2.default.node
}, _temp);
exports.default = Portal;
//# sourceMappingURL=portal.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/stableContainer.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2687');

var React = _interopRequireWildcard(_react2);

var _index = require('2688');

var _index2 = _interopRequireDefault(_index);

var _class;

var _black = require('2689');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

const _components = {
  StableContainer: {
    displayName: 'StableContainer'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/helpers/stableContainer.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const StableContainer = _wrapComponent('StableContainer')((0, _black.view)(_class = class StableContainer extends React.Component {

  componentWillMount() {
    this.setState({
      children: this.props.children
    });
  }

  componentWillReceiveProps(nextProps) {
    if (this.setNextChildren) {
      clearTimeout(this.setNextChildren);
    }
    if (!nextProps.children) {
      if (!this.props.stableDuration) {
        return;
      }
      this.setNextChildren = this.setTimeout(() => {
        this.setState({
          children: nextProps.children
        });
      }, this.props.stableDuration);
    } else {
      this.setState({ children: nextProps.children });
    }
  }

  render() {
    const _gloss3 = this.glossElement.bind(this);

    return _gloss3('container', null, this.state.children || null);
  }
}) || _class);

exports.default = StableContainer;
//# sourceMappingURL=stableContainer.js.map
});
__sbPundle.registerModule("../node_modules/@mcro/hmr-view/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = proxyReactComponents;

var _proxyClass = require('376');

var _proxyClass2 = _interopRequireDefault(_proxyClass);

var _reactDeepForceUpdate = require('377');

var _reactDeepForceUpdate2 = _interopRequireDefault(_reactDeepForceUpdate);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

let viewProxies = {};
let reloaded = [];
let reloadedInstances = 0;
let lastHotReload = Date.now();

if (module && module.hot && module.hot.accept) {
  module.hot.accept(() => {
    viewProxies = module.hot.data.viewProxies || {};
  });
  module.hot.dispose(data => {
    data.viewProxies = viewProxies;
  });
}

function proxyReactComponents({
  filename,
  components,
  imports,
  locals
}) {
  const [React] = imports;
  const [module] = locals;
  const [{ hot }] = locals;

  if (!hot || typeof hot.accept !== 'function') {
    throw new Error('locals[0] does not appear to be a `module` object with Hot Module replacement API enabled. You should disable @mcro/view-hmr');
  }

  const doHotReload = instance => {
    if (instance.hotReload) {
      instance.hotReload(module);
    }
    (0, _reactDeepForceUpdate2.default)(instance);
    reloadedInstances++;
  };

  return function wrapWithProxy(ReactClass, uid) {
    const { isInFunction, displayName = uid } = components[uid];
    const path = filename + '$' + uid;

    if (isInFunction) {
      return ReactClass;
    }

    if (module && module.hot && module.hot.accept) {
      module.hot.accept(() => {}); // to make it a fast hmr
    }

    // if existing proxy
    if (viewProxies[path]) {
      reloaded.push(displayName);
      const instances = viewProxies[path].update(ReactClass);
      setTimeout(() => {
        instances.forEach(doHotReload);
        lastHotReload = Date.now();
        window.lastHotReload = lastHotReload;
      });
    } else {
      viewProxies[path] = (0, _proxyClass2.default)(ReactClass);
    }

    return viewProxies[path].get();
  };
}

setInterval(() => {
  if (reloaded.length) {
    console.log(`[HMR] ${reloaded.join(', ')}, ${reloadedInstances} instances`);
    if (window.Black) {
      window.Black.view.emit('hmr');
    }
    reloaded = [];
    reloadedInstances = 0;
  }
}, 1000);
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("../node_modules/@mcro/hmr-view/lib/proxyClass.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = createClassProxy;

var _lodash = require('411');

var _proxyProto = require('412');

var _proxyProto2 = _interopRequireDefault(_proxyProto);

var _bindAutoBindMethods = require('413');

var _bindAutoBindMethods2 = _interopRequireDefault(_bindAutoBindMethods);

var _deleteUnknownAutoBindMethods = require('414');

var _deleteUnknownAutoBindMethods2 = _interopRequireDefault(_deleteUnknownAutoBindMethods);

var _supportsProtoAssignment = require('415');

var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const RESERVED_STATICS = ['length', 'displayName', 'name', 'arguments', 'caller', 'prototype', 'toString'];

function isEqualDescriptor(a, b) {
  if (!a && !b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  for (let key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}

function getDisplayName(Component) {
  const displayName = Component.displayName || Component.name;
  return displayName && displayName !== 'ReactComponent' ? displayName : 'Unknown';
}

let allProxies = [];
function findProxy(Component) {
  const pair = (0, _lodash.find)(allProxies, ([key]) => key === Component);
  return pair ? pair[1] : null;
}
function addProxy(Component, proxy) {
  allProxies.push([Component, proxy]);
}

function proxyClass(InitialComponent) {
  // Prevent double wrapping.
  // Given a proxy class, return the existing proxy managing it.
  var existingProxy = findProxy(InitialComponent);
  if (existingProxy) {
    return existingProxy;
  }

  let CurrentComponent;
  let ProxyComponent;
  let savedDescriptors = {};

  function instantiate(factory, context, params) {
    const component = factory();

    try {
      return component.apply(context, params);
    } catch (err) {
      const instance = new component(...params);
      Object.keys(instance).forEach(key => {
        if (RESERVED_STATICS.indexOf(key) > -1) {
          return;
        }
        context[key] = instance[key];
      });
    }
  }

  let displayName = getDisplayName(InitialComponent);
  try {
    // Create a proxy constructor with matching name
    ProxyComponent = new Function('factory', 'instantiate', `return function ${displayName}() {
         return instantiate(factory, this, arguments);
      }`)(() => CurrentComponent, instantiate);
  } catch (err) {
    // Some environments may forbid dynamic evaluation
    ProxyComponent = function () {
      return instantiate(() => CurrentComponent, this, arguments);
    };
  }
  try {
    Object.defineProperty(ProxyComponent, 'name', {
      value: displayName
    });
  } catch (err) {}

  // Proxy toString() to the current constructor
  ProxyComponent.toString = function toString() {
    return CurrentComponent.toString();
  };

  let prototypeProxy;
  if (InitialComponent.prototype && InitialComponent.prototype.isReactComponent) {
    // Point proxy constructor to the proxy prototype
    prototypeProxy = (0, _proxyProto2.default)();
    ProxyComponent.prototype = prototypeProxy.get();
  }

  function update(NextComponent) {
    if (typeof NextComponent !== 'function') {
      throw new Error('Expected a constructor.');
    }
    if (NextComponent === CurrentComponent) {
      return;
    }

    // Prevent proxy cycles
    var existingProxy = findProxy(NextComponent);
    if (existingProxy) {
      return update(existingProxy.__getCurrent());
    }

    // Save the next constructor so we call it
    const PreviousComponent = CurrentComponent;
    CurrentComponent = NextComponent;

    // Try to infer displayName
    displayName = getDisplayName(NextComponent);
    ProxyComponent.displayName = displayName;
    try {
      Object.defineProperty(ProxyComponent, 'name', {
        value: displayName
      });
    } catch (err) {}

    // Set up the same prototype for inherited statics
    ProxyComponent.__proto__ = NextComponent.__proto__;

    // Copy over static methods and properties added at runtime
    if (PreviousComponent) {
      Object.getOwnPropertyNames(PreviousComponent).forEach(key => {
        if (RESERVED_STATICS.indexOf(key) > -1) {
          return;
        }

        const prevDescriptor = Object.getOwnPropertyDescriptor(PreviousComponent, key);
        const savedDescriptor = savedDescriptors[key];

        if (!isEqualDescriptor(prevDescriptor, savedDescriptor)) {
          Object.defineProperty(NextComponent, key, prevDescriptor);
        }
      });
    }

    // Copy newly defined static methods and properties
    Object.getOwnPropertyNames(NextComponent).forEach(key => {
      if (RESERVED_STATICS.indexOf(key) > -1) {
        return;
      }

      const prevDescriptor = PreviousComponent && Object.getOwnPropertyDescriptor(PreviousComponent, key);
      const savedDescriptor = savedDescriptors[key];

      // Skip redefined descriptors
      if (prevDescriptor && savedDescriptor && !isEqualDescriptor(savedDescriptor, prevDescriptor)) {
        Object.defineProperty(NextComponent, key, prevDescriptor);
        Object.defineProperty(ProxyComponent, key, prevDescriptor);
        return;
      }

      if (prevDescriptor && !savedDescriptor) {
        Object.defineProperty(ProxyComponent, key, prevDescriptor);
        return;
      }

      const nextDescriptor = _extends({}, Object.getOwnPropertyDescriptor(NextComponent, key), {
        configurable: true
      });
      savedDescriptors[key] = nextDescriptor;
      Object.defineProperty(ProxyComponent, key, nextDescriptor);
    });

    // Remove static methods and properties that are no longer defined
    Object.getOwnPropertyNames(ProxyComponent).forEach(key => {
      if (RESERVED_STATICS.indexOf(key) > -1) {
        return;
      }
      // Skip statics that exist on the next class
      if (NextComponent.hasOwnProperty(key)) {
        return;
      }
      // Skip non-configurable statics
      const proxyDescriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);
      if (proxyDescriptor && !proxyDescriptor.configurable) {
        return;
      }

      const prevDescriptor = PreviousComponent && Object.getOwnPropertyDescriptor(PreviousComponent, key);
      const savedDescriptor = savedDescriptors[key];

      // Skip redefined descriptors
      if (prevDescriptor && savedDescriptor && !isEqualDescriptor(savedDescriptor, prevDescriptor)) {
        return;
      }

      delete ProxyComponent[key];
    });

    if (prototypeProxy) {
      // Update the prototype proxy with new methods
      const mountedInstances = prototypeProxy.update(NextComponent.prototype);

      // Set up the constructor property so accessing the statics work
      ProxyComponent.prototype.constructor = NextComponent;

      // We might have added new methods that need to be auto-bound
      mountedInstances.forEach(_bindAutoBindMethods2.default);
      mountedInstances.forEach(_deleteUnknownAutoBindMethods2.default);

      return mountedInstances;
    }
  }

  function get() {
    return ProxyComponent;
  }

  function getCurrent() {
    return CurrentComponent;
  }

  update(InitialComponent);

  const proxy = { get, update };
  addProxy(ProxyComponent, proxy);

  Object.defineProperty(proxy, '__getCurrent', {
    configurable: false,
    writable: false,
    enumerable: false,
    value: getCurrent
  });

  return proxy;
}

function createFallback(Component) {
  let CurrentComponent = Component;

  return {
    get() {
      return CurrentComponent;
    },
    update(NextComponent) {
      CurrentComponent = NextComponent;
    }
  };
}

function createClassProxy(Component) {
  return Component.__proto__ && (0, _supportsProtoAssignment2.default)() ? proxyClass(Component) : createFallback(Component);
}
//# sourceMappingURL=proxyClass.js.map
});
__sbPundle.registerModule("../node_modules/lodash/lodash.js", function(__filename, __dirname, require, module, exports) {
(function(process){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function () {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C', '\xe7': 'c',
    '\xd0': 'D', '\xf0': 'd',
    '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N', '\xf1': 'n',
    '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J', '\u0135': 'j',
    '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't', '\u0165': 't', '\u0167': 't',
    '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W', '\u0175': 'w',
    '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function (value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? baseSum(array, iteratee) / length : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function (value, index, collection) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : result + current;
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function (key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function (key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = function () {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? 'Symbol(src)_1.' + uid : '';
    }();

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = function () {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }();

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap();

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = function () {
      function object() {}
      return function (proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = undefined;
        return result;
      };
    }();

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {}
    // No operation performed.


    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : start - 1,
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || !isRight && arrLength == length && takeCount == length) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer: while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash(),
        'map': new (Map || ListCache)(),
        'string': new Hash()
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
        // Safari 9 has enumerable `arguments.length` in strict mode.
        key == 'length' ||
        // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == 'offset' || key == 'parent') ||
        // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
        // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function (value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function (subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function (object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if (value === undefined && !(key in object) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function () {
        func.apply(undefined, args);
      }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function (value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end === undefined || end > length ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function (value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function (key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer: while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function (value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function (object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function (object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function (srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack());
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function (value, key, collection) {
        var criteria = arrayMap(iteratees, function (iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function (object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function (value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function (object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function (func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function (func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function (value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = low + high >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? computed <= value : computed < value;
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

      return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function (result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function (id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor());
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function (collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function (object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function (collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function (object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function (string) {
        string = toString(string);

        var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

        var chr = strSymbols ? strSymbols[0] : string.charAt(0);

        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function (string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function () {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0:
            return new Ctor();
          case 1:
            return new Ctor(args[0]);
          case 2:
            return new Ctor(args[0], args[1]);
          case 3:
            return new Ctor(args[0], args[1], args[2]);
          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);
          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        }
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function (collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function (key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function (funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function () {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function (object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function (value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function (iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function (args) {
          var thisArg = this;
          return arrayFunc(iteratees, function (iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = this && this !== root && this instanceof wrapper ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function (start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function (value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function (number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function (object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function (othValue, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == other + '';

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function (func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name + '',
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function (symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function (value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':
            start += size;break;
          case 'dropRight':
            end -= size;break;
          case 'take':
            end = nativeMin(end, start + size);break;
          case 'takeRight':
            start = nativeMax(start, end - size);break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag:case float64Tag:
        case int8Tag:case int16Tag:case int32Tag:
        case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function (object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function (key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? func.length - 1 : start, 0);
      return function () {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function (func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = reference + '';
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function () {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function (string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function (match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return func + '';
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function (pair) {
        var value = '_.' + pair[0];
        if (bitmask & pair[1] && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__ = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, index += size);
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function (array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function (array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return array && array.length ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function (arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function (arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function (arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return array && array.length ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return array && array.length && values && values.length ? basePullAll(array, values) : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function (array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function (index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      } else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return array && array.length ? baseSortedUniq(array) : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function (arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return array && array.length ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return array && array.length ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function (group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function (index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function (group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, values) : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function (arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function (arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function (paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function (object) {
        return baseAt(object, paths);
      };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function (array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function (collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function (result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function (result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function () {
      return [[], []];
    });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function (collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function () {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = func && n == null ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function (func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function (object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function (func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function (func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function () {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function () {
        var args = arguments;
        switch (args.length) {
          case 0:
            return !predicate.call(this);
          case 1:
            return !predicate.call(this, args[0]);
          case 2:
            return !predicate.call(this, args[0], args[1]);
          case 3:
            return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function (func, transforms) {
      transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function (args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function (func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function (args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function (value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function () {
      return arguments;
    }()) ? baseIsArguments : function (value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function (value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? remainder ? result - remainder : result : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function (object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function (object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function (args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function (args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function (result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function (result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function (object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function (object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function (path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function (object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function (prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function (value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor() : [];
        } else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        } else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        } else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      } else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function (result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined ? length : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function (result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function (result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';

      string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';

      var result = attempt(function () {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += result.length - end;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while (match = separator.exec(substring)) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function (func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function (object, methodNames) {
      arrayEach(methodNames, function (key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function (pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function (args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function () {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return value == null || value !== value ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function (path, args) {
      return function (object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function (object, args) {
      return function (path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function (methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function () {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {}
    // No operation performed.


    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function (args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function (path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function (augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function (dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function (multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function (minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return array && array.length ? baseSum(array, identity) : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, function () {
      var source = {};
      baseForOwn(lodash, function (func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }(), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function (methodName, index) {
      LazyWrapper.prototype[methodName] = function (n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function (n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function (iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function (methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function () {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function (methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function () {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function () {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function (predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function (predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function (value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function (predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function (start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function (predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function () {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function () {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function (value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return isTaker && chainAll ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function () {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function (value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '',
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  };

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = _)._ = _;
      // Export for CommonJS support.
      freeExports._ = _;
    } else {
      // Export to the global object.
      root._ = _;
    }
}).call(this);
})(require(944))
});
__sbPundle.registerModule("../node_modules/@mcro/hmr-view/lib/proxyProto.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPrototypeProxy;

var _lodash = require('426');

function createPrototypeProxy() {
  let proxy = {};
  let current = null;
  let mountedInstances = [];

  /**
   * Creates a proxied toString() method pointing to the current version's toString().
   */
  function proxyToString(name) {
    // Wrap to always call the current version
    return function toString() {
      if (typeof current[name] === 'function') {
        return current[name].toString();
      } else {
        return '<method was deleted>';
      }
    };
  }

  /**
   * Creates a proxied method that calls the current version, whenever available.
   */
  function proxyMethod(name) {
    // Wrap to always call the current version
    const proxiedMethod = function () {
      if (typeof current[name] === 'function') {
        return current[name].apply(this, arguments);
      }
    };

    // Copy properties of the original function, if any
    (0, _lodash.assign)(proxiedMethod, current[name]);
    proxiedMethod.toString = proxyToString(name);

    return proxiedMethod;
  }

  /**
   * Augments the original componentDidMount with instance tracking.
   */
  function proxiedComponentDidMount() {
    mountedInstances.push(this);
    if (typeof current.componentDidMount === 'function') {
      return current.componentDidMount.apply(this, arguments);
    }
  }
  proxiedComponentDidMount.toString = proxyToString('componentDidMount');

  /**
   * Augments the original componentWillUnmount with instance tracking.
   */
  function proxiedComponentWillUnmount() {
    const index = mountedInstances.indexOf(this);
    // Unless we're in a weird environment without componentDidMount
    if (index !== -1) {
      mountedInstances.splice(index, 1);
    }
    if (typeof current.componentWillUnmount === 'function') {
      return current.componentWillUnmount.apply(this, arguments);
    }
  }
  proxiedComponentWillUnmount.toString = proxyToString('componentWillUnmount');

  /**
   * Defines a property on the proxy.
   */
  function defineProxyProperty(name, descriptor) {
    Object.defineProperty(proxy, name, descriptor);
  }

  /**
   * Defines a property, attempting to keep the original descriptor configuration.
   */
  function defineProxyPropertyWithValue(name, value) {
    const { enumerable = false, writable = true } = Object.getOwnPropertyDescriptor(current, name) || {};

    defineProxyProperty(name, {
      configurable: true,
      enumerable,
      writable,
      value
    });
  }

  /**
   * Creates an auto-bind map mimicking the original map, but directed at proxy.
   */
  function createAutoBindMap() {
    if (!current.__reactAutoBindMap) {
      return;
    }

    let __reactAutoBindMap = {};
    for (let name in current.__reactAutoBindMap) {
      if (typeof proxy[name] === 'function' && current.__reactAutoBindMap.hasOwnProperty(name)) {
        __reactAutoBindMap[name] = proxy[name];
      }
    }

    return __reactAutoBindMap;
  }

  /**
   * Creates an auto-bind map mimicking the original map, but directed at proxy.
   */
  function createAutoBindPairs() {
    let __reactAutoBindPairs = [];

    for (let i = 0; i < current.__reactAutoBindPairs.length; i += 2) {
      const name = current.__reactAutoBindPairs[i];
      const method = proxy[name];

      if (typeof method === 'function') {
        __reactAutoBindPairs.push(name, method);
      }
    }

    return __reactAutoBindPairs;
  }

  /**
   * Applies the updated prototype.
   */
  function update(next) {
    // Save current source of truth
    current = next;

    // Find changed property names
    const currentNames = Object.getOwnPropertyNames(current);
    const previousName = Object.getOwnPropertyNames(proxy);
    const removedNames = (0, _lodash.difference)(previousName, currentNames);

    // Remove properties and methods that are no longer there
    removedNames.forEach(name => {
      delete proxy[name];
    });

    // Copy every descriptor
    currentNames.forEach(name => {
      const descriptor = Object.getOwnPropertyDescriptor(current, name);
      if (typeof descriptor.value === 'function') {
        // Functions require additional wrapping so they can be bound later
        defineProxyPropertyWithValue(name, proxyMethod(name));
      } else {
        // Other values can be copied directly
        defineProxyProperty(name, descriptor);
      }
    });

    // Track mounting and unmounting
    defineProxyPropertyWithValue('componentDidMount', proxiedComponentDidMount);
    defineProxyPropertyWithValue('componentWillUnmount', proxiedComponentWillUnmount);

    if (current.hasOwnProperty('__reactAutoBindMap')) {
      defineProxyPropertyWithValue('__reactAutoBindMap', createAutoBindMap());
    }

    if (current.hasOwnProperty('__reactAutoBindPairs')) {
      defineProxyPropertyWithValue('__reactAutoBindPairs', createAutoBindPairs());
    }

    // Set up the prototype chain
    proxy.__proto__ = next;

    return mountedInstances;
  }

  /**
   * Returns the up-to-date proxy prototype.
   */
  function get() {
    return proxy;
  }

  return {
    update,
    get
  };
}
//# sourceMappingURL=proxyProto.js.map
});
__sbPundle.registerModule("../node_modules/@mcro/hmr-view/lib/bindAutoBindMethods.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bindAutoBindMethods;
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of React source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Original:
 * https://github.com/facebook/react/blob/6508b1ad273a6f371e8d90ae676e5390199461b4/src/isomorphic/classic/class/ReactClass.js#L650-L713
 */

function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);

  boundMethod.__reactBoundContext = component;
  boundMethod.__reactBoundMethod = method;
  boundMethod.__reactBoundArguments = null;

  var componentName = component.constructor.displayName,
      _bind = boundMethod.bind;

  boundMethod.bind = function (newThis) {
    var args = Array.prototype.slice.call(arguments, 1);
    if (newThis !== component && newThis !== null) {
      console.warn('bind(): React component methods may only be bound to the ' + 'component instance. See ' + componentName);
    } else if (!args.length) {
      console.warn('bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See ' + componentName);
      return boundMethod;
    }

    var reboundMethod = _bind.apply(boundMethod, arguments);
    reboundMethod.__reactBoundContext = component;
    reboundMethod.__reactBoundMethod = method;
    reboundMethod.__reactBoundArguments = args;

    return reboundMethod;
  };

  return boundMethod;
}

function bindAutoBindMethodsFromMap(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (!component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      return;
    }

    // Tweak: skip methods that are already bound.
    // This is to preserve method reference in case it is used
    // as a subscription handler that needs to be detached later.
    if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
      continue;
    }

    var method = component.__reactAutoBindMap[autoBindKey];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

function bindAutoBindMethods(component) {
  if (component.__reactAutoBindPairs) {
    bindAutoBindMethodsFromArray(component);
  } else if (component.__reactAutoBindMap) {
    bindAutoBindMethodsFromMap(component);
  }
}

function bindAutoBindMethodsFromArray(component) {
  var pairs = component.__reactAutoBindPairs;

  if (!pairs) {
    return;
  }

  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];

    if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
      continue;
    }

    var method = pairs[i + 1];

    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}
//# sourceMappingURL=bindAutoBindMethods.js.map
});
__sbPundle.registerModule("../node_modules/@mcro/hmr-view/lib/deleteUnknownAutoBindMethods.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deleteUnknownAutoBindMethods;
function shouldDeleteClassicInstanceMethod(component, name) {
  if (component.__reactAutoBindMap && component.__reactAutoBindMap.hasOwnProperty(name)) {
    // It's a known autobound function, keep it
    return false;
  }

  if (component.__reactAutoBindPairs && component.__reactAutoBindPairs.indexOf(name) >= 0) {
    // It's a known autobound function, keep it
    return false;
  }

  if (component[name].__reactBoundArguments !== null) {
    // It's a function bound to specific args, keep it
    return false;
  }

  // It's a cached bound method for a function
  // that was deleted by user, so we delete it from component.
  return true;
}

function shouldDeleteModernInstanceMethod(component, name) {
  const { prototype } = component.constructor;
  const prototypeDescriptor = Object.getOwnPropertyDescriptor(prototype, name);

  if (!prototypeDescriptor || !prototypeDescriptor.get) {
    // This is definitely not an autobinding getter
    return false;
  }

  if (prototypeDescriptor.get() && prototypeDescriptor.get().length !== component[name].length) {
    // The length doesn't match, bail out
    return false;
  }

  // This seems like a method bound using an autobinding getter on the prototype
  // Hopefully we won't run into too many false positives.
  return true;
}

function shouldDeleteInstanceMethod(component, name) {
  const descriptor = Object.getOwnPropertyDescriptor(component, name);
  if (typeof descriptor.value !== 'function') {
    // Not a function, or something fancy: bail out
    return;
  }

  if (component.__reactAutoBindMap || component.__reactAutoBindPairs) {
    // Classic
    return shouldDeleteClassicInstanceMethod(component, name);
  } else {
    // Modern
    return shouldDeleteModernInstanceMethod(component, name);
  }
}

/**
 * Deletes autobound methods from the instance.
 *
 * For classic React classes, we only delete the methods that no longer exist in map.
 * This means the user actually deleted them in code.
 *
 * For modern classes, we delete methods that exist on prototype with the same length,
 * and which have getters on prototype, but are normal values on the instance.
 * This is usually an indication that an autobinding decorator is being used,
 * and the getter will re-generate the memoized handler on next access.
 */
function deleteUnknownAutoBindMethods(component) {
  const names = Object.getOwnPropertyNames(component);

  names.forEach(name => {
    if (shouldDeleteInstanceMethod(component, name)) {
      delete component[name];
    }
  });
}
//# sourceMappingURL=deleteUnknownAutoBindMethods.js.map
});
__sbPundle.registerModule("../node_modules/@mcro/hmr-view/lib/supportsProtoAssignment.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = supportsProtoAssignment;
const x = {};
const y = { supports: true };
try {
  x.__proto__ = y;
} catch (err) {}

function supportsProtoAssignment() {
  return x.supports || false;
}
//# sourceMappingURL=supportsProtoAssignment.js.map
});
__sbPundle.registerModule("../node_modules/react-deep-force-update/lib/index.js", function(__filename, __dirname, require, module, exports) {
// Constant to identify a React Component. It's been extracted from ReactTypeOfWork
// (https://github.com/facebook/react/blob/master/src/shared/ReactTypeOfWork.js#L20)
'use strict';

exports.__esModule = true;
exports['default'] = deepForceUpdate;
var ReactClassComponent = 2;

function traverseRenderedChildren(internalInstance, callback, argument) {
  callback(internalInstance, argument);

  if (internalInstance._renderedComponent) {
    traverseRenderedChildren(internalInstance._renderedComponent, callback, argument);
  } else {
    for (var key in internalInstance._renderedChildren) {
      if (internalInstance._renderedChildren.hasOwnProperty(key)) {
        traverseRenderedChildren(internalInstance._renderedChildren[key], callback, argument);
      }
    }
  }
}

function setPendingForceUpdate(internalInstance) {
  if (internalInstance._pendingForceUpdate === false) {
    internalInstance._pendingForceUpdate = true;
  }
}

function forceUpdateIfPending(internalInstance) {
  if (internalInstance._pendingForceUpdate === true) {
    var publicInstance = internalInstance._instance;
    var updater = publicInstance.updater;

    if (typeof publicInstance.forceUpdate === 'function') {
      publicInstance.forceUpdate();
    } else if (updater && typeof updater.enqueueForceUpdate === 'function') {
      updater.enqueueForceUpdate(publicInstance);
    }
  }
}

function deepForceUpdateStack(instance) {
  var internalInstance = instance._reactInternalInstance;
  traverseRenderedChildren(internalInstance, setPendingForceUpdate);
  traverseRenderedChildren(internalInstance, forceUpdateIfPending);
}

function deepForceUpdate(instance) {
  var root = instance._reactInternalFiber || instance._reactInternalInstance;
  if (typeof root.tag !== 'number') {
    // Traverse stack-based React tree.
    return deepForceUpdateStack(instance);
  }

  var node = root;
  while (true) {
    if (node.tag === ReactClassComponent) {
      var publicInstance = node.stateNode;
      var updater = publicInstance.updater;

      if (typeof publicInstance.forceUpdate === 'function') {
        publicInstance.forceUpdate();
      } else if (updater && typeof updater.enqueueForceUpdate === 'function') {
        updater.enqueueForceUpdate(publicInstance);
      }
    }
    if (node.child) {
      node.child['return'] = node;
      node = node.child;
      continue;
    }
    if (node === root) {
      return undefined;
    }
    while (!node.sibling) {
      if (!node['return'] || node['return'] === root) {
        return undefined;
      }
      node = node['return'];
    }
    node.sibling['return'] = node['return'];
    node = node.sibling;
  }
}

module.exports = exports['default'];
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = exports.Constants = exports.store = exports.view = undefined;

var _view = require('2780');

var _view2 = _interopRequireDefault(_view);

var _store = require('2781');

var _store2 = _interopRequireDefault(_store);

var _helpers = require('2782');

var Helpers = _interopRequireWildcard(_helpers);

var _constants = require('2783');

var Constants_ = _interopRequireWildcard(_constants);

var _react = require('2784');

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const view = exports.view = _view2.default;

const store = exports.store = _store2.default;

for (const name of Object.keys(Helpers)) {
  exports[name] = Helpers[name];
}

// constants
const Constants = exports.Constants = Constants_;

const { Component } = React;
exports.Component = Component;
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/view.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('2801');

var React = _interopRequireWildcard(_react);

var _decor = require('2802');

var _decor2 = _interopRequireDefault(_decor);

var _propTypes = require('2803');

var _extendsReact = require('2804');

var _extendsReact2 = _interopRequireDefault(_extendsReact);

var _observer = require('2805');

var _observer2 = _interopRequireDefault(_observer);

var _automagical = require('2806');

var _automagical2 = _interopRequireDefault(_automagical);

var _helpers = require('2807');

var _helpers2 = _interopRequireDefault(_helpers);

var _subscribable = require('2808');

var _subscribable2 = _interopRequireDefault(_subscribable);

var _emitsMount = require('2809');

var _emitsMount2 = _interopRequireDefault(_emitsMount);

var _reactRenderArgs = require('2810');

var _reactRenderArgs2 = _interopRequireDefault(_reactRenderArgs);

var _addContext = require('2811');

var _addContext2 = _interopRequireDefault(_addContext);

var _attach = require('2812');

var _attach2 = _interopRequireDefault(_attach);

var _storeProvidable = require('2813');

var _storeProvidable2 = _interopRequireDefault(_storeProvidable);

var _store = require('2814');

var _gloss = require('2815');

var _helpers3 = require('2816');

var Helpers = _interopRequireWildcard(_helpers3);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

// import type { ReactRenderArgs } from '@mcro/decor/src/plugins/react/reactRenderArgs'

// import type { Subscribable } from '@mcro/decor/src/plugins/react/subscribable'

// import type { ExtendsReact } from '@mcro/decor/src/plugins/react/extendsReact'
function createViewDecorator() {
  const uiContext = [_addContext2.default, {
    uiActiveThemeName: _propTypes.string,
    uiActiveTheme: _propTypes.object,
    uiThemes: _propTypes.object,
    ui: _propTypes.object
  }];

  const glossPlugin = () => ({ decorator: _gloss.decorator });

  // applied top to bottom
  const decorations = ({ mobx, ui, magic } = {}) => [_extendsReact2.default, _subscribable2.default, _helpers2.default, ui && uiContext, _reactRenderArgs2.default, mobx && _observer2.default,
  // gloss after mobx
  glossPlugin, magic && _automagical2.default, [_storeProvidable2.default, _store.storeOptions], !ui && _emitsMount2.default];

  const base = (0, _decor2.default)(decorations({ mobx: true, magic: false, ui: true }));

  const view = item => {
    // @view({ ...stores }) shorthand
    if (typeof item === 'object') {
      const res = base({ stores: item });
      return res;
    }
    const res = base(item);
    return res;
  };

  // pass on emitter
  view.on = base.on;
  view.off = base.off;
  view.emit = base.emit;

  // other decorators
  view.ui = (0, _decor2.default)(decorations({ ui: true }));
  view.gloss = (0, _decor2.default)([uiContext, glossPlugin]);
  view.basics = (0, _decor2.default)([_extendsReact2.default, _reactRenderArgs2.default, _observer2.default, glossPlugin]);
  // view.magic = decor({ mobx: true, ui: true, magic: true })

  const providable = (0, _decor2.default)([[_storeProvidable2.default, _store.storeOptions]]);
  view.provide = stores => providable({ stores, context: true });
  view.provide.on = providable.on;

  view.attach = (...names) => (0, _decor2.default)([[_attach2.default, { names }]]);
  return view;
}
// import type { Glossy } from './gloss'

// import type { Helpers } from '@mcro/decor/src/plugins/mobx/helpers'
exports.default = createViewDecorator();
//# sourceMappingURL=view.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompositeDisposable = exports.Emitter = undefined;

var _sbEventKit = require('2847');

Object.defineProperty(exports, 'Emitter', {
  enumerable: true,
  get: function () {
    return _sbEventKit.Emitter;
  }
});
Object.defineProperty(exports, 'CompositeDisposable', {
  enumerable: true,
  get: function () {
    return _sbEventKit.CompositeDisposable;
  }
});
exports.default = decor;

var _reactMixin = require('2848');

var _reactMixin2 = _interopRequireDefault(_reactMixin);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const empty = (...args) => void 0;

function decor(plugins) {
  const allPlugins = [];

  // Helpers
  const emitter = new _sbEventKit.Emitter();
  const isClass = x => x && !!x.prototype;

  // process plugins
  for (const curPlugin of plugins.filter(x => !!x)) {
    let getPlugin = curPlugin;
    let options = {};

    // array-style config
    if (Array.isArray(curPlugin)) {
      getPlugin = curPlugin[0];
      options = curPlugin[1] || {};
    }

    if (typeof getPlugin !== 'function') {
      throw `Plugin must be a function, got ${typeof getPlugin}`;
    }

    // uid per plugin
    const uid = Math.random();
    const alreadyDecorated = Klass => {
      const result = Klass[uid];
      Klass[uid] = true;
      return result;
    };
    const Helpers = {
      emitter,
      alreadyDecorated
    };

    let plugin = getPlugin(options, Helpers);

    if (!plugin.decorator && !plugin.mixin) {
      throw `Bad plugin, needs decorator or mixin ${plugin.name}`;
    }

    // apply helpers
    if (plugin.once) {
      const ogPlugin = plugin.decorator || empty;
      plugin.decorator = (Klass, ...args) => alreadyDecorated(Klass) ? Klass : ogPlugin(Klass, ...args);
    }
    if (plugin.onlyClass) {
      const ogPlugin = plugin.decorator || empty;
      plugin.decorator = (Klass, ...args) => !isClass(Klass) ? Klass : ogPlugin(Klass, ...args);
    }

    allPlugins.push(plugin);
  }

  function decorDecorator(KlassOrOpts, opts) {
    // optional: decorator-side props
    if (typeof KlassOrOpts === 'object') {
      return NextKlass => decorDecorator(NextKlass, KlassOrOpts);
    }

    let decoratedClass = KlassOrOpts;

    if (!decoratedClass) {
      throw new Error('No class/function passed to decorator');
    }

    for (const plugin of allPlugins) {
      if (plugin.mixin && decoratedClass.prototype) {
        (0, _reactMixin2.default)(decoratedClass.prototype, plugin.mixin);
      }
      if (plugin.decorator) {
        decoratedClass = plugin.decorator(decoratedClass, opts) || decoratedClass;
      }
    }

    return decoratedClass;
  }

  // to listen to plugin events
  decorDecorator.off = emitter.off.bind(emitter);
  decorDecorator.on = emitter.on.bind(emitter);
  decorDecorator.emit = emitter.emit.bind(emitter);

  return decorDecorator;
}
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/main.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompositeDisposable = exports.Disposable = exports.Emitter = undefined;

var _emitter = require('1002');

var _emitter2 = _interopRequireDefault(_emitter);

var _disposable = require('1003');

var _disposable2 = _interopRequireDefault(_disposable);

var _compositeDisposable = require('1004');

var _compositeDisposable2 = _interopRequireDefault(_compositeDisposable);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.Emitter = _emitter2.default;
exports.Disposable = _disposable2.default;
exports.CompositeDisposable = _compositeDisposable2.default;
exports.default = {
  Emitter: _emitter2.default,
  Disposable: _disposable2.default,
  CompositeDisposable: _compositeDisposable2.default
};
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/emitter.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _disposable = require('1078');

var _disposable2 = _interopRequireDefault(_disposable);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Emitter = function () {
  function Emitter() {
    _classCallCheck(this, Emitter);

    this.disposed = false;
    this.handlers = {};
  }

  _createClass(Emitter, [{
    key: 'on',
    value: function on(eventName, handler) {
      var _this = this;

      if (this.disposed) {
        throw new Error('Emitter has been disposed');
      }
      if (typeof handler !== 'function') {
        throw new Error('Event handler must be a function');
      }
      var callbacks = this.handlers[eventName];
      if (typeof callbacks === 'undefined') {
        callbacks = this.handlers[eventName] = [handler];
      } else {
        callbacks.push(handler);
      }
      return new _disposable2.default(function () {
        _this.off(eventName, handler);
      });
    }
  }, {
    key: 'off',
    value: function off(eventName, handler) {
      if (this.disposed) {
        return;
      }
      if (!this.handlers[eventName]) {
        return;
      }
      var index = this.handlers[eventName].indexOf(handler);
      if (index !== -1) {
        this.handlers[eventName].splice(index, 1);
      }
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.handlers = {};
    }
  }, {
    key: 'emit',
    value: function emit(eventName) {
      if (this.disposed) {
        return Promise.resolve([]);
      }
      if (!this.handlers[eventName]) {
        return Promise.resolve([]);
      }

      var promises = [];
      var callbacks = this.handlers[eventName];

      for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }

      for (var i = 0, length = callbacks.length; i < length; ++i) {
        promises.push(callbacks[i].apply(null, params));
      }
      return Promise.all(promises);
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this.disposed = true;
      this.clear();
    }
  }]);

  return Emitter;
}();

exports.default = Emitter;
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/disposable.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _assert = require('1076');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Disposable = function () {
  function Disposable(callback) {
    _classCallCheck(this, Disposable);

    (0, _assert2.default)(typeof callback === 'function', 'callback should be a function');
    this.callback = callback;
  }

  _createClass(Disposable, [{
    key: 'dispose',
    value: function dispose() {
      if (this.callback) {
        this.callback();
        this.callback = null;
      }
    }
  }, {
    key: 'disposed',
    get: function get() {
      return this.callback === null;
    }
  }]);

  return Disposable;
}();

exports.default = Disposable;
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/assert/assert.js", function(__filename, __dirname, require, module, exports) {
(function(i0){var Buffer = i0.Buffer;
'use strict';

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('1090');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = function () {
  return function foo() {}.name === 'foo';
}();
function pToString(obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' + name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || { actual: [], expected: [] };

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length) return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i]) return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function (block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function (block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function (err) {
  if (err) throw err;
};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};
})(require(1089))
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/util/util.js", function(__filename, __dirname, require, module, exports) {
(function(process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s':
        return String(args[i++]);
      case '%d':
        return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function (fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};

var debugs = {};
var debugEnviron;
exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }
  return debugs[set];
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};

  array.forEach(function (val, idx) {
    hash[val] = true;
  });

  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) &&
  // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect &&
  // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('1367');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('1368');

exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
})(require(1366))
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/util/support/isBufferBrowser.js", function(__filename, __dirname, require, module, exports) {
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/inherits/inherits_browser.js", function(__filename, __dirname, require, module, exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/composite-disposable.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _helpers = require('1077');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var CompositeDisposable = function () {
  function CompositeDisposable() {
    _classCallCheck(this, CompositeDisposable);

    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    (0, _helpers.validate)(params);

    this.disposed = false;
    this.disposables = new Set(params);
  }

  _createClass(CompositeDisposable, [{
    key: 'add',
    value: function add() {
      if (this.disposed) {
        return;
      }

      for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        params[_key2] = arguments[_key2];
      }

      (0, _helpers.validate)(params);
      for (var i = 0, length = params.length; i < length; ++i) {
        this.disposables.add(params[i]);
      }
    }
  }, {
    key: 'delete',
    value: function _delete() {
      if (this.disposed) {
        return;
      }

      for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        params[_key3] = arguments[_key3];
      }

      for (var i = 0, length = params.length; i < length; ++i) {
        this.disposables.delete(params[i]);
      }
    }
  }, {
    key: 'clear',
    value: function clear() {
      if (this.disposed) {
        return;
      }
      this.disposables.clear();
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      if (this.disposed) {
        return;
      }
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.disposables[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          if (typeof item.dispose === 'function') {
            item.dispose();
          } else if (typeof item === 'function') {
            item();
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.disposed = true;
      this.disposables.clear();
    }
  }]);

  return CompositeDisposable;
}();

exports.default = CompositeDisposable;
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/helpers.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = validate;
function validate(params) {
  for (var i = 0, length = params.length; i < length; ++i) {
    var param = params[i];
    if (!param || typeof param.dispose !== 'function' && typeof param !== 'function') {
      throw new Error('Invalid disposable provided');
    }
  }
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/react-mixin/index.js", function(__filename, __dirname, require, module, exports) {
var mixin = require('1005');
var assign = require('1006');

var mixinProto = mixin({
  // lifecycle stuff is as you'd expect
  componentDidMount: mixin.MANY,
  componentWillMount: mixin.MANY,
  componentWillReceiveProps: mixin.MANY,
  shouldComponentUpdate: mixin.ONCE,
  componentWillUpdate: mixin.MANY,
  componentDidUpdate: mixin.MANY,
  componentWillUnmount: mixin.MANY,
  getChildContext: mixin.MANY_MERGED
});

function setDefaultProps(reactMixin) {
  var getDefaultProps = reactMixin.getDefaultProps;

  if (getDefaultProps) {
    reactMixin.defaultProps = getDefaultProps();

    delete reactMixin.getDefaultProps;
  }
}

function setInitialState(reactMixin) {
  var getInitialState = reactMixin.getInitialState;
  var componentWillMount = reactMixin.componentWillMount;

  function applyInitialState(instance) {
    var state = instance.state || {};
    assign(state, getInitialState.call(instance));
    instance.setState(state);
  }

  if (getInitialState) {
    if (!componentWillMount) {
      reactMixin.componentWillMount = function () {
        applyInitialState(this);
      };
    } else {
      reactMixin.componentWillMount = function () {
        applyInitialState(this);
        componentWillMount.call(this);
      };
    }

    delete reactMixin.getInitialState;
  }
}

function mixinClass(reactClass, reactMixin) {
  setDefaultProps(reactMixin);
  setInitialState(reactMixin);

  var prototypeMethods = {};
  var staticProps = {};

  Object.keys(reactMixin).forEach(function (key) {
    if (key === 'mixins') {
      return; // Handled below to ensure proper order regardless of property iteration order
    }
    if (key === 'statics') {
      return; // gets special handling
    } else if (typeof reactMixin[key] === 'function') {
      prototypeMethods[key] = reactMixin[key];
    } else {
      staticProps[key] = reactMixin[key];
    }
  });

  mixinProto(reactClass.prototype, prototypeMethods);

  var mergePropTypes = function (left, right, key) {
    if (!left) return right;
    if (!right) return left;

    var result = {};
    Object.keys(left).forEach(function (leftKey) {
      if (!right[leftKey]) {
        result[leftKey] = left[leftKey];
      }
    });

    Object.keys(right).forEach(function (rightKey) {
      if (left[rightKey]) {
        result[rightKey] = function checkBothContextTypes() {
          return right[rightKey].apply(this, arguments) && left[rightKey].apply(this, arguments);
        };
      } else {
        result[rightKey] = right[rightKey];
      }
    });

    return result;
  };

  mixin({
    childContextTypes: mergePropTypes,
    contextTypes: mergePropTypes,
    propTypes: mixin.MANY_MERGED_LOOSE,
    defaultProps: mixin.MANY_MERGED_LOOSE
  })(reactClass, staticProps);

  // statics is a special case because it merges directly onto the class
  if (reactMixin.statics) {
    Object.getOwnPropertyNames(reactMixin.statics).forEach(function (key) {
      var left = reactClass[key];
      var right = reactMixin.statics[key];

      if (left !== undefined && right !== undefined) {
        throw new TypeError('Cannot mixin statics because statics.' + key + ' and Component.' + key + ' are defined.');
      }

      reactClass[key] = left !== undefined ? left : right;
    });
  }

  // If more mixins are defined, they need to run. This emulate's react's behavior.
  // See behavior in code at:
  // https://github.com/facebook/react/blob/41aa3496aa632634f650edbe10d617799922d265/src/isomorphic/classic/class/ReactClass.js#L468
  // Note the .reverse(). In React, a fresh constructor is created, then all mixins are mixed in recursively,
  // then the actual spec is mixed in last.
  //
  // With ES6 classes, the properties are already there, so smart-mixin mixes functions (a, b) -> b()a(), which is
  // the opposite of how React does it. If we reverse this array, we basically do the whole logic in reverse,
  // which makes the result the same. See the test for more.
  // See also:
  // https://github.com/facebook/react/blob/41aa3496aa632634f650edbe10d617799922d265/src/isomorphic/classic/class/ReactClass.js#L853
  if (reactMixin.mixins) {
    reactMixin.mixins.reverse().forEach(mixinClass.bind(null, reactClass));
  }

  return reactClass;
}

module.exports = function () {
  var reactMixin = mixinProto;

  reactMixin.onClass = function (reactClass, mixin) {
    // we mutate the mixin so let's clone it
    mixin = assign({}, mixin);
    return mixinClass(reactClass, mixin);
  };

  reactMixin.decorate = function (mixin) {
    return function (reactClass) {
      return reactMixin.onClass(reactClass, mixin);
    };
  };

  return reactMixin;
}();
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/react-mixin/node_modules/smart-mixin/index.js", function(__filename, __dirname, require, module, exports) {
function objToStr(x) {
  return Object.prototype.toString.call(x);
};

function returner(x) {
  return x;
}

function wrapIfFunction(thing) {
  return typeof thing !== "function" ? thing : function () {
    return thing.apply(this, arguments);
  };
}

function setNonEnumerable(target, key, value) {
  if (key in target) {
    target[key] = value;
  } else {
    Object.defineProperty(target, key, {
      value: value,
      writable: true,
      configurable: true
    });
  }
}

function defaultNonFunctionProperty(left, right, key) {
  if (left !== undefined && right !== undefined) {
    var getTypeName = function (obj) {
      if (obj && obj.constructor && obj.constructor.name) {
        return obj.constructor.name;
      } else {
        return objToStr(obj).slice(8, -1);
      }
    };
    throw new TypeError('Cannot mixin key ' + key + ' because it is provided by multiple sources, ' + 'and the types are ' + getTypeName(left) + ' and ' + getTypeName(right));
  }
  return left === undefined ? right : left;
};

function assertObject(obj, obj2) {
  var type = objToStr(obj);
  if (type !== '[object Object]') {
    var displayType = obj.constructor ? obj.constructor.name : 'Unknown';
    var displayType2 = obj2.constructor ? obj2.constructor.name : 'Unknown';
    throw new Error('cannot merge returned value of type ' + displayType + ' with an ' + displayType2);
  }
};

var mixins = module.exports = function makeMixinFunction(rules, _opts) {
  var opts = _opts || {};

  if (!opts.unknownFunction) {
    opts.unknownFunction = mixins.ONCE;
  }

  if (!opts.nonFunctionProperty) {
    opts.nonFunctionProperty = defaultNonFunctionProperty;
  }

  return function applyMixin(source, mixin) {
    Object.keys(mixin).forEach(function (key) {
      var left = source[key],
          right = mixin[key],
          rule = rules[key];

      // this is just a weird case where the key was defined, but there's no value
      // behave like the key wasn't defined
      if (left === undefined && right === undefined) return;

      // do we have a rule for this key?
      if (rule) {
        // may throw here
        var fn = rule(left, right, key);
        setNonEnumerable(source, key, wrapIfFunction(fn));
        return;
      }

      var leftIsFn = typeof left === "function";
      var rightIsFn = typeof right === "function";

      // check to see if they're some combination of functions or undefined
      // we already know there's no rule, so use the unknown function behavior
      if (leftIsFn && right === undefined || rightIsFn && left === undefined || leftIsFn && rightIsFn) {
        // may throw, the default is ONCE so if both are functions
        // the default is to throw
        setNonEnumerable(source, key, wrapIfFunction(opts.unknownFunction(left, right, key)));
        return;
      }

      // we have no rule for them, one may be a function but one or both aren't
      // our default is MANY_MERGED_LOOSE which will merge objects, concat arrays
      // and throw if there's a type mismatch or both are primitives (how do you merge 3, and "foo"?)
      source[key] = opts.nonFunctionProperty(left, right, key);
    });
  };
};

mixins._mergeObjects = function (obj1, obj2) {
  if (Array.isArray(obj1) && Array.isArray(obj2)) {
    return obj1.concat(obj2);
  }

  assertObject(obj1, obj2);
  assertObject(obj2, obj1);

  var result = {};
  Object.keys(obj1).forEach(function (k) {
    if (Object.prototype.hasOwnProperty.call(obj2, k)) {
      throw new Error('cannot merge returns because both have the ' + JSON.stringify(k) + ' key');
    }
    result[k] = obj1[k];
  });

  Object.keys(obj2).forEach(function (k) {
    // we can skip the conflict check because all conflicts would already be found
    result[k] = obj2[k];
  });
  return result;
};

// define our built-in mixin types
mixins.ONCE = function (left, right, key) {
  if (left && right) {
    throw new TypeError('Cannot mixin ' + key + ' because it has a unique constraint.');
  }
  return left || right;
};

mixins.MANY = function (left, right, key) {
  return function () {
    if (right) right.apply(this, arguments);
    return left ? left.apply(this, arguments) : undefined;
  };
};

mixins.MANY_MERGED_LOOSE = function (left, right, key) {
  if (left && right) {
    return mixins._mergeObjects(left, right);
  }
  return left || right;
};

mixins.MANY_MERGED = function (left, right, key) {
  return function () {
    var res1 = right && right.apply(this, arguments);
    var res2 = left && left.apply(this, arguments);
    if (res1 && res2) {
      return mixins._mergeObjects(res1, res2);
    }
    return res2 || res1;
  };
};

mixins.REDUCE_LEFT = function (_left, _right, key) {
  var left = _left || returner;
  var right = _right || returner;
  return function () {
    return right.call(this, left.apply(this, arguments));
  };
};

mixins.REDUCE_RIGHT = function (_left, _right, key) {
  var left = _left || returner;
  var right = _right || returner;
  return function () {
    return left.call(this, right.apply(this, arguments));
  };
};
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/extendsReact.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('2868');

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

exports.default = () => ({
  name: 'extends-react',
  once: true,
  onlyClass: true,
  decorator: Klass => {
    if (!Klass.prototype.isReactComponent) {
      Object.setPrototypeOf(Klass.prototype, React.Component.prototype);
    }
  }
});
//# sourceMappingURL=extendsReact.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/mobx/observer.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mobxReact = require('2871');

exports.default = () => ({
  name: 'observer',
  once: true,
  onlyClass: true,
  decorator: Klass => {
    return (0, _mobxReact.observer)(Klass);
  }
});
//# sourceMappingURL=observer.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/mobx-react/index.js", function(__filename, __dirname, require, module, exports) {
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('1108'), require('1109'), require('1110')) : typeof define === 'function' && define.amd ? define(['exports', 'mobx', 'react', 'react-dom'], factory) : factory(global.mobxReact = global.mobxReact || {}, global.mobx, global.React, global.ReactDOM);
})(this, function (exports, mobx, react, reactDom) {
  'use strict';

  // These functions can be stubbed out in specific environments

  var unstable_batchedUpdates$1 = undefined;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var EventEmitter = function () {
    function EventEmitter() {
      classCallCheck(this, EventEmitter);
      this.listeners = [];
    }

    createClass(EventEmitter, [{
      key: "on",
      value: function on(cb) {
        var _this = this;

        this.listeners.push(cb);
        return function () {
          var index = _this.listeners.indexOf(cb);
          if (index !== -1) _this.listeners.splice(index, 1);
        };
      }
    }, {
      key: "emit",
      value: function emit(data) {
        this.listeners.forEach(function (fn) {
          return fn(data);
        });
      }
    }]);
    return EventEmitter;
  }();

  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */
  var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };

  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    arguments: true,
    arity: true
  };

  var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

  var index = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
    if (typeof sourceComponent !== 'string') {
      // don't hoist over string (html) components
      var keys = Object.getOwnPropertyNames(sourceComponent);

      /* istanbul ignore else */
      if (isGetOwnPropertySymbolsAvailable) {
        keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
      }

      for (var i = 0; i < keys.length; ++i) {
        if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
          try {
            targetComponent[keys[i]] = sourceComponent[keys[i]];
          } catch (error) {}
        }
      }
    }

    return targetComponent;
  };

  // Copied from React.PropTypes
  function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName, location, propFullName) {
      for (var _len = arguments.length, rest = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
        rest[_key - 6] = arguments[_key];
      }

      return mobx.untracked(function () {
        componentName = componentName || "<<anonymous>>";
        propFullName = propFullName || propName;
        if (props[propName] == null) {
          if (isRequired) {
            var actual = props[propName] === null ? "null" : "undefined";
            return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
          }
          return null;
        } else {
          return validate.apply(undefined, [props, propName, componentName, location, propFullName].concat(rest));
        }
      });
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  // Copied from React.PropTypes
  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === "symbol") {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue["@@toStringTag"] === "Symbol") {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === "function" && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Copied from React.PropTypes
  function getPropType(propValue) {
    var propType = typeof propValue === "undefined" ? "undefined" : _typeof(propValue);
    if (Array.isArray(propValue)) {
      return "array";
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return "object";
    }
    if (isSymbol(propType, propValue)) {
      return "symbol";
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // Copied from React.PropTypes
  function getPreciseType(propValue) {
    var propType = getPropType(propValue);
    if (propType === "object") {
      if (propValue instanceof Date) {
        return "date";
      } else if (propValue instanceof RegExp) {
        return "regexp";
      }
    }
    return propType;
  }

  function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
    return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
      return mobx.untracked(function () {
        if (allowNativeType) {
          if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
        }
        var mobxChecker = void 0;
        switch (mobxType) {
          case "Array":
            mobxChecker = mobx.isObservableArray;
            break;
          case "Object":
            mobxChecker = mobx.isObservableObject;
            break;
          case "Map":
            mobxChecker = mobx.isObservableMap;
            break;
          default:
            throw new Error("Unexpected mobxType: " + mobxType);
        }
        var propValue = props[propName];
        if (!mobxChecker(propValue)) {
          var preciseType = getPreciseType(propValue);
          var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
          return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
        }
        return null;
      });
    });
  }

  function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
    return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
        rest[_key2 - 5] = arguments[_key2];
      }

      return mobx.untracked(function () {
        if (typeof typeChecker !== "function") {
          return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
        }
        var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName);
        if (error instanceof Error) return error;
        var propValue = props[propName];
        for (var i = 0; i < propValue.length; i++) {
          error = typeChecker.apply(undefined, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
          if (error instanceof Error) return error;
        }
        return null;
      });
    });
  }

  var observableArray = createObservableTypeCheckerCreator(false, "Array");
  var observableArrayOf = createObservableArrayOfTypeChecker.bind(null, false);
  var observableMap = createObservableTypeCheckerCreator(false, "Map");
  var observableObject = createObservableTypeCheckerCreator(false, "Object");
  var arrayOrObservableArray = createObservableTypeCheckerCreator(true, "Array");
  var arrayOrObservableArrayOf = createObservableArrayOfTypeChecker.bind(null, true);
  var objectOrObservableObject = createObservableTypeCheckerCreator(true, "Object");

  var propTypes = Object.freeze({
    observableArray: observableArray,
    observableArrayOf: observableArrayOf,
    observableMap: observableMap,
    observableObject: observableObject,
    arrayOrObservableArray: arrayOrObservableArray,
    arrayOrObservableArrayOf: arrayOrObservableArrayOf,
    objectOrObservableObject: objectOrObservableObject
  });

  function isStateless(component) {
    // `function() {}` has prototype, but `() => {}` doesn't
    // `() => {}` via Babel has prototype too.
    return !(component.prototype && component.prototype.render);
  }

  var injectorContextTypes = {
    mobxStores: objectOrObservableObject
  };
  Object.seal(injectorContextTypes);

  var proxiedInjectorProps = {
    contextTypes: {
      get: function get$$1() {
        return injectorContextTypes;
      },
      set: function set$$1(_) {
        console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`");
      },
      configurable: true,
      enumerable: false
    },
    isMobxInjector: {
      value: true,
      writable: true,
      configurable: true,
      enumerable: true

      /**
       * Store Injection
       */
    } };function createStoreInjector(grabStoresFn, component, injectNames) {
    var _class, _temp2;

    var displayName = "inject-" + (component.displayName || component.name || component.constructor && component.constructor.name || "Unknown");
    if (injectNames) displayName += "-with-" + injectNames;

    var Injector = (_temp2 = _class = function (_Component) {
      inherits(Injector, _Component);

      function Injector() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, Injector);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Injector.__proto__ || Object.getPrototypeOf(Injector)).call.apply(_ref, [this].concat(args))), _this), _this.storeRef = function (instance) {
          _this.wrappedInstance = instance;
        }, _temp), possibleConstructorReturn(_this, _ret);
      }

      createClass(Injector, [{
        key: "render",
        value: function render() {
          // Optimization: it might be more efficient to apply the mapper function *outside* the render method
          // (if the mapper is a function), that could avoid expensive(?) re-rendering of the injector component
          // See this test: 'using a custom injector is not too reactive' in inject.js
          var newProps = {};
          for (var key in this.props) {
            if (this.props.hasOwnProperty(key)) {
              newProps[key] = this.props[key];
            }
          }var additionalProps = grabStoresFn(this.context.mobxStores || {}, newProps, this.context) || {};
          for (var _key2 in additionalProps) {
            newProps[_key2] = additionalProps[_key2];
          }

          if (!isStateless(component)) {
            newProps.ref = this.storeRef;
          }

          return react.createElement(component, newProps);
        }
      }]);
      return Injector;
    }(react.Component), _class.displayName = displayName, _temp2);

    // Static fields from component should be visible on the generated Injector

    index(Injector, component);

    Injector.wrappedComponent = component;
    Object.defineProperties(Injector, proxiedInjectorProps);

    return Injector;
  }

  function grabStoresByName(storeNames) {
    return function (baseStores, nextProps) {
      storeNames.forEach(function (storeName) {
        if (storeName in nextProps // prefer props over stores
        ) return;
        if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
        nextProps[storeName] = baseStores[storeName];
      });
      return nextProps;
    };
  }

  /**
   * higher order component that injects stores to a child.
   * takes either a varargs list of strings, which are stores read from the context,
   * or a function that manually maps the available stores from the context to props:
   * storesToProps(mobxStores, props, context) => newProps
   */
  function inject() /* fn(stores, nextProps) or ...storeNames */{
    var grabStoresFn = void 0;
    if (typeof arguments[0] === "function") {
      grabStoresFn = arguments[0];
      return function (componentClass) {
        var injected = createStoreInjector(grabStoresFn, componentClass);
        injected.isMobxInjector = false; // supress warning
        // mark the Injector as observer, to make it react to expressions in `grabStoresFn`,
        // see #111
        injected = observer(injected);
        injected.isMobxInjector = true; // restore warning
        return injected;
      };
    } else {
      var storeNames = [];
      for (var i = 0; i < arguments.length; i++) {
        storeNames[i] = arguments[i];
      }grabStoresFn = grabStoresByName(storeNames);
      return function (componentClass) {
        return createStoreInjector(grabStoresFn, componentClass, storeNames.join("-"));
      };
    }
  }

  /**
   * dev tool support
   */
  var isDevtoolsEnabled = false;

  var isUsingStaticRendering = false;

  var warnedAboutObserverInjectDeprecation = false;

  // WeakMap<Node, Object>;
  var componentByNodeRegistery = typeof WeakMap !== "undefined" ? new WeakMap() : undefined;
  var renderReporter = new EventEmitter();

  function findDOMNode$2(component) {
    if (reactDom.findDOMNode) {
      try {
        return reactDom.findDOMNode(component);
      } catch (e) {
        // findDOMNode will throw in react-test-renderer, see:
        // See https://github.com/mobxjs/mobx-react/issues/216
        // Is there a better heuristic?
        return null;
      }
    }
    return null;
  }

  function reportRendering(component) {
    var node = findDOMNode$2(component);
    if (node && componentByNodeRegistery) componentByNodeRegistery.set(node, component);

    renderReporter.emit({
      event: "render",
      renderTime: component.__$mobRenderEnd - component.__$mobRenderStart,
      totalTime: Date.now() - component.__$mobRenderStart,
      component: component,
      node: node
    });
  }

  function trackComponents() {
    if (typeof WeakMap === "undefined") throw new Error("[mobx-react] tracking components is not supported in this browser.");
    if (!isDevtoolsEnabled) isDevtoolsEnabled = true;
  }

  function useStaticRendering(useStaticRendering) {
    isUsingStaticRendering = useStaticRendering;
  }

  /**
   * Errors reporter
   */

  var errorsReporter = new EventEmitter();

  /**
   * Utilities
   */

  function patch(target, funcName) {
    var runMixinFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var base = target[funcName];
    var mixinFunc = reactiveMixin[funcName];
    var f = !base ? mixinFunc : runMixinFirst === true ? function () {
      mixinFunc.apply(this, arguments);
      base.apply(this, arguments);
    } : function () {
      base.apply(this, arguments);
      mixinFunc.apply(this, arguments);
    };

    // MWE: ideally we freeze here to protect against accidental overwrites in component instances, see #195
    // ...but that breaks react-hot-loader, see #231...
    target[funcName] = f;
  }

  function isObjectShallowModified(prev, next) {
    if (null == prev || null == next || (typeof prev === "undefined" ? "undefined" : _typeof(prev)) !== "object" || (typeof next === "undefined" ? "undefined" : _typeof(next)) !== "object") {
      return prev !== next;
    }
    var keys = Object.keys(prev);
    if (keys.length !== Object.keys(next).length) {
      return true;
    }
    var key = void 0;
    for (var i = keys.length - 1; i >= 0, key = keys[i]; i--) {
      if (next[key] !== prev[key]) {
        return true;
      }
    }
    return false;
  }

  /**
   * ReactiveMixin
   */
  var reactiveMixin = {
    componentWillMount: function componentWillMount() {
      var _this = this;

      if (isUsingStaticRendering === true) return;
      // Generate friendly name for debugging
      var initialName = this.displayName || this.name || this.constructor && (this.constructor.displayName || this.constructor.name) || "<component>";
      var rootNodeID = this._reactInternalInstance && this._reactInternalInstance._rootNodeID;

      /**
       * If props are shallowly modified, react will render anyway,
       * so atom.reportChanged() should not result in yet another re-render
       */
      var skipRender = false;
      /**
       * forceUpdate will re-assign this.props. We don't want that to cause a loop,
       * so detect these changes
       */
      var isForcingUpdate = false;

      function makePropertyObservableReference(propName) {
        var valueHolder = this[propName];
        var atom = new mobx.Atom("reactive " + propName);
        Object.defineProperty(this, propName, {
          configurable: true,
          enumerable: true,
          get: function get$$1() {
            atom.reportObserved();
            return valueHolder;
          },
          set: function set$$1(v) {
            if (!isForcingUpdate && isObjectShallowModified(valueHolder, v)) {
              valueHolder = v;
              skipRender = true;
              atom.reportChanged();
              skipRender = false;
            } else {
              valueHolder = v;
            }
          }
        });
      }

      // make this.props an observable reference, see #124
      makePropertyObservableReference.call(this, "props");
      // make state an observable reference
      makePropertyObservableReference.call(this, "state");

      // wire up reactive render
      var baseRender = this.render.bind(this);
      var reaction = null;
      var isRenderingPending = false;

      var initialRender = function initialRender() {
        reaction = new mobx.Reaction(initialName + "#" + rootNodeID + ".render()", function () {
          if (!isRenderingPending) {
            // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)
            // This unidiomatic React usage but React will correctly warn about this so we continue as usual
            // See #85 / Pull #44
            isRenderingPending = true;
            if (typeof _this.componentWillReact === "function") _this.componentWillReact(); // TODO: wrap in action?
            if (_this.__$mobxIsUnmounted !== true) {
              // If we are unmounted at this point, componentWillReact() had a side effect causing the component to unmounted
              // TODO: remove this check? Then react will properly warn about the fact that this should not happen? See #73
              // However, people also claim this migth happen during unit tests..
              var hasError = true;
              try {
                isForcingUpdate = true;
                if (!skipRender) react.Component.prototype.forceUpdate.call(_this);
                hasError = false;
              } finally {
                isForcingUpdate = false;
                if (hasError) reaction.dispose();
              }
            }
          }
        });
        reaction.reactComponent = _this;
        reactiveRender.$mobx = reaction;
        _this.render = reactiveRender;
        return reactiveRender();
      };

      var reactiveRender = function reactiveRender() {
        isRenderingPending = false;
        var exception = undefined;
        var rendering = undefined;
        reaction.track(function () {
          if (isDevtoolsEnabled) {
            _this.__$mobRenderStart = Date.now();
          }
          try {
            rendering = mobx.extras.allowStateChanges(false, baseRender);
          } catch (e) {
            exception = e;
          }
          if (isDevtoolsEnabled) {
            _this.__$mobRenderEnd = Date.now();
          }
        });
        if (exception) {
          errorsReporter.emit(exception);
          throw exception;
        }
        return rendering;
      };

      this.render = initialRender;
    },

    componentWillUnmount: function componentWillUnmount() {
      if (isUsingStaticRendering === true) return;
      this.render.$mobx && this.render.$mobx.dispose();
      this.__$mobxIsUnmounted = true;
      if (isDevtoolsEnabled) {
        var node = findDOMNode$2(this);
        if (node && componentByNodeRegistery) {
          componentByNodeRegistery.delete(node);
        }
        renderReporter.emit({
          event: "destroy",
          component: this,
          node: node
        });
      }
    },

    componentDidMount: function componentDidMount() {
      if (isDevtoolsEnabled) {
        reportRendering(this);
      }
    },

    componentDidUpdate: function componentDidUpdate() {
      if (isDevtoolsEnabled) {
        reportRendering(this);
      }
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
      if (isUsingStaticRendering) {
        console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
      }
      // update on any state changes (as is the default)
      if (this.state !== nextState) {
        return true;
      }
      // update if props are shallowly not equal, inspired by PureRenderMixin
      // we could return just 'false' here, and avoid the `skipRender` checks etc
      // however, it is nicer if lifecycle events are triggered like usually,
      // so we return true here if props are shallowly modified.
      return isObjectShallowModified(this.props, nextProps);
    }

    /**
     * Observer function / decorator
     */
  };function observer(arg1, arg2) {
    if (typeof arg1 === "string") {
      throw new Error("Store names should be provided as array");
    }
    if (Array.isArray(arg1)) {
      // component needs stores
      if (!warnedAboutObserverInjectDeprecation) {
        warnedAboutObserverInjectDeprecation = true;
        console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`');
      }
      if (!arg2) {
        // invoked as decorator
        return function (componentClass) {
          return observer(arg1, componentClass);
        };
      } else {
        return inject.apply(null, arg1)(observer(arg2));
      }
    }
    var componentClass = arg1;

    if (componentClass.isMobxInjector === true) {
      console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
    }

    // Stateless function component:
    // If it is function but doesn't seem to be a react class constructor,
    // wrap it to a react class automatically
    if (typeof componentClass === "function" && (!componentClass.prototype || !componentClass.prototype.render) && !componentClass.isReactClass && !react.Component.isPrototypeOf(componentClass)) {
      var _class, _temp;

      return observer((_temp = _class = function (_Component) {
        inherits(_class, _Component);

        function _class() {
          classCallCheck(this, _class);
          return possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
        }

        createClass(_class, [{
          key: "render",
          value: function render() {
            return componentClass.call(this, this.props, this.context);
          }
        }]);
        return _class;
      }(react.Component), _class.displayName = componentClass.displayName || componentClass.name, _class.contextTypes = componentClass.contextTypes, _class.propTypes = componentClass.propTypes, _class.defaultProps = componentClass.defaultProps, _temp));
    }

    if (!componentClass) {
      throw new Error("Please pass a valid component to 'observer'");
    }

    var target = componentClass.prototype || componentClass;
    mixinLifecycleEvents(target);
    componentClass.isMobXReactObserver = true;
    return componentClass;
  }

  function mixinLifecycleEvents(target) {
    patch(target, "componentWillMount", true);["componentDidMount", "componentWillUnmount", "componentDidUpdate"].forEach(function (funcName) {
      patch(target, funcName);
    });
    if (!target.shouldComponentUpdate) {
      target.shouldComponentUpdate = reactiveMixin.shouldComponentUpdate;
    }
  }

  // TODO: support injection somehow as well?
  var Observer = observer(function (_ref) {
    var children = _ref.children;
    return children();
  });

  Observer.propTypes = {
    children: function children(propValue, key, componentName, location, propFullName) {
      if (typeof propValue[key] !== "function") return new Error("Invalid prop `" + propFullName + "` of type `" + _typeof(propValue[key]) + "` supplied to" + " `" + componentName + "`, expected `function`.");
    }
  };

  var _class;
  var _temp;

  var specialReactKeys = { children: true, key: true, ref: true };

  var Provider = (_temp = _class = function (_Component) {
    inherits(Provider, _Component);

    function Provider() {
      classCallCheck(this, Provider);
      return possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).apply(this, arguments));
    }

    createClass(Provider, [{
      key: "render",
      value: function render() {
        return react.Children.only(this.props.children);
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        var stores = {};
        // inherit stores
        var baseStores = this.context.mobxStores;
        if (baseStores) for (var key in baseStores) {
          stores[key] = baseStores[key];
        }
        // add own stores
        for (var _key in this.props) {
          if (!specialReactKeys[_key] && _key !== "suppressChangedStoreWarning") stores[_key] = this.props[_key];
        }return {
          mobxStores: stores
        };
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        // Maybe this warning is too aggressive?
        if (Object.keys(nextProps).length !== Object.keys(this.props).length) console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children");
        if (!nextProps.suppressChangedStoreWarning) for (var key in nextProps) {
          if (!specialReactKeys[key] && this.props[key] !== nextProps[key]) console.warn("MobX Provider: Provided store '" + key + "' has changed. Please avoid replacing stores as the change might not propagate to all children");
        }
      }
    }]);
    return Provider;
  }(react.Component), _class.contextTypes = {
    mobxStores: objectOrObservableObject
  }, _class.childContextTypes = {
    mobxStores: objectOrObservableObject.isRequired
  }, _temp);

  if (!react.Component) throw new Error('mobx-react requires React to be available');
  if (!mobx.extras) throw new Error('mobx-react requires mobx to be available');

  if (typeof reactDom.unstable_batchedUpdates === "function") mobx.extras.setReactionScheduler(reactDom.unstable_batchedUpdates);else if (typeof unstable_batchedUpdates$1 === "function") mobx.extras.setReactionScheduler(unstable_batchedUpdates$1);

  var onError = function onError(fn) {
    return errorsReporter.on(fn);
  };

  /* DevTool support */
  // See: https://github.com/andykog/mobx-devtools/blob/d8976c24b8cb727ed59f9a0bc905a009df79e221/src/backend/installGlobalHook.js

  if ((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ? 'undefined' : _typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__)) === 'object') {
    var mobx$1 = { spy: mobx.spy, extras: mobx.extras };
    var mobxReact = { renderReporter: renderReporter, componentByNodeRegistery: componentByNodeRegistery, trackComponents: trackComponents };
    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(mobxReact, mobx$1);
  }

  exports.propTypes = propTypes;
  exports.PropTypes = propTypes;
  exports.onError = onError;
  exports.observer = observer;
  exports.Observer = Observer;
  exports.renderReporter = renderReporter;
  exports.componentByNodeRegistery = componentByNodeRegistery;
  exports.trackComponents = trackComponents;
  exports.useStaticRendering = useStaticRendering;
  exports.Provider = Provider;
  exports.inject = inject;

  Object.defineProperty(exports, '__esModule', { value: true });
});
});
__sbPundle.registerModule("../node_modules/mobx/lib/mobx.js", function(__filename, __dirname, require, module, exports) {
/** MobX - (c) Michel Weststrate 2015, 2016 - MIT Licensed */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
  d.__proto__ = b;
} || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
};

function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * Anything that can be used to _store_ state is an Atom in mobx. Atoms have two important jobs
 *
 * 1) detect when they are being _used_ and report this (using reportObserved). This allows mobx to make the connection between running functions and the data they used
 * 2) they should notify mobx whenever they have _changed_. This way mobx can re-run any functions (derivations) that are using this atom.
 */
var BaseAtom = function () {
  /**
   * Create a new atom. For debugging purposes it is recommended to give it a name.
   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
   */
  function BaseAtom(name) {
    if (name === void 0) {
      name = "Atom@" + getNextId();
    }
    this.name = name;
    this.isPendingUnobservation = true; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
    this.observers = [];
    this.observersIndexes = {};
    this.diffValue = 0;
    this.lastAccessedBy = 0;
    this.lowestObserverState = exports.IDerivationState.NOT_TRACKING;
  }
  BaseAtom.prototype.onBecomeUnobserved = function () {
    // noop
  };
  /**
   * Invoke this method to notify mobx that your atom has been used somehow.
   */
  BaseAtom.prototype.reportObserved = function () {
    reportObserved(this);
  };
  /**
   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
   */
  BaseAtom.prototype.reportChanged = function () {
    startBatch();
    propagateChanged(this);
    endBatch();
  };
  BaseAtom.prototype.toString = function () {
    return this.name;
  };
  return BaseAtom;
}();
var Atom = function (_super) {
  __extends(Atom, _super);
  /**
   * Create a new atom. For debugging purposes it is recommended to give it a name.
   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
   */
  function Atom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
    if (name === void 0) {
      name = "Atom@" + getNextId();
    }
    if (onBecomeObservedHandler === void 0) {
      onBecomeObservedHandler = noop;
    }
    if (onBecomeUnobservedHandler === void 0) {
      onBecomeUnobservedHandler = noop;
    }
    var _this = _super.call(this, name) || this;
    _this.name = name;
    _this.onBecomeObservedHandler = onBecomeObservedHandler;
    _this.onBecomeUnobservedHandler = onBecomeUnobservedHandler;
    _this.isPendingUnobservation = false; // for effective unobserving.
    _this.isBeingTracked = false;
    return _this;
  }
  Atom.prototype.reportObserved = function () {
    startBatch();
    _super.prototype.reportObserved.call(this);
    if (!this.isBeingTracked) {
      this.isBeingTracked = true;
      this.onBecomeObservedHandler();
    }
    endBatch();
    return !!globalState.trackingDerivation;
    // return doesn't really give useful info, because it can be as well calling computed which calls atom (no reactions)
    // also it could not trigger when calculating reaction dependent on Atom because Atom's value was cached by computed called by given reaction.
  };
  Atom.prototype.onBecomeUnobserved = function () {
    this.isBeingTracked = false;
    this.onBecomeUnobservedHandler();
  };
  return Atom;
}(BaseAtom);
var isAtom = createInstanceofPredicate("Atom", BaseAtom);

function hasInterceptors(interceptable) {
  return interceptable.interceptors && interceptable.interceptors.length > 0;
}
function registerInterceptor(interceptable, handler) {
  var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
  interceptors.push(handler);
  return once(function () {
    var idx = interceptors.indexOf(handler);
    if (idx !== -1) interceptors.splice(idx, 1);
  });
}
function interceptChange(interceptable, change) {
  var prevU = untrackedStart();
  try {
    var interceptors = interceptable.interceptors;
    if (interceptors) for (var i = 0, l = interceptors.length; i < l; i++) {
      change = interceptors[i](change);
      invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
      if (!change) break;
    }
    return change;
  } finally {
    untrackedEnd(prevU);
  }
}

function hasListeners(listenable) {
  return listenable.changeListeners && listenable.changeListeners.length > 0;
}
function registerListener(listenable, handler) {
  var listeners = listenable.changeListeners || (listenable.changeListeners = []);
  listeners.push(handler);
  return once(function () {
    var idx = listeners.indexOf(handler);
    if (idx !== -1) listeners.splice(idx, 1);
  });
}
function notifyListeners(listenable, change) {
  var prevU = untrackedStart();
  var listeners = listenable.changeListeners;
  if (!listeners) return;
  listeners = listeners.slice();
  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](change);
  }
  untrackedEnd(prevU);
}

function isSpyEnabled() {
  return !!globalState.spyListeners.length;
}
function spyReport(event) {
  if (!globalState.spyListeners.length) return;
  var listeners = globalState.spyListeners;
  for (var i = 0, l = listeners.length; i < l; i++) listeners[i](event);
}
function spyReportStart(event) {
  var change = objectAssign({}, event, { spyReportStart: true });
  spyReport(change);
}
var END_EVENT = { spyReportEnd: true };
function spyReportEnd(change) {
  if (change) spyReport(objectAssign({}, change, END_EVENT));else spyReport(END_EVENT);
}
function spy(listener) {
  globalState.spyListeners.push(listener);
  return once(function () {
    var idx = globalState.spyListeners.indexOf(listener);
    if (idx !== -1) globalState.spyListeners.splice(idx, 1);
  });
}

function iteratorSymbol() {
  return typeof Symbol === "function" && Symbol.iterator || "@@iterator";
}
var IS_ITERATING_MARKER = "__$$iterating";
function arrayAsIterator(array) {
  // returning an array for entries(), values() etc for maps was a mis-interpretation of the specs..,
  // yet it is quite convenient to be able to use the response both as array directly and as iterator
  // it is suboptimal, but alas...
  invariant(array[IS_ITERATING_MARKER] !== true, "Illegal state: cannot recycle array as iterator");
  addHiddenFinalProp(array, IS_ITERATING_MARKER, true);
  var idx = -1;
  addHiddenFinalProp(array, "next", function next() {
    idx++;
    return {
      done: idx >= this.length,
      value: idx < this.length ? this[idx] : undefined
    };
  });
  return array;
}
function declareIterator(prototType, iteratorFactory) {
  addHiddenFinalProp(prototType, iteratorSymbol(), iteratorFactory);
}

var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
// Detects bug in safari 9.1.1 (or iOS 9 safari mobile). See #364
var safariPrototypeSetterInheritanceBug = function () {
  var v = false;
  var p = {};
  Object.defineProperty(p, "0", {
    set: function () {
      v = true;
    }
  });
  Object.create(p)["0"] = 1;
  return v === false;
}();
/**
 * This array buffer contains two lists of properties, so that all arrays
 * can recycle their property definitions, which significantly improves performance of creating
 * properties on the fly.
 */
var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
// Typescript workaround to make sure ObservableArray extends Array
var StubArray = function () {
  function StubArray() {}
  return StubArray;
}();
function inherit(ctor, proto) {
  if (typeof Object["setPrototypeOf"] !== "undefined") {
    Object["setPrototypeOf"](ctor.prototype, proto);
  } else if (typeof ctor.prototype.__proto__ !== "undefined") {
    ctor.prototype.__proto__ = proto;
  } else {
    ctor["prototype"] = proto;
  }
}
inherit(StubArray, Array.prototype);
// Weex freeze Array.prototype
// Make them writeable and configurable in prototype chain
// https://github.com/alibaba/weex/pull/1529
if (Object.isFrozen(Array)) {

  ["constructor", "push", "shift", "concat", "pop", "unshift", "replace", "find", "findIndex", "splice", "reverse", "sort"].forEach(function (key) {
    Object.defineProperty(StubArray.prototype, key, {
      configurable: true,
      writable: true,
      value: Array.prototype[key]
    });
  });
}
var ObservableArrayAdministration = function () {
  function ObservableArrayAdministration(name, enhancer, array, owned) {
    this.array = array;
    this.owned = owned;
    this.values = [];
    this.lastKnownLength = 0;
    this.interceptors = null;
    this.changeListeners = null;
    this.atom = new BaseAtom(name || "ObservableArray@" + getNextId());
    this.enhancer = function (newV, oldV) {
      return enhancer(newV, oldV, name + "[..]");
    };
  }
  ObservableArrayAdministration.prototype.dehanceValue = function (value) {
    if (this.dehancer !== undefined) return this.dehancer(value);
    return value;
  };
  ObservableArrayAdministration.prototype.dehanceValues = function (values) {
    if (this.dehancer !== undefined) return values.map(this.dehancer);
    return values;
  };
  ObservableArrayAdministration.prototype.intercept = function (handler) {
    return registerInterceptor(this, handler);
  };
  ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }
    if (fireImmediately) {
      listener({
        object: this.array,
        type: "splice",
        index: 0,
        added: this.values.slice(),
        addedCount: this.values.length,
        removed: [],
        removedCount: 0
      });
    }
    return registerListener(this, listener);
  };
  ObservableArrayAdministration.prototype.getArrayLength = function () {
    this.atom.reportObserved();
    return this.values.length;
  };
  ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
    if (typeof newLength !== "number" || newLength < 0) throw new Error("[mobx.array] Out of range: " + newLength);
    var currentLength = this.values.length;
    if (newLength === currentLength) return;else if (newLength > currentLength) {
      var newItems = new Array(newLength - currentLength);
      for (var i = 0; i < newLength - currentLength; i++) newItems[i] = undefined; // No Array.fill everywhere...
      this.spliceWithArray(currentLength, 0, newItems);
    } else this.spliceWithArray(newLength, currentLength - newLength);
  };
  // adds / removes the necessary numeric properties to this object
  ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
    if (oldLength !== this.lastKnownLength) throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");
    this.lastKnownLength += delta;
    if (delta > 0 && oldLength + delta + 1 > OBSERVABLE_ARRAY_BUFFER_SIZE) reserveArrayBuffer(oldLength + delta + 1);
  };
  ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
    var _this = this;
    checkIfStateModificationsAreAllowed(this.atom);
    var length = this.values.length;
    if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);
    if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));
    if (newItems === undefined) newItems = [];
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.array,
        type: "splice",
        index: index,
        removedCount: deleteCount,
        added: newItems
      });
      if (!change) return EMPTY_ARRAY;
      deleteCount = change.removedCount;
      newItems = change.added;
    }
    newItems = newItems.map(function (v) {
      return _this.enhancer(v, undefined);
    });
    var lengthDelta = newItems.length - deleteCount;
    this.updateArrayLength(length, lengthDelta); // create or remove new entries
    var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
    if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice(index, newItems, res);
    return this.dehanceValues(res);
  };
  ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
    if (newItems.length < MAX_SPLICE_SIZE) {
      return (_a = this.values).splice.apply(_a, [index, deleteCount].concat(newItems));
    } else {
      var res = this.values.slice(index, index + deleteCount);
      this.values = this.values.slice(0, index).concat(newItems, this.values.slice(index + deleteCount));
      return res;
    }
    var _a;
  };
  ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
    var notifySpy = !this.owned && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      object: this.array,
      type: "update",
      index: index,
      newValue: newValue,
      oldValue: oldValue
    } : null;
    if (notifySpy) spyReportStart(change);
    this.atom.reportChanged();
    if (notify) notifyListeners(this, change);
    if (notifySpy) spyReportEnd();
  };
  ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
    var notifySpy = !this.owned && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      object: this.array,
      type: "splice",
      index: index,
      removed: removed,
      added: added,
      removedCount: removed.length,
      addedCount: added.length
    } : null;
    if (notifySpy) spyReportStart(change);
    this.atom.reportChanged();
    // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
    if (notify) notifyListeners(this, change);
    if (notifySpy) spyReportEnd();
  };
  return ObservableArrayAdministration;
}();
var ObservableArray = function (_super) {
  __extends(ObservableArray, _super);
  function ObservableArray(initialValues, enhancer, name, owned) {
    if (name === void 0) {
      name = "ObservableArray@" + getNextId();
    }
    if (owned === void 0) {
      owned = false;
    }
    var _this = _super.call(this) || this;
    var adm = new ObservableArrayAdministration(name, enhancer, _this, owned);
    addHiddenFinalProp(_this, "$mobx", adm);
    if (initialValues && initialValues.length) {
      _this.spliceWithArray(0, 0, initialValues);
    }
    if (safariPrototypeSetterInheritanceBug) {
      // Seems that Safari won't use numeric prototype setter untill any * numeric property is
      // defined on the instance. After that it works fine, even if this property is deleted.
      Object.defineProperty(adm.array, "0", ENTRY_0);
    }
    return _this;
  }
  ObservableArray.prototype.intercept = function (handler) {
    return this.$mobx.intercept(handler);
  };
  ObservableArray.prototype.observe = function (listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }
    return this.$mobx.observe(listener, fireImmediately);
  };
  ObservableArray.prototype.clear = function () {
    return this.splice(0);
  };
  ObservableArray.prototype.concat = function () {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      arrays[_i] = arguments[_i];
    }
    this.$mobx.atom.reportObserved();
    return Array.prototype.concat.apply(this.peek(), arrays.map(function (a) {
      return isObservableArray(a) ? a.peek() : a;
    }));
  };
  ObservableArray.prototype.replace = function (newItems) {
    return this.$mobx.spliceWithArray(0, this.$mobx.values.length, newItems);
  };
  /**
   * Converts this array back to a (shallow) javascript structure.
   * For a deep clone use mobx.toJS
   */
  ObservableArray.prototype.toJS = function () {
    return this.slice();
  };
  ObservableArray.prototype.toJSON = function () {
    // Used by JSON.stringify
    return this.toJS();
  };
  ObservableArray.prototype.peek = function () {
    this.$mobx.atom.reportObserved();
    return this.$mobx.dehanceValues(this.$mobx.values);
  };
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
  ObservableArray.prototype.find = function (predicate, thisArg, fromIndex) {
    if (fromIndex === void 0) {
      fromIndex = 0;
    }
    var idx = this.findIndex.apply(this, arguments);
    return idx === -1 ? undefined : this.get(idx);
  };
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
  ObservableArray.prototype.findIndex = function (predicate, thisArg, fromIndex) {
    if (fromIndex === void 0) {
      fromIndex = 0;
    }
    var items = this.peek(),
        l = items.length;
    for (var i = fromIndex; i < l; i++) if (predicate.call(thisArg, items[i], i, this)) return i;
    return -1;
  };
  /*
   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
   * since these functions alter the inner structure of the array, the have side effects.
   * Because the have side effects, they should not be used in computed function,
   * and for that reason the do not call dependencyState.notifyObserved
   */
  ObservableArray.prototype.splice = function (index, deleteCount) {
    var newItems = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      newItems[_i - 2] = arguments[_i];
    }
    switch (arguments.length) {
      case 0:
        return [];
      case 1:
        return this.$mobx.spliceWithArray(index);
      case 2:
        return this.$mobx.spliceWithArray(index, deleteCount);
    }
    return this.$mobx.spliceWithArray(index, deleteCount, newItems);
  };
  ObservableArray.prototype.spliceWithArray = function (index, deleteCount, newItems) {
    return this.$mobx.spliceWithArray(index, deleteCount, newItems);
  };
  ObservableArray.prototype.push = function () {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      items[_i] = arguments[_i];
    }
    var adm = this.$mobx;
    adm.spliceWithArray(adm.values.length, 0, items);
    return adm.values.length;
  };
  ObservableArray.prototype.pop = function () {
    return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0];
  };
  ObservableArray.prototype.shift = function () {
    return this.splice(0, 1)[0];
  };
  ObservableArray.prototype.unshift = function () {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      items[_i] = arguments[_i];
    }
    var adm = this.$mobx;
    adm.spliceWithArray(0, 0, items);
    return adm.values.length;
  };
  ObservableArray.prototype.reverse = function () {
    // reverse by default mutates in place before returning the result
    // which makes it both a 'derivation' and a 'mutation'.
    // so we deviate from the default and just make it an dervitation
    var clone = this.slice();
    return clone.reverse.apply(clone, arguments);
  };
  ObservableArray.prototype.sort = function (compareFn) {
    // sort by default mutates in place before returning the result
    // which goes against all good practices. Let's not change the array in place!
    var clone = this.slice();
    return clone.sort.apply(clone, arguments);
  };
  ObservableArray.prototype.remove = function (value) {
    var idx = this.$mobx.dehanceValues(this.$mobx.values).indexOf(value);
    if (idx > -1) {
      this.splice(idx, 1);
      return true;
    }
    return false;
  };
  ObservableArray.prototype.move = function (fromIndex, toIndex) {
    function checkIndex(index) {
      if (index < 0) {
        throw new Error("[mobx.array] Index out of bounds: " + index + " is negative");
      }
      var length = this.$mobx.values.length;
      if (index >= length) {
        throw new Error("[mobx.array] Index out of bounds: " + index + " is not smaller than " + length);
      }
    }
    checkIndex.call(this, fromIndex);
    checkIndex.call(this, toIndex);
    if (fromIndex === toIndex) {
      return;
    }
    var oldItems = this.$mobx.values;
    var newItems;
    if (fromIndex < toIndex) {
      newItems = oldItems.slice(0, fromIndex).concat(oldItems.slice(fromIndex + 1, toIndex + 1), [oldItems[fromIndex]], oldItems.slice(toIndex + 1));
    } else {
      // toIndex < fromIndex
      newItems = oldItems.slice(0, toIndex).concat([oldItems[fromIndex]], oldItems.slice(toIndex, fromIndex), oldItems.slice(fromIndex + 1));
    }
    this.replace(newItems);
  };
  // See #734, in case property accessors are unreliable...
  ObservableArray.prototype.get = function (index) {
    var impl = this.$mobx;
    if (impl) {
      if (index < impl.values.length) {
        impl.atom.reportObserved();
        return impl.dehanceValue(impl.values[index]);
      }
      console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + impl.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
    }
    return undefined;
  };
  // See #734, in case property accessors are unreliable...
  ObservableArray.prototype.set = function (index, newValue) {
    var adm = this.$mobx;
    var values = adm.values;
    if (index < values.length) {
      // update at index in range
      checkIfStateModificationsAreAllowed(adm.atom);
      var oldValue = values[index];
      if (hasInterceptors(adm)) {
        var change = interceptChange(adm, {
          type: "update",
          object: this,
          index: index,
          newValue: newValue
        });
        if (!change) return;
        newValue = change.newValue;
      }
      newValue = adm.enhancer(newValue, oldValue);
      var changed = newValue !== oldValue;
      if (changed) {
        values[index] = newValue;
        adm.notifyArrayChildUpdate(index, newValue, oldValue);
      }
    } else if (index === values.length) {
      // add a new item
      adm.spliceWithArray(index, 0, [newValue]);
    } else {
      // out of bounds
      throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
    }
  };
  return ObservableArray;
}(StubArray);
declareIterator(ObservableArray.prototype, function () {
  return arrayAsIterator(this.slice());
});
Object.defineProperty(ObservableArray.prototype, "length", {
  enumerable: false,
  configurable: true,
  get: function () {
    return this.$mobx.getArrayLength();
  },
  set: function (newLength) {
    this.$mobx.setArrayLength(newLength);
  }
});
["every", "filter", "forEach", "indexOf", "join", "lastIndexOf", "map", "reduce", "reduceRight", "slice", "some", "toString", "toLocaleString"].forEach(function (funcName) {
  var baseFunc = Array.prototype[funcName];
  invariant(typeof baseFunc === "function", "Base function not defined on Array prototype: '" + funcName + "'");
  addHiddenProp(ObservableArray.prototype, funcName, function () {
    return baseFunc.apply(this.peek(), arguments);
  });
});
/**
 * We don't want those to show up in `for (const key in ar)` ...
 */
makeNonEnumerable(ObservableArray.prototype, ["constructor", "intercept", "observe", "clear", "concat", "get", "replace", "toJS", "toJSON", "peek", "find", "findIndex", "splice", "spliceWithArray", "push", "pop", "set", "shift", "unshift", "reverse", "sort", "remove", "move", "toString", "toLocaleString"]);
// See #364
var ENTRY_0 = createArrayEntryDescriptor(0);
function createArrayEntryDescriptor(index) {
  return {
    enumerable: false,
    configurable: false,
    get: function () {
      // TODO: Check `this`?, see #752?
      return this.get(index);
    },
    set: function (value) {
      this.set(index, value);
    }
  };
}
function createArrayBufferItem(index) {
  Object.defineProperty(ObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
}
function reserveArrayBuffer(max) {
  for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max; index++) createArrayBufferItem(index);
  OBSERVABLE_ARRAY_BUFFER_SIZE = max;
}
reserveArrayBuffer(1000);
var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing.$mobx);
}

var UNCHANGED = {};
var ObservableValue = function (_super) {
  __extends(ObservableValue, _super);
  function ObservableValue(value, enhancer, name, notifySpy) {
    if (name === void 0) {
      name = "ObservableValue@" + getNextId();
    }
    if (notifySpy === void 0) {
      notifySpy = true;
    }
    var _this = _super.call(this, name) || this;
    _this.enhancer = enhancer;
    _this.hasUnreportedChange = false;
    _this.dehancer = undefined;
    _this.value = enhancer(value, undefined, name);
    if (notifySpy && isSpyEnabled()) {
      // only notify spy if this is a stand-alone observable
      spyReport({ type: "create", object: _this, newValue: _this.value });
    }
    return _this;
  }
  ObservableValue.prototype.dehanceValue = function (value) {
    if (this.dehancer !== undefined) return this.dehancer(value);
    return value;
  };
  ObservableValue.prototype.set = function (newValue) {
    var oldValue = this.value;
    newValue = this.prepareNewValue(newValue);
    if (newValue !== UNCHANGED) {
      var notifySpy = isSpyEnabled();
      if (notifySpy) {
        spyReportStart({
          type: "update",
          object: this,
          newValue: newValue,
          oldValue: oldValue
        });
      }
      this.setNewValue(newValue);
      if (notifySpy) spyReportEnd();
    }
  };
  ObservableValue.prototype.prepareNewValue = function (newValue) {
    checkIfStateModificationsAreAllowed(this);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this,
        type: "update",
        newValue: newValue
      });
      if (!change) return UNCHANGED;
      newValue = change.newValue;
    }
    // apply modifier
    newValue = this.enhancer(newValue, this.value, this.name);
    return this.value !== newValue ? newValue : UNCHANGED;
  };
  ObservableValue.prototype.setNewValue = function (newValue) {
    var oldValue = this.value;
    this.value = newValue;
    this.reportChanged();
    if (hasListeners(this)) {
      notifyListeners(this, {
        type: "update",
        object: this,
        newValue: newValue,
        oldValue: oldValue
      });
    }
  };
  ObservableValue.prototype.get = function () {
    this.reportObserved();
    return this.dehanceValue(this.value);
  };
  ObservableValue.prototype.intercept = function (handler) {
    return registerInterceptor(this, handler);
  };
  ObservableValue.prototype.observe = function (listener, fireImmediately) {
    if (fireImmediately) listener({
      object: this,
      type: "update",
      newValue: this.value,
      oldValue: undefined
    });
    return registerListener(this, listener);
  };
  ObservableValue.prototype.toJSON = function () {
    return this.get();
  };
  ObservableValue.prototype.toString = function () {
    return this.name + "[" + this.value + "]";
  };
  ObservableValue.prototype.valueOf = function () {
    return toPrimitive(this.get());
  };
  return ObservableValue;
}(BaseAtom);
ObservableValue.prototype[primitiveSymbol()] = ObservableValue.prototype.valueOf;
var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);

var messages = {
  m001: "It is not allowed to assign new values to @action fields",
  m002: "`runInAction` expects a function",
  m003: "`runInAction` expects a function without arguments",
  m004: "autorun expects a function",
  m005: "Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.",
  m006: "Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.",
  m007: "reaction only accepts 2 or 3 arguments. If migrating from MobX 2, please provide an options object",
  m008: "wrapping reaction expression in `asReference` is no longer supported, use options object instead",
  m009: "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.",
  m010: "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'",
  m011: "First argument to `computed` should be an expression. If using computed as decorator, don't pass it arguments",
  m012: "computed takes one or two arguments if used as function",
  m013: "[mobx.expr] 'expr' should only be used inside other reactive functions.",
  m014: "extendObservable expected 2 or more arguments",
  m015: "extendObservable expects an object as first argument",
  m016: "extendObservable should not be used on maps, use map.merge instead",
  m017: "all arguments of extendObservable should be objects",
  m018: "extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540",
  m019: "[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.",
  m020: "modifiers can only be used for individual object properties",
  m021: "observable expects zero or one arguments",
  m022: "@observable can not be used on getters, use @computed instead",
  m024: "whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested its value.",
  m025: "whyRun can only be used on reactions and computed values",
  m026: "`action` can only be invoked on functions",
  m028: "It is not allowed to set `useStrict` when a derivation is running",
  m029: "INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row",
  m030a: "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: ",
  m030b: "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ",
  m031: "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: ",
  m032: "* This computation is suspended (not in use by any reaction) and won't run automatically.\n	Didn't expect this computation to be suspended at this point?\n	  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\n	  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).",
  m033: "`observe` doesn't support the fire immediately property for observable maps.",
  m034: "`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead",
  m035: "Cannot make the designated object observable; it is not extensible",
  m036: "It is not possible to get index atoms from arrays",
  m037: "Hi there! I'm sorry you have just run into an exception.\nIf your debugger ends up here, know that some reaction (like the render() of an observer component, autorun or reaction)\nthrew an exception and that mobx caught it, to avoid that it brings the rest of your application down.\nThe original cause of the exception (the code that caused this reaction to run (again)), is still in the stack.\n\nHowever, more interesting is the actual stack trace of the error itself.\nHopefully the error is an instanceof Error, because in that case you can inspect the original stack of the error from where it was thrown.\nSee `error.stack` property, or press the very subtle \"(...)\" link you see near the console.error message that probably brought you here.\nThat stack is more interesting than the stack of this console.error itself.\n\nIf the exception you see is an exception you created yourself, make sure to use `throw new Error(\"Oops\")` instead of `throw \"Oops\"`,\nbecause the javascript environment will only preserve the original stack trace in the first form.\n\nYou can also make sure the debugger pauses the next time this very same exception is thrown by enabling \"Pause on caught exception\".\n(Note that it might pause on many other, unrelated exception as well).\n\nIf that all doesn't help you out, feel free to open an issue https://github.com/mobxjs/mobx/issues!\n",
  m038: "Missing items in this list?\n    1. Check whether all used values are properly marked as observable (use isObservable to verify)\n    2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n"
};
function getMessage(id) {
  return messages[id];
}

function createAction(actionName, fn) {
  invariant(typeof fn === "function", getMessage("m026"));
  invariant(typeof actionName === "string" && actionName.length > 0, "actions should have valid names, got: '" + actionName + "'");
  var res = function () {
    return executeAction(actionName, fn, this, arguments);
  };
  res.originalFn = fn;
  res.isMobxAction = true;
  return res;
}
function executeAction(actionName, fn, scope, args) {
  var runInfo = startAction(actionName, fn, scope, args);
  try {
    return fn.apply(scope, args);
  } finally {
    endAction(runInfo);
  }
}
function startAction(actionName, fn, scope, args) {
  var notifySpy = isSpyEnabled() && !!actionName;
  var startTime = 0;
  if (notifySpy) {
    startTime = Date.now();
    var l = args && args.length || 0;
    var flattendArgs = new Array(l);
    if (l > 0) for (var i = 0; i < l; i++) flattendArgs[i] = args[i];
    spyReportStart({
      type: "action",
      name: actionName,
      fn: fn,
      object: scope,
      arguments: flattendArgs
    });
  }
  var prevDerivation = untrackedStart();
  startBatch();
  var prevAllowStateChanges = allowStateChangesStart(true);
  return {
    prevDerivation: prevDerivation,
    prevAllowStateChanges: prevAllowStateChanges,
    notifySpy: notifySpy,
    startTime: startTime
  };
}
function endAction(runInfo) {
  allowStateChangesEnd(runInfo.prevAllowStateChanges);
  endBatch();
  untrackedEnd(runInfo.prevDerivation);
  if (runInfo.notifySpy) spyReportEnd({ time: Date.now() - runInfo.startTime });
}
function useStrict(strict) {
  invariant(globalState.trackingDerivation === null, getMessage("m028"));
  globalState.strictMode = strict;
  globalState.allowStateChanges = !strict;
}
function isStrictModeEnabled() {
  return globalState.strictMode;
}
function allowStateChanges(allowStateChanges, func) {
  // TODO: deprecate / refactor this function in next major
  // Currently only used by `@observer`
  // Proposed change: remove first param, rename to `forbidStateChanges`,
  // require error callback instead of the hardcoded error message now used
  // Use `inAction` instead of allowStateChanges in derivation.ts to check strictMode
  var prev = allowStateChangesStart(allowStateChanges);
  var res;
  try {
    res = func();
  } finally {
    allowStateChangesEnd(prev);
  }
  return res;
}
function allowStateChangesStart(allowStateChanges) {
  var prev = globalState.allowStateChanges;
  globalState.allowStateChanges = allowStateChanges;
  return prev;
}
function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}

/**
 * Constructs a decorator, that normalizes the differences between
 * TypeScript and Babel. Mainly caused by the fact that legacy-decorator cannot assign
 * values during instance creation to properties that have a getter setter.
 *
 * - Sigh -
 *
 * Also takes care of the difference between @decorator field and @decorator(args) field, and different forms of values.
 * For performance (cpu and mem) reasons the properties are always defined on the prototype (at least initially).
 * This means that these properties despite being enumerable might not show up in Object.keys() (but they will show up in for...in loops).
 */
function createClassPropertyDecorator(
/**
 * This function is invoked once, when the property is added to a new instance.
 * When this happens is not strictly determined due to differences in TS and Babel:
 * Typescript: Usually when constructing the new instance
 * Babel, sometimes Typescript: during the first get / set
 * Both: when calling `runLazyInitializers(instance)`
 */
onInitialize, get, set, enumerable,
/**
 * Can this decorator invoked with arguments? e.g. @decorator(args)
 */
allowCustomArguments) {
  function classPropertyDecorator(target, key, descriptor, customArgs, argLen) {
    if (argLen === void 0) {
      argLen = 0;
    }
    invariant(allowCustomArguments || quacksLikeADecorator(arguments), "This function is a decorator, but it wasn't invoked like a decorator");
    if (!descriptor) {
      // typescript (except for getter / setters)
      var newDescriptor = {
        enumerable: enumerable,
        configurable: true,
        get: function () {
          if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) typescriptInitializeProperty(this, key, undefined, onInitialize, customArgs, descriptor);
          return get.call(this, key);
        },
        set: function (v) {
          if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) {
            typescriptInitializeProperty(this, key, v, onInitialize, customArgs, descriptor);
          } else {
            set.call(this, key, v);
          }
        }
      };
      if (arguments.length < 3 || arguments.length === 5 && argLen < 3) {
        // Typescript target is ES3, so it won't define property for us
        // or using Reflect.decorate polyfill, which will return no descriptor
        // (see https://github.com/mobxjs/mobx/issues/333)
        Object.defineProperty(target, key, newDescriptor);
      }
      return newDescriptor;
    } else {
      // babel and typescript getter / setter props
      if (!hasOwnProperty(target, "__mobxLazyInitializers")) {
        addHiddenProp(target, "__mobxLazyInitializers", target.__mobxLazyInitializers && target.__mobxLazyInitializers.slice() || [] // support inheritance
        );
      }
      var value_1 = descriptor.value,
          initializer_1 = descriptor.initializer;
      target.__mobxLazyInitializers.push(function (instance) {
        onInitialize(instance, key, initializer_1 ? initializer_1.call(instance) : value_1, customArgs, descriptor);
      });
      return {
        enumerable: enumerable,
        configurable: true,
        get: function () {
          if (this.__mobxDidRunLazyInitializers !== true) runLazyInitializers(this);
          return get.call(this, key);
        },
        set: function (v) {
          if (this.__mobxDidRunLazyInitializers !== true) runLazyInitializers(this);
          set.call(this, key, v);
        }
      };
    }
  }
  if (allowCustomArguments) {
    /** If custom arguments are allowed, we should return a function that returns a decorator */
    return function () {
      /** Direct invocation: @decorator bla */
      if (quacksLikeADecorator(arguments)) return classPropertyDecorator.apply(null, arguments);
      /** Indirect invocation: @decorator(args) bla */
      var outerArgs = arguments;
      var argLen = arguments.length;
      return function (target, key, descriptor) {
        return classPropertyDecorator(target, key, descriptor, outerArgs, argLen);
      };
    };
  }
  return classPropertyDecorator;
}
function typescriptInitializeProperty(instance, key, v, onInitialize, customArgs, baseDescriptor) {
  if (!hasOwnProperty(instance, "__mobxInitializedProps")) addHiddenProp(instance, "__mobxInitializedProps", {});
  instance.__mobxInitializedProps[key] = true;
  onInitialize(instance, key, v, customArgs, baseDescriptor);
}
function runLazyInitializers(instance) {
  if (instance.__mobxDidRunLazyInitializers === true) return;
  if (instance.__mobxLazyInitializers) {
    addHiddenProp(instance, "__mobxDidRunLazyInitializers", true);
    instance.__mobxDidRunLazyInitializers && instance.__mobxLazyInitializers.forEach(function (initializer) {
      return initializer(instance);
    });
  }
}
function quacksLikeADecorator(args) {
  return (args.length === 2 || args.length === 3) && typeof args[1] === "string";
}

var actionFieldDecorator = createClassPropertyDecorator(function (target, key, value, args, originalDescriptor) {
  var actionName = args && args.length === 1 ? args[0] : value.name || key || "<unnamed action>";
  var wrappedAction = action(actionName, value);
  addHiddenProp(target, key, wrappedAction);
}, function (key) {
  return this[key];
}, function () {
  invariant(false, getMessage("m001"));
}, false, true);
var boundActionDecorator = createClassPropertyDecorator(function (target, key, value) {
  defineBoundAction(target, key, value);
}, function (key) {
  return this[key];
}, function () {
  invariant(false, getMessage("m001"));
}, false, false);
var action = function action(arg1, arg2, arg3, arg4) {
  if (arguments.length === 1 && typeof arg1 === "function") return createAction(arg1.name || "<unnamed action>", arg1);
  if (arguments.length === 2 && typeof arg2 === "function") return createAction(arg1, arg2);
  if (arguments.length === 1 && typeof arg1 === "string") return namedActionDecorator(arg1);
  return namedActionDecorator(arg2).apply(null, arguments);
};
action.bound = function boundAction(arg1, arg2, arg3) {
  if (typeof arg1 === "function") {
    var action_1 = createAction("<not yet bound action>", arg1);
    action_1.autoBind = true;
    return action_1;
  }
  return boundActionDecorator.apply(null, arguments);
};
function namedActionDecorator(name) {
  return function (target, prop, descriptor) {
    if (descriptor && typeof descriptor.value === "function") {
      // TypeScript @action method() { }. Defined on proto before being decorated
      // Don't use the field decorator if we are just decorating a method
      descriptor.value = createAction(name, descriptor.value);
      descriptor.enumerable = false;
      descriptor.configurable = true;
      return descriptor;
    }
    if (descriptor !== undefined && descriptor.get !== undefined) {
      throw new Error("[mobx] action is not expected to be used with getters");
    }
    // bound instance methods
    return actionFieldDecorator(name).apply(this, arguments);
  };
}
function runInAction(arg1, arg2, arg3) {
  var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
  var fn = typeof arg1 === "function" ? arg1 : arg2;
  var scope = typeof arg1 === "function" ? arg2 : arg3;
  invariant(typeof fn === "function", getMessage("m002"));
  invariant(fn.length === 0, getMessage("m003"));
  invariant(typeof actionName === "string" && actionName.length > 0, "actions should have valid names, got: '" + actionName + "'");
  return executeAction(actionName, fn, scope, undefined);
}
function isAction(thing) {
  return typeof thing === "function" && thing.isMobxAction === true;
}
function defineBoundAction(target, propertyName, fn) {
  var res = function () {
    return executeAction(propertyName, fn, target, arguments);
  };
  res.isMobxAction = true;
  addHiddenProp(target, propertyName, res);
}

function identityComparer(a, b) {
  return a === b;
}
function structuralComparer(a, b) {
  if (typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b)) {
    return true;
  }
  return deepEqual(a, b);
}
function defaultComparer(a, b) {
  if (typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b)) {
    return true;
  }
  return identityComparer(a, b);
}
var comparer = {
  identity: identityComparer,
  structural: structuralComparer,
  default: defaultComparer
};

function autorun(arg1, arg2, arg3) {
  var name, view, scope;
  if (typeof arg1 === "string") {
    name = arg1;
    view = arg2;
    scope = arg3;
  } else {
    name = arg1.name || "Autorun@" + getNextId();
    view = arg1;
    scope = arg2;
  }
  invariant(typeof view === "function", getMessage("m004"));
  invariant(isAction(view) === false, getMessage("m005"));
  if (scope) view = view.bind(scope);
  var reaction = new Reaction(name, function () {
    this.track(reactionRunner);
  });
  function reactionRunner() {
    view(reaction);
  }
  reaction.schedule();
  return reaction.getDisposer();
}
function when(arg1, arg2, arg3, arg4) {
  var name, predicate, effect, scope;
  if (typeof arg1 === "string") {
    name = arg1;
    predicate = arg2;
    effect = arg3;
    scope = arg4;
  } else {
    name = "When@" + getNextId();
    predicate = arg1;
    effect = arg2;
    scope = arg3;
  }
  var disposer = autorun(name, function (r) {
    if (predicate.call(scope)) {
      r.dispose();
      var prevUntracked = untrackedStart();
      effect.call(scope);
      untrackedEnd(prevUntracked);
    }
  });
  return disposer;
}
function autorunAsync(arg1, arg2, arg3, arg4) {
  var name, func, delay, scope;
  if (typeof arg1 === "string") {
    name = arg1;
    func = arg2;
    delay = arg3;
    scope = arg4;
  } else {
    name = arg1.name || "AutorunAsync@" + getNextId();
    func = arg1;
    delay = arg2;
    scope = arg3;
  }
  invariant(isAction(func) === false, getMessage("m006"));
  if (delay === void 0) delay = 1;
  if (scope) func = func.bind(scope);
  var isScheduled = false;
  var r = new Reaction(name, function () {
    if (!isScheduled) {
      isScheduled = true;
      setTimeout(function () {
        isScheduled = false;
        if (!r.isDisposed) r.track(reactionRunner);
      }, delay);
    }
  });
  function reactionRunner() {
    func(r);
  }
  r.schedule();
  return r.getDisposer();
}
function reaction(expression, effect, arg3) {
  if (arguments.length > 3) {
    fail(getMessage("m007"));
  }
  if (isModifierDescriptor(expression)) {
    fail(getMessage("m008"));
  }
  var opts;
  if (typeof arg3 === "object") {
    opts = arg3;
  } else {
    opts = {};
  }
  opts.name = opts.name || expression.name || effect.name || "Reaction@" + getNextId();
  opts.fireImmediately = arg3 === true || opts.fireImmediately === true;
  opts.delay = opts.delay || 0;
  opts.compareStructural = opts.compareStructural || opts.struct || false;
  // TODO: creates ugly spy events, use `effect = (r) => runInAction(opts.name, () => effect(r))` instead
  effect = action(opts.name, opts.context ? effect.bind(opts.context) : effect);
  if (opts.context) {
    expression = expression.bind(opts.context);
  }
  var firstTime = true;
  var isScheduled = false;
  var value;
  var equals = opts.equals ? opts.equals : opts.compareStructural || opts.struct ? comparer.structural : comparer.default;
  var r = new Reaction(opts.name, function () {
    if (firstTime || opts.delay < 1) {
      reactionRunner();
    } else if (!isScheduled) {
      isScheduled = true;
      setTimeout(function () {
        isScheduled = false;
        reactionRunner();
      }, opts.delay);
    }
  });
  function reactionRunner() {
    if (r.isDisposed) return;
    var changed = false;
    r.track(function () {
      var nextValue = expression(r);
      changed = firstTime || !equals(value, nextValue);
      value = nextValue;
    });
    if (firstTime && opts.fireImmediately) effect(value, r);
    if (!firstTime && changed === true) effect(value, r);
    if (firstTime) firstTime = false;
  }
  r.schedule();
  return r.getDisposer();
}

/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */
var ComputedValue = function () {
  /**
   * Create a new computed value based on a function expression.
   *
   * The `name` property is for debug purposes only.
   *
   * The `equals` property specifies the comparer function to use to determine if a newly produced
   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
   * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
   * Structural comparison can be convenient if you always produce an new aggregated object and
   * don't want to notify observers if it is structurally the same.
   * This is useful for working with vectors, mouse coordinates etc.
   */
  function ComputedValue(derivation, scope, equals, name, setter) {
    this.derivation = derivation;
    this.scope = scope;
    this.equals = equals;
    this.dependenciesState = exports.IDerivationState.NOT_TRACKING;
    this.observing = []; // nodes we are looking at. Our value depends on these nodes
    this.newObserving = null; // during tracking it's an array with new observed observers
    this.isPendingUnobservation = false;
    this.observers = [];
    this.observersIndexes = {};
    this.diffValue = 0;
    this.runId = 0;
    this.lastAccessedBy = 0;
    this.lowestObserverState = exports.IDerivationState.UP_TO_DATE;
    this.unboundDepsCount = 0;
    this.__mapid = "#" + getNextId();
    this.value = new CaughtException(null);
    this.isComputing = false; // to check for cycles
    this.isRunningSetter = false;
    this.name = name || "ComputedValue@" + getNextId();
    if (setter) this.setter = createAction(name + "-setter", setter);
  }
  ComputedValue.prototype.onBecomeStale = function () {
    propagateMaybeChanged(this);
  };
  ComputedValue.prototype.onBecomeUnobserved = function () {
    clearObserving(this);
    this.value = undefined;
  };
  /**
   * Returns the current value of this computed value.
   * Will evaluate its computation first if needed.
   */
  ComputedValue.prototype.get = function () {
    invariant(!this.isComputing, "Cycle detected in computation " + this.name, this.derivation);
    if (globalState.inBatch === 0) {
      // This is an minor optimization which could be omitted to simplify the code
      // The computedValue is accessed outside of any mobx stuff. Batch observing should be enough and don't need
      // tracking as it will never be called again inside this batch.
      startBatch();
      if (shouldCompute(this)) this.value = this.computeValue(false);
      endBatch();
    } else {
      reportObserved(this);
      if (shouldCompute(this)) if (this.trackAndCompute()) propagateChangeConfirmed(this);
    }
    var result = this.value;
    if (isCaughtException(result)) throw result.cause;
    return result;
  };
  ComputedValue.prototype.peek = function () {
    var res = this.computeValue(false);
    if (isCaughtException(res)) throw res.cause;
    return res;
  };
  ComputedValue.prototype.set = function (value) {
    if (this.setter) {
      invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
      this.isRunningSetter = true;
      try {
        this.setter.call(this.scope, value);
      } finally {
        this.isRunningSetter = false;
      }
    } else invariant(false, "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
  };
  ComputedValue.prototype.trackAndCompute = function () {
    if (isSpyEnabled()) {
      spyReport({
        object: this.scope,
        type: "compute",
        fn: this.derivation
      });
    }
    var oldValue = this.value;
    var newValue = this.value = this.computeValue(true);
    return isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals(oldValue, newValue);
  };
  ComputedValue.prototype.computeValue = function (track) {
    this.isComputing = true;
    globalState.computationDepth++;
    var res;
    if (track) {
      res = trackDerivedFunction(this, this.derivation, this.scope);
    } else {
      try {
        res = this.derivation.call(this.scope);
      } catch (e) {
        res = new CaughtException(e);
      }
    }
    globalState.computationDepth--;
    this.isComputing = false;
    return res;
  };
  ComputedValue.prototype.observe = function (listener, fireImmediately) {
    var _this = this;
    var firstTime = true;
    var prevValue = undefined;
    return autorun(function () {
      var newValue = _this.get();
      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({
          type: "update",
          object: _this,
          newValue: newValue,
          oldValue: prevValue
        });
        untrackedEnd(prevU);
      }
      firstTime = false;
      prevValue = newValue;
    });
  };
  ComputedValue.prototype.toJSON = function () {
    return this.get();
  };
  ComputedValue.prototype.toString = function () {
    return this.name + "[" + this.derivation.toString() + "]";
  };
  ComputedValue.prototype.valueOf = function () {
    return toPrimitive(this.get());
  };
  ComputedValue.prototype.whyRun = function () {
    var isTracking = Boolean(globalState.trackingDerivation);
    var observing = unique(this.isComputing ? this.newObserving : this.observing).map(function (dep) {
      return dep.name;
    });
    var observers = unique(getObservers(this).map(function (dep) {
      return dep.name;
    }));
    return "\nWhyRun? computation '" + this.name + "':\n * Running because: " + (isTracking ? "[active] the value of this computation is needed by a reaction" : this.isComputing ? "[get] The value of this computed was requested outside a reaction" : "[idle] not running at the moment") + "\n" + (this.dependenciesState === exports.IDerivationState.NOT_TRACKING ? getMessage("m032") : " * This computation will re-run if any of the following observables changes:\n    " + joinStrings(observing) + "\n    " + (this.isComputing && isTracking ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n\t" + getMessage("m038") + "\n\n  * If the outcome of this computation changes, the following observers will be re-run:\n    " + joinStrings(observers) + "\n");
  };
  return ComputedValue;
}();
ComputedValue.prototype[primitiveSymbol()] = ComputedValue.prototype.valueOf;
var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);

var ObservableObjectAdministration = function () {
  function ObservableObjectAdministration(target, name) {
    this.target = target;
    this.name = name;
    this.values = {};
    this.changeListeners = null;
    this.interceptors = null;
  }
  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */
  ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
    invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
    return registerListener(this, callback);
  };
  ObservableObjectAdministration.prototype.intercept = function (handler) {
    return registerInterceptor(this, handler);
  };
  return ObservableObjectAdministration;
}();
function asObservableObject(target, name) {
  if (isObservableObject(target) && target.hasOwnProperty("$mobx")) return target.$mobx;
  invariant(Object.isExtensible(target), getMessage("m035"));
  if (!isPlainObject(target)) name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
  if (!name) name = "ObservableObject@" + getNextId();
  var adm = new ObservableObjectAdministration(target, name);
  addHiddenFinalProp(target, "$mobx", adm);
  return adm;
}
function defineObservablePropertyFromDescriptor(adm, propName, descriptor, defaultEnhancer) {
  if (adm.values[propName] && !isComputedValue(adm.values[propName])) {
    // already observable property
    invariant("value" in descriptor, "The property " + propName + " in " + adm.name + " is already observable, cannot redefine it as computed property");
    adm.target[propName] = descriptor.value; // the property setter will make 'value' reactive if needed.
    return;
  }
  // not yet observable property
  if ("value" in descriptor) {
    // not a computed value
    if (isModifierDescriptor(descriptor.value)) {
      // x : ref(someValue)
      var modifierDescriptor = descriptor.value;
      defineObservableProperty(adm, propName, modifierDescriptor.initialValue, modifierDescriptor.enhancer);
    } else if (isAction(descriptor.value) && descriptor.value.autoBind === true) {
      defineBoundAction(adm.target, propName, descriptor.value.originalFn);
    } else if (isComputedValue(descriptor.value)) {
      // x: computed(someExpr)
      defineComputedPropertyFromComputedValue(adm, propName, descriptor.value);
    } else {
      // x: someValue
      defineObservableProperty(adm, propName, descriptor.value, defaultEnhancer);
    }
  } else {
    // get x() { return 3 } set x(v) { }
    defineComputedProperty(adm, propName, descriptor.get, descriptor.set, comparer.default, true);
  }
}
function defineObservableProperty(adm, propName, newValue, enhancer) {
  assertPropertyConfigurable(adm.target, propName);
  if (hasInterceptors(adm)) {
    var change = interceptChange(adm, {
      object: adm.target,
      name: propName,
      type: "add",
      newValue: newValue
    });
    if (!change) return;
    newValue = change.newValue;
  }
  var observable = adm.values[propName] = new ObservableValue(newValue, enhancer, adm.name + "." + propName, false);
  newValue = observable.value; // observableValue might have changed it
  Object.defineProperty(adm.target, propName, generateObservablePropConfig(propName));
  notifyPropertyAddition(adm, adm.target, propName, newValue);
}
function defineComputedProperty(adm, propName, getter, setter, equals, asInstanceProperty) {
  if (asInstanceProperty) assertPropertyConfigurable(adm.target, propName);
  adm.values[propName] = new ComputedValue(getter, adm.target, equals, adm.name + "." + propName, setter);
  if (asInstanceProperty) {
    Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));
  }
}
function defineComputedPropertyFromComputedValue(adm, propName, computedValue) {
  var name = adm.name + "." + propName;
  computedValue.name = name;
  if (!computedValue.scope) computedValue.scope = adm.target;
  adm.values[propName] = computedValue;
  Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));
}
var observablePropertyConfigs = {};
var computedPropertyConfigs = {};
function generateObservablePropConfig(propName) {
  return observablePropertyConfigs[propName] || (observablePropertyConfigs[propName] = {
    configurable: true,
    enumerable: true,
    get: function () {
      return this.$mobx.values[propName].get();
    },
    set: function (v) {
      setPropertyValue(this, propName, v);
    }
  });
}
function generateComputedPropConfig(propName) {
  return computedPropertyConfigs[propName] || (computedPropertyConfigs[propName] = {
    configurable: true,
    enumerable: false,
    get: function () {
      return this.$mobx.values[propName].get();
    },
    set: function (v) {
      return this.$mobx.values[propName].set(v);
    }
  });
}
function setPropertyValue(instance, name, newValue) {
  var adm = instance.$mobx;
  var observable = adm.values[name];
  // intercept
  if (hasInterceptors(adm)) {
    var change = interceptChange(adm, {
      type: "update",
      object: instance,
      name: name,
      newValue: newValue
    });
    if (!change) return;
    newValue = change.newValue;
  }
  newValue = observable.prepareNewValue(newValue);
  // notify spy & observers
  if (newValue !== UNCHANGED) {
    var notify = hasListeners(adm);
    var notifySpy = isSpyEnabled();
    var change = notify || notifySpy ? {
      type: "update",
      object: instance,
      oldValue: observable.value,
      name: name,
      newValue: newValue
    } : null;
    if (notifySpy) spyReportStart(change);
    observable.setNewValue(newValue);
    if (notify) notifyListeners(adm, change);
    if (notifySpy) spyReportEnd();
  }
}
function notifyPropertyAddition(adm, object, name, newValue) {
  var notify = hasListeners(adm);
  var notifySpy = isSpyEnabled();
  var change = notify || notifySpy ? {
    type: "add",
    object: object,
    name: name,
    newValue: newValue
  } : null;
  if (notifySpy) spyReportStart(change);
  if (notify) notifyListeners(adm, change);
  if (notifySpy) spyReportEnd();
}
var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function isObservableObject(thing) {
  if (isObject(thing)) {
    // Initializers run lazily when transpiling to babel, so make sure they are run...
    runLazyInitializers(thing);
    return isObservableObjectAdministration(thing.$mobx);
  }
  return false;
}

/**
 * Returns true if the provided value is reactive.
 * @param value object, function or array
 * @param property if property is specified, checks whether value.property is reactive.
 */
function isObservable(value, property) {
  if (value === null || value === undefined) return false;
  if (property !== undefined) {
    if (isObservableArray(value) || isObservableMap(value)) throw new Error(getMessage("m019"));else if (isObservableObject(value)) {
      var o = value.$mobx;
      return o.values && !!o.values[property];
    }
    return false;
  }
  // For first check, see #701
  return isObservableObject(value) || !!value.$mobx || isAtom(value) || isReaction(value) || isComputedValue(value);
}

function createDecoratorForEnhancer(enhancer) {
  invariant(!!enhancer, ":(");
  return createClassPropertyDecorator(function (target, name, baseValue, _, baseDescriptor) {
    assertPropertyConfigurable(target, name);
    invariant(!baseDescriptor || !baseDescriptor.get, getMessage("m022"));
    var adm = asObservableObject(target, undefined);
    defineObservableProperty(adm, name, baseValue, enhancer);
  }, function (name) {
    var observable = this.$mobx.values[name];
    if (observable === undefined // See #505
    ) return undefined;
    return observable.get();
  }, function (name, value) {
    setPropertyValue(this, name, value);
  }, true, false);
}

function extendObservable(target) {
  var properties = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    properties[_i - 1] = arguments[_i];
  }
  return extendObservableHelper(target, deepEnhancer, properties);
}
function extendShallowObservable(target) {
  var properties = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    properties[_i - 1] = arguments[_i];
  }
  return extendObservableHelper(target, referenceEnhancer, properties);
}
function extendObservableHelper(target, defaultEnhancer, properties) {
  invariant(arguments.length >= 2, getMessage("m014"));
  invariant(typeof target === "object", getMessage("m015"));
  invariant(!isObservableMap(target), getMessage("m016"));
  properties.forEach(function (propSet) {
    invariant(typeof propSet === "object", getMessage("m017"));
    invariant(!isObservable(propSet), getMessage("m018"));
  });
  var adm = asObservableObject(target);
  var definedProps = {};
  // Note could be optimised if properties.length === 1
  for (var i = properties.length - 1; i >= 0; i--) {
    var propSet = properties[i];
    for (var key in propSet) if (definedProps[key] !== true && hasOwnProperty(propSet, key)) {
      definedProps[key] = true;
      if (target === propSet && !isPropertyConfigurable(target, key)) continue; // see #111, skip non-configurable or non-writable props for `observable(object)`.
      var descriptor = Object.getOwnPropertyDescriptor(propSet, key);
      defineObservablePropertyFromDescriptor(adm, key, descriptor, defaultEnhancer);
    }
  }
  return target;
}

var deepDecorator = createDecoratorForEnhancer(deepEnhancer);
var shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);
var refDecorator = createDecoratorForEnhancer(referenceEnhancer);
var deepStructDecorator = createDecoratorForEnhancer(deepStructEnhancer);
var refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */
function createObservable(v) {
  if (v === void 0) {
    v = undefined;
  }
  // @observable someProp;
  if (typeof arguments[1] === "string") return deepDecorator.apply(null, arguments);
  invariant(arguments.length <= 1, getMessage("m021"));
  invariant(!isModifierDescriptor(v), getMessage("m020"));
  // it is an observable already, done
  if (isObservable(v)) return v;
  // something that can be converted and mutated?
  var res = deepEnhancer(v, undefined, undefined);
  // this value could be converted to a new observable data structure, return it
  if (res !== v) return res;
  // otherwise, just box it
  return observable.box(v);
}
var IObservableFactories = function () {
  function IObservableFactories() {}
  IObservableFactories.prototype.box = function (value, name) {
    if (arguments.length > 2) incorrectlyUsedAsDecorator("box");
    return new ObservableValue(value, deepEnhancer, name);
  };
  IObservableFactories.prototype.shallowBox = function (value, name) {
    if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowBox");
    return new ObservableValue(value, referenceEnhancer, name);
  };
  IObservableFactories.prototype.array = function (initialValues, name) {
    if (arguments.length > 2) incorrectlyUsedAsDecorator("array");
    return new ObservableArray(initialValues, deepEnhancer, name);
  };
  IObservableFactories.prototype.shallowArray = function (initialValues, name) {
    if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowArray");
    return new ObservableArray(initialValues, referenceEnhancer, name);
  };
  IObservableFactories.prototype.map = function (initialValues, name) {
    if (arguments.length > 2) incorrectlyUsedAsDecorator("map");
    return new ObservableMap(initialValues, deepEnhancer, name);
  };
  IObservableFactories.prototype.shallowMap = function (initialValues, name) {
    if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowMap");
    return new ObservableMap(initialValues, referenceEnhancer, name);
  };
  IObservableFactories.prototype.object = function (props, name) {
    if (arguments.length > 2) incorrectlyUsedAsDecorator("object");
    var res = {};
    // convert to observable object
    asObservableObject(res, name);
    // add properties
    extendObservable(res, props);
    return res;
  };
  IObservableFactories.prototype.shallowObject = function (props, name) {
    if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowObject");
    var res = {};
    asObservableObject(res, name);
    extendShallowObservable(res, props);
    return res;
  };
  IObservableFactories.prototype.ref = function () {
    if (arguments.length < 2) {
      // although ref creates actually a modifier descriptor, the type of the resultig properties
      // of the object is `T` in the end, when the descriptors are interpreted
      return createModifierDescriptor(referenceEnhancer, arguments[0]);
    } else {
      return refDecorator.apply(null, arguments);
    }
  };
  IObservableFactories.prototype.shallow = function () {
    if (arguments.length < 2) {
      // although ref creates actually a modifier descriptor, the type of the resultig properties
      // of the object is `T` in the end, when the descriptors are interpreted
      return createModifierDescriptor(shallowEnhancer, arguments[0]);
    } else {
      return shallowDecorator.apply(null, arguments);
    }
  };
  IObservableFactories.prototype.deep = function () {
    if (arguments.length < 2) {
      // although ref creates actually a modifier descriptor, the type of the resultig properties
      // of the object is `T` in the end, when the descriptors are interpreted
      return createModifierDescriptor(deepEnhancer, arguments[0]);
    } else {
      return deepDecorator.apply(null, arguments);
    }
  };
  IObservableFactories.prototype.struct = function () {
    if (arguments.length < 2) {
      // although ref creates actually a modifier descriptor, the type of the resultig properties
      // of the object is `T` in the end, when the descriptors are interpreted
      return createModifierDescriptor(deepStructEnhancer, arguments[0]);
    } else {
      return deepStructDecorator.apply(null, arguments);
    }
  };
  return IObservableFactories;
}();
var observable = createObservable;
// weird trick to keep our typings nicely with our funcs, and still extend the observable function
// ES6 class methods aren't enumerable, can't use Object.keys
Object.getOwnPropertyNames(IObservableFactories.prototype).filter(function (name) {
  return name !== "constructor";
}).forEach(function (name) {
  return observable[name] = IObservableFactories.prototype[name];
});
observable.deep.struct = observable.struct;
observable.ref.struct = function () {
  if (arguments.length < 2) {
    return createModifierDescriptor(refStructEnhancer, arguments[0]);
  } else {
    return refStructDecorator.apply(null, arguments);
  }
};
function incorrectlyUsedAsDecorator(methodName) {
  fail("Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
}

function isModifierDescriptor(thing) {
  return typeof thing === "object" && thing !== null && thing.isMobxModifierDescriptor === true;
}
function createModifierDescriptor(enhancer, initialValue) {
  invariant(!isModifierDescriptor(initialValue), "Modifiers cannot be nested");
  return {
    isMobxModifierDescriptor: true,
    initialValue: initialValue,
    enhancer: enhancer
  };
}
function deepEnhancer(v, _, name) {
  if (isModifierDescriptor(v)) fail("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it");
  // it is an observable already, done
  if (isObservable(v)) return v;
  // something that can be converted and mutated?
  if (Array.isArray(v)) return observable.array(v, name);
  if (isPlainObject(v)) return observable.object(v, name);
  if (isES6Map(v)) return observable.map(v, name);
  return v;
}
function shallowEnhancer(v, _, name) {
  if (isModifierDescriptor(v)) fail("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it");
  if (v === undefined || v === null) return v;
  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v)) return v;
  if (Array.isArray(v)) return observable.shallowArray(v, name);
  if (isPlainObject(v)) return observable.shallowObject(v, name);
  if (isES6Map(v)) return observable.shallowMap(v, name);
  return fail("The shallow modifier / decorator can only used in combination with arrays, objects and maps");
}
function referenceEnhancer(newValue) {
  // never turn into an observable
  return newValue;
}
function deepStructEnhancer(v, oldValue, name) {
  // don't confuse structurally compare enhancer with ref enhancer! The latter is probably
  // more suited for immutable objects
  if (deepEqual(v, oldValue)) return oldValue;
  // it is an observable already, done
  if (isObservable(v)) return v;
  // something that can be converted and mutated?
  if (Array.isArray(v)) return new ObservableArray(v, deepStructEnhancer, name);
  if (isES6Map(v)) return new ObservableMap(v, deepStructEnhancer, name);
  if (isPlainObject(v)) {
    var res = {};
    asObservableObject(res, name);
    extendObservableHelper(res, deepStructEnhancer, [v]);
    return res;
  }
  return v;
}
function refStructEnhancer(v, oldValue, name) {
  if (deepEqual(v, oldValue)) return oldValue;
  return v;
}

/**
 * @deprecated
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * Deprecated to simplify api; transactions offer no real benefit above actions.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */
function transaction(action, thisArg) {
  if (thisArg === void 0) {
    thisArg = undefined;
  }
  return runInTransaction.apply(undefined, arguments);
}
function runInTransaction(action, thisArg) {
  if (thisArg === void 0) {
    thisArg = undefined;
  }
  return executeAction("", action);
}

var ObservableMapMarker = {};
var ObservableMap = function () {
  function ObservableMap(initialData, enhancer, name) {
    if (enhancer === void 0) {
      enhancer = deepEnhancer;
    }
    if (name === void 0) {
      name = "ObservableMap@" + getNextId();
    }
    this.enhancer = enhancer;
    this.name = name;
    this.$mobx = ObservableMapMarker;
    this._data = Object.create(null);
    this._hasMap = Object.create(null); // hasMap, not hashMap >-).
    this._keys = new ObservableArray(undefined, referenceEnhancer, this.name + ".keys()", true);
    this.interceptors = null;
    this.changeListeners = null;
    this.dehancer = undefined;
    this.merge(initialData);
  }
  ObservableMap.prototype._has = function (key) {
    return typeof this._data[key] !== "undefined";
  };
  ObservableMap.prototype.has = function (key) {
    if (!this.isValidKey(key)) return false;
    key = "" + key;
    if (this._hasMap[key]) return this._hasMap[key].get();
    return this._updateHasMapEntry(key, false).get();
  };
  ObservableMap.prototype.set = function (key, value) {
    this.assertValidKey(key);
    key = "" + key;
    var hasKey = this._has(key);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: hasKey ? "update" : "add",
        object: this,
        newValue: value,
        name: key
      });
      if (!change) return this;
      value = change.newValue;
    }
    if (hasKey) {
      this._updateValue(key, value);
    } else {
      this._addValue(key, value);
    }
    return this;
  };
  ObservableMap.prototype.delete = function (key) {
    var _this = this;
    this.assertValidKey(key);
    key = "" + key;
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: "delete",
        object: this,
        name: key
      });
      if (!change) return false;
    }
    if (this._has(key)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        type: "delete",
        object: this,
        oldValue: this._data[key].value,
        name: key
      } : null;
      if (notifySpy) spyReportStart(change);
      runInTransaction(function () {
        _this._keys.remove(key);
        _this._updateHasMapEntry(key, false);
        var observable$$1 = _this._data[key];
        observable$$1.setNewValue(undefined);
        _this._data[key] = undefined;
      });
      if (notify) notifyListeners(this, change);
      if (notifySpy) spyReportEnd();
      return true;
    }
    return false;
  };
  ObservableMap.prototype._updateHasMapEntry = function (key, value) {
    // optimization; don't fill the hasMap if we are not observing, or remove entry if there are no observers anymore
    var entry = this._hasMap[key];
    if (entry) {
      entry.setNewValue(value);
    } else {
      entry = this._hasMap[key] = new ObservableValue(value, referenceEnhancer, this.name + "." + key + "?", false);
    }
    return entry;
  };
  ObservableMap.prototype._updateValue = function (name, newValue) {
    var observable$$1 = this._data[name];
    newValue = observable$$1.prepareNewValue(newValue);
    if (newValue !== UNCHANGED) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        type: "update",
        object: this,
        oldValue: observable$$1.value,
        name: name,
        newValue: newValue
      } : null;
      if (notifySpy) spyReportStart(change);
      observable$$1.setNewValue(newValue);
      if (notify) notifyListeners(this, change);
      if (notifySpy) spyReportEnd();
    }
  };
  ObservableMap.prototype._addValue = function (name, newValue) {
    var _this = this;
    runInTransaction(function () {
      var observable$$1 = _this._data[name] = new ObservableValue(newValue, _this.enhancer, _this.name + "." + name, false);
      newValue = observable$$1.value; // value might have been changed
      _this._updateHasMapEntry(name, true);
      _this._keys.push(name);
    });
    var notifySpy = isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      type: "add",
      object: this,
      name: name,
      newValue: newValue
    } : null;
    if (notifySpy) spyReportStart(change);
    if (notify) notifyListeners(this, change);
    if (notifySpy) spyReportEnd();
  };
  ObservableMap.prototype.get = function (key) {
    key = "" + key;
    if (this.has(key)) return this.dehanceValue(this._data[key].get());
    return this.dehanceValue(undefined);
  };
  ObservableMap.prototype.dehanceValue = function (value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }
    return value;
  };
  ObservableMap.prototype.keys = function () {
    return arrayAsIterator(this._keys.slice());
  };
  ObservableMap.prototype.values = function () {
    return arrayAsIterator(this._keys.map(this.get, this));
  };
  ObservableMap.prototype.entries = function () {
    var _this = this;
    return arrayAsIterator(this._keys.map(function (key) {
      return [key, _this.get(key)];
    }));
  };
  ObservableMap.prototype.forEach = function (callback, thisArg) {
    var _this = this;
    this.keys().forEach(function (key) {
      return callback.call(thisArg, _this.get(key), key, _this);
    });
  };
  /** Merge another object into this object, returns this. */
  ObservableMap.prototype.merge = function (other) {
    var _this = this;
    if (isObservableMap(other)) {
      other = other.toJS();
    }
    runInTransaction(function () {
      if (isPlainObject(other)) Object.keys(other).forEach(function (key) {
        return _this.set(key, other[key]);
      });else if (Array.isArray(other)) other.forEach(function (_a) {
        var key = _a[0],
            value = _a[1];
        return _this.set(key, value);
      });else if (isES6Map(other)) other.forEach(function (value, key) {
        return _this.set(key, value);
      });else if (other !== null && other !== undefined) fail("Cannot initialize map from " + other);
    });
    return this;
  };
  ObservableMap.prototype.clear = function () {
    var _this = this;
    runInTransaction(function () {
      untracked(function () {
        _this.keys().forEach(_this.delete, _this);
      });
    });
  };
  ObservableMap.prototype.replace = function (values) {
    var _this = this;
    runInTransaction(function () {
      _this.clear();
      _this.merge(values);
    });
    return this;
  };
  Object.defineProperty(ObservableMap.prototype, "size", {
    get: function () {
      return this._keys.length;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Returns a shallow non observable object clone of this map.
   * Note that the values might still be observable. For a deep clone use mobx.toJS.
   */
  ObservableMap.prototype.toJS = function () {
    var _this = this;
    var res = {};
    this.keys().forEach(function (key) {
      return res[key] = _this.get(key);
    });
    return res;
  };
  ObservableMap.prototype.toJSON = function () {
    // Used by JSON.stringify
    return this.toJS();
  };
  ObservableMap.prototype.isValidKey = function (key) {
    if (key === null || key === undefined) return false;
    if (typeof key === "string" || typeof key === "number" || typeof key === "boolean") return true;
    return false;
  };
  ObservableMap.prototype.assertValidKey = function (key) {
    if (!this.isValidKey(key)) throw new Error("[mobx.map] Invalid key: '" + key + "', only strings, numbers and booleans are accepted as key in observable maps.");
  };
  ObservableMap.prototype.toString = function () {
    var _this = this;
    return this.name + "[{ " + this.keys().map(function (key) {
      return key + ": " + ("" + _this.get(key));
    }).join(", ") + " }]";
  };
  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */
  ObservableMap.prototype.observe = function (listener, fireImmediately) {
    invariant(fireImmediately !== true, getMessage("m033"));
    return registerListener(this, listener);
  };
  ObservableMap.prototype.intercept = function (handler) {
    return registerInterceptor(this, handler);
  };
  return ObservableMap;
}();
declareIterator(ObservableMap.prototype, function () {
  return this.entries();
});
function map(initialValues) {
  deprecated("`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead");
  return observable.map(initialValues);
}
/* 'var' fixes small-build issue */
var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);

var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
function getGlobal() {
  return typeof window !== "undefined" ? window : global;
}
function getNextId() {
  return ++globalState.mobxGuid;
}
function fail(message, thing) {
  invariant(false, message, thing);
  throw "X"; // unreachable
}
function invariant(check, message, thing) {
  if (!check) throw new Error("[mobx] Invariant failed: " + message + (thing ? " in '" + thing + "'" : ""));
}
/**
 * Prints a deprecation message, but only one time.
 * Returns false if the deprecated message was already printed before
 */
var deprecatedMessages = [];
function deprecated(msg) {
  if (deprecatedMessages.indexOf(msg) !== -1) return false;
  deprecatedMessages.push(msg);
  console.error("[mobx] Deprecated: " + msg);
  return true;
}
/**
 * Makes sure that the provided function is invoked at most once.
 */
function once(func) {
  var invoked = false;
  return function () {
    if (invoked) return;
    invoked = true;
    return func.apply(this, arguments);
  };
}
var noop = function () {};
function unique(list) {
  var res = [];
  list.forEach(function (item) {
    if (res.indexOf(item) === -1) res.push(item);
  });
  return res;
}
function joinStrings(things, limit, separator) {
  if (limit === void 0) {
    limit = 100;
  }
  if (separator === void 0) {
    separator = " - ";
  }
  if (!things) return "";
  var sliced = things.slice(0, limit);
  return "" + sliced.join(separator) + (things.length > limit ? " (... and " + (things.length - limit) + "more)" : "");
}
function isObject(value) {
  return value !== null && typeof value === "object";
}
function isPlainObject(value) {
  if (value === null || typeof value !== "object") return false;
  var proto = Object.getPrototypeOf(value);
  return proto === Object.prototype || proto === null;
}
function objectAssign() {
  var res = arguments[0];
  for (var i = 1, l = arguments.length; i < l; i++) {
    var source = arguments[i];
    for (var key in source) if (hasOwnProperty(source, key)) {
      res[key] = source[key];
    }
  }
  return res;
}
var prototypeHasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwnProperty(object, propName) {
  return prototypeHasOwnProperty.call(object, propName);
}
function makeNonEnumerable(object, propNames) {
  for (var i = 0; i < propNames.length; i++) {
    addHiddenProp(object, propNames[i], object[propNames[i]]);
  }
}
function addHiddenProp(object, propName, value) {
  Object.defineProperty(object, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value: value
  });
}
function addHiddenFinalProp(object, propName, value) {
  Object.defineProperty(object, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value: value
  });
}
function isPropertyConfigurable(object, prop) {
  var descriptor = Object.getOwnPropertyDescriptor(object, prop);
  return !descriptor || descriptor.configurable !== false && descriptor.writable !== false;
}
function assertPropertyConfigurable(object, prop) {
  invariant(isPropertyConfigurable(object, prop), "Cannot make property '" + prop + "' observable, it is not configurable and writable in the target object");
}
function getEnumerableKeys(obj) {
  var res = [];
  for (var key in obj) res.push(key);
  return res;
}
/**
 * Naive deepEqual. Doesn't check for prototype, non-enumerable or out-of-range properties on arrays.
 * If you have such a case, you probably should use this function but something fancier :).
 */
function deepEqual(a, b) {
  if (a === null && b === null) return true;
  if (a === undefined && b === undefined) return true;
  if (typeof a !== "object") return a === b;
  var aIsArray = isArrayLike(a);
  var aIsMap = isMapLike(a);
  if (aIsArray !== isArrayLike(b)) {
    return false;
  } else if (aIsMap !== isMapLike(b)) {
    return false;
  } else if (aIsArray) {
    if (a.length !== b.length) return false;
    for (var i = a.length - 1; i >= 0; i--) if (!deepEqual(a[i], b[i])) return false;
    return true;
  } else if (aIsMap) {
    if (a.size !== b.size) return false;
    var equals_1 = true;
    a.forEach(function (value, key) {
      equals_1 = equals_1 && deepEqual(b.get(key), value);
    });
    return equals_1;
  } else if (typeof a === "object" && typeof b === "object") {
    if (a === null || b === null) return false;
    if (isMapLike(a) && isMapLike(b)) {
      if (a.size !== b.size) return false;
      // Freaking inefficient.... Create PR if you run into this :) Much appreciated!
      return deepEqual(observable.shallowMap(a).entries(), observable.shallowMap(b).entries());
    }
    if (getEnumerableKeys(a).length !== getEnumerableKeys(b).length) return false;
    for (var prop in a) {
      if (!(prop in b)) return false;
      if (!deepEqual(a[prop], b[prop])) return false;
    }
    return true;
  }
  return false;
}
function createInstanceofPredicate(name, clazz) {
  var propName = "isMobX" + name;
  clazz.prototype[propName] = true;
  return function (x) {
    return isObject(x) && x[propName] === true;
  };
}
/**
 * Returns whether the argument is an array, disregarding observability.
 */
function isArrayLike(x) {
  return Array.isArray(x) || isObservableArray(x);
}
function isMapLike(x) {
  return isES6Map(x) || isObservableMap(x);
}
function isES6Map(thing) {
  if (getGlobal().Map !== undefined && thing instanceof getGlobal().Map) return true;
  return false;
}
function primitiveSymbol() {
  return typeof Symbol === "function" && Symbol.toPrimitive || "@@toPrimitive";
}
function toPrimitive(value) {
  return value === null ? null : typeof value === "object" ? "" + value : value;
}

/**
 * These values will persist if global state is reset
 */
var persistentKeys = ["mobxGuid", "resetId", "spyListeners", "strictMode", "runId"];
var MobXGlobals = function () {
  function MobXGlobals() {
    /**
     * MobXGlobals version.
     * MobX compatiblity with other versions loaded in memory as long as this version matches.
     * It indicates that the global state still stores similar information
     */
    this.version = 5;
    /**
     * Currently running derivation
     */
    this.trackingDerivation = null;
    /**
     * Are we running a computation currently? (not a reaction)
     */
    this.computationDepth = 0;
    /**
     * Each time a derivation is tracked, it is assigned a unique run-id
     */
    this.runId = 0;
    /**
     * 'guid' for general purpose. Will be persisted amongst resets.
     */
    this.mobxGuid = 0;
    /**
     * Are we in a batch block? (and how many of them)
     */
    this.inBatch = 0;
    /**
     * Observables that don't have observers anymore, and are about to be
     * suspended, unless somebody else accesses it in the same batch
     *
     * @type {IObservable[]}
     */
    this.pendingUnobservations = [];
    /**
     * List of scheduled, not yet executed, reactions.
     */
    this.pendingReactions = [];
    /**
     * Are we currently processing reactions?
     */
    this.isRunningReactions = false;
    /**
     * Is it allowed to change observables at this point?
     * In general, MobX doesn't allow that when running computations and React.render.
     * To ensure that those functions stay pure.
     */
    this.allowStateChanges = true;
    /**
     * If strict mode is enabled, state changes are by default not allowed
     */
    this.strictMode = false;
    /**
     * Used by createTransformer to detect that the global state has been reset.
     */
    this.resetId = 0;
    /**
     * Spy callbacks
     */
    this.spyListeners = [];
    /**
     * Globally attached error handlers that react specifically to errors in reactions
     */
    this.globalReactionErrorHandlers = [];
  }
  return MobXGlobals;
}();
var globalState = new MobXGlobals();
var shareGlobalStateCalled = false;
var runInIsolationCalled = false;
var warnedAboutMultipleInstances = false;
{
  var global_1 = getGlobal();
  if (!global_1.__mobxInstanceCount) {
    global_1.__mobxInstanceCount = 1;
  } else {
    global_1.__mobxInstanceCount++;
    setTimeout(function () {
      if (!shareGlobalStateCalled && !runInIsolationCalled && !warnedAboutMultipleInstances) {
        warnedAboutMultipleInstances = true;
        console.warn("[mobx] Warning: there are multiple mobx instances active. This might lead to unexpected results. See https://github.com/mobxjs/mobx/issues/1082 for details.");
      }
    });
  }
}
function isolateGlobalState() {
  runInIsolationCalled = true;
  getGlobal().__mobxInstanceCount--;
}
function shareGlobalState() {
  // TODO: remove in 4.0; just use peer dependencies instead.
  deprecated("Using `shareGlobalState` is not recommended, use peer dependencies instead. See https://github.com/mobxjs/mobx/issues/1082 for details.");
  shareGlobalStateCalled = true;
  var global = getGlobal();
  var ownState = globalState;
  /**
   * Backward compatibility check
   */
  if (global.__mobservableTrackingStack || global.__mobservableViewStack) throw new Error("[mobx] An incompatible version of mobservable is already loaded.");
  if (global.__mobxGlobal && global.__mobxGlobal.version !== ownState.version) throw new Error("[mobx] An incompatible version of mobx is already loaded.");
  if (global.__mobxGlobal) globalState = global.__mobxGlobal;else global.__mobxGlobal = ownState;
}
function getGlobalState() {
  return globalState;
}

/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */
function resetGlobalState() {
  globalState.resetId++;
  var defaultGlobals = new MobXGlobals();
  for (var key in defaultGlobals) if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];
  globalState.allowStateChanges = !globalState.strictMode;
}

function hasObservers(observable) {
  return observable.observers && observable.observers.length > 0;
}
function getObservers(observable) {
  return observable.observers;
}
function addObserver(observable, node) {
  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
  // invariantObservers(observable);
  var l = observable.observers.length;
  if (l) {
    // because object assignment is relatively expensive, let's not store data about index 0.
    observable.observersIndexes[node.__mapid] = l;
  }
  observable.observers[l] = node;
  if (observable.lowestObserverState > node.dependenciesState) observable.lowestObserverState = node.dependenciesState;
  // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}
function removeObserver(observable, node) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
  // invariantObservers(observable);
  if (observable.observers.length === 1) {
    // deleting last observer
    observable.observers.length = 0;
    queueForUnobservation(observable);
  } else {
    // deleting from _observersIndexes is straight forward, to delete from _observers, let's swap `node` with last element
    var list = observable.observers;
    var map = observable.observersIndexes;
    var filler = list.pop(); // get last element, which should fill the place of `node`, so the array doesn't have holes
    if (filler !== node) {
      // otherwise node was the last element, which already got removed from array
      var index = map[node.__mapid] || 0; // getting index of `node`. this is the only place we actually use map.
      if (index) {
        // map store all indexes but 0, see comment in `addObserver`
        map[filler.__mapid] = index;
      } else {
        delete map[filler.__mapid];
      }
      list[index] = filler;
    }
    delete map[node.__mapid];
  }
  // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
}
function queueForUnobservation(observable) {
  if (!observable.isPendingUnobservation) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
    observable.isPendingUnobservation = true;
    globalState.pendingUnobservations.push(observable);
  }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */
function startBatch() {
  globalState.inBatch++;
}
function endBatch() {
  if (--globalState.inBatch === 0) {
    runReactions();
    // the batch is actually about to finish, all unobserving should happen here.
    var list = globalState.pendingUnobservations;
    for (var i = 0; i < list.length; i++) {
      var observable = list[i];
      observable.isPendingUnobservation = false;
      if (observable.observers.length === 0) {
        observable.onBecomeUnobserved();
        // NOTE: onBecomeUnobserved might push to `pendingUnobservations`
      }
    }
    globalState.pendingUnobservations = [];
  }
}
function reportObserved(observable) {
  var derivation = globalState.trackingDerivation;
  if (derivation !== null) {
    /**
     * Simple optimization, give each derivation run an unique id (runId)
     * Check if last time this observable was accessed the same runId is used
     * if this is the case, the relation is already known
     */
    if (derivation.runId !== observable.lastAccessedBy) {
      observable.lastAccessedBy = derivation.runId;
      derivation.newObserving[derivation.unboundDepsCount++] = observable;
    }
  } else if (observable.observers.length === 0) {
    queueForUnobservation(observable);
  }
}
/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */
// Called by Atom when its value changes
function propagateChanged(observable) {
  // invariantLOS(observable, "changed start");
  if (observable.lowestObserverState === exports.IDerivationState.STALE) return;
  observable.lowestObserverState = exports.IDerivationState.STALE;
  var observers = observable.observers;
  var i = observers.length;
  while (i--) {
    var d = observers[i];
    if (d.dependenciesState === exports.IDerivationState.UP_TO_DATE) d.onBecomeStale();
    d.dependenciesState = exports.IDerivationState.STALE;
  }
  // invariantLOS(observable, "changed end");
}
// Called by ComputedValue when it recalculate and its value changed
function propagateChangeConfirmed(observable) {
  // invariantLOS(observable, "confirmed start");
  if (observable.lowestObserverState === exports.IDerivationState.STALE) return;
  observable.lowestObserverState = exports.IDerivationState.STALE;
  var observers = observable.observers;
  var i = observers.length;
  while (i--) {
    var d = observers[i];
    if (d.dependenciesState === exports.IDerivationState.POSSIBLY_STALE) d.dependenciesState = exports.IDerivationState.STALE;else if (d.dependenciesState === exports.IDerivationState.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.
    ) observable.lowestObserverState = exports.IDerivationState.UP_TO_DATE;
  }
  // invariantLOS(observable, "confirmed end");
}
// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
function propagateMaybeChanged(observable) {
  // invariantLOS(observable, "maybe start");
  if (observable.lowestObserverState !== exports.IDerivationState.UP_TO_DATE) return;
  observable.lowestObserverState = exports.IDerivationState.POSSIBLY_STALE;
  var observers = observable.observers;
  var i = observers.length;
  while (i--) {
    var d = observers[i];
    if (d.dependenciesState === exports.IDerivationState.UP_TO_DATE) {
      d.dependenciesState = exports.IDerivationState.POSSIBLY_STALE;
      d.onBecomeStale();
    }
  }
  // invariantLOS(observable, "maybe end");
}

(function (IDerivationState) {
  // before being run or (outside batch and not being observed)
  // at this point derivation is not holding any data about dependency tree
  IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
  // no shallow dependency changed since last computation
  // won't recalculate derivation
  // this is what makes mobx fast
  IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
  // some deep dependency changed, but don't know if shallow dependency changed
  // will require to check first if UP_TO_DATE or POSSIBLY_STALE
  // currently only ComputedValue will propagate POSSIBLY_STALE
  //
  // having this state is second big optimization:
  // don't have to recompute on every dependency change, but only when it's needed
  IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
  // A shallow dependency has changed since last computation and the derivation
  // will need to recompute when it's needed next.
  IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
})(exports.IDerivationState || (exports.IDerivationState = {}));
var CaughtException = function () {
  function CaughtException(cause) {
    this.cause = cause;
    // Empty
  }
  return CaughtException;
}();
function isCaughtException(e) {
  return e instanceof CaughtException;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */
function shouldCompute(derivation) {
  switch (derivation.dependenciesState) {
    case exports.IDerivationState.UP_TO_DATE:
      return false;
    case exports.IDerivationState.NOT_TRACKING:
    case exports.IDerivationState.STALE:
      return true;
    case exports.IDerivationState.POSSIBLY_STALE:
      {
        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
        var obs = derivation.observing,
            l = obs.length;
        for (var i = 0; i < l; i++) {
          var obj = obs[i];
          if (isComputedValue(obj)) {
            try {
              obj.get();
            } catch (e) {
              // we are not interested in the value *or* exception at this moment, but if there is one, notify all
              untrackedEnd(prevUntracked);
              return true;
            }
            // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
            // and `derivation` is an observer of `obj`
            if (derivation.dependenciesState === exports.IDerivationState.STALE) {
              untrackedEnd(prevUntracked);
              return true;
            }
          }
        }
        changeDependenciesStateTo0(derivation);
        untrackedEnd(prevUntracked);
        return false;
      }
  }
}
function isComputingDerivation() {
  return globalState.trackingDerivation !== null; // filter out actions inside computations
}
function checkIfStateModificationsAreAllowed(atom) {
  var hasObservers$$1 = atom.observers.length > 0;
  // Should never be possible to change an observed observable from inside computed, see #798
  if (globalState.computationDepth > 0 && hasObservers$$1) fail(getMessage("m031") + atom.name);
  // Should not be possible to change observed state outside strict mode, except during initialization, see #563
  if (!globalState.allowStateChanges && hasObservers$$1) fail(getMessage(globalState.strictMode ? "m030a" : "m030b") + atom.name);
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */
function trackDerivedFunction(derivation, f, context) {
  // pre allocate array allocation + room for variation in deps
  // array will be trimmed by bindDependencies
  changeDependenciesStateTo0(derivation);
  derivation.newObserving = new Array(derivation.observing.length + 100);
  derivation.unboundDepsCount = 0;
  derivation.runId = ++globalState.runId;
  var prevTracking = globalState.trackingDerivation;
  globalState.trackingDerivation = derivation;
  var result;
  try {
    result = f.call(context);
  } catch (e) {
    result = new CaughtException(e);
  }
  globalState.trackingDerivation = prevTracking;
  bindDependencies(derivation);
  return result;
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */
function bindDependencies(derivation) {
  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
  var prevObserving = derivation.observing;
  var observing = derivation.observing = derivation.newObserving;
  var lowestNewObservingDerivationState = exports.IDerivationState.UP_TO_DATE;
  // Go through all new observables and check diffValue: (this list can contain duplicates):
  //   0: first occurrence, change to 1 and keep it
  //   1: extra occurrence, drop it
  var i0 = 0,
      l = derivation.unboundDepsCount;
  for (var i = 0; i < l; i++) {
    var dep = observing[i];
    if (dep.diffValue === 0) {
      dep.diffValue = 1;
      if (i0 !== i) observing[i0] = dep;
      i0++;
    }
    // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
    // not hitting the condition
    if (dep.dependenciesState > lowestNewObservingDerivationState) {
      lowestNewObservingDerivationState = dep.dependenciesState;
    }
  }
  observing.length = i0;
  derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
  //   0: it's not in new observables, unobserve it
  //   1: it keeps being observed, don't want to notify it. change to 0
  l = prevObserving.length;
  while (l--) {
    var dep = prevObserving[l];
    if (dep.diffValue === 0) {
      removeObserver(dep, derivation);
    }
    dep.diffValue = 0;
  }
  // Go through all new observables and check diffValue: (now it should be unique)
  //   0: it was set to 0 in last loop. don't need to do anything.
  //   1: it wasn't observed, let's observe it. set back to 0
  while (i0--) {
    var dep = observing[i0];
    if (dep.diffValue === 1) {
      dep.diffValue = 0;
      addObserver(dep, derivation);
    }
  }
  // Some new observed derivations may become stale during this derivation computation
  // so they have had no chance to propagate staleness (#916)
  if (lowestNewObservingDerivationState !== exports.IDerivationState.UP_TO_DATE) {
    derivation.dependenciesState = lowestNewObservingDerivationState;
    derivation.onBecomeStale();
  }
}
function clearObserving(derivation) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
  var obs = derivation.observing;
  derivation.observing = [];
  var i = obs.length;
  while (i--) removeObserver(obs[i], derivation);
  derivation.dependenciesState = exports.IDerivationState.NOT_TRACKING;
}
function untracked(action) {
  var prev = untrackedStart();
  var res = action();
  untrackedEnd(prev);
  return res;
}
function untrackedStart() {
  var prev = globalState.trackingDerivation;
  globalState.trackingDerivation = null;
  return prev;
}
function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */
function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState === exports.IDerivationState.UP_TO_DATE) return;
  derivation.dependenciesState = exports.IDerivationState.UP_TO_DATE;
  var obs = derivation.observing;
  var i = obs.length;
  while (i--) obs[i].lowestObserverState = exports.IDerivationState.UP_TO_DATE;
}

var Reaction = function () {
  function Reaction(name, onInvalidate) {
    if (name === void 0) {
      name = "Reaction@" + getNextId();
    }
    this.name = name;
    this.onInvalidate = onInvalidate;
    this.observing = []; // nodes we are looking at. Our value depends on these nodes
    this.newObserving = [];
    this.dependenciesState = exports.IDerivationState.NOT_TRACKING;
    this.diffValue = 0;
    this.runId = 0;
    this.unboundDepsCount = 0;
    this.__mapid = "#" + getNextId();
    this.isDisposed = false;
    this._isScheduled = false;
    this._isTrackPending = false;
    this._isRunning = false;
  }
  Reaction.prototype.onBecomeStale = function () {
    this.schedule();
  };
  Reaction.prototype.schedule = function () {
    if (!this._isScheduled) {
      this._isScheduled = true;
      globalState.pendingReactions.push(this);
      runReactions();
    }
  };
  Reaction.prototype.isScheduled = function () {
    return this._isScheduled;
  };
  /**
   * internal, use schedule() if you intend to kick off a reaction
   */
  Reaction.prototype.runReaction = function () {
    if (!this.isDisposed) {
      startBatch();
      this._isScheduled = false;
      if (shouldCompute(this)) {
        this._isTrackPending = true;
        this.onInvalidate();
        if (this._isTrackPending && isSpyEnabled()) {
          // onInvalidate didn't trigger track right away..
          spyReport({
            object: this,
            type: "scheduled-reaction"
          });
        }
      }
      endBatch();
    }
  };
  Reaction.prototype.track = function (fn) {
    startBatch();
    var notify = isSpyEnabled();
    var startTime;
    if (notify) {
      startTime = Date.now();
      spyReportStart({
        object: this,
        type: "reaction",
        fn: fn
      });
    }
    this._isRunning = true;
    var result = trackDerivedFunction(this, fn, undefined);
    this._isRunning = false;
    this._isTrackPending = false;
    if (this.isDisposed) {
      // disposed during last run. Clean up everything that was bound after the dispose call.
      clearObserving(this);
    }
    if (isCaughtException(result)) this.reportExceptionInDerivation(result.cause);
    if (notify) {
      spyReportEnd({
        time: Date.now() - startTime
      });
    }
    endBatch();
  };
  Reaction.prototype.reportExceptionInDerivation = function (error) {
    var _this = this;
    if (this.errorHandler) {
      this.errorHandler(error, this);
      return;
    }
    var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this;
    var messageToUser = getMessage("m037");
    console.error(message || messageToUser /* latter will not be true, make sure uglify doesn't remove */, error);
    /** If debugging brought you here, please, read the above message :-). Tnx! */
    if (isSpyEnabled()) {
      spyReport({
        type: "error",
        message: message,
        error: error,
        object: this
      });
    }
    globalState.globalReactionErrorHandlers.forEach(function (f) {
      return f(error, _this);
    });
  };
  Reaction.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      if (!this._isRunning) {
        // if disposed while running, clean up later. Maybe not optimal, but rare case
        startBatch();
        clearObserving(this);
        endBatch();
      }
    }
  };
  Reaction.prototype.getDisposer = function () {
    var r = this.dispose.bind(this);
    r.$mobx = this;
    r.onError = registerErrorHandler;
    return r;
  };
  Reaction.prototype.toString = function () {
    return "Reaction[" + this.name + "]";
  };
  Reaction.prototype.whyRun = function () {
    var observing = unique(this._isRunning ? this.newObserving : this.observing).map(function (dep) {
      return dep.name;
    });
    return "\nWhyRun? reaction '" + this.name + "':\n * Status: [" + (this.isDisposed ? "stopped" : this._isRunning ? "running" : this.isScheduled() ? "scheduled" : "idle") + "]\n * This reaction will re-run if any of the following observables changes:\n    " + joinStrings(observing) + "\n    " + (this._isRunning ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n\t" + getMessage("m038") + "\n";
  };
  return Reaction;
}();
function registerErrorHandler(handler) {
  invariant(this && this.$mobx && isReaction(this.$mobx), "Invalid `this`");
  invariant(!this.$mobx.errorHandler, "Only one onErrorHandler can be registered");
  this.$mobx.errorHandler = handler;
}
function onReactionError(handler) {
  globalState.globalReactionErrorHandlers.push(handler);
  return function () {
    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
    if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);
  };
}
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function (f) {
  return f();
};
function runReactions() {
  // Trampolining, if runReactions are already running, new reactions will be picked up
  if (globalState.inBatch > 0 || globalState.isRunningReactions) return;
  reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
  globalState.isRunningReactions = true;
  var allReactions = globalState.pendingReactions;
  var iterations = 0;
  // While running reactions, new reactions might be triggered.
  // Hence we work with two variables and check whether
  // we converge to no remaining reactions after a while.
  while (allReactions.length > 0) {
    if (++iterations === MAX_REACTION_ITERATIONS) {
      console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]));
      allReactions.splice(0); // clear reactions
    }
    var remainingReactions = allReactions.splice(0);
    for (var i = 0, l = remainingReactions.length; i < l; i++) remainingReactions[i].runReaction();
  }
  globalState.isRunningReactions = false;
}
var isReaction = createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;
  reactionScheduler = function (f) {
    return fn(function () {
      return baseScheduler(f);
    });
  };
}

function asReference(value) {
  deprecated("asReference is deprecated, use observable.ref instead");
  return observable.ref(value);
}
function asStructure(value) {
  deprecated("asStructure is deprecated. Use observable.struct, computed.struct or reaction options instead.");
  return observable.struct(value);
}
function asFlat(value) {
  deprecated("asFlat is deprecated, use observable.shallow instead");
  return observable.shallow(value);
}
function asMap(data) {
  deprecated("asMap is deprecated, use observable.map or observable.shallowMap instead");
  return observable.map(data || {});
}

function createComputedDecorator(equals) {
  return createClassPropertyDecorator(function (target, name, _, __, originalDescriptor) {
    invariant(typeof originalDescriptor !== "undefined", getMessage("m009"));
    invariant(typeof originalDescriptor.get === "function", getMessage("m010"));
    var adm = asObservableObject(target, "");
    defineComputedProperty(adm, name, originalDescriptor.get, originalDescriptor.set, equals, false);
  }, function (name) {
    var observable = this.$mobx.values[name];
    if (observable === undefined // See #505
    ) return undefined;
    return observable.get();
  }, function (name, value) {
    this.$mobx.values[name].set(value);
  }, false, false);
}
var computedDecorator = createComputedDecorator(comparer.default);
var computedStructDecorator = createComputedDecorator(comparer.structural);
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */
var computed = function computed(arg1, arg2, arg3) {
  if (typeof arg2 === "string") {
    return computedDecorator.apply(null, arguments);
  }
  invariant(typeof arg1 === "function", getMessage("m011"));
  invariant(arguments.length < 3, getMessage("m012"));
  var opts = typeof arg2 === "object" ? arg2 : {};
  opts.setter = typeof arg2 === "function" ? arg2 : opts.setter;
  var equals = opts.equals ? opts.equals : opts.compareStructural || opts.struct ? comparer.structural : comparer.default;
  return new ComputedValue(arg1, opts.context, equals, opts.name || arg1.name || "", opts.setter);
};
computed.struct = computedStructDecorator;
computed.equals = createComputedDecorator;

function getAtom(thing, property) {
  if (typeof thing === "object" && thing !== null) {
    if (isObservableArray(thing)) {
      invariant(property === undefined, getMessage("m036"));
      return thing.$mobx.atom;
    }
    if (isObservableMap(thing)) {
      var anyThing = thing;
      if (property === undefined) return getAtom(anyThing._keys);
      var observable = anyThing._data[property] || anyThing._hasMap[property];
      invariant(!!observable, "the entry '" + property + "' does not exist in the observable map '" + getDebugName(thing) + "'");
      return observable;
    }
    // Initializers run lazily when transpiling to babel, so make sure they are run...
    runLazyInitializers(thing);
    if (property && !thing.$mobx) thing[property]; // See #1072 // TODO: remove in 4.0
    if (isObservableObject(thing)) {
      if (!property) return fail("please specify a property");
      var observable = thing.$mobx.values[property];
      invariant(!!observable, "no observable property '" + property + "' found on the observable object '" + getDebugName(thing) + "'");
      return observable;
    }
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
  } else if (typeof thing === "function") {
    if (isReaction(thing.$mobx)) {
      // disposer function
      return thing.$mobx;
    }
  }
  return fail("Cannot obtain atom from " + thing);
}
function getAdministration(thing, property) {
  invariant(thing, "Expecting some object");
  if (property !== undefined) return getAdministration(getAtom(thing, property));
  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;
  if (isObservableMap(thing)) return thing;
  // Initializers run lazily when transpiling to babel, so make sure they are run...
  runLazyInitializers(thing);
  if (thing.$mobx) return thing.$mobx;
  invariant(false, "Cannot obtain administration from " + thing);
}
function getDebugName(thing, property) {
  var named;
  if (property !== undefined) named = getAtom(thing, property);else if (isObservableObject(thing) || isObservableMap(thing)) named = getAdministration(thing);else named = getAtom(thing); // valid for arrays as well
  return named.name;
}

function isComputed(value, property) {
  if (value === null || value === undefined) return false;
  if (property !== undefined) {
    if (isObservableObject(value) === false) return false;
    var atom = getAtom(value, property);
    return isComputedValue(atom);
  }
  return isComputedValue(value);
}

function observe(thing, propOrCb, cbOrFire, fireImmediately) {
  if (typeof cbOrFire === "function") return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);
}
function observeObservable(thing, listener, fireImmediately) {
  return getAdministration(thing).observe(listener, fireImmediately);
}
function observeObservableProperty(thing, property, listener, fireImmediately) {
  return getAdministration(thing, property).observe(listener, fireImmediately);
}

function intercept(thing, propOrHandler, handler) {
  if (typeof handler === "function") return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);
}
function interceptInterceptable(thing, handler) {
  return getAdministration(thing).intercept(handler);
}
function interceptProperty(thing, property, handler) {
  return getAdministration(thing, property).intercept(handler);
}

/**
 * expr can be used to create temporarily views inside views.
 * This can be improved to improve performance if a value changes often, but usually doesn't affect the outcome of an expression.
 *
 * In the following example the expression prevents that a component is rerender _each time_ the selection changes;
 * instead it will only rerenders when the current todo is (de)selected.
 *
 * reactiveComponent((props) => {
 *     const todo = props.todo;
 *     const isSelected = mobx.expr(() => props.viewState.selection === todo);
 *     return <div className={isSelected ? "todo todo-selected" : "todo"}>{todo.title}</div>
 * });
 *
 */
function expr(expr, scope) {
  if (!isComputingDerivation()) console.warn(getMessage("m013"));
  // optimization: would be more efficient if the expr itself wouldn't be evaluated first on the next change, but just a 'changed' signal would be fired
  return computed(expr, { context: scope }).get();
}

function toJS(source, detectCycles, __alreadySeen) {
  if (detectCycles === void 0) {
    detectCycles = true;
  }
  if (__alreadySeen === void 0) {
    __alreadySeen = [];
  }
  // optimization: using ES6 map would be more efficient!
  // optimization: lift this function outside toJS, this makes recursion expensive
  function cache(value) {
    if (detectCycles) __alreadySeen.push([source, value]);
    return value;
  }
  if (isObservable(source)) {
    if (detectCycles && __alreadySeen === null) __alreadySeen = [];
    if (detectCycles && source !== null && typeof source === "object") {
      for (var i = 0, l = __alreadySeen.length; i < l; i++) if (__alreadySeen[i][0] === source) return __alreadySeen[i][1];
    }
    if (isObservableArray(source)) {
      var res = cache([]);
      var toAdd = source.map(function (value) {
        return toJS(value, detectCycles, __alreadySeen);
      });
      res.length = toAdd.length;
      for (var i = 0, l = toAdd.length; i < l; i++) res[i] = toAdd[i];
      return res;
    }
    if (isObservableObject(source)) {
      var res = cache({});
      for (var key in source) res[key] = toJS(source[key], detectCycles, __alreadySeen);
      return res;
    }
    if (isObservableMap(source)) {
      var res_1 = cache({});
      source.forEach(function (value, key) {
        return res_1[key] = toJS(value, detectCycles, __alreadySeen);
      });
      return res_1;
    }
    if (isObservableValue(source)) return toJS(source.get(), detectCycles, __alreadySeen);
  }
  return source;
}

function createTransformer(transformer, onCleanup) {
  invariant(typeof transformer === "function" && transformer.length < 2, "createTransformer expects a function that accepts one argument");
  // Memoizes: object id -> reactive view that applies transformer to the object
  var objectCache = {};
  // If the resetId changes, we will clear the object cache, see #163
  // This construction is used to avoid leaking refs to the objectCache directly
  var resetId = globalState.resetId;
  // Local transformer class specifically for this transformer
  var Transformer = function (_super) {
    __extends(Transformer, _super);
    function Transformer(sourceIdentifier, sourceObject) {
      var _this = _super.call(this, function () {
        return transformer(sourceObject);
      }, undefined, comparer.default, "Transformer-" + transformer.name + "-" + sourceIdentifier, undefined) || this;
      _this.sourceIdentifier = sourceIdentifier;
      _this.sourceObject = sourceObject;
      return _this;
    }
    Transformer.prototype.onBecomeUnobserved = function () {
      var lastValue = this.value;
      _super.prototype.onBecomeUnobserved.call(this);
      delete objectCache[this.sourceIdentifier];
      if (onCleanup) onCleanup(lastValue, this.sourceObject);
    };
    return Transformer;
  }(ComputedValue);
  return function (object) {
    if (resetId !== globalState.resetId) {
      objectCache = {};
      resetId = globalState.resetId;
    }
    var identifier = getMemoizationId(object);
    var reactiveTransformer = objectCache[identifier];
    if (reactiveTransformer) return reactiveTransformer.get();
    // Not in cache; create a reactive view
    reactiveTransformer = objectCache[identifier] = new Transformer(identifier, object);
    return reactiveTransformer.get();
  };
}
function getMemoizationId(object) {
  if (typeof object === "string" || typeof object === "number") return object;
  if (object === null || typeof object !== "object") throw new Error("[mobx] transform expected some kind of object or primitive value, got: " + object);
  var tid = object.$transformId;
  if (tid === undefined) {
    tid = getNextId();
    addHiddenProp(object, "$transformId", tid);
  }
  return tid;
}

function log(msg) {
  console.log(msg);
  return msg;
}
function whyRun(thing, prop) {
  switch (arguments.length) {
    case 0:
      thing = globalState.trackingDerivation;
      if (!thing) return log(getMessage("m024"));
      break;
    case 2:
      thing = getAtom(thing, prop);
      break;
  }
  thing = getAtom(thing);
  if (isComputedValue(thing)) return log(thing.whyRun());else if (isReaction(thing)) return log(thing.whyRun());
  return fail(getMessage("m025"));
}

function getDependencyTree(thing, property) {
  return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
  var result = {
    name: node.name
  };
  if (node.observing && node.observing.length > 0) result.dependencies = unique(node.observing).map(nodeToDependencyTree);
  return result;
}
function getObserverTree(thing, property) {
  return nodeToObserverTree(getAtom(thing, property));
}
function nodeToObserverTree(node) {
  var result = {
    name: node.name
  };
  if (hasObservers(node)) result.observers = getObservers(node).map(nodeToObserverTree);
  return result;
}

function interceptReads(thing, propOrHandler, handler) {
  var target;
  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
    target = getAdministration(thing);
  } else if (isObservableObject(thing)) {
    if (typeof propOrHandler !== "string") return fail("InterceptReads can only be used with a specific property, not with an object in general");
    target = getAdministration(thing, propOrHandler);
  } else {
    return fail("Expected observable map, object or array as first array");
  }
  if (target.dehancer !== undefined) return fail("An intercept reader was already established");
  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
  return function () {
    target.dehancer = undefined;
  };
}

/**
 * (c) Michel Weststrate 2015 - 2016
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */
var extras = {
  allowStateChanges: allowStateChanges,
  deepEqual: deepEqual,
  getAtom: getAtom,
  getDebugName: getDebugName,
  getDependencyTree: getDependencyTree,
  getAdministration: getAdministration,
  getGlobalState: getGlobalState,
  getObserverTree: getObserverTree,
  interceptReads: interceptReads,
  isComputingDerivation: isComputingDerivation,
  isSpyEnabled: isSpyEnabled,
  onReactionError: onReactionError,
  reserveArrayBuffer: reserveArrayBuffer,
  resetGlobalState: resetGlobalState,
  isolateGlobalState: isolateGlobalState,
  shareGlobalState: shareGlobalState,
  spyReport: spyReport,
  spyReportEnd: spyReportEnd,
  spyReportStart: spyReportStart,
  setReactionScheduler: setReactionScheduler
};
var everything = {
  Reaction: Reaction,
  untracked: untracked,
  Atom: Atom,
  BaseAtom: BaseAtom,
  useStrict: useStrict,
  isStrictModeEnabled: isStrictModeEnabled,
  spy: spy,
  comparer: comparer,
  asReference: asReference,
  asFlat: asFlat,
  asStructure: asStructure,
  asMap: asMap,
  isModifierDescriptor: isModifierDescriptor,
  isObservableObject: isObservableObject,
  isBoxedObservable: isObservableValue,
  isObservableArray: isObservableArray,
  ObservableMap: ObservableMap,
  isObservableMap: isObservableMap,
  map: map,
  transaction: transaction,
  observable: observable,
  computed: computed,
  isObservable: isObservable,
  isComputed: isComputed,
  extendObservable: extendObservable,
  extendShallowObservable: extendShallowObservable,
  observe: observe,
  intercept: intercept,
  autorun: autorun,
  autorunAsync: autorunAsync,
  when: when,
  reaction: reaction,
  action: action,
  isAction: isAction,
  runInAction: runInAction,
  expr: expr,
  toJS: toJS,
  createTransformer: createTransformer,
  whyRun: whyRun,
  isArrayLike: isArrayLike,
  extras: extras
};
var warnedAboutDefaultExport = false;
var _loop_1 = function (p) {
  var val = everything[p];
  Object.defineProperty(everything, p, {
    get: function () {
      if (!warnedAboutDefaultExport) {
        warnedAboutDefaultExport = true;
        console.warn("Using default export (`import mobx from 'mobx'`) is deprecated " + "and won’t work in mobx@4.0.0\n" + "Use `import * as mobx from 'mobx'` instead");
      }
      return val;
    }
  });
};
for (var p in everything) {
  _loop_1(p);
}
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({ spy: spy, extras: extras });
}

exports.extras = extras;
exports['default'] = everything;
exports.Reaction = Reaction;
exports.untracked = untracked;
exports.Atom = Atom;
exports.BaseAtom = BaseAtom;
exports.useStrict = useStrict;
exports.isStrictModeEnabled = isStrictModeEnabled;
exports.spy = spy;
exports.comparer = comparer;
exports.asReference = asReference;
exports.asFlat = asFlat;
exports.asStructure = asStructure;
exports.asMap = asMap;
exports.isModifierDescriptor = isModifierDescriptor;
exports.isObservableObject = isObservableObject;
exports.isBoxedObservable = isObservableValue;
exports.isObservableArray = isObservableArray;
exports.ObservableMap = ObservableMap;
exports.isObservableMap = isObservableMap;
exports.map = map;
exports.transaction = transaction;
exports.observable = observable;
exports.IObservableFactories = IObservableFactories;
exports.computed = computed;
exports.isObservable = isObservable;
exports.isComputed = isComputed;
exports.extendObservable = extendObservable;
exports.extendShallowObservable = extendShallowObservable;
exports.observe = observe;
exports.intercept = intercept;
exports.autorun = autorun;
exports.autorunAsync = autorunAsync;
exports.when = when;
exports.reaction = reaction;
exports.action = action;
exports.isAction = isAction;
exports.runInAction = runInAction;
exports.expr = expr;
exports.toJS = toJS;
exports.createTransformer = createTransformer;
exports.whyRun = whyRun;
exports.isArrayLike = isArrayLike;
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/automagical/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = automagical;

var _global = require('2849');

var _global2 = _interopRequireDefault(_global);

var _mobxUtils = require('2850');

var _mobx = require('2851');

var Mobx = _interopRequireWildcard(_mobx);

var _rxjs = require('2852');

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

if (module && module.hot) {
  module.hot.accept(_ => _); // prevent aggressive hmrs
}

const isObservable = x => {
  if (!x) {
    return false;
  }
  if (x.isObservable) {
    return true;
  }
  try {
    return Mobx.isObservable(x);
  } catch (e) {
    return false;
  }
};
const isFunction = val => typeof val === 'function';
const isQuery = val => val && !!val.$isQuery;
const isRxObservable = val => val instanceof _rxjs.Observable;
const isPromise = val => val instanceof Promise;
const isWatch = val => val && val.IS_AUTO_RUN;
const isObservableLike = val => val && (val.isntConnected || val.isObservable || isObservable(val)) || false;

const DEFAULT_VALUE = undefined;

function automagical() {
  return {
    name: 'automagical',
    onlyClass: true,
    decorator: Klass => {
      Klass.prototype.automagic = Klass.prototype.automagic || function () {
        automagic(this);
      };
      return Klass;
    }
  };
}

const FILTER_KEYS = {
  automagic: true,
  componentDidMount: true,
  componentDidUpdate: true,
  componentWillMount: true,
  componentWillReceiveProps: true,
  componentWillUnmount: true,
  constructor: true,
  context: true,
  dispose: true,
  props: true,
  react: true,
  ref: true,
  render: true,
  setInterval: true,
  setTimeout: true,
  shouldComponentUpdate: true,
  start: true,
  stop: true,
  subscriptions: true,
  watch: true,
  $mobx: true,
  emitter: true,
  emit: true,
  on: true,
  CompositeDisposable: true,
  glossElement: true
};

function collectGetterPropertyDescriptors(proto) {
  const fproto = Object.getOwnPropertyNames(proto).filter(x => !FILTER_KEYS[x] && x[0] !== '_');

  return fproto.reduce((acc, cur) => _extends({}, acc, {
    [cur]: Object.getOwnPropertyDescriptor(proto, cur)
  }), {});
}

function mobxifyQuery(obj, method, val) {
  Object.defineProperty(obj, method, {
    get() {
      return val.current; // hit observable
    }
  });
  obj.subscriptions.add(val);
  return val;
}

function mobxifyPromise(obj, method, val) {
  const observable = (0, _mobxUtils.fromPromise)(val);
  Object.defineProperty(obj, method, {
    get() {
      return observable.value;
    }
  });
}

function mobxifyRxQuery(obj, method) {
  const value = obj[method];
  const observable = Mobx.observable.box(undefined);
  const runObservable = () => {
    const stream = value.$.subscribe(res => {
      observable.set(res);
    });
    obj.subscriptions.add(() => stream.unsubscribe());
  };
  if (value.isntConnected) {
    value.onConnection().then(runObservable);
  } else {
    runObservable();
  }
  Object.defineProperty(obj, method, {
    get() {
      return observable.get();
    }
  });
}

// TODO use rxdb api
function isRxDbQuery(query) {
  return query && (query.isntConnected || !!query.mquery);
}

function mobxifyRxObservable(obj, method, val) {
  const stream = (0, _mobxUtils.fromStream)(val || obj[method]);
  Mobx.extendShallowObservable(obj, { [method]: stream });
  obj.subscriptions.add(stream);
}

function automagic(obj) {
  const descriptors = _extends({}, Object.getOwnPropertyDescriptors(obj), collectGetterPropertyDescriptors(Object.getPrototypeOf(obj)));

  // mutate to be mobx observables
  for (const method of Object.keys(descriptors)) {
    mobxify(obj, method, descriptors[method]);
  }
}

// * => mobx
function mobxify(target, method, descriptor) {
  // @computed get (do first to avoid hitting the getter on next line)
  if (descriptor && !!descriptor.get) {
    Mobx.extendObservable(target, {
      [method]: Mobx.computed(descriptor.get)
    });
    return;
  }

  let value = target[method];

  // let it be
  if (isObservable(value)) {
    return value;
  }
  // @watch: autorun |> automagical (value)
  if (isWatch(value)) {
    return mobxifyWatch(target, method, value);
  }
  if (isPromise(value)) {
    mobxifyPromise(target, method, value);
    return;
  }
  if (isQuery(value)) {
    mobxifyQuery(target, method, value);
    return;
  }
  if (isRxObservable(value)) {
    mobxifyRxObservable(target, method);
    return;
  }
  if (isRxDbQuery(value)) {
    mobxifyRxQuery(target, method);
    return;
  }
  if (isFunction(value)) {
    // @action
    const targetMethod = target[method].bind(target);
    const NAME = `${target.constructor.name}.${method}`;
    // TODO remove in prod
    const logWrappedMethod = (...args) => {
      if (_global2.default.log && _global2.default.log.debug) {
        if (_global2.default.log.filter && _global2.default.log.filter.test(NAME)) {
          console.log(NAME, ...args);
        }
      }
      return targetMethod(...args);
    };

    target[method] = Mobx.action(NAME, logWrappedMethod);
    return target[method];
  }
  // @observable.ref
  Mobx.extendShallowObservable(target, { [method]: value });
  return value;
}

// * => Mobx
function resolve(inValue) {
  let value = inValue;
  // convert RxQuery to RxObservable
  if (value) {
    if (isRxDbQuery(value)) {
      if (!value.isntConnected) {
        value = value.$;
      } else {
        return value;
      }
    }
    // let this fall through from rxdbquerys
    if (isRxObservable(value)) {
      const observable = value;
      const mobxStream = (0, _mobxUtils.fromStream)(value);
      return {
        get: () => mobxStream.current,
        mobxStream,
        observable,
        dispose: mobxStream.dispose,
        isObservable: true
      };
    }
  }
  return value;
}

const AID = '__AUTOMAGICAL_ID__';
const uid = () => `__ID_${Math.random()}__`;

// watches values in an autorun, and resolves their results
function mobxifyWatch(obj, method, val) {
  // const debug = (...args) => {
  //   const KEY = `${obj.constructor.name}.${method}--${Math.random()}--`
  //   console.log(KEY, ...args)
  // }

  let current = Mobx.observable.box(DEFAULT_VALUE);
  let currentDisposable = null;
  let currentObservable = null;
  let autoObserver = null;
  const stopAutoObserve = () => autoObserver && autoObserver();

  const update = newValue => {
    let value = newValue;
    if (Mobx.isObservableArray(value) || Mobx.isObservableMap(value)) {
      value = Mobx.toJS(value);
    }
    // debug('update ===', value)
    current.set(Mobx.observable.box(value));
  };

  function runObservable() {
    stopAutoObserve();
    autoObserver = Mobx.autorun(() => {
      if (currentObservable) {
        const value = currentObservable.get ? currentObservable.get() : currentObservable;
        update(value); // set + wrap
      }
    });
  }

  let stop;
  let disposed = false;

  const dispose = () => {
    if (disposed) {
      return;
    }
    if (currentDisposable) {
      currentDisposable();
    }
    if (stop) {
      stop();
    }
    if (stopAutoObserve) {
      stopAutoObserve();
    }
    disposed = true;
  };

  function watcher(val) {
    let value = val;

    return function watcherCb() {
      const result = resolve(value.call(obj, obj.props)); // hit user observables // pass in props
      const observableLike = isObservableLike(result);
      stopAutoObserve();

      const replaceDisposable = () => {
        if (currentDisposable) {
          currentDisposable();
          currentDisposable = null;
        }
        if (result && result.dispose) {
          currentDisposable = result.dispose.bind(result);
        }
      };

      if (observableLike) {
        if (result.isntConnected) {
          // try on reconnect
          result.onConnection().then(() => {
            // re-run after connect
            dispose();
            watcherCb();
          });
          return false;
        }
        const isSameObservable = currentObservable && currentObservable[AID] === result[AID];
        if (isSameObservable && currentObservable) {
          update(currentObservable.get());
          return;
        }
        replaceDisposable();
        currentObservable = result;
        if (currentObservable && currentObservable instanceof Object) {
          currentObservable[AID] = currentObservable[AID] || uid();
        }
        runObservable();
      } else {
        replaceDisposable();
        if (isPromise(result)) {
          current.set((0, _mobxUtils.fromPromise)(result));
        } else {
          // debug('watchForNewValue ===', result)
          update(result);
        }
      }
    };
  }

  // autorun vs reaction
  // settimeout allows the watchers to run after react renders
  setTimeout(() => {
    if (disposed) {
      console.log('avoiding work');
      return;
    }
    if (Array.isArray(val)) {
      // reaction
      stop = Mobx.reaction(val[0], watcher(val[1]), val[3] || true);
    } else {
      //autorun
      stop = Mobx.autorun(watcher(val));
    }
  });

  Object.defineProperty(obj, method, {
    get() {
      const result = current.get();
      if (result && (0, _mobxUtils.isPromiseBasedObservable)(result)) {
        return result.value;
      }
      if (isObservable(result)) {
        let value = result.get();
        return value;
      }
      return result;
    }
  });

  Object.defineProperty(obj, `${method}__automagic_source`, {
    get() {
      return { current, currentObservable };
    }
  });

  obj.subscriptions.add(dispose);

  return current;
}
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/global/window.js", function(__filename, __dirname, require, module, exports) {
var win;

if (typeof window !== "undefined") {
  win = window;
} else if (typeof global !== "undefined") {
  win = global;
} else if (typeof self !== "undefined") {
  win = self;
} else {
  win = {};
}

module.exports = win;
});
__sbPundle.registerModule("../node_modules/mobx-utils/mobx-utils.umd.js", function(__filename, __dirname, require, module, exports) {
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('1480')) : typeof define === 'function' && define.amd ? define(['exports', 'mobx'], factory) : factory(global.mobxUtils = {}, global.mobx);
})(this, function (exports, mobx) {
  'use strict';

  var NOOP = function () {};
  var IDENTITY = function (_) {
    return _;
  };
  function invariant(cond, message) {
    if (message === void 0) {
      message = "Illegal state";
    }
    if (!cond) throw new Error("[mobx-utils] " + message);
  }
  var deprecatedMessages = [];
  function deprecated(msg) {
    if (deprecatedMessages.indexOf(msg) !== -1) return;
    deprecatedMessages.push(msg);
    console.error("[mobx-utils] Deprecated: " + msg);
  }

  var PENDING = "pending";
  var FULFILLED = "fulfilled";
  var REJECTED = "rejected";
  function caseImpl(handlers) {
    switch (this.state) {
      case PENDING:
        return handlers.pending && handlers.pending();
      case REJECTED:
        return handlers.rejected && handlers.rejected(this.value);
      case FULFILLED:
        return handlers.fulfilled && handlers.fulfilled(this.value);
    }
  }
  function createObservablePromise(origPromise) {
    invariant(arguments.length === 1, "fromPromise expects exactly one argument");
    invariant(typeof origPromise === "function" || typeof origPromise === "object" && origPromise && typeof origPromise.then === "function", "Please pass a promise or function to fromPromise");
    if (typeof origPromise === "function") {
      // If it is a (reject, resolve function, wrap it)
      origPromise = new Promise(origPromise);
    }
    var promise = new Promise(function (resolve, reject) {
      origPromise.then(mobx.action("observableFromPromise-resolve", function (value) {
        promise.value = value;
        promise.state = FULFILLED;
        resolve(value);
      }), mobx.action("observableFromPromise-reject", function (reason) {
        promise.value = reason;
        promise.state = REJECTED;
        reject(reason);
      }));
    });
    promise.isPromiseBasedObservable = true;
    promise.case = caseImpl;
    mobx.extendShallowObservable(promise, {
      value: undefined,
      state: PENDING
    });
    // TODO: remove in next major
    Object.defineProperty(promise, "promise", {
      get: function () {
        deprecated("fromPromise().promise is deprecated. fromPromise now directly returns a promise");
        return origPromise;
      }
    });
    return promise;
  }
  /**
   * `fromPromise` takes a Promise and returns an object with 3 observable properties that track
   * the status of the promise. The returned object has the following observable properties:
   *  - `value`: either the initial value, the value the Promise resolved to, or the value the Promise was rejected with. use `.state` if you need to be able to tell the difference
   *  - `state`: one of `"pending"`, `"fulfilled"` or `"rejected"`
   *  - `promise`: (not observable) the original promise object
   * and the following method:
   * - `case({fulfilled, rejected, pending})`: maps over the result using the provided handlers, or returns `undefined` if a handler isn't available for the current promise state.
   *
   *
   * Note that the status strings are available as constants:
   * `mobxUtils.PENDING`, `mobxUtils.REJECTED`, `mobxUtil.FULFILLED`
   *
   * Observable promises can be created immediately in a certain state using
   * `fromPromise.reject(reason)` or `fromPromise.resolve(value?)`.
   * The mean advantagate of `fromPromise.resolve(value)` over `fromPromise(Promise.resolve(value))` is that the first _synchronously_ starts in the desired state.
   *
   * It is possible to directly create a promise using a resolve, reject function:
   * `fromPromise((resolve, reject) => setTimeout(() => resolve(true), 1000))`
   *
   * @example
   * const fetchResult = fromPromise(fetch("http://someurl"))
   *
   * // combine with when..
   * when(
   *   () => fetchResult.state !== "pending"
   *   () => {
   *     console.log("Got ", fetchResult.value)
   *   }
   * )
   *
   * // or a mobx-react component..
   * const myComponent = observer(({ fetchResult }) => {
   *   switch(fetchResult.state) {
   *      case "pending": return <div>Loading...</div>
   *      case "rejected": return <div>Ooops... {fetchResult.value}</div>
   *      case "fulfilled": return <div>Gotcha: {fetchResult.value}</div>
   *   }
   * })
   *
   * // or using the case method instead of switch:
   *
   * const myComponent = observer(({ fetchResult }) =>
   *   fetchResult.case({
   *     pending:   () => <div>Loading...</div>
   *     rejected:  error => <div>Ooops.. {error}</div>
   *     fulfilled: value => <div>Gotcha: {value}</div>
   *   }))
   *
   * @param {IThenable<T>} promise The promise which will be observed
   * @returns {IPromiseBasedObservable<T>}
   */
  var fromPromise = createObservablePromise;
  fromPromise.reject = mobx.action("fromPromise.reject", function (reason) {
    var p = fromPromise(Promise.reject(reason));
    p.state = REJECTED;
    p.value = reason;
    return p;
  });
  fromPromise.resolve = mobx.action("fromPromise.resolve", function (value) {
    if (value === void 0) {
      value = undefined;
    }
    var p = fromPromise(Promise.resolve(value));
    p.state = FULFILLED;
    p.value = value;
    return p;
  });
  /**
   * Returns true if the provided value is a promise-based observable.
   * @param value any
   * @returns {boolean}
   */
  function isPromiseBasedObservable(value) {
    return value && value.isPromiseBasedObservable === true;
  }

  /**
   * `lazyObservable` creates an observable around a `fetch` method that will not be invoked
   * until the observable is needed the first time.
   * The fetch method receives a `sink` callback which can be used to replace the
   * current value of the lazyObservable. It is allowed to call `sink` multiple times
   * to keep the lazyObservable up to date with some external resource.
   *
   * Note that it is the `current()` call itself which is being tracked by MobX,
   * so make sure that you don't dereference to early.
   *
   * @example
   * const userProfile = lazyObservable(
   *   sink => fetch("/myprofile").then(profile => sink(profile))
   * )
   *
   * // use the userProfile in a React component:
   * const Profile = observer(({ userProfile }) =>
   *   userProfile.current() === undefined
   *   ? <div>Loading user profile...</div>
   *   : <div>{userProfile.current().displayName}</div>
   * )
   *
   * // triggers refresh the userProfile
   * userProfile.refresh()
   *
   * @param {(sink: (newValue: T) => void) => void} fetch method that will be called the first time the value of this observable is accessed. The provided sink can be used to produce a new value, synchronously or asynchronously
   * @param {T} [initialValue=undefined] optional initialValue that will be returned from `current` as long as the `sink` has not been called at least once
   * @returns {{
   *     current(): T,
   *     refresh(): T,
   *     reset(): T
   * }}
   */
  function lazyObservable(fetch, initialValue, modifier) {
    if (initialValue === void 0) {
      initialValue = undefined;
    }
    if (modifier === void 0) {
      modifier = IDENTITY;
    }
    var started = false;
    var value = mobx.observable.shallowBox(modifier(initialValue));
    var currentFnc = function () {
      if (!started) {
        started = true;
        fetch(function (newValue) {
          mobx.extras.allowStateChanges(true, function () {
            value.set(newValue);
          });
        });
      }
      return value.get();
    };
    var resetFnc = mobx.action("lazyObservable-reset", function () {
      value.set(initialValue);
      return value.get();
    });
    return {
      current: currentFnc,
      refresh: function () {
        if (started) {
          started = false;
          return currentFnc();
        } else {
          return value.get();
        }
      },
      reset: function () {
        return resetFnc();
      }
    };
  }

  /**
   * `fromResource` creates an observable whose current state can be inspected using `.current()`,
   * and which can be kept in sync with some external datasource that can be subscribed to.
   *
   * The created observable will only subscribe to the datasource if it is in use somewhere,
   * (un)subscribing when needed. To enable `fromResource` to do that two callbacks need to be provided,
   * one to subscribe, and one to unsubscribe. The subscribe callback itself will receive a `sink` callback, which can be used
   * to update the current state of the observable, allowing observes to react.
   *
   * Whatever is passed to `sink` will be returned by `current()`. The values passed to the sink will not be converted to
   * observables automatically, but feel free to do so.
   * It is the `current()` call itself which is being tracked,
   * so make sure that you don't dereference to early.
   *
   * For inspiration, an example integration with the apollo-client on [github](https://github.com/apollostack/apollo-client/issues/503#issuecomment-241101379),
   * or the [implementation](https://github.com/mobxjs/mobx-utils/blob/1d17cf7f7f5200937f68cc0b5e7ec7f3f71dccba/src/now.ts#L43-L57) of `mobxUtils.now`
   *
   * The following example code creates an observable that connects to a `dbUserRecord`,
   * which comes from an imaginary database and notifies when it has changed.
   *
   * @example
   * function createObservableUser(dbUserRecord) {
   *   let currentSubscription;
   *   return fromResource(
   *     (sink) => {
   *       // sink the current state
   *       sink(dbUserRecord.fields)
   *       // subscribe to the record, invoke the sink callback whenever new data arrives
   *       currentSubscription = dbUserRecord.onUpdated(() => {
   *         sink(dbUserRecord.fields)
   *       })
   *     },
   *     () => {
   *       // the user observable is not in use at the moment, unsubscribe (for now)
   *       dbUserRecord.unsubscribe(currentSubscription)
   *     }
   *   )
   * }
   *
   * // usage:
   * const myUserObservable = createObservableUser(myDatabaseConnector.query("name = 'Michel'"))
   *
   * // use the observable in autorun
   * autorun(() => {
   *   // printed everytime the database updates its records
   *   console.log(myUserObservable.current().displayName)
   * })
   *
   * // ... or a component
   * const userComponent = observer(({ user }) =>
   *   <div>{user.current().displayName}</div>
   * )
   *
   * @export
   * @template T
   * @param {(sink: (newValue: T) => void) => void} subscriber
   * @param {IDisposer} [unsubscriber=NOOP]
   * @param {T} [initialValue=undefined] the data that will be returned by `get()` until the `sink` has emitted its first data
   * @returns {{
   *     current(): T;
   *     dispose(): void;
   *     isAlive(): boolean;
   * }}
   */
  function fromResource(subscriber, unsubscriber, initialValue) {
    if (unsubscriber === void 0) {
      unsubscriber = NOOP;
    }
    if (initialValue === void 0) {
      initialValue = undefined;
    }
    var isActive = false;
    var isDisposed = false;
    var value = initialValue;
    var suspender = function () {
      if (isActive) {
        isActive = false;
        unsubscriber();
      }
    };
    var atom = new mobx.Atom("ResourceBasedObservable", function () {
      invariant(!isActive && !isDisposed);
      isActive = true;
      subscriber(function (newValue) {
        mobx.extras.allowStateChanges(true, function () {
          value = newValue;
          atom.reportChanged();
        });
      });
    }, suspender);
    return {
      current: function () {
        invariant(!isDisposed, "subscribingObservable has already been disposed");
        var isBeingTracked = atom.reportObserved();
        if (!isBeingTracked && !isActive) console.warn("Called `get` of an subscribingObservable outside a reaction. Current value will be returned but no new subscription has started");
        return value;
      },
      dispose: function () {
        isDisposed = true;
        suspender();
      },
      isAlive: function () {
        return isActive;
      }
    };
  }

  var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  function observableSymbol() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }
  function self() {
    return this;
  }
  /**
   * Converts an expression to an observable stream (a.k.a. TC 39 Observable / RxJS observable).
   * The provided expression is tracked by mobx as long as there are subscribers, automatically
   * emitting when new values become available. The expressions respect (trans)actions.
   *
   * @example
   *
   * const user = observable({
   *   firstName: "C.S",
   *   lastName: "Lewis"
   * })
   *
   * Rx.Observable
   *   .from(mobxUtils.toStream(() => user.firstname + user.lastName))
   *   .scan(nameChanges => nameChanges + 1, 0)
   *   .subscribe(nameChanges => console.log("Changed name ", nameChanges, "times"))
   *
   * @export
   * @template T
   * @param {() => T} expression
   * @returns {IObservableStream<T>}
   */
  function toStream(expression) {
    var computedValue = mobx.computed(expression);
    return _a = {
      subscribe: function (observer) {
        return {
          unsubscribe: computedValue.observe(typeof observer === "function" ? function (_a) {
            var newValue = _a.newValue;
            return observer(newValue);
          } : function (_a) {
            var newValue = _a.newValue;
            return observer.next(newValue);
          })
        };
      }
    }, _a[observableSymbol()] = self, _a;
    var _a;
  }
  var StreamListener = /** @class */function () {
    function StreamListener(observable$$1, initialValue) {
      var _this = this;
      this.current = undefined;
      mobx.runInAction(function () {
        _this.current = initialValue;
        _this.subscription = observable$$1.subscribe(_this);
      });
    }
    StreamListener.prototype.dispose = function () {
      if (this.subscription) {
        this.subscription.unsubscribe();
      }
    };
    StreamListener.prototype.next = function (value) {
      this.current = value;
    };
    StreamListener.prototype.complete = function () {
      this.dispose();
    };
    StreamListener.prototype.error = function (value) {
      this.current = value;
      this.dispose();
    };
    __decorate([mobx.observable.ref], StreamListener.prototype, "current", void 0);
    __decorate([mobx.action], StreamListener.prototype, "next", null);
    __decorate([mobx.action], StreamListener.prototype, "complete", null);
    __decorate([mobx.action], StreamListener.prototype, "error", null);
    return StreamListener;
  }();
  /**
   *
   * Converts an subscribable, observable stream (TC 39 observable / RxJS stream)
   * into an object which stores the current value (as `current`). The subscription can be cancelled through the `dispose` method.
   * Takes an initial value as second optional argument
   *
   * @example
   * const debouncedClickDelta = MobxUtils.fromStream(Rx.Observable.fromEvent(button, 'click')
   *     .throttleTime(1000)
   *     .map(event => event.clientX)
   *     .scan((count, clientX) => count + clientX, 0)
   * )
   *
   * autorun(() => {
   *     console.log("distance moved", debouncedClickDelta.current)
   * })
   *
   * @export
   * @template T
   * @param {IObservableStream<T>} observable
   * @returns {{
   *     current: T;
   *     dispose(): void;
   * }}
   */
  function fromStream(observable$$1, initialValue) {
    if (initialValue === void 0) {
      initialValue = undefined;
    }
    return new StreamListener(observable$$1, initialValue);
  }

  var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var RESERVED_NAMES = ["model", "reset", "submit", "isDirty", "isPropertyDirty"];
  var ViewModel = /** @class */function () {
    function ViewModel(model) {
      var _this = this;
      this.model = model;
      this.localValues = mobx.observable.map({});
      this.isPropertyDirty = function (key) {
        return _this.localValues.has(key);
      };
      invariant(mobx.isObservableObject(model), "createViewModel expects an observable object");
      Object.keys(model).forEach(function (key) {
        invariant(RESERVED_NAMES.indexOf(key) === -1, "The propertyname " + key + " is reserved and cannot be used with viewModels");
        Object.defineProperty(_this, key, {
          enumerable: true,
          configurable: true,
          get: function () {
            if (_this.isPropertyDirty(key)) return _this.localValues.get(key);else return _this.model[key];
          },
          set: mobx.action(function (value) {
            if (_this.isPropertyDirty(key) || value !== _this.model[key]) {
              _this.localValues.set(key, value);
            }
          })
        });
      });
    }
    Object.defineProperty(ViewModel.prototype, "isDirty", {
      get: function () {
        return this.localValues.size > 0;
      },
      enumerable: true,
      configurable: true
    });
    ViewModel.prototype.submit = function () {
      var _this = this;
      this.localValues.keys().forEach(function (key) {
        var source = _this.localValues.get(key);
        var destination = _this.model[key];
        if (mobx.isObservableArray(destination)) {
          destination.replace(source);
        } else if (mobx.isObservableMap(destination)) {
          destination.clear();
          destination.merge(source);
        } else {
          _this.model[key] = source;
        }
      });
      this.localValues.clear();
    };
    ViewModel.prototype.reset = function () {
      this.localValues.clear();
    };
    ViewModel.prototype.resetProperty = function (key) {
      this.localValues.delete(key);
    };
    __decorate$1([mobx.computed], ViewModel.prototype, "isDirty", null);
    __decorate$1([mobx.action.bound], ViewModel.prototype, "submit", null);
    __decorate$1([mobx.action.bound], ViewModel.prototype, "reset", null);
    __decorate$1([mobx.action.bound], ViewModel.prototype, "resetProperty", null);
    return ViewModel;
  }();
  /**
   * `createViewModel` takes an object with observable properties (model)
   * and wraps a viewmodel around it. The viewmodel proxies all enumerable property of the original model with the following behavior:
   *  - as long as no new value has been assigned to the viewmodel property, the original property will be returned.
   *  - any future change in the model will be visible in the viewmodel as well unless the viewmodel property was dirty at the time of the attempted change.
   *  - once a new value has been assigned to a property of the viewmodel, that value will be returned during a read of that property in the future. However, the original model remain untouched until `submit()` is called.
   *
   * The viewmodel exposes the following additional methods, besides all the enumerable properties of the model:
   * - `submit()`: copies all the values of the viewmodel to the model and resets the state
   * - `reset()`: resets the state of the viewmodel, abandoning all local modifications
   * - `resetProperty(propName)`: resets the specified property of the viewmodel
   * - `isDirty`: observable property indicating if the viewModel contains any modifications
   * - `isPropertyDirty(propName)`: returns true if the specified property is dirty
   * - `model`: The original model object for which this viewModel was created
   *
   * You may use observable arrays, maps and objects with `createViewModel` but keep in mind to assign fresh instances of those to the viewmodel's properties, otherwise you would end up modifying the properties of the original model.
   * Note that if you read a non-dirty property, viewmodel only proxies the read to the model. You therefore need to assign a fresh instance not only the first time you make the assignment but also after calling `reset()` or `submit()`.
   *
   * @example
   * class Todo {
   *   \@observable title = "Test"
   * }
   *
   * const model = new Todo()
   * const viewModel = createViewModel(model);
   *
   * autorun(() => console.log(viewModel.model.title, ",", viewModel.title))
   * // prints "Test, Test"
   * model.title = "Get coffee"
   * // prints "Get coffee, Get coffee", viewModel just proxies to model
   * viewModel.title = "Get tea"
   * // prints "Get coffee, Get tea", viewModel's title is now dirty, and the local value will be printed
   * viewModel.submit()
   * // prints "Get tea, Get tea", changes submitted from the viewModel to the model, viewModel is proxying again
   * viewModel.title = "Get cookie"
   * // prints "Get tea, Get cookie" // viewModel has diverged again
   * viewModel.reset()
   * // prints "Get tea, Get tea", changes of the viewModel have been abandoned
   *
   * @param {T} model
   * @returns {(T & IViewModel<T>)}
   * ```
   */
  function createViewModel(model) {
    return new ViewModel(model);
  }

  /**
   * Like normal `when`, except that this `when` will automatically dispose if the condition isn't met within a certain amount of time.
   *
   * @example
   * test("expect store to load", t => {
   *   const store = {
   *     items: [],
   *     loaded: false
   *   }
   *   fetchDataForStore((data) => {
   *     store.items = data;
   *     store.loaded = true;
   *   })
   *   whenWithTimeout(
   *     () => store.loaded
   *     () => t.end()
   *     2000,
   *     () => t.fail("store didn't load with 2 secs")
   *   )
   * })
   *
   *
   * @export
   * @param {() => boolean} expr see when, the expression to await
   * @param {() => void} action see when, the action to execut when expr returns truthy
   * @param {number} [timeout=10000] maximum amount when spends waiting before giving up
   * @param {any} [onTimeout=() => {}] the ontimeout handler will be called if the condition wasn't met within the given time
   * @returns {IDisposer} disposer function that can be used to cancel the when prematurely. Neither action or onTimeout will be fired if disposed
   */
  function whenWithTimeout(expr, action$$1, timeout, onTimeout) {
    if (timeout === void 0) {
      timeout = 10000;
    }
    if (onTimeout === void 0) {
      onTimeout = function () {};
    }
    var done = false;
    var handle = setTimeout(function () {
      if (!done) {
        disposer();
        onTimeout();
      }
    }, timeout);
    var disposer = mobx.when(expr, function () {
      done = true;
      clearTimeout(handle);
      action$$1();
    });
    return function () {
      clearTimeout(handle);
      disposer();
    };
  }

  /**
   * MobX normally suspends any computed value that is not in use by any reaction,
   * and lazily re-evaluates the expression if needed outside a reaction while not in use.
   * `keepAlive` marks a computed value as always in use, meaning that it will always fresh, but never disposed automatically.
   *
   * @example
   * const obj = observable({
   *   number: 3,
   *   doubler: function() { return this.number * 2 }
   * })
   * const stop = keepAlive(obj, "doubler")
   *
   * @param {Object} target an object that has a computed property, created by `@computed` or `extendObservable`
   * @param {string} property the name of the property to keep alive
   * @returns {IDisposer} stops this keep alive so that the computed value goes back to normal behavior
   */
  /**
   * @example
   * const number = observable(3)
   * const doubler = computed(() => number.get() * 2)
   * const stop = keepAlive(doubler)
   * // doubler will now stay in sync reactively even when there are no further observers
   * stop()
   * // normal behavior, doubler results will be recomputed if not observed but needed, but lazily
   *
   * @param {IComputedValue<any>} computedValue created using the `computed` function
   * @returns {IDisposer} stops this keep alive so that the computed value goes back to normal behavior
   */
  function keepAlive(_1, _2) {
    var computed$$1 = mobx.extras.getAtom(_1, _2);
    if (!computed$$1) throw new Error("No computed provided, please provide an object created with `computed(() => expr)` or an object + property name");
    return computed$$1.observe(function () {});
  }

  /**
   * `queueProcessor` takes an observable array, observes it and calls `processor`
   * once for each item added to the observable array, optionally deboucing the action
   *
   * @example
   * const pendingNotifications = observable([])
   * const stop = queueProcessor(pendingNotifications, msg => {
   *   // show Desktop notification
   *   new Notification(msg);
   * })
   *
   * // usage:
   * pendingNotifications.push("test!")
   *
   * @param {T[]} observableArray observable array instance to track
   * @param {(item: T) => void} processor action to call per item
   * @param {number} [debounce=0] optional debounce time in ms. With debounce 0 the processor will run synchronously
   * @returns {IDisposer} stops the processor
   */
  function queueProcessor(observableArray, processor, debounce) {
    if (debounce === void 0) {
      debounce = 0;
    }
    if (!mobx.isObservableArray(observableArray)) throw new Error("Expected observable array as first argument");
    if (!mobx.isAction(processor)) processor = mobx.action("queueProcessor", processor);
    var runner = function () {
      // construct a final set
      var items = observableArray.slice(0);
      // clear the queue for next iteration
      mobx.runInAction(function () {
        return observableArray.splice(0);
      });
      // fire processor
      items.forEach(processor);
    };
    if (debounce > 0) return mobx.autorunAsync(runner, debounce);else return mobx.autorun(runner);
  }

  /**
   * `chunkProcessor` takes an observable array, observes it and calls `processor`
   * once for a chunk of items added to the observable array, optionally deboucing the action.
   * The maximum chunk size can be limited by number.
   * This allows both, splitting larger into smaller chunks or (when debounced) combining smaller
   * chunks and/or single items into reasonable chunks of work.
   *
   * @example
   * const trackedActions = observable([])
   * const stop = chunkProcessor(trackedActions, chunkOfMax10Items => {
   *   sendTrackedActionsToServer(chunkOfMax10Items);
   * }, 100, 10)
   *
   * // usage:
   * trackedActions.push("scrolled")
   * trackedActions.push("hoveredButton")
   * // when both pushes happen within 100ms, there will be only one call to server
   *
   * @param {T[]} observableArray observable array instance to track
   * @param {(item: T[]) => void} processor action to call per item
   * @param {number} [debounce=0] optional debounce time in ms. With debounce 0 the processor will run synchronously
   * @param {number} [maxChunkSize=0] optionally do not call on full array but smaller chunks. With 0 it will process the full array.
   * @returns {IDisposer} stops the processor
   */
  function chunkProcessor(observableArray, processor, debounce, maxChunkSize) {
    if (debounce === void 0) {
      debounce = 0;
    }
    if (maxChunkSize === void 0) {
      maxChunkSize = 0;
    }
    if (!mobx.isObservableArray(observableArray)) throw new Error("Expected observable array as first argument");
    if (!mobx.isAction(processor)) processor = mobx.action("chunkProcessor", processor);
    var runner = function () {
      var _loop_1 = function () {
        var chunkSize = maxChunkSize === 0 ? observableArray.length : Math.min(observableArray.length, maxChunkSize);
        // construct a final set
        var items = observableArray.slice(0, chunkSize);
        // clear the slice for next iteration
        mobx.runInAction(function () {
          return observableArray.splice(0, chunkSize);
        });
        // fire processor
        processor(items);
      };
      while (observableArray.length > 0) {
        _loop_1();
      }
    };
    if (debounce > 0) return mobx.autorunAsync(runner, debounce);else return mobx.autorun(runner);
  }

  var tickers = {};
  /**
   * Returns the current date time as epoch number.
   * The date time is read from an observable which is updated automatically after the given interval.
   * So basically it treats time as an observable.
   *
   * The function takes an interval as parameter, which indicates how often `now()` will return a new value.
   * If no interval is given, it will update each second. If "frame" is specified, it will update each time a
   * `requestAnimationFrame` is available.
   *
   * Multiple clocks with the same interval will automatically be synchronized.
   *
   * Countdown example: https://jsfiddle.net/mweststrate/na0qdmkw/
   *
   * @example
   *
   * const start = Date.now()
   *
   * autorun(() => {
   *   console.log("Seconds elapsed: ", (mobxUtils.now() - start) / 1000)
   * })
   *
   *
   * @export
   * @param {(number | "frame")} [interval=1000] interval in milliseconds about how often the interval should update
   * @returns
   */
  function now(interval) {
    if (interval === void 0) {
      interval = 1000;
    }
    if (!mobx.extras.isComputingDerivation()) {
      // See #40
      return Date.now();
    }
    if (!tickers[interval]) {
      if (typeof interval === "number") tickers[interval] = createIntervalTicker(interval);else tickers[interval] = createAnimationFrameTicker();
    }
    return tickers[interval].current();
  }
  function createIntervalTicker(interval) {
    var subscriptionHandle;
    return fromResource(function (sink) {
      subscriptionHandle = setInterval(function () {
        return sink(Date.now());
      }, interval);
    }, function () {
      clearInterval(subscriptionHandle);
    }, Date.now());
  }
  function createAnimationFrameTicker() {
    var frameBasedTicker = fromResource(function (sink) {
      function scheduleTick() {
        window.requestAnimationFrame(function () {
          sink(Date.now());
          if (frameBasedTicker.isAlive()) scheduleTick();
        });
      }
      scheduleTick();
    }, function () {}, Date.now());
    return frameBasedTicker;
  }

  var __assign = undefined && undefined.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  /**
   * `asyncAction` takes a generator function and automatically wraps all parts of the process in actions. See the examples below.
   * `asyncAction` can be used both as decorator or to wrap functions.
   *
   * - It is important that `asyncAction should always be used with a generator function (recognizable as `function*` or `*name` syntax)
   * - Each yield statement should return a Promise. The generator function will continue as soon as the promise settles, with the settled value
   * - When the generator function finishes, you can return a normal value. The `asyncAction` wrapped function will always produce a promise delivering that value.
   *
   * When using the mobx devTools, an asyncAction will emit `action` events with names like:
   * * `"fetchUsers - runid: 6 - init"`
   * * `"fetchUsers - runid: 6 - yield 0"`
   * * `"fetchUsers - runid: 6 - yield 1"`
   *
   * The `runId` represents the generator instance. In other words, if `fetchUsers` is invoked multiple times concurrently, the events with the same `runid` belong toghether.
   * The `yield` number indicates the progress of the generator. `init` indicates spawning (it won't do anything, but you can find the original arguments of the `asyncAction` here).
   * `yield 0` ... `yield n` indicates the code block that is now being executed. `yield 0` is before the first `yield`, `yield 1` after the first one etc. Note that yield numbers are not determined lexically but by the runtime flow.
   *
   * `asyncActions` requires `Promise` and `generators` to be available on the target environment. Polyfill `Promise` if needed. Both TypeScript and Babel can compile generator functions down to ES5.
   *
   * @example
   * import {asyncAction} from "mobx-utils"
   *
   * let users = []
   *
   * const fetchUsers = asyncAction("fetchUsers", function* (url) {
   *   const start = Date.now()
   *   const data = yield window.fetch(url)
   *   users = yield data.json()
   *   return start - Date.now()
   * })
   *
   * fetchUsers("http://users.com").then(time => {
   *   console.dir("Got users", users, "in ", time, "ms")
   * })
   *
   * @example
   * import {asyncAction} from "mobx-utils"
   *
   * mobx.useStrict(true) // don't allow state modifications outside actions
   *
   * class Store {
   * 	\@observable githubProjects = []
   * 	\@state = "pending" // "pending" / "done" / "error"
   *
   * 	\@asyncAction
   * 	*fetchProjects() { // <- note the star, this a generator function!
   * 		this.githubProjects = []
   * 		this.state = "pending"
   * 		try {
   * 			const projects = yield fetchGithubProjectsSomehow() // yield instead of await
   * 			const filteredProjects = somePreprocessing(projects)
   * 			// the asynchronous blocks will automatically be wrapped actions
   * 			this.state = "done"
   * 			this.githubProjects = filteredProjects
   * 		} catch (error) {
   * 			this.state = "error"
   * 		}
   * 	}
   * }
   *
   * @export
   * @returns {Promise}
   */
  function asyncAction(arg1, arg2) {
    // decorator
    if (typeof arguments[1] === "string") {
      var name_1 = arguments[1];
      var descriptor_1 = arguments[2];
      if (descriptor_1 && descriptor_1.value) {
        return Object.assign({}, descriptor_1, { value: createAsyncActionGenerator(name_1, descriptor_1.value) });
      } else {
        return Object.assign({}, descriptor_1, { set: function (v) {
            Object.defineProperty(this, name_1, __assign({}, descriptor_1, { value: asyncAction(name_1, v) }));
          } });
      }
    }
    // direct invocation
    var generator = typeof arg1 === "string" ? arg2 : arg1;
    var name = typeof arg1 === "string" ? arg1 : generator.name || "<unnamed async action>";
    invariant(typeof generator === "function", "asyncAction expects function as first arg, got: " + generator);
    return createAsyncActionGenerator(name, generator);
  }
  var generatorId = 0;
  function createAsyncActionGenerator(name, generator) {
    // Implementation based on https://github.com/tj/co/blob/master/index.js
    return function () {
      var ctx = this;
      var args = arguments;
      return new Promise(function (resolve, reject) {
        var runId = ++generatorId;
        var stepId = 0;
        var gen = mobx.action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
        onFulfilled(undefined); // kick off the process
        function onFulfilled(res) {
          var ret;
          try {
            ret = mobx.action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
          } catch (e) {
            return reject(e);
          }
          next(ret);
          return null;
        }
        function onRejected(err) {
          var ret;
          try {
            ret = mobx.action(name + " - runid: " + runId + " - yield " + stepId++, gen.throw).call(gen, err);
          } catch (e) {
            return reject(e);
          }
          next(ret);
        }
        function next(ret) {
          if (ret.done) return resolve(ret.value);
          // TODO: support more type of values? See https://github.com/tj/co/blob/249bbdc72da24ae44076afd716349d2089b31c4c/index.js#L100
          invariant(ret.value && typeof ret.value.then === "function", "Only promises can be yielded to asyncAction, got: " + ret);
          return ret.value.then(onFulfilled, onRejected);
        }
      });
    };
  }

  /**
   * Like normal `when`, except that this `when` will return a promise that resolves when the expression becomes truthy
   *
   * @example
   * await whenAsync(() => !state.someBoolean)
   *
   * @export
   * @param {() => boolean} fn see when, the expression to await
   * @param {number} timeout maximum amount of time to wait, before the promise rejects
   * @returns Promise for when an observable eventually matches some condition. Rejects if timeout is provided and has expired
   */
  function whenAsync(fn, timeout) {
    if (timeout === void 0) {
      timeout = 0;
    }
    return new Promise(function (resolve, reject) {
      var timeoutHandle;
      var disposer = mobx.when(fn, function () {
        if (timeout > 0) clearTimeout(timeoutHandle);
        resolve();
      });
      if (timeout > 0) setTimeout(function () {
        disposer();
        reject(new Error("TIMEOUT"));
      }, timeout);
    });
  }

  exports.PENDING = PENDING;
  exports.FULFILLED = FULFILLED;
  exports.REJECTED = REJECTED;
  exports.fromPromise = fromPromise;
  exports.isPromiseBasedObservable = isPromiseBasedObservable;
  exports.lazyObservable = lazyObservable;
  exports.fromResource = fromResource;
  exports.toStream = toStream;
  exports.fromStream = fromStream;
  exports.createViewModel = createViewModel;
  exports.whenWithTimeout = whenWithTimeout;
  exports.keepAlive = keepAlive;
  exports.queueProcessor = queueProcessor;
  exports.chunkProcessor = chunkProcessor;
  exports.now = now;
  exports.NOOP = NOOP;
  exports.IDENTITY = IDENTITY;
  exports.invariant = invariant;
  exports.deprecated = deprecated;
  exports.asyncAction = asyncAction;
  exports.createAsyncActionGenerator = createAsyncActionGenerator;
  exports.whenAsync = whenAsync;

  Object.defineProperty(exports, '__esModule', { value: true });
});
});
__sbPundle.registerModule("../node_modules/rxjs/Rx.js", function(__filename, __dirname, require, module, exports) {
"use strict";
/* tslint:disable:no-unused-variable */
// Subject imported before Observable to bypass circular dependency issue since
// Subject extends Observable and Observable references Subject in it's
// definition

var Subject_1 = require('1481');
exports.Subject = Subject_1.Subject;
exports.AnonymousSubject = Subject_1.AnonymousSubject;
/* tslint:enable:no-unused-variable */
var Observable_1 = require('1482');
exports.Observable = Observable_1.Observable;
// statics
/* tslint:disable:no-use-before-declare */
require('1483');
require('1484');
require('1485');
require('1486');
require('1487');
require('1488');
require('1489');
require('1490');
require('1491');
require('1492');
require('1493');
require('1494');
require('1495');
require('1496');
require('1497');
require('1498');
require('1499');
require('1500');
require('1501');
require('1502');
require('1503');
require('1504');
require('1505');
require('1506');
require('1507');
//dom
require('1508');
require('1509');
//operators
require('1510');
require('1511');
require('1512');
require('1513');
require('1514');
require('1515');
require('1516');
require('1517');
require('1518');
require('1519');
require('1520');
require('1521');
require('1522');
require('1523');
require('1524');
require('1525');
require('1526');
require('1527');
require('1528');
require('1529');
require('1530');
require('1531');
require('1532');
require('1533');
require('1534');
require('1535');
require('1536');
require('1537');
require('1538');
require('1539');
require('1540');
require('1541');
require('1542');
require('1543');
require('1544');
require('1545');
require('1546');
require('1547');
require('1548');
require('1549');
require('1550');
require('1551');
require('1552');
require('1553');
require('1554');
require('1555');
require('1556');
require('1557');
require('1558');
require('1559');
require('1560');
require('1561');
require('1562');
require('1563');
require('1564');
require('1565');
require('1566');
require('1567');
require('1568');
require('1569');
require('1570');
require('1571');
require('1572');
require('1573');
require('1574');
require('1575');
require('1576');
require('1577');
require('1578');
require('1579');
require('1580');
require('1581');
require('1582');
require('1583');
require('1584');
require('1585');
require('1586');
require('1587');
require('1588');
require('1589');
require('1590');
require('1591');
require('1592');
require('1593');
require('1594');
require('1595');
require('1596');
require('1597');
require('1598');
require('1599');
require('1600');
require('1601');
require('1602');
require('1603');
require('1604');
require('1605');
require('1606');
require('1607');
require('1608');
require('1609');
require('1610');
require('1611');
/* tslint:disable:no-unused-variable */
var Subscription_1 = require('1612');
exports.Subscription = Subscription_1.Subscription;
var Subscriber_1 = require('1613');
exports.Subscriber = Subscriber_1.Subscriber;
var AsyncSubject_1 = require('1614');
exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
var ReplaySubject_1 = require('1615');
exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
var BehaviorSubject_1 = require('1616');
exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
var ConnectableObservable_1 = require('1617');
exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
var Notification_1 = require('1618');
exports.Notification = Notification_1.Notification;
var EmptyError_1 = require('1619');
exports.EmptyError = EmptyError_1.EmptyError;
var ArgumentOutOfRangeError_1 = require('1620');
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
var ObjectUnsubscribedError_1 = require('1621');
exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
var TimeoutError_1 = require('1622');
exports.TimeoutError = TimeoutError_1.TimeoutError;
var UnsubscriptionError_1 = require('1623');
exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
var timeInterval_1 = require('1624');
exports.TimeInterval = timeInterval_1.TimeInterval;
var timestamp_1 = require('1625');
exports.Timestamp = timestamp_1.Timestamp;
var TestScheduler_1 = require('1626');
exports.TestScheduler = TestScheduler_1.TestScheduler;
var VirtualTimeScheduler_1 = require('1627');
exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
var AjaxObservable_1 = require('1628');
exports.AjaxResponse = AjaxObservable_1.AjaxResponse;
exports.AjaxError = AjaxObservable_1.AjaxError;
exports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;
var asap_1 = require('1629');
var async_1 = require('1630');
var queue_1 = require('1631');
var animationFrame_1 = require('1632');
var rxSubscriber_1 = require('1633');
var iterator_1 = require('1634');
var observable_1 = require('1635');
/* tslint:enable:no-unused-variable */
/**
 * @typedef {Object} Rx.Scheduler
 * @property {Scheduler} queue Schedules on a queue in the current event frame
 * (trampoline scheduler). Use this for iteration operations.
 * @property {Scheduler} asap Schedules on the micro task queue, which uses the
 * fastest transport mechanism available, either Node.js' `process.nextTick()`
 * or Web Worker MessageChannel or setTimeout or others. Use this for
 * asynchronous conversions.
 * @property {Scheduler} async Schedules work with `setInterval`. Use this for
 * time-based operations.
 * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.
 * Use this for synchronizing with the platform's painting
 */
var Scheduler = {
  asap: asap_1.asap,
  queue: queue_1.queue,
  animationFrame: animationFrame_1.animationFrame,
  async: async_1.async
};
exports.Scheduler = Scheduler;
/**
 * @typedef {Object} Rx.Symbol
 * @property {Symbol|string} rxSubscriber A symbol to use as a property name to
 * retrieve an "Rx safe" Observer from an object. "Rx safety" can be defined as
 * an object that has all of the traits of an Rx Subscriber, including the
 * ability to add and remove subscriptions to the subscription chain and
 * guarantees involving event triggering (can't "next" after unsubscription,
 * etc).
 * @property {Symbol|string} observable A symbol to use as a property name to
 * retrieve an Observable as defined by the [ECMAScript "Observable" spec](https://github.com/zenparsing/es-observable).
 * @property {Symbol|string} iterator The ES6 symbol to use as a property name
 * to retrieve an iterator from an object.
 */
var Symbol = {
  rxSubscriber: rxSubscriber_1.rxSubscriber,
  observable: observable_1.observable,
  iterator: iterator_1.iterator
};
exports.Symbol = Symbol;
//# sourceMappingURL=Rx.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/Subject.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('1754');
var Subscriber_1 = require('1755');
var Subscription_1 = require('1756');
var ObjectUnsubscribedError_1 = require('1757');
var SubjectSubscription_1 = require('1758');
var rxSubscriber_1 = require('1759');
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = function (_super) {
  __extends(SubjectSubscriber, _super);
  function SubjectSubscriber(destination) {
    _super.call(this, destination);
    this.destination = destination;
  }
  return SubjectSubscriber;
}(Subscriber_1.Subscriber);
exports.SubjectSubscriber = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = function (_super) {
  __extends(Subject, _super);
  function Subject() {
    _super.call(this);
    this.observers = [];
    this.closed = false;
    this.isStopped = false;
    this.hasError = false;
    this.thrownError = null;
  }
  Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
    return new SubjectSubscriber(this);
  };
  Subject.prototype.lift = function (operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject.prototype.next = function (value) {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
    }
    if (!this.isStopped) {
      var observers = this.observers;
      var len = observers.length;
      var copy = observers.slice();
      for (var i = 0; i < len; i++) {
        copy[i].next(value);
      }
    }
  };
  Subject.prototype.error = function (err) {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
    }
    this.hasError = true;
    this.thrownError = err;
    this.isStopped = true;
    var observers = this.observers;
    var len = observers.length;
    var copy = observers.slice();
    for (var i = 0; i < len; i++) {
      copy[i].error(err);
    }
    this.observers.length = 0;
  };
  Subject.prototype.complete = function () {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
    }
    this.isStopped = true;
    var observers = this.observers;
    var len = observers.length;
    var copy = observers.slice();
    for (var i = 0; i < len; i++) {
      copy[i].complete();
    }
    this.observers.length = 0;
  };
  Subject.prototype.unsubscribe = function () {
    this.isStopped = true;
    this.closed = true;
    this.observers = null;
  };
  Subject.prototype._trySubscribe = function (subscriber) {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
    } else {
      return _super.prototype._trySubscribe.call(this, subscriber);
    }
  };
  Subject.prototype._subscribe = function (subscriber) {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
    } else if (this.hasError) {
      subscriber.error(this.thrownError);
      return Subscription_1.Subscription.EMPTY;
    } else if (this.isStopped) {
      subscriber.complete();
      return Subscription_1.Subscription.EMPTY;
    } else {
      this.observers.push(subscriber);
      return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
    }
  };
  Subject.prototype.asObservable = function () {
    var observable = new Observable_1.Observable();
    observable.source = this;
    return observable;
  };
  Subject.create = function (destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject;
}(Observable_1.Observable);
exports.Subject = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = function (_super) {
  __extends(AnonymousSubject, _super);
  function AnonymousSubject(destination, source) {
    _super.call(this);
    this.destination = destination;
    this.source = source;
  }
  AnonymousSubject.prototype.next = function (value) {
    var destination = this.destination;
    if (destination && destination.next) {
      destination.next(value);
    }
  };
  AnonymousSubject.prototype.error = function (err) {
    var destination = this.destination;
    if (destination && destination.error) {
      this.destination.error(err);
    }
  };
  AnonymousSubject.prototype.complete = function () {
    var destination = this.destination;
    if (destination && destination.complete) {
      this.destination.complete();
    }
  };
  AnonymousSubject.prototype._subscribe = function (subscriber) {
    var source = this.source;
    if (source) {
      return this.source.subscribe(subscriber);
    } else {
      return Subscription_1.Subscription.EMPTY;
    }
  };
  return AnonymousSubject;
}(Subject);
exports.AnonymousSubject = AnonymousSubject;
//# sourceMappingURL=Subject.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/Observable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('1730');
var toSubscriber_1 = require('1731');
var observable_1 = require('1732');
/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = function () {
  /**
   * @constructor
   * @param {Function} subscribe the function that is called when the Observable is
   * initially subscribed to. This function is given a Subscriber, to which new values
   * can be `next`ed, or an `error` method can be called to raise an error, or
   * `complete` can be called to notify of a successful completion.
   */
  function Observable(subscribe) {
    this._isScalar = false;
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  /**
   * Creates a new Observable, with this Observable as the source, and the passed
   * operator defined as the new observable's operator.
   * @method lift
   * @param {Operator} operator the operator defining the operation to take on the observable
   * @return {Observable} a new observable with the Operator applied
   */
  Observable.prototype.lift = function (operator) {
    var observable = new Observable();
    observable.source = this;
    observable.operator = operator;
    return observable;
  };
  /**
   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
   *
   * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
   *
   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
   * thought.
   *
   * Apart from starting the execution of an Observable, this method allows you to listen for values
   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
   * following ways.
   *
   * The first way is creating an object that implements {@link Observer} interface. It should have methods
   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
   * be left uncaught.
   *
   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
   *
   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
   *
   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
   * It is an Observable itself that decides when these functions will be called. For example {@link of}
   * by default emits all its values synchronously. Always check documentation for how given Observable
   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
   *
   * @example <caption>Subscribe with an Observer</caption>
   * const sumObserver = {
   *   sum: 0,
   *   next(value) {
   *     console.log('Adding: ' + value);
   *     this.sum = this.sum + value;
   *   },
   *   error() { // We actually could just remove this method,
   *   },        // since we do not really care about errors right now.
   *   complete() {
   *     console.log('Sum equals: ' + this.sum);
   *   }
   * };
   *
   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
   * .subscribe(sumObserver);
   *
   * // Logs:
   * // "Adding: 1"
   * // "Adding: 2"
   * // "Adding: 3"
   * // "Sum equals: 6"
   *
   *
   * @example <caption>Subscribe with functions</caption>
   * let sum = 0;
   *
   * Rx.Observable.of(1, 2, 3)
   * .subscribe(
   *   function(value) {
   *     console.log('Adding: ' + value);
   *     sum = sum + value;
   *   },
   *   undefined,
   *   function() {
   *     console.log('Sum equals: ' + sum);
   *   }
   * );
   *
   * // Logs:
   * // "Adding: 1"
   * // "Adding: 2"
   * // "Adding: 3"
   * // "Sum equals: 6"
   *
   *
   * @example <caption>Cancel a subscription</caption>
   * const subscription = Rx.Observable.interval(1000).subscribe(
   *   num => console.log(num),
   *   undefined,
   *   () => console.log('completed!') // Will not be called, even
   * );                                // when cancelling subscription
   *
   *
   * setTimeout(() => {
   *   subscription.unsubscribe();
   *   console.log('unsubscribed!');
   * }, 2500);
   *
   * // Logs:
   * // 0 after 1s
   * // 1 after 2s
   * // "unsubscribed!" after 2.5s
   *
   *
   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
   *  Observable.
   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
   *  the error will be thrown as unhandled.
   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
   * @return {ISubscription} a subscription reference to the registered handlers
   * @method subscribe
   */
  Observable.prototype.subscribe = function (observerOrNext, error, complete) {
    var operator = this.operator;
    var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
    if (operator) {
      operator.call(sink, this.source);
    } else {
      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));
    }
    if (sink.syncErrorThrowable) {
      sink.syncErrorThrowable = false;
      if (sink.syncErrorThrown) {
        throw sink.syncErrorValue;
      }
    }
    return sink;
  };
  Observable.prototype._trySubscribe = function (sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.syncErrorThrown = true;
      sink.syncErrorValue = err;
      sink.error(err);
    }
  };
  /**
   * @method forEach
   * @param {Function} next a handler for each value emitted by the observable
   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
   * @return {Promise} a promise that either resolves on observable completion or
   *  rejects with the handled error
   */
  Observable.prototype.forEach = function (next, PromiseCtor) {
    var _this = this;
    if (!PromiseCtor) {
      if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
        PromiseCtor = root_1.root.Rx.config.Promise;
      } else if (root_1.root.Promise) {
        PromiseCtor = root_1.root.Promise;
      }
    }
    if (!PromiseCtor) {
      throw new Error('no Promise impl found');
    }
    return new PromiseCtor(function (resolve, reject) {
      // Must be declared in a separate statement to avoid a RefernceError when
      // accessing subscription below in the closure due to Temporal Dead Zone.
      var subscription;
      subscription = _this.subscribe(function (value) {
        if (subscription) {
          // if there is a subscription, then we can surmise
          // the next handling is asynchronous. Any errors thrown
          // need to be rejected explicitly and unsubscribe must be
          // called manually
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscription.unsubscribe();
          }
        } else {
          // if there is NO subscription, then we're getting a nexted
          // value synchronously during subscription. We can just call it.
          // If it errors, Observable's `subscribe` will ensure the
          // unsubscription logic is called, then synchronously rethrow the error.
          // After that, Promise will trap the error and send it
          // down the rejection path.
          next(value);
        }
      }, reject, resolve);
    });
  };
  Observable.prototype._subscribe = function (subscriber) {
    return this.source.subscribe(subscriber);
  };
  /**
   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
   * @method Symbol.observable
   * @return {Observable} this instance of the observable
   */
  Observable.prototype[observable_1.observable] = function () {
    return this;
  };
  // HACK: Since TypeScript inherits static properties too, we have to
  // fight against TypeScript here so Subject can have a different static create signature
  /**
   * Creates a new cold Observable by calling the Observable constructor
   * @static true
   * @owner Observable
   * @method create
   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
   * @return {Observable} a new cold observable
   */
  Observable.create = function (subscribe) {
    return new Observable(subscribe);
  };
  return Observable;
}();
exports.Observable = Observable;
//# sourceMappingURL=Observable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/root.js", function(__filename, __dirname, require, module, exports) {
"use strict";
// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.

var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;
var __global = typeof global !== 'undefined' && global;
var _root = __window || __global || __self;
exports.root = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
  if (!_root) {
    throw new Error('RxJS could not find any global context (window, self, global)');
  }
})();
//# sourceMappingURL=root.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/toSubscriber.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Subscriber_1 = require('2064');
var rxSubscriber_1 = require('2065');
var Observer_1 = require('2066');
function toSubscriber(nextOrObserver, error, complete) {
  if (nextOrObserver) {
    if (nextOrObserver instanceof Subscriber_1.Subscriber) {
      return nextOrObserver;
    }
    if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
      return nextOrObserver[rxSubscriber_1.rxSubscriber]();
    }
  }
  if (!nextOrObserver && !error && !complete) {
    return new Subscriber_1.Subscriber(Observer_1.empty);
  }
  return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
//# sourceMappingURL=toSubscriber.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/Subscriber.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = require('1747');
var Subscription_1 = require('1748');
var Observer_1 = require('1749');
var rxSubscriber_1 = require('1750');
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = function (_super) {
  __extends(Subscriber, _super);
  /**
   * @param {Observer|function(value: T): void} [destinationOrNext] A partially
   * defined Observer or a `next` callback function.
   * @param {function(e: ?any): void} [error] The `error` callback of an
   * Observer.
   * @param {function(): void} [complete] The `complete` callback of an
   * Observer.
   */
  function Subscriber(destinationOrNext, error, complete) {
    _super.call(this);
    this.syncErrorValue = null;
    this.syncErrorThrown = false;
    this.syncErrorThrowable = false;
    this.isStopped = false;
    switch (arguments.length) {
      case 0:
        this.destination = Observer_1.empty;
        break;
      case 1:
        if (!destinationOrNext) {
          this.destination = Observer_1.empty;
          break;
        }
        if (typeof destinationOrNext === 'object') {
          if (destinationOrNext instanceof Subscriber) {
            this.destination = destinationOrNext;
            this.destination.add(this);
          } else {
            this.syncErrorThrowable = true;
            this.destination = new SafeSubscriber(this, destinationOrNext);
          }
          break;
        }
      default:
        this.syncErrorThrowable = true;
        this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
        break;
    }
  }
  Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () {
    return this;
  };
  /**
   * A static factory for a Subscriber, given a (potentially partial) definition
   * of an Observer.
   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
   * @param {function(e: ?any): void} [error] The `error` callback of an
   * Observer.
   * @param {function(): void} [complete] The `complete` callback of an
   * Observer.
   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
   * Observer represented by the given arguments.
   */
  Subscriber.create = function (next, error, complete) {
    var subscriber = new Subscriber(next, error, complete);
    subscriber.syncErrorThrowable = false;
    return subscriber;
  };
  /**
   * The {@link Observer} callback to receive notifications of type `next` from
   * the Observable, with a value. The Observable may call this method 0 or more
   * times.
   * @param {T} [value] The `next` value.
   * @return {void}
   */
  Subscriber.prototype.next = function (value) {
    if (!this.isStopped) {
      this._next(value);
    }
  };
  /**
   * The {@link Observer} callback to receive notifications of type `error` from
   * the Observable, with an attached {@link Error}. Notifies the Observer that
   * the Observable has experienced an error condition.
   * @param {any} [err] The `error` exception.
   * @return {void}
   */
  Subscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      this.isStopped = true;
      this._error(err);
    }
  };
  /**
   * The {@link Observer} callback to receive a valueless notification of type
   * `complete` from the Observable. Notifies the Observer that the Observable
   * has finished sending push-based notifications.
   * @return {void}
   */
  Subscriber.prototype.complete = function () {
    if (!this.isStopped) {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber.prototype.unsubscribe = function () {
    if (this.closed) {
      return;
    }
    this.isStopped = true;
    _super.prototype.unsubscribe.call(this);
  };
  Subscriber.prototype._next = function (value) {
    this.destination.next(value);
  };
  Subscriber.prototype._error = function (err) {
    this.destination.error(err);
    this.unsubscribe();
  };
  Subscriber.prototype._complete = function () {
    this.destination.complete();
    this.unsubscribe();
  };
  Subscriber.prototype._unsubscribeAndRecycle = function () {
    var _a = this,
        _parent = _a._parent,
        _parents = _a._parents;
    this._parent = null;
    this._parents = null;
    this.unsubscribe();
    this.closed = false;
    this.isStopped = false;
    this._parent = _parent;
    this._parents = _parents;
    return this;
  };
  return Subscriber;
}(Subscription_1.Subscription);
exports.Subscriber = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = function (_super) {
  __extends(SafeSubscriber, _super);
  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
    _super.call(this);
    this._parentSubscriber = _parentSubscriber;
    var next;
    var context = this;
    if (isFunction_1.isFunction(observerOrNext)) {
      next = observerOrNext;
    } else if (observerOrNext) {
      next = observerOrNext.next;
      error = observerOrNext.error;
      complete = observerOrNext.complete;
      if (observerOrNext !== Observer_1.empty) {
        context = Object.create(observerOrNext);
        if (isFunction_1.isFunction(context.unsubscribe)) {
          this.add(context.unsubscribe.bind(context));
        }
        context.unsubscribe = this.unsubscribe.bind(this);
      }
    }
    this._context = context;
    this._next = next;
    this._error = error;
    this._complete = complete;
  }
  SafeSubscriber.prototype.next = function (value) {
    if (!this.isStopped && this._next) {
      var _parentSubscriber = this._parentSubscriber;
      if (!_parentSubscriber.syncErrorThrowable) {
        this.__tryOrUnsub(this._next, value);
      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
        this.unsubscribe();
      }
    }
  };
  SafeSubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var _parentSubscriber = this._parentSubscriber;
      if (this._error) {
        if (!_parentSubscriber.syncErrorThrowable) {
          this.__tryOrUnsub(this._error, err);
          this.unsubscribe();
        } else {
          this.__tryOrSetError(_parentSubscriber, this._error, err);
          this.unsubscribe();
        }
      } else if (!_parentSubscriber.syncErrorThrowable) {
        this.unsubscribe();
        throw err;
      } else {
        _parentSubscriber.syncErrorValue = err;
        _parentSubscriber.syncErrorThrown = true;
        this.unsubscribe();
      }
    }
  };
  SafeSubscriber.prototype.complete = function () {
    var _this = this;
    if (!this.isStopped) {
      var _parentSubscriber = this._parentSubscriber;
      if (this._complete) {
        var wrappedComplete = function () {
          return _this._complete.call(_this._context);
        };
        if (!_parentSubscriber.syncErrorThrowable) {
          this.__tryOrUnsub(wrappedComplete);
          this.unsubscribe();
        } else {
          this.__tryOrSetError(_parentSubscriber, wrappedComplete);
          this.unsubscribe();
        }
      } else {
        this.unsubscribe();
      }
    }
  };
  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
    try {
      fn.call(this._context, value);
    } catch (err) {
      this.unsubscribe();
      throw err;
    }
  };
  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
    try {
      fn.call(this._context, value);
    } catch (err) {
      parent.syncErrorValue = err;
      parent.syncErrorThrown = true;
      return true;
    }
    return false;
  };
  SafeSubscriber.prototype._unsubscribe = function () {
    var _parentSubscriber = this._parentSubscriber;
    this._context = null;
    this._parentSubscriber = null;
    _parentSubscriber.unsubscribe();
  };
  return SafeSubscriber;
}(Subscriber);
//# sourceMappingURL=Subscriber.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/isFunction.js", function(__filename, __dirname, require, module, exports) {
"use strict";

function isFunction(x) {
  return typeof x === 'function';
}
exports.isFunction = isFunction;
//# sourceMappingURL=isFunction.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/Subscription.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var isArray_1 = require('1733');
var isObject_1 = require('1734');
var isFunction_1 = require('1735');
var tryCatch_1 = require('1736');
var errorObject_1 = require('1737');
var UnsubscriptionError_1 = require('1738');
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = function () {
  /**
   * @param {function(): void} [unsubscribe] A function describing how to
   * perform the disposal of resources when the `unsubscribe` method is called.
   */
  function Subscription(unsubscribe) {
    /**
     * A flag to indicate whether this Subscription has already been unsubscribed.
     * @type {boolean}
     */
    this.closed = false;
    this._parent = null;
    this._parents = null;
    this._subscriptions = null;
    if (unsubscribe) {
      this._unsubscribe = unsubscribe;
    }
  }
  /**
   * Disposes the resources held by the subscription. May, for instance, cancel
   * an ongoing Observable execution or cancel any other type of work that
   * started when the Subscription was created.
   * @return {void}
   */
  Subscription.prototype.unsubscribe = function () {
    var hasErrors = false;
    var errors;
    if (this.closed) {
      return;
    }
    var _a = this,
        _parent = _a._parent,
        _parents = _a._parents,
        _unsubscribe = _a._unsubscribe,
        _subscriptions = _a._subscriptions;
    this.closed = true;
    this._parent = null;
    this._parents = null;
    // null out _subscriptions first so any child subscriptions that attempt
    // to remove themselves from this subscription will noop
    this._subscriptions = null;
    var index = -1;
    var len = _parents ? _parents.length : 0;
    // if this._parent is null, then so is this._parents, and we
    // don't have to remove ourselves from any parent subscriptions.
    while (_parent) {
      _parent.remove(this);
      // if this._parents is null or index >= len,
      // then _parent is set to null, and the loop exits
      _parent = ++index < len && _parents[index] || null;
    }
    if (isFunction_1.isFunction(_unsubscribe)) {
      var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
      if (trial === errorObject_1.errorObject) {
        hasErrors = true;
        errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
      }
    }
    if (isArray_1.isArray(_subscriptions)) {
      index = -1;
      len = _subscriptions.length;
      while (++index < len) {
        var sub = _subscriptions[index];
        if (isObject_1.isObject(sub)) {
          var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
          if (trial === errorObject_1.errorObject) {
            hasErrors = true;
            errors = errors || [];
            var err = errorObject_1.errorObject.e;
            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
            } else {
              errors.push(err);
            }
          }
        }
      }
    }
    if (hasErrors) {
      throw new UnsubscriptionError_1.UnsubscriptionError(errors);
    }
  };
  /**
   * Adds a tear down to be called during the unsubscribe() of this
   * Subscription.
   *
   * If the tear down being added is a subscription that is already
   * unsubscribed, is the same reference `add` is being called on, or is
   * `Subscription.EMPTY`, it will not be added.
   *
   * If this subscription is already in an `closed` state, the passed
   * tear down logic will be executed immediately.
   *
   * @param {TeardownLogic} teardown The additional logic to execute on
   * teardown.
   * @return {Subscription} Returns the Subscription used or created to be
   * added to the inner subscriptions list. This Subscription can be used with
   * `remove()` to remove the passed teardown logic from the inner subscriptions
   * list.
   */
  Subscription.prototype.add = function (teardown) {
    if (!teardown || teardown === Subscription.EMPTY) {
      return Subscription.EMPTY;
    }
    if (teardown === this) {
      return this;
    }
    var subscription = teardown;
    switch (typeof teardown) {
      case 'function':
        subscription = new Subscription(teardown);
      case 'object':
        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
          return subscription;
        } else if (this.closed) {
          subscription.unsubscribe();
          return subscription;
        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {
            var tmp = subscription;
            subscription = new Subscription();
            subscription._subscriptions = [tmp];
          }
        break;
      default:
        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
    }
    var subscriptions = this._subscriptions || (this._subscriptions = []);
    subscriptions.push(subscription);
    subscription._addParent(this);
    return subscription;
  };
  /**
   * Removes a Subscription from the internal list of subscriptions that will
   * unsubscribe during the unsubscribe process of this Subscription.
   * @param {Subscription} subscription The subscription to remove.
   * @return {void}
   */
  Subscription.prototype.remove = function (subscription) {
    var subscriptions = this._subscriptions;
    if (subscriptions) {
      var subscriptionIndex = subscriptions.indexOf(subscription);
      if (subscriptionIndex !== -1) {
        subscriptions.splice(subscriptionIndex, 1);
      }
    }
  };
  Subscription.prototype._addParent = function (parent) {
    var _a = this,
        _parent = _a._parent,
        _parents = _a._parents;
    if (!_parent || _parent === parent) {
      // If we don't have a parent, or the new parent is the same as the
      // current parent, then set this._parent to the new parent.
      this._parent = parent;
    } else if (!_parents) {
      // If there's already one parent, but not multiple, allocate an Array to
      // store the rest of the parent Subscriptions.
      this._parents = [parent];
    } else if (_parents.indexOf(parent) === -1) {
      // Only add the new parent to the _parents list if it's not already there.
      _parents.push(parent);
    }
  };
  Subscription.EMPTY = function (empty) {
    empty.closed = true;
    return empty;
  }(new Subscription());
  return Subscription;
}();
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
  return errors.reduce(function (errs, err) {
    return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);
  }, []);
}
//# sourceMappingURL=Subscription.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/isArray.js", function(__filename, __dirname, require, module, exports) {
"use strict";

exports.isArray = Array.isArray || function (x) {
  return x && typeof x.length === 'number';
};
//# sourceMappingURL=isArray.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/isObject.js", function(__filename, __dirname, require, module, exports) {
"use strict";

function isObject(x) {
  return x != null && typeof x === 'object';
}
exports.isObject = isObject;
//# sourceMappingURL=isObject.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/tryCatch.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var errorObject_1 = require('2067');
var tryCatchTarget;
function tryCatcher() {
  try {
    return tryCatchTarget.apply(this, arguments);
  } catch (e) {
    errorObject_1.errorObject.e = e;
    return errorObject_1.errorObject;
  }
}
function tryCatch(fn) {
  tryCatchTarget = fn;
  return tryCatcher;
}
exports.tryCatch = tryCatch;
;
//# sourceMappingURL=tryCatch.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/errorObject.js", function(__filename, __dirname, require, module, exports) {
"use strict";
// typeof any so that it we don't have to cast when comparing a result to the error object

exports.errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/UnsubscriptionError.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = function (_super) {
  __extends(UnsubscriptionError, _super);
  function UnsubscriptionError(errors) {
    _super.call(this);
    this.errors = errors;
    var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) {
      return i + 1 + ") " + err.toString();
    }).join('\n  ') : '');
    this.name = err.name = 'UnsubscriptionError';
    this.stack = err.stack;
    this.message = err.message;
  }
  return UnsubscriptionError;
}(Error);
exports.UnsubscriptionError = UnsubscriptionError;
//# sourceMappingURL=UnsubscriptionError.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/Observer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

exports.empty = {
  closed: true,
  next: function (value) {},
  error: function (err) {
    throw err;
  },
  complete: function () {}
};
//# sourceMappingURL=Observer.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/symbol/rxSubscriber.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('1785');
var Symbol = root_1.root.Symbol;
exports.rxSubscriber = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
exports.$$rxSubscriber = exports.rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/symbol/observable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('1786');
function getSymbolObservable(context) {
  var $$observable;
  var Symbol = context.Symbol;
  if (typeof Symbol === 'function') {
    if (Symbol.observable) {
      $$observable = Symbol.observable;
    } else {
      $$observable = Symbol('observable');
      Symbol.observable = $$observable;
    }
  } else {
    $$observable = '@@observable';
  }
  return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.observable = getSymbolObservable(root_1.root);
/**
 * @deprecated use observable instead
 */
exports.$$observable = exports.observable;
//# sourceMappingURL=observable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/ObjectUnsubscribedError.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = function (_super) {
  __extends(ObjectUnsubscribedError, _super);
  function ObjectUnsubscribedError() {
    var err = _super.call(this, 'object unsubscribed');
    this.name = err.name = 'ObjectUnsubscribedError';
    this.stack = err.stack;
    this.message = err.message;
  }
  return ObjectUnsubscribedError;
}(Error);
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
//# sourceMappingURL=ObjectUnsubscribedError.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/SubjectSubscription.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = require('2063');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = function (_super) {
  __extends(SubjectSubscription, _super);
  function SubjectSubscription(subject, subscriber) {
    _super.call(this);
    this.subject = subject;
    this.subscriber = subscriber;
    this.closed = false;
  }
  SubjectSubscription.prototype.unsubscribe = function () {
    if (this.closed) {
      return;
    }
    this.closed = true;
    var subject = this.subject;
    var observers = subject.observers;
    this.subject = null;
    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
      return;
    }
    var subscriberIndex = observers.indexOf(this.subscriber);
    if (subscriberIndex !== -1) {
      observers.splice(subscriberIndex, 1);
    }
  };
  return SubjectSubscription;
}(Subscription_1.Subscription);
exports.SubjectSubscription = SubjectSubscription;
//# sourceMappingURL=SubjectSubscription.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/bindCallback.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1787');
var bindCallback_1 = require('1788');
Observable_1.Observable.bindCallback = bindCallback_1.bindCallback;
//# sourceMappingURL=bindCallback.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/bindCallback.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var BoundCallbackObservable_1 = require('2317');
exports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;
//# sourceMappingURL=bindCallback.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/BoundCallbackObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2400');
var tryCatch_1 = require('2401');
var errorObject_1 = require('2402');
var AsyncSubject_1 = require('2403');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var BoundCallbackObservable = function (_super) {
  __extends(BoundCallbackObservable, _super);
  function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {
    _super.call(this);
    this.callbackFunc = callbackFunc;
    this.selector = selector;
    this.args = args;
    this.context = context;
    this.scheduler = scheduler;
  }
  /* tslint:enable:max-line-length */
  /**
   * Converts a callback API to a function that returns an Observable.
   *
   * <span class="informal">Give it a function `f` of type `f(x, callback)` and
   * it will return a function `g` that when called as `g(x)` will output an
   * Observable.</span>
   *
   * `bindCallback` is not an operator because its input and output are not
   * Observables. The input is a function `func` with some parameters, but the
   * last parameter must be a callback function that `func` calls when it is
   * done.
   *
   * The output of `bindCallback` is a function that takes the same parameters
   * as `func`, except the last one (the callback). When the output function
   * is called with arguments, it will return an Observable. If `func` function
   * calls its callback with one argument, the Observable will emit that value.
   * If on the other hand callback is called with multiple values, resulting
   * Observable will emit an array with these arguments.
   *
   * It is very important to remember, that input function `func` is not called
   * when output function is, but rather when Observable returned by output
   * function is subscribed. This means if `func` makes AJAX request, that request
   * will be made every time someone subscribes to resulting Observable, but not before.
   *
   * Optionally, selector function can be passed to `bindObservable`. That function
   * takes the same arguments as callback, and returns value
   * that will be emitted by Observable instead of callback parameters themselves.
   * Even though by default multiple arguments passed to callback appear in the stream as array,
   * selector function will be called with arguments directly, just as callback would.
   * This means you can imagine default selector (when one is not provided explicitly)
   * as function that aggregates all its arguments into array, or simply returns first argument,
   * if there is only one.
   *
   * Last optional parameter - {@link Scheduler} - can be used to control when call
   * to `func` happens after someone subscribes to Observable, as well as when results
   * passed to callback will be emitted. By default subscription to Observable calls `func`
   * synchronously, but using `Scheduler.async` as last parameter will defer call to input function,
   * just like wrapping that call in `setTimeout` with time `0` would. So if you use async Scheduler
   * and call `subscribe` on output Observable, all function calls that are currently executing,
   * will end before `func` is invoked.
   *
   * When it comes to emitting results passed to callback, by default they are emitted
   * immediately after `func` invokes callback. In particular, if callback is called synchronously,
   * then subscription to resulting Observable will call `next` function synchronously as well.
   * If you want to defer that call, using `Scheduler.async` will, again, do the job.
   * This means that by using `Scheduler.async` you can, in a sense, ensure that `func`
   * always calls its callback asynchronously, thus avoiding terrifying Zalgo.
   *
   * Note that Observable created by output function will always emit only one value
   * and then complete right after. Even if `func` calls callback multiple times, values from
   * second and following calls will never appear in the stream. If you need to
   * listen for multiple calls, you probably want to use {@link fromEvent} or
   * {@link fromEventPattern} instead.
   *
   * If `func` depends on some context (`this` property), that context will be set
   * to the same context that output function has at call time. In particular, if `func`
   * is called as method of some object, in order to preserve proper behaviour,
   * it is recommended to set context of output function to that object as well,
   * provided `func` is not already bound.
   *
   * If input function calls its callback in "node style" (i.e. first argument to callback is
   * optional error parameter signaling whether call failed or not), {@link bindNodeCallback}
   * provides convenient error handling and probably is a better choice.
   * `bindCallback` will treat such functions without any difference and error parameter
   * (whether passed or not) will always be interpreted as regular callback argument.
   *
   *
   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
   * // Suppose we have jQuery.getJSON('/my/url', callback)
   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);
   * var result = getJSONAsObservable('/my/url');
   * result.subscribe(x => console.log(x), e => console.error(e));
   *
   *
   * @example <caption>Receive array of arguments passed to callback</caption>
   * someFunction((a, b, c) => {
   *   console.log(a); // 5
   *   console.log(b); // 'some string'
   *   console.log(c); // {someProperty: 'someValue'}
   * });
   *
   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);
   * boundSomeFunction().subscribe(values => {
   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]
   * });
   *
   *
   * @example <caption>Use bindCallback with selector function</caption>
   * someFunction((a, b, c) => {
   *   console.log(a); // 'a'
   *   console.log(b); // 'b'
   *   console.log(c); // 'c'
   * });
   *
   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);
   * boundSomeFunction().subscribe(value => {
   *   console.log(value) // 'abc'
   * });
   *
   *
   * @example <caption>Compare behaviour with and without async Scheduler</caption>
   * function iCallMyCallbackSynchronously(cb) {
   *   cb();
   * }
   *
   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);
   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);
   *
   * boundSyncFn().subscribe(() => console.log('I was sync!'));
   * boundAsyncFn().subscribe(() => console.log('I was async!'));
   * console.log('This happened...');
   *
   * // Logs:
   * // I was sync!
   * // This happened...
   * // I was async!
   *
   *
   * @example <caption>Use bindCallback on object method</caption>
   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);
   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject
   * .subscribe(subscriber);
   *
   *
   * @see {@link bindNodeCallback}
   * @see {@link from}
   * @see {@link fromPromise}
   *
   * @param {function} func Function with a callback as the last parameter.
   * @param {function} [selector] A function which takes the arguments from the
   * callback and maps those to a value to emit on the output Observable.
   * @param {Scheduler} [scheduler] The scheduler on which to schedule the
   * callbacks.
   * @return {function(...params: *): Observable} A function which returns the
   * Observable that delivers the same values the callback would deliver.
   * @static true
   * @name bindCallback
   * @owner Observable
   */
  BoundCallbackObservable.create = function (func, selector, scheduler) {
    if (selector === void 0) {
      selector = undefined;
    }
    return function () {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      return new BoundCallbackObservable(func, selector, args, this, scheduler);
    };
  };
  BoundCallbackObservable.prototype._subscribe = function (subscriber) {
    var callbackFunc = this.callbackFunc;
    var args = this.args;
    var scheduler = this.scheduler;
    var subject = this.subject;
    if (!scheduler) {
      if (!subject) {
        subject = this.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function handlerFn() {
          var innerArgs = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            innerArgs[_i - 0] = arguments[_i];
          }
          var source = handlerFn.source;
          var selector = source.selector,
              subject = source.subject;
          if (selector) {
            var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
            if (result_1 === errorObject_1.errorObject) {
              subject.error(errorObject_1.errorObject.e);
            } else {
              subject.next(result_1);
              subject.complete();
            }
          } else {
            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
            subject.complete();
          }
        };
        // use named function instance to avoid closure.
        handler.source = this;
        var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));
        if (result === errorObject_1.errorObject) {
          subject.error(errorObject_1.errorObject.e);
        }
      }
      return subject.subscribe(subscriber);
    } else {
      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });
    }
  };
  BoundCallbackObservable.dispatch = function (state) {
    var self = this;
    var source = state.source,
        subscriber = state.subscriber,
        context = state.context;
    var callbackFunc = source.callbackFunc,
        args = source.args,
        scheduler = source.scheduler;
    var subject = source.subject;
    if (!subject) {
      subject = source.subject = new AsyncSubject_1.AsyncSubject();
      var handler = function handlerFn() {
        var innerArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          innerArgs[_i - 0] = arguments[_i];
        }
        var source = handlerFn.source;
        var selector = source.selector,
            subject = source.subject;
        if (selector) {
          var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
          if (result_2 === errorObject_1.errorObject) {
            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
          } else {
            self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
          }
        } else {
          var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
          self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
        }
      };
      // use named function to pass values in without closure
      handler.source = source;
      var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));
      if (result === errorObject_1.errorObject) {
        subject.error(errorObject_1.errorObject.e);
      }
    }
    self.add(subject.subscribe(subscriber));
  };
  return BoundCallbackObservable;
}(Observable_1.Observable);
exports.BoundCallbackObservable = BoundCallbackObservable;
function dispatchNext(arg) {
  var value = arg.value,
      subject = arg.subject;
  subject.next(value);
  subject.complete();
}
function dispatchError(arg) {
  var err = arg.err,
      subject = arg.subject;
  subject.error(err);
}
//# sourceMappingURL=BoundCallbackObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/AsyncSubject.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('1739');
var Subscription_1 = require('1740');
/**
 * @class AsyncSubject<T>
 */
var AsyncSubject = function (_super) {
  __extends(AsyncSubject, _super);
  function AsyncSubject() {
    _super.apply(this, arguments);
    this.value = null;
    this.hasNext = false;
    this.hasCompleted = false;
  }
  AsyncSubject.prototype._subscribe = function (subscriber) {
    if (this.hasError) {
      subscriber.error(this.thrownError);
      return Subscription_1.Subscription.EMPTY;
    } else if (this.hasCompleted && this.hasNext) {
      subscriber.next(this.value);
      subscriber.complete();
      return Subscription_1.Subscription.EMPTY;
    }
    return _super.prototype._subscribe.call(this, subscriber);
  };
  AsyncSubject.prototype.next = function (value) {
    if (!this.hasCompleted) {
      this.value = value;
      this.hasNext = true;
    }
  };
  AsyncSubject.prototype.error = function (error) {
    if (!this.hasCompleted) {
      _super.prototype.error.call(this, error);
    }
  };
  AsyncSubject.prototype.complete = function () {
    this.hasCompleted = true;
    if (this.hasNext) {
      _super.prototype.next.call(this, this.value);
    }
    _super.prototype.complete.call(this);
  };
  return AsyncSubject;
}(Subject_1.Subject);
exports.AsyncSubject = AsyncSubject;
//# sourceMappingURL=AsyncSubject.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/bindNodeCallback.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1793');
var bindNodeCallback_1 = require('1794');
Observable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
//# sourceMappingURL=bindNodeCallback.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/bindNodeCallback.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var BoundNodeCallbackObservable_1 = require('2329');
exports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;
//# sourceMappingURL=bindNodeCallback.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/BoundNodeCallbackObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2409');
var tryCatch_1 = require('2410');
var errorObject_1 = require('2411');
var AsyncSubject_1 = require('2412');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var BoundNodeCallbackObservable = function (_super) {
  __extends(BoundNodeCallbackObservable, _super);
  function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {
    _super.call(this);
    this.callbackFunc = callbackFunc;
    this.selector = selector;
    this.args = args;
    this.context = context;
    this.scheduler = scheduler;
  }
  /* tslint:enable:max-line-length */
  /**
   * Converts a Node.js-style callback API to a function that returns an
   * Observable.
   *
   * <span class="informal">It's just like {@link bindCallback}, but the
   * callback is expected to be of type `callback(error, result)`.</span>
   *
   * `bindNodeCallback` is not an operator because its input and output are not
   * Observables. The input is a function `func` with some parameters, but the
   * last parameter must be a callback function that `func` calls when it is
   * done. The callback function is expected to follow Node.js conventions,
   * where the first argument to the callback is an error object, signaling
   * whether call was successful. If that object is passed to callback, it means
   * something went wrong.
   *
   * The output of `bindNodeCallback` is a function that takes the same
   * parameters as `func`, except the last one (the callback). When the output
   * function is called with arguments, it will return an Observable.
   * If `func` calls its callback with error parameter present, Observable will
   * error with that value as well. If error parameter is not passed, Observable will emit
   * second parameter. If there are more parameters (third and so on),
   * Observable will emit an array with all arguments, except first error argument.
   *
   * Optionally `bindNodeCallback` accepts selector function, which allows you to
   * make resulting Observable emit value computed by selector, instead of regular
   * callback arguments. It works similarly to {@link bindCallback} selector, but
   * Node.js-style error argument will never be passed to that function.
   *
   * Note that `func` will not be called at the same time output function is,
   * but rather whenever resulting Observable is subscribed. By default call to
   * `func` will happen synchronously after subscription, but that can be changed
   * with proper {@link Scheduler} provided as optional third parameter. Scheduler
   * can also control when values from callback will be emitted by Observable.
   * To find out more, check out documentation for {@link bindCallback}, where
   * Scheduler works exactly the same.
   *
   * As in {@link bindCallback}, context (`this` property) of input function will be set to context
   * of returned function, when it is called.
   *
   * After Observable emits value, it will complete immediately. This means
   * even if `func` calls callback again, values from second and consecutive
   * calls will never appear on the stream. If you need to handle functions
   * that call callbacks multiple times, check out {@link fromEvent} or
   * {@link fromEventPattern} instead.
   *
   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.
   * "Node.js-style" callbacks are just a convention, so if you write for
   * browsers or any other environment and API you use implements that callback style,
   * `bindNodeCallback` can be safely used on that API functions as well.
   *
   * Remember that Error object passed to callback does not have to be an instance
   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.
   * Error parameter of callback function is interpreted as "present", when value
   * of that parameter is truthy. It could be, for example, non-zero number, non-empty
   * string or boolean `true`. In all of these cases resulting Observable would error
   * with that value. This means usually regular style callbacks will fail very often when
   * `bindNodeCallback` is used. If your Observable errors much more often then you
   * would expect, check if callback really is called in Node.js-style and, if not,
   * switch to {@link bindCallback} instead.
   *
   * Note that even if error parameter is technically present in callback, but its value
   * is falsy, it still won't appear in array emitted by Observable or in selector function.
   *
   *
   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
   * import * as fs from 'fs';
   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);
   * var result = readFileAsObservable('./roadNames.txt', 'utf8');
   * result.subscribe(x => console.log(x), e => console.error(e));
   *
   *
   * @example <caption>Use on function calling callback with multiple arguments</caption>
   * someFunction((err, a, b) => {
   *   console.log(err); // null
   *   console.log(a); // 5
   *   console.log(b); // "some string"
   * });
   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);
   * boundSomeFunction()
   * .subscribe(value => {
   *   console.log(value); // [5, "some string"]
   * });
   *
   *
   * @example <caption>Use with selector function</caption>
   * someFunction((err, a, b) => {
   *   console.log(err); // undefined
   *   console.log(a); // "abc"
   *   console.log(b); // "DEF"
   * });
   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);
   * boundSomeFunction()
   * .subscribe(value => {
   *   console.log(value); // "abcDEF"
   * });
   *
   *
   * @example <caption>Use on function calling callback in regular style</caption>
   * someFunction(a => {
   *   console.log(a); // 5
   * });
   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);
   * boundSomeFunction()
   * .subscribe(
   *   value => {}             // never gets called
   *   err => console.log(err) // 5
   *);
   *
   *
   * @see {@link bindCallback}
   * @see {@link from}
   * @see {@link fromPromise}
   *
   * @param {function} func Function with a Node.js-style callback as the last parameter.
   * @param {function} [selector] A function which takes the arguments from the
   * callback and maps those to a value to emit on the output Observable.
   * @param {Scheduler} [scheduler] The scheduler on which to schedule the
   * callbacks.
   * @return {function(...params: *): Observable} A function which returns the
   * Observable that delivers the same values the Node.js callback would
   * deliver.
   * @static true
   * @name bindNodeCallback
   * @owner Observable
   */
  BoundNodeCallbackObservable.create = function (func, selector, scheduler) {
    if (selector === void 0) {
      selector = undefined;
    }
    return function () {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);
    };
  };
  BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {
    var callbackFunc = this.callbackFunc;
    var args = this.args;
    var scheduler = this.scheduler;
    var subject = this.subject;
    if (!scheduler) {
      if (!subject) {
        subject = this.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function handlerFn() {
          var innerArgs = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            innerArgs[_i - 0] = arguments[_i];
          }
          var source = handlerFn.source;
          var selector = source.selector,
              subject = source.subject;
          var err = innerArgs.shift();
          if (err) {
            subject.error(err);
          } else if (selector) {
            var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
            if (result_1 === errorObject_1.errorObject) {
              subject.error(errorObject_1.errorObject.e);
            } else {
              subject.next(result_1);
              subject.complete();
            }
          } else {
            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
            subject.complete();
          }
        };
        // use named function instance to avoid closure.
        handler.source = this;
        var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));
        if (result === errorObject_1.errorObject) {
          subject.error(errorObject_1.errorObject.e);
        }
      }
      return subject.subscribe(subscriber);
    } else {
      return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });
    }
  };
  return BoundNodeCallbackObservable;
}(Observable_1.Observable);
exports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;
function dispatch(state) {
  var self = this;
  var source = state.source,
      subscriber = state.subscriber,
      context = state.context;
  // XXX: cast to `any` to access to the private field in `source`.
  var _a = source,
      callbackFunc = _a.callbackFunc,
      args = _a.args,
      scheduler = _a.scheduler;
  var subject = source.subject;
  if (!subject) {
    subject = source.subject = new AsyncSubject_1.AsyncSubject();
    var handler = function handlerFn() {
      var innerArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        innerArgs[_i - 0] = arguments[_i];
      }
      var source = handlerFn.source;
      var selector = source.selector,
          subject = source.subject;
      var err = innerArgs.shift();
      if (err) {
        self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
      } else if (selector) {
        var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
        if (result_2 === errorObject_1.errorObject) {
          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
        } else {
          self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
        }
      } else {
        var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
        self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
      }
    };
    // use named function to pass values in without closure
    handler.source = source;
    var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));
    if (result === errorObject_1.errorObject) {
      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
    }
  }
  self.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
  var value = arg.value,
      subject = arg.subject;
  subject.next(value);
  subject.complete();
}
function dispatchError(arg) {
  var err = arg.err,
      subject = arg.subject;
  subject.error(err);
}
//# sourceMappingURL=BoundNodeCallbackObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/combineLatest.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1789');
var combineLatest_1 = require('1790');
Observable_1.Observable.combineLatest = combineLatest_1.combineLatest;
//# sourceMappingURL=combineLatest.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/combineLatest.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var isScheduler_1 = require('2324');
var isArray_1 = require('2325');
var ArrayObservable_1 = require('2326');
var combineLatest_1 = require('2327');
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from all the Observables passed as
 * arguments. This is done by subscribing to each Observable in order and,
 * whenever any Observable emits, collecting an array of the most recent
 * values from each Observable. So if you pass `n` Observables to operator,
 * returned Observable will always emit an array of `n` values, in order
 * corresponding to order of passed Observables (value from the first Observable
 * on the first place and so on).
 *
 * Static version of `combineLatest` accepts either an array of Observables
 * or each Observable can be put directly as an argument. Note that array of
 * Observables is good choice, if you don't know beforehand how many Observables
 * you will combine. Passing empty array will result in Observable that
 * completes immediately.
 *
 * To ensure output array has always the same length, `combineLatest` will
 * actually wait for all input Observables to emit at least once,
 * before it starts emitting results. This means if some Observable emits
 * values before other Observables started emitting, all that values but last
 * will be lost. On the other hand, is some Observable does not emit value but
 * completes, resulting Observable will complete at the same moment without
 * emitting anything, since it will be now impossible to include value from
 * completed Observable in resulting array. Also, if some input Observable does
 * not emit any value and never completes, `combineLatest` will also never emit
 * and never complete, since, again, it will wait for all streams to emit some
 * value.
 *
 * If at least one Observable was passed to `combineLatest` and all passed Observables
 * emitted something, resulting Observable will complete when all combined
 * streams complete. So even if some Observable completes, result of
 * `combineLatest` will still emit values when other Observables do. In case
 * of completed Observable, its value from now on will always be the last
 * emitted value. On the other hand, if any Observable errors, `combineLatest`
 * will error immediately as well, and all other Observables will be unsubscribed.
 *
 * `combineLatest` accepts as optional parameter `project` function, which takes
 * as arguments all values that would normally be emitted by resulting Observable.
 * `project` can return any kind of value, which will be then emitted by Observable
 * instead of default array. Note that `project` does not take as argument that array
 * of values, but values themselves. That means default `project` can be imagined
 * as function that takes all its arguments and puts them into an array.
 *
 *
 * @example <caption>Combine two timer Observables</caption>
 * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now
 * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now
 * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);
 * combinedTimers.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0] after 0.5s
 * // [1, 0] after 1s
 * // [1, 1] after 1.5s
 * // [2, 1] after 2s
 *
 *
 * @example <caption>Combine an array of Observables</caption>
 * const observables = [1, 5, 10].map(
 *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds
 * );
 * const combined = Rx.Observable.combineLatest(observables);
 * combined.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0, 0] immediately
 * // [1, 0, 0] after 1s
 * // [1, 5, 0] after 5s
 * // [1, 5, 10] after 10s
 *
 *
 * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} observable1 An input Observable to combine with other Observables.
 * @param {ObservableInput} observable2 An input Observable to combine with other Observables.
 * More than one input Observables may be given as arguments
 * or an array of Observables may be given as the first argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each input Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @static true
 * @name combineLatest
 * @owner Observable
 */
function combineLatest() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  var project = null;
  var scheduler = null;
  if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
    scheduler = observables.pop();
  }
  if (typeof observables[observables.length - 1] === 'function') {
    project = observables.pop();
  }
  // if the first and only other argument besides the resultSelector is an array
  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
  if (observables.length === 1 && isArray_1.isArray(observables[0])) {
    observables = observables[0];
  }
  return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));
}
exports.combineLatest = combineLatest;
//# sourceMappingURL=combineLatest.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/isScheduler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

function isScheduler(value) {
  return value && typeof value.schedule === 'function';
}
exports.isScheduler = isScheduler;
//# sourceMappingURL=isScheduler.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/ArrayObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2373');
var ScalarObservable_1 = require('2374');
var EmptyObservable_1 = require('2375');
var isScheduler_1 = require('2376');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayObservable = function (_super) {
  __extends(ArrayObservable, _super);
  function ArrayObservable(array, scheduler) {
    _super.call(this);
    this.array = array;
    this.scheduler = scheduler;
    if (!scheduler && array.length === 1) {
      this._isScalar = true;
      this.value = array[0];
    }
  }
  ArrayObservable.create = function (array, scheduler) {
    return new ArrayObservable(array, scheduler);
  };
  /**
   * Creates an Observable that emits some values you specify as arguments,
   * immediately one after the other, and then emits a complete notification.
   *
   * <span class="informal">Emits the arguments you provide, then completes.
   * </span>
   *
   * <img src="./img/of.png" width="100%">
   *
   * This static operator is useful for creating a simple Observable that only
   * emits the arguments given, and the complete notification thereafter. It can
   * be used for composing with other Observables, such as with {@link concat}.
   * By default, it uses a `null` IScheduler, which means the `next`
   * notifications are sent synchronously, although with a different IScheduler
   * it is possible to determine when those notifications will be delivered.
   *
   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
   * var numbers = Rx.Observable.of(10, 20, 30);
   * var letters = Rx.Observable.of('a', 'b', 'c');
   * var interval = Rx.Observable.interval(1000);
   * var result = numbers.concat(letters).concat(interval);
   * result.subscribe(x => console.log(x));
   *
   * @see {@link create}
   * @see {@link empty}
   * @see {@link never}
   * @see {@link throw}
   *
   * @param {...T} values Arguments that represent `next` values to be emitted.
   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
   * the emissions of the `next` notifications.
   * @return {Observable<T>} An Observable that emits each given input value.
   * @static true
   * @name of
   * @owner Observable
   */
  ArrayObservable.of = function () {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      array[_i - 0] = arguments[_i];
    }
    var scheduler = array[array.length - 1];
    if (isScheduler_1.isScheduler(scheduler)) {
      array.pop();
    } else {
      scheduler = null;
    }
    var len = array.length;
    if (len > 1) {
      return new ArrayObservable(array, scheduler);
    } else if (len === 1) {
      return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
    } else {
      return new EmptyObservable_1.EmptyObservable(scheduler);
    }
  };
  ArrayObservable.dispatch = function (state) {
    var array = state.array,
        index = state.index,
        count = state.count,
        subscriber = state.subscriber;
    if (index >= count) {
      subscriber.complete();
      return;
    }
    subscriber.next(array[index]);
    if (subscriber.closed) {
      return;
    }
    state.index = index + 1;
    this.schedule(state);
  };
  ArrayObservable.prototype._subscribe = function (subscriber) {
    var index = 0;
    var array = this.array;
    var count = array.length;
    var scheduler = this.scheduler;
    if (scheduler) {
      return scheduler.schedule(ArrayObservable.dispatch, 0, {
        array: array, index: index, count: count, subscriber: subscriber
      });
    } else {
      for (var i = 0; i < count && !subscriber.closed; i++) {
        subscriber.next(array[i]);
      }
      subscriber.complete();
    }
  };
  return ArrayObservable;
}(Observable_1.Observable);
exports.ArrayObservable = ArrayObservable;
//# sourceMappingURL=ArrayObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/ScalarObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2392');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ScalarObservable = function (_super) {
  __extends(ScalarObservable, _super);
  function ScalarObservable(value, scheduler) {
    _super.call(this);
    this.value = value;
    this.scheduler = scheduler;
    this._isScalar = true;
    if (scheduler) {
      this._isScalar = false;
    }
  }
  ScalarObservable.create = function (value, scheduler) {
    return new ScalarObservable(value, scheduler);
  };
  ScalarObservable.dispatch = function (state) {
    var done = state.done,
        value = state.value,
        subscriber = state.subscriber;
    if (done) {
      subscriber.complete();
      return;
    }
    subscriber.next(value);
    if (subscriber.closed) {
      return;
    }
    state.done = true;
    this.schedule(state);
  };
  ScalarObservable.prototype._subscribe = function (subscriber) {
    var value = this.value;
    var scheduler = this.scheduler;
    if (scheduler) {
      return scheduler.schedule(ScalarObservable.dispatch, 0, {
        done: false, value: value, subscriber: subscriber
      });
    } else {
      subscriber.next(value);
      if (!subscriber.closed) {
        subscriber.complete();
      }
    }
  };
  return ScalarObservable;
}(Observable_1.Observable);
exports.ScalarObservable = ScalarObservable;
//# sourceMappingURL=ScalarObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/EmptyObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2391');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var EmptyObservable = function (_super) {
  __extends(EmptyObservable, _super);
  function EmptyObservable(scheduler) {
    _super.call(this);
    this.scheduler = scheduler;
  }
  /**
   * Creates an Observable that emits no items to the Observer and immediately
   * emits a complete notification.
   *
   * <span class="informal">Just emits 'complete', and nothing else.
   * </span>
   *
   * <img src="./img/empty.png" width="100%">
   *
   * This static operator is useful for creating a simple Observable that only
   * emits the complete notification. It can be used for composing with other
   * Observables, such as in a {@link mergeMap}.
   *
   * @example <caption>Emit the number 7, then complete.</caption>
   * var result = Rx.Observable.empty().startWith(7);
   * result.subscribe(x => console.log(x));
   *
   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
   * var interval = Rx.Observable.interval(1000);
   * var result = interval.mergeMap(x =>
   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
   * );
   * result.subscribe(x => console.log(x));
   *
   * // Results in the following to the console:
   * // x is equal to the count on the interval eg(0,1,2,3,...)
   * // x will occur every 1000ms
   * // if x % 2 is equal to 1 print abc
   * // if x % 2 is not equal to 1 nothing will be output
   *
   * @see {@link create}
   * @see {@link never}
   * @see {@link of}
   * @see {@link throw}
   *
   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
   * the emission of the complete notification.
   * @return {Observable} An "empty" Observable: emits only the complete
   * notification.
   * @static true
   * @name empty
   * @owner Observable
   */
  EmptyObservable.create = function (scheduler) {
    return new EmptyObservable(scheduler);
  };
  EmptyObservable.dispatch = function (arg) {
    var subscriber = arg.subscriber;
    subscriber.complete();
  };
  EmptyObservable.prototype._subscribe = function (subscriber) {
    var scheduler = this.scheduler;
    if (scheduler) {
      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
    } else {
      subscriber.complete();
    }
  };
  return EmptyObservable;
}(Observable_1.Observable);
exports.EmptyObservable = EmptyObservable;
//# sourceMappingURL=EmptyObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/combineLatest.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = require('2112');
var isArray_1 = require('2113');
var OuterSubscriber_1 = require('2114');
var subscribeToResult_1 = require('2115');
var none = {};
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from this Observable with values from
 * Observables passed as arguments. This is done by subscribing to each
 * Observable, in order, and collecting an array of each of the most recent
 * values any time any of the input Observables emits, then either taking that
 * array and passing it as arguments to an optional `project` function and
 * emitting the return value of that, or just emitting the array of recent
 * values directly if there is no `project` function.
 *
 * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method combineLatest
 * @owner Observable
 */
function combineLatest() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  var project = null;
  if (typeof observables[observables.length - 1] === 'function') {
    project = observables.pop();
  }
  // if the first and only other argument besides the resultSelector is an array
  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
  if (observables.length === 1 && isArray_1.isArray(observables[0])) {
    observables = observables[0].slice();
  }
  observables.unshift(this);
  return this.lift.call(new ArrayObservable_1.ArrayObservable(observables), new CombineLatestOperator(project));
}
exports.combineLatest = combineLatest;
var CombineLatestOperator = function () {
  function CombineLatestOperator(project) {
    this.project = project;
  }
  CombineLatestOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));
  };
  return CombineLatestOperator;
}();
exports.CombineLatestOperator = CombineLatestOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CombineLatestSubscriber = function (_super) {
  __extends(CombineLatestSubscriber, _super);
  function CombineLatestSubscriber(destination, project) {
    _super.call(this, destination);
    this.project = project;
    this.active = 0;
    this.values = [];
    this.observables = [];
  }
  CombineLatestSubscriber.prototype._next = function (observable) {
    this.values.push(none);
    this.observables.push(observable);
  };
  CombineLatestSubscriber.prototype._complete = function () {
    var observables = this.observables;
    var len = observables.length;
    if (len === 0) {
      this.destination.complete();
    } else {
      this.active = len;
      this.toRespond = len;
      for (var i = 0; i < len; i++) {
        var observable = observables[i];
        this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
      }
    }
  };
  CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
    if ((this.active -= 1) === 0) {
      this.destination.complete();
    }
  };
  CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    var values = this.values;
    var oldVal = values[outerIndex];
    var toRespond = !this.toRespond ? 0 : oldVal === none ? --this.toRespond : this.toRespond;
    values[outerIndex] = innerValue;
    if (toRespond === 0) {
      if (this.project) {
        this._tryProject(values);
      } else {
        this.destination.next(values.slice());
      }
    }
  };
  CombineLatestSubscriber.prototype._tryProject = function (values) {
    var result;
    try {
      result = this.project.apply(this, values);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return CombineLatestSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.CombineLatestSubscriber = CombineLatestSubscriber;
//# sourceMappingURL=combineLatest.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/OuterSubscriber.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2364');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = function (_super) {
  __extends(OuterSubscriber, _super);
  function OuterSubscriber() {
    _super.apply(this, arguments);
  }
  OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.destination.next(innerValue);
  };
  OuterSubscriber.prototype.notifyError = function (error, innerSub) {
    this.destination.error(error);
  };
  OuterSubscriber.prototype.notifyComplete = function (innerSub) {
    this.destination.complete();
  };
  return OuterSubscriber;
}(Subscriber_1.Subscriber);
exports.OuterSubscriber = OuterSubscriber;
//# sourceMappingURL=OuterSubscriber.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/subscribeToResult.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('2365');
var isArrayLike_1 = require('2366');
var isPromise_1 = require('2367');
var isObject_1 = require('2368');
var Observable_1 = require('2369');
var iterator_1 = require('2370');
var InnerSubscriber_1 = require('2371');
var observable_1 = require('2372');
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
  var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
  if (destination.closed) {
    return null;
  }
  if (result instanceof Observable_1.Observable) {
    if (result._isScalar) {
      destination.next(result.value);
      destination.complete();
      return null;
    } else {
      return result.subscribe(destination);
    }
  } else if (isArrayLike_1.isArrayLike(result)) {
    for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
      destination.next(result[i]);
    }
    if (!destination.closed) {
      destination.complete();
    }
  } else if (isPromise_1.isPromise(result)) {
    result.then(function (value) {
      if (!destination.closed) {
        destination.next(value);
        destination.complete();
      }
    }, function (err) {
      return destination.error(err);
    }).then(null, function (err) {
      // Escaping the Promise trap: globally throw unhandled errors
      root_1.root.setTimeout(function () {
        throw err;
      });
    });
    return destination;
  } else if (result && typeof result[iterator_1.iterator] === 'function') {
    var iterator = result[iterator_1.iterator]();
    do {
      var item = iterator.next();
      if (item.done) {
        destination.complete();
        break;
      }
      destination.next(item.value);
      if (destination.closed) {
        break;
      }
    } while (true);
  } else if (result && typeof result[observable_1.observable] === 'function') {
    var obs = result[observable_1.observable]();
    if (typeof obs.subscribe !== 'function') {
      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
    } else {
      return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
    }
  } else {
    var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
    var msg = "You provided " + value + " where a stream was expected." + ' You can provide an Observable, Promise, Array, or Iterable.';
    destination.error(new TypeError(msg));
  }
  return null;
}
exports.subscribeToResult = subscribeToResult;
//# sourceMappingURL=subscribeToResult.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/isArrayLike.js", function(__filename, __dirname, require, module, exports) {
"use strict";

exports.isArrayLike = function (x) {
  return x && typeof x.length === 'number';
};
//# sourceMappingURL=isArrayLike.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/isPromise.js", function(__filename, __dirname, require, module, exports) {
"use strict";

function isPromise(value) {
  return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
exports.isPromise = isPromise;
//# sourceMappingURL=isPromise.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/symbol/iterator.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('1784');
function symbolIteratorPonyfill(root) {
  var Symbol = root.Symbol;
  if (typeof Symbol === 'function') {
    if (!Symbol.iterator) {
      Symbol.iterator = Symbol('iterator polyfill');
    }
    return Symbol.iterator;
  } else {
    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
    var Set_1 = root.Set;
    if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
      return '@@iterator';
    }
    var Map_1 = root.Map;
    // required for compatability with es6-shim
    if (Map_1) {
      var keys = Object.getOwnPropertyNames(Map_1.prototype);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
        if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
          return key;
        }
      }
    }
    return '@@iterator';
  }
}
exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
exports.iterator = symbolIteratorPonyfill(root_1.root);
/**
 * @deprecated use iterator instead
 */
exports.$$iterator = exports.iterator;
//# sourceMappingURL=iterator.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/InnerSubscriber.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2453');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = function (_super) {
  __extends(InnerSubscriber, _super);
  function InnerSubscriber(parent, outerValue, outerIndex) {
    _super.call(this);
    this.parent = parent;
    this.outerValue = outerValue;
    this.outerIndex = outerIndex;
    this.index = 0;
  }
  InnerSubscriber.prototype._next = function (value) {
    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
  };
  InnerSubscriber.prototype._error = function (error) {
    this.parent.notifyError(error, this);
    this.unsubscribe();
  };
  InnerSubscriber.prototype._complete = function () {
    this.parent.notifyComplete(this);
    this.unsubscribe();
  };
  return InnerSubscriber;
}(Subscriber_1.Subscriber);
exports.InnerSubscriber = InnerSubscriber;
//# sourceMappingURL=InnerSubscriber.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/concat.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1791');
var concat_1 = require('1792');
Observable_1.Observable.concat = concat_1.concat;
//# sourceMappingURL=concat.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/concat.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var concat_1 = require('2328');
exports.concat = concat_1.concatStatic;
//# sourceMappingURL=concat.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/concat.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2118');
var isScheduler_1 = require('2119');
var ArrayObservable_1 = require('2120');
var mergeAll_1 = require('2121');
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from every
 * given input Observable after the current Observable.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * Joins this Observable with multiple other Observables by subscribing to them
 * one at a time, starting with the source, and merging their results into the
 * output Observable. Will wait for each Observable to complete before moving
 * on to the next.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = timer.concat(sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 * @example <caption>Concatenate 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = timer1.concat(timer2, timer3);
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} other An input Observable to concatenate after the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @method concat
 * @owner Observable
 */
function concat() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  return this.lift.call(concatStatic.apply(void 0, [this].concat(observables)));
}
exports.concat = concat;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from given
 * Observable and then moves on to the next.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * `concat` joins multiple Observables together, by subscribing to them one at a time and
 * merging their results into the output Observable. You can pass either an array of
 * Observables, or put them directly as arguments. Passing an empty array will result
 * in Observable that completes immediately.
 *
 * `concat` will subscribe to first input Observable and emit all its values, without
 * changing or affecting them in any way. When that Observable completes, it will
 * subscribe to then next Observable passed and, again, emit its values. This will be
 * repeated, until the operator runs out of Observables. When last input Observable completes,
 * `concat` will complete as well. At any given moment only one Observable passed to operator
 * emits values. If you would like to emit values from passed Observables concurrently, check out
 * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
 * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
 *
 * Note that if some input Observable never completes, `concat` will also never complete
 * and Observables following the one that did not complete will never be subscribed. On the other
 * hand, if some Observable simply completes immediately after it is subscribed, it will be
 * invisible for `concat`, which will just move on to the next Observable.
 *
 * If any Observable in chain errors, instead of passing control to the next Observable,
 * `concat` will error immediately as well. Observables that would be subscribed after
 * the one that emitted error, never will.
 *
 * If you pass to `concat` the same Observable many times, its stream of values
 * will be "replayed" on every subscription, which means you can repeat given Observable
 * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
 * you can always use {@link repeat}.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 *
 * @example <caption>Concatenate an array of 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 *
 * @example <caption>Concatenate the same Observable to repeat it</caption>
 * const timer = Rx.Observable.interval(1000).take(2);
 *
 * Rx.Observable.concat(timer, timer) // concating the same Observable!
 * .subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('...and it is done!')
 * );
 *
 * // Logs:
 * // 0 after 1s
 * // 1 after 2s
 * // 0 after 3s
 * // 1 after 4s
 * // "...and it is done!" also after 4s
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} input1 An input Observable to concatenate with others.
 * @param {ObservableInput} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
function concatStatic() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  var scheduler = null;
  var args = observables;
  if (isScheduler_1.isScheduler(args[observables.length - 1])) {
    scheduler = args.pop();
  }
  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
    return observables[0];
  }
  return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
}
exports.concatStatic = concatStatic;
//# sourceMappingURL=concat.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/mergeAll.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2191');
var subscribeToResult_1 = require('2192');
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  return this.lift(new MergeAllOperator(concurrent));
}
exports.mergeAll = mergeAll;
var MergeAllOperator = function () {
  function MergeAllOperator(concurrent) {
    this.concurrent = concurrent;
  }
  MergeAllOperator.prototype.call = function (observer, source) {
    return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
  };
  return MergeAllOperator;
}();
exports.MergeAllOperator = MergeAllOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeAllSubscriber = function (_super) {
  __extends(MergeAllSubscriber, _super);
  function MergeAllSubscriber(destination, concurrent) {
    _super.call(this, destination);
    this.concurrent = concurrent;
    this.hasCompleted = false;
    this.buffer = [];
    this.active = 0;
  }
  MergeAllSubscriber.prototype._next = function (observable) {
    if (this.active < this.concurrent) {
      this.active++;
      this.add(subscribeToResult_1.subscribeToResult(this, observable));
    } else {
      this.buffer.push(observable);
    }
  };
  MergeAllSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.active === 0 && this.buffer.length === 0) {
      this.destination.complete();
    }
  };
  MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
    var buffer = this.buffer;
    this.remove(innerSub);
    this.active--;
    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      this.destination.complete();
    }
  };
  return MergeAllSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeAllSubscriber = MergeAllSubscriber;
//# sourceMappingURL=mergeAll.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/defer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1795');
var defer_1 = require('1796');
Observable_1.Observable.defer = defer_1.defer;
//# sourceMappingURL=defer.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/defer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var DeferObservable_1 = require('2330');
exports.defer = DeferObservable_1.DeferObservable.create;
//# sourceMappingURL=defer.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/DeferObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2397');
var subscribeToResult_1 = require('2398');
var OuterSubscriber_1 = require('2399');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var DeferObservable = function (_super) {
  __extends(DeferObservable, _super);
  function DeferObservable(observableFactory) {
    _super.call(this);
    this.observableFactory = observableFactory;
  }
  /**
   * Creates an Observable that, on subscribe, calls an Observable factory to
   * make an Observable for each new Observer.
   *
   * <span class="informal">Creates the Observable lazily, that is, only when it
   * is subscribed.
   * </span>
   *
   * <img src="./img/defer.png" width="100%">
   *
   * `defer` allows you to create the Observable only when the Observer
   * subscribes, and create a fresh Observable for each Observer. It waits until
   * an Observer subscribes to it, and then it generates an Observable,
   * typically with an Observable factory function. It does this afresh for each
   * subscriber, so although each subscriber may think it is subscribing to the
   * same Observable, in fact each subscriber gets its own individual
   * Observable.
   *
   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
   * var clicksOrInterval = Rx.Observable.defer(function () {
   *   if (Math.random() > 0.5) {
   *     return Rx.Observable.fromEvent(document, 'click');
   *   } else {
   *     return Rx.Observable.interval(1000);
   *   }
   * });
   * clicksOrInterval.subscribe(x => console.log(x));
   *
   * // Results in the following behavior:
   * // If the result of Math.random() is greater than 0.5 it will listen
   * // for clicks anywhere on the "document"; when document is clicked it
   * // will log a MouseEvent object to the console. If the result is less
   * // than 0.5 it will emit ascending numbers, one every second(1000ms).
   *
   * @see {@link create}
   *
   * @param {function(): SubscribableOrPromise} observableFactory The Observable
   * factory function to invoke for each Observer that subscribes to the output
   * Observable. May also return a Promise, which will be converted on the fly
   * to an Observable.
   * @return {Observable} An Observable whose Observers' subscriptions trigger
   * an invocation of the given Observable factory function.
   * @static true
   * @name defer
   * @owner Observable
   */
  DeferObservable.create = function (observableFactory) {
    return new DeferObservable(observableFactory);
  };
  DeferObservable.prototype._subscribe = function (subscriber) {
    return new DeferSubscriber(subscriber, this.observableFactory);
  };
  return DeferObservable;
}(Observable_1.Observable);
exports.DeferObservable = DeferObservable;
var DeferSubscriber = function (_super) {
  __extends(DeferSubscriber, _super);
  function DeferSubscriber(destination, factory) {
    _super.call(this, destination);
    this.factory = factory;
    this.tryDefer();
  }
  DeferSubscriber.prototype.tryDefer = function () {
    try {
      this._callFactory();
    } catch (err) {
      this._error(err);
    }
  };
  DeferSubscriber.prototype._callFactory = function () {
    var result = this.factory();
    if (result) {
      this.add(subscribeToResult_1.subscribeToResult(this, result));
    }
  };
  return DeferSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=DeferObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/empty.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1797');
var empty_1 = require('1798');
Observable_1.Observable.empty = empty_1.empty;
//# sourceMappingURL=empty.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/empty.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var EmptyObservable_1 = require('2331');
exports.empty = EmptyObservable_1.EmptyObservable.create;
//# sourceMappingURL=empty.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/forkJoin.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1803');
var forkJoin_1 = require('1804');
Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
//# sourceMappingURL=forkJoin.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/forkJoin.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var ForkJoinObservable_1 = require('2332');
exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
//# sourceMappingURL=forkJoin.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/ForkJoinObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2404');
var EmptyObservable_1 = require('2405');
var isArray_1 = require('2406');
var subscribeToResult_1 = require('2407');
var OuterSubscriber_1 = require('2408');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ForkJoinObservable = function (_super) {
  __extends(ForkJoinObservable, _super);
  function ForkJoinObservable(sources, resultSelector) {
    _super.call(this);
    this.sources = sources;
    this.resultSelector = resultSelector;
  }
  /* tslint:enable:max-line-length */
  /**
   * @param sources
   * @return {any}
   * @static true
   * @name forkJoin
   * @owner Observable
   */
  ForkJoinObservable.create = function () {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      sources[_i - 0] = arguments[_i];
    }
    if (sources === null || arguments.length === 0) {
      return new EmptyObservable_1.EmptyObservable();
    }
    var resultSelector = null;
    if (typeof sources[sources.length - 1] === 'function') {
      resultSelector = sources.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
    if (sources.length === 1 && isArray_1.isArray(sources[0])) {
      sources = sources[0];
    }
    if (sources.length === 0) {
      return new EmptyObservable_1.EmptyObservable();
    }
    return new ForkJoinObservable(sources, resultSelector);
  };
  ForkJoinObservable.prototype._subscribe = function (subscriber) {
    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
  };
  return ForkJoinObservable;
}(Observable_1.Observable);
exports.ForkJoinObservable = ForkJoinObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ForkJoinSubscriber = function (_super) {
  __extends(ForkJoinSubscriber, _super);
  function ForkJoinSubscriber(destination, sources, resultSelector) {
    _super.call(this, destination);
    this.sources = sources;
    this.resultSelector = resultSelector;
    this.completed = 0;
    this.haveValues = 0;
    var len = sources.length;
    this.total = len;
    this.values = new Array(len);
    for (var i = 0; i < len; i++) {
      var source = sources[i];
      var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
      if (innerSubscription) {
        innerSubscription.outerIndex = i;
        this.add(innerSubscription);
      }
    }
  }
  ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.values[outerIndex] = innerValue;
    if (!innerSub._hasValue) {
      innerSub._hasValue = true;
      this.haveValues++;
    }
  };
  ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
    var destination = this.destination;
    var _a = this,
        haveValues = _a.haveValues,
        resultSelector = _a.resultSelector,
        values = _a.values;
    var len = values.length;
    if (!innerSub._hasValue) {
      destination.complete();
      return;
    }
    this.completed++;
    if (this.completed !== len) {
      return;
    }
    if (haveValues === len) {
      var value = resultSelector ? resultSelector.apply(this, values) : values;
      destination.next(value);
    }
    destination.complete();
  };
  return ForkJoinSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=ForkJoinObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/from.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1799');
var from_1 = require('1800');
Observable_1.Observable.from = from_1.from;
//# sourceMappingURL=from.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/from.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var FromObservable_1 = require('2333');
exports.from = FromObservable_1.FromObservable.create;
//# sourceMappingURL=from.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/FromObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = require('2380');
var isArrayLike_1 = require('2381');
var isPromise_1 = require('2382');
var PromiseObservable_1 = require('2383');
var IteratorObservable_1 = require('2384');
var ArrayObservable_1 = require('2385');
var ArrayLikeObservable_1 = require('2386');
var iterator_1 = require('2387');
var Observable_1 = require('2388');
var observeOn_1 = require('2389');
var observable_1 = require('2390');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromObservable = function (_super) {
  __extends(FromObservable, _super);
  function FromObservable(ish, scheduler) {
    _super.call(this, null);
    this.ish = ish;
    this.scheduler = scheduler;
  }
  /**
   * Creates an Observable from an Array, an array-like object, a Promise, an
   * iterable object, or an Observable-like object.
   *
   * <span class="informal">Converts almost anything to an Observable.</span>
   *
   * <img src="./img/from.png" width="100%">
   *
   * Convert various other objects and data types into Observables. `from`
   * converts a Promise or an array-like or an
   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
   * object into an Observable that emits the items in that promise or array or
   * iterable. A String, in this context, is treated as an array of characters.
   * Observable-like objects (contains a function named with the ES2015 Symbol
   * for Observable) can also be converted through this operator.
   *
   * @example <caption>Converts an array to an Observable</caption>
   * var array = [10, 20, 30];
   * var result = Rx.Observable.from(array);
   * result.subscribe(x => console.log(x));
   *
   * // Results in the following:
   * // 10 20 30
   *
   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
   * function* generateDoubles(seed) {
   *   var i = seed;
   *   while (true) {
   *     yield i;
   *     i = 2 * i; // double it
   *   }
   * }
   *
   * var iterator = generateDoubles(3);
   * var result = Rx.Observable.from(iterator).take(10);
   * result.subscribe(x => console.log(x));
   *
   * // Results in the following:
   * // 3 6 12 24 48 96 192 384 768 1536
   *
   * @see {@link create}
   * @see {@link fromEvent}
   * @see {@link fromEventPattern}
   * @see {@link fromPromise}
   *
   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
   * Observable-like, an Array, an iterable or an array-like object to be
   * converted.
   * @param {Scheduler} [scheduler] The scheduler on which to schedule the
   * emissions of values.
   * @return {Observable<T>} The Observable whose values are originally from the
   * input object that was converted.
   * @static true
   * @name from
   * @owner Observable
   */
  FromObservable.create = function (ish, scheduler) {
    if (ish != null) {
      if (typeof ish[observable_1.observable] === 'function') {
        if (ish instanceof Observable_1.Observable && !scheduler) {
          return ish;
        }
        return new FromObservable(ish, scheduler);
      } else if (isArray_1.isArray(ish)) {
        return new ArrayObservable_1.ArrayObservable(ish, scheduler);
      } else if (isPromise_1.isPromise(ish)) {
        return new PromiseObservable_1.PromiseObservable(ish, scheduler);
      } else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {
        return new IteratorObservable_1.IteratorObservable(ish, scheduler);
      } else if (isArrayLike_1.isArrayLike(ish)) {
        return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
      }
    }
    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
  };
  FromObservable.prototype._subscribe = function (subscriber) {
    var ish = this.ish;
    var scheduler = this.scheduler;
    if (scheduler == null) {
      return ish[observable_1.observable]().subscribe(subscriber);
    } else {
      return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
    }
  };
  return FromObservable;
}(Observable_1.Observable);
exports.FromObservable = FromObservable;
//# sourceMappingURL=FromObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/PromiseObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = require('2437');
var Observable_1 = require('2438');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PromiseObservable = function (_super) {
  __extends(PromiseObservable, _super);
  function PromiseObservable(promise, scheduler) {
    _super.call(this);
    this.promise = promise;
    this.scheduler = scheduler;
  }
  /**
   * Converts a Promise to an Observable.
   *
   * <span class="informal">Returns an Observable that just emits the Promise's
   * resolved value, then completes.</span>
   *
   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
   * Observable. If the Promise resolves with a value, the output Observable
   * emits that resolved value as a `next`, and then completes. If the Promise
   * is rejected, then the output Observable emits the corresponding Error.
   *
   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
   * result.subscribe(x => console.log(x), e => console.error(e));
   *
   * @see {@link bindCallback}
   * @see {@link from}
   *
   * @param {PromiseLike<T>} promise The promise to be converted.
   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
   * the delivery of the resolved value (or the rejection).
   * @return {Observable<T>} An Observable which wraps the Promise.
   * @static true
   * @name fromPromise
   * @owner Observable
   */
  PromiseObservable.create = function (promise, scheduler) {
    return new PromiseObservable(promise, scheduler);
  };
  PromiseObservable.prototype._subscribe = function (subscriber) {
    var _this = this;
    var promise = this.promise;
    var scheduler = this.scheduler;
    if (scheduler == null) {
      if (this._isScalar) {
        if (!subscriber.closed) {
          subscriber.next(this.value);
          subscriber.complete();
        }
      } else {
        promise.then(function (value) {
          _this.value = value;
          _this._isScalar = true;
          if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
          }
        }, function (err) {
          if (!subscriber.closed) {
            subscriber.error(err);
          }
        }).then(null, function (err) {
          // escape the promise trap, throw unhandled errors
          root_1.root.setTimeout(function () {
            throw err;
          });
        });
      }
    } else {
      if (this._isScalar) {
        if (!subscriber.closed) {
          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
        }
      } else {
        promise.then(function (value) {
          _this.value = value;
          _this._isScalar = true;
          if (!subscriber.closed) {
            subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
          }
        }, function (err) {
          if (!subscriber.closed) {
            subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
          }
        }).then(null, function (err) {
          // escape the promise trap, throw unhandled errors
          root_1.root.setTimeout(function () {
            throw err;
          });
        });
      }
    }
  };
  return PromiseObservable;
}(Observable_1.Observable);
exports.PromiseObservable = PromiseObservable;
function dispatchNext(arg) {
  var value = arg.value,
      subscriber = arg.subscriber;
  if (!subscriber.closed) {
    subscriber.next(value);
    subscriber.complete();
  }
}
function dispatchError(arg) {
  var err = arg.err,
      subscriber = arg.subscriber;
  if (!subscriber.closed) {
    subscriber.error(err);
  }
}
//# sourceMappingURL=PromiseObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/IteratorObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = require('2457');
var Observable_1 = require('2458');
var iterator_1 = require('2459');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IteratorObservable = function (_super) {
  __extends(IteratorObservable, _super);
  function IteratorObservable(iterator, scheduler) {
    _super.call(this);
    this.scheduler = scheduler;
    if (iterator == null) {
      throw new Error('iterator cannot be null.');
    }
    this.iterator = getIterator(iterator);
  }
  IteratorObservable.create = function (iterator, scheduler) {
    return new IteratorObservable(iterator, scheduler);
  };
  IteratorObservable.dispatch = function (state) {
    var index = state.index,
        hasError = state.hasError,
        iterator = state.iterator,
        subscriber = state.subscriber;
    if (hasError) {
      subscriber.error(state.error);
      return;
    }
    var result = iterator.next();
    if (result.done) {
      subscriber.complete();
      return;
    }
    subscriber.next(result.value);
    state.index = index + 1;
    if (subscriber.closed) {
      if (typeof iterator.return === 'function') {
        iterator.return();
      }
      return;
    }
    this.schedule(state);
  };
  IteratorObservable.prototype._subscribe = function (subscriber) {
    var index = 0;
    var _a = this,
        iterator = _a.iterator,
        scheduler = _a.scheduler;
    if (scheduler) {
      return scheduler.schedule(IteratorObservable.dispatch, 0, {
        index: index, iterator: iterator, subscriber: subscriber
      });
    } else {
      do {
        var result = iterator.next();
        if (result.done) {
          subscriber.complete();
          break;
        } else {
          subscriber.next(result.value);
        }
        if (subscriber.closed) {
          if (typeof iterator.return === 'function') {
            iterator.return();
          }
          break;
        }
      } while (true);
    }
  };
  return IteratorObservable;
}(Observable_1.Observable);
exports.IteratorObservable = IteratorObservable;
var StringIterator = function () {
  function StringIterator(str, idx, len) {
    if (idx === void 0) {
      idx = 0;
    }
    if (len === void 0) {
      len = str.length;
    }
    this.str = str;
    this.idx = idx;
    this.len = len;
  }
  StringIterator.prototype[iterator_1.iterator] = function () {
    return this;
  };
  StringIterator.prototype.next = function () {
    return this.idx < this.len ? {
      done: false,
      value: this.str.charAt(this.idx++)
    } : {
      done: true,
      value: undefined
    };
  };
  return StringIterator;
}();
var ArrayIterator = function () {
  function ArrayIterator(arr, idx, len) {
    if (idx === void 0) {
      idx = 0;
    }
    if (len === void 0) {
      len = toLength(arr);
    }
    this.arr = arr;
    this.idx = idx;
    this.len = len;
  }
  ArrayIterator.prototype[iterator_1.iterator] = function () {
    return this;
  };
  ArrayIterator.prototype.next = function () {
    return this.idx < this.len ? {
      done: false,
      value: this.arr[this.idx++]
    } : {
      done: true,
      value: undefined
    };
  };
  return ArrayIterator;
}();
function getIterator(obj) {
  var i = obj[iterator_1.iterator];
  if (!i && typeof obj === 'string') {
    return new StringIterator(obj);
  }
  if (!i && obj.length !== undefined) {
    return new ArrayIterator(obj);
  }
  if (!i) {
    throw new TypeError('object is not iterable');
  }
  return obj[iterator_1.iterator]();
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
  var len = +o.length;
  if (isNaN(len)) {
    return 0;
  }
  if (len === 0 || !numberIsFinite(len)) {
    return len;
  }
  len = sign(len) * Math.floor(Math.abs(len));
  if (len <= 0) {
    return 0;
  }
  if (len > maxSafeInteger) {
    return maxSafeInteger;
  }
  return len;
}
function numberIsFinite(value) {
  return typeof value === 'number' && root_1.root.isFinite(value);
}
function sign(value) {
  var valueAsNumber = +value;
  if (valueAsNumber === 0) {
    return valueAsNumber;
  }
  if (isNaN(valueAsNumber)) {
    return valueAsNumber;
  }
  return valueAsNumber < 0 ? -1 : 1;
}
//# sourceMappingURL=IteratorObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/ArrayLikeObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2454');
var ScalarObservable_1 = require('2455');
var EmptyObservable_1 = require('2456');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayLikeObservable = function (_super) {
  __extends(ArrayLikeObservable, _super);
  function ArrayLikeObservable(arrayLike, scheduler) {
    _super.call(this);
    this.arrayLike = arrayLike;
    this.scheduler = scheduler;
    if (!scheduler && arrayLike.length === 1) {
      this._isScalar = true;
      this.value = arrayLike[0];
    }
  }
  ArrayLikeObservable.create = function (arrayLike, scheduler) {
    var length = arrayLike.length;
    if (length === 0) {
      return new EmptyObservable_1.EmptyObservable();
    } else if (length === 1) {
      return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
    } else {
      return new ArrayLikeObservable(arrayLike, scheduler);
    }
  };
  ArrayLikeObservable.dispatch = function (state) {
    var arrayLike = state.arrayLike,
        index = state.index,
        length = state.length,
        subscriber = state.subscriber;
    if (subscriber.closed) {
      return;
    }
    if (index >= length) {
      subscriber.complete();
      return;
    }
    subscriber.next(arrayLike[index]);
    state.index = index + 1;
    this.schedule(state);
  };
  ArrayLikeObservable.prototype._subscribe = function (subscriber) {
    var index = 0;
    var _a = this,
        arrayLike = _a.arrayLike,
        scheduler = _a.scheduler;
    var length = arrayLike.length;
    if (scheduler) {
      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
        arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
      });
    } else {
      for (var i = 0; i < length && !subscriber.closed; i++) {
        subscriber.next(arrayLike[i]);
      }
      subscriber.complete();
    }
  };
  return ArrayLikeObservable;
}(Observable_1.Observable);
exports.ArrayLikeObservable = ArrayLikeObservable;
//# sourceMappingURL=ArrayLikeObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/observeOn.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2068');
var Notification_1 = require('2069');
/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return this.lift(new ObserveOnOperator(scheduler, delay));
}
exports.observeOn = observeOn;
var ObserveOnOperator = function () {
  function ObserveOnOperator(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    this.scheduler = scheduler;
    this.delay = delay;
  }
  ObserveOnOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
  };
  return ObserveOnOperator;
}();
exports.ObserveOnOperator = ObserveOnOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = function (_super) {
  __extends(ObserveOnSubscriber, _super);
  function ObserveOnSubscriber(destination, scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    _super.call(this, destination);
    this.scheduler = scheduler;
    this.delay = delay;
  }
  ObserveOnSubscriber.dispatch = function (arg) {
    var notification = arg.notification,
        destination = arg.destination;
    notification.observe(destination);
    this.unsubscribe();
  };
  ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
    this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
  };
  ObserveOnSubscriber.prototype._next = function (value) {
    this.scheduleMessage(Notification_1.Notification.createNext(value));
  };
  ObserveOnSubscriber.prototype._error = function (err) {
    this.scheduleMessage(Notification_1.Notification.createError(err));
  };
  ObserveOnSubscriber.prototype._complete = function () {
    this.scheduleMessage(Notification_1.Notification.createComplete());
  };
  return ObserveOnSubscriber;
}(Subscriber_1.Subscriber);
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = function () {
  function ObserveOnMessage(notification, destination) {
    this.notification = notification;
    this.destination = destination;
  }
  return ObserveOnMessage;
}();
exports.ObserveOnMessage = ObserveOnMessage;
//# sourceMappingURL=observeOn.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/Notification.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1753');
/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = function () {
  function Notification(kind, value, error) {
    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === 'N';
  }
  /**
   * Delivers to the given `observer` the value wrapped by this Notification.
   * @param {Observer} observer
   * @return
   */
  Notification.prototype.observe = function (observer) {
    switch (this.kind) {
      case 'N':
        return observer.next && observer.next(this.value);
      case 'E':
        return observer.error && observer.error(this.error);
      case 'C':
        return observer.complete && observer.complete();
    }
  };
  /**
   * Given some {@link Observer} callbacks, deliver the value represented by the
   * current Notification to the correctly corresponding callback.
   * @param {function(value: T): void} next An Observer `next` callback.
   * @param {function(err: any): void} [error] An Observer `error` callback.
   * @param {function(): void} [complete] An Observer `complete` callback.
   * @return {any}
   */
  Notification.prototype.do = function (next, error, complete) {
    var kind = this.kind;
    switch (kind) {
      case 'N':
        return next && next(this.value);
      case 'E':
        return error && error(this.error);
      case 'C':
        return complete && complete();
    }
  };
  /**
   * Takes an Observer or its individual callback functions, and calls `observe`
   * or `do` methods accordingly.
   * @param {Observer|function(value: T): void} nextOrObserver An Observer or
   * the `next` callback.
   * @param {function(err: any): void} [error] An Observer `error` callback.
   * @param {function(): void} [complete] An Observer `complete` callback.
   * @return {any}
   */
  Notification.prototype.accept = function (nextOrObserver, error, complete) {
    if (nextOrObserver && typeof nextOrObserver.next === 'function') {
      return this.observe(nextOrObserver);
    } else {
      return this.do(nextOrObserver, error, complete);
    }
  };
  /**
   * Returns a simple Observable that just delivers the notification represented
   * by this Notification instance.
   * @return {any}
   */
  Notification.prototype.toObservable = function () {
    var kind = this.kind;
    switch (kind) {
      case 'N':
        return Observable_1.Observable.of(this.value);
      case 'E':
        return Observable_1.Observable.throw(this.error);
      case 'C':
        return Observable_1.Observable.empty();
    }
    throw new Error('unexpected notification kind value');
  };
  /**
   * A shortcut to create a Notification instance of the type `next` from a
   * given value.
   * @param {T} value The `next` value.
   * @return {Notification<T>} The "next" Notification representing the
   * argument.
   */
  Notification.createNext = function (value) {
    if (typeof value !== 'undefined') {
      return new Notification('N', value);
    }
    return Notification.undefinedValueNotification;
  };
  /**
   * A shortcut to create a Notification instance of the type `error` from a
   * given error.
   * @param {any} [err] The `error` error.
   * @return {Notification<T>} The "error" Notification representing the
   * argument.
   */
  Notification.createError = function (err) {
    return new Notification('E', undefined, err);
  };
  /**
   * A shortcut to create a Notification instance of the type `complete`.
   * @return {Notification<any>} The valueless "complete" Notification.
   */
  Notification.createComplete = function () {
    return Notification.completeNotification;
  };
  Notification.completeNotification = new Notification('C');
  Notification.undefinedValueNotification = new Notification('N', undefined);
  return Notification;
}();
exports.Notification = Notification;
//# sourceMappingURL=Notification.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/fromEvent.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1801');
var fromEvent_1 = require('1802');
Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
//# sourceMappingURL=fromEvent.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/fromEvent.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var FromEventObservable_1 = require('2334');
exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
//# sourceMappingURL=fromEvent.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/FromEventObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2418');
var tryCatch_1 = require('2419');
var isFunction_1 = require('2420');
var errorObject_1 = require('2421');
var Subscription_1 = require('2422');
var toString = Object.prototype.toString;
function isNodeStyleEventEmitter(sourceObj) {
  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isNodeList(sourceObj) {
  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';
}
function isHTMLCollection(sourceObj) {
  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';
}
function isEventTarget(sourceObj) {
  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromEventObservable = function (_super) {
  __extends(FromEventObservable, _super);
  function FromEventObservable(sourceObj, eventName, selector, options) {
    _super.call(this);
    this.sourceObj = sourceObj;
    this.eventName = eventName;
    this.selector = selector;
    this.options = options;
  }
  /* tslint:enable:max-line-length */
  /**
   * Creates an Observable that emits events of a specific type coming from the
   * given event target.
   *
   * <span class="informal">Creates an Observable from DOM events, or Node
   * EventEmitter events or others.</span>
   *
   * <img src="./img/fromEvent.png" width="100%">
   *
   * Creates an Observable by attaching an event listener to an "event target",
   * which may be an object with `addEventListener` and `removeEventListener`,
   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the
   * DOM, or an HTMLCollection from the DOM. The event handler is attached when
   * the output Observable is subscribed, and removed when the Subscription is
   * unsubscribed.
   *
   * @example <caption>Emits clicks happening on the DOM document</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * clicks.subscribe(x => console.log(x));
   *
   * // Results in:
   * // MouseEvent object logged to console everytime a click
   * // occurs on the document.
   *
   * @see {@link from}
   * @see {@link fromEventPattern}
   *
   * @param {EventTargetLike} target The DOMElement, event target, Node.js
   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.
   * @param {string} eventName The event name of interest, being emitted by the
   * `target`.
   * @param {EventListenerOptions} [options] Options to pass through to addEventListener
   * @param {SelectorMethodSignature<T>} [selector] An optional function to
   * post-process results. It takes the arguments from the event handler and
   * should return a single value.
   * @return {Observable<T>}
   * @static true
   * @name fromEvent
   * @owner Observable
   */
  FromEventObservable.create = function (target, eventName, options, selector) {
    if (isFunction_1.isFunction(options)) {
      selector = options;
      options = undefined;
    }
    return new FromEventObservable(target, eventName, selector, options);
  };
  FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
      for (var i = 0, len = sourceObj.length; i < len; i++) {
        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
      }
    } else if (isEventTarget(sourceObj)) {
      var source_1 = sourceObj;
      sourceObj.addEventListener(eventName, handler, options);
      unsubscribe = function () {
        return source_1.removeEventListener(eventName, handler);
      };
    } else if (isJQueryStyleEventEmitter(sourceObj)) {
      var source_2 = sourceObj;
      sourceObj.on(eventName, handler);
      unsubscribe = function () {
        return source_2.off(eventName, handler);
      };
    } else if (isNodeStyleEventEmitter(sourceObj)) {
      var source_3 = sourceObj;
      sourceObj.addListener(eventName, handler);
      unsubscribe = function () {
        return source_3.removeListener(eventName, handler);
      };
    } else {
      throw new TypeError('Invalid event target');
    }
    subscriber.add(new Subscription_1.Subscription(unsubscribe));
  };
  FromEventObservable.prototype._subscribe = function (subscriber) {
    var sourceObj = this.sourceObj;
    var eventName = this.eventName;
    var options = this.options;
    var selector = this.selector;
    var handler = selector ? function () {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
      if (result === errorObject_1.errorObject) {
        subscriber.error(errorObject_1.errorObject.e);
      } else {
        subscriber.next(result);
      }
    } : function (e) {
      return subscriber.next(e);
    };
    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
  };
  return FromEventObservable;
}(Observable_1.Observable);
exports.FromEventObservable = FromEventObservable;
//# sourceMappingURL=FromEventObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/fromEventPattern.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1805');
var fromEventPattern_1 = require('1806');
Observable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;
//# sourceMappingURL=fromEventPattern.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/fromEventPattern.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var FromEventPatternObservable_1 = require('2335');
exports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;
//# sourceMappingURL=fromEventPattern.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/FromEventPatternObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = require('2415');
var Observable_1 = require('2416');
var Subscription_1 = require('2417');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromEventPatternObservable = function (_super) {
  __extends(FromEventPatternObservable, _super);
  function FromEventPatternObservable(addHandler, removeHandler, selector) {
    _super.call(this);
    this.addHandler = addHandler;
    this.removeHandler = removeHandler;
    this.selector = selector;
  }
  /**
   * Creates an Observable from an API based on addHandler/removeHandler
   * functions.
   *
   * <span class="informal">Converts any addHandler/removeHandler API to an
   * Observable.</span>
   *
   * <img src="./img/fromEventPattern.png" width="100%">
   *
   * Creates an Observable by using the `addHandler` and `removeHandler`
   * functions to add and remove the handlers, with an optional selector
   * function to project the event arguments to a result. The `addHandler` is
   * called when the output Observable is subscribed, and `removeHandler` is
   * called when the Subscription is unsubscribed.
   *
   * @example <caption>Emits clicks happening on the DOM document</caption>
   * function addClickHandler(handler) {
   *   document.addEventListener('click', handler);
   * }
   *
   * function removeClickHandler(handler) {
   *   document.removeEventListener('click', handler);
   * }
   *
   * var clicks = Rx.Observable.fromEventPattern(
   *   addClickHandler,
   *   removeClickHandler
   * );
   * clicks.subscribe(x => console.log(x));
   *
   * @see {@link from}
   * @see {@link fromEvent}
   *
   * @param {function(handler: Function): any} addHandler A function that takes
   * a `handler` function as argument and attaches it somehow to the actual
   * source of events.
   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that
   * takes a `handler` function as argument and removes it in case it was
   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,
   * removeHandler function will forward it.
   * @param {function(...args: any): T} [selector] An optional function to
   * post-process results. It takes the arguments from the event handler and
   * should return a single value.
   * @return {Observable<T>}
   * @static true
   * @name fromEventPattern
   * @owner Observable
   */
  FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {
    return new FromEventPatternObservable(addHandler, removeHandler, selector);
  };
  FromEventPatternObservable.prototype._subscribe = function (subscriber) {
    var _this = this;
    var removeHandler = this.removeHandler;
    var handler = !!this.selector ? function () {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      _this._callSelector(subscriber, args);
    } : function (e) {
      subscriber.next(e);
    };
    var retValue = this._callAddHandler(handler, subscriber);
    if (!isFunction_1.isFunction(removeHandler)) {
      return;
    }
    subscriber.add(new Subscription_1.Subscription(function () {
      //TODO: determine whether or not to forward to error handler
      removeHandler(handler, retValue);
    }));
  };
  FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {
    try {
      var result = this.selector.apply(this, args);
      subscriber.next(result);
    } catch (e) {
      subscriber.error(e);
    }
  };
  FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {
    try {
      return this.addHandler(handler) || null;
    } catch (e) {
      errorSubscriber.error(e);
    }
  };
  return FromEventPatternObservable;
}(Observable_1.Observable);
exports.FromEventPatternObservable = FromEventPatternObservable;
//# sourceMappingURL=FromEventPatternObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/fromPromise.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1831');
var fromPromise_1 = require('1832');
Observable_1.Observable.fromPromise = fromPromise_1.fromPromise;
//# sourceMappingURL=fromPromise.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/fromPromise.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var PromiseObservable_1 = require('2348');
exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
//# sourceMappingURL=fromPromise.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/generate.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1833');
var generate_1 = require('1834');
Observable_1.Observable.generate = generate_1.generate;
//# sourceMappingURL=generate.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/generate.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var GenerateObservable_1 = require('2349');
exports.generate = GenerateObservable_1.GenerateObservable.create;
//# sourceMappingURL=generate.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/GenerateObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2439');
var isScheduler_1 = require('2440');
var selfSelector = function (value) {
  return value;
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var GenerateObservable = function (_super) {
  __extends(GenerateObservable, _super);
  function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {
    _super.call(this);
    this.initialState = initialState;
    this.condition = condition;
    this.iterate = iterate;
    this.resultSelector = resultSelector;
    this.scheduler = scheduler;
  }
  GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    if (arguments.length == 1) {
      return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);
    }
    if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
      return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);
    }
    return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);
  };
  GenerateObservable.prototype._subscribe = function (subscriber) {
    var state = this.initialState;
    if (this.scheduler) {
      return this.scheduler.schedule(GenerateObservable.dispatch, 0, {
        subscriber: subscriber,
        iterate: this.iterate,
        condition: this.condition,
        resultSelector: this.resultSelector,
        state: state });
    }
    var _a = this,
        condition = _a.condition,
        resultSelector = _a.resultSelector,
        iterate = _a.iterate;
    do {
      if (condition) {
        var conditionResult = void 0;
        try {
          conditionResult = condition(state);
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (!conditionResult) {
          subscriber.complete();
          break;
        }
      }
      var value = void 0;
      try {
        value = resultSelector(state);
      } catch (err) {
        subscriber.error(err);
        return;
      }
      subscriber.next(value);
      if (subscriber.closed) {
        break;
      }
      try {
        state = iterate(state);
      } catch (err) {
        subscriber.error(err);
        return;
      }
    } while (true);
  };
  GenerateObservable.dispatch = function (state) {
    var subscriber = state.subscriber,
        condition = state.condition;
    if (subscriber.closed) {
      return;
    }
    if (state.needIterate) {
      try {
        state.state = state.iterate(state.state);
      } catch (err) {
        subscriber.error(err);
        return;
      }
    } else {
      state.needIterate = true;
    }
    if (condition) {
      var conditionResult = void 0;
      try {
        conditionResult = condition(state.state);
      } catch (err) {
        subscriber.error(err);
        return;
      }
      if (!conditionResult) {
        subscriber.complete();
        return;
      }
      if (subscriber.closed) {
        return;
      }
    }
    var value;
    try {
      value = state.resultSelector(state.state);
    } catch (err) {
      subscriber.error(err);
      return;
    }
    if (subscriber.closed) {
      return;
    }
    subscriber.next(value);
    if (subscriber.closed) {
      return;
    }
    return this.schedule(state);
  };
  return GenerateObservable;
}(Observable_1.Observable);
exports.GenerateObservable = GenerateObservable;
//# sourceMappingURL=GenerateObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/if.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1855');
var if_1 = require('1856');
Observable_1.Observable.if = if_1._if;
//# sourceMappingURL=if.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/if.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var IfObservable_1 = require('2350');
exports._if = IfObservable_1.IfObservable.create;
//# sourceMappingURL=if.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/IfObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2441');
var subscribeToResult_1 = require('2442');
var OuterSubscriber_1 = require('2443');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IfObservable = function (_super) {
  __extends(IfObservable, _super);
  function IfObservable(condition, thenSource, elseSource) {
    _super.call(this);
    this.condition = condition;
    this.thenSource = thenSource;
    this.elseSource = elseSource;
  }
  IfObservable.create = function (condition, thenSource, elseSource) {
    return new IfObservable(condition, thenSource, elseSource);
  };
  IfObservable.prototype._subscribe = function (subscriber) {
    var _a = this,
        condition = _a.condition,
        thenSource = _a.thenSource,
        elseSource = _a.elseSource;
    return new IfSubscriber(subscriber, condition, thenSource, elseSource);
  };
  return IfObservable;
}(Observable_1.Observable);
exports.IfObservable = IfObservable;
var IfSubscriber = function (_super) {
  __extends(IfSubscriber, _super);
  function IfSubscriber(destination, condition, thenSource, elseSource) {
    _super.call(this, destination);
    this.condition = condition;
    this.thenSource = thenSource;
    this.elseSource = elseSource;
    this.tryIf();
  }
  IfSubscriber.prototype.tryIf = function () {
    var _a = this,
        condition = _a.condition,
        thenSource = _a.thenSource,
        elseSource = _a.elseSource;
    var result;
    try {
      result = condition();
      var source = result ? thenSource : elseSource;
      if (source) {
        this.add(subscribeToResult_1.subscribeToResult(this, source));
      } else {
        this._complete();
      }
    } catch (err) {
      this._error(err);
    }
  };
  return IfSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=IfObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/interval.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1807');
var interval_1 = require('1808');
Observable_1.Observable.interval = interval_1.interval;
//# sourceMappingURL=interval.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/interval.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var IntervalObservable_1 = require('2336');
exports.interval = IntervalObservable_1.IntervalObservable.create;
//# sourceMappingURL=interval.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/IntervalObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = require('2434');
var Observable_1 = require('2435');
var async_1 = require('2436');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IntervalObservable = function (_super) {
  __extends(IntervalObservable, _super);
  function IntervalObservable(period, scheduler) {
    if (period === void 0) {
      period = 0;
    }
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    _super.call(this);
    this.period = period;
    this.scheduler = scheduler;
    if (!isNumeric_1.isNumeric(period) || period < 0) {
      this.period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
      this.scheduler = async_1.async;
    }
  }
  /**
   * Creates an Observable that emits sequential numbers every specified
   * interval of time, on a specified IScheduler.
   *
   * <span class="informal">Emits incremental numbers periodically in time.
   * </span>
   *
   * <img src="./img/interval.png" width="100%">
   *
   * `interval` returns an Observable that emits an infinite sequence of
   * ascending integers, with a constant interval of time of your choosing
   * between those emissions. The first emission is not sent immediately, but
   * only after the first period has passed. By default, this operator uses the
   * `async` IScheduler to provide a notion of time, but you may pass any
   * IScheduler to it.
   *
   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
   * var numbers = Rx.Observable.interval(1000);
   * numbers.subscribe(x => console.log(x));
   *
   * @see {@link timer}
   * @see {@link delay}
   *
   * @param {number} [period=0] The interval size in milliseconds (by default)
   * or the time unit determined by the scheduler's clock.
   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
   * the emission of values, and providing a notion of "time".
   * @return {Observable} An Observable that emits a sequential number each time
   * interval.
   * @static true
   * @name interval
   * @owner Observable
   */
  IntervalObservable.create = function (period, scheduler) {
    if (period === void 0) {
      period = 0;
    }
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    return new IntervalObservable(period, scheduler);
  };
  IntervalObservable.dispatch = function (state) {
    var index = state.index,
        subscriber = state.subscriber,
        period = state.period;
    subscriber.next(index);
    if (subscriber.closed) {
      return;
    }
    state.index += 1;
    this.schedule(state, period);
  };
  IntervalObservable.prototype._subscribe = function (subscriber) {
    var index = 0;
    var period = this.period;
    var scheduler = this.scheduler;
    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
      index: index, subscriber: subscriber, period: period
    }));
  };
  return IntervalObservable;
}(Observable_1.Observable);
exports.IntervalObservable = IntervalObservable;
//# sourceMappingURL=IntervalObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/isNumeric.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var isArray_1 = require('2396');
function isNumeric(val) {
  // parseFloat NaNs numeric-cast false positives (null|true|false|"")
  // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
  // subtraction forces infinities to NaN
  // adding 1 corrects loss of precision from parseFloat (#15100)
  return !isArray_1.isArray(val) && val - parseFloat(val) + 1 >= 0;
}
exports.isNumeric = isNumeric;
;
//# sourceMappingURL=isNumeric.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/async.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var AsyncAction_1 = require('1776');
var AsyncScheduler_1 = require('1777');
/**
 *
 * Async Scheduler
 *
 * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
 *
 * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
 * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
 * in intervals.
 *
 * If you just want to "defer" task, that is to perform it right after currently
 * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
 * better choice will be the {@link asap} scheduler.
 *
 * @example <caption>Use async scheduler to delay task</caption>
 * const task = () => console.log('it works!');
 *
 * Rx.Scheduler.async.schedule(task, 2000);
 *
 * // After 2 seconds logs:
 * // "it works!"
 *
 *
 * @example <caption>Use async scheduler to repeat task in intervals</caption>
 * function task(state) {
 *   console.log(state);
 *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
 *                                   // which we reschedule with new state and delay
 * }
 *
 * Rx.Scheduler.async.schedule(task, 3000, 0);
 *
 * // Logs:
 * // 0 after 3s
 * // 1 after 4s
 * // 2 after 5s
 * // 3 after 6s
 *
 * @static true
 * @name async
 * @owner Scheduler
 */
exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
//# sourceMappingURL=async.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/AsyncAction.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = require('2071');
var Action_1 = require('2072');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = function (_super) {
  __extends(AsyncAction, _super);
  function AsyncAction(scheduler, work) {
    _super.call(this, scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
    this.pending = false;
  }
  AsyncAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (this.closed) {
      return this;
    }
    // Always replace the current state with the new state.
    this.state = state;
    // Set the pending flag indicating that this action has been scheduled, or
    // has recursively rescheduled itself.
    this.pending = true;
    var id = this.id;
    var scheduler = this.scheduler;
    //
    // Important implementation note:
    //
    // Actions only execute once by default, unless rescheduled from within the
    // scheduled callback. This allows us to implement single and repeat
    // actions via the same code path, without adding API surface area, as well
    // as mimic traditional recursion but across asynchronous boundaries.
    //
    // However, JS runtimes and timers distinguish between intervals achieved by
    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
    // serial `setTimeout` calls can be individually delayed, which delays
    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
    // guarantee the interval callback will be invoked more precisely to the
    // interval period, regardless of load.
    //
    // Therefore, we use `setInterval` to schedule single and repeat actions.
    // If the action reschedules itself with the same delay, the interval is not
    // canceled. If the action doesn't reschedule, or reschedules with a
    // different delay, the interval will be canceled after scheduled callback
    // execution.
    //
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }
    this.delay = delay;
    // If this action has already an async Id, don't request a new one.
    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
    return this;
  };
  AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
  };
  AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    // If this action is rescheduled with the same delay time, don't clear the interval id.
    if (delay !== null && this.delay === delay && this.pending === false) {
      return id;
    }
    // Otherwise, if the action's delay time is different from the current delay,
    // or the action has been rescheduled before it's executed, clear the interval id
    return root_1.root.clearInterval(id) && undefined || undefined;
  };
  /**
   * Immediately executes this action and the `work` it contains.
   * @return {any}
   */
  AsyncAction.prototype.execute = function (state, delay) {
    if (this.closed) {
      return new Error('executing a cancelled action');
    }
    this.pending = false;
    var error = this._execute(state, delay);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      // Dequeue if the action didn't reschedule itself. Don't call
      // unsubscribe(), because the action could reschedule later.
      // For example:
      // ```
      // scheduler.schedule(function doWork(counter) {
      //   /* ... I'm a busy worker bee ... */
      //   var originalAction = this;
      //   /* wait 100ms before rescheduling the action */
      //   setTimeout(function () {
      //     originalAction.schedule(counter + 1);
      //   }, 100);
      // }, 1000);
      // ```
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction.prototype._execute = function (state, delay) {
    var errored = false;
    var errorValue = undefined;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = !!e && e || new Error(e);
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction.prototype._unsubscribe = function () {
    var id = this.id;
    var scheduler = this.scheduler;
    var actions = scheduler.actions;
    var index = actions.indexOf(this);
    this.work = null;
    this.state = null;
    this.pending = false;
    this.scheduler = null;
    if (index !== -1) {
      actions.splice(index, 1);
    }
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, null);
    }
    this.delay = null;
  };
  return AsyncAction;
}(Action_1.Action);
exports.AsyncAction = AsyncAction;
//# sourceMappingURL=AsyncAction.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/Action.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = require('2358');
/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = function (_super) {
  __extends(Action, _super);
  function Action(scheduler, work) {
    _super.call(this);
  }
  /**
   * Schedules this action on its parent Scheduler for execution. May be passed
   * some context object, `state`. May happen at some point in the future,
   * according to the `delay` parameter, if specified.
   * @param {T} [state] Some contextual data that the `work` function uses when
   * called by the Scheduler.
   * @param {number} [delay] Time to wait before executing the work, where the
   * time unit is implicit and defined by the Scheduler.
   * @return {void}
   */
  Action.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return this;
  };
  return Action;
}(Subscription_1.Subscription);
exports.Action = Action;
//# sourceMappingURL=Action.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/AsyncScheduler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Scheduler_1 = require('2070');
var AsyncScheduler = function (_super) {
  __extends(AsyncScheduler, _super);
  function AsyncScheduler() {
    _super.apply(this, arguments);
    this.actions = [];
    /**
     * A flag to indicate whether the Scheduler is currently executing a batch of
     * queued actions.
     * @type {boolean}
     */
    this.active = false;
    /**
     * An internal ID used to track the latest asynchronous task such as those
     * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
     * others.
     * @type {any}
     */
    this.scheduled = undefined;
  }
  AsyncScheduler.prototype.flush = function (action) {
    var actions = this.actions;
    if (this.active) {
      actions.push(action);
      return;
    }
    var error;
    this.active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift()); // exhaust the scheduler queue
    this.active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler;
}(Scheduler_1.Scheduler);
exports.AsyncScheduler = AsyncScheduler;
//# sourceMappingURL=AsyncScheduler.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/Scheduler.js", function(__filename, __dirname, require, module, exports) {
"use strict";
/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 */

var Scheduler = function () {
  function Scheduler(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    this.SchedulerAction = SchedulerAction;
    this.now = now;
  }
  /**
   * Schedules a function, `work`, for execution. May happen at some point in
   * the future, according to the `delay` parameter, if specified. May be passed
   * some context object, `state`, which will be passed to the `work` function.
   *
   * The given arguments will be processed an stored as an Action object in a
   * queue of actions.
   *
   * @param {function(state: ?T): ?Subscription} work A function representing a
   * task, or some unit of work to be executed by the Scheduler.
   * @param {number} [delay] Time to wait before executing the work, where the
   * time unit is implicit and defined by the Scheduler itself.
   * @param {T} [state] Some contextual data that the `work` function uses when
   * called by the Scheduler.
   * @return {Subscription} A subscription in order to be able to unsubscribe
   * the scheduled work.
   */
  Scheduler.prototype.schedule = function (work, delay, state) {
    if (delay === void 0) {
      delay = 0;
    }
    return new this.SchedulerAction(this, work).schedule(state, delay);
  };
  Scheduler.now = Date.now ? Date.now : function () {
    return +new Date();
  };
  return Scheduler;
}();
exports.Scheduler = Scheduler;
//# sourceMappingURL=Scheduler.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/merge.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1811');
var merge_1 = require('1812');
Observable_1.Observable.merge = merge_1.merge;
//# sourceMappingURL=merge.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/merge.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var merge_1 = require('2339');
exports.merge = merge_1.mergeStatic;
//# sourceMappingURL=merge.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/merge.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2183');
var ArrayObservable_1 = require('2184');
var mergeAll_1 = require('2185');
var isScheduler_1 = require('2186');
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (either the source or an
 * Observable given as argument), and simply forwards (without doing any
 * transformation) all the values from all the input Observables to the output
 * Observable. The output Observable only completes once all input Observables
 * have completed. Any error delivered by an input Observable will be immediately
 * emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = clicks.merge(timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = timer1.merge(timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {ObservableInput} other An input Observable to merge with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} An Observable that emits items that are the result of
 * every input Observable.
 * @method merge
 * @owner Observable
 */
function merge() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
}
exports.merge = merge;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function mergeStatic() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  var concurrent = Number.POSITIVE_INFINITY;
  var scheduler = null;
  var last = observables[observables.length - 1];
  if (isScheduler_1.isScheduler(last)) {
    scheduler = observables.pop();
    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
      concurrent = observables.pop();
    }
  } else if (typeof last === 'number') {
    concurrent = observables.pop();
  }
  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
    return observables[0];
  }
  return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
}
exports.mergeStatic = mergeStatic;
//# sourceMappingURL=merge.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/race.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1815');
var race_1 = require('1816');
Observable_1.Observable.race = race_1.race;
//# sourceMappingURL=race.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/race.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var race_1 = require('2340');
exports.race = race_1.raceStatic;
//# sourceMappingURL=race.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/race.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = require('2222');
var ArrayObservable_1 = require('2223');
var OuterSubscriber_1 = require('2224');
var subscribeToResult_1 = require('2225');
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that mirrors the first source Observable to emit an item
 * from the combination of this Observable and supplied Observables.
 * @param {...Observables} ...observables Sources used to race for which Observable emits first.
 * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.
 * @method race
 * @owner Observable
 */
function race() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  // if the only argument is an array, it was most likely called with
  // `pair([obs1, obs2, ...])`
  if (observables.length === 1 && isArray_1.isArray(observables[0])) {
    observables = observables[0];
  }
  return this.lift.call(raceStatic.apply(void 0, [this].concat(observables)));
}
exports.race = race;
function raceStatic() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  // if the only argument is an array, it was most likely called with
  // `race([obs1, obs2, ...])`
  if (observables.length === 1) {
    if (isArray_1.isArray(observables[0])) {
      observables = observables[0];
    } else {
      return observables[0];
    }
  }
  return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());
}
exports.raceStatic = raceStatic;
var RaceOperator = function () {
  function RaceOperator() {}
  RaceOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RaceSubscriber(subscriber));
  };
  return RaceOperator;
}();
exports.RaceOperator = RaceOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RaceSubscriber = function (_super) {
  __extends(RaceSubscriber, _super);
  function RaceSubscriber(destination) {
    _super.call(this, destination);
    this.hasFirst = false;
    this.observables = [];
    this.subscriptions = [];
  }
  RaceSubscriber.prototype._next = function (observable) {
    this.observables.push(observable);
  };
  RaceSubscriber.prototype._complete = function () {
    var observables = this.observables;
    var len = observables.length;
    if (len === 0) {
      this.destination.complete();
    } else {
      for (var i = 0; i < len && !this.hasFirst; i++) {
        var observable = observables[i];
        var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
        if (this.subscriptions) {
          this.subscriptions.push(subscription);
        }
        this.add(subscription);
      }
      this.observables = null;
    }
  };
  RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    if (!this.hasFirst) {
      this.hasFirst = true;
      for (var i = 0; i < this.subscriptions.length; i++) {
        if (i !== outerIndex) {
          var subscription = this.subscriptions[i];
          subscription.unsubscribe();
          this.remove(subscription);
        }
      }
      this.subscriptions = null;
    }
    this.destination.next(innerValue);
  };
  return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.RaceSubscriber = RaceSubscriber;
//# sourceMappingURL=race.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/never.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1809');
var never_1 = require('1810');
Observable_1.Observable.never = never_1.never;
//# sourceMappingURL=never.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/never.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var NeverObservable_1 = require('2338');
exports.never = NeverObservable_1.NeverObservable.create;
//# sourceMappingURL=never.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/NeverObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2413');
var noop_1 = require('2414');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var NeverObservable = function (_super) {
  __extends(NeverObservable, _super);
  function NeverObservable() {
    _super.call(this);
  }
  /**
   * Creates an Observable that emits no items to the Observer.
   *
   * <span class="informal">An Observable that never emits anything.</span>
   *
   * <img src="./img/never.png" width="100%">
   *
   * This static operator is useful for creating a simple Observable that emits
   * neither values nor errors nor the completion notification. It can be used
   * for testing purposes or for composing with other Observables. Please note
   * that by never emitting a complete notification, this Observable keeps the
   * subscription from being disposed automatically. Subscriptions need to be
   * manually disposed.
   *
   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
   * function info() {
   *   console.log('Will not be called');
   * }
   * var result = Rx.Observable.never().startWith(7);
   * result.subscribe(x => console.log(x), info, info);
   *
   * @see {@link create}
   * @see {@link empty}
   * @see {@link of}
   * @see {@link throw}
   *
   * @return {Observable} A "never" Observable: never emits anything.
   * @static true
   * @name never
   * @owner Observable
   */
  NeverObservable.create = function () {
    return new NeverObservable();
  };
  NeverObservable.prototype._subscribe = function (subscriber) {
    noop_1.noop();
  };
  return NeverObservable;
}(Observable_1.Observable);
exports.NeverObservable = NeverObservable;
//# sourceMappingURL=NeverObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/noop.js", function(__filename, __dirname, require, module, exports) {
"use strict";
/* tslint:disable:no-empty */

function noop() {}
exports.noop = noop;
//# sourceMappingURL=noop.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/of.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1813');
var of_1 = require('1814');
Observable_1.Observable.of = of_1.of;
//# sourceMappingURL=of.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/of.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var ArrayObservable_1 = require('2337');
exports.of = ArrayObservable_1.ArrayObservable.of;
//# sourceMappingURL=of.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/onErrorResumeNext.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1819');
var onErrorResumeNext_1 = require('1820');
Observable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
//# sourceMappingURL=onErrorResumeNext.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/onErrorResumeNext.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var onErrorResumeNext_1 = require('2341');
exports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;
//# sourceMappingURL=onErrorResumeNext.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/onErrorResumeNext.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var FromObservable_1 = require('2202');
var isArray_1 = require('2203');
var OuterSubscriber_1 = require('2204');
var subscribeToResult_1 = require('2205');
/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as
 * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same
 * as the source.
 *
 * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.
 * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`
 * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting
 * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another
 * Observable in provided series, no matter if previous Observable completed or ended with an error. This will
 * be happening until there is no more Observables left in the series, at which point returned Observable will
 * complete - even if the last subscribed stream ended with an error.
 *
 * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive
 * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable
 * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with
 * an error.
 *
 * Note that you do not get any access to errors emitted by the Observables. In particular do not
 * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take
 * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.
 *
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * Rx.Observable.of(1, 2, 3, 0)
 *   .map(x => {
 *       if (x === 0) { throw Error(); }
         return 10 / x;
 *   })
 *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))
 *   .subscribe(
 *     val => console.log(val),
 *     err => console.log(err),          // Will never be called.
 *     () => console.log('that\'s it!')
 *   );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "that's it!"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} observables Observables passed either directly or as an array.
 * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes
 * to the next passed Observable and so on, until it completes or runs out of Observables.
 * @method onErrorResumeNext
 * @owner Observable
 */
function onErrorResumeNext() {
  var nextSources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    nextSources[_i - 0] = arguments[_i];
  }
  if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
    nextSources = nextSources[0];
  }
  return this.lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNext = onErrorResumeNext;
/* tslint:enable:max-line-length */
function onErrorResumeNextStatic() {
  var nextSources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    nextSources[_i - 0] = arguments[_i];
  }
  var source = null;
  if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
    nextSources = nextSources[0];
  }
  source = nextSources.shift();
  return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
var OnErrorResumeNextOperator = function () {
  function OnErrorResumeNextOperator(nextSources) {
    this.nextSources = nextSources;
  }
  OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
  };
  return OnErrorResumeNextOperator;
}();
var OnErrorResumeNextSubscriber = function (_super) {
  __extends(OnErrorResumeNextSubscriber, _super);
  function OnErrorResumeNextSubscriber(destination, nextSources) {
    _super.call(this, destination);
    this.destination = destination;
    this.nextSources = nextSources;
  }
  OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
    this.subscribeToNextSource();
  };
  OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
    this.subscribeToNextSource();
  };
  OnErrorResumeNextSubscriber.prototype._error = function (err) {
    this.subscribeToNextSource();
  };
  OnErrorResumeNextSubscriber.prototype._complete = function () {
    this.subscribeToNextSource();
  };
  OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
    var next = this.nextSources.shift();
    if (next) {
      this.add(subscribeToResult_1.subscribeToResult(this, next));
    } else {
      this.destination.complete();
    }
  };
  return OnErrorResumeNextSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=onErrorResumeNext.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/pairs.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1817');
var pairs_1 = require('1818');
Observable_1.Observable.pairs = pairs_1.pairs;
//# sourceMappingURL=pairs.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/pairs.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var PairsObservable_1 = require('2342');
exports.pairs = PairsObservable_1.PairsObservable.create;
//# sourceMappingURL=pairs.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/PairsObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2432');
function dispatch(state) {
  var obj = state.obj,
      keys = state.keys,
      length = state.length,
      index = state.index,
      subscriber = state.subscriber;
  if (index === length) {
    subscriber.complete();
    return;
  }
  var key = keys[index];
  subscriber.next([key, obj[key]]);
  state.index = index + 1;
  this.schedule(state);
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PairsObservable = function (_super) {
  __extends(PairsObservable, _super);
  function PairsObservable(obj, scheduler) {
    _super.call(this);
    this.obj = obj;
    this.scheduler = scheduler;
    this.keys = Object.keys(obj);
  }
  /**
   * Convert an object into an observable sequence of [key, value] pairs
   * using an optional IScheduler to enumerate the object.
   *
   * @example <caption>Converts a javascript object to an Observable</caption>
   * var obj = {
   *   foo: 42,
   *   bar: 56,
   *   baz: 78
   * };
   *
   * var source = Rx.Observable.pairs(obj);
   *
   * var subscription = source.subscribe(
   *   function (x) {
   *     console.log('Next: %s', x);
   *   },
   *   function (err) {
   *     console.log('Error: %s', err);
   *   },
   *   function () {
   *     console.log('Completed');
   *   });
   *
   * @param {Object} obj The object to inspect and turn into an
   * Observable sequence.
   * @param {Scheduler} [scheduler] An optional IScheduler to run the
   * enumeration of the input sequence on.
   * @returns {(Observable<Array<string | T>>)} An observable sequence of
   * [key, value] pairs from the object.
   */
  PairsObservable.create = function (obj, scheduler) {
    return new PairsObservable(obj, scheduler);
  };
  PairsObservable.prototype._subscribe = function (subscriber) {
    var _a = this,
        keys = _a.keys,
        scheduler = _a.scheduler;
    var length = keys.length;
    if (scheduler) {
      return scheduler.schedule(dispatch, 0, {
        obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber
      });
    } else {
      for (var idx = 0; idx < length; idx++) {
        var key = keys[idx];
        subscriber.next([key, this.obj[key]]);
      }
      subscriber.complete();
    }
  };
  return PairsObservable;
}(Observable_1.Observable);
exports.PairsObservable = PairsObservable;
//# sourceMappingURL=PairsObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/range.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1821');
var range_1 = require('1822');
Observable_1.Observable.range = range_1.range;
//# sourceMappingURL=range.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/range.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var RangeObservable_1 = require('2344');
exports.range = RangeObservable_1.RangeObservable.create;
//# sourceMappingURL=range.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/RangeObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2426');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var RangeObservable = function (_super) {
  __extends(RangeObservable, _super);
  function RangeObservable(start, count, scheduler) {
    _super.call(this);
    this.start = start;
    this._count = count;
    this.scheduler = scheduler;
  }
  /**
   * Creates an Observable that emits a sequence of numbers within a specified
   * range.
   *
   * <span class="informal">Emits a sequence of numbers in a range.</span>
   *
   * <img src="./img/range.png" width="100%">
   *
   * `range` operator emits a range of sequential integers, in order, where you
   * select the `start` of the range and its `length`. By default, uses no
   * IScheduler and just delivers the notifications synchronously, but may use
   * an optional IScheduler to regulate those deliveries.
   *
   * @example <caption>Emits the numbers 1 to 10</caption>
   * var numbers = Rx.Observable.range(1, 10);
   * numbers.subscribe(x => console.log(x));
   *
   * @see {@link timer}
   * @see {@link interval}
   *
   * @param {number} [start=0] The value of the first integer in the sequence.
   * @param {number} [count=0] The number of sequential integers to generate.
   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
   * the emissions of the notifications.
   * @return {Observable} An Observable of numbers that emits a finite range of
   * sequential integers.
   * @static true
   * @name range
   * @owner Observable
   */
  RangeObservable.create = function (start, count, scheduler) {
    if (start === void 0) {
      start = 0;
    }
    if (count === void 0) {
      count = 0;
    }
    return new RangeObservable(start, count, scheduler);
  };
  RangeObservable.dispatch = function (state) {
    var start = state.start,
        index = state.index,
        count = state.count,
        subscriber = state.subscriber;
    if (index >= count) {
      subscriber.complete();
      return;
    }
    subscriber.next(start);
    if (subscriber.closed) {
      return;
    }
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
  };
  RangeObservable.prototype._subscribe = function (subscriber) {
    var index = 0;
    var start = this.start;
    var count = this._count;
    var scheduler = this.scheduler;
    if (scheduler) {
      return scheduler.schedule(RangeObservable.dispatch, 0, {
        index: index, count: count, start: start, subscriber: subscriber
      });
    } else {
      do {
        if (index++ >= count) {
          subscriber.complete();
          break;
        }
        subscriber.next(start++);
        if (subscriber.closed) {
          break;
        }
      } while (true);
    }
  };
  return RangeObservable;
}(Observable_1.Observable);
exports.RangeObservable = RangeObservable;
//# sourceMappingURL=RangeObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/using.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1823');
var using_1 = require('1824');
Observable_1.Observable.using = using_1.using;
//# sourceMappingURL=using.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/using.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var UsingObservable_1 = require('2343');
exports.using = UsingObservable_1.UsingObservable.create;
//# sourceMappingURL=using.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/UsingObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2423');
var subscribeToResult_1 = require('2424');
var OuterSubscriber_1 = require('2425');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var UsingObservable = function (_super) {
  __extends(UsingObservable, _super);
  function UsingObservable(resourceFactory, observableFactory) {
    _super.call(this);
    this.resourceFactory = resourceFactory;
    this.observableFactory = observableFactory;
  }
  UsingObservable.create = function (resourceFactory, observableFactory) {
    return new UsingObservable(resourceFactory, observableFactory);
  };
  UsingObservable.prototype._subscribe = function (subscriber) {
    var _a = this,
        resourceFactory = _a.resourceFactory,
        observableFactory = _a.observableFactory;
    var resource;
    try {
      resource = resourceFactory();
      return new UsingSubscriber(subscriber, resource, observableFactory);
    } catch (err) {
      subscriber.error(err);
    }
  };
  return UsingObservable;
}(Observable_1.Observable);
exports.UsingObservable = UsingObservable;
var UsingSubscriber = function (_super) {
  __extends(UsingSubscriber, _super);
  function UsingSubscriber(destination, resource, observableFactory) {
    _super.call(this, destination);
    this.resource = resource;
    this.observableFactory = observableFactory;
    destination.add(resource);
    this.tryUse();
  }
  UsingSubscriber.prototype.tryUse = function () {
    try {
      var source = this.observableFactory.call(this, this.resource);
      if (source) {
        this.add(subscribeToResult_1.subscribeToResult(this, source));
      }
    } catch (err) {
      this._error(err);
    }
  };
  return UsingSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=UsingObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/throw.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1825');
var throw_1 = require('1826');
Observable_1.Observable.throw = throw_1._throw;
//# sourceMappingURL=throw.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/throw.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var ErrorObservable_1 = require('2345');
exports._throw = ErrorObservable_1.ErrorObservable.create;
//# sourceMappingURL=throw.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/ErrorObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2433');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ErrorObservable = function (_super) {
  __extends(ErrorObservable, _super);
  function ErrorObservable(error, scheduler) {
    _super.call(this);
    this.error = error;
    this.scheduler = scheduler;
  }
  /**
   * Creates an Observable that emits no items to the Observer and immediately
   * emits an error notification.
   *
   * <span class="informal">Just emits 'error', and nothing else.
   * </span>
   *
   * <img src="./img/throw.png" width="100%">
   *
   * This static operator is useful for creating a simple Observable that only
   * emits the error notification. It can be used for composing with other
   * Observables, such as in a {@link mergeMap}.
   *
   * @example <caption>Emit the number 7, then emit an error.</caption>
   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);
   * result.subscribe(x => console.log(x), e => console.error(e));
   *
   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
   * var interval = Rx.Observable.interval(1000);
   * var result = interval.mergeMap(x =>
   *   x === 13 ?
   *     Rx.Observable.throw('Thirteens are bad') :
   *     Rx.Observable.of('a', 'b', 'c')
   * );
   * result.subscribe(x => console.log(x), e => console.error(e));
   *
   * @see {@link create}
   * @see {@link empty}
   * @see {@link never}
   * @see {@link of}
   *
   * @param {any} error The particular Error to pass to the error notification.
   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
   * the emission of the error notification.
   * @return {Observable} An error Observable: emits only the error notification
   * using the given error argument.
   * @static true
   * @name throw
   * @owner Observable
   */
  ErrorObservable.create = function (error, scheduler) {
    return new ErrorObservable(error, scheduler);
  };
  ErrorObservable.dispatch = function (arg) {
    var error = arg.error,
        subscriber = arg.subscriber;
    subscriber.error(error);
  };
  ErrorObservable.prototype._subscribe = function (subscriber) {
    var error = this.error;
    var scheduler = this.scheduler;
    subscriber.syncErrorThrowable = true;
    if (scheduler) {
      return scheduler.schedule(ErrorObservable.dispatch, 0, {
        error: error, subscriber: subscriber
      });
    } else {
      subscriber.error(error);
    }
  };
  return ErrorObservable;
}(Observable_1.Observable);
exports.ErrorObservable = ErrorObservable;
//# sourceMappingURL=ErrorObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/timer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1827');
var timer_1 = require('1828');
Observable_1.Observable.timer = timer_1.timer;
//# sourceMappingURL=timer.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/timer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var TimerObservable_1 = require('2347');
exports.timer = TimerObservable_1.TimerObservable.create;
//# sourceMappingURL=timer.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/TimerObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = require('2427');
var Observable_1 = require('2428');
var async_1 = require('2429');
var isScheduler_1 = require('2430');
var isDate_1 = require('2431');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var TimerObservable = function (_super) {
  __extends(TimerObservable, _super);
  function TimerObservable(dueTime, period, scheduler) {
    if (dueTime === void 0) {
      dueTime = 0;
    }
    _super.call(this);
    this.period = -1;
    this.dueTime = 0;
    if (isNumeric_1.isNumeric(period)) {
      this.period = Number(period) < 1 && 1 || Number(period);
    } else if (isScheduler_1.isScheduler(period)) {
      scheduler = period;
    }
    if (!isScheduler_1.isScheduler(scheduler)) {
      scheduler = async_1.async;
    }
    this.scheduler = scheduler;
    this.dueTime = isDate_1.isDate(dueTime) ? +dueTime - this.scheduler.now() : dueTime;
  }
  /**
   * Creates an Observable that starts emitting after an `initialDelay` and
   * emits ever increasing numbers after each `period` of time thereafter.
   *
   * <span class="informal">Its like {@link interval}, but you can specify when
   * should the emissions start.</span>
   *
   * <img src="./img/timer.png" width="100%">
   *
   * `timer` returns an Observable that emits an infinite sequence of ascending
   * integers, with a constant interval of time, `period` of your choosing
   * between those emissions. The first emission happens after the specified
   * `initialDelay`. The initial delay may be a {@link Date}. By default, this
   * operator uses the `async` IScheduler to provide a notion of time, but you
   * may pass any IScheduler to it. If `period` is not specified, the output
   * Observable emits only one value, `0`. Otherwise, it emits an infinite
   * sequence.
   *
   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
   * var numbers = Rx.Observable.timer(3000, 1000);
   * numbers.subscribe(x => console.log(x));
   *
   * @example <caption>Emits one number after five seconds</caption>
   * var numbers = Rx.Observable.timer(5000);
   * numbers.subscribe(x => console.log(x));
   *
   * @see {@link interval}
   * @see {@link delay}
   *
   * @param {number|Date} initialDelay The initial delay time to wait before
   * emitting the first value of `0`.
   * @param {number} [period] The period of time between emissions of the
   * subsequent numbers.
   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
   * the emission of values, and providing a notion of "time".
   * @return {Observable} An Observable that emits a `0` after the
   * `initialDelay` and ever increasing numbers after each `period` of time
   * thereafter.
   * @static true
   * @name timer
   * @owner Observable
   */
  TimerObservable.create = function (initialDelay, period, scheduler) {
    if (initialDelay === void 0) {
      initialDelay = 0;
    }
    return new TimerObservable(initialDelay, period, scheduler);
  };
  TimerObservable.dispatch = function (state) {
    var index = state.index,
        period = state.period,
        subscriber = state.subscriber;
    var action = this;
    subscriber.next(index);
    if (subscriber.closed) {
      return;
    } else if (period === -1) {
      return subscriber.complete();
    }
    state.index = index + 1;
    action.schedule(state, period);
  };
  TimerObservable.prototype._subscribe = function (subscriber) {
    var index = 0;
    var _a = this,
        period = _a.period,
        dueTime = _a.dueTime,
        scheduler = _a.scheduler;
    return scheduler.schedule(TimerObservable.dispatch, dueTime, {
      index: index, period: period, subscriber: subscriber
    });
  };
  return TimerObservable;
}(Observable_1.Observable);
exports.TimerObservable = TimerObservable;
//# sourceMappingURL=TimerObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/isDate.js", function(__filename, __dirname, require, module, exports) {
"use strict";

function isDate(value) {
  return value instanceof Date && !isNaN(+value);
}
exports.isDate = isDate;
//# sourceMappingURL=isDate.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/zip.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1829');
var zip_1 = require('1830');
Observable_1.Observable.zip = zip_1.zip;
//# sourceMappingURL=zip.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/zip.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var zip_1 = require('2346');
exports.zip = zip_1.zipStatic;
//# sourceMappingURL=zip.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/zip.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = require('2318');
var isArray_1 = require('2319');
var Subscriber_1 = require('2320');
var OuterSubscriber_1 = require('2321');
var subscribeToResult_1 = require('2322');
var iterator_1 = require('2323');
/* tslint:enable:max-line-length */
/**
 * @param observables
 * @return {Observable<R>}
 * @method zip
 * @owner Observable
 */
function zipProto() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  return this.lift.call(zipStatic.apply(void 0, [this].concat(observables)));
}
exports.zipProto = zipProto;
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each
 * of its input Observables.
 *
 * If the latest parameter is a function, this function is used to compute the created value from the input values.
 * Otherwise, an array of the input values is returned.
 *
 * @example <caption>Combine age and name from different sources</caption>
 *
 * let age$ = Observable.of<number>(27, 25, 29);
 * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');
 * let isDev$ = Observable.of<boolean>(true, true, false);
 *
 * Observable
 *     .zip(age$,
 *          name$,
 *          isDev$,
 *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))
 *     .subscribe(x => console.log(x));
 *
 * // outputs
 * // { age: 27, name: 'Foo', isDev: true }
 * // { age: 25, name: 'Bar', isDev: true }
 * // { age: 29, name: 'Beer', isDev: false }
 *
 * @param observables
 * @return {Observable<R>}
 * @static true
 * @name zip
 * @owner Observable
 */
function zipStatic() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i - 0] = arguments[_i];
  }
  var project = observables[observables.length - 1];
  if (typeof project === 'function') {
    observables.pop();
  }
  return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));
}
exports.zipStatic = zipStatic;
var ZipOperator = function () {
  function ZipOperator(project) {
    this.project = project;
  }
  ZipOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ZipSubscriber(subscriber, this.project));
  };
  return ZipOperator;
}();
exports.ZipOperator = ZipOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipSubscriber = function (_super) {
  __extends(ZipSubscriber, _super);
  function ZipSubscriber(destination, project, values) {
    if (values === void 0) {
      values = Object.create(null);
    }
    _super.call(this, destination);
    this.iterators = [];
    this.active = 0;
    this.project = typeof project === 'function' ? project : null;
    this.values = values;
  }
  ZipSubscriber.prototype._next = function (value) {
    var iterators = this.iterators;
    if (isArray_1.isArray(value)) {
      iterators.push(new StaticArrayIterator(value));
    } else if (typeof value[iterator_1.iterator] === 'function') {
      iterators.push(new StaticIterator(value[iterator_1.iterator]()));
    } else {
      iterators.push(new ZipBufferIterator(this.destination, this, value));
    }
  };
  ZipSubscriber.prototype._complete = function () {
    var iterators = this.iterators;
    var len = iterators.length;
    if (len === 0) {
      this.destination.complete();
      return;
    }
    this.active = len;
    for (var i = 0; i < len; i++) {
      var iterator = iterators[i];
      if (iterator.stillUnsubscribed) {
        this.add(iterator.subscribe(iterator, i));
      } else {
        this.active--; // not an observable
      }
    }
  };
  ZipSubscriber.prototype.notifyInactive = function () {
    this.active--;
    if (this.active === 0) {
      this.destination.complete();
    }
  };
  ZipSubscriber.prototype.checkIterators = function () {
    var iterators = this.iterators;
    var len = iterators.length;
    var destination = this.destination;
    // abort if not all of them have values
    for (var i = 0; i < len; i++) {
      var iterator = iterators[i];
      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
        return;
      }
    }
    var shouldComplete = false;
    var args = [];
    for (var i = 0; i < len; i++) {
      var iterator = iterators[i];
      var result = iterator.next();
      // check to see if it's completed now that you've gotten
      // the next value.
      if (iterator.hasCompleted()) {
        shouldComplete = true;
      }
      if (result.done) {
        destination.complete();
        return;
      }
      args.push(result.value);
    }
    if (this.project) {
      this._tryProject(args);
    } else {
      destination.next(args);
    }
    if (shouldComplete) {
      destination.complete();
    }
  };
  ZipSubscriber.prototype._tryProject = function (args) {
    var result;
    try {
      result = this.project.apply(this, args);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return ZipSubscriber;
}(Subscriber_1.Subscriber);
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = function () {
  function StaticIterator(iterator) {
    this.iterator = iterator;
    this.nextResult = iterator.next();
  }
  StaticIterator.prototype.hasValue = function () {
    return true;
  };
  StaticIterator.prototype.next = function () {
    var result = this.nextResult;
    this.nextResult = this.iterator.next();
    return result;
  };
  StaticIterator.prototype.hasCompleted = function () {
    var nextResult = this.nextResult;
    return nextResult && nextResult.done;
  };
  return StaticIterator;
}();
var StaticArrayIterator = function () {
  function StaticArrayIterator(array) {
    this.array = array;
    this.index = 0;
    this.length = 0;
    this.length = array.length;
  }
  StaticArrayIterator.prototype[iterator_1.iterator] = function () {
    return this;
  };
  StaticArrayIterator.prototype.next = function (value) {
    var i = this.index++;
    var array = this.array;
    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
  };
  StaticArrayIterator.prototype.hasValue = function () {
    return this.array.length > this.index;
  };
  StaticArrayIterator.prototype.hasCompleted = function () {
    return this.array.length === this.index;
  };
  return StaticArrayIterator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipBufferIterator = function (_super) {
  __extends(ZipBufferIterator, _super);
  function ZipBufferIterator(destination, parent, observable) {
    _super.call(this, destination);
    this.parent = parent;
    this.observable = observable;
    this.stillUnsubscribed = true;
    this.buffer = [];
    this.isComplete = false;
  }
  ZipBufferIterator.prototype[iterator_1.iterator] = function () {
    return this;
  };
  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
  //    this is legit because `next()` will never be called by a subscription in this case.
  ZipBufferIterator.prototype.next = function () {
    var buffer = this.buffer;
    if (buffer.length === 0 && this.isComplete) {
      return { value: null, done: true };
    } else {
      return { value: buffer.shift(), done: false };
    }
  };
  ZipBufferIterator.prototype.hasValue = function () {
    return this.buffer.length > 0;
  };
  ZipBufferIterator.prototype.hasCompleted = function () {
    return this.buffer.length === 0 && this.isComplete;
  };
  ZipBufferIterator.prototype.notifyComplete = function () {
    if (this.buffer.length > 0) {
      this.isComplete = true;
      this.parent.notifyInactive();
    } else {
      this.destination.complete();
    }
  };
  ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.buffer.push(innerValue);
    this.parent.checkIterators();
  };
  ZipBufferIterator.prototype.subscribe = function (value, index) {
    return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
  };
  return ZipBufferIterator;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=zip.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/dom/ajax.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2049');
var ajax_1 = require('2050');
Observable_1.Observable.ajax = ajax_1.ajax;
//# sourceMappingURL=ajax.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/dom/ajax.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var AjaxObservable_1 = require('2352');
exports.ajax = AjaxObservable_1.AjaxObservable.create;
//# sourceMappingURL=ajax.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/dom/AjaxObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = require('2041');
var tryCatch_1 = require('2042');
var errorObject_1 = require('2043');
var Observable_1 = require('2044');
var Subscriber_1 = require('2045');
var map_1 = require('2046');
function getCORSRequest() {
  if (root_1.root.XMLHttpRequest) {
    return new root_1.root.XMLHttpRequest();
  } else if (!!root_1.root.XDomainRequest) {
    return new root_1.root.XDomainRequest();
  } else {
    throw new Error('CORS is not supported by your browser');
  }
}
function getXMLHttpRequest() {
  if (root_1.root.XMLHttpRequest) {
    return new root_1.root.XMLHttpRequest();
  } else {
    var progId = void 0;
    try {
      var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
      for (var i = 0; i < 3; i++) {
        try {
          progId = progIds[i];
          if (new root_1.root.ActiveXObject(progId)) {
            break;
          }
        } catch (e) {}
      }
      return new root_1.root.ActiveXObject(progId);
    } catch (e) {
      throw new Error('XMLHttpRequest is not supported by your browser');
    }
  }
}
function ajaxGet(url, headers) {
  if (headers === void 0) {
    headers = null;
  }
  return new AjaxObservable({ method: 'GET', url: url, headers: headers });
}
exports.ajaxGet = ajaxGet;
;
function ajaxPost(url, body, headers) {
  return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });
}
exports.ajaxPost = ajaxPost;
;
function ajaxDelete(url, headers) {
  return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });
}
exports.ajaxDelete = ajaxDelete;
;
function ajaxPut(url, body, headers) {
  return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });
}
exports.ajaxPut = ajaxPut;
;
function ajaxPatch(url, body, headers) {
  return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });
}
exports.ajaxPatch = ajaxPatch;
;
function ajaxGetJSON(url, headers) {
  return new AjaxObservable({ method: 'GET', url: url, responseType: 'json', headers: headers }).lift(new map_1.MapOperator(function (x, index) {
    return x.response;
  }, null));
}
exports.ajaxGetJSON = ajaxGetJSON;
;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var AjaxObservable = function (_super) {
  __extends(AjaxObservable, _super);
  function AjaxObservable(urlOrRequest) {
    _super.call(this);
    var request = {
      async: true,
      createXHR: function () {
        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();
      },
      crossDomain: false,
      withCredentials: false,
      headers: {},
      method: 'GET',
      responseType: 'json',
      timeout: 0
    };
    if (typeof urlOrRequest === 'string') {
      request.url = urlOrRequest;
    } else {
      for (var prop in urlOrRequest) {
        if (urlOrRequest.hasOwnProperty(prop)) {
          request[prop] = urlOrRequest[prop];
        }
      }
    }
    this.request = request;
  }
  AjaxObservable.prototype._subscribe = function (subscriber) {
    return new AjaxSubscriber(subscriber, this.request);
  };
  /**
   * Creates an observable for an Ajax request with either a request object with
   * url, headers, etc or a string for a URL.
   *
   * @example
   * source = Rx.Observable.ajax('/products');
   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });
   *
   * @param {string|Object} request Can be one of the following:
   *   A string of the URL to make the Ajax call.
   *   An object with the following properties
   *   - url: URL of the request
   *   - body: The body of the request
   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE
   *   - async: Whether the request is async
   *   - headers: Optional headers
   *   - crossDomain: true if a cross domain request, else false
   *   - createXHR: a function to override if you need to use an alternate
   *   XMLHttpRequest implementation.
   *   - resultSelector: a function to use to alter the output value type of
   *   the Observable. Gets {@link AjaxResponse} as an argument.
   * @return {Observable} An observable sequence containing the XMLHttpRequest.
   * @static true
   * @name ajax
   * @owner Observable
  */
  AjaxObservable.create = function () {
    var create = function (urlOrRequest) {
      return new AjaxObservable(urlOrRequest);
    };
    create.get = ajaxGet;
    create.post = ajaxPost;
    create.delete = ajaxDelete;
    create.put = ajaxPut;
    create.patch = ajaxPatch;
    create.getJSON = ajaxGetJSON;
    return create;
  }();
  return AjaxObservable;
}(Observable_1.Observable);
exports.AjaxObservable = AjaxObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AjaxSubscriber = function (_super) {
  __extends(AjaxSubscriber, _super);
  function AjaxSubscriber(destination, request) {
    _super.call(this, destination);
    this.request = request;
    this.done = false;
    var headers = request.headers = request.headers || {};
    // force CORS if requested
    if (!request.crossDomain && !headers['X-Requested-With']) {
      headers['X-Requested-With'] = 'XMLHttpRequest';
    }
    // ensure content type is set
    if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {
      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
    }
    // properly serialize body
    request.body = this.serializeBody(request.body, request.headers['Content-Type']);
    this.send();
  }
  AjaxSubscriber.prototype.next = function (e) {
    this.done = true;
    var _a = this,
        xhr = _a.xhr,
        request = _a.request,
        destination = _a.destination;
    var response = new AjaxResponse(e, xhr, request);
    destination.next(response);
  };
  AjaxSubscriber.prototype.send = function () {
    var _a = this,
        request = _a.request,
        _b = _a.request,
        user = _b.user,
        method = _b.method,
        url = _b.url,
        async = _b.async,
        password = _b.password,
        headers = _b.headers,
        body = _b.body;
    var createXHR = request.createXHR;
    var xhr = tryCatch_1.tryCatch(createXHR).call(request);
    if (xhr === errorObject_1.errorObject) {
      this.error(errorObject_1.errorObject.e);
    } else {
      this.xhr = xhr;
      // set up the events before open XHR
      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
      // You need to add the event listeners before calling open() on the request.
      // Otherwise the progress events will not fire.
      this.setupEvents(xhr, request);
      // open XHR
      var result = void 0;
      if (user) {
        result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);
      } else {
        result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);
      }
      if (result === errorObject_1.errorObject) {
        this.error(errorObject_1.errorObject.e);
        return null;
      }
      // timeout, responseType and withCredentials can be set once the XHR is open
      if (async) {
        xhr.timeout = request.timeout;
        xhr.responseType = request.responseType;
      }
      if ('withCredentials' in xhr) {
        xhr.withCredentials = !!request.withCredentials;
      }
      // set headers
      this.setHeaders(xhr, headers);
      // finally send the request
      result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);
      if (result === errorObject_1.errorObject) {
        this.error(errorObject_1.errorObject.e);
        return null;
      }
    }
    return xhr;
  };
  AjaxSubscriber.prototype.serializeBody = function (body, contentType) {
    if (!body || typeof body === 'string') {
      return body;
    } else if (root_1.root.FormData && body instanceof root_1.root.FormData) {
      return body;
    }
    if (contentType) {
      var splitIndex = contentType.indexOf(';');
      if (splitIndex !== -1) {
        contentType = contentType.substring(0, splitIndex);
      }
    }
    switch (contentType) {
      case 'application/x-www-form-urlencoded':
        return Object.keys(body).map(function (key) {
          return encodeURI(key) + "=" + encodeURI(body[key]);
        }).join('&');
      case 'application/json':
        return JSON.stringify(body);
      default:
        return body;
    }
  };
  AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {
    for (var key in headers) {
      if (headers.hasOwnProperty(key)) {
        xhr.setRequestHeader(key, headers[key]);
      }
    }
  };
  AjaxSubscriber.prototype.setupEvents = function (xhr, request) {
    var progressSubscriber = request.progressSubscriber;
    function xhrTimeout(e) {
      var _a = xhrTimeout,
          subscriber = _a.subscriber,
          progressSubscriber = _a.progressSubscriber,
          request = _a.request;
      if (progressSubscriber) {
        progressSubscriber.error(e);
      }
      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.
    }
    ;
    xhr.ontimeout = xhrTimeout;
    xhrTimeout.request = request;
    xhrTimeout.subscriber = this;
    xhrTimeout.progressSubscriber = progressSubscriber;
    if (xhr.upload && 'withCredentials' in xhr) {
      if (progressSubscriber) {
        var xhrProgress_1;
        xhrProgress_1 = function (e) {
          var progressSubscriber = xhrProgress_1.progressSubscriber;
          progressSubscriber.next(e);
        };
        if (root_1.root.XDomainRequest) {
          xhr.onprogress = xhrProgress_1;
        } else {
          xhr.upload.onprogress = xhrProgress_1;
        }
        xhrProgress_1.progressSubscriber = progressSubscriber;
      }
      var xhrError_1;
      xhrError_1 = function (e) {
        var _a = xhrError_1,
            progressSubscriber = _a.progressSubscriber,
            subscriber = _a.subscriber,
            request = _a.request;
        if (progressSubscriber) {
          progressSubscriber.error(e);
        }
        subscriber.error(new AjaxError('ajax error', this, request));
      };
      xhr.onerror = xhrError_1;
      xhrError_1.request = request;
      xhrError_1.subscriber = this;
      xhrError_1.progressSubscriber = progressSubscriber;
    }
    function xhrReadyStateChange(e) {
      var _a = xhrReadyStateChange,
          subscriber = _a.subscriber,
          progressSubscriber = _a.progressSubscriber,
          request = _a.request;
      if (this.readyState === 4) {
        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
        var status_1 = this.status === 1223 ? 204 : this.status;
        var response = this.responseType === 'text' ? this.response || this.responseText : this.response;
        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status_1 === 0) {
          status_1 = response ? 200 : 0;
        }
        if (200 <= status_1 && status_1 < 300) {
          if (progressSubscriber) {
            progressSubscriber.complete();
          }
          subscriber.next(e);
          subscriber.complete();
        } else {
          if (progressSubscriber) {
            progressSubscriber.error(e);
          }
          subscriber.error(new AjaxError('ajax error ' + status_1, this, request));
        }
      }
    }
    ;
    xhr.onreadystatechange = xhrReadyStateChange;
    xhrReadyStateChange.subscriber = this;
    xhrReadyStateChange.progressSubscriber = progressSubscriber;
    xhrReadyStateChange.request = request;
  };
  AjaxSubscriber.prototype.unsubscribe = function () {
    var _a = this,
        done = _a.done,
        xhr = _a.xhr;
    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {
      xhr.abort();
    }
    _super.prototype.unsubscribe.call(this);
  };
  return AjaxSubscriber;
}(Subscriber_1.Subscriber);
exports.AjaxSubscriber = AjaxSubscriber;
/**
 * A normalized AJAX response.
 *
 * @see {@link ajax}
 *
 * @class AjaxResponse
 */
var AjaxResponse = function () {
  function AjaxResponse(originalEvent, xhr, request) {
    this.originalEvent = originalEvent;
    this.xhr = xhr;
    this.request = request;
    this.status = xhr.status;
    this.responseType = xhr.responseType || request.responseType;
    switch (this.responseType) {
      case 'json':
        if ('response' in xhr) {
          //IE does not support json as responseType, parse it internally
          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');
        } else {
          this.response = JSON.parse(xhr.responseText || 'null');
        }
        break;
      case 'xml':
        this.response = xhr.responseXML;
        break;
      case 'text':
      default:
        this.response = 'response' in xhr ? xhr.response : xhr.responseText;
        break;
    }
  }
  return AjaxResponse;
}();
exports.AjaxResponse = AjaxResponse;
/**
 * A normalized AJAX error.
 *
 * @see {@link ajax}
 *
 * @class AjaxError
 */
var AjaxError = function (_super) {
  __extends(AjaxError, _super);
  function AjaxError(message, xhr, request) {
    _super.call(this, message);
    this.message = message;
    this.xhr = xhr;
    this.request = request;
    this.status = xhr.status;
  }
  return AjaxError;
}(Error);
exports.AjaxError = AjaxError;
/**
 * @see {@link ajax}
 *
 * @class AjaxTimeoutError
 */
var AjaxTimeoutError = function (_super) {
  __extends(AjaxTimeoutError, _super);
  function AjaxTimeoutError(xhr, request) {
    _super.call(this, 'ajax timeout', xhr, request);
  }
  return AjaxTimeoutError;
}(AjaxError);
exports.AjaxTimeoutError = AjaxTimeoutError;
//# sourceMappingURL=AjaxObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/map.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2182');
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
  if (typeof project !== 'function') {
    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
  }
  return this.lift(new MapOperator(project, thisArg));
}
exports.map = map;
var MapOperator = function () {
  function MapOperator(project, thisArg) {
    this.project = project;
    this.thisArg = thisArg;
  }
  MapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
  };
  return MapOperator;
}();
exports.MapOperator = MapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = function (_super) {
  __extends(MapSubscriber, _super);
  function MapSubscriber(destination, project, thisArg) {
    _super.call(this, destination);
    this.project = project;
    this.count = 0;
    this.thisArg = thisArg || this;
  }
  // NOTE: This looks unoptimized, but it's actually purposefully NOT
  // using try/catch optimizations.
  MapSubscriber.prototype._next = function (value) {
    var result;
    try {
      result = this.project.call(this.thisArg, value, this.count++);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return MapSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=map.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/observable/dom/webSocket.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2047');
var webSocket_1 = require('2048');
Observable_1.Observable.webSocket = webSocket_1.webSocket;
//# sourceMappingURL=webSocket.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/dom/webSocket.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var WebSocketSubject_1 = require('2351');
exports.webSocket = WebSocketSubject_1.WebSocketSubject.create;
//# sourceMappingURL=webSocket.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/dom/WebSocketSubject.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('2444');
var Subscriber_1 = require('2445');
var Observable_1 = require('2446');
var Subscription_1 = require('2447');
var root_1 = require('2448');
var ReplaySubject_1 = require('2449');
var tryCatch_1 = require('2450');
var errorObject_1 = require('2451');
var assign_1 = require('2452');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var WebSocketSubject = function (_super) {
  __extends(WebSocketSubject, _super);
  function WebSocketSubject(urlConfigOrSource, destination) {
    if (urlConfigOrSource instanceof Observable_1.Observable) {
      _super.call(this, destination, urlConfigOrSource);
    } else {
      _super.call(this);
      this.WebSocketCtor = root_1.root.WebSocket;
      this._output = new Subject_1.Subject();
      if (typeof urlConfigOrSource === 'string') {
        this.url = urlConfigOrSource;
      } else {
        // WARNING: config object could override important members here.
        assign_1.assign(this, urlConfigOrSource);
      }
      if (!this.WebSocketCtor) {
        throw new Error('no WebSocket constructor can be found');
      }
      this.destination = new ReplaySubject_1.ReplaySubject();
    }
  }
  WebSocketSubject.prototype.resultSelector = function (e) {
    return JSON.parse(e.data);
  };
  /**
   * Wrapper around the w3c-compatible WebSocket object provided by the browser.
   *
   * @example <caption>Wraps browser WebSocket</caption>
   *
   * let socket$ = Observable.webSocket('ws://localhost:8081');
   *
   * socket$.subscribe(
   *    (msg) => console.log('message received: ' + msg),
   *    (err) => console.log(err),
   *    () => console.log('complete')
   *  );
   *
   * socket$.next(JSON.stringify({ op: 'hello' }));
   *
   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>
   *
   * import { w3cwebsocket } from 'websocket';
   *
   * let socket$ = Observable.webSocket({
   *   url: 'ws://localhost:8081',
   *   WebSocketCtor: w3cwebsocket
   * });
   *
   * socket$.subscribe(
   *    (msg) => console.log('message received: ' + msg),
   *    (err) => console.log(err),
   *    () => console.log('complete')
   *  );
   *
   * socket$.next(JSON.stringify({ op: 'hello' }));
   *
   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object
   * @return {WebSocketSubject}
   * @static true
   * @name webSocket
   * @owner Observable
   */
  WebSocketSubject.create = function (urlConfigOrSource) {
    return new WebSocketSubject(urlConfigOrSource);
  };
  WebSocketSubject.prototype.lift = function (operator) {
    var sock = new WebSocketSubject(this, this.destination);
    sock.operator = operator;
    return sock;
  };
  WebSocketSubject.prototype._resetState = function () {
    this.socket = null;
    if (!this.source) {
      this.destination = new ReplaySubject_1.ReplaySubject();
    }
    this._output = new Subject_1.Subject();
  };
  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures
  WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {
    var self = this;
    return new Observable_1.Observable(function (observer) {
      var result = tryCatch_1.tryCatch(subMsg)();
      if (result === errorObject_1.errorObject) {
        observer.error(errorObject_1.errorObject.e);
      } else {
        self.next(result);
      }
      var subscription = self.subscribe(function (x) {
        var result = tryCatch_1.tryCatch(messageFilter)(x);
        if (result === errorObject_1.errorObject) {
          observer.error(errorObject_1.errorObject.e);
        } else if (result) {
          observer.next(x);
        }
      }, function (err) {
        return observer.error(err);
      }, function () {
        return observer.complete();
      });
      return function () {
        var result = tryCatch_1.tryCatch(unsubMsg)();
        if (result === errorObject_1.errorObject) {
          observer.error(errorObject_1.errorObject.e);
        } else {
          self.next(result);
        }
        subscription.unsubscribe();
      };
    });
  };
  WebSocketSubject.prototype._connectSocket = function () {
    var _this = this;
    var WebSocketCtor = this.WebSocketCtor;
    var observer = this._output;
    var socket = null;
    try {
      socket = this.protocol ? new WebSocketCtor(this.url, this.protocol) : new WebSocketCtor(this.url);
      this.socket = socket;
      if (this.binaryType) {
        this.socket.binaryType = this.binaryType;
      }
    } catch (e) {
      observer.error(e);
      return;
    }
    var subscription = new Subscription_1.Subscription(function () {
      _this.socket = null;
      if (socket && socket.readyState === 1) {
        socket.close();
      }
    });
    socket.onopen = function (e) {
      var openObserver = _this.openObserver;
      if (openObserver) {
        openObserver.next(e);
      }
      var queue = _this.destination;
      _this.destination = Subscriber_1.Subscriber.create(function (x) {
        return socket.readyState === 1 && socket.send(x);
      }, function (e) {
        var closingObserver = _this.closingObserver;
        if (closingObserver) {
          closingObserver.next(undefined);
        }
        if (e && e.code) {
          socket.close(e.code, e.reason);
        } else {
          observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' + 'and an optional reason: { code: number, reason: string }'));
        }
        _this._resetState();
      }, function () {
        var closingObserver = _this.closingObserver;
        if (closingObserver) {
          closingObserver.next(undefined);
        }
        socket.close();
        _this._resetState();
      });
      if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {
        subscription.add(queue.subscribe(_this.destination));
      }
    };
    socket.onerror = function (e) {
      _this._resetState();
      observer.error(e);
    };
    socket.onclose = function (e) {
      _this._resetState();
      var closeObserver = _this.closeObserver;
      if (closeObserver) {
        closeObserver.next(e);
      }
      if (e.wasClean) {
        observer.complete();
      } else {
        observer.error(e);
      }
    };
    socket.onmessage = function (e) {
      var result = tryCatch_1.tryCatch(_this.resultSelector)(e);
      if (result === errorObject_1.errorObject) {
        observer.error(errorObject_1.errorObject.e);
      } else {
        observer.next(result);
      }
    };
  };
  WebSocketSubject.prototype._subscribe = function (subscriber) {
    var _this = this;
    var source = this.source;
    if (source) {
      return source.subscribe(subscriber);
    }
    if (!this.socket) {
      this._connectSocket();
    }
    var subscription = new Subscription_1.Subscription();
    subscription.add(this._output.subscribe(subscriber));
    subscription.add(function () {
      var socket = _this.socket;
      if (_this._output.observers.length === 0) {
        if (socket && socket.readyState === 1) {
          socket.close();
        }
        _this._resetState();
      }
    });
    return subscription;
  };
  WebSocketSubject.prototype.unsubscribe = function () {
    var _a = this,
        source = _a.source,
        socket = _a.socket;
    if (socket && socket.readyState === 1) {
      socket.close();
      this._resetState();
    }
    _super.prototype.unsubscribe.call(this);
    if (!source) {
      this.destination = new ReplaySubject_1.ReplaySubject();
    }
  };
  return WebSocketSubject;
}(Subject_1.AnonymousSubject);
exports.WebSocketSubject = WebSocketSubject;
//# sourceMappingURL=WebSocketSubject.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/ReplaySubject.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('1741');
var queue_1 = require('1742');
var Subscription_1 = require('1743');
var observeOn_1 = require('1744');
var ObjectUnsubscribedError_1 = require('1745');
var SubjectSubscription_1 = require('1746');
/**
 * @class ReplaySubject<T>
 */
var ReplaySubject = function (_super) {
  __extends(ReplaySubject, _super);
  function ReplaySubject(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) {
      bufferSize = Number.POSITIVE_INFINITY;
    }
    if (windowTime === void 0) {
      windowTime = Number.POSITIVE_INFINITY;
    }
    _super.call(this);
    this.scheduler = scheduler;
    this._events = [];
    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
    this._windowTime = windowTime < 1 ? 1 : windowTime;
  }
  ReplaySubject.prototype.next = function (value) {
    var now = this._getNow();
    this._events.push(new ReplayEvent(now, value));
    this._trimBufferThenGetEvents();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject.prototype._subscribe = function (subscriber) {
    var _events = this._trimBufferThenGetEvents();
    var scheduler = this.scheduler;
    var subscription;
    if (this.closed) {
      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
    } else if (this.hasError) {
      subscription = Subscription_1.Subscription.EMPTY;
    } else if (this.isStopped) {
      subscription = Subscription_1.Subscription.EMPTY;
    } else {
      this.observers.push(subscriber);
      subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
    }
    if (scheduler) {
      subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
    }
    var len = _events.length;
    for (var i = 0; i < len && !subscriber.closed; i++) {
      subscriber.next(_events[i].value);
    }
    if (this.hasError) {
      subscriber.error(this.thrownError);
    } else if (this.isStopped) {
      subscriber.complete();
    }
    return subscription;
  };
  ReplaySubject.prototype._getNow = function () {
    return (this.scheduler || queue_1.queue).now();
  };
  ReplaySubject.prototype._trimBufferThenGetEvents = function () {
    var now = this._getNow();
    var _bufferSize = this._bufferSize;
    var _windowTime = this._windowTime;
    var _events = this._events;
    var eventsCount = _events.length;
    var spliceCount = 0;
    // Trim events that fall out of the time window.
    // Start at the front of the list. Break early once
    // we encounter an event that falls within the window.
    while (spliceCount < eventsCount) {
      if (now - _events[spliceCount].time < _windowTime) {
        break;
      }
      spliceCount++;
    }
    if (eventsCount > _bufferSize) {
      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
    }
    if (spliceCount > 0) {
      _events.splice(0, spliceCount);
    }
    return _events;
  };
  return ReplaySubject;
}(Subject_1.Subject);
exports.ReplaySubject = ReplaySubject;
var ReplayEvent = function () {
  function ReplayEvent(time, value) {
    this.time = time;
    this.value = value;
  }
  return ReplayEvent;
}();
//# sourceMappingURL=ReplaySubject.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/queue.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var QueueAction_1 = require('1782');
var QueueScheduler_1 = require('1783');
/**
 *
 * Queue Scheduler
 *
 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
 *
 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
 *
 * When used without delay, it schedules given task synchronously - executes it right when
 * it is scheduled. However when called recursively, that is when inside the scheduled task,
 * another task is scheduled with queue scheduler, instead of executing immediately as well,
 * that task will be put on a queue and wait for current one to finish.
 *
 * This means that when you execute task with `queue` scheduler, you are sure it will end
 * before any other task scheduled with that scheduler will start.
 *
 * @examples <caption>Schedule recursively first, then do something</caption>
 *
 * Rx.Scheduler.queue.schedule(() => {
 *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
 *
 *   console.log('first');
 * });
 *
 * // Logs:
 * // "first"
 * // "second"
 *
 *
 * @example <caption>Reschedule itself recursively</caption>
 *
 * Rx.Scheduler.queue.schedule(function(state) {
 *   if (state !== 0) {
 *     console.log('before', state);
 *     this.schedule(state - 1); // `this` references currently executing Action,
 *                               // which we reschedule with new state
 *     console.log('after', state);
 *   }
 * }, 0, 3);
 *
 * // In scheduler that runs recursively, you would expect:
 * // "before", 3
 * // "before", 2
 * // "before", 1
 * // "after", 1
 * // "after", 2
 * // "after", 3
 *
 * // But with queue it logs:
 * // "before", 3
 * // "after", 3
 * // "before", 2
 * // "after", 2
 * // "before", 1
 * // "after", 1
 *
 *
 * @static true
 * @name queue
 * @owner Scheduler
 */
exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
//# sourceMappingURL=queue.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/QueueAction.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = require('2081');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = function (_super) {
  __extends(QueueAction, _super);
  function QueueAction(scheduler, work) {
    _super.call(this, scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
  }
  QueueAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay > 0) {
      return _super.prototype.schedule.call(this, state, delay);
    }
    this.delay = delay;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction.prototype.execute = function (state, delay) {
    return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
  };
  QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    // If delay exists and is greater than 0, or if the delay is null (the
    // action wasn't rescheduled) but was originally scheduled as an async
    // action, then recycle as an async action.
    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    // Otherwise flush the scheduler starting with this action.
    return scheduler.flush(this);
  };
  return QueueAction;
}(AsyncAction_1.AsyncAction);
exports.QueueAction = QueueAction;
//# sourceMappingURL=QueueAction.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/QueueScheduler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = require('2080');
var QueueScheduler = function (_super) {
  __extends(QueueScheduler, _super);
  function QueueScheduler() {
    _super.apply(this, arguments);
  }
  return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.QueueScheduler = QueueScheduler;
//# sourceMappingURL=QueueScheduler.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/assign.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('2460');
function assignImpl(target) {
  var sources = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    sources[_i - 1] = arguments[_i];
  }
  var len = sources.length;
  for (var i = 0; i < len; i++) {
    var source = sources[i];
    for (var k in source) {
      if (source.hasOwnProperty(k)) {
        target[k] = source[k];
      }
    }
  }
  return target;
}
exports.assignImpl = assignImpl;
;
function getAssign(root) {
  return root.Object.assign || assignImpl;
}
exports.getAssign = getAssign;
exports.assign = getAssign(root_1.root);
//# sourceMappingURL=assign.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/buffer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1835');
var buffer_1 = require('1836');
Observable_1.Observable.prototype.buffer = buffer_1.buffer;
//# sourceMappingURL=buffer.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/buffer.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2096');
var subscribeToResult_1 = require('2097');
/**
 * Buffers the source Observable values until `closingNotifier` emits.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when another Observable emits.</span>
 *
 * <img src="./img/buffer.png" width="100%">
 *
 * Buffers the incoming Observable values until the given `closingNotifier`
 * Observable emits a value, at which point it emits the buffer on the output
 * Observable and starts a new buffer internally, awaiting the next time
 * `closingNotifier` emits.
 *
 * @example <caption>On every click, emit array of most recent interval events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var buffered = interval.buffer(clicks);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link window}
 *
 * @param {Observable<any>} closingNotifier An Observable that signals the
 * buffer to be emitted on the output Observable.
 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
 * values.
 * @method buffer
 * @owner Observable
 */
function buffer(closingNotifier) {
  return this.lift(new BufferOperator(closingNotifier));
}
exports.buffer = buffer;
var BufferOperator = function () {
  function BufferOperator(closingNotifier) {
    this.closingNotifier = closingNotifier;
  }
  BufferOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
  };
  return BufferOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSubscriber = function (_super) {
  __extends(BufferSubscriber, _super);
  function BufferSubscriber(destination, closingNotifier) {
    _super.call(this, destination);
    this.buffer = [];
    this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
  }
  BufferSubscriber.prototype._next = function (value) {
    this.buffer.push(value);
  };
  BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    var buffer = this.buffer;
    this.buffer = [];
    this.destination.next(buffer);
  };
  return BufferSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=buffer.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/bufferCount.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1837');
var bufferCount_1 = require('1838');
Observable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;
//# sourceMappingURL=bufferCount.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/bufferCount.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2098');
/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * <img src="./img/bufferCount.png" width="100%">
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * @example <caption>Emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>On every click, emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2, 1);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link pairwise}
 * @see {@link windowCount}
 *
 * @param {number} bufferSize The maximum size of the buffer emitted.
 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return {Observable<T[]>} An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */
function bufferCount(bufferSize, startBufferEvery) {
  if (startBufferEvery === void 0) {
    startBufferEvery = null;
  }
  return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));
}
exports.bufferCount = bufferCount;
var BufferCountOperator = function () {
  function BufferCountOperator(bufferSize, startBufferEvery) {
    this.bufferSize = bufferSize;
    this.startBufferEvery = startBufferEvery;
    if (!startBufferEvery || bufferSize === startBufferEvery) {
      this.subscriberClass = BufferCountSubscriber;
    } else {
      this.subscriberClass = BufferSkipCountSubscriber;
    }
  }
  BufferCountOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
  };
  return BufferCountOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferCountSubscriber = function (_super) {
  __extends(BufferCountSubscriber, _super);
  function BufferCountSubscriber(destination, bufferSize) {
    _super.call(this, destination);
    this.bufferSize = bufferSize;
    this.buffer = [];
  }
  BufferCountSubscriber.prototype._next = function (value) {
    var buffer = this.buffer;
    buffer.push(value);
    if (buffer.length == this.bufferSize) {
      this.destination.next(buffer);
      this.buffer = [];
    }
  };
  BufferCountSubscriber.prototype._complete = function () {
    var buffer = this.buffer;
    if (buffer.length > 0) {
      this.destination.next(buffer);
    }
    _super.prototype._complete.call(this);
  };
  return BufferCountSubscriber;
}(Subscriber_1.Subscriber);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSkipCountSubscriber = function (_super) {
  __extends(BufferSkipCountSubscriber, _super);
  function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
    _super.call(this, destination);
    this.bufferSize = bufferSize;
    this.startBufferEvery = startBufferEvery;
    this.buffers = [];
    this.count = 0;
  }
  BufferSkipCountSubscriber.prototype._next = function (value) {
    var _a = this,
        bufferSize = _a.bufferSize,
        startBufferEvery = _a.startBufferEvery,
        buffers = _a.buffers,
        count = _a.count;
    this.count++;
    if (count % startBufferEvery === 0) {
      buffers.push([]);
    }
    for (var i = buffers.length; i--;) {
      var buffer = buffers[i];
      buffer.push(value);
      if (buffer.length === bufferSize) {
        buffers.splice(i, 1);
        this.destination.next(buffer);
      }
    }
  };
  BufferSkipCountSubscriber.prototype._complete = function () {
    var _a = this,
        buffers = _a.buffers,
        destination = _a.destination;
    while (buffers.length > 0) {
      var buffer = buffers.shift();
      if (buffer.length > 0) {
        destination.next(buffer);
      }
    }
    _super.prototype._complete.call(this);
  };
  return BufferSkipCountSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=bufferCount.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/bufferTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1841');
var bufferTime_1 = require('1842');
Observable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;
//# sourceMappingURL=bufferTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/bufferTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = require('2107');
var Subscriber_1 = require('2108');
var isScheduler_1 = require('2109');
/* tslint:enable:max-line-length */
/**
 * Buffers the source Observable values for a specific time period.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * those arrays periodically in time.</span>
 *
 * <img src="./img/bufferTime.png" width="100%">
 *
 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
 * Unless the optional argument `bufferCreationInterval` is given, it emits and
 * resets the buffer every `bufferTimeSpan` milliseconds. If
 * `bufferCreationInterval` is given, this operator opens the buffer every
 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
 * buffer every `bufferTimeSpan` milliseconds. When the optional argument
 * `maxBufferSize` is specified, the buffer will be closed either after
 * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
 *
 * @example <caption>Every second, emit an array of the recent click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(1000);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(2000, 5000);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link windowTime}
 *
 * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
 * @param {number} [bufferCreationInterval] The interval at which to start new
 * buffers.
 * @param {number} [maxBufferSize] The maximum buffer size.
 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
 * intervals that determine buffer boundaries.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferTime
 * @owner Observable
 */
function bufferTime(bufferTimeSpan) {
  var length = arguments.length;
  var scheduler = async_1.async;
  if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
    scheduler = arguments[arguments.length - 1];
    length--;
  }
  var bufferCreationInterval = null;
  if (length >= 2) {
    bufferCreationInterval = arguments[1];
  }
  var maxBufferSize = Number.POSITIVE_INFINITY;
  if (length >= 3) {
    maxBufferSize = arguments[2];
  }
  return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
}
exports.bufferTime = bufferTime;
var BufferTimeOperator = function () {
  function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
    this.bufferTimeSpan = bufferTimeSpan;
    this.bufferCreationInterval = bufferCreationInterval;
    this.maxBufferSize = maxBufferSize;
    this.scheduler = scheduler;
  }
  BufferTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
  };
  return BufferTimeOperator;
}();
var Context = function () {
  function Context() {
    this.buffer = [];
  }
  return Context;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferTimeSubscriber = function (_super) {
  __extends(BufferTimeSubscriber, _super);
  function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
    _super.call(this, destination);
    this.bufferTimeSpan = bufferTimeSpan;
    this.bufferCreationInterval = bufferCreationInterval;
    this.maxBufferSize = maxBufferSize;
    this.scheduler = scheduler;
    this.contexts = [];
    var context = this.openContext();
    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
    if (this.timespanOnly) {
      var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
    } else {
      var closeState = { subscriber: this, context: context };
      var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };
      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
    }
  }
  BufferTimeSubscriber.prototype._next = function (value) {
    var contexts = this.contexts;
    var len = contexts.length;
    var filledBufferContext;
    for (var i = 0; i < len; i++) {
      var context = contexts[i];
      var buffer = context.buffer;
      buffer.push(value);
      if (buffer.length == this.maxBufferSize) {
        filledBufferContext = context;
      }
    }
    if (filledBufferContext) {
      this.onBufferFull(filledBufferContext);
    }
  };
  BufferTimeSubscriber.prototype._error = function (err) {
    this.contexts.length = 0;
    _super.prototype._error.call(this, err);
  };
  BufferTimeSubscriber.prototype._complete = function () {
    var _a = this,
        contexts = _a.contexts,
        destination = _a.destination;
    while (contexts.length > 0) {
      var context = contexts.shift();
      destination.next(context.buffer);
    }
    _super.prototype._complete.call(this);
  };
  BufferTimeSubscriber.prototype._unsubscribe = function () {
    this.contexts = null;
  };
  BufferTimeSubscriber.prototype.onBufferFull = function (context) {
    this.closeContext(context);
    var closeAction = context.closeAction;
    closeAction.unsubscribe();
    this.remove(closeAction);
    if (!this.closed && this.timespanOnly) {
      context = this.openContext();
      var bufferTimeSpan = this.bufferTimeSpan;
      var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
    }
  };
  BufferTimeSubscriber.prototype.openContext = function () {
    var context = new Context();
    this.contexts.push(context);
    return context;
  };
  BufferTimeSubscriber.prototype.closeContext = function (context) {
    this.destination.next(context.buffer);
    var contexts = this.contexts;
    var spliceIndex = contexts ? contexts.indexOf(context) : -1;
    if (spliceIndex >= 0) {
      contexts.splice(contexts.indexOf(context), 1);
    }
  };
  return BufferTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchBufferTimeSpanOnly(state) {
  var subscriber = state.subscriber;
  var prevContext = state.context;
  if (prevContext) {
    subscriber.closeContext(prevContext);
  }
  if (!subscriber.closed) {
    state.context = subscriber.openContext();
    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
  }
}
function dispatchBufferCreation(state) {
  var bufferCreationInterval = state.bufferCreationInterval,
      bufferTimeSpan = state.bufferTimeSpan,
      subscriber = state.subscriber,
      scheduler = state.scheduler;
  var context = subscriber.openContext();
  var action = this;
  if (!subscriber.closed) {
    subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
    action.schedule(state, bufferCreationInterval);
  }
}
function dispatchBufferClose(arg) {
  var subscriber = arg.subscriber,
      context = arg.context;
  subscriber.closeContext(context);
}
//# sourceMappingURL=bufferTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/bufferToggle.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1839');
var bufferToggle_1 = require('1840');
Observable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;
//# sourceMappingURL=bufferToggle.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/bufferToggle.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = require('2104');
var subscribeToResult_1 = require('2105');
var OuterSubscriber_1 = require('2106');
/**
 * Buffers the source Observable values starting from an emission from
 * `openings` and ending when the output of `closingSelector` emits.
 *
 * <span class="informal">Collects values from the past as an array. Starts
 * collecting only when `opening` emits, and calls the `closingSelector`
 * function to get an Observable that tells when to close the buffer.</span>
 *
 * <img src="./img/bufferToggle.png" width="100%">
 *
 * Buffers values from the source by opening the buffer via signals from an
 * Observable provided to `openings`, and closing and sending the buffers when
 * a Subscribable or Promise returned by the `closingSelector` function emits.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var buffered = clicks.bufferToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferWhen}
 * @see {@link windowToggle}
 *
 * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new
 * buffers.
 * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns a Subscribable or Promise,
 * which, when it emits, signals that the associated buffer should be emitted
 * and cleared.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferToggle
 * @owner Observable
 */
function bufferToggle(openings, closingSelector) {
  return this.lift(new BufferToggleOperator(openings, closingSelector));
}
exports.bufferToggle = bufferToggle;
var BufferToggleOperator = function () {
  function BufferToggleOperator(openings, closingSelector) {
    this.openings = openings;
    this.closingSelector = closingSelector;
  }
  BufferToggleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
  };
  return BufferToggleOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferToggleSubscriber = function (_super) {
  __extends(BufferToggleSubscriber, _super);
  function BufferToggleSubscriber(destination, openings, closingSelector) {
    _super.call(this, destination);
    this.openings = openings;
    this.closingSelector = closingSelector;
    this.contexts = [];
    this.add(subscribeToResult_1.subscribeToResult(this, openings));
  }
  BufferToggleSubscriber.prototype._next = function (value) {
    var contexts = this.contexts;
    var len = contexts.length;
    for (var i = 0; i < len; i++) {
      contexts[i].buffer.push(value);
    }
  };
  BufferToggleSubscriber.prototype._error = function (err) {
    var contexts = this.contexts;
    while (contexts.length > 0) {
      var context = contexts.shift();
      context.subscription.unsubscribe();
      context.buffer = null;
      context.subscription = null;
    }
    this.contexts = null;
    _super.prototype._error.call(this, err);
  };
  BufferToggleSubscriber.prototype._complete = function () {
    var contexts = this.contexts;
    while (contexts.length > 0) {
      var context = contexts.shift();
      this.destination.next(context.buffer);
      context.subscription.unsubscribe();
      context.buffer = null;
      context.subscription = null;
    }
    this.contexts = null;
    _super.prototype._complete.call(this);
  };
  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
  };
  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
    this.closeBuffer(innerSub.context);
  };
  BufferToggleSubscriber.prototype.openBuffer = function (value) {
    try {
      var closingSelector = this.closingSelector;
      var closingNotifier = closingSelector.call(this, value);
      if (closingNotifier) {
        this.trySubscribe(closingNotifier);
      }
    } catch (err) {
      this._error(err);
    }
  };
  BufferToggleSubscriber.prototype.closeBuffer = function (context) {
    var contexts = this.contexts;
    if (contexts && context) {
      var buffer = context.buffer,
          subscription = context.subscription;
      this.destination.next(buffer);
      contexts.splice(contexts.indexOf(context), 1);
      this.remove(subscription);
      subscription.unsubscribe();
    }
  };
  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
    var contexts = this.contexts;
    var buffer = [];
    var subscription = new Subscription_1.Subscription();
    var context = { buffer: buffer, subscription: subscription };
    contexts.push(context);
    var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
    if (!innerSubscription || innerSubscription.closed) {
      this.closeBuffer(context);
    } else {
      innerSubscription.context = context;
      this.add(innerSubscription);
      subscription.add(innerSubscription);
    }
  };
  return BufferToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=bufferToggle.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/bufferWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1843');
var bufferWhen_1 = require('1844');
Observable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;
//# sourceMappingURL=bufferWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/bufferWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = require('2099');
var tryCatch_1 = require('2100');
var errorObject_1 = require('2101');
var OuterSubscriber_1 = require('2102');
var subscribeToResult_1 = require('2103');
/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * <img src="./img/bufferWhen.png" width="100%">
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferWhen(() =>
 *   Rx.Observable.interval(1000 + Math.random() * 4000)
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link windowWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferWhen
 * @owner Observable
 */
function bufferWhen(closingSelector) {
  return this.lift(new BufferWhenOperator(closingSelector));
}
exports.bufferWhen = bufferWhen;
var BufferWhenOperator = function () {
  function BufferWhenOperator(closingSelector) {
    this.closingSelector = closingSelector;
  }
  BufferWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
  };
  return BufferWhenOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferWhenSubscriber = function (_super) {
  __extends(BufferWhenSubscriber, _super);
  function BufferWhenSubscriber(destination, closingSelector) {
    _super.call(this, destination);
    this.closingSelector = closingSelector;
    this.subscribing = false;
    this.openBuffer();
  }
  BufferWhenSubscriber.prototype._next = function (value) {
    this.buffer.push(value);
  };
  BufferWhenSubscriber.prototype._complete = function () {
    var buffer = this.buffer;
    if (buffer) {
      this.destination.next(buffer);
    }
    _super.prototype._complete.call(this);
  };
  BufferWhenSubscriber.prototype._unsubscribe = function () {
    this.buffer = null;
    this.subscribing = false;
  };
  BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.openBuffer();
  };
  BufferWhenSubscriber.prototype.notifyComplete = function () {
    if (this.subscribing) {
      this.complete();
    } else {
      this.openBuffer();
    }
  };
  BufferWhenSubscriber.prototype.openBuffer = function () {
    var closingSubscription = this.closingSubscription;
    if (closingSubscription) {
      this.remove(closingSubscription);
      closingSubscription.unsubscribe();
    }
    var buffer = this.buffer;
    if (this.buffer) {
      this.destination.next(buffer);
    }
    this.buffer = [];
    var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
    if (closingNotifier === errorObject_1.errorObject) {
      this.error(errorObject_1.errorObject.e);
    } else {
      closingSubscription = new Subscription_1.Subscription();
      this.closingSubscription = closingSubscription;
      this.add(closingSubscription);
      this.subscribing = true;
      closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
      this.subscribing = false;
    }
  };
  return BufferWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=bufferWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/catch.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1845');
var catch_1 = require('1846');
Observable_1.Observable.prototype.catch = catch_1._catch;
Observable_1.Observable.prototype._catch = catch_1._catch;
//# sourceMappingURL=catch.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/catch.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2110');
var subscribeToResult_1 = require('2111');
/**
 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
 *
 * <img src="./img/catch.png" width="100%">
 *
 * @example <caption>Continues with a different Observable when there's an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n == 4) {
 * 	     throw 'four!';
 *     }
 *	   return n;
 *   })
 *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, I, II, III, IV, V
 *
 * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n === 4) {
 * 	     throw 'four!';
 *     }
 * 	   return n;
 *   })
 *   .catch((err, caught) => caught)
 *   .take(30)
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, 1, 2, 3, ...
 *
 * @example <caption>Throws a new error when the source Observable throws an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 *     if (n == 4) {
 *       throw 'four!';
 *     }
 *     return n;
 *   })
 *   .catch(err => {
 *     throw 'error in source. Details: ' + err;
 *   })
 *   .subscribe(
 *     x => console.log(x),
 *     err => console.log(err)
 *   );
 *   // 1, 2, 3, error in source. Details: four!
 *
 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
 *  is returned by the `selector` will be used to continue the observable chain.
 * @return {Observable} An observable that originates from either the source or the observable returned by the
 *  catch `selector` function.
 * @method catch
 * @name catch
 * @owner Observable
 */
function _catch(selector) {
  var operator = new CatchOperator(selector);
  var caught = this.lift(operator);
  return operator.caught = caught;
}
exports._catch = _catch;
var CatchOperator = function () {
  function CatchOperator(selector) {
    this.selector = selector;
  }
  CatchOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
  };
  return CatchOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CatchSubscriber = function (_super) {
  __extends(CatchSubscriber, _super);
  function CatchSubscriber(destination, selector, caught) {
    _super.call(this, destination);
    this.selector = selector;
    this.caught = caught;
  }
  // NOTE: overriding `error` instead of `_error` because we don't want
  // to have this flag this subscriber as `isStopped`. We can mimic the
  // behavior of the RetrySubscriber (from the `retry` operator), where
  // we unsubscribe from our source chain, reset our Subscriber flags,
  // then subscribe to the selector result.
  CatchSubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var result = void 0;
      try {
        result = this.selector(err, this.caught);
      } catch (err2) {
        _super.prototype.error.call(this, err2);
        return;
      }
      this._unsubscribeAndRecycle();
      this.add(subscribeToResult_1.subscribeToResult(this, result));
    }
  };
  return CatchSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=catch.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/combineAll.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1847');
var combineAll_1 = require('1848');
Observable_1.Observable.prototype.combineAll = combineAll_1.combineAll;
//# sourceMappingURL=combineAll.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/combineAll.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var combineLatest_1 = require('2117');
/**
 * Converts a higher-order Observable into a first-order Observable by waiting
 * for the outer Observable to complete, then applying {@link combineLatest}.
 *
 * <span class="informal">Flattens an Observable-of-Observables by applying
 * {@link combineLatest} when the Observable-of-Observables completes.</span>
 *
 * <img src="./img/combineAll.png" width="100%">
 *
 * Takes an Observable of Observables, and collects all Observables from it.
 * Once the outer Observable completes, it subscribes to all collected
 * Observables and combines their values using the {@link combineLatest}
 * strategy, such that:
 * - Every time an inner Observable emits, the output Observable emits.
 * - When the returned observable emits, it emits all of the latest values by:
 *   - If a `project` function is provided, it is called with each recent value
 *     from each inner Observable in whatever order they arrived, and the result
 *     of the `project` function is what is emitted by the output Observable.
 *   - If there is no `project` function, an array of all of the most recent
 *     values is emitted by the output Observable.
 *
 * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev =>
 *   Rx.Observable.interval(Math.random()*2000).take(3)
 * ).take(2);
 * var result = higherOrder.combineAll();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineLatest}
 * @see {@link mergeAll}
 *
 * @param {function} [project] An optional function to map the most recent
 * values from each inner Observable into a new result. Takes each of the most
 * recent values from each collected inner Observable as arguments, in order.
 * @return {Observable} An Observable of projected results or arrays of recent
 * values.
 * @method combineAll
 * @owner Observable
 */
function combineAll(project) {
  return this.lift(new combineLatest_1.CombineLatestOperator(project));
}
exports.combineAll = combineAll;
//# sourceMappingURL=combineAll.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/combineLatest.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1849');
var combineLatest_1 = require('1850');
Observable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;
//# sourceMappingURL=combineLatest.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/concat.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1851');
var concat_1 = require('1852');
Observable_1.Observable.prototype.concat = concat_1.concat;
//# sourceMappingURL=concat.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/concatAll.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1853');
var concatAll_1 = require('1854');
Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
//# sourceMappingURL=concatAll.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/concatAll.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var mergeAll_1 = require('2116');
/* tslint:enable:max-line-length */
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
  return this.lift(new mergeAll_1.MergeAllOperator(1));
}
exports.concatAll = concatAll;
//# sourceMappingURL=concatAll.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/concatMap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1857');
var concatMap_1 = require('1858');
Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
//# sourceMappingURL=concatMap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/concatMap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var mergeMap_1 = require('2122');
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project, resultSelector) {
  return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
}
exports.concatMap = concatMap;
//# sourceMappingURL=concatMap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/mergeMap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var subscribeToResult_1 = require('2195');
var OuterSubscriber_1 = require('2196');
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
    resultSelector = null;
  }
  return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
}
exports.mergeMap = mergeMap;
var MergeMapOperator = function () {
  function MergeMapOperator(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    this.project = project;
    this.resultSelector = resultSelector;
    this.concurrent = concurrent;
  }
  MergeMapOperator.prototype.call = function (observer, source) {
    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
  };
  return MergeMapOperator;
}();
exports.MergeMapOperator = MergeMapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = function (_super) {
  __extends(MergeMapSubscriber, _super);
  function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    _super.call(this, destination);
    this.project = project;
    this.resultSelector = resultSelector;
    this.concurrent = concurrent;
    this.hasCompleted = false;
    this.buffer = [];
    this.active = 0;
    this.index = 0;
  }
  MergeMapSubscriber.prototype._next = function (value) {
    if (this.active < this.concurrent) {
      this._tryNext(value);
    } else {
      this.buffer.push(value);
    }
  };
  MergeMapSubscriber.prototype._tryNext = function (value) {
    var result;
    var index = this.index++;
    try {
      result = this.project(value, index);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.active++;
    this._innerSub(result, value, index);
  };
  MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
  };
  MergeMapSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.active === 0 && this.buffer.length === 0) {
      this.destination.complete();
    }
  };
  MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    if (this.resultSelector) {
      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
    } else {
      this.destination.next(innerValue);
    }
  };
  MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
    var result;
    try {
      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
    var buffer = this.buffer;
    this.remove(innerSub);
    this.active--;
    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      this.destination.complete();
    }
  };
  return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeMapSubscriber = MergeMapSubscriber;
//# sourceMappingURL=mergeMap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/concatMapTo.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1859');
var concatMapTo_1 = require('1860');
Observable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;
//# sourceMappingURL=concatMapTo.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/concatMapTo.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var mergeMapTo_1 = require('2123');
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in a serialized fashion on the output Observable.
 *
 * <span class="informal">It's like {@link concatMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/concatMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. Each new `innerObservable`
 * instance emitted on the output Observable is concatenated with the previous
 * `innerObservable` instance.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter
 * set to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link mergeMapTo}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An observable of values merged together by joining the
 * passed observable with itself, one after the other, for each value emitted
 * from the source.
 * @method concatMapTo
 * @owner Observable
 */
function concatMapTo(innerObservable, resultSelector) {
  return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));
}
exports.concatMapTo = concatMapTo;
//# sourceMappingURL=concatMapTo.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/mergeMapTo.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2193');
var subscribeToResult_1 = require('2194');
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in the output Observable.
 *
 * <span class="informal">It's like {@link mergeMap}, but maps each value always
 * to the same inner Observable.</span>
 *
 * <img src="./img/mergeMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then merges those resulting Observables into one
 * single Observable, which is the output Observable.
 *
 * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable.
 * @method mergeMapTo
 * @owner Observable
 */
function mergeMapTo(innerObservable, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
    resultSelector = null;
  }
  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));
}
exports.mergeMapTo = mergeMapTo;
// TODO: Figure out correct signature here: an Operator<Observable<T>, R>
//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>
var MergeMapToOperator = function () {
  function MergeMapToOperator(ish, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    this.ish = ish;
    this.resultSelector = resultSelector;
    this.concurrent = concurrent;
  }
  MergeMapToOperator.prototype.call = function (observer, source) {
    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));
  };
  return MergeMapToOperator;
}();
exports.MergeMapToOperator = MergeMapToOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapToSubscriber = function (_super) {
  __extends(MergeMapToSubscriber, _super);
  function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    _super.call(this, destination);
    this.ish = ish;
    this.resultSelector = resultSelector;
    this.concurrent = concurrent;
    this.hasCompleted = false;
    this.buffer = [];
    this.active = 0;
    this.index = 0;
  }
  MergeMapToSubscriber.prototype._next = function (value) {
    if (this.active < this.concurrent) {
      var resultSelector = this.resultSelector;
      var index = this.index++;
      var ish = this.ish;
      var destination = this.destination;
      this.active++;
      this._innerSub(ish, destination, resultSelector, value, index);
    } else {
      this.buffer.push(value);
    }
  };
  MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {
    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
  };
  MergeMapToSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.active === 0 && this.buffer.length === 0) {
      this.destination.complete();
    }
  };
  MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    var _a = this,
        resultSelector = _a.resultSelector,
        destination = _a.destination;
    if (resultSelector) {
      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
    } else {
      destination.next(innerValue);
    }
  };
  MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
    var _a = this,
        resultSelector = _a.resultSelector,
        destination = _a.destination;
    var result;
    try {
      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
    } catch (err) {
      destination.error(err);
      return;
    }
    destination.next(result);
  };
  MergeMapToSubscriber.prototype.notifyError = function (err) {
    this.destination.error(err);
  };
  MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {
    var buffer = this.buffer;
    this.remove(innerSub);
    this.active--;
    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      this.destination.complete();
    }
  };
  return MergeMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeMapToSubscriber = MergeMapToSubscriber;
//# sourceMappingURL=mergeMapTo.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/count.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1861');
var count_1 = require('1862');
Observable_1.Observable.prototype.count = count_1.count;
//# sourceMappingURL=count.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/count.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2124');
/**
 * Counts the number of emissions on the source and emits that number when the
 * source completes.
 *
 * <span class="informal">Tells how many values were emitted, when the source
 * completes.</span>
 *
 * <img src="./img/count.png" width="100%">
 *
 * `count` transforms an Observable that emits values into an Observable that
 * emits a single value that represents the number of values emitted by the
 * source Observable. If the source Observable terminates with an error, `count`
 * will pass this error notification along without emitting a value first. If
 * the source Observable does not terminate at all, `count` will neither emit
 * a value nor terminate. This operator takes an optional `predicate` function
 * as argument, in which case the output emission will represent the number of
 * source values that matched `true` with the `predicate`.
 *
 * @example <caption>Counts how many seconds have passed before the first click happened</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var secondsBeforeClick = seconds.takeUntil(clicks);
 * var result = secondsBeforeClick.count();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>
 * var numbers = Rx.Observable.range(1, 7);
 * var result = numbers.count(i => i % 2 === 1);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 4
 *
 * @see {@link max}
 * @see {@link min}
 * @see {@link reduce}
 *
 * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A
 * boolean function to select what values are to be counted. It is provided with
 * arguments of:
 * - `value`: the value from the source Observable.
 * - `index`: the (zero-based) "index" of the value from the source Observable.
 * - `source`: the source Observable instance itself.
 * @return {Observable} An Observable of one number that represents the count as
 * described above.
 * @method count
 * @owner Observable
 */
function count(predicate) {
  return this.lift(new CountOperator(predicate, this));
}
exports.count = count;
var CountOperator = function () {
  function CountOperator(predicate, source) {
    this.predicate = predicate;
    this.source = source;
  }
  CountOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
  };
  return CountOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CountSubscriber = function (_super) {
  __extends(CountSubscriber, _super);
  function CountSubscriber(destination, predicate, source) {
    _super.call(this, destination);
    this.predicate = predicate;
    this.source = source;
    this.count = 0;
    this.index = 0;
  }
  CountSubscriber.prototype._next = function (value) {
    if (this.predicate) {
      this._tryPredicate(value);
    } else {
      this.count++;
    }
  };
  CountSubscriber.prototype._tryPredicate = function (value) {
    var result;
    try {
      result = this.predicate(value, this.index++, this.source);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (result) {
      this.count++;
    }
  };
  CountSubscriber.prototype._complete = function () {
    this.destination.next(this.count);
    this.destination.complete();
  };
  return CountSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=count.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/dematerialize.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1863');
var dematerialize_1 = require('1864');
Observable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;
//# sourceMappingURL=dematerialize.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/dematerialize.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2125');
/**
 * Converts an Observable of {@link Notification} objects into the emissions
 * that they represent.
 *
 * <span class="informal">Unwraps {@link Notification} objects as actual `next`,
 * `error` and `complete` emissions. The opposite of {@link materialize}.</span>
 *
 * <img src="./img/dematerialize.png" width="100%">
 *
 * `dematerialize` is assumed to operate an Observable that only emits
 * {@link Notification} objects as `next` emissions, and does not emit any
 * `error`. Such Observable is the output of a `materialize` operation. Those
 * notifications are then unwrapped using the metadata they contain, and emitted
 * as `next`, `error`, and `complete` on the output Observable.
 *
 * Use this operator in conjunction with {@link materialize}.
 *
 * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>
 * var notifA = new Rx.Notification('N', 'A');
 * var notifB = new Rx.Notification('N', 'B');
 * var notifE = new Rx.Notification('E', void 0,
 *   new TypeError('x.toUpperCase is not a function')
 * );
 * var materialized = Rx.Observable.of(notifA, notifB, notifE);
 * var upperCase = materialized.dematerialize();
 * upperCase.subscribe(x => console.log(x), e => console.error(e));
 *
 * // Results in:
 * // A
 * // B
 * // TypeError: x.toUpperCase is not a function
 *
 * @see {@link Notification}
 * @see {@link materialize}
 *
 * @return {Observable} An Observable that emits items and notifications
 * embedded in Notification objects emitted by the source Observable.
 * @method dematerialize
 * @owner Observable
 */
function dematerialize() {
  return this.lift(new DeMaterializeOperator());
}
exports.dematerialize = dematerialize;
var DeMaterializeOperator = function () {
  function DeMaterializeOperator() {}
  DeMaterializeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DeMaterializeSubscriber(subscriber));
  };
  return DeMaterializeOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DeMaterializeSubscriber = function (_super) {
  __extends(DeMaterializeSubscriber, _super);
  function DeMaterializeSubscriber(destination) {
    _super.call(this, destination);
  }
  DeMaterializeSubscriber.prototype._next = function (value) {
    value.observe(this.destination);
  };
  return DeMaterializeSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=dematerialize.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/debounce.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1865');
var debounce_1 = require('1866');
Observable_1.Observable.prototype.debounce = debounce_1.debounce;
//# sourceMappingURL=debounce.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/debounce.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2126');
var subscribeToResult_1 = require('2127');
/**
 * Emits a value from the source Observable only after a particular time span
 * determined by another Observable has passed without another source emission.
 *
 * <span class="informal">It's like {@link debounceTime}, but the time span of
 * emission silence is determined by a second Observable.</span>
 *
 * <img src="./img/debounce.png" width="100%">
 *
 * `debounce` delays values emitted by the source Observable, but drops previous
 * pending delayed emissions if a new value arrives on the source Observable.
 * This operator keeps track of the most recent value from the source
 * Observable, and spawns a duration Observable by calling the
 * `durationSelector` function. The value is emitted only when the duration
 * Observable emits a value or completes, and if no other value was emitted on
 * the source Observable since the duration Observable was spawned. If a new
 * value appears before the duration Observable emits, the previous value will
 * be dropped and will not be emitted on the output Observable.
 *
 * Like {@link debounceTime}, this is a rate-limiting operator, and also a
 * delay-like operator since output emissions do not necessarily occur at the
 * same time as they did on the source Observable.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounce(() => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the timeout
 * duration for each source value, returned as an Observable or a Promise.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified duration Observable returned by
 * `durationSelector`, and may drop some values if they occur too frequently.
 * @method debounce
 * @owner Observable
 */
function debounce(durationSelector) {
  return this.lift(new DebounceOperator(durationSelector));
}
exports.debounce = debounce;
var DebounceOperator = function () {
  function DebounceOperator(durationSelector) {
    this.durationSelector = durationSelector;
  }
  DebounceOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
  };
  return DebounceOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceSubscriber = function (_super) {
  __extends(DebounceSubscriber, _super);
  function DebounceSubscriber(destination, durationSelector) {
    _super.call(this, destination);
    this.durationSelector = durationSelector;
    this.hasValue = false;
    this.durationSubscription = null;
  }
  DebounceSubscriber.prototype._next = function (value) {
    try {
      var result = this.durationSelector.call(this, value);
      if (result) {
        this._tryNext(value, result);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  DebounceSubscriber.prototype._complete = function () {
    this.emitValue();
    this.destination.complete();
  };
  DebounceSubscriber.prototype._tryNext = function (value, duration) {
    var subscription = this.durationSubscription;
    this.value = value;
    this.hasValue = true;
    if (subscription) {
      subscription.unsubscribe();
      this.remove(subscription);
    }
    subscription = subscribeToResult_1.subscribeToResult(this, duration);
    if (!subscription.closed) {
      this.add(this.durationSubscription = subscription);
    }
  };
  DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.emitValue();
  };
  DebounceSubscriber.prototype.notifyComplete = function () {
    this.emitValue();
  };
  DebounceSubscriber.prototype.emitValue = function () {
    if (this.hasValue) {
      var value = this.value;
      var subscription = this.durationSubscription;
      if (subscription) {
        this.durationSubscription = null;
        subscription.unsubscribe();
        this.remove(subscription);
      }
      this.value = null;
      this.hasValue = false;
      _super.prototype._next.call(this, value);
    }
  };
  return DebounceSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=debounce.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/debounceTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1867');
var debounceTime_1 = require('1868');
Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
//# sourceMappingURL=debounceTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/debounceTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2128');
var async_1 = require('2129');
/**
 * Emits a value from the source Observable only after a particular time span
 * has passed without another source emission.
 *
 * <span class="informal">It's like {@link delay}, but passes only the most
 * recent value from each burst of emissions.</span>
 *
 * <img src="./img/debounceTime.png" width="100%">
 *
 * `debounceTime` delays values emitted by the source Observable, but drops
 * previous pending delayed emissions if a new value arrives on the source
 * Observable. This operator keeps track of the most recent value from the
 * source Observable, and emits that only when `dueTime` enough time has passed
 * without any other value appearing on the source Observable. If a new value
 * appears before `dueTime` silence occurs, the previous value will be dropped
 * and will not be emitted on the output Observable.
 *
 * This is a rate-limiting operator, because it is impossible for more than one
 * value to be emitted in any time window of duration `dueTime`, but it is also
 * a delay-like operator since output emissions do not occur at the same time as
 * they did on the source Observable. Optionally takes a {@link IScheduler} for
 * managing timers.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounceTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} dueTime The timeout duration in milliseconds (or the time
 * unit determined internally by the optional `scheduler`) for the window of
 * time required to wait for emission silence before emitting the most recent
 * source value.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the timeout for each value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified `dueTime`, and may drop some values if they occur
 * too frequently.
 * @method debounceTime
 * @owner Observable
 */
function debounceTime(dueTime, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1.async;
  }
  return this.lift(new DebounceTimeOperator(dueTime, scheduler));
}
exports.debounceTime = debounceTime;
var DebounceTimeOperator = function () {
  function DebounceTimeOperator(dueTime, scheduler) {
    this.dueTime = dueTime;
    this.scheduler = scheduler;
  }
  DebounceTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
  };
  return DebounceTimeOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceTimeSubscriber = function (_super) {
  __extends(DebounceTimeSubscriber, _super);
  function DebounceTimeSubscriber(destination, dueTime, scheduler) {
    _super.call(this, destination);
    this.dueTime = dueTime;
    this.scheduler = scheduler;
    this.debouncedSubscription = null;
    this.lastValue = null;
    this.hasValue = false;
  }
  DebounceTimeSubscriber.prototype._next = function (value) {
    this.clearDebounce();
    this.lastValue = value;
    this.hasValue = true;
    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
  };
  DebounceTimeSubscriber.prototype._complete = function () {
    this.debouncedNext();
    this.destination.complete();
  };
  DebounceTimeSubscriber.prototype.debouncedNext = function () {
    this.clearDebounce();
    if (this.hasValue) {
      this.destination.next(this.lastValue);
      this.lastValue = null;
      this.hasValue = false;
    }
  };
  DebounceTimeSubscriber.prototype.clearDebounce = function () {
    var debouncedSubscription = this.debouncedSubscription;
    if (debouncedSubscription !== null) {
      this.remove(debouncedSubscription);
      debouncedSubscription.unsubscribe();
      this.debouncedSubscription = null;
    }
  };
  return DebounceTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNext(subscriber) {
  subscriber.debouncedNext();
}
//# sourceMappingURL=debounceTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/defaultIfEmpty.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1869');
var defaultIfEmpty_1 = require('1870');
Observable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
//# sourceMappingURL=defaultIfEmpty.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/defaultIfEmpty.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2134');
/* tslint:enable:max-line-length */
/**
 * Emits a given value if the source Observable completes without emitting any
 * `next` value, otherwise mirrors the source Observable.
 *
 * <span class="informal">If the source Observable turns out to be empty, then
 * this operator will emit a default value.</span>
 *
 * <img src="./img/defaultIfEmpty.png" width="100%">
 *
 * `defaultIfEmpty` emits the values emitted by the source Observable or a
 * specified default value if the source Observable is empty (completes without
 * having emitted any `next` value).
 *
 * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
 * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link empty}
 * @see {@link last}
 *
 * @param {any} [defaultValue=null] The default value used if the source
 * Observable is empty.
 * @return {Observable} An Observable that emits either the specified
 * `defaultValue` if the source Observable emits no items, or the values emitted
 * by the source Observable.
 * @method defaultIfEmpty
 * @owner Observable
 */
function defaultIfEmpty(defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = null;
  }
  return this.lift(new DefaultIfEmptyOperator(defaultValue));
}
exports.defaultIfEmpty = defaultIfEmpty;
var DefaultIfEmptyOperator = function () {
  function DefaultIfEmptyOperator(defaultValue) {
    this.defaultValue = defaultValue;
  }
  DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
  };
  return DefaultIfEmptyOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DefaultIfEmptySubscriber = function (_super) {
  __extends(DefaultIfEmptySubscriber, _super);
  function DefaultIfEmptySubscriber(destination, defaultValue) {
    _super.call(this, destination);
    this.defaultValue = defaultValue;
    this.isEmpty = true;
  }
  DefaultIfEmptySubscriber.prototype._next = function (value) {
    this.isEmpty = false;
    this.destination.next(value);
  };
  DefaultIfEmptySubscriber.prototype._complete = function () {
    if (this.isEmpty) {
      this.destination.next(this.defaultValue);
    }
    this.destination.complete();
  };
  return DefaultIfEmptySubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=defaultIfEmpty.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/delay.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1871');
var delay_1 = require('1872');
Observable_1.Observable.prototype.delay = delay_1.delay;
//# sourceMappingURL=delay.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/delay.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = require('2130');
var isDate_1 = require('2131');
var Subscriber_1 = require('2132');
var Notification_1 = require('2133');
/**
 * Delays the emission of items from the source Observable by a given timeout or
 * until a given Date.
 *
 * <span class="informal">Time shifts each item by some specified amount of
 * milliseconds.</span>
 *
 * <img src="./img/delay.png" width="100%">
 *
 * If the delay argument is a Number, this operator time shifts the source
 * Observable by that amount of time expressed in milliseconds. The relative
 * time intervals between the values are preserved.
 *
 * If the delay argument is a Date, this operator time shifts the start of the
 * Observable execution until the given date occurs.
 *
 * @example <caption>Delay each click by one second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @example <caption>Delay all clicks until a future date happens</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var date = new Date('March 15, 2050 12:00:00'); // in the future
 * var delayedClicks = clicks.delay(date); // click emitted only after that date
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 *
 * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
 * a `Date` until which the emission of the source items is delayed.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for
 * managing the timers that handle the time-shift for each item.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified timeout or Date.
 * @method delay
 * @owner Observable
 */
function delay(delay, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1.async;
  }
  var absoluteDelay = isDate_1.isDate(delay);
  var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
  return this.lift(new DelayOperator(delayFor, scheduler));
}
exports.delay = delay;
var DelayOperator = function () {
  function DelayOperator(delay, scheduler) {
    this.delay = delay;
    this.scheduler = scheduler;
  }
  DelayOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
  };
  return DelayOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelaySubscriber = function (_super) {
  __extends(DelaySubscriber, _super);
  function DelaySubscriber(destination, delay, scheduler) {
    _super.call(this, destination);
    this.delay = delay;
    this.scheduler = scheduler;
    this.queue = [];
    this.active = false;
    this.errored = false;
  }
  DelaySubscriber.dispatch = function (state) {
    var source = state.source;
    var queue = source.queue;
    var scheduler = state.scheduler;
    var destination = state.destination;
    while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
      queue.shift().notification.observe(destination);
    }
    if (queue.length > 0) {
      var delay_1 = Math.max(0, queue[0].time - scheduler.now());
      this.schedule(state, delay_1);
    } else {
      source.active = false;
    }
  };
  DelaySubscriber.prototype._schedule = function (scheduler) {
    this.active = true;
    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
      source: this, destination: this.destination, scheduler: scheduler
    }));
  };
  DelaySubscriber.prototype.scheduleNotification = function (notification) {
    if (this.errored === true) {
      return;
    }
    var scheduler = this.scheduler;
    var message = new DelayMessage(scheduler.now() + this.delay, notification);
    this.queue.push(message);
    if (this.active === false) {
      this._schedule(scheduler);
    }
  };
  DelaySubscriber.prototype._next = function (value) {
    this.scheduleNotification(Notification_1.Notification.createNext(value));
  };
  DelaySubscriber.prototype._error = function (err) {
    this.errored = true;
    this.queue = [];
    this.destination.error(err);
  };
  DelaySubscriber.prototype._complete = function () {
    this.scheduleNotification(Notification_1.Notification.createComplete());
  };
  return DelaySubscriber;
}(Subscriber_1.Subscriber);
var DelayMessage = function () {
  function DelayMessage(time, notification) {
    this.time = time;
    this.notification = notification;
  }
  return DelayMessage;
}();
//# sourceMappingURL=delay.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/delayWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1875');
var delayWhen_1 = require('1876');
Observable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;
//# sourceMappingURL=delayWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/delayWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2138');
var Observable_1 = require('2139');
var OuterSubscriber_1 = require('2140');
var subscribeToResult_1 = require('2141');
/**
 * Delays the emission of items from the source Observable by a given time span
 * determined by the emissions of another Observable.
 *
 * <span class="informal">It's like {@link delay}, but the time span of the
 * delay duration is determined by a second Observable.</span>
 *
 * <img src="./img/delayWhen.png" width="100%">
 *
 * `delayWhen` time shifts each emitted value from the source Observable by a
 * time span determined by another Observable. When the source emits a value,
 * the `delayDurationSelector` function is called with the source value as
 * argument, and should return an Observable, called the "duration" Observable.
 * The source value is emitted on the output Observable only when the duration
 * Observable emits a value or completes.
 *
 * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which
 * is an Observable. When `subscriptionDelay` emits its first value or
 * completes, the source Observable is subscribed to and starts behaving like
 * described in the previous paragraph. If `subscriptionDelay` is not provided,
 * `delayWhen` will subscribe to the source Observable as soon as the output
 * Observable is subscribed.
 *
 * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delayWhen(event =>
 *   Rx.Observable.interval(Math.random() * 5000)
 * );
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounce}
 * @see {@link delay}
 *
 * @param {function(value: T): Observable} delayDurationSelector A function that
 * returns an Observable for each value emitted by the source Observable, which
 * is then used to delay the emission of that item on the output Observable
 * until the Observable returned from this function emits a value.
 * @param {Observable} subscriptionDelay An Observable that triggers the
 * subscription to the source Observable once it emits any value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by an amount of time specified by the Observable returned by
 * `delayDurationSelector`.
 * @method delayWhen
 * @owner Observable
 */
function delayWhen(delayDurationSelector, subscriptionDelay) {
  if (subscriptionDelay) {
    return new SubscriptionDelayObservable(this, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));
  }
  return this.lift(new DelayWhenOperator(delayDurationSelector));
}
exports.delayWhen = delayWhen;
var DelayWhenOperator = function () {
  function DelayWhenOperator(delayDurationSelector) {
    this.delayDurationSelector = delayDurationSelector;
  }
  DelayWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
  };
  return DelayWhenOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelayWhenSubscriber = function (_super) {
  __extends(DelayWhenSubscriber, _super);
  function DelayWhenSubscriber(destination, delayDurationSelector) {
    _super.call(this, destination);
    this.delayDurationSelector = delayDurationSelector;
    this.completed = false;
    this.delayNotifierSubscriptions = [];
    this.values = [];
  }
  DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.destination.next(outerValue);
    this.removeSubscription(innerSub);
    this.tryComplete();
  };
  DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
    this._error(error);
  };
  DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
    var value = this.removeSubscription(innerSub);
    if (value) {
      this.destination.next(value);
    }
    this.tryComplete();
  };
  DelayWhenSubscriber.prototype._next = function (value) {
    try {
      var delayNotifier = this.delayDurationSelector(value);
      if (delayNotifier) {
        this.tryDelay(delayNotifier, value);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  DelayWhenSubscriber.prototype._complete = function () {
    this.completed = true;
    this.tryComplete();
  };
  DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
    subscription.unsubscribe();
    var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
    var value = null;
    if (subscriptionIdx !== -1) {
      value = this.values[subscriptionIdx];
      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
      this.values.splice(subscriptionIdx, 1);
    }
    return value;
  };
  DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
    var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
    if (notifierSubscription && !notifierSubscription.closed) {
      this.add(notifierSubscription);
      this.delayNotifierSubscriptions.push(notifierSubscription);
    }
    this.values.push(value);
  };
  DelayWhenSubscriber.prototype.tryComplete = function () {
    if (this.completed && this.delayNotifierSubscriptions.length === 0) {
      this.destination.complete();
    }
  };
  return DelayWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelayObservable = function (_super) {
  __extends(SubscriptionDelayObservable, _super);
  function SubscriptionDelayObservable(source, subscriptionDelay) {
    _super.call(this);
    this.source = source;
    this.subscriptionDelay = subscriptionDelay;
  }
  SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
  };
  return SubscriptionDelayObservable;
}(Observable_1.Observable);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelaySubscriber = function (_super) {
  __extends(SubscriptionDelaySubscriber, _super);
  function SubscriptionDelaySubscriber(parent, source) {
    _super.call(this);
    this.parent = parent;
    this.source = source;
    this.sourceSubscribed = false;
  }
  SubscriptionDelaySubscriber.prototype._next = function (unused) {
    this.subscribeToSource();
  };
  SubscriptionDelaySubscriber.prototype._error = function (err) {
    this.unsubscribe();
    this.parent.error(err);
  };
  SubscriptionDelaySubscriber.prototype._complete = function () {
    this.subscribeToSource();
  };
  SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
    if (!this.sourceSubscribed) {
      this.sourceSubscribed = true;
      this.unsubscribe();
      this.source.subscribe(this.parent);
    }
  };
  return SubscriptionDelaySubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=delayWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/distinct.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1873');
var distinct_1 = require('1874');
Observable_1.Observable.prototype.distinct = distinct_1.distinct;
//# sourceMappingURL=distinct.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/distinct.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2135');
var subscribeToResult_1 = require('2136');
var Set_1 = require('2137');
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)
 *   .distinct()
 *   .subscribe(x => console.log(x)); // 1, 2, 3, 4
 *
 * @example <caption>An example using a keySelector function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     .distinct((p: Person) => p.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 *
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [keySelector] Optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
function distinct(keySelector, flushes) {
  return this.lift(new DistinctOperator(keySelector, flushes));
}
exports.distinct = distinct;
var DistinctOperator = function () {
  function DistinctOperator(keySelector, flushes) {
    this.keySelector = keySelector;
    this.flushes = flushes;
  }
  DistinctOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
  };
  return DistinctOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctSubscriber = function (_super) {
  __extends(DistinctSubscriber, _super);
  function DistinctSubscriber(destination, keySelector, flushes) {
    _super.call(this, destination);
    this.keySelector = keySelector;
    this.values = new Set_1.Set();
    if (flushes) {
      this.add(subscribeToResult_1.subscribeToResult(this, flushes));
    }
  }
  DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.values.clear();
  };
  DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
    this._error(error);
  };
  DistinctSubscriber.prototype._next = function (value) {
    if (this.keySelector) {
      this._useKeySelector(value);
    } else {
      this._finalizeNext(value, value);
    }
  };
  DistinctSubscriber.prototype._useKeySelector = function (value) {
    var key;
    var destination = this.destination;
    try {
      key = this.keySelector(value);
    } catch (err) {
      destination.error(err);
      return;
    }
    this._finalizeNext(key, value);
  };
  DistinctSubscriber.prototype._finalizeNext = function (key, value) {
    var values = this.values;
    if (!values.has(key)) {
      values.add(key);
      this.destination.next(value);
    }
  };
  return DistinctSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.DistinctSubscriber = DistinctSubscriber;
//# sourceMappingURL=distinct.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/Set.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('2377');
function minimalSetImpl() {
  // THIS IS NOT a full impl of Set, this is just the minimum
  // bits of functionality we need for this library.
  return function () {
    function MinimalSet() {
      this._values = [];
    }
    MinimalSet.prototype.add = function (value) {
      if (!this.has(value)) {
        this._values.push(value);
      }
    };
    MinimalSet.prototype.has = function (value) {
      return this._values.indexOf(value) !== -1;
    };
    Object.defineProperty(MinimalSet.prototype, "size", {
      get: function () {
        return this._values.length;
      },
      enumerable: true,
      configurable: true
    });
    MinimalSet.prototype.clear = function () {
      this._values.length = 0;
    };
    return MinimalSet;
  }();
}
exports.minimalSetImpl = minimalSetImpl;
exports.Set = root_1.root.Set || minimalSetImpl();
//# sourceMappingURL=Set.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/distinctUntilChanged.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1877');
var distinctUntilChanged_1 = require('1878');
Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
//# sourceMappingURL=distinctUntilChanged.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/distinctUntilChanged.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2143');
var tryCatch_1 = require('2144');
var errorObject_1 = require('2145');
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)
 *   .distinctUntilChanged()
 *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4
 *
 * @example <caption>An example using a compare function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinctUntilChanged
 * @owner Observable
 */
function distinctUntilChanged(compare, keySelector) {
  return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
}
exports.distinctUntilChanged = distinctUntilChanged;
var DistinctUntilChangedOperator = function () {
  function DistinctUntilChangedOperator(compare, keySelector) {
    this.compare = compare;
    this.keySelector = keySelector;
  }
  DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
  };
  return DistinctUntilChangedOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctUntilChangedSubscriber = function (_super) {
  __extends(DistinctUntilChangedSubscriber, _super);
  function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
    _super.call(this, destination);
    this.keySelector = keySelector;
    this.hasKey = false;
    if (typeof compare === 'function') {
      this.compare = compare;
    }
  }
  DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
    return x === y;
  };
  DistinctUntilChangedSubscriber.prototype._next = function (value) {
    var keySelector = this.keySelector;
    var key = value;
    if (keySelector) {
      key = tryCatch_1.tryCatch(this.keySelector)(value);
      if (key === errorObject_1.errorObject) {
        return this.destination.error(errorObject_1.errorObject.e);
      }
    }
    var result = false;
    if (this.hasKey) {
      result = tryCatch_1.tryCatch(this.compare)(this.key, key);
      if (result === errorObject_1.errorObject) {
        return this.destination.error(errorObject_1.errorObject.e);
      }
    } else {
      this.hasKey = true;
    }
    if (Boolean(result) === false) {
      this.key = key;
      this.destination.next(value);
    }
  };
  return DistinctUntilChangedSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=distinctUntilChanged.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/distinctUntilKeyChanged.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1879');
var distinctUntilKeyChanged_1 = require('1880');
Observable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
//# sourceMappingURL=distinctUntilKeyChanged.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/distinctUntilKeyChanged.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var distinctUntilChanged_1 = require('2142');
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
 * using a property accessed by using the key provided to check if the two items are distinct.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>An example comparing the name of persons</caption>
 *
 *  interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'},
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilKeyChanged('name')
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @example <caption>An example comparing the first letters of the name</caption>
 *
 * interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo1'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo2'},
 *     { age: 6, name: 'Foo3'})
 *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo1' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo2' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 *
 * @param {string} key String key for object property lookup on each item.
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.
 * @method distinctUntilKeyChanged
 * @owner Observable
 */
function distinctUntilKeyChanged(key, compare) {
  return distinctUntilChanged_1.distinctUntilChanged.call(this, function (x, y) {
    if (compare) {
      return compare(x[key], y[key]);
    }
    return x[key] === y[key];
  });
}
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
//# sourceMappingURL=distinctUntilKeyChanged.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/do.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1883');
var do_1 = require('1884');
Observable_1.Observable.prototype.do = do_1._do;
Observable_1.Observable.prototype._do = do_1._do;
//# sourceMappingURL=do.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/do.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2148');
/* tslint:enable:max-line-length */
/**
 * Perform a side effect for every emission on the source Observable, but return
 * an Observable that is identical to the source.
 *
 * <span class="informal">Intercepts each emission on the source and runs a
 * function, but returns an output which is identical to the source as long as errors don't occur.</span>
 *
 * <img src="./img/do.png" width="100%">
 *
 * Returns a mirrored Observable of the source Observable, but modified so that
 * the provided Observer is called to perform a side effect for every value,
 * error, and completion emitted by the source. Any errors that are thrown in
 * the aforementioned Observer or handlers are safely sent down the error path
 * of the output Observable.
 *
 * This operator is useful for debugging your Observables for the correct values
 * or performing other side effects.
 *
 * Note: this is different to a `subscribe` on the Observable. If the Observable
 * returned by `do` is not subscribed, the side effects specified by the
 * Observer will never happen. `do` therefore simply spies on existing
 * execution, it does not trigger an execution to happen like `subscribe` does.
 *
 * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks
 *   .do(ev => console.log(ev))
 *   .map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link map}
 * @see {@link subscribe}
 *
 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
 * callback for `next`.
 * @param {function} [error] Callback for errors in the source.
 * @param {function} [complete] Callback for the completion of the source.
 * @return {Observable} An Observable identical to the source, but runs the
 * specified Observer or callback(s) for each item.
 * @method do
 * @name do
 * @owner Observable
 */
function _do(nextOrObserver, error, complete) {
  return this.lift(new DoOperator(nextOrObserver, error, complete));
}
exports._do = _do;
var DoOperator = function () {
  function DoOperator(nextOrObserver, error, complete) {
    this.nextOrObserver = nextOrObserver;
    this.error = error;
    this.complete = complete;
  }
  DoOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
  };
  return DoOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DoSubscriber = function (_super) {
  __extends(DoSubscriber, _super);
  function DoSubscriber(destination, nextOrObserver, error, complete) {
    _super.call(this, destination);
    var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
    safeSubscriber.syncErrorThrowable = true;
    this.add(safeSubscriber);
    this.safeSubscriber = safeSubscriber;
  }
  DoSubscriber.prototype._next = function (value) {
    var safeSubscriber = this.safeSubscriber;
    safeSubscriber.next(value);
    if (safeSubscriber.syncErrorThrown) {
      this.destination.error(safeSubscriber.syncErrorValue);
    } else {
      this.destination.next(value);
    }
  };
  DoSubscriber.prototype._error = function (err) {
    var safeSubscriber = this.safeSubscriber;
    safeSubscriber.error(err);
    if (safeSubscriber.syncErrorThrown) {
      this.destination.error(safeSubscriber.syncErrorValue);
    } else {
      this.destination.error(err);
    }
  };
  DoSubscriber.prototype._complete = function () {
    var safeSubscriber = this.safeSubscriber;
    safeSubscriber.complete();
    if (safeSubscriber.syncErrorThrown) {
      this.destination.error(safeSubscriber.syncErrorValue);
    } else {
      this.destination.complete();
    }
  };
  return DoSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=do.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/exhaust.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1881');
var exhaust_1 = require('1882');
Observable_1.Observable.prototype.exhaust = exhaust_1.exhaust;
//# sourceMappingURL=exhaust.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/exhaust.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2146');
var subscribeToResult_1 = require('2147');
/**
 * Converts a higher-order Observable into a first-order Observable by dropping
 * inner Observables while the previous inner Observable has not yet completed.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * next inner Observables while the current inner is still executing.</span>
 *
 * <img src="./img/exhaust.png" width="100%">
 *
 * `exhaust` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable begins emitting the items emitted by that
 * inner Observable. So far, it behaves like {@link mergeAll}. However,
 * `exhaust` ignores every new inner Observable if the previous Observable has
 * not yet completed. Once that one completes, it will accept and flatten the
 * next inner Observable and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));
 * var result = higherOrder.exhaust();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link switch}
 * @see {@link mergeAll}
 * @see {@link exhaustMap}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable that takes a source of Observables and propagates the first observable
 * exclusively until it completes before subscribing to the next.
 * @method exhaust
 * @owner Observable
 */
function exhaust() {
  return this.lift(new SwitchFirstOperator());
}
exports.exhaust = exhaust;
var SwitchFirstOperator = function () {
  function SwitchFirstOperator() {}
  SwitchFirstOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchFirstSubscriber(subscriber));
  };
  return SwitchFirstOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstSubscriber = function (_super) {
  __extends(SwitchFirstSubscriber, _super);
  function SwitchFirstSubscriber(destination) {
    _super.call(this, destination);
    this.hasCompleted = false;
    this.hasSubscription = false;
  }
  SwitchFirstSubscriber.prototype._next = function (value) {
    if (!this.hasSubscription) {
      this.hasSubscription = true;
      this.add(subscribeToResult_1.subscribeToResult(this, value));
    }
  };
  SwitchFirstSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (!this.hasSubscription) {
      this.destination.complete();
    }
  };
  SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
    this.remove(innerSub);
    this.hasSubscription = false;
    if (this.hasCompleted) {
      this.destination.complete();
    }
  };
  return SwitchFirstSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=exhaust.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/exhaustMap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1887');
var exhaustMap_1 = require('1888');
Observable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;
//# sourceMappingURL=exhaustMap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/exhaustMap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2153');
var subscribeToResult_1 = require('2154');
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable only if the previous projected Observable has completed.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link exhaust}.</span>
 *
 * <img src="./img/exhaustMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. When it projects a source value to
 * an Observable, the output Observable begins emitting the items emitted by
 * that projected Observable. However, `exhaustMap` ignores every new projected
 * Observable if the previous projected Observable has not yet completed. Once
 * that one completes, it will accept and flatten the next projected Observable
 * and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaust}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable containing projected Observables
 * of each item of the source, ignoring projected Observables that start before
 * their preceding Observable has completed.
 * @method exhaustMap
 * @owner Observable
 */
function exhaustMap(project, resultSelector) {
  return this.lift(new SwitchFirstMapOperator(project, resultSelector));
}
exports.exhaustMap = exhaustMap;
var SwitchFirstMapOperator = function () {
  function SwitchFirstMapOperator(project, resultSelector) {
    this.project = project;
    this.resultSelector = resultSelector;
  }
  SwitchFirstMapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));
  };
  return SwitchFirstMapOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstMapSubscriber = function (_super) {
  __extends(SwitchFirstMapSubscriber, _super);
  function SwitchFirstMapSubscriber(destination, project, resultSelector) {
    _super.call(this, destination);
    this.project = project;
    this.resultSelector = resultSelector;
    this.hasSubscription = false;
    this.hasCompleted = false;
    this.index = 0;
  }
  SwitchFirstMapSubscriber.prototype._next = function (value) {
    if (!this.hasSubscription) {
      this.tryNext(value);
    }
  };
  SwitchFirstMapSubscriber.prototype.tryNext = function (value) {
    var index = this.index++;
    var destination = this.destination;
    try {
      var result = this.project(value, index);
      this.hasSubscription = true;
      this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
    } catch (err) {
      destination.error(err);
    }
  };
  SwitchFirstMapSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (!this.hasSubscription) {
      this.destination.complete();
    }
  };
  SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    var _a = this,
        resultSelector = _a.resultSelector,
        destination = _a.destination;
    if (resultSelector) {
      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
    } else {
      destination.next(innerValue);
    }
  };
  SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
    var _a = this,
        resultSelector = _a.resultSelector,
        destination = _a.destination;
    try {
      var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
      destination.next(result);
    } catch (err) {
      destination.error(err);
    }
  };
  SwitchFirstMapSubscriber.prototype.notifyError = function (err) {
    this.destination.error(err);
  };
  SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {
    this.remove(innerSub);
    this.hasSubscription = false;
    if (this.hasCompleted) {
      this.destination.complete();
    }
  };
  return SwitchFirstMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=exhaustMap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/expand.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1885');
var expand_1 = require('1886');
Observable_1.Observable.prototype.expand = expand_1.expand;
//# sourceMappingURL=expand.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/expand.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = require('2149');
var errorObject_1 = require('2150');
var OuterSubscriber_1 = require('2151');
var subscribeToResult_1 = require('2152');
/* tslint:enable:max-line-length */
/**
 * Recursively projects each source value to an Observable which is merged in
 * the output Observable.
 *
 * <span class="informal">It's similar to {@link mergeMap}, but applies the
 * projection function to every source value as well as every output value.
 * It's recursive.</span>
 *
 * <img src="./img/expand.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger. *Expand* will re-emit on the output
 * Observable every source value. Then, each output value is given to the
 * `project` function which returns an inner Observable to be merged on the
 * output Observable. Those output values resulting from the projection are also
 * given to the `project` function to produce new output values. This is how
 * *expand* behaves recursively.
 *
 * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var powersOfTwo = clicks
 *   .mapTo(1)
 *   .expand(x => Rx.Observable.of(2 * x).delay(1000))
 *   .take(10);
 * powersOfTwo.subscribe(x => console.log(x));
 *
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 *
 * @param {function(value: T, index: number) => Observable} project A function
 * that, when applied to an item emitted by the source or the output Observable,
 * returns an Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each projected inner Observable.
 * @return {Observable} An Observable that emits the source values and also
 * result of applying the projection function to each value emitted on the
 * output Observable and and merging the results of the Observables obtained
 * from this transformation.
 * @method expand
 * @owner Observable
 */
function expand(project, concurrent, scheduler) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  if (scheduler === void 0) {
    scheduler = undefined;
  }
  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
  return this.lift(new ExpandOperator(project, concurrent, scheduler));
}
exports.expand = expand;
var ExpandOperator = function () {
  function ExpandOperator(project, concurrent, scheduler) {
    this.project = project;
    this.concurrent = concurrent;
    this.scheduler = scheduler;
  }
  ExpandOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
  };
  return ExpandOperator;
}();
exports.ExpandOperator = ExpandOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExpandSubscriber = function (_super) {
  __extends(ExpandSubscriber, _super);
  function ExpandSubscriber(destination, project, concurrent, scheduler) {
    _super.call(this, destination);
    this.project = project;
    this.concurrent = concurrent;
    this.scheduler = scheduler;
    this.index = 0;
    this.active = 0;
    this.hasCompleted = false;
    if (concurrent < Number.POSITIVE_INFINITY) {
      this.buffer = [];
    }
  }
  ExpandSubscriber.dispatch = function (arg) {
    var subscriber = arg.subscriber,
        result = arg.result,
        value = arg.value,
        index = arg.index;
    subscriber.subscribeToProjection(result, value, index);
  };
  ExpandSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    if (destination.closed) {
      this._complete();
      return;
    }
    var index = this.index++;
    if (this.active < this.concurrent) {
      destination.next(value);
      var result = tryCatch_1.tryCatch(this.project)(value, index);
      if (result === errorObject_1.errorObject) {
        destination.error(errorObject_1.errorObject.e);
      } else if (!this.scheduler) {
        this.subscribeToProjection(result, value, index);
      } else {
        var state = { subscriber: this, result: result, value: value, index: index };
        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
      }
    } else {
      this.buffer.push(value);
    }
  };
  ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
    this.active++;
    this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
  };
  ExpandSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.hasCompleted && this.active === 0) {
      this.destination.complete();
    }
  };
  ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this._next(innerValue);
  };
  ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
    var buffer = this.buffer;
    this.remove(innerSub);
    this.active--;
    if (buffer && buffer.length > 0) {
      this._next(buffer.shift());
    }
    if (this.hasCompleted && this.active === 0) {
      this.destination.complete();
    }
  };
  return ExpandSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.ExpandSubscriber = ExpandSubscriber;
//# sourceMappingURL=expand.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/elementAt.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1891');
var elementAt_1 = require('1892');
Observable_1.Observable.prototype.elementAt = elementAt_1.elementAt;
//# sourceMappingURL=elementAt.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/elementAt.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2159');
var ArgumentOutOfRangeError_1 = require('2160');
/**
 * Emits the single value at the specified `index` in a sequence of emissions
 * from the source Observable.
 *
 * <span class="informal">Emits only the i-th value, then completes.</span>
 *
 * <img src="./img/elementAt.png" width="100%">
 *
 * `elementAt` returns an Observable that emits the item at the specified
 * `index` in the source Observable, or a default value if that `index` is out
 * of range and the `default` argument is provided. If the `default` argument is
 * not given and the `index` is out of range, the output Observable will emit an
 * `ArgumentOutOfRangeError` error.
 *
 * @example <caption>Emit only the third click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.elementAt(2);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // click 1 = nothing
 * // click 2 = nothing
 * // click 3 = MouseEvent object logged to console
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link skip}
 * @see {@link single}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the
 * Observable has completed before emitting the i-th `next` notification.
 *
 * @param {number} index Is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {T} [defaultValue] The default value returned for missing indices.
 * @return {Observable} An Observable that emits a single item, if it is found.
 * Otherwise, will emit the default value if given. If not, then emits an error.
 * @method elementAt
 * @owner Observable
 */
function elementAt(index, defaultValue) {
  return this.lift(new ElementAtOperator(index, defaultValue));
}
exports.elementAt = elementAt;
var ElementAtOperator = function () {
  function ElementAtOperator(index, defaultValue) {
    this.index = index;
    this.defaultValue = defaultValue;
    if (index < 0) {
      throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
    }
  }
  ElementAtOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));
  };
  return ElementAtOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ElementAtSubscriber = function (_super) {
  __extends(ElementAtSubscriber, _super);
  function ElementAtSubscriber(destination, index, defaultValue) {
    _super.call(this, destination);
    this.index = index;
    this.defaultValue = defaultValue;
  }
  ElementAtSubscriber.prototype._next = function (x) {
    if (this.index-- === 0) {
      this.destination.next(x);
      this.destination.complete();
    }
  };
  ElementAtSubscriber.prototype._complete = function () {
    var destination = this.destination;
    if (this.index >= 0) {
      if (typeof this.defaultValue !== 'undefined') {
        destination.next(this.defaultValue);
      } else {
        destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError());
      }
    }
    destination.complete();
  };
  return ElementAtSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=elementAt.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/ArgumentOutOfRangeError.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an element was queried at a certain index of an
 * Observable, but no such index or position exists in that sequence.
 *
 * @see {@link elementAt}
 * @see {@link take}
 * @see {@link takeLast}
 *
 * @class ArgumentOutOfRangeError
 */
var ArgumentOutOfRangeError = function (_super) {
  __extends(ArgumentOutOfRangeError, _super);
  function ArgumentOutOfRangeError() {
    var err = _super.call(this, 'argument out of range');
    this.name = err.name = 'ArgumentOutOfRangeError';
    this.stack = err.stack;
    this.message = err.message;
  }
  return ArgumentOutOfRangeError;
}(Error);
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
//# sourceMappingURL=ArgumentOutOfRangeError.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/filter.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1889');
var filter_1 = require('1890');
Observable_1.Observable.prototype.filter = filter_1.filter;
//# sourceMappingURL=filter.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/filter.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2155');
/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
  return this.lift(new FilterOperator(predicate, thisArg));
}
exports.filter = filter;
var FilterOperator = function () {
  function FilterOperator(predicate, thisArg) {
    this.predicate = predicate;
    this.thisArg = thisArg;
  }
  FilterOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
  };
  return FilterOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = function (_super) {
  __extends(FilterSubscriber, _super);
  function FilterSubscriber(destination, predicate, thisArg) {
    _super.call(this, destination);
    this.predicate = predicate;
    this.thisArg = thisArg;
    this.count = 0;
  }
  // the try catch block below is left specifically for
  // optimization and perf reasons. a tryCatcher is not necessary here.
  FilterSubscriber.prototype._next = function (value) {
    var result;
    try {
      result = this.predicate.call(this.thisArg, value, this.count++);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (result) {
      this.destination.next(value);
    }
  };
  return FilterSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=filter.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/finally.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1893');
var finally_1 = require('1894');
Observable_1.Observable.prototype.finally = finally_1._finally;
Observable_1.Observable.prototype._finally = finally_1._finally;
//# sourceMappingURL=finally.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/finally.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2157');
var Subscription_1 = require('2158');
/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * @param {function} callback Function to be called when source terminates.
 * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.
 * @method finally
 * @owner Observable
 */
function _finally(callback) {
  return this.lift(new FinallyOperator(callback));
}
exports._finally = _finally;
var FinallyOperator = function () {
  function FinallyOperator(callback) {
    this.callback = callback;
  }
  FinallyOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new FinallySubscriber(subscriber, this.callback));
  };
  return FinallyOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FinallySubscriber = function (_super) {
  __extends(FinallySubscriber, _super);
  function FinallySubscriber(destination, callback) {
    _super.call(this, destination);
    this.add(new Subscription_1.Subscription(callback));
  }
  return FinallySubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=finally.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/find.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1895');
var find_1 = require('1896');
Observable_1.Observable.prototype.find = find_1.find;
//# sourceMappingURL=find.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/find.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2156');
/* tslint:enable:max-line-length */
/**
 * Emits only the first value emitted by the source Observable that meets some
 * condition.
 *
 * <span class="informal">Finds the first value that passes some test and emits
 * that.</span>
 *
 * <img src="./img/find.png" width="100%">
 *
 * `find` searches for the first item in the source Observable that matches the
 * specified condition embodied by the `predicate`, and returns the first
 * occurrence in the source. Unlike {@link first}, the `predicate` is required
 * in `find`, and does not emit an error if a valid value is not found.
 *
 * @example <caption>Find and emit the first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.find(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link first}
 * @see {@link findIndex}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable<T>} An Observable of the first item that matches the
 * condition.
 * @method find
 * @owner Observable
 */
function find(predicate, thisArg) {
  if (typeof predicate !== 'function') {
    throw new TypeError('predicate is not a function');
  }
  return this.lift(new FindValueOperator(predicate, this, false, thisArg));
}
exports.find = find;
var FindValueOperator = function () {
  function FindValueOperator(predicate, source, yieldIndex, thisArg) {
    this.predicate = predicate;
    this.source = source;
    this.yieldIndex = yieldIndex;
    this.thisArg = thisArg;
  }
  FindValueOperator.prototype.call = function (observer, source) {
    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
  };
  return FindValueOperator;
}();
exports.FindValueOperator = FindValueOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FindValueSubscriber = function (_super) {
  __extends(FindValueSubscriber, _super);
  function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
    _super.call(this, destination);
    this.predicate = predicate;
    this.source = source;
    this.yieldIndex = yieldIndex;
    this.thisArg = thisArg;
    this.index = 0;
  }
  FindValueSubscriber.prototype.notifyComplete = function (value) {
    var destination = this.destination;
    destination.next(value);
    destination.complete();
  };
  FindValueSubscriber.prototype._next = function (value) {
    var _a = this,
        predicate = _a.predicate,
        thisArg = _a.thisArg;
    var index = this.index++;
    try {
      var result = predicate.call(thisArg || this, value, index, this.source);
      if (result) {
        this.notifyComplete(this.yieldIndex ? index : value);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  FindValueSubscriber.prototype._complete = function () {
    this.notifyComplete(this.yieldIndex ? -1 : undefined);
  };
  return FindValueSubscriber;
}(Subscriber_1.Subscriber);
exports.FindValueSubscriber = FindValueSubscriber;
//# sourceMappingURL=find.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/findIndex.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1903');
var findIndex_1 = require('1904');
Observable_1.Observable.prototype.findIndex = findIndex_1.findIndex;
//# sourceMappingURL=findIndex.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/findIndex.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var find_1 = require('2167');
/**
 * Emits only the index of the first value emitted by the source Observable that
 * meets some condition.
 *
 * <span class="informal">It's like {@link find}, but emits the index of the
 * found value, not the value itself.</span>
 *
 * <img src="./img/findIndex.png" width="100%">
 *
 * `findIndex` searches for the first item in the source Observable that matches
 * the specified condition embodied by the `predicate`, and returns the
 * (zero-based) index of the first occurrence in the source. Unlike
 * {@link first}, the `predicate` is required in `findIndex`, and does not emit
 * an error if a valid value is not found.
 *
 * @example <caption>Emit the index of first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link first}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of the index of the first item that
 * matches the condition.
 * @method find
 * @owner Observable
 */
function findIndex(predicate, thisArg) {
  return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));
}
exports.findIndex = findIndex;
//# sourceMappingURL=findIndex.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/first.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1899');
var first_1 = require('1900');
Observable_1.Observable.prototype.first = first_1.first;
//# sourceMappingURL=first.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/first.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2174');
var EmptyError_1 = require('2175');
/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {function(value: T, index: number): R} [resultSelector] A function to
 * produce the value on the output Observable based on the values
 * and the indices of the source Observable. The arguments passed to this
 * function are:
 * - `value`: the value that was emitted on the source.
 * - `index`: the "index" of the value from the source.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, resultSelector, defaultValue) {
  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
}
exports.first = first;
var FirstOperator = function () {
  function FirstOperator(predicate, resultSelector, defaultValue, source) {
    this.predicate = predicate;
    this.resultSelector = resultSelector;
    this.defaultValue = defaultValue;
    this.source = source;
  }
  FirstOperator.prototype.call = function (observer, source) {
    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
  };
  return FirstOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FirstSubscriber = function (_super) {
  __extends(FirstSubscriber, _super);
  function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
    _super.call(this, destination);
    this.predicate = predicate;
    this.resultSelector = resultSelector;
    this.defaultValue = defaultValue;
    this.source = source;
    this.index = 0;
    this.hasCompleted = false;
    this._emitted = false;
  }
  FirstSubscriber.prototype._next = function (value) {
    var index = this.index++;
    if (this.predicate) {
      this._tryPredicate(value, index);
    } else {
      this._emit(value, index);
    }
  };
  FirstSubscriber.prototype._tryPredicate = function (value, index) {
    var result;
    try {
      result = this.predicate(value, index, this.source);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (result) {
      this._emit(value, index);
    }
  };
  FirstSubscriber.prototype._emit = function (value, index) {
    if (this.resultSelector) {
      this._tryResultSelector(value, index);
      return;
    }
    this._emitFinal(value);
  };
  FirstSubscriber.prototype._tryResultSelector = function (value, index) {
    var result;
    try {
      result = this.resultSelector(value, index);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this._emitFinal(result);
  };
  FirstSubscriber.prototype._emitFinal = function (value) {
    var destination = this.destination;
    if (!this._emitted) {
      this._emitted = true;
      destination.next(value);
      destination.complete();
      this.hasCompleted = true;
    }
  };
  FirstSubscriber.prototype._complete = function () {
    var destination = this.destination;
    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
      destination.next(this.defaultValue);
      destination.complete();
    } else if (!this.hasCompleted) {
      destination.error(new EmptyError_1.EmptyError());
    }
  };
  return FirstSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=first.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/EmptyError.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = function (_super) {
  __extends(EmptyError, _super);
  function EmptyError() {
    var err = _super.call(this, 'no elements in sequence');
    this.name = err.name = 'EmptyError';
    this.stack = err.stack;
    this.message = err.message;
  }
  return EmptyError;
}(Error);
exports.EmptyError = EmptyError;
//# sourceMappingURL=EmptyError.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/groupBy.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1897');
var groupBy_1 = require('1898');
Observable_1.Observable.prototype.groupBy = groupBy_1.groupBy;
//# sourceMappingURL=groupBy.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/groupBy.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2161');
var Subscription_1 = require('2162');
var Observable_1 = require('2163');
var Subject_1 = require('2164');
var Map_1 = require('2165');
var FastMap_1 = require('2166');
/* tslint:enable:max-line-length */
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @example <caption>Group objects by id and return as array</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs3'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *     )
 *     .groupBy(p => p.id)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // [ { id: 1, name: 'aze1' },
 * //   { id: 1, name: 'erg1' },
 * //   { id: 1, name: 'df1' } ]
 * //
 * // [ { id: 2, name: 'sf2' },
 * //   { id: 2, name: 'dg2' },
 * //   { id: 2, name: 'sfqfb2' },
 * //   { id: 2, name: 'qsgqsfg2' } ]
 * //
 * // [ { id: 3, name: 'qfs3' } ]
 *
 * @example <caption>Pivot data on the id field</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs1'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *                   )
 *     .groupBy(p => p.id, p => p.name)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], ["" + group$.key]))
 *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }
 * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }
 * // { id: 3, values: [ 'qfs1' ] }
 *
 * @param {function(value: T): K} keySelector A function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] A function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * A function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} An Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
  return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
}
exports.groupBy = groupBy;
var GroupByOperator = function () {
  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
    this.keySelector = keySelector;
    this.elementSelector = elementSelector;
    this.durationSelector = durationSelector;
    this.subjectSelector = subjectSelector;
  }
  GroupByOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
  };
  return GroupByOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupBySubscriber = function (_super) {
  __extends(GroupBySubscriber, _super);
  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
    _super.call(this, destination);
    this.keySelector = keySelector;
    this.elementSelector = elementSelector;
    this.durationSelector = durationSelector;
    this.subjectSelector = subjectSelector;
    this.groups = null;
    this.attemptedToUnsubscribe = false;
    this.count = 0;
  }
  GroupBySubscriber.prototype._next = function (value) {
    var key;
    try {
      key = this.keySelector(value);
    } catch (err) {
      this.error(err);
      return;
    }
    this._group(value, key);
  };
  GroupBySubscriber.prototype._group = function (value, key) {
    var groups = this.groups;
    if (!groups) {
      groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();
    }
    var group = groups.get(key);
    var element;
    if (this.elementSelector) {
      try {
        element = this.elementSelector(value);
      } catch (err) {
        this.error(err);
      }
    } else {
      element = value;
    }
    if (!group) {
      group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();
      groups.set(key, group);
      var groupedObservable = new GroupedObservable(key, group, this);
      this.destination.next(groupedObservable);
      if (this.durationSelector) {
        var duration = void 0;
        try {
          duration = this.durationSelector(new GroupedObservable(key, group));
        } catch (err) {
          this.error(err);
          return;
        }
        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
      }
    }
    if (!group.closed) {
      group.next(element);
    }
  };
  GroupBySubscriber.prototype._error = function (err) {
    var groups = this.groups;
    if (groups) {
      groups.forEach(function (group, key) {
        group.error(err);
      });
      groups.clear();
    }
    this.destination.error(err);
  };
  GroupBySubscriber.prototype._complete = function () {
    var groups = this.groups;
    if (groups) {
      groups.forEach(function (group, key) {
        group.complete();
      });
      groups.clear();
    }
    this.destination.complete();
  };
  GroupBySubscriber.prototype.removeGroup = function (key) {
    this.groups.delete(key);
  };
  GroupBySubscriber.prototype.unsubscribe = function () {
    if (!this.closed) {
      this.attemptedToUnsubscribe = true;
      if (this.count === 0) {
        _super.prototype.unsubscribe.call(this);
      }
    }
  };
  return GroupBySubscriber;
}(Subscriber_1.Subscriber);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupDurationSubscriber = function (_super) {
  __extends(GroupDurationSubscriber, _super);
  function GroupDurationSubscriber(key, group, parent) {
    _super.call(this, group);
    this.key = key;
    this.group = group;
    this.parent = parent;
  }
  GroupDurationSubscriber.prototype._next = function (value) {
    this.complete();
  };
  GroupDurationSubscriber.prototype._unsubscribe = function () {
    var _a = this,
        parent = _a.parent,
        key = _a.key;
    this.key = this.parent = null;
    if (parent) {
      parent.removeGroup(key);
    }
  };
  return GroupDurationSubscriber;
}(Subscriber_1.Subscriber);
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
var GroupedObservable = function (_super) {
  __extends(GroupedObservable, _super);
  function GroupedObservable(key, groupSubject, refCountSubscription) {
    _super.call(this);
    this.key = key;
    this.groupSubject = groupSubject;
    this.refCountSubscription = refCountSubscription;
  }
  GroupedObservable.prototype._subscribe = function (subscriber) {
    var subscription = new Subscription_1.Subscription();
    var _a = this,
        refCountSubscription = _a.refCountSubscription,
        groupSubject = _a.groupSubject;
    if (refCountSubscription && !refCountSubscription.closed) {
      subscription.add(new InnerRefCountSubscription(refCountSubscription));
    }
    subscription.add(groupSubject.subscribe(subscriber));
    return subscription;
  };
  return GroupedObservable;
}(Observable_1.Observable);
exports.GroupedObservable = GroupedObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerRefCountSubscription = function (_super) {
  __extends(InnerRefCountSubscription, _super);
  function InnerRefCountSubscription(parent) {
    _super.call(this);
    this.parent = parent;
    parent.count++;
  }
  InnerRefCountSubscription.prototype.unsubscribe = function () {
    var parent = this.parent;
    if (!parent.closed && !this.closed) {
      _super.prototype.unsubscribe.call(this);
      parent.count -= 1;
      if (parent.count === 0 && parent.attemptedToUnsubscribe) {
        parent.unsubscribe();
      }
    }
  };
  return InnerRefCountSubscription;
}(Subscription_1.Subscription);
//# sourceMappingURL=groupBy.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/Map.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('2378');
var MapPolyfill_1 = require('2379');
exports.Map = root_1.root.Map || function () {
  return MapPolyfill_1.MapPolyfill;
}();
//# sourceMappingURL=Map.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/MapPolyfill.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var MapPolyfill = function () {
  function MapPolyfill() {
    this.size = 0;
    this._values = [];
    this._keys = [];
  }
  MapPolyfill.prototype.get = function (key) {
    var i = this._keys.indexOf(key);
    return i === -1 ? undefined : this._values[i];
  };
  MapPolyfill.prototype.set = function (key, value) {
    var i = this._keys.indexOf(key);
    if (i === -1) {
      this._keys.push(key);
      this._values.push(value);
      this.size++;
    } else {
      this._values[i] = value;
    }
    return this;
  };
  MapPolyfill.prototype.delete = function (key) {
    var i = this._keys.indexOf(key);
    if (i === -1) {
      return false;
    }
    this._values.splice(i, 1);
    this._keys.splice(i, 1);
    this.size--;
    return true;
  };
  MapPolyfill.prototype.clear = function () {
    this._keys.length = 0;
    this._values.length = 0;
    this.size = 0;
  };
  MapPolyfill.prototype.forEach = function (cb, thisArg) {
    for (var i = 0; i < this.size; i++) {
      cb.call(thisArg, this._values[i], this._keys[i]);
    }
  };
  return MapPolyfill;
}();
exports.MapPolyfill = MapPolyfill;
//# sourceMappingURL=MapPolyfill.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/FastMap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var FastMap = function () {
  function FastMap() {
    this.values = {};
  }
  FastMap.prototype.delete = function (key) {
    this.values[key] = null;
    return true;
  };
  FastMap.prototype.set = function (key, value) {
    this.values[key] = value;
    return this;
  };
  FastMap.prototype.get = function (key) {
    return this.values[key];
  };
  FastMap.prototype.forEach = function (cb, thisArg) {
    var values = this.values;
    for (var key in values) {
      if (values.hasOwnProperty(key) && values[key] !== null) {
        cb.call(thisArg, values[key], key);
      }
    }
  };
  FastMap.prototype.clear = function () {
    this.values = {};
  };
  return FastMap;
}();
exports.FastMap = FastMap;
//# sourceMappingURL=FastMap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/ignoreElements.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1901');
var ignoreElements_1 = require('1902');
Observable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;
//# sourceMappingURL=ignoreElements.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/ignoreElements.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2168');
var noop_1 = require('2169');
/**
 * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
 *
 * <img src="./img/ignoreElements.png" width="100%">
 *
 * @return {Observable} An empty Observable that only calls `complete`
 * or `error`, based on which one is called by the source Observable.
 * @method ignoreElements
 * @owner Observable
 */
function ignoreElements() {
  return this.lift(new IgnoreElementsOperator());
}
exports.ignoreElements = ignoreElements;
;
var IgnoreElementsOperator = function () {
  function IgnoreElementsOperator() {}
  IgnoreElementsOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new IgnoreElementsSubscriber(subscriber));
  };
  return IgnoreElementsOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IgnoreElementsSubscriber = function (_super) {
  __extends(IgnoreElementsSubscriber, _super);
  function IgnoreElementsSubscriber() {
    _super.apply(this, arguments);
  }
  IgnoreElementsSubscriber.prototype._next = function (unused) {
    noop_1.noop();
  };
  return IgnoreElementsSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=ignoreElements.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/isEmpty.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1907');
var isEmpty_1 = require('1908');
Observable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;
//# sourceMappingURL=isEmpty.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/isEmpty.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2178');
/**
 * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.
 *
 * <img src="./img/isEmpty.png" width="100%">
 *
 * @return {Observable} An Observable that emits a Boolean.
 * @method isEmpty
 * @owner Observable
 */
function isEmpty() {
  return this.lift(new IsEmptyOperator());
}
exports.isEmpty = isEmpty;
var IsEmptyOperator = function () {
  function IsEmptyOperator() {}
  IsEmptyOperator.prototype.call = function (observer, source) {
    return source.subscribe(new IsEmptySubscriber(observer));
  };
  return IsEmptyOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IsEmptySubscriber = function (_super) {
  __extends(IsEmptySubscriber, _super);
  function IsEmptySubscriber(destination) {
    _super.call(this, destination);
  }
  IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
    var destination = this.destination;
    destination.next(isEmpty);
    destination.complete();
  };
  IsEmptySubscriber.prototype._next = function (value) {
    this.notifyComplete(false);
  };
  IsEmptySubscriber.prototype._complete = function () {
    this.notifyComplete(true);
  };
  return IsEmptySubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=isEmpty.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/audit.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1905');
var audit_1 = require('1906');
Observable_1.Observable.prototype.audit = audit_1.audit;
//# sourceMappingURL=audit.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/audit.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = require('2170');
var errorObject_1 = require('2171');
var OuterSubscriber_1 = require('2172');
var subscribeToResult_1 = require('2173');
/**
 * Ignores source values for a duration determined by another Observable, then
 * emits the most recent value from the source Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link auditTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/audit.png" width="100%">
 *
 * `audit` is similar to `throttle`, but emits the last value from the silenced
 * time window, instead of the first value. `audit` emits the most recent value
 * from the source Observable on the output Observable as soon as its internal
 * timer becomes disabled, and ignores source values while the timer is enabled.
 * Initially, the timer is disabled. As soon as the first source value arrives,
 * the timer is enabled by calling the `durationSelector` function with the
 * source value, which returns the "duration" Observable. When the duration
 * Observable emits a value or completes, the timer is disabled, then the most
 * recent source value is emitted on the output Observable, and this process
 * repeats for the next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.audit(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration, returned as an Observable or a Promise.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method audit
 * @owner Observable
 */
function audit(durationSelector) {
  return this.lift(new AuditOperator(durationSelector));
}
exports.audit = audit;
var AuditOperator = function () {
  function AuditOperator(durationSelector) {
    this.durationSelector = durationSelector;
  }
  AuditOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
  };
  return AuditOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AuditSubscriber = function (_super) {
  __extends(AuditSubscriber, _super);
  function AuditSubscriber(destination, durationSelector) {
    _super.call(this, destination);
    this.durationSelector = durationSelector;
    this.hasValue = false;
  }
  AuditSubscriber.prototype._next = function (value) {
    this.value = value;
    this.hasValue = true;
    if (!this.throttled) {
      var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
      if (duration === errorObject_1.errorObject) {
        this.destination.error(errorObject_1.errorObject.e);
      } else {
        var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);
        if (innerSubscription.closed) {
          this.clearThrottle();
        } else {
          this.add(this.throttled = innerSubscription);
        }
      }
    }
  };
  AuditSubscriber.prototype.clearThrottle = function () {
    var _a = this,
        value = _a.value,
        hasValue = _a.hasValue,
        throttled = _a.throttled;
    if (throttled) {
      this.remove(throttled);
      this.throttled = null;
      throttled.unsubscribe();
    }
    if (hasValue) {
      this.value = null;
      this.hasValue = false;
      this.destination.next(value);
    }
  };
  AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
    this.clearThrottle();
  };
  AuditSubscriber.prototype.notifyComplete = function () {
    this.clearThrottle();
  };
  return AuditSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=audit.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/auditTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1909');
var auditTime_1 = require('1910');
Observable_1.Observable.prototype.auditTime = auditTime_1.auditTime;
//# sourceMappingURL=auditTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/auditTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = require('2179');
var Subscriber_1 = require('2180');
/**
 * Ignores source values for `duration` milliseconds, then emits the most recent
 * value from the source Observable, then repeats this process.
 *
 * <span class="informal">When it sees a source values, it ignores that plus
 * the next ones for `duration` milliseconds, and then it emits the most recent
 * value from the source.</span>
 *
 * <img src="./img/auditTime.png" width="100%">
 *
 * `auditTime` is similar to `throttleTime`, but emits the last value from the
 * silenced time window, instead of the first value. `auditTime` emits the most
 * recent value from the source Observable on the output Observable as soon as
 * its internal timer becomes disabled, and ignores source values while the
 * timer is enabled. Initially, the timer is disabled. As soon as the first
 * source value arrives, the timer is enabled. After `duration` milliseconds (or
 * the time unit determined internally by the optional `scheduler`) has passed,
 * the timer is disabled, then the most recent source value is emitted on the
 * output Observable, and this process repeats for the next source value.
 * Optionally takes a {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.auditTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} duration Time to wait before emitting the most recent source
 * value, measured in milliseconds or the time unit determined internally
 * by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the rate-limiting behavior.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method auditTime
 * @owner Observable
 */
function auditTime(duration, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1.async;
  }
  return this.lift(new AuditTimeOperator(duration, scheduler));
}
exports.auditTime = auditTime;
var AuditTimeOperator = function () {
  function AuditTimeOperator(duration, scheduler) {
    this.duration = duration;
    this.scheduler = scheduler;
  }
  AuditTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));
  };
  return AuditTimeOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AuditTimeSubscriber = function (_super) {
  __extends(AuditTimeSubscriber, _super);
  function AuditTimeSubscriber(destination, duration, scheduler) {
    _super.call(this, destination);
    this.duration = duration;
    this.scheduler = scheduler;
    this.hasValue = false;
  }
  AuditTimeSubscriber.prototype._next = function (value) {
    this.value = value;
    this.hasValue = true;
    if (!this.throttled) {
      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));
    }
  };
  AuditTimeSubscriber.prototype.clearThrottle = function () {
    var _a = this,
        value = _a.value,
        hasValue = _a.hasValue,
        throttled = _a.throttled;
    if (throttled) {
      this.remove(throttled);
      this.throttled = null;
      throttled.unsubscribe();
    }
    if (hasValue) {
      this.value = null;
      this.hasValue = false;
      this.destination.next(value);
    }
  };
  return AuditTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNext(subscriber) {
  subscriber.clearThrottle();
}
//# sourceMappingURL=auditTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/last.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1911');
var last_1 = require('1912');
Observable_1.Observable.prototype.last = last_1.last;
//# sourceMappingURL=last.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/last.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2176');
var EmptyError_1 = require('2177');
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} predicate - The condition any source emitted item has to satisfy.
 * @return {Observable} An Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 * @method last
 * @owner Observable
 */
function last(predicate, resultSelector, defaultValue) {
  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
}
exports.last = last;
var LastOperator = function () {
  function LastOperator(predicate, resultSelector, defaultValue, source) {
    this.predicate = predicate;
    this.resultSelector = resultSelector;
    this.defaultValue = defaultValue;
    this.source = source;
  }
  LastOperator.prototype.call = function (observer, source) {
    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
  };
  return LastOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var LastSubscriber = function (_super) {
  __extends(LastSubscriber, _super);
  function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
    _super.call(this, destination);
    this.predicate = predicate;
    this.resultSelector = resultSelector;
    this.defaultValue = defaultValue;
    this.source = source;
    this.hasValue = false;
    this.index = 0;
    if (typeof defaultValue !== 'undefined') {
      this.lastValue = defaultValue;
      this.hasValue = true;
    }
  }
  LastSubscriber.prototype._next = function (value) {
    var index = this.index++;
    if (this.predicate) {
      this._tryPredicate(value, index);
    } else {
      if (this.resultSelector) {
        this._tryResultSelector(value, index);
        return;
      }
      this.lastValue = value;
      this.hasValue = true;
    }
  };
  LastSubscriber.prototype._tryPredicate = function (value, index) {
    var result;
    try {
      result = this.predicate(value, index, this.source);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (result) {
      if (this.resultSelector) {
        this._tryResultSelector(value, index);
        return;
      }
      this.lastValue = value;
      this.hasValue = true;
    }
  };
  LastSubscriber.prototype._tryResultSelector = function (value, index) {
    var result;
    try {
      result = this.resultSelector(value, index);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.lastValue = result;
    this.hasValue = true;
  };
  LastSubscriber.prototype._complete = function () {
    var destination = this.destination;
    if (this.hasValue) {
      destination.next(this.lastValue);
      destination.complete();
    } else {
      destination.error(new EmptyError_1.EmptyError());
    }
  };
  return LastSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=last.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/let.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1913');
var let_1 = require('1914');
Observable_1.Observable.prototype.let = let_1.letProto;
Observable_1.Observable.prototype.letBind = let_1.letProto;
//# sourceMappingURL=let.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/let.js", function(__filename, __dirname, require, module, exports) {
"use strict";
/**
 * @param func
 * @return {Observable<R>}
 * @method let
 * @owner Observable
 */

function letProto(func) {
  return func(this);
}
exports.letProto = letProto;
//# sourceMappingURL=let.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/every.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1915');
var every_1 = require('1916');
Observable_1.Observable.prototype.every = every_1.every;
//# sourceMappingURL=every.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/every.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2181');
/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 *
 * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
 *  Observable.of(1, 2, 3, 4, 5, 6)
 *     .every(x => x < 5)
 *     .subscribe(x => console.log(x)); // -> false
 *
 * @param {function} predicate A function for determining if an item meets a specified condition.
 * @param {any} [thisArg] Optional object to use for `this` in the callback.
 * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */
function every(predicate, thisArg) {
  return this.lift(new EveryOperator(predicate, thisArg, this));
}
exports.every = every;
var EveryOperator = function () {
  function EveryOperator(predicate, thisArg, source) {
    this.predicate = predicate;
    this.thisArg = thisArg;
    this.source = source;
  }
  EveryOperator.prototype.call = function (observer, source) {
    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
  };
  return EveryOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var EverySubscriber = function (_super) {
  __extends(EverySubscriber, _super);
  function EverySubscriber(destination, predicate, thisArg, source) {
    _super.call(this, destination);
    this.predicate = predicate;
    this.thisArg = thisArg;
    this.source = source;
    this.index = 0;
    this.thisArg = thisArg || this;
  }
  EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
    this.destination.next(everyValueMatch);
    this.destination.complete();
  };
  EverySubscriber.prototype._next = function (value) {
    var result = false;
    try {
      result = this.predicate.call(this.thisArg, value, this.index++, this.source);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (!result) {
      this.notifyComplete(false);
    }
  };
  EverySubscriber.prototype._complete = function () {
    this.notifyComplete(true);
  };
  return EverySubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=every.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/map.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1917');
var map_1 = require('1918');
Observable_1.Observable.prototype.map = map_1.map;
//# sourceMappingURL=map.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/mapTo.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1919');
var mapTo_1 = require('1920');
Observable_1.Observable.prototype.mapTo = mapTo_1.mapTo;
//# sourceMappingURL=mapTo.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/mapTo.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2189');
/**
 * Emits the given constant value on the output Observable every time the source
 * Observable emits a value.
 *
 * <span class="informal">Like {@link map}, but it maps every source value to
 * the same output value every time.</span>
 *
 * <img src="./img/mapTo.png" width="100%">
 *
 * Takes a constant `value` as argument, and emits that whenever the source
 * Observable emits a value. In other words, ignores the actual source value,
 * and simply uses the emission moment to know when to emit the given `value`.
 *
 * @example <caption>Map every click to the string 'Hi'</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var greetings = clicks.mapTo('Hi');
 * greetings.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {any} value The value to map each source value to.
 * @return {Observable} An Observable that emits the given `value` every time
 * the source Observable emits something.
 * @method mapTo
 * @owner Observable
 */
function mapTo(value) {
  return this.lift(new MapToOperator(value));
}
exports.mapTo = mapTo;
var MapToOperator = function () {
  function MapToOperator(value) {
    this.value = value;
  }
  MapToOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MapToSubscriber(subscriber, this.value));
  };
  return MapToOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapToSubscriber = function (_super) {
  __extends(MapToSubscriber, _super);
  function MapToSubscriber(destination, value) {
    _super.call(this, destination);
    this.value = value;
  }
  MapToSubscriber.prototype._next = function (x) {
    this.destination.next(this.value);
  };
  return MapToSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=mapTo.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/materialize.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1921');
var materialize_1 = require('1922');
Observable_1.Observable.prototype.materialize = materialize_1.materialize;
//# sourceMappingURL=materialize.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/materialize.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2187');
var Notification_1 = require('2188');
/**
 * Represents all of the notifications from the source Observable as `next`
 * emissions marked with their original types within {@link Notification}
 * objects.
 *
 * <span class="informal">Wraps `next`, `error` and `complete` emissions in
 * {@link Notification} objects, emitted as `next` on the output Observable.
 * </span>
 *
 * <img src="./img/materialize.png" width="100%">
 *
 * `materialize` returns an Observable that emits a `next` notification for each
 * `next`, `error`, or `complete` emission of the source Observable. When the
 * source Observable emits `complete`, the output Observable will emit `next` as
 * a Notification of type "complete", and then it will emit `complete` as well.
 * When the source Observable emits `error`, the output will emit `next` as a
 * Notification of type "error", and then `complete`.
 *
 * This operator is useful for producing metadata of the source Observable, to
 * be consumed as `next` emissions. Use it in conjunction with
 * {@link dematerialize}.
 *
 * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>
 * var letters = Rx.Observable.of('a', 'b', 13, 'd');
 * var upperCase = letters.map(x => x.toUpperCase());
 * var materialized = upperCase.materialize();
 * materialized.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - Notification {kind: "N", value: "A", error: undefined, hasValue: true}
 * // - Notification {kind: "N", value: "B", error: undefined, hasValue: true}
 * // - Notification {kind: "E", value: undefined, error: TypeError:
 * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x
 * //   [as project] (http://1…, hasValue: false}
 *
 * @see {@link Notification}
 * @see {@link dematerialize}
 *
 * @return {Observable<Notification<T>>} An Observable that emits
 * {@link Notification} objects that wrap the original emissions from the source
 * Observable with metadata.
 * @method materialize
 * @owner Observable
 */
function materialize() {
  return this.lift(new MaterializeOperator());
}
exports.materialize = materialize;
var MaterializeOperator = function () {
  function MaterializeOperator() {}
  MaterializeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MaterializeSubscriber(subscriber));
  };
  return MaterializeOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MaterializeSubscriber = function (_super) {
  __extends(MaterializeSubscriber, _super);
  function MaterializeSubscriber(destination) {
    _super.call(this, destination);
  }
  MaterializeSubscriber.prototype._next = function (value) {
    this.destination.next(Notification_1.Notification.createNext(value));
  };
  MaterializeSubscriber.prototype._error = function (err) {
    var destination = this.destination;
    destination.next(Notification_1.Notification.createError(err));
    destination.complete();
  };
  MaterializeSubscriber.prototype._complete = function () {
    var destination = this.destination;
    destination.next(Notification_1.Notification.createComplete());
    destination.complete();
  };
  return MaterializeSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=materialize.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/max.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1925');
var max_1 = require('1926');
Observable_1.Observable.prototype.max = max_1.max;
//# sourceMappingURL=max.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/max.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var reduce_1 = require('2190');
/**
 * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the largest value.
 *
 * <img src="./img/max.png" width="100%">
 *
 * @example <caption>Get the maximal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .max()
 *   .subscribe(x => console.log(x)); // -> 8
 *
 * @example <caption>Use a comparer function to get the maximal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'
 * }
 *
 * @see {@link min}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable} An Observable that emits item with the largest value.
 * @method max
 * @owner Observable
 */
function max(comparer) {
  var max = typeof comparer === 'function' ? function (x, y) {
    return comparer(x, y) > 0 ? x : y;
  } : function (x, y) {
    return x > y ? x : y;
  };
  return this.lift(new reduce_1.ReduceOperator(max));
}
exports.max = max;
//# sourceMappingURL=max.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/reduce.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2221');
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns the
 * accumulated result when the source completes, given an optional seed value.
 *
 * <span class="informal">Combines together all values emitted on the source,
 * using an accumulator function that knows how to join a new source value into
 * the accumulation from the past.</span>
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * Like
 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
 * `reduce` applies an `accumulator` function against an accumulation and each
 * value of the source Observable (from the past) to reduce it to a single
 * value, emitted on the output Observable. Note that `reduce` will only emit
 * one value, only when the source Observable completes. It is equivalent to
 * applying operator {@link scan} followed by operator {@link last}.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
 *   .takeUntil(Rx.Observable.interval(5000));
 * var ones = clicksInFiveSeconds.mapTo(1);
 * var seed = 0;
 * var count = ones.reduce((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link count}
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link scan}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
 * called on each source value.
 * @param {R} [seed] The initial accumulation value.
 * @return {Observable<R>} An Observable that emits a single value that is the
 * result of accumulating the values emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */
function reduce(accumulator, seed) {
  var hasSeed = false;
  // providing a seed of `undefined` *should* be valid and trigger
  // hasSeed! so don't use `seed !== undefined` checks!
  // For this reason, we have to check it here at the original call site
  // otherwise inside Operator/Subscriber we won't know if `undefined`
  // means they didn't provide anything or if they literally provided `undefined`
  if (arguments.length >= 2) {
    hasSeed = true;
  }
  return this.lift(new ReduceOperator(accumulator, seed, hasSeed));
}
exports.reduce = reduce;
var ReduceOperator = function () {
  function ReduceOperator(accumulator, seed, hasSeed) {
    if (hasSeed === void 0) {
      hasSeed = false;
    }
    this.accumulator = accumulator;
    this.seed = seed;
    this.hasSeed = hasSeed;
  }
  ReduceOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
  };
  return ReduceOperator;
}();
exports.ReduceOperator = ReduceOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ReduceSubscriber = function (_super) {
  __extends(ReduceSubscriber, _super);
  function ReduceSubscriber(destination, accumulator, seed, hasSeed) {
    _super.call(this, destination);
    this.accumulator = accumulator;
    this.hasSeed = hasSeed;
    this.index = 0;
    this.hasValue = false;
    this.acc = seed;
    if (!this.hasSeed) {
      this.index++;
    }
  }
  ReduceSubscriber.prototype._next = function (value) {
    if (this.hasValue || (this.hasValue = this.hasSeed)) {
      this._tryReduce(value);
    } else {
      this.acc = value;
      this.hasValue = true;
    }
  };
  ReduceSubscriber.prototype._tryReduce = function (value) {
    var result;
    try {
      result = this.accumulator(this.acc, value, this.index++);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.acc = result;
  };
  ReduceSubscriber.prototype._complete = function () {
    if (this.hasValue || this.hasSeed) {
      this.destination.next(this.acc);
    }
    this.destination.complete();
  };
  return ReduceSubscriber;
}(Subscriber_1.Subscriber);
exports.ReduceSubscriber = ReduceSubscriber;
//# sourceMappingURL=reduce.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/merge.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1923');
var merge_1 = require('1924');
Observable_1.Observable.prototype.merge = merge_1.merge;
//# sourceMappingURL=merge.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/mergeAll.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1929');
var mergeAll_1 = require('1930');
Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
//# sourceMappingURL=mergeAll.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/mergeMap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1927');
var mergeMap_1 = require('1928');
Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
//# sourceMappingURL=mergeMap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/mergeMapTo.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1931');
var mergeMapTo_1 = require('1932');
Observable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;
Observable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;
//# sourceMappingURL=mergeMapTo.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/mergeScan.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1935');
var mergeScan_1 = require('1936');
Observable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;
//# sourceMappingURL=mergeScan.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/mergeScan.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = require('2198');
var errorObject_1 = require('2199');
var subscribeToResult_1 = require('2200');
var OuterSubscriber_1 = require('2201');
/**
 * Applies an accumulator function over the source Observable where the
 * accumulator function itself returns an Observable, then each intermediate
 * Observable returned is merged into the output Observable.
 *
 * <span class="informal">It's like {@link scan}, but the Observables returned
 * by the accumulator are merged into the outer Observable.</span>
 *
 * @example <caption>Count the number of click events</caption>
 * const click$ = Rx.Observable.fromEvent(document, 'click');
 * const one$ = click$.mapTo(1);
 * const seed = 0;
 * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);
 * count$.subscribe(x => console.log(x));
 *
 * // Results:
 * 1
 * 2
 * 3
 * 4
 * // ...and so on for each click
 *
 * @param {function(acc: R, value: T): Observable<R>} accumulator
 * The accumulator function called on each source value.
 * @param seed The initial accumulation value.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of
 * input Observables being subscribed to concurrently.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method mergeScan
 * @owner Observable
 */
function mergeScan(accumulator, seed, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  return this.lift(new MergeScanOperator(accumulator, seed, concurrent));
}
exports.mergeScan = mergeScan;
var MergeScanOperator = function () {
  function MergeScanOperator(accumulator, seed, concurrent) {
    this.accumulator = accumulator;
    this.seed = seed;
    this.concurrent = concurrent;
  }
  MergeScanOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
  };
  return MergeScanOperator;
}();
exports.MergeScanOperator = MergeScanOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeScanSubscriber = function (_super) {
  __extends(MergeScanSubscriber, _super);
  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
    _super.call(this, destination);
    this.accumulator = accumulator;
    this.acc = acc;
    this.concurrent = concurrent;
    this.hasValue = false;
    this.hasCompleted = false;
    this.buffer = [];
    this.active = 0;
    this.index = 0;
  }
  MergeScanSubscriber.prototype._next = function (value) {
    if (this.active < this.concurrent) {
      var index = this.index++;
      var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);
      var destination = this.destination;
      if (ish === errorObject_1.errorObject) {
        destination.error(errorObject_1.errorObject.e);
      } else {
        this.active++;
        this._innerSub(ish, value, index);
      }
    } else {
      this.buffer.push(value);
    }
  };
  MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
  };
  MergeScanSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.active === 0 && this.buffer.length === 0) {
      if (this.hasValue === false) {
        this.destination.next(this.acc);
      }
      this.destination.complete();
    }
  };
  MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    var destination = this.destination;
    this.acc = innerValue;
    this.hasValue = true;
    destination.next(innerValue);
  };
  MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
    var buffer = this.buffer;
    this.remove(innerSub);
    this.active--;
    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      if (this.hasValue === false) {
        this.destination.next(this.acc);
      }
      this.destination.complete();
    }
  };
  return MergeScanSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeScanSubscriber = MergeScanSubscriber;
//# sourceMappingURL=mergeScan.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/min.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1933');
var min_1 = require('1934');
Observable_1.Observable.prototype.min = min_1.min;
//# sourceMappingURL=min.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/min.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var reduce_1 = require('2197');
/**
 * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the smallest value.
 *
 * <img src="./img/min.png" width="100%">
 *
 * @example <caption>Get the minimal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .min()
 *   .subscribe(x => console.log(x)); // -> 2
 *
 * @example <caption>Use a comparer function to get the minimal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'
 * }
 *
 * @see {@link max}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable<R>} An Observable that emits item with the smallest value.
 * @method min
 * @owner Observable
 */
function min(comparer) {
  var min = typeof comparer === 'function' ? function (x, y) {
    return comparer(x, y) < 0 ? x : y;
  } : function (x, y) {
    return x < y ? x : y;
  };
  return this.lift(new reduce_1.ReduceOperator(min));
}
exports.min = min;
//# sourceMappingURL=min.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/multicast.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1941');
var multicast_1 = require('1942');
Observable_1.Observable.prototype.multicast = multicast_1.multicast;
//# sourceMappingURL=multicast.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/multicast.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var ConnectableObservable_1 = require('2206');
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} An Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
  var subjectFactory;
  if (typeof subjectOrSubjectFactory === 'function') {
    subjectFactory = subjectOrSubjectFactory;
  } else {
    subjectFactory = function subjectFactory() {
      return subjectOrSubjectFactory;
    };
  }
  if (typeof selector === 'function') {
    return this.lift(new MulticastOperator(subjectFactory, selector));
  }
  var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
  connectable.source = this;
  connectable.subjectFactory = subjectFactory;
  return connectable;
}
exports.multicast = multicast;
var MulticastOperator = function () {
  function MulticastOperator(subjectFactory, selector) {
    this.subjectFactory = subjectFactory;
    this.selector = selector;
  }
  MulticastOperator.prototype.call = function (subscriber, source) {
    var selector = this.selector;
    var subject = this.subjectFactory();
    var subscription = selector(subject).subscribe(subscriber);
    subscription.add(source.subscribe(subject));
    return subscription;
  };
  return MulticastOperator;
}();
exports.MulticastOperator = MulticastOperator;
//# sourceMappingURL=multicast.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/ConnectableObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('1760');
var Observable_1 = require('1761');
var Subscriber_1 = require('1762');
var Subscription_1 = require('1763');
/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = function (_super) {
  __extends(ConnectableObservable, _super);
  function ConnectableObservable(source, subjectFactory) {
    _super.call(this);
    this.source = source;
    this.subjectFactory = subjectFactory;
    this._refCount = 0;
    this._isComplete = false;
  }
  ConnectableObservable.prototype._subscribe = function (subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable.prototype.getSubject = function () {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable.prototype.connect = function () {
    var connection = this._connection;
    if (!connection) {
      this._isComplete = false;
      connection = this._connection = new Subscription_1.Subscription();
      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription_1.Subscription.EMPTY;
      } else {
        this._connection = connection;
      }
    }
    return connection;
  };
  ConnectableObservable.prototype.refCount = function () {
    return this.lift(new RefCountOperator(this));
  };
  return ConnectableObservable;
}(Observable_1.Observable);
exports.ConnectableObservable = ConnectableObservable;
var connectableProto = ConnectableObservable.prototype;
exports.connectableObservableDescriptor = {
  operator: { value: null },
  _refCount: { value: 0, writable: true },
  _subject: { value: null, writable: true },
  _connection: { value: null, writable: true },
  _subscribe: { value: connectableProto._subscribe },
  _isComplete: { value: connectableProto._isComplete, writable: true },
  getSubject: { value: connectableProto.getSubject },
  connect: { value: connectableProto.connect },
  refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = function (_super) {
  __extends(ConnectableSubscriber, _super);
  function ConnectableSubscriber(destination, connectable) {
    _super.call(this, destination);
    this.connectable = connectable;
  }
  ConnectableSubscriber.prototype._error = function (err) {
    this._unsubscribe();
    _super.prototype._error.call(this, err);
  };
  ConnectableSubscriber.prototype._complete = function () {
    this.connectable._isComplete = true;
    this._unsubscribe();
    _super.prototype._complete.call(this);
  };
  ConnectableSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;
    if (connectable) {
      this.connectable = null;
      var connection = connectable._connection;
      connectable._refCount = 0;
      connectable._subject = null;
      connectable._connection = null;
      if (connection) {
        connection.unsubscribe();
      }
    }
  };
  return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber);
var RefCountOperator = function () {
  function RefCountOperator(connectable) {
    this.connectable = connectable;
  }
  RefCountOperator.prototype.call = function (subscriber, source) {
    var connectable = this.connectable;
    connectable._refCount++;
    var refCounter = new RefCountSubscriber(subscriber, connectable);
    var subscription = source.subscribe(refCounter);
    if (!refCounter.closed) {
      refCounter.connection = connectable.connect();
    }
    return subscription;
  };
  return RefCountOperator;
}();
var RefCountSubscriber = function (_super) {
  __extends(RefCountSubscriber, _super);
  function RefCountSubscriber(destination, connectable) {
    _super.call(this, destination);
    this.connectable = connectable;
  }
  RefCountSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;
    if (!connectable) {
      this.connection = null;
      return;
    }
    this.connectable = null;
    var refCount = connectable._refCount;
    if (refCount <= 0) {
      this.connection = null;
      return;
    }
    connectable._refCount = refCount - 1;
    if (refCount > 1) {
      this.connection = null;
      return;
    }
    ///
    // Compare the local RefCountSubscriber's connection Subscription to the
    // connection Subscription on the shared ConnectableObservable. In cases
    // where the ConnectableObservable source synchronously emits values, and
    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
    // execution continues to here before the RefCountOperator has a chance to
    // supply the RefCountSubscriber with the shared connection Subscription.
    // For example:
    // ```
    // Observable.range(0, 10)
    //   .publish()
    //   .refCount()
    //   .take(5)
    //   .subscribe();
    // ```
    // In order to account for this case, RefCountSubscriber should only dispose
    // the ConnectableObservable's shared connection Subscription if the
    // connection Subscription exists, *and* either:
    //   a. RefCountSubscriber doesn't have a reference to the shared connection
    //      Subscription yet, or,
    //   b. RefCountSubscriber's connection Subscription reference is identical
    //      to the shared connection Subscription
    ///
    var connection = this.connection;
    var sharedConnection = connectable._connection;
    this.connection = null;
    if (sharedConnection && (!connection || sharedConnection === connection)) {
      sharedConnection.unsubscribe();
    }
  };
  return RefCountSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=ConnectableObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/observeOn.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1939');
var observeOn_1 = require('1940');
Observable_1.Observable.prototype.observeOn = observeOn_1.observeOn;
//# sourceMappingURL=observeOn.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/onErrorResumeNext.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1937');
var onErrorResumeNext_1 = require('1938');
Observable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
//# sourceMappingURL=onErrorResumeNext.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/pairwise.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1943');
var pairwise_1 = require('1944');
Observable_1.Observable.prototype.pairwise = pairwise_1.pairwise;
//# sourceMappingURL=pairwise.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/pairwise.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2209');
/**
 * Groups pairs of consecutive emissions together and emits them as an array of
 * two values.
 *
 * <span class="informal">Puts the current value and previous value together as
 * an array, and emits that.</span>
 *
 * <img src="./img/pairwise.png" width="100%">
 *
 * The Nth emission from the source Observable will cause the output Observable
 * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
 * pair. For this reason, `pairwise` emits on the second and subsequent
 * emissions from the source Observable, but not on the first emission, because
 * there is no previous value in that case.
 *
 * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var pairs = clicks.pairwise();
 * var distance = pairs.map(pair => {
 *   var x0 = pair[0].clientX;
 *   var y0 = pair[0].clientY;
 *   var x1 = pair[1].clientX;
 *   var y1 = pair[1].clientY;
 *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
 * });
 * distance.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 *
 * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
 * consecutive values from the source Observable.
 * @method pairwise
 * @owner Observable
 */
function pairwise() {
  return this.lift(new PairwiseOperator());
}
exports.pairwise = pairwise;
var PairwiseOperator = function () {
  function PairwiseOperator() {}
  PairwiseOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new PairwiseSubscriber(subscriber));
  };
  return PairwiseOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var PairwiseSubscriber = function (_super) {
  __extends(PairwiseSubscriber, _super);
  function PairwiseSubscriber(destination) {
    _super.call(this, destination);
    this.hasPrev = false;
  }
  PairwiseSubscriber.prototype._next = function (value) {
    if (this.hasPrev) {
      this.destination.next([this.prev, value]);
    } else {
      this.hasPrev = true;
    }
    this.prev = value;
  };
  return PairwiseSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=pairwise.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/partition.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1945');
var partition_1 = require('1946');
Observable_1.Observable.prototype.partition = partition_1.partition;
//# sourceMappingURL=partition.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/partition.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var not_1 = require('2207');
var filter_1 = require('2208');
/**
 * Splits the source Observable into two, one with values that satisfy a
 * predicate, and another with values that don't satisfy the predicate.
 *
 * <span class="informal">It's like {@link filter}, but returns two Observables:
 * one like the output of {@link filter}, and the other with values that did not
 * pass the condition.</span>
 *
 * <img src="./img/partition.png" width="100%">
 *
 * `partition` outputs an array with two Observables that partition the values
 * from the source Observable through the given `predicate` function. The first
 * Observable in that array emits source values for which the predicate argument
 * returns true. The second Observable emits source values for which the
 * predicate returns false. The first behaves like {@link filter} and the second
 * behaves like {@link filter} with the predicate negated.
 *
 * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');
 * var clicksOnDivs = parts[0];
 * var clicksElsewhere = parts[1];
 * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));
 * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));
 *
 * @see {@link filter}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted on the first Observable in the returned array, if
 * `false` the value is emitted on the second Observable in the array. The
 * `index` parameter is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {[Observable<T>, Observable<T>]} An array with two Observables: one
 * with values that passed the predicate, and another with values that did not
 * pass the predicate.
 * @method partition
 * @owner Observable
 */
function partition(predicate, thisArg) {
  return [filter_1.filter.call(this, predicate, thisArg), filter_1.filter.call(this, not_1.not(predicate, thisArg))];
}
exports.partition = partition;
//# sourceMappingURL=partition.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/not.js", function(__filename, __dirname, require, module, exports) {
"use strict";

function not(pred, thisArg) {
  function notPred() {
    return !notPred.pred.apply(notPred.thisArg, arguments);
  }
  notPred.pred = pred;
  notPred.thisArg = thisArg;
  return notPred;
}
exports.not = not;
//# sourceMappingURL=not.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/pluck.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1949');
var pluck_1 = require('1950');
Observable_1.Observable.prototype.pluck = pluck_1.pluck;
//# sourceMappingURL=pluck.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/pluck.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var map_1 = require('2212');
/**
 * Maps each source value (an object) to its specified nested property.
 *
 * <span class="informal">Like {@link map}, but meant only for picking one of
 * the nested properties of every emitted object.</span>
 *
 * <img src="./img/pluck.png" width="100%">
 *
 * Given a list of strings describing a path to an object property, retrieves
 * the value of a specified nested property from all values in the source
 * Observable. If a property can't be resolved, it will return `undefined` for
 * that value.
 *
 * @example <caption>Map every click to the tagName of the clicked target element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var tagNames = clicks.pluck('target', 'tagName');
 * tagNames.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {...string} properties The nested properties to pluck from each source
 * value (an object).
 * @return {Observable} A new Observable of property values from the source values.
 * @method pluck
 * @owner Observable
 */
function pluck() {
  var properties = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    properties[_i - 0] = arguments[_i];
  }
  var length = properties.length;
  if (length === 0) {
    throw new Error('list of properties cannot be empty.');
  }
  return map_1.map.call(this, plucker(properties, length));
}
exports.pluck = pluck;
function plucker(props, length) {
  var mapper = function (x) {
    var currentProp = x;
    for (var i = 0; i < length; i++) {
      var p = currentProp[props[i]];
      if (typeof p !== 'undefined') {
        currentProp = p;
      } else {
        return undefined;
      }
    }
    return currentProp;
  };
  return mapper;
}
//# sourceMappingURL=pluck.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/publish.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1947');
var publish_1 = require('1948');
Observable_1.Observable.prototype.publish = publish_1.publish;
//# sourceMappingURL=publish.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/publish.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Subject_1 = require('2210');
var multicast_1 = require('2211');
/* tslint:enable:max-line-length */
/**
 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
 * before it begins emitting items to those Observers that have subscribed to it.
 *
 * <img src="./img/publish.png" width="100%">
 *
 * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times
 * as needed, without causing multiple subscriptions to the source sequence.
 * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
 * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
 * @method publish
 * @owner Observable
 */
function publish(selector) {
  return selector ? multicast_1.multicast.call(this, function () {
    return new Subject_1.Subject();
  }, selector) : multicast_1.multicast.call(this, new Subject_1.Subject());
}
exports.publish = publish;
//# sourceMappingURL=publish.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/publishBehavior.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1951');
var publishBehavior_1 = require('1952');
Observable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;
//# sourceMappingURL=publishBehavior.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/publishBehavior.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var BehaviorSubject_1 = require('2213');
var multicast_1 = require('2214');
/**
 * @param value
 * @return {ConnectableObservable<T>}
 * @method publishBehavior
 * @owner Observable
 */
function publishBehavior(value) {
  return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));
}
exports.publishBehavior = publishBehavior;
//# sourceMappingURL=publishBehavior.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/BehaviorSubject.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('1751');
var ObjectUnsubscribedError_1 = require('1752');
/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = function (_super) {
  __extends(BehaviorSubject, _super);
  function BehaviorSubject(_value) {
    _super.call(this);
    this._value = _value;
  }
  Object.defineProperty(BehaviorSubject.prototype, "value", {
    get: function () {
      return this.getValue();
    },
    enumerable: true,
    configurable: true
  });
  BehaviorSubject.prototype._subscribe = function (subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    if (subscription && !subscription.closed) {
      subscriber.next(this._value);
    }
    return subscription;
  };
  BehaviorSubject.prototype.getValue = function () {
    if (this.hasError) {
      throw this.thrownError;
    } else if (this.closed) {
      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
    } else {
      return this._value;
    }
  };
  BehaviorSubject.prototype.next = function (value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject;
}(Subject_1.Subject);
exports.BehaviorSubject = BehaviorSubject;
//# sourceMappingURL=BehaviorSubject.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/publishReplay.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1957');
var publishReplay_1 = require('1958');
Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;
//# sourceMappingURL=publishReplay.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/publishReplay.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var ReplaySubject_1 = require('2217');
var multicast_1 = require('2218');
/**
 * @param bufferSize
 * @param windowTime
 * @param scheduler
 * @return {ConnectableObservable<T>}
 * @method publishReplay
 * @owner Observable
 */
function publishReplay(bufferSize, windowTime, scheduler) {
  if (bufferSize === void 0) {
    bufferSize = Number.POSITIVE_INFINITY;
  }
  if (windowTime === void 0) {
    windowTime = Number.POSITIVE_INFINITY;
  }
  return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));
}
exports.publishReplay = publishReplay;
//# sourceMappingURL=publishReplay.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/publishLast.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1953');
var publishLast_1 = require('1954');
Observable_1.Observable.prototype.publishLast = publishLast_1.publishLast;
//# sourceMappingURL=publishLast.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/publishLast.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var AsyncSubject_1 = require('2215');
var multicast_1 = require('2216');
/**
 * @return {ConnectableObservable<T>}
 * @method publishLast
 * @owner Observable
 */
function publishLast() {
  return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());
}
exports.publishLast = publishLast;
//# sourceMappingURL=publishLast.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/race.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1955');
var race_1 = require('1956');
Observable_1.Observable.prototype.race = race_1.race;
//# sourceMappingURL=race.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/reduce.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1959');
var reduce_1 = require('1960');
Observable_1.Observable.prototype.reduce = reduce_1.reduce;
//# sourceMappingURL=reduce.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/repeat.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1961');
var repeat_1 = require('1962');
Observable_1.Observable.prototype.repeat = repeat_1.repeat;
//# sourceMappingURL=repeat.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/repeat.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2219');
var EmptyObservable_1 = require('2220');
/**
 * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.
 *
 * <img src="./img/repeat.png" width="100%">
 *
 * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield
 * an empty Observable.
 * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most
 * count times.
 * @method repeat
 * @owner Observable
 */
function repeat(count) {
  if (count === void 0) {
    count = -1;
  }
  if (count === 0) {
    return new EmptyObservable_1.EmptyObservable();
  } else if (count < 0) {
    return this.lift(new RepeatOperator(-1, this));
  } else {
    return this.lift(new RepeatOperator(count - 1, this));
  }
}
exports.repeat = repeat;
var RepeatOperator = function () {
  function RepeatOperator(count, source) {
    this.count = count;
    this.source = source;
  }
  RepeatOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
  };
  return RepeatOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatSubscriber = function (_super) {
  __extends(RepeatSubscriber, _super);
  function RepeatSubscriber(destination, count, source) {
    _super.call(this, destination);
    this.count = count;
    this.source = source;
  }
  RepeatSubscriber.prototype.complete = function () {
    if (!this.isStopped) {
      var _a = this,
          source = _a.source,
          count = _a.count;
      if (count === 0) {
        return _super.prototype.complete.call(this);
      } else if (count > -1) {
        this.count = count - 1;
      }
      source.subscribe(this._unsubscribeAndRecycle());
    }
  };
  return RepeatSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=repeat.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/repeatWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1965');
var repeatWhen_1 = require('1966');
Observable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;
//# sourceMappingURL=repeatWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/repeatWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('2227');
var tryCatch_1 = require('2228');
var errorObject_1 = require('2229');
var OuterSubscriber_1 = require('2230');
var subscribeToResult_1 = require('2231');
/**
 * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source
 * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable
 * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise
 * this method will resubscribe to the source Observable.
 *
 * <img src="./img/repeatWhen.png" width="100%">
 *
 * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with
 * which a user can `complete` or `error`, aborting the repetition.
 * @return {Observable} The source Observable modified with repeat logic.
 * @method repeatWhen
 * @owner Observable
 */
function repeatWhen(notifier) {
  return this.lift(new RepeatWhenOperator(notifier));
}
exports.repeatWhen = repeatWhen;
var RepeatWhenOperator = function () {
  function RepeatWhenOperator(notifier) {
    this.notifier = notifier;
  }
  RepeatWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
  };
  return RepeatWhenOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatWhenSubscriber = function (_super) {
  __extends(RepeatWhenSubscriber, _super);
  function RepeatWhenSubscriber(destination, notifier, source) {
    _super.call(this, destination);
    this.notifier = notifier;
    this.source = source;
    this.sourceIsBeingSubscribedTo = true;
  }
  RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.sourceIsBeingSubscribedTo = true;
    this.source.subscribe(this);
  };
  RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
    if (this.sourceIsBeingSubscribedTo === false) {
      return _super.prototype.complete.call(this);
    }
  };
  RepeatWhenSubscriber.prototype.complete = function () {
    this.sourceIsBeingSubscribedTo = false;
    if (!this.isStopped) {
      if (!this.retries) {
        this.subscribeToRetries();
      } else if (this.retriesSubscription.closed) {
        return _super.prototype.complete.call(this);
      }
      this._unsubscribeAndRecycle();
      this.notifications.next();
    }
  };
  RepeatWhenSubscriber.prototype._unsubscribe = function () {
    var _a = this,
        notifications = _a.notifications,
        retriesSubscription = _a.retriesSubscription;
    if (notifications) {
      notifications.unsubscribe();
      this.notifications = null;
    }
    if (retriesSubscription) {
      retriesSubscription.unsubscribe();
      this.retriesSubscription = null;
    }
    this.retries = null;
  };
  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
    var _a = this,
        notifications = _a.notifications,
        retries = _a.retries,
        retriesSubscription = _a.retriesSubscription;
    this.notifications = null;
    this.retries = null;
    this.retriesSubscription = null;
    _super.prototype._unsubscribeAndRecycle.call(this);
    this.notifications = notifications;
    this.retries = retries;
    this.retriesSubscription = retriesSubscription;
    return this;
  };
  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
    this.notifications = new Subject_1.Subject();
    var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);
    if (retries === errorObject_1.errorObject) {
      return _super.prototype.complete.call(this);
    }
    this.retries = retries;
    this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
  };
  return RepeatWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=repeatWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/retry.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1963');
var retry_1 = require('1964');
Observable_1.Observable.prototype.retry = retry_1.retry;
//# sourceMappingURL=retry.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/retry.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2226');
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given
 * as a number parameter) rather than propagating the `error` call.
 *
 * <img src="./img/retry.png" width="100%">
 *
 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
 * @param {number} count - Number of retry attempts before failing.
 * @return {Observable} The source Observable modified with the retry logic.
 * @method retry
 * @owner Observable
 */
function retry(count) {
  if (count === void 0) {
    count = -1;
  }
  return this.lift(new RetryOperator(count, this));
}
exports.retry = retry;
var RetryOperator = function () {
  function RetryOperator(count, source) {
    this.count = count;
    this.source = source;
  }
  RetryOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
  };
  return RetryOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetrySubscriber = function (_super) {
  __extends(RetrySubscriber, _super);
  function RetrySubscriber(destination, count, source) {
    _super.call(this, destination);
    this.count = count;
    this.source = source;
  }
  RetrySubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var _a = this,
          source = _a.source,
          count = _a.count;
      if (count === 0) {
        return _super.prototype.error.call(this, err);
      } else if (count > -1) {
        this.count = count - 1;
      }
      source.subscribe(this._unsubscribeAndRecycle());
    }
  };
  return RetrySubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=retry.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/retryWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1969');
var retryWhen_1 = require('1970');
Observable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;
//# sourceMappingURL=retryWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/retryWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('2236');
var tryCatch_1 = require('2237');
var errorObject_1 = require('2238');
var OuterSubscriber_1 = require('2239');
var subscribeToResult_1 = require('2240');
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.
 * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child
 * subscription. Otherwise this method will resubscribe to the source Observable.
 *
 * <img src="./img/retryWhen.png" width="100%">
 *
 * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a
 * user can `complete` or `error`, aborting the retry.
 * @return {Observable} The source Observable modified with retry logic.
 * @method retryWhen
 * @owner Observable
 */
function retryWhen(notifier) {
  return this.lift(new RetryWhenOperator(notifier, this));
}
exports.retryWhen = retryWhen;
var RetryWhenOperator = function () {
  function RetryWhenOperator(notifier, source) {
    this.notifier = notifier;
    this.source = source;
  }
  RetryWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
  };
  return RetryWhenOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetryWhenSubscriber = function (_super) {
  __extends(RetryWhenSubscriber, _super);
  function RetryWhenSubscriber(destination, notifier, source) {
    _super.call(this, destination);
    this.notifier = notifier;
    this.source = source;
  }
  RetryWhenSubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var errors = this.errors;
      var retries = this.retries;
      var retriesSubscription = this.retriesSubscription;
      if (!retries) {
        errors = new Subject_1.Subject();
        retries = tryCatch_1.tryCatch(this.notifier)(errors);
        if (retries === errorObject_1.errorObject) {
          return _super.prototype.error.call(this, errorObject_1.errorObject.e);
        }
        retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
      } else {
        this.errors = null;
        this.retriesSubscription = null;
      }
      this._unsubscribeAndRecycle();
      this.errors = errors;
      this.retries = retries;
      this.retriesSubscription = retriesSubscription;
      errors.next(err);
    }
  };
  RetryWhenSubscriber.prototype._unsubscribe = function () {
    var _a = this,
        errors = _a.errors,
        retriesSubscription = _a.retriesSubscription;
    if (errors) {
      errors.unsubscribe();
      this.errors = null;
    }
    if (retriesSubscription) {
      retriesSubscription.unsubscribe();
      this.retriesSubscription = null;
    }
    this.retries = null;
  };
  RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    var _a = this,
        errors = _a.errors,
        retries = _a.retries,
        retriesSubscription = _a.retriesSubscription;
    this.errors = null;
    this.retries = null;
    this.retriesSubscription = null;
    this._unsubscribeAndRecycle();
    this.errors = errors;
    this.retries = retries;
    this.retriesSubscription = retriesSubscription;
    this.source.subscribe(this);
  };
  return RetryWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=retryWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/sample.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1967');
var sample_1 = require('1968');
Observable_1.Observable.prototype.sample = sample_1.sample;
//# sourceMappingURL=sample.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/sample.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2234');
var subscribeToResult_1 = require('2235');
/**
 * Emits the most recently emitted value from the source Observable whenever
 * another Observable, the `notifier`, emits.
 *
 * <span class="informal">It's like {@link sampleTime}, but samples whenever
 * the `notifier` Observable emits something.</span>
 *
 * <img src="./img/sample.png" width="100%">
 *
 * Whenever the `notifier` Observable emits a value or completes, `sample`
 * looks at the source Observable and emits whichever value it has most recently
 * emitted since the previous sampling, unless the source has not emitted
 * anything since the previous sampling. The `notifier` is subscribed to as soon
 * as the output Observable is subscribed.
 *
 * @example <caption>On every click, sample the most recent "seconds" timer</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = seconds.sample(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {Observable<any>} notifier The Observable to use for sampling the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable whenever the notifier Observable
 * emits value or completes.
 * @method sample
 * @owner Observable
 */
function sample(notifier) {
  return this.lift(new SampleOperator(notifier));
}
exports.sample = sample;
var SampleOperator = function () {
  function SampleOperator(notifier) {
    this.notifier = notifier;
  }
  SampleOperator.prototype.call = function (subscriber, source) {
    var sampleSubscriber = new SampleSubscriber(subscriber);
    var subscription = source.subscribe(sampleSubscriber);
    subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));
    return subscription;
  };
  return SampleOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleSubscriber = function (_super) {
  __extends(SampleSubscriber, _super);
  function SampleSubscriber() {
    _super.apply(this, arguments);
    this.hasValue = false;
  }
  SampleSubscriber.prototype._next = function (value) {
    this.value = value;
    this.hasValue = true;
  };
  SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.emitValue();
  };
  SampleSubscriber.prototype.notifyComplete = function () {
    this.emitValue();
  };
  SampleSubscriber.prototype.emitValue = function () {
    if (this.hasValue) {
      this.hasValue = false;
      this.destination.next(this.value);
    }
  };
  return SampleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=sample.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/sampleTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1971');
var sampleTime_1 = require('1972');
Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
//# sourceMappingURL=sampleTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/sampleTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2232');
var async_1 = require('2233');
/**
 * Emits the most recently emitted value from the source Observable within
 * periodic time intervals.
 *
 * <span class="informal">Samples the source Observable at periodic time
 * intervals, emitting what it samples.</span>
 *
 * <img src="./img/sampleTime.png" width="100%">
 *
 * `sampleTime` periodically looks at the source Observable and emits whichever
 * value it has most recently emitted since the previous sampling, unless the
 * source has not emitted anything since the previous sampling. The sampling
 * happens periodically in time every `period` milliseconds (or the time unit
 * defined by the optional `scheduler` argument). The sampling starts as soon as
 * the output Observable is subscribed.
 *
 * @example <caption>Every second, emit the most recent click at most once</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.sampleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {number} period The sampling period expressed in milliseconds or the
 * time unit determined internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the sampling.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable at the specified time interval.
 * @method sampleTime
 * @owner Observable
 */
function sampleTime(period, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1.async;
  }
  return this.lift(new SampleTimeOperator(period, scheduler));
}
exports.sampleTime = sampleTime;
var SampleTimeOperator = function () {
  function SampleTimeOperator(period, scheduler) {
    this.period = period;
    this.scheduler = scheduler;
  }
  SampleTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
  };
  return SampleTimeOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleTimeSubscriber = function (_super) {
  __extends(SampleTimeSubscriber, _super);
  function SampleTimeSubscriber(destination, period, scheduler) {
    _super.call(this, destination);
    this.period = period;
    this.scheduler = scheduler;
    this.hasValue = false;
    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));
  }
  SampleTimeSubscriber.prototype._next = function (value) {
    this.lastValue = value;
    this.hasValue = true;
  };
  SampleTimeSubscriber.prototype.notifyNext = function () {
    if (this.hasValue) {
      this.hasValue = false;
      this.destination.next(this.lastValue);
    }
  };
  return SampleTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNotification(state) {
  var subscriber = state.subscriber,
      period = state.period;
  subscriber.notifyNext();
  this.schedule(state, period);
}
//# sourceMappingURL=sampleTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/scan.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1973');
var scan_1 = require('1974');
Observable_1.Observable.prototype.scan = scan_1.scan;
//# sourceMappingURL=scan.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/scan.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2241');
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan(accumulator, seed) {
  var hasSeed = false;
  // providing a seed of `undefined` *should* be valid and trigger
  // hasSeed! so don't use `seed !== undefined` checks!
  // For this reason, we have to check it here at the original call site
  // otherwise inside Operator/Subscriber we won't know if `undefined`
  // means they didn't provide anything or if they literally provided `undefined`
  if (arguments.length >= 2) {
    hasSeed = true;
  }
  return this.lift(new ScanOperator(accumulator, seed, hasSeed));
}
exports.scan = scan;
var ScanOperator = function () {
  function ScanOperator(accumulator, seed, hasSeed) {
    if (hasSeed === void 0) {
      hasSeed = false;
    }
    this.accumulator = accumulator;
    this.seed = seed;
    this.hasSeed = hasSeed;
  }
  ScanOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
  };
  return ScanOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ScanSubscriber = function (_super) {
  __extends(ScanSubscriber, _super);
  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
    _super.call(this, destination);
    this.accumulator = accumulator;
    this._seed = _seed;
    this.hasSeed = hasSeed;
    this.index = 0;
  }
  Object.defineProperty(ScanSubscriber.prototype, "seed", {
    get: function () {
      return this._seed;
    },
    set: function (value) {
      this.hasSeed = true;
      this._seed = value;
    },
    enumerable: true,
    configurable: true
  });
  ScanSubscriber.prototype._next = function (value) {
    if (!this.hasSeed) {
      this.seed = value;
      this.destination.next(value);
    } else {
      return this._tryNext(value);
    }
  };
  ScanSubscriber.prototype._tryNext = function (value) {
    var index = this.index++;
    var result;
    try {
      result = this.accumulator(this.seed, value, index);
    } catch (err) {
      this.destination.error(err);
    }
    this.seed = result;
    this.destination.next(result);
  };
  return ScanSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=scan.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/sequenceEqual.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1975');
var sequenceEqual_1 = require('1976');
Observable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;
//# sourceMappingURL=sequenceEqual.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/sequenceEqual.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2242');
var tryCatch_1 = require('2243');
var errorObject_1 = require('2244');
/**
 * Compares all values of two observables in sequence using an optional comparor function
 * and returns an observable of a single boolean value representing whether or not the two sequences
 * are equal.
 *
 * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>
 *
 * <img src="./img/sequenceEqual.png" width="100%">
 *
 * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either
 * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom
 * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the
 * observables completes, the operator will wait for the other observable to complete; If the other
 * observable emits before completing, the returned observable will emit `false` and complete. If one observable never
 * completes or emits after the other complets, the returned observable will never complete.
 *
 * @example <caption>figure out if the Konami code matches</caption>
 * var code = Rx.Observable.from([
 *  "ArrowUp",
 *  "ArrowUp",
 *  "ArrowDown",
 *  "ArrowDown",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "KeyB",
 *  "KeyA",
 *  "Enter" // no start key, clearly.
 * ]);
 *
 * var keys = Rx.Observable.fromEvent(document, 'keyup')
 *  .map(e => e.code);
 * var matches = keys.bufferCount(11, 1)
 *  .mergeMap(
 *    last11 =>
 *      Rx.Observable.from(last11)
 *        .sequenceEqual(code)
 *   );
 * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 * @see {@link withLatestFrom}
 *
 * @param {Observable} compareTo The observable sequence to compare the source sequence to.
 * @param {function} [comparor] An optional function to compare each value pair
 * @return {Observable} An Observable of a single boolean value representing whether or not
 * the values emitted by both observables were equal in sequence.
 * @method sequenceEqual
 * @owner Observable
 */
function sequenceEqual(compareTo, comparor) {
  return this.lift(new SequenceEqualOperator(compareTo, comparor));
}
exports.sequenceEqual = sequenceEqual;
var SequenceEqualOperator = function () {
  function SequenceEqualOperator(compareTo, comparor) {
    this.compareTo = compareTo;
    this.comparor = comparor;
  }
  SequenceEqualOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
  };
  return SequenceEqualOperator;
}();
exports.SequenceEqualOperator = SequenceEqualOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SequenceEqualSubscriber = function (_super) {
  __extends(SequenceEqualSubscriber, _super);
  function SequenceEqualSubscriber(destination, compareTo, comparor) {
    _super.call(this, destination);
    this.compareTo = compareTo;
    this.comparor = comparor;
    this._a = [];
    this._b = [];
    this._oneComplete = false;
    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
  }
  SequenceEqualSubscriber.prototype._next = function (value) {
    if (this._oneComplete && this._b.length === 0) {
      this.emit(false);
    } else {
      this._a.push(value);
      this.checkValues();
    }
  };
  SequenceEqualSubscriber.prototype._complete = function () {
    if (this._oneComplete) {
      this.emit(this._a.length === 0 && this._b.length === 0);
    } else {
      this._oneComplete = true;
    }
  };
  SequenceEqualSubscriber.prototype.checkValues = function () {
    var _c = this,
        _a = _c._a,
        _b = _c._b,
        comparor = _c.comparor;
    while (_a.length > 0 && _b.length > 0) {
      var a = _a.shift();
      var b = _b.shift();
      var areEqual = false;
      if (comparor) {
        areEqual = tryCatch_1.tryCatch(comparor)(a, b);
        if (areEqual === errorObject_1.errorObject) {
          this.destination.error(errorObject_1.errorObject.e);
        }
      } else {
        areEqual = a === b;
      }
      if (!areEqual) {
        this.emit(false);
      }
    }
  };
  SequenceEqualSubscriber.prototype.emit = function (value) {
    var destination = this.destination;
    destination.next(value);
    destination.complete();
  };
  SequenceEqualSubscriber.prototype.nextB = function (value) {
    if (this._oneComplete && this._a.length === 0) {
      this.emit(false);
    } else {
      this._b.push(value);
      this.checkValues();
    }
  };
  return SequenceEqualSubscriber;
}(Subscriber_1.Subscriber);
exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
var SequenceEqualCompareToSubscriber = function (_super) {
  __extends(SequenceEqualCompareToSubscriber, _super);
  function SequenceEqualCompareToSubscriber(destination, parent) {
    _super.call(this, destination);
    this.parent = parent;
  }
  SequenceEqualCompareToSubscriber.prototype._next = function (value) {
    this.parent.nextB(value);
  };
  SequenceEqualCompareToSubscriber.prototype._error = function (err) {
    this.parent.error(err);
  };
  SequenceEqualCompareToSubscriber.prototype._complete = function () {
    this.parent._complete();
  };
  return SequenceEqualCompareToSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=sequenceEqual.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/share.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1977');
var share_1 = require('1978');
Observable_1.Observable.prototype.share = share_1.share;
//# sourceMappingURL=share.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/share.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var multicast_1 = require('2249');
var Subject_1 = require('2250');
function shareSubjectFactory() {
  return new Subject_1.Subject();
}
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .publish().refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
  return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
}
exports.share = share;
;
//# sourceMappingURL=share.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/shareReplay.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1979');
var shareReplay_1 = require('1980');
Observable_1.Observable.prototype.shareReplay = shareReplay_1.shareReplay;
//# sourceMappingURL=shareReplay.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/shareReplay.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var multicast_1 = require('2245');
var ReplaySubject_1 = require('2246');
/**
 * @method shareReplay
 * @owner Observable
 */
function shareReplay(bufferSize, windowTime, scheduler) {
  var subject;
  var connectable = multicast_1.multicast.call(this, function shareReplaySubjectFactory() {
    if (this._isComplete) {
      return subject;
    } else {
      return subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
    }
  });
  return connectable.refCount();
}
exports.shareReplay = shareReplay;
;
//# sourceMappingURL=shareReplay.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/single.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1981');
var single_1 = require('1982');
Observable_1.Observable.prototype.single = single_1.single;
//# sourceMappingURL=single.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/single.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2251');
var EmptyError_1 = require('2252');
/**
 * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
 * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
 * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.
 *
 * <img src="./img/single.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches
 * the predicate.
 .
 * @method single
 * @owner Observable
 */
function single(predicate) {
  return this.lift(new SingleOperator(predicate, this));
}
exports.single = single;
var SingleOperator = function () {
  function SingleOperator(predicate, source) {
    this.predicate = predicate;
    this.source = source;
  }
  SingleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
  };
  return SingleOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SingleSubscriber = function (_super) {
  __extends(SingleSubscriber, _super);
  function SingleSubscriber(destination, predicate, source) {
    _super.call(this, destination);
    this.predicate = predicate;
    this.source = source;
    this.seenValue = false;
    this.index = 0;
  }
  SingleSubscriber.prototype.applySingleValue = function (value) {
    if (this.seenValue) {
      this.destination.error('Sequence contains more than one element');
    } else {
      this.seenValue = true;
      this.singleValue = value;
    }
  };
  SingleSubscriber.prototype._next = function (value) {
    var index = this.index++;
    if (this.predicate) {
      this.tryNext(value, index);
    } else {
      this.applySingleValue(value);
    }
  };
  SingleSubscriber.prototype.tryNext = function (value, index) {
    try {
      if (this.predicate(value, index, this.source)) {
        this.applySingleValue(value);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  SingleSubscriber.prototype._complete = function () {
    var destination = this.destination;
    if (this.index > 0) {
      destination.next(this.seenValue ? this.singleValue : undefined);
      destination.complete();
    } else {
      destination.error(new EmptyError_1.EmptyError());
    }
  };
  return SingleSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=single.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/skip.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1983');
var skip_1 = require('1984');
Observable_1.Observable.prototype.skip = skip_1.skip;
//# sourceMappingURL=skip.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/skip.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2253');
/**
 * Returns an Observable that skips the first `count` items emitted by the source Observable.
 *
 * <img src="./img/skip.png" width="100%">
 *
 * @param {Number} count - The number of times, items emitted by source Observable should be skipped.
 * @return {Observable} An Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */
function skip(count) {
  return this.lift(new SkipOperator(count));
}
exports.skip = skip;
var SkipOperator = function () {
  function SkipOperator(total) {
    this.total = total;
  }
  SkipOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SkipSubscriber(subscriber, this.total));
  };
  return SkipOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipSubscriber = function (_super) {
  __extends(SkipSubscriber, _super);
  function SkipSubscriber(destination, total) {
    _super.call(this, destination);
    this.total = total;
    this.count = 0;
  }
  SkipSubscriber.prototype._next = function (x) {
    if (++this.count > this.total) {
      this.destination.next(x);
    }
  };
  return SkipSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=skip.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/skipLast.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1987');
var skipLast_1 = require('1988');
Observable_1.Observable.prototype.skipLast = skipLast_1.skipLast;
//# sourceMappingURL=skipLast.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/skipLast.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2254');
var ArgumentOutOfRangeError_1 = require('2255');
/**
 * Skip the last `count` values emitted by the source Observable.
 *
 * <img src="./img/skipLast.png" width="100%">
 *
 * `skipLast` returns an Observable that accumulates a queue with a length
 * enough to store the first `count` values. As more values are received,
 * values are taken from the front of the queue and produced on the result
 * sequence. This causes values to be delayed.
 *
 * @example <caption>Skip the last 2 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 5);
 * var skipLastTwo = many.skipLast(2);
 * skipLastTwo.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 1 2 3
 *
 * @see {@link skip}
 * @see {@link skipUntil}
 * @see {@link skipWhile}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws
 * ArgumentOutOrRangeError if `i < 0`.
 *
 * @param {number} count Number of elements to skip from the end of the source Observable.
 * @returns {Observable<T>} An Observable that skips the last count values
 * emitted by the source Observable.
 * @method skipLast
 * @owner Observable
 */
function skipLast(count) {
  return this.lift(new SkipLastOperator(count));
}
exports.skipLast = skipLast;
var SkipLastOperator = function () {
  function SkipLastOperator(_skipCount) {
    this._skipCount = _skipCount;
    if (this._skipCount < 0) {
      throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
    }
  }
  SkipLastOperator.prototype.call = function (subscriber, source) {
    if (this._skipCount === 0) {
      // If we don't want to skip any values then just subscribe
      // to Subscriber without any further logic.
      return source.subscribe(new Subscriber_1.Subscriber(subscriber));
    } else {
      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
    }
  };
  return SkipLastOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipLastSubscriber = function (_super) {
  __extends(SkipLastSubscriber, _super);
  function SkipLastSubscriber(destination, _skipCount) {
    _super.call(this, destination);
    this._skipCount = _skipCount;
    this._count = 0;
    this._ring = new Array(_skipCount);
  }
  SkipLastSubscriber.prototype._next = function (value) {
    var skipCount = this._skipCount;
    var count = this._count++;
    if (count < skipCount) {
      this._ring[count] = value;
    } else {
      var currentIndex = count % skipCount;
      var ring = this._ring;
      var oldValue = ring[currentIndex];
      ring[currentIndex] = value;
      this.destination.next(oldValue);
    }
  };
  return SkipLastSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=skipLast.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/skipUntil.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1985');
var skipUntil_1 = require('1986');
Observable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;
//# sourceMappingURL=skipUntil.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/skipUntil.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2247');
var subscribeToResult_1 = require('2248');
/**
 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
 *
 * <img src="./img/skipUntil.png" width="100%">
 *
 * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to
 * be mirrored by the resulting Observable.
 * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits
 * an item, then emits the remaining items.
 * @method skipUntil
 * @owner Observable
 */
function skipUntil(notifier) {
  return this.lift(new SkipUntilOperator(notifier));
}
exports.skipUntil = skipUntil;
var SkipUntilOperator = function () {
  function SkipUntilOperator(notifier) {
    this.notifier = notifier;
  }
  SkipUntilOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));
  };
  return SkipUntilOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipUntilSubscriber = function (_super) {
  __extends(SkipUntilSubscriber, _super);
  function SkipUntilSubscriber(destination, notifier) {
    _super.call(this, destination);
    this.hasValue = false;
    this.isInnerStopped = false;
    this.add(subscribeToResult_1.subscribeToResult(this, notifier));
  }
  SkipUntilSubscriber.prototype._next = function (value) {
    if (this.hasValue) {
      _super.prototype._next.call(this, value);
    }
  };
  SkipUntilSubscriber.prototype._complete = function () {
    if (this.isInnerStopped) {
      _super.prototype._complete.call(this);
    } else {
      this.unsubscribe();
    }
  };
  SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.hasValue = true;
  };
  SkipUntilSubscriber.prototype.notifyComplete = function () {
    this.isInnerStopped = true;
    if (this.isStopped) {
      _super.prototype._complete.call(this);
    }
  };
  return SkipUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=skipUntil.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/skipWhile.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1993');
var skipWhile_1 = require('1994');
Observable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;
//# sourceMappingURL=skipWhile.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/skipWhile.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2261');
/**
 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
 * true, but emits all further source items as soon as the condition becomes false.
 *
 * <img src="./img/skipWhile.png" width="100%">
 *
 * @param {Function} predicate - A function to test each item emitted from the source Observable.
 * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the
 * specified predicate becomes false.
 * @method skipWhile
 * @owner Observable
 */
function skipWhile(predicate) {
  return this.lift(new SkipWhileOperator(predicate));
}
exports.skipWhile = skipWhile;
var SkipWhileOperator = function () {
  function SkipWhileOperator(predicate) {
    this.predicate = predicate;
  }
  SkipWhileOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
  };
  return SkipWhileOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipWhileSubscriber = function (_super) {
  __extends(SkipWhileSubscriber, _super);
  function SkipWhileSubscriber(destination, predicate) {
    _super.call(this, destination);
    this.predicate = predicate;
    this.skipping = true;
    this.index = 0;
  }
  SkipWhileSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    if (this.skipping) {
      this.tryCallPredicate(value);
    }
    if (!this.skipping) {
      destination.next(value);
    }
  };
  SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
    try {
      var result = this.predicate(value, this.index++);
      this.skipping = Boolean(result);
    } catch (err) {
      this.destination.error(err);
    }
  };
  return SkipWhileSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=skipWhile.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/startWith.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1989');
var startWith_1 = require('1990');
Observable_1.Observable.prototype.startWith = startWith_1.startWith;
//# sourceMappingURL=startWith.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/startWith.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var ArrayObservable_1 = require('2256');
var ScalarObservable_1 = require('2257');
var EmptyObservable_1 = require('2258');
var concat_1 = require('2259');
var isScheduler_1 = require('2260');
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
  var array = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    array[_i - 0] = arguments[_i];
  }
  var scheduler = array[array.length - 1];
  if (isScheduler_1.isScheduler(scheduler)) {
    array.pop();
  } else {
    scheduler = null;
  }
  var len = array.length;
  if (len === 1) {
    return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
  } else if (len > 1) {
    return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
  } else {
    return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
  }
}
exports.startWith = startWith;
//# sourceMappingURL=startWith.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/subscribeOn.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1991');
var subscribeOn_1 = require('1992');
Observable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;
//# sourceMappingURL=subscribeOn.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/subscribeOn.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var SubscribeOnObservable_1 = require('2262');
/**
 * Asynchronously subscribes Observers to this Observable on the specified IScheduler.
 *
 * <img src="./img/subscribeOn.png" width="100%">
 *
 * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.
 * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.
 .
 * @method subscribeOn
 * @owner Observable
 */
function subscribeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return this.lift(new SubscribeOnOperator(scheduler, delay));
}
exports.subscribeOn = subscribeOn;
var SubscribeOnOperator = function () {
  function SubscribeOnOperator(scheduler, delay) {
    this.scheduler = scheduler;
    this.delay = delay;
  }
  SubscribeOnOperator.prototype.call = function (subscriber, source) {
    return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
  };
  return SubscribeOnOperator;
}();
//# sourceMappingURL=subscribeOn.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/observable/SubscribeOnObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2393');
var asap_1 = require('2394');
var isNumeric_1 = require('2395');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var SubscribeOnObservable = function (_super) {
  __extends(SubscribeOnObservable, _super);
  function SubscribeOnObservable(source, delayTime, scheduler) {
    if (delayTime === void 0) {
      delayTime = 0;
    }
    if (scheduler === void 0) {
      scheduler = asap_1.asap;
    }
    _super.call(this);
    this.source = source;
    this.delayTime = delayTime;
    this.scheduler = scheduler;
    if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
      this.delayTime = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
      this.scheduler = asap_1.asap;
    }
  }
  SubscribeOnObservable.create = function (source, delay, scheduler) {
    if (delay === void 0) {
      delay = 0;
    }
    if (scheduler === void 0) {
      scheduler = asap_1.asap;
    }
    return new SubscribeOnObservable(source, delay, scheduler);
  };
  SubscribeOnObservable.dispatch = function (arg) {
    var source = arg.source,
        subscriber = arg.subscriber;
    return this.add(source.subscribe(subscriber));
  };
  SubscribeOnObservable.prototype._subscribe = function (subscriber) {
    var delay = this.delayTime;
    var source = this.source;
    var scheduler = this.scheduler;
    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
      source: source, subscriber: subscriber
    });
  };
  return SubscribeOnObservable;
}(Observable_1.Observable);
exports.SubscribeOnObservable = SubscribeOnObservable;
//# sourceMappingURL=SubscribeOnObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/asap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var AsapAction_1 = require('1778');
var AsapScheduler_1 = require('1779');
/**
 *
 * Asap Scheduler
 *
 * <span class="informal">Perform task as fast as it can be performed asynchronously</span>
 *
 * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task
 * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing
 * code to end and then it will try to execute given task as fast as possible.
 *
 * `asap` scheduler will do its best to minimize time between end of currently executing code
 * and start of scheduled task. This makes it best candidate for performing so called "deferring".
 * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves
 * some (although minimal) unwanted delay.
 *
 * Note that using `asap` scheduler does not necessarily mean that your task will be first to process
 * after currently executing code. In particular, if some task was also scheduled with `asap` before,
 * that task will execute first. That being said, if you need to schedule task asynchronously, but
 * as soon as possible, `asap` scheduler is your best bet.
 *
 * @example <caption>Compare async and asap scheduler</caption>
 *
 * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...
 * Rx.Scheduler.asap.schedule(() => console.log('asap'));
 *
 * // Logs:
 * // "asap"
 * // "async"
 * // ... but 'asap' goes first!
 *
 * @static true
 * @name asap
 * @owner Scheduler
 */
exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
//# sourceMappingURL=asap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/AsapAction.js", function(__filename, __dirname, require, module, exports) {
(function(i0){var setImmediate = i0.setImmediate,clearImmediate = i0.clearImmediate;
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Immediate_1 = require('2073');
var AsyncAction_1 = require('2074');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsapAction = function (_super) {
  __extends(AsapAction, _super);
  function AsapAction(scheduler, work) {
    _super.call(this, scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
  }
  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    // If delay is greater than 0, request as an async action.
    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    // Push the action to the end of the scheduler queue.
    scheduler.actions.push(this);
    // If a microtask has already been scheduled, don't schedule another
    // one. If a microtask hasn't been scheduled yet, schedule one now. Return
    // the current scheduled microtask id.
    return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
  };
  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    // If delay exists and is greater than 0, or if the delay is null (the
    // action wasn't rescheduled) but was originally scheduled as an async
    // action, then recycle as an async action.
    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }
    // If the scheduler queue is empty, cancel the requested microtask and
    // set the scheduled flag to undefined so the next AsapAction will schedule
    // its own.
    if (scheduler.actions.length === 0) {
      Immediate_1.Immediate.clearImmediate(id);
      scheduler.scheduled = undefined;
    }
    // Return undefined so the action knows to request a new async id if it's rescheduled.
    return undefined;
  };
  return AsapAction;
}(AsyncAction_1.AsyncAction);
exports.AsapAction = AsapAction;
//# sourceMappingURL=AsapAction.js.map
})(require(2075))
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/timers-browserify-full/timers.js", function(__filename, __dirname, require, module, exports) {
(function(process, i1){var setImmediate = i1.setImmediate,clearImmediate = i1.clearImmediate;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// Modified for use with browserify by Jan Schär, 2015
// Based on v0.12.0 of node

// keep local copies in case someone adds timers.setTimeout to global
var setTimeout = global.setTimeout;
var clearTimeout = global.clearTimeout;
var Date = global.Date;

var L = require('2353');
var assert = require('2354').ok;

var kOnTimeout = 'ontimeout';

// Timeout values > TIMEOUT_MAX are set to 1.
var TIMEOUT_MAX = 2147483647; // 2^31-1

var util = require('2355');
var debug = util.debuglog('timer');

function Timer() {
  this._id = null;
}

Timer.prototype.start = function (msecs) {
  var self = this;
  this._id = setTimeout(function () {
    self[kOnTimeout]();
  }, msecs);
};

Timer.prototype.close = function () {
  if (this._id) {
    clearTimeout(this._id);
  }
};

Timer.now = !!(typeof performance !== 'undefined' && performance.now) ? performance.now.bind(performance) : function () {
  return +new Date();
};

// IDLE TIMEOUTS
//
// Because often many sockets will have the same idle timeout we will not
// use one timeout watcher per item. It is too much overhead.  Instead
// we'll use a single watcher for all sockets with the same timeout value
// and a linked list. This technique is described in the libev manual:
// http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Be_smart_about_timeouts

// Object containing all lists, timers
// key = time in milliseconds
// value = list
var lists = {};

// the main function - creates lists on demand and the watchers associated
// with them.
function insert(item, msecs) {
  item._idleStart = Timer.now();
  item._idleTimeout = msecs;

  assert(!(msecs < 0));

  var list;

  if (lists[msecs]) {
    list = lists[msecs];
  } else {
    list = new Timer();
    list.start(msecs);

    L.init(list);

    lists[msecs] = list;
    list.msecs = msecs;
    list[kOnTimeout] = listOnTimeout;
  }

  L.append(list, item);
  assert(!L.isEmpty(list)); // list is not empty
}

function listOnTimeout() {
  var msecs = this.msecs;
  var list = this;

  debug('timeout callback %d', msecs);

  var now = Timer.now();
  debug('now: %s', now);

  var diff, first, threw;
  while (first = L.peek(list)) {
    diff = now - first._idleStart;
    if (diff < msecs) {
      list.start(msecs - diff);
      debug('%d list wait because diff is %d', msecs, diff);
      return;
    } else {
      L.remove(first);
      assert(first !== L.peek(list));

      if (!first._onTimeout) continue;

      // v0.4 compatibility: if the timer callback throws and the
      // domain or uncaughtException handler ignore the exception,
      // other timers that expire on this tick should still run.
      //
      // https://github.com/joyent/node/issues/2631
      var domain = first.domain;
      if (domain && domain._disposed) continue;

      try {
        if (domain && domain.enter) domain.enter();
        threw = true;
        first._onTimeout();
        if (domain && domain.exit) domain.exit();
        threw = false;
      } finally {
        if (threw) {
          // We need to continue processing after domain error handling
          // is complete, but not by using whatever domain was left over
          // when the timeout threw its exception.
          var oldDomain = process.domain;
          process.domain = null;
          process.nextTick(function () {
            list[kOnTimeout]();
          });
          process.domain = oldDomain;
        }
      }
    }
  }

  debug('%d list empty', msecs);
  assert(L.isEmpty(list));
  list.close();
  delete lists[msecs];
}

var unenroll = exports.unenroll = function (item) {
  L.remove(item);

  var list = lists[item._idleTimeout];
  // if empty then stop the watcher
  debug('unenroll');
  if (list && L.isEmpty(list)) {
    debug('unenroll: list empty');
    list.close();
    delete lists[item._idleTimeout];
  }
  // if active is called later, then we want to make sure not to insert again
  item._idleTimeout = -1;
};

// Does not start the time, just sets up the members needed.
exports.enroll = function (item, msecs) {
  if (!util.isNumber(msecs)) {
    throw new TypeError('msecs must be a number');
  }

  if (msecs < 0 || !isFinite(msecs)) {
    throw new RangeError('msecs must be a non-negative finite number');
  }

  // if this item was already in a list somewhere
  // then we should unenroll it from that
  if (item._idleNext) unenroll(item);

  // Ensure that msecs fits into signed int32
  if (msecs > TIMEOUT_MAX) {
    msecs = TIMEOUT_MAX;
  }

  item._idleTimeout = msecs;
  L.init(item);
};

// call this whenever the item is active (not idle)
// it will reset its timeout.
exports.active = function (item) {
  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    var list = lists[msecs];
    if (!list || L.isEmpty(list)) {
      insert(item, msecs);
    } else {
      item._idleStart = Timer.now();
      L.append(list, item);
    }
  }
};

/*
 * DOM-style timers
 */

exports.setTimeout = function (callback, after) {
  var timer;

  after *= 1; // coalesce to number or NaN

  if (!(after >= 1 && after <= TIMEOUT_MAX)) {
    after = 1; // schedule on next tick, follows browser behaviour
  }

  timer = new Timeout(after);

  if (arguments.length <= 2) {
    timer._onTimeout = callback;
  } else {
    /*
     * Sometimes setTimeout is called with arguments, EG
     *
     *   setTimeout(callback, 2000, "hello", "world")
     *
     * If that's the case we need to call the callback with
     * those args. The overhead of an extra closure is not
     * desired in the normal case.
     */
    var args = Array.prototype.slice.call(arguments, 2);
    timer._onTimeout = function () {
      callback.apply(timer, args);
    };
  }

  if (process.domain) timer.domain = process.domain;

  exports.active(timer);

  return timer;
};

exports.clearTimeout = function (timer) {
  if (timer && (timer[kOnTimeout] || timer._onTimeout)) {
    timer[kOnTimeout] = timer._onTimeout = null;
    if (timer instanceof Timeout) {
      timer.close(); // for after === 0
    } else {
      exports.unenroll(timer);
    }
  }
};

exports.setInterval = function (callback, repeat) {
  repeat *= 1; // coalesce to number or NaN

  if (!(repeat >= 1 && repeat <= TIMEOUT_MAX)) {
    repeat = 1; // schedule on next tick, follows browser behaviour
  }

  var timer = new Timeout(repeat);
  var args = Array.prototype.slice.call(arguments, 2);
  timer._onTimeout = wrapper;
  timer._repeat = true;

  if (process.domain) timer.domain = process.domain;
  exports.active(timer);

  return timer;

  function wrapper() {
    callback.apply(this, args);
    // If callback called clearInterval().
    if (timer._repeat === false) return;
    // If timer is unref'd (or was - it's permanently removed from the list.)
    timer._idleTimeout = repeat;
    exports.active(timer);
  }
};

exports.clearInterval = function (timer) {
  if (timer && timer._repeat) {
    timer._repeat = false;
    exports.clearTimeout(timer);
  }
};

var Timeout = function (after) {
  this._idleTimeout = after;
  this._idlePrev = this;
  this._idleNext = this;
  this._idleStart = null;
  this._onTimeout = null;
  this._repeat = false;
};

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._onTimeout = null;
  exports.unenroll(this);
};

var immediateQueue = {};
L.init(immediateQueue);

function processImmediate() {
  var queue = immediateQueue;
  var domain, immediate;

  immediateQueue = {};
  L.init(immediateQueue);

  while (L.isEmpty(queue) === false) {
    immediate = L.shift(queue);
    domain = immediate.domain;

    if (domain && domain.enter) domain.enter();

    var threw = true;
    try {
      immediate._onImmediate();
      threw = false;
    } finally {
      if (threw) {
        if (!L.isEmpty(queue)) {
          // Handle any remaining on next tick, assuming we're still
          // alive to do so.
          while (!L.isEmpty(immediateQueue)) {
            L.append(queue, L.shift(immediateQueue));
          }
          immediateQueue = queue;
          process.nextTick(processImmediate);
        }
      }
    }

    if (domain && domain.exit) domain.exit();
  }

  // Only round-trip to C++ land if we have to. Calling clearImmediate() on an
  // immediate that's in |queue| is okay. Worst case is we make a superfluous
  // call to NeedImmediateCallbackSetter().
  if (!L.isEmpty(immediateQueue)) {
    process.nextTick(processImmediate);
  }
}

function Immediate() {}

Immediate.prototype.domain = undefined;
Immediate.prototype._onImmediate = undefined;
Immediate.prototype._idleNext = undefined;
Immediate.prototype._idlePrev = undefined;

exports.setImmediate = function (callback) {
  var immediate = new Immediate();
  var args, index;

  L.init(immediate);

  immediate._onImmediate = callback;

  if (arguments.length > 1) {
    args = [];
    for (index = 1; index < arguments.length; index++) args.push(arguments[index]);

    immediate._onImmediate = function () {
      callback.apply(immediate, args);
    };
  }

  if (L.isEmpty(immediateQueue)) {
    process.nextTick(processImmediate);
  }

  if (process.domain) immediate.domain = process.domain;

  L.append(immediateQueue, immediate);

  return immediate;
};

exports.clearImmediate = function (immediate) {
  if (!immediate) return;

  immediate._onImmediate = undefined;

  L.remove(immediate);
};

// Internal APIs that need timeouts should use timers._unrefActive instead of
// timers.active as internal timeouts shouldn't hold the loop open

exports._unrefActive = exports.active;
})(require(2356), require(2357))
});
__sbPundle.registerModule("../../pundle/packages/browser/node_modules/timers-browserify-full/_linklist.js", function(__filename, __dirname, require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function init(list) {
  list._idleNext = list;
  list._idlePrev = list;
}
exports.init = init;

// show the most idle item
function peek(list) {
  if (list._idlePrev == list) return null;
  return list._idlePrev;
}
exports.peek = peek;

// remove the most idle item from the list
function shift(list) {
  var first = list._idlePrev;
  remove(first);
  return first;
}
exports.shift = shift;

// remove a item from its list
function remove(item) {
  if (item._idleNext) {
    item._idleNext._idlePrev = item._idlePrev;
  }

  if (item._idlePrev) {
    item._idlePrev._idleNext = item._idleNext;
  }

  item._idleNext = null;
  item._idlePrev = null;
}
exports.remove = remove;

// remove a item from its list and place at the end.
function append(list, item) {
  remove(item);
  item._idleNext = list._idleNext;
  list._idleNext._idlePrev = item;
  item._idlePrev = list;
  list._idleNext = item;
}
exports.append = append;

function isEmpty(list) {
  return list._idleNext === list;
}
exports.isEmpty = isEmpty;
});
__sbPundle.registerModule("../node_modules/rxjs/util/Immediate.js", function(__filename, __dirname, require, module, exports) {
(function(i0, process){var setImmediate = i0.setImmediate,clearImmediate = i0.clearImmediate;
/**
Some credit for this helper goes to http://github.com/YuzuJS/setImmediate
*/
"use strict";

var root_1 = require('2360');
var ImmediateDefinition = function () {
  function ImmediateDefinition(root) {
    this.root = root;
    if (root.setImmediate && typeof root.setImmediate === 'function') {
      this.setImmediate = root.setImmediate.bind(root);
      this.clearImmediate = root.clearImmediate.bind(root);
    } else {
      this.nextHandle = 1;
      this.tasksByHandle = {};
      this.currentlyRunningATask = false;
      // Don't get fooled by e.g. browserify environments.
      if (this.canUseProcessNextTick()) {
        // For Node.js before 0.9
        this.setImmediate = this.createProcessNextTickSetImmediate();
      } else if (this.canUsePostMessage()) {
        // For non-IE10 modern browsers
        this.setImmediate = this.createPostMessageSetImmediate();
      } else if (this.canUseMessageChannel()) {
        // For web workers, where supported
        this.setImmediate = this.createMessageChannelSetImmediate();
      } else if (this.canUseReadyStateChange()) {
        // For IE 6–8
        this.setImmediate = this.createReadyStateChangeSetImmediate();
      } else {
        // For older browsers
        this.setImmediate = this.createSetTimeoutSetImmediate();
      }
      var ci = function clearImmediate(handle) {
        delete clearImmediate.instance.tasksByHandle[handle];
      };
      ci.instance = this;
      this.clearImmediate = ci;
    }
  }
  ImmediateDefinition.prototype.identify = function (o) {
    return this.root.Object.prototype.toString.call(o);
  };
  ImmediateDefinition.prototype.canUseProcessNextTick = function () {
    return this.identify(this.root.process) === '[object process]';
  };
  ImmediateDefinition.prototype.canUseMessageChannel = function () {
    return Boolean(this.root.MessageChannel);
  };
  ImmediateDefinition.prototype.canUseReadyStateChange = function () {
    var document = this.root.document;
    return Boolean(document && 'onreadystatechange' in document.createElement('script'));
  };
  ImmediateDefinition.prototype.canUsePostMessage = function () {
    var root = this.root;
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `root.postMessage` means something completely different and can't be used for this purpose.
    if (root.postMessage && !root.importScripts) {
      var postMessageIsAsynchronous_1 = true;
      var oldOnMessage = root.onmessage;
      root.onmessage = function () {
        postMessageIsAsynchronous_1 = false;
      };
      root.postMessage('', '*');
      root.onmessage = oldOnMessage;
      return postMessageIsAsynchronous_1;
    }
    return false;
  };
  // This function accepts the same arguments as setImmediate, but
  // returns a function that requires no arguments.
  ImmediateDefinition.prototype.partiallyApplied = function (handler) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var fn = function result() {
      var _a = result,
          handler = _a.handler,
          args = _a.args;
      if (typeof handler === 'function') {
        handler.apply(undefined, args);
      } else {
        new Function('' + handler)();
      }
    };
    fn.handler = handler;
    fn.args = args;
    return fn;
  };
  ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {
    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);
    return this.nextHandle++;
  };
  ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {
    var fn = function setImmediate() {
      var instance = setImmediate.instance;
      var handle = instance.addFromSetImmediateArguments(arguments);
      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));
      return handle;
    };
    fn.instance = this;
    return fn;
  };
  ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var root = this.root;
    var messagePrefix = 'setImmediate$' + root.Math.random() + '$';
    var onGlobalMessage = function globalMessageHandler(event) {
      var instance = globalMessageHandler.instance;
      if (event.source === root && typeof event.data === 'string' && event.data.indexOf(messagePrefix) === 0) {
        instance.runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };
    onGlobalMessage.instance = this;
    root.addEventListener('message', onGlobalMessage, false);
    var fn = function setImmediate() {
      var _a = setImmediate,
          messagePrefix = _a.messagePrefix,
          instance = _a.instance;
      var handle = instance.addFromSetImmediateArguments(arguments);
      instance.root.postMessage(messagePrefix + handle, '*');
      return handle;
    };
    fn.instance = this;
    fn.messagePrefix = messagePrefix;
    return fn;
  };
  ImmediateDefinition.prototype.runIfPresent = function (handle) {
    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'
    // So if we're currently running a task, we'll need to delay this invocation.
    if (this.currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // 'too much recursion' error.
      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);
    } else {
      var task = this.tasksByHandle[handle];
      if (task) {
        this.currentlyRunningATask = true;
        try {
          task();
        } finally {
          this.clearImmediate(handle);
          this.currentlyRunningATask = false;
        }
      }
    }
  };
  ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {
    var _this = this;
    var channel = new this.root.MessageChannel();
    channel.port1.onmessage = function (event) {
      var handle = event.data;
      _this.runIfPresent(handle);
    };
    var fn = function setImmediate() {
      var _a = setImmediate,
          channel = _a.channel,
          instance = _a.instance;
      var handle = instance.addFromSetImmediateArguments(arguments);
      channel.port2.postMessage(handle);
      return handle;
    };
    fn.channel = channel;
    fn.instance = this;
    return fn;
  };
  ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {
    var fn = function setImmediate() {
      var instance = setImmediate.instance;
      var root = instance.root;
      var doc = root.document;
      var html = doc.documentElement;
      var handle = instance.addFromSetImmediateArguments(arguments);
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement('script');
      script.onreadystatechange = function () {
        instance.runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };
      html.appendChild(script);
      return handle;
    };
    fn.instance = this;
    return fn;
  };
  ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {
    var fn = function setImmediate() {
      var instance = setImmediate.instance;
      var handle = instance.addFromSetImmediateArguments(arguments);
      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);
      return handle;
    };
    fn.instance = this;
    return fn;
  };
  return ImmediateDefinition;
}();
exports.ImmediateDefinition = ImmediateDefinition;
exports.Immediate = new ImmediateDefinition(root_1.root);
//# sourceMappingURL=Immediate.js.map
})(require(2361), require(2362))
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/AsapScheduler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = require('2076');
var AsapScheduler = function (_super) {
  __extends(AsapScheduler, _super);
  function AsapScheduler() {
    _super.apply(this, arguments);
  }
  AsapScheduler.prototype.flush = function (action) {
    this.active = true;
    this.scheduled = undefined;
    var actions = this.actions;
    var error;
    var index = -1;
    var count = actions.length;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (++index < count && (action = actions.shift()));
    this.active = false;
    if (error) {
      while (++index < count && (action = actions.shift())) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.AsapScheduler = AsapScheduler;
//# sourceMappingURL=AsapScheduler.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/switch.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1995');
var switch_1 = require('1996');
Observable_1.Observable.prototype.switch = switch_1._switch;
Observable_1.Observable.prototype._switch = switch_1._switch;
//# sourceMappingURL=switch.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/switch.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2263');
var subscribeToResult_1 = require('2264');
/**
 * Converts a higher-order Observable into a first-order Observable by
 * subscribing to only the most recently emitted of those inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * previous inner Observable once a new one appears.</span>
 *
 * <img src="./img/switch.png" width="100%">
 *
 * `switch` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable subscribes to the inner Observable and
 * begins emitting the items emitted by that. So far, it behaves
 * like {@link mergeAll}. However, when a new inner Observable is emitted,
 * `switch` unsubscribes from the earlier-emitted inner Observable and
 * subscribes to the new inner Observable and begins emitting items from it. It
 * continues to behave like this for subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * // Each click event is mapped to an Observable that ticks every second
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var switched = higherOrder.switch();
 * // The outcome is that `switched` is essentially a timer that restarts
 * // on every click. The interval Observables from older clicks do not merge
 * // with the current interval Observable.
 * switched.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switchMap}
 * @see {@link switchMapTo}
 * @see {@link zipAll}
 *
 * @return {Observable<T>} An Observable that emits the items emitted by the
 * Observable most recently emitted by the source Observable.
 * @method switch
 * @name switch
 * @owner Observable
 */
function _switch() {
  return this.lift(new SwitchOperator());
}
exports._switch = _switch;
var SwitchOperator = function () {
  function SwitchOperator() {}
  SwitchOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchSubscriber(subscriber));
  };
  return SwitchOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchSubscriber = function (_super) {
  __extends(SwitchSubscriber, _super);
  function SwitchSubscriber(destination) {
    _super.call(this, destination);
    this.active = 0;
    this.hasCompleted = false;
  }
  SwitchSubscriber.prototype._next = function (value) {
    this.unsubscribeInner();
    this.active++;
    this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));
  };
  SwitchSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.active === 0) {
      this.destination.complete();
    }
  };
  SwitchSubscriber.prototype.unsubscribeInner = function () {
    this.active = this.active > 0 ? this.active - 1 : 0;
    var innerSubscription = this.innerSubscription;
    if (innerSubscription) {
      innerSubscription.unsubscribe();
      this.remove(innerSubscription);
    }
  };
  SwitchSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.destination.next(innerValue);
  };
  SwitchSubscriber.prototype.notifyError = function (err) {
    this.destination.error(err);
  };
  SwitchSubscriber.prototype.notifyComplete = function () {
    this.unsubscribeInner();
    if (this.hasCompleted && this.active === 0) {
      this.destination.complete();
    }
  };
  return SwitchSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=switch.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/switchMap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1997');
var switchMap_1 = require('1998');
Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
//# sourceMappingURL=switchMap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/switchMap.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2265');
var subscribeToResult_1 = require('2266');
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, emitting values only from the most recently projected Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link switch}.</span>
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each time it observes one of these
 * inner Observables, the output Observable begins emitting the items emitted by
 * that inner Observable. When a new inner Observable is emitted, `switchMap`
 * stops emitting items from the earlier-emitted inner Observable and begins
 * emitting items from the new one. It continues to behave like this for
 * subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switch}
 * @see {@link switchMapTo}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking only the values from the most recently
 * projected inner Observable.
 * @method switchMap
 * @owner Observable
 */
function switchMap(project, resultSelector) {
  return this.lift(new SwitchMapOperator(project, resultSelector));
}
exports.switchMap = switchMap;
var SwitchMapOperator = function () {
  function SwitchMapOperator(project, resultSelector) {
    this.project = project;
    this.resultSelector = resultSelector;
  }
  SwitchMapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
  };
  return SwitchMapOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapSubscriber = function (_super) {
  __extends(SwitchMapSubscriber, _super);
  function SwitchMapSubscriber(destination, project, resultSelector) {
    _super.call(this, destination);
    this.project = project;
    this.resultSelector = resultSelector;
    this.index = 0;
  }
  SwitchMapSubscriber.prototype._next = function (value) {
    var result;
    var index = this.index++;
    try {
      result = this.project(value, index);
    } catch (error) {
      this.destination.error(error);
      return;
    }
    this._innerSub(result, value, index);
  };
  SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
    var innerSubscription = this.innerSubscription;
    if (innerSubscription) {
      innerSubscription.unsubscribe();
    }
    this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
  };
  SwitchMapSubscriber.prototype._complete = function () {
    var innerSubscription = this.innerSubscription;
    if (!innerSubscription || innerSubscription.closed) {
      _super.prototype._complete.call(this);
    }
  };
  SwitchMapSubscriber.prototype._unsubscribe = function () {
    this.innerSubscription = null;
  };
  SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
    this.remove(innerSub);
    this.innerSubscription = null;
    if (this.isStopped) {
      _super.prototype._complete.call(this);
    }
  };
  SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    if (this.resultSelector) {
      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
    } else {
      this.destination.next(innerValue);
    }
  };
  SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
    var result;
    try {
      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return SwitchMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=switchMap.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/switchMapTo.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('1999');
var switchMapTo_1 = require('2000');
Observable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;
//# sourceMappingURL=switchMapTo.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/switchMapTo.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2270');
var subscribeToResult_1 = require('2271');
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is flattened multiple
 * times with {@link switch} in the output Observable.
 *
 * <span class="informal">It's like {@link switchMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/switchMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. The output Observables
 * emits values only from the most recently emitted instance of
 * `innerObservable`.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link switch}
 * @see {@link switchMap}
 * @see {@link mergeMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable, and taking only the values
 * from the most recently projected inner Observable.
 * @method switchMapTo
 * @owner Observable
 */
function switchMapTo(innerObservable, resultSelector) {
  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));
}
exports.switchMapTo = switchMapTo;
var SwitchMapToOperator = function () {
  function SwitchMapToOperator(observable, resultSelector) {
    this.observable = observable;
    this.resultSelector = resultSelector;
  }
  SwitchMapToOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));
  };
  return SwitchMapToOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapToSubscriber = function (_super) {
  __extends(SwitchMapToSubscriber, _super);
  function SwitchMapToSubscriber(destination, inner, resultSelector) {
    _super.call(this, destination);
    this.inner = inner;
    this.resultSelector = resultSelector;
    this.index = 0;
  }
  SwitchMapToSubscriber.prototype._next = function (value) {
    var innerSubscription = this.innerSubscription;
    if (innerSubscription) {
      innerSubscription.unsubscribe();
    }
    this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
  };
  SwitchMapToSubscriber.prototype._complete = function () {
    var innerSubscription = this.innerSubscription;
    if (!innerSubscription || innerSubscription.closed) {
      _super.prototype._complete.call(this);
    }
  };
  SwitchMapToSubscriber.prototype._unsubscribe = function () {
    this.innerSubscription = null;
  };
  SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {
    this.remove(innerSub);
    this.innerSubscription = null;
    if (this.isStopped) {
      _super.prototype._complete.call(this);
    }
  };
  SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    var _a = this,
        resultSelector = _a.resultSelector,
        destination = _a.destination;
    if (resultSelector) {
      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
    } else {
      destination.next(innerValue);
    }
  };
  SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
    var _a = this,
        resultSelector = _a.resultSelector,
        destination = _a.destination;
    var result;
    try {
      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
    } catch (err) {
      destination.error(err);
      return;
    }
    destination.next(result);
  };
  return SwitchMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=switchMapTo.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/take.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2001');
var take_1 = require('2002');
Observable_1.Observable.prototype.take = take_1.take;
//# sourceMappingURL=take.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/take.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2272');
var ArgumentOutOfRangeError_1 = require('2273');
var EmptyObservable_1 = require('2274');
/**
 * Emits only the first `count` values emitted by the source Observable.
 *
 * <span class="informal">Takes the first `count` values from the source, then
 * completes.</span>
 *
 * <img src="./img/take.png" width="100%">
 *
 * `take` returns an Observable that emits only the first `count` values emitted
 * by the source Observable. If the source emits fewer than `count` values then
 * all of its values are emitted. After that, it completes, regardless if the
 * source completes.
 *
 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
 * var interval = Rx.Observable.interval(1000);
 * var five = interval.take(5);
 * five.subscribe(x => console.log(x));
 *
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of `next` values to emit.
 * @return {Observable<T>} An Observable that emits only the first `count`
 * values emitted by the source Observable, or all of the values from the source
 * if the source emits fewer than `count` values.
 * @method take
 * @owner Observable
 */
function take(count) {
  if (count === 0) {
    return new EmptyObservable_1.EmptyObservable();
  } else {
    return this.lift(new TakeOperator(count));
  }
}
exports.take = take;
var TakeOperator = function () {
  function TakeOperator(total) {
    this.total = total;
    if (this.total < 0) {
      throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
    }
  }
  TakeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeSubscriber(subscriber, this.total));
  };
  return TakeOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeSubscriber = function (_super) {
  __extends(TakeSubscriber, _super);
  function TakeSubscriber(destination, total) {
    _super.call(this, destination);
    this.total = total;
    this.count = 0;
  }
  TakeSubscriber.prototype._next = function (value) {
    var total = this.total;
    var count = ++this.count;
    if (count <= total) {
      this.destination.next(value);
      if (count === total) {
        this.destination.complete();
        this.unsubscribe();
      }
    }
  };
  return TakeSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=take.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/takeLast.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2005');
var takeLast_1 = require('2006');
Observable_1.Observable.prototype.takeLast = takeLast_1.takeLast;
//# sourceMappingURL=takeLast.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/takeLast.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2267');
var ArgumentOutOfRangeError_1 = require('2268');
var EmptyObservable_1 = require('2269');
/**
 * Emits only the last `count` values emitted by the source Observable.
 *
 * <span class="informal">Remembers the latest `count` values, then emits those
 * only when the source completes.</span>
 *
 * <img src="./img/takeLast.png" width="100%">
 *
 * `takeLast` returns an Observable that emits at most the last `count` values
 * emitted by the source Observable. If the source emits fewer than `count`
 * values then all of its values are emitted. This operator must wait until the
 * `complete` notification emission from the source in order to emit the `next`
 * values on the output Observable, because otherwise it is impossible to know
 * whether or not more values will be emitted on the source. For this reason,
 * all values are emitted synchronously, followed by the complete notification.
 *
 * @example <caption>Take the last 3 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 100);
 * var lastThree = many.takeLast(3);
 * lastThree.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of values to emit from the end of
 * the sequence of values emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits at most the last count
 * values emitted by the source Observable.
 * @method takeLast
 * @owner Observable
 */
function takeLast(count) {
  if (count === 0) {
    return new EmptyObservable_1.EmptyObservable();
  } else {
    return this.lift(new TakeLastOperator(count));
  }
}
exports.takeLast = takeLast;
var TakeLastOperator = function () {
  function TakeLastOperator(total) {
    this.total = total;
    if (this.total < 0) {
      throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
    }
  }
  TakeLastOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
  };
  return TakeLastOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeLastSubscriber = function (_super) {
  __extends(TakeLastSubscriber, _super);
  function TakeLastSubscriber(destination, total) {
    _super.call(this, destination);
    this.total = total;
    this.ring = new Array();
    this.count = 0;
  }
  TakeLastSubscriber.prototype._next = function (value) {
    var ring = this.ring;
    var total = this.total;
    var count = this.count++;
    if (ring.length < total) {
      ring.push(value);
    } else {
      var index = count % total;
      ring[index] = value;
    }
  };
  TakeLastSubscriber.prototype._complete = function () {
    var destination = this.destination;
    var count = this.count;
    if (count > 0) {
      var total = this.count >= this.total ? this.total : this.count;
      var ring = this.ring;
      for (var i = 0; i < total; i++) {
        var idx = count++ % total;
        destination.next(ring[idx]);
      }
    }
    destination.complete();
  };
  return TakeLastSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=takeLast.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/takeUntil.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2007');
var takeUntil_1 = require('2008');
Observable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;
//# sourceMappingURL=takeUntil.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/takeUntil.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2276');
var subscribeToResult_1 = require('2277');
/**
 * Emits the values emitted by the source Observable until a `notifier`
 * Observable emits a value.
 *
 * <span class="informal">Lets values pass until a second Observable,
 * `notifier`, emits something. Then, it completes.</span>
 *
 * <img src="./img/takeUntil.png" width="100%">
 *
 * `takeUntil` subscribes and begins mirroring the source Observable. It also
 * monitors a second Observable, `notifier` that you provide. If the `notifier`
 * emits a value or a complete notification, the output Observable stops
 * mirroring the source Observable and completes.
 *
 * @example <caption>Tick every second until the first click happens</caption>
 * var interval = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = interval.takeUntil(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @param {Observable} notifier The Observable whose first emitted value will
 * cause the output Observable of `takeUntil` to stop emitting values from the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable until such time as `notifier` emits its first value.
 * @method takeUntil
 * @owner Observable
 */
function takeUntil(notifier) {
  return this.lift(new TakeUntilOperator(notifier));
}
exports.takeUntil = takeUntil;
var TakeUntilOperator = function () {
  function TakeUntilOperator(notifier) {
    this.notifier = notifier;
  }
  TakeUntilOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));
  };
  return TakeUntilOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeUntilSubscriber = function (_super) {
  __extends(TakeUntilSubscriber, _super);
  function TakeUntilSubscriber(destination, notifier) {
    _super.call(this, destination);
    this.notifier = notifier;
    this.add(subscribeToResult_1.subscribeToResult(this, notifier));
  }
  TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.complete();
  };
  TakeUntilSubscriber.prototype.notifyComplete = function () {
    // noop
  };
  return TakeUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=takeUntil.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/takeWhile.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2003');
var takeWhile_1 = require('2004');
Observable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;
//# sourceMappingURL=takeWhile.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/takeWhile.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2275');
/**
 * Emits values emitted by the source Observable so long as each value satisfies
 * the given `predicate`, and then completes as soon as this `predicate` is not
 * satisfied.
 *
 * <span class="informal">Takes values from the source only while they pass the
 * condition given. When the first value does not satisfy, it completes.</span>
 *
 * <img src="./img/takeWhile.png" width="100%">
 *
 * `takeWhile` subscribes and begins mirroring the source Observable. Each value
 * emitted on the source is given to the `predicate` function which returns a
 * boolean, representing a condition to be satisfied by the source values. The
 * output Observable emits the source values until such time as the `predicate`
 * returns false, at which point `takeWhile` stops mirroring the source
 * Observable and completes the output Observable.
 *
 * @example <caption>Emit click events only while the clientX property is greater than 200</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.takeWhile(ev => ev.clientX > 200);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates a value emitted by the source Observable and returns a boolean.
 * Also takes the (zero-based) index as the second argument.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable so long as each value satisfies the condition defined by the
 * `predicate`, then completes.
 * @method takeWhile
 * @owner Observable
 */
function takeWhile(predicate) {
  return this.lift(new TakeWhileOperator(predicate));
}
exports.takeWhile = takeWhile;
var TakeWhileOperator = function () {
  function TakeWhileOperator(predicate) {
    this.predicate = predicate;
  }
  TakeWhileOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
  };
  return TakeWhileOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeWhileSubscriber = function (_super) {
  __extends(TakeWhileSubscriber, _super);
  function TakeWhileSubscriber(destination, predicate) {
    _super.call(this, destination);
    this.predicate = predicate;
    this.index = 0;
  }
  TakeWhileSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    var result;
    try {
      result = this.predicate(value, this.index++);
    } catch (err) {
      destination.error(err);
      return;
    }
    this.nextOrComplete(value, result);
  };
  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
    var destination = this.destination;
    if (Boolean(predicateResult)) {
      destination.next(value);
    } else {
      destination.complete();
    }
  };
  return TakeWhileSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=takeWhile.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/throttle.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2009');
var throttle_1 = require('2010');
Observable_1.Observable.prototype.throttle = throttle_1.throttle;
//# sourceMappingURL=throttle.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/throttle.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2278');
var subscribeToResult_1 = require('2279');
exports.defaultThrottleConfig = {
  leading: true,
  trailing: false
};
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for a duration determined by another Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link throttleTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/throttle.png" width="100%">
 *
 * `throttle` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled by calling the `durationSelector` function with the source value,
 * which returns the "duration" Observable. When the duration Observable emits a
 * value or completes, the timer is disabled, and this process repeats for the
 * next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration for each source value, returned as an Observable or a Promise.
 * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults
 * to `{ leading: true, trailing: false }`.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttle
 * @owner Observable
 */
function throttle(durationSelector, config) {
  if (config === void 0) {
    config = exports.defaultThrottleConfig;
  }
  return this.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));
}
exports.throttle = throttle;
var ThrottleOperator = function () {
  function ThrottleOperator(durationSelector, leading, trailing) {
    this.durationSelector = durationSelector;
    this.leading = leading;
    this.trailing = trailing;
  }
  ThrottleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
  };
  return ThrottleOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc
 * @ignore
 * @extends {Ignored}
 */
var ThrottleSubscriber = function (_super) {
  __extends(ThrottleSubscriber, _super);
  function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
    _super.call(this, destination);
    this.destination = destination;
    this.durationSelector = durationSelector;
    this._leading = _leading;
    this._trailing = _trailing;
    this._hasTrailingValue = false;
  }
  ThrottleSubscriber.prototype._next = function (value) {
    if (this.throttled) {
      if (this._trailing) {
        this._hasTrailingValue = true;
        this._trailingValue = value;
      }
    } else {
      var duration = this.tryDurationSelector(value);
      if (duration) {
        this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
      }
      if (this._leading) {
        this.destination.next(value);
        if (this._trailing) {
          this._hasTrailingValue = true;
          this._trailingValue = value;
        }
      }
    }
  };
  ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
    try {
      return this.durationSelector(value);
    } catch (err) {
      this.destination.error(err);
      return null;
    }
  };
  ThrottleSubscriber.prototype._unsubscribe = function () {
    var _a = this,
        throttled = _a.throttled,
        _trailingValue = _a._trailingValue,
        _hasTrailingValue = _a._hasTrailingValue,
        _trailing = _a._trailing;
    this._trailingValue = null;
    this._hasTrailingValue = false;
    if (throttled) {
      this.remove(throttled);
      this.throttled = null;
      throttled.unsubscribe();
    }
  };
  ThrottleSubscriber.prototype._sendTrailing = function () {
    var _a = this,
        destination = _a.destination,
        throttled = _a.throttled,
        _trailing = _a._trailing,
        _trailingValue = _a._trailingValue,
        _hasTrailingValue = _a._hasTrailingValue;
    if (throttled && _trailing && _hasTrailingValue) {
      destination.next(_trailingValue);
      this._trailingValue = null;
      this._hasTrailingValue = false;
    }
  };
  ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this._sendTrailing();
    this._unsubscribe();
  };
  ThrottleSubscriber.prototype.notifyComplete = function () {
    this._sendTrailing();
    this._unsubscribe();
  };
  return ThrottleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=throttle.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/throttleTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2013');
var throttleTime_1 = require('2014');
Observable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;
//# sourceMappingURL=throttleTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/throttleTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2280');
var async_1 = require('2281');
var throttle_1 = require('2282');
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for `duration` milliseconds, then repeats this process.
 *
 * <span class="informal">Lets a value pass, then ignores source values for the
 * next `duration` milliseconds.</span>
 *
 * <img src="./img/throttleTime.png" width="100%">
 *
 * `throttleTime` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled. After `duration` milliseconds (or the time unit determined
 * internally by the optional `scheduler`) has passed, the timer is disabled,
 * and this process repeats for the next source value. Optionally takes a
 * {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {number} duration Time to wait before emitting another value after
 * emitting the last value, measured in milliseconds or the time unit determined
 * internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the throttling.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttleTime
 * @owner Observable
 */
function throttleTime(duration, scheduler, config) {
  if (scheduler === void 0) {
    scheduler = async_1.async;
  }
  if (config === void 0) {
    config = throttle_1.defaultThrottleConfig;
  }
  return this.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));
}
exports.throttleTime = throttleTime;
var ThrottleTimeOperator = function () {
  function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
    this.duration = duration;
    this.scheduler = scheduler;
    this.leading = leading;
    this.trailing = trailing;
  }
  ThrottleTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
  };
  return ThrottleTimeOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ThrottleTimeSubscriber = function (_super) {
  __extends(ThrottleTimeSubscriber, _super);
  function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
    _super.call(this, destination);
    this.duration = duration;
    this.scheduler = scheduler;
    this.leading = leading;
    this.trailing = trailing;
    this._hasTrailingValue = false;
    this._trailingValue = null;
  }
  ThrottleTimeSubscriber.prototype._next = function (value) {
    if (this.throttled) {
      if (this.trailing) {
        this._trailingValue = value;
        this._hasTrailingValue = true;
      }
    } else {
      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
      if (this.leading) {
        this.destination.next(value);
      }
    }
  };
  ThrottleTimeSubscriber.prototype.clearThrottle = function () {
    var throttled = this.throttled;
    if (throttled) {
      if (this.trailing && this._hasTrailingValue) {
        this.destination.next(this._trailingValue);
        this._trailingValue = null;
        this._hasTrailingValue = false;
      }
      throttled.unsubscribe();
      this.remove(throttled);
      this.throttled = null;
    }
  };
  return ThrottleTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNext(arg) {
  var subscriber = arg.subscriber;
  subscriber.clearThrottle();
}
//# sourceMappingURL=throttleTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/timeInterval.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2015');
var timeInterval_1 = require('2016');
Observable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;
//# sourceMappingURL=timeInterval.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/timeInterval.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('1766');
var async_1 = require('1767');
/**
 * @param scheduler
 * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timeInterval
 * @owner Observable
 */
function timeInterval(scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1.async;
  }
  return this.lift(new TimeIntervalOperator(scheduler));
}
exports.timeInterval = timeInterval;
var TimeInterval = function () {
  function TimeInterval(value, interval) {
    this.value = value;
    this.interval = interval;
  }
  return TimeInterval;
}();
exports.TimeInterval = TimeInterval;
;
var TimeIntervalOperator = function () {
  function TimeIntervalOperator(scheduler) {
    this.scheduler = scheduler;
  }
  TimeIntervalOperator.prototype.call = function (observer, source) {
    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));
  };
  return TimeIntervalOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeIntervalSubscriber = function (_super) {
  __extends(TimeIntervalSubscriber, _super);
  function TimeIntervalSubscriber(destination, scheduler) {
    _super.call(this, destination);
    this.scheduler = scheduler;
    this.lastTime = 0;
    this.lastTime = scheduler.now();
  }
  TimeIntervalSubscriber.prototype._next = function (value) {
    var now = this.scheduler.now();
    var span = now - this.lastTime;
    this.lastTime = now;
    this.destination.next(new TimeInterval(value, span));
  };
  return TimeIntervalSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=timeInterval.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/timeout.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2011');
var timeout_1 = require('2012');
Observable_1.Observable.prototype.timeout = timeout_1.timeout;
//# sourceMappingURL=timeout.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/timeout.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = require('2283');
var isDate_1 = require('2284');
var Subscriber_1 = require('2285');
var TimeoutError_1 = require('2286');
/**
 *
 * Errors if Observable does not emit a value in given time span.
 *
 * <span class="informal">Timeouts on Observable that doesn't emit values fast enough.</span>
 *
 * <img src="./img/timeout.png" width="100%">
 *
 * `timeout` operator accepts as an argument either a number or a Date.
 *
 * If number was provided, it returns an Observable that behaves like a source
 * Observable, unless there is a period of time where there is no value emitted.
 * So if you provide `100` as argument and first value comes after 50ms from
 * the moment of subscription, this value will be simply re-emitted by the resulting
 * Observable. If however after that 100ms passes without a second value being emitted,
 * stream will end with an error and source Observable will be unsubscribed.
 * These checks are performed throughout whole lifecycle of Observable - from the moment
 * it was subscribed to, until it completes or errors itself. Thus every value must be
 * emitted within specified period since previous value.
 *
 * If provided argument was Date, returned Observable behaves differently. It throws
 * if Observable did not complete before provided Date. This means that periods between
 * emission of particular values do not matter in this case. If Observable did not complete
 * before provided Date, source Observable will be unsubscribed. Other than that, resulting
 * stream behaves just as source Observable.
 *
 * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)
 * when returned Observable will check if source stream emitted value or completed.
 *
 * @example <caption>Check if ticks are emitted within certain timespan</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(1100) // Let's use bigger timespan to be safe,
 *                       // since `interval` might fire a bit later then scheduled.
 * .subscribe(
 *     value => console.log(value), // Will emit numbers just as regular `interval` would.
 *     err => console.log(err) // Will never be called.
 * );
 *
 * seconds.timeout(900).subscribe(
 *     value => console.log(value), // Will never be called.
 *     err => console.log(err) // Will emit error before even first value is emitted,
 *                             // since it did not arrive within 900ms period.
 * );
 *
 * @example <caption>Use Date to check if Observable completed</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(new Date("December 17, 2020 03:24:00"))
 * .subscribe(
 *     value => console.log(value), // Will emit values as regular `interval` would
 *                                  // until December 17, 2020 at 03:24:00.
 *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,
 *                             // since Observable did not complete by then.
 * );
 *
 * @see {@link timeoutWith}
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.
 * @method timeout
 * @owner Observable
 */
function timeout(due, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1.async;
  }
  var absoluteTimeout = isDate_1.isDate(due);
  var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError()));
}
exports.timeout = timeout;
var TimeoutOperator = function () {
  function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {
    this.waitFor = waitFor;
    this.absoluteTimeout = absoluteTimeout;
    this.scheduler = scheduler;
    this.errorInstance = errorInstance;
  }
  TimeoutOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));
  };
  return TimeoutOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutSubscriber = function (_super) {
  __extends(TimeoutSubscriber, _super);
  function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {
    _super.call(this, destination);
    this.absoluteTimeout = absoluteTimeout;
    this.waitFor = waitFor;
    this.scheduler = scheduler;
    this.errorInstance = errorInstance;
    this.action = null;
    this.scheduleTimeout();
  }
  TimeoutSubscriber.dispatchTimeout = function (subscriber) {
    subscriber.error(subscriber.errorInstance);
  };
  TimeoutSubscriber.prototype.scheduleTimeout = function () {
    var action = this.action;
    if (action) {
      // Recycle the action if we've already scheduled one. All the production
      // Scheduler Actions mutate their state/delay time and return themeselves.
      // VirtualActions are immutable, so they create and return a clone. In this
      // case, we need to set the action reference to the most recent VirtualAction,
      // to ensure that's the one we clone from next time.
      this.action = action.schedule(this, this.waitFor);
    } else {
      this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));
    }
  };
  TimeoutSubscriber.prototype._next = function (value) {
    if (!this.absoluteTimeout) {
      this.scheduleTimeout();
    }
    _super.prototype._next.call(this, value);
  };
  TimeoutSubscriber.prototype._unsubscribe = function () {
    this.action = null;
    this.scheduler = null;
    this.errorInstance = null;
  };
  return TimeoutSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=timeout.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/TimeoutError.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when duetime elapses.
 *
 * @see {@link timeout}
 *
 * @class TimeoutError
 */
var TimeoutError = function (_super) {
  __extends(TimeoutError, _super);
  function TimeoutError() {
    var err = _super.call(this, 'Timeout has occurred');
    this.name = err.name = 'TimeoutError';
    this.stack = err.stack;
    this.message = err.message;
  }
  return TimeoutError;
}(Error);
exports.TimeoutError = TimeoutError;
//# sourceMappingURL=TimeoutError.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/timeoutWith.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2017');
var timeoutWith_1 = require('2018');
Observable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;
//# sourceMappingURL=timeoutWith.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/timeoutWith.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = require('2287');
var isDate_1 = require('2288');
var OuterSubscriber_1 = require('2289');
var subscribeToResult_1 = require('2290');
/* tslint:enable:max-line-length */
/**
 * @param due
 * @param withObservable
 * @param scheduler
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method timeoutWith
 * @owner Observable
 */
function timeoutWith(due, withObservable, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1.async;
  }
  var absoluteTimeout = isDate_1.isDate(due);
  var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
}
exports.timeoutWith = timeoutWith;
var TimeoutWithOperator = function () {
  function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
    this.waitFor = waitFor;
    this.absoluteTimeout = absoluteTimeout;
    this.withObservable = withObservable;
    this.scheduler = scheduler;
  }
  TimeoutWithOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
  };
  return TimeoutWithOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutWithSubscriber = function (_super) {
  __extends(TimeoutWithSubscriber, _super);
  function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
    _super.call(this, destination);
    this.absoluteTimeout = absoluteTimeout;
    this.waitFor = waitFor;
    this.withObservable = withObservable;
    this.scheduler = scheduler;
    this.action = null;
    this.scheduleTimeout();
  }
  TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
    var withObservable = subscriber.withObservable;
    subscriber._unsubscribeAndRecycle();
    subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));
  };
  TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
    var action = this.action;
    if (action) {
      // Recycle the action if we've already scheduled one. All the production
      // Scheduler Actions mutate their state/delay time and return themeselves.
      // VirtualActions are immutable, so they create and return a clone. In this
      // case, we need to set the action reference to the most recent VirtualAction,
      // to ensure that's the one we clone from next time.
      this.action = action.schedule(this, this.waitFor);
    } else {
      this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
    }
  };
  TimeoutWithSubscriber.prototype._next = function (value) {
    if (!this.absoluteTimeout) {
      this.scheduleTimeout();
    }
    _super.prototype._next.call(this, value);
  };
  TimeoutWithSubscriber.prototype._unsubscribe = function () {
    this.action = null;
    this.scheduler = null;
    this.withObservable = null;
  };
  return TimeoutWithSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=timeoutWith.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/timestamp.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2019');
var timestamp_1 = require('2020');
Observable_1.Observable.prototype.timestamp = timestamp_1.timestamp;
//# sourceMappingURL=timestamp.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/timestamp.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('1764');
var async_1 = require('1765');
/**
 * @param scheduler
 * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timestamp
 * @owner Observable
 */
function timestamp(scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1.async;
  }
  return this.lift(new TimestampOperator(scheduler));
}
exports.timestamp = timestamp;
var Timestamp = function () {
  function Timestamp(value, timestamp) {
    this.value = value;
    this.timestamp = timestamp;
  }
  return Timestamp;
}();
exports.Timestamp = Timestamp;
;
var TimestampOperator = function () {
  function TimestampOperator(scheduler) {
    this.scheduler = scheduler;
  }
  TimestampOperator.prototype.call = function (observer, source) {
    return source.subscribe(new TimestampSubscriber(observer, this.scheduler));
  };
  return TimestampOperator;
}();
var TimestampSubscriber = function (_super) {
  __extends(TimestampSubscriber, _super);
  function TimestampSubscriber(destination, scheduler) {
    _super.call(this, destination);
    this.scheduler = scheduler;
  }
  TimestampSubscriber.prototype._next = function (value) {
    var now = this.scheduler.now();
    this.destination.next(new Timestamp(value, now));
  };
  return TimestampSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=timestamp.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/toArray.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2021');
var toArray_1 = require('2022');
Observable_1.Observable.prototype.toArray = toArray_1.toArray;
//# sourceMappingURL=toArray.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/toArray.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2295');
/**
 * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}
 * @method toArray
 * @owner Observable
 */
function toArray() {
  return this.lift(new ToArrayOperator());
}
exports.toArray = toArray;
var ToArrayOperator = function () {
  function ToArrayOperator() {}
  ToArrayOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ToArraySubscriber(subscriber));
  };
  return ToArrayOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ToArraySubscriber = function (_super) {
  __extends(ToArraySubscriber, _super);
  function ToArraySubscriber(destination) {
    _super.call(this, destination);
    this.array = [];
  }
  ToArraySubscriber.prototype._next = function (x) {
    this.array.push(x);
  };
  ToArraySubscriber.prototype._complete = function () {
    this.destination.next(this.array);
    this.destination.complete();
  };
  return ToArraySubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=toArray.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/toPromise.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2023');
var toPromise_1 = require('2024');
Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
//# sourceMappingURL=toPromise.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/toPromise.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('2291');
/* tslint:enable:max-line-length */
/**
 * Converts an Observable sequence to a ES2015 compliant promise.
 *
 * @example
 * // Using normal ES2015
 * let source = Rx.Observable
 *   .of(42)
 *   .toPromise();
 *
 * source.then((value) => console.log('Value: %s', value));
 * // => Value: 42
 *
 * // Rejected Promise
 * // Using normal ES2015
 * let source = Rx.Observable
 *   .throw(new Error('woops'))
 *   .toPromise();
 *
 * source
 *   .then((value) => console.log('Value: %s', value))
 *   .catch((err) => console.log('Error: %s', err));
 * // => Error: Error: woops
 *
 * // Setting via the config
 * Rx.config.Promise = RSVP.Promise;
 *
 * let source = Rx.Observable
 *   .of(42)
 *   .toPromise();
 *
 * source.then((value) => console.log('Value: %s', value));
 * // => Value: 42
 *
 * // Setting via the method
 * let source = Rx.Observable
 *   .of(42)
 *   .toPromise(RSVP.Promise);
 *
 * source.then((value) => console.log('Value: %s', value));
 * // => Value: 42
 *
 * @param {PromiseConstructor} [PromiseCtor] The constructor of the promise. If not provided,
 * it will look for a constructor first in Rx.config.Promise then fall back to
 * the native Promise constructor if available.
 * @return {Promise<T>} An ES2015 compatible promise with the last value from
 * the observable sequence.
 * @method toPromise
 * @owner Observable
 */
function toPromise(PromiseCtor) {
  var _this = this;
  if (!PromiseCtor) {
    if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
      PromiseCtor = root_1.root.Rx.config.Promise;
    } else if (root_1.root.Promise) {
      PromiseCtor = root_1.root.Promise;
    }
  }
  if (!PromiseCtor) {
    throw new Error('no Promise impl found');
  }
  return new PromiseCtor(function (resolve, reject) {
    var value;
    _this.subscribe(function (x) {
      return value = x;
    }, function (err) {
      return reject(err);
    }, function () {
      return resolve(value);
    });
  });
}
exports.toPromise = toPromise;
//# sourceMappingURL=toPromise.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/window.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2025');
var window_1 = require('2026');
Observable_1.Observable.prototype.window = window_1.window;
//# sourceMappingURL=window.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/window.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('2292');
var OuterSubscriber_1 = require('2293');
var subscribeToResult_1 = require('2294');
/**
 * Branch out the source Observable values as a nested Observable whenever
 * `windowBoundaries` emits.
 *
 * <span class="informal">It's like {@link buffer}, but emits a nested Observable
 * instead of an array.</span>
 *
 * <img src="./img/window.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping
 * windows. It emits the current window and opens a new one whenever the
 * Observable `windowBoundaries` emits an item. Because each window is an
 * Observable, the output is a higher-order Observable.
 *
 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var result = clicks.window(interval)
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link buffer}
 *
 * @param {Observable<any>} windowBoundaries An Observable that completes the
 * previous window and starts a new window.
 * @return {Observable<Observable<T>>} An Observable of windows, which are
 * Observables emitting values of the source Observable.
 * @method window
 * @owner Observable
 */
function window(windowBoundaries) {
  return this.lift(new WindowOperator(windowBoundaries));
}
exports.window = window;
var WindowOperator = function () {
  function WindowOperator(windowBoundaries) {
    this.windowBoundaries = windowBoundaries;
  }
  WindowOperator.prototype.call = function (subscriber, source) {
    var windowSubscriber = new WindowSubscriber(subscriber);
    var sourceSubscription = source.subscribe(windowSubscriber);
    if (!sourceSubscription.closed) {
      windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));
    }
    return sourceSubscription;
  };
  return WindowOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = function (_super) {
  __extends(WindowSubscriber, _super);
  function WindowSubscriber(destination) {
    _super.call(this, destination);
    this.window = new Subject_1.Subject();
    destination.next(this.window);
  }
  WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.openWindow();
  };
  WindowSubscriber.prototype.notifyError = function (error, innerSub) {
    this._error(error);
  };
  WindowSubscriber.prototype.notifyComplete = function (innerSub) {
    this._complete();
  };
  WindowSubscriber.prototype._next = function (value) {
    this.window.next(value);
  };
  WindowSubscriber.prototype._error = function (err) {
    this.window.error(err);
    this.destination.error(err);
  };
  WindowSubscriber.prototype._complete = function () {
    this.window.complete();
    this.destination.complete();
  };
  WindowSubscriber.prototype._unsubscribe = function () {
    this.window = null;
  };
  WindowSubscriber.prototype.openWindow = function () {
    var prevWindow = this.window;
    if (prevWindow) {
      prevWindow.complete();
    }
    var destination = this.destination;
    var newWindow = this.window = new Subject_1.Subject();
    destination.next(newWindow);
  };
  return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=window.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/windowCount.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2029');
var windowCount_1 = require('2030');
Observable_1.Observable.prototype.windowCount = windowCount_1.windowCount;
//# sourceMappingURL=windowCount.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/windowCount.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('2301');
var Subject_1 = require('2302');
/**
 * Branch out the source Observable values as a nested Observable with each
 * nested Observable emitting at most `windowSize` values.
 *
 * <span class="informal">It's like {@link bufferCount}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowCount.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows every `startWindowEvery`
 * items, each containing no more than `windowSize` items. When the source
 * Observable completes or encounters an error, the output Observable emits
 * the current window and propagates the notification from the source
 * Observable. If `startWindowEvery` is not provided, then new windows are
 * started immediately at the start of the source and when each window completes
 * with size `windowSize`.
 *
 * @example <caption>Ignore every 3rd click event, starting from the first one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(3)
 *   .map(win => win.skip(1)) // skip first of every 3 clicks
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Ignore every 3rd click event, starting from the third one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(2, 3)
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link bufferCount}
 *
 * @param {number} windowSize The maximum number of values emitted by each
 * window.
 * @param {number} [startWindowEvery] Interval at which to start a new window.
 * For example if `startWindowEvery` is `2`, then a new window will be started
 * on every other value from the source. A new window is started at the
 * beginning of the source by default.
 * @return {Observable<Observable<T>>} An Observable of windows, which in turn
 * are Observable of values.
 * @method windowCount
 * @owner Observable
 */
function windowCount(windowSize, startWindowEvery) {
  if (startWindowEvery === void 0) {
    startWindowEvery = 0;
  }
  return this.lift(new WindowCountOperator(windowSize, startWindowEvery));
}
exports.windowCount = windowCount;
var WindowCountOperator = function () {
  function WindowCountOperator(windowSize, startWindowEvery) {
    this.windowSize = windowSize;
    this.startWindowEvery = startWindowEvery;
  }
  WindowCountOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
  };
  return WindowCountOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowCountSubscriber = function (_super) {
  __extends(WindowCountSubscriber, _super);
  function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
    _super.call(this, destination);
    this.destination = destination;
    this.windowSize = windowSize;
    this.startWindowEvery = startWindowEvery;
    this.windows = [new Subject_1.Subject()];
    this.count = 0;
    destination.next(this.windows[0]);
  }
  WindowCountSubscriber.prototype._next = function (value) {
    var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
    var destination = this.destination;
    var windowSize = this.windowSize;
    var windows = this.windows;
    var len = windows.length;
    for (var i = 0; i < len && !this.closed; i++) {
      windows[i].next(value);
    }
    var c = this.count - windowSize + 1;
    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
      windows.shift().complete();
    }
    if (++this.count % startWindowEvery === 0 && !this.closed) {
      var window_1 = new Subject_1.Subject();
      windows.push(window_1);
      destination.next(window_1);
    }
  };
  WindowCountSubscriber.prototype._error = function (err) {
    var windows = this.windows;
    if (windows) {
      while (windows.length > 0 && !this.closed) {
        windows.shift().error(err);
      }
    }
    this.destination.error(err);
  };
  WindowCountSubscriber.prototype._complete = function () {
    var windows = this.windows;
    if (windows) {
      while (windows.length > 0 && !this.closed) {
        windows.shift().complete();
      }
    }
    this.destination.complete();
  };
  WindowCountSubscriber.prototype._unsubscribe = function () {
    this.count = 0;
    this.windows = null;
  };
  return WindowCountSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=windowCount.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/windowTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2027');
var windowTime_1 = require('2028');
Observable_1.Observable.prototype.windowTime = windowTime_1.windowTime;
//# sourceMappingURL=windowTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/windowTime.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('2296');
var async_1 = require('2297');
var Subscriber_1 = require('2298');
var isNumeric_1 = require('2299');
var isScheduler_1 = require('2300');
function windowTime(windowTimeSpan) {
  var scheduler = async_1.async;
  var windowCreationInterval = null;
  var maxWindowSize = Number.POSITIVE_INFINITY;
  if (isScheduler_1.isScheduler(arguments[3])) {
    scheduler = arguments[3];
  }
  if (isScheduler_1.isScheduler(arguments[2])) {
    scheduler = arguments[2];
  } else if (isNumeric_1.isNumeric(arguments[2])) {
    maxWindowSize = arguments[2];
  }
  if (isScheduler_1.isScheduler(arguments[1])) {
    scheduler = arguments[1];
  } else if (isNumeric_1.isNumeric(arguments[1])) {
    windowCreationInterval = arguments[1];
  }
  return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
}
exports.windowTime = windowTime;
var WindowTimeOperator = function () {
  function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
    this.windowTimeSpan = windowTimeSpan;
    this.windowCreationInterval = windowCreationInterval;
    this.maxWindowSize = maxWindowSize;
    this.scheduler = scheduler;
  }
  WindowTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
  };
  return WindowTimeOperator;
}();
var CountedSubject = function (_super) {
  __extends(CountedSubject, _super);
  function CountedSubject() {
    _super.apply(this, arguments);
    this._numberOfNextedValues = 0;
  }
  CountedSubject.prototype.next = function (value) {
    this._numberOfNextedValues++;
    _super.prototype.next.call(this, value);
  };
  Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
    get: function () {
      return this._numberOfNextedValues;
    },
    enumerable: true,
    configurable: true
  });
  return CountedSubject;
}(Subject_1.Subject);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowTimeSubscriber = function (_super) {
  __extends(WindowTimeSubscriber, _super);
  function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
    _super.call(this, destination);
    this.destination = destination;
    this.windowTimeSpan = windowTimeSpan;
    this.windowCreationInterval = windowCreationInterval;
    this.maxWindowSize = maxWindowSize;
    this.scheduler = scheduler;
    this.windows = [];
    var window = this.openWindow();
    if (windowCreationInterval !== null && windowCreationInterval >= 0) {
      var closeState = { subscriber: this, window: window, context: null };
      var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };
      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
    } else {
      var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };
      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
    }
  }
  WindowTimeSubscriber.prototype._next = function (value) {
    var windows = this.windows;
    var len = windows.length;
    for (var i = 0; i < len; i++) {
      var window_1 = windows[i];
      if (!window_1.closed) {
        window_1.next(value);
        if (window_1.numberOfNextedValues >= this.maxWindowSize) {
          this.closeWindow(window_1);
        }
      }
    }
  };
  WindowTimeSubscriber.prototype._error = function (err) {
    var windows = this.windows;
    while (windows.length > 0) {
      windows.shift().error(err);
    }
    this.destination.error(err);
  };
  WindowTimeSubscriber.prototype._complete = function () {
    var windows = this.windows;
    while (windows.length > 0) {
      var window_2 = windows.shift();
      if (!window_2.closed) {
        window_2.complete();
      }
    }
    this.destination.complete();
  };
  WindowTimeSubscriber.prototype.openWindow = function () {
    var window = new CountedSubject();
    this.windows.push(window);
    var destination = this.destination;
    destination.next(window);
    return window;
  };
  WindowTimeSubscriber.prototype.closeWindow = function (window) {
    window.complete();
    var windows = this.windows;
    windows.splice(windows.indexOf(window), 1);
  };
  return WindowTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchWindowTimeSpanOnly(state) {
  var subscriber = state.subscriber,
      windowTimeSpan = state.windowTimeSpan,
      window = state.window;
  if (window) {
    subscriber.closeWindow(window);
  }
  state.window = subscriber.openWindow();
  this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
  var windowTimeSpan = state.windowTimeSpan,
      subscriber = state.subscriber,
      scheduler = state.scheduler,
      windowCreationInterval = state.windowCreationInterval;
  var window = subscriber.openWindow();
  var action = this;
  var context = { action: action, subscription: null };
  var timeSpanState = { subscriber: subscriber, window: window, context: context };
  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
  action.add(context.subscription);
  action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
  var subscriber = state.subscriber,
      window = state.window,
      context = state.context;
  if (context && context.action && context.subscription) {
    context.action.remove(context.subscription);
  }
  subscriber.closeWindow(window);
}
//# sourceMappingURL=windowTime.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/windowToggle.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2033');
var windowToggle_1 = require('2034');
Observable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;
//# sourceMappingURL=windowToggle.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/windowToggle.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('2308');
var Subscription_1 = require('2309');
var tryCatch_1 = require('2310');
var errorObject_1 = require('2311');
var OuterSubscriber_1 = require('2312');
var subscribeToResult_1 = require('2313');
/**
 * Branch out the source Observable values as a nested Observable starting from
 * an emission from `openings` and ending when the output of `closingSelector`
 * emits.
 *
 * <span class="informal">It's like {@link bufferToggle}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowToggle.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows that contain those items
 * emitted by the source Observable between the time when the `openings`
 * Observable emits an item and when the Observable returned by
 * `closingSelector` emits an item.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var result = clicks.windowToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * ).mergeAll();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowWhen}
 * @see {@link bufferToggle}
 *
 * @param {Observable<O>} openings An observable of notifications to start new
 * windows.
 * @param {function(value: O): Observable} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns an Observable,
 * which, when it emits (either `next` or `complete`), signals that the
 * associated window should complete.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowToggle
 * @owner Observable
 */
function windowToggle(openings, closingSelector) {
  return this.lift(new WindowToggleOperator(openings, closingSelector));
}
exports.windowToggle = windowToggle;
var WindowToggleOperator = function () {
  function WindowToggleOperator(openings, closingSelector) {
    this.openings = openings;
    this.closingSelector = closingSelector;
  }
  WindowToggleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
  };
  return WindowToggleOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowToggleSubscriber = function (_super) {
  __extends(WindowToggleSubscriber, _super);
  function WindowToggleSubscriber(destination, openings, closingSelector) {
    _super.call(this, destination);
    this.openings = openings;
    this.closingSelector = closingSelector;
    this.contexts = [];
    this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
  }
  WindowToggleSubscriber.prototype._next = function (value) {
    var contexts = this.contexts;
    if (contexts) {
      var len = contexts.length;
      for (var i = 0; i < len; i++) {
        contexts[i].window.next(value);
      }
    }
  };
  WindowToggleSubscriber.prototype._error = function (err) {
    var contexts = this.contexts;
    this.contexts = null;
    if (contexts) {
      var len = contexts.length;
      var index = -1;
      while (++index < len) {
        var context = contexts[index];
        context.window.error(err);
        context.subscription.unsubscribe();
      }
    }
    _super.prototype._error.call(this, err);
  };
  WindowToggleSubscriber.prototype._complete = function () {
    var contexts = this.contexts;
    this.contexts = null;
    if (contexts) {
      var len = contexts.length;
      var index = -1;
      while (++index < len) {
        var context = contexts[index];
        context.window.complete();
        context.subscription.unsubscribe();
      }
    }
    _super.prototype._complete.call(this);
  };
  WindowToggleSubscriber.prototype._unsubscribe = function () {
    var contexts = this.contexts;
    this.contexts = null;
    if (contexts) {
      var len = contexts.length;
      var index = -1;
      while (++index < len) {
        var context = contexts[index];
        context.window.unsubscribe();
        context.subscription.unsubscribe();
      }
    }
  };
  WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    if (outerValue === this.openings) {
      var closingSelector = this.closingSelector;
      var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
      if (closingNotifier === errorObject_1.errorObject) {
        return this.error(errorObject_1.errorObject.e);
      } else {
        var window_1 = new Subject_1.Subject();
        var subscription = new Subscription_1.Subscription();
        var context = { window: window_1, subscription: subscription };
        this.contexts.push(context);
        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
        if (innerSubscription.closed) {
          this.closeWindow(this.contexts.length - 1);
        } else {
          innerSubscription.context = context;
          subscription.add(innerSubscription);
        }
        this.destination.next(window_1);
      }
    } else {
      this.closeWindow(this.contexts.indexOf(outerValue));
    }
  };
  WindowToggleSubscriber.prototype.notifyError = function (err) {
    this.error(err);
  };
  WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
    if (inner !== this.openSubscription) {
      this.closeWindow(this.contexts.indexOf(inner.context));
    }
  };
  WindowToggleSubscriber.prototype.closeWindow = function (index) {
    if (index === -1) {
      return;
    }
    var contexts = this.contexts;
    var context = contexts[index];
    var window = context.window,
        subscription = context.subscription;
    contexts.splice(index, 1);
    window.complete();
    subscription.unsubscribe();
  };
  return WindowToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=windowToggle.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/windowWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2031');
var windowWhen_1 = require('2032');
Observable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;
//# sourceMappingURL=windowWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/windowWhen.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('2303');
var tryCatch_1 = require('2304');
var errorObject_1 = require('2305');
var OuterSubscriber_1 = require('2306');
var subscribeToResult_1 = require('2307');
/**
 * Branch out the source Observable values as a nested Observable using a
 * factory function of closing Observables to determine when to start a new
 * window.
 *
 * <span class="informal">It's like {@link bufferWhen}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowWhen.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping windows.
 * It emits the current window and opens a new one whenever the Observable
 * produced by the specified `closingSelector` function emits an item. The first
 * window is opened immediately when subscribing to the output Observable.
 *
 * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks
 *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link bufferWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals (on either `next` or
 * `complete`) when to close the previous window and start a new one.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowWhen
 * @owner Observable
 */
function windowWhen(closingSelector) {
  return this.lift(new WindowOperator(closingSelector));
}
exports.windowWhen = windowWhen;
var WindowOperator = function () {
  function WindowOperator(closingSelector) {
    this.closingSelector = closingSelector;
  }
  WindowOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
  };
  return WindowOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = function (_super) {
  __extends(WindowSubscriber, _super);
  function WindowSubscriber(destination, closingSelector) {
    _super.call(this, destination);
    this.destination = destination;
    this.closingSelector = closingSelector;
    this.openWindow();
  }
  WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.openWindow(innerSub);
  };
  WindowSubscriber.prototype.notifyError = function (error, innerSub) {
    this._error(error);
  };
  WindowSubscriber.prototype.notifyComplete = function (innerSub) {
    this.openWindow(innerSub);
  };
  WindowSubscriber.prototype._next = function (value) {
    this.window.next(value);
  };
  WindowSubscriber.prototype._error = function (err) {
    this.window.error(err);
    this.destination.error(err);
    this.unsubscribeClosingNotification();
  };
  WindowSubscriber.prototype._complete = function () {
    this.window.complete();
    this.destination.complete();
    this.unsubscribeClosingNotification();
  };
  WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
    if (this.closingNotification) {
      this.closingNotification.unsubscribe();
    }
  };
  WindowSubscriber.prototype.openWindow = function (innerSub) {
    if (innerSub === void 0) {
      innerSub = null;
    }
    if (innerSub) {
      this.remove(innerSub);
      innerSub.unsubscribe();
    }
    var prevWindow = this.window;
    if (prevWindow) {
      prevWindow.complete();
    }
    var window = this.window = new Subject_1.Subject();
    this.destination.next(window);
    var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
    if (closingNotifier === errorObject_1.errorObject) {
      var err = errorObject_1.errorObject.e;
      this.destination.error(err);
      this.window.error(err);
    } else {
      this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
    }
  };
  return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=windowWhen.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/withLatestFrom.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2035');
var withLatestFrom_1 = require('2036');
Observable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;
//# sourceMappingURL=withLatestFrom.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/withLatestFrom.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('2314');
var subscribeToResult_1 = require('2315');
/* tslint:enable:max-line-length */
/**
 * Combines the source Observable with other Observables to create an Observable
 * whose values are calculated from the latest values of each, only when the
 * source emits.
 *
 * <span class="informal">Whenever the source Observable emits a value, it
 * computes a formula using that value plus the latest values from other input
 * Observables, then emits the output of that formula.</span>
 *
 * <img src="./img/withLatestFrom.png" width="100%">
 *
 * `withLatestFrom` combines each value from the source Observable (the
 * instance) with the latest values from the other input Observables only when
 * the source emits a value, optionally using a `project` function to determine
 * the value to be emitted on the output Observable. All input Observables must
 * emit at least one value before the output Observable will emit a value.
 *
 * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var result = clicks.withLatestFrom(timer);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineLatest}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Function} [project] Projection function for combining values
 * together. Receives all values in order of the Observables passed, where the
 * first parameter is a value from the source Observable. (e.g.
 * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
 * passed, arrays will be emitted on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method withLatestFrom
 * @owner Observable
 */
function withLatestFrom() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i - 0] = arguments[_i];
  }
  var project;
  if (typeof args[args.length - 1] === 'function') {
    project = args.pop();
  }
  var observables = args;
  return this.lift(new WithLatestFromOperator(observables, project));
}
exports.withLatestFrom = withLatestFrom;
var WithLatestFromOperator = function () {
  function WithLatestFromOperator(observables, project) {
    this.observables = observables;
    this.project = project;
  }
  WithLatestFromOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
  };
  return WithLatestFromOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WithLatestFromSubscriber = function (_super) {
  __extends(WithLatestFromSubscriber, _super);
  function WithLatestFromSubscriber(destination, observables, project) {
    _super.call(this, destination);
    this.observables = observables;
    this.project = project;
    this.toRespond = [];
    var len = observables.length;
    this.values = new Array(len);
    for (var i = 0; i < len; i++) {
      this.toRespond.push(i);
    }
    for (var i = 0; i < len; i++) {
      var observable = observables[i];
      this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
    }
  }
  WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.values[outerIndex] = innerValue;
    var toRespond = this.toRespond;
    if (toRespond.length > 0) {
      var found = toRespond.indexOf(outerIndex);
      if (found !== -1) {
        toRespond.splice(found, 1);
      }
    }
  };
  WithLatestFromSubscriber.prototype.notifyComplete = function () {
    // noop
  };
  WithLatestFromSubscriber.prototype._next = function (value) {
    if (this.toRespond.length === 0) {
      var args = [value].concat(this.values);
      if (this.project) {
        this._tryProject(args);
      } else {
        this.destination.next(args);
      }
    }
  };
  WithLatestFromSubscriber.prototype._tryProject = function (args) {
    var result;
    try {
      result = this.project.apply(this, args);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return WithLatestFromSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=withLatestFrom.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/zip.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2037');
var zip_1 = require('2038');
Observable_1.Observable.prototype.zip = zip_1.zipProto;
//# sourceMappingURL=zip.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/add/operator/zipAll.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var Observable_1 = require('2039');
var zipAll_1 = require('2040');
Observable_1.Observable.prototype.zipAll = zipAll_1.zipAll;
//# sourceMappingURL=zipAll.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/operator/zipAll.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var zip_1 = require('2316');
/**
 * @param project
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method zipAll
 * @owner Observable
 */
function zipAll(project) {
  return this.lift(new zip_1.ZipOperator(project));
}
exports.zipAll = zipAll;
//# sourceMappingURL=zipAll.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/testing/TestScheduler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('1770');
var Notification_1 = require('1771');
var ColdObservable_1 = require('1772');
var HotObservable_1 = require('1773');
var SubscriptionLog_1 = require('1774');
var VirtualTimeScheduler_1 = require('1775');
var defaultMaxFrame = 750;
var TestScheduler = function (_super) {
  __extends(TestScheduler, _super);
  function TestScheduler(assertDeepEqual) {
    _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);
    this.assertDeepEqual = assertDeepEqual;
    this.hotObservables = [];
    this.coldObservables = [];
    this.flushTests = [];
  }
  TestScheduler.prototype.createTime = function (marbles) {
    var indexOf = marbles.indexOf('|');
    if (indexOf === -1) {
      throw new Error('marble diagram for time should have a completion marker "|"');
    }
    return indexOf * TestScheduler.frameTimeFactor;
  };
  TestScheduler.prototype.createColdObservable = function (marbles, values, error) {
    if (marbles.indexOf('^') !== -1) {
      throw new Error('cold observable cannot have subscription offset "^"');
    }
    if (marbles.indexOf('!') !== -1) {
      throw new Error('cold observable cannot have unsubscription marker "!"');
    }
    var messages = TestScheduler.parseMarbles(marbles, values, error);
    var cold = new ColdObservable_1.ColdObservable(messages, this);
    this.coldObservables.push(cold);
    return cold;
  };
  TestScheduler.prototype.createHotObservable = function (marbles, values, error) {
    if (marbles.indexOf('!') !== -1) {
      throw new Error('hot observable cannot have unsubscription marker "!"');
    }
    var messages = TestScheduler.parseMarbles(marbles, values, error);
    var subject = new HotObservable_1.HotObservable(messages, this);
    this.hotObservables.push(subject);
    return subject;
  };
  TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {
    var _this = this;
    var messages = [];
    observable.subscribe(function (value) {
      messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });
    }, function (err) {
      messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });
    }, function () {
      messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });
    });
    return messages;
  };
  TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {
    var _this = this;
    if (unsubscriptionMarbles === void 0) {
      unsubscriptionMarbles = null;
    }
    var actual = [];
    var flushTest = { actual: actual, ready: false };
    var unsubscriptionFrame = TestScheduler.parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;
    var subscription;
    this.schedule(function () {
      subscription = observable.subscribe(function (x) {
        var value = x;
        // Support Observable-of-Observables
        if (x instanceof Observable_1.Observable) {
          value = _this.materializeInnerObservable(value, _this.frame);
        }
        actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });
      }, function (err) {
        actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });
      }, function () {
        actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });
      });
    }, 0);
    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
      this.schedule(function () {
        return subscription.unsubscribe();
      }, unsubscriptionFrame);
    }
    this.flushTests.push(flushTest);
    return {
      toBe: function (marbles, values, errorValue) {
        flushTest.ready = true;
        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);
      }
    };
  };
  TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {
    var flushTest = { actual: actualSubscriptionLogs, ready: false };
    this.flushTests.push(flushTest);
    return {
      toBe: function (marbles) {
        var marblesArray = typeof marbles === 'string' ? [marbles] : marbles;
        flushTest.ready = true;
        flushTest.expected = marblesArray.map(function (marbles) {
          return TestScheduler.parseMarblesAsSubscriptions(marbles);
        });
      }
    };
  };
  TestScheduler.prototype.flush = function () {
    var hotObservables = this.hotObservables;
    while (hotObservables.length > 0) {
      hotObservables.shift().setup();
    }
    _super.prototype.flush.call(this);
    var readyFlushTests = this.flushTests.filter(function (test) {
      return test.ready;
    });
    while (readyFlushTests.length > 0) {
      var test = readyFlushTests.shift();
      this.assertDeepEqual(test.actual, test.expected);
    }
  };
  TestScheduler.parseMarblesAsSubscriptions = function (marbles) {
    if (typeof marbles !== 'string') {
      return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);
    }
    var len = marbles.length;
    var groupStart = -1;
    var subscriptionFrame = Number.POSITIVE_INFINITY;
    var unsubscriptionFrame = Number.POSITIVE_INFINITY;
    for (var i = 0; i < len; i++) {
      var frame = i * this.frameTimeFactor;
      var c = marbles[i];
      switch (c) {
        case '-':
        case ' ':
          break;
        case '(':
          groupStart = frame;
          break;
        case ')':
          groupStart = -1;
          break;
        case '^':
          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {
            throw new Error('found a second subscription point \'^\' in a ' + 'subscription marble diagram. There can only be one.');
          }
          subscriptionFrame = groupStart > -1 ? groupStart : frame;
          break;
        case '!':
          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
            throw new Error('found a second subscription point \'^\' in a ' + 'subscription marble diagram. There can only be one.');
          }
          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;
          break;
        default:
          throw new Error('there can only be \'^\' and \'!\' markers in a ' + 'subscription marble diagram. Found instead \'' + c + '\'.');
      }
    }
    if (unsubscriptionFrame < 0) {
      return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);
    } else {
      return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);
    }
  };
  TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {
    if (materializeInnerObservables === void 0) {
      materializeInnerObservables = false;
    }
    if (marbles.indexOf('!') !== -1) {
      throw new Error('conventional marble diagrams cannot have the ' + 'unsubscription marker "!"');
    }
    var len = marbles.length;
    var testMessages = [];
    var subIndex = marbles.indexOf('^');
    var frameOffset = subIndex === -1 ? 0 : subIndex * -this.frameTimeFactor;
    var getValue = typeof values !== 'object' ? function (x) {
      return x;
    } : function (x) {
      // Support Observable-of-Observables
      if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {
        return values[x].messages;
      }
      return values[x];
    };
    var groupStart = -1;
    for (var i = 0; i < len; i++) {
      var frame = i * this.frameTimeFactor + frameOffset;
      var notification = void 0;
      var c = marbles[i];
      switch (c) {
        case '-':
        case ' ':
          break;
        case '(':
          groupStart = frame;
          break;
        case ')':
          groupStart = -1;
          break;
        case '|':
          notification = Notification_1.Notification.createComplete();
          break;
        case '^':
          break;
        case '#':
          notification = Notification_1.Notification.createError(errorValue || 'error');
          break;
        default:
          notification = Notification_1.Notification.createNext(getValue(c));
          break;
      }
      if (notification) {
        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });
      }
    }
    return testMessages;
  };
  return TestScheduler;
}(VirtualTimeScheduler_1.VirtualTimeScheduler);
exports.TestScheduler = TestScheduler;
//# sourceMappingURL=TestScheduler.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/testing/ColdObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('2082');
var Subscription_1 = require('2083');
var SubscriptionLoggable_1 = require('2084');
var applyMixins_1 = require('2085');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ColdObservable = function (_super) {
  __extends(ColdObservable, _super);
  function ColdObservable(messages, scheduler) {
    _super.call(this, function (subscriber) {
      var observable = this;
      var index = observable.logSubscribedFrame();
      subscriber.add(new Subscription_1.Subscription(function () {
        observable.logUnsubscribedFrame(index);
      }));
      observable.scheduleMessages(subscriber);
      return subscriber;
    });
    this.messages = messages;
    this.subscriptions = [];
    this.scheduler = scheduler;
  }
  ColdObservable.prototype.scheduleMessages = function (subscriber) {
    var messagesLength = this.messages.length;
    for (var i = 0; i < messagesLength; i++) {
      var message = this.messages[i];
      subscriber.add(this.scheduler.schedule(function (_a) {
        var message = _a.message,
            subscriber = _a.subscriber;
        message.notification.observe(subscriber);
      }, message.frame, { message: message, subscriber: subscriber }));
    }
  };
  return ColdObservable;
}(Observable_1.Observable);
exports.ColdObservable = ColdObservable;
applyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
//# sourceMappingURL=ColdObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/testing/SubscriptionLoggable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var SubscriptionLog_1 = require('2363');
var SubscriptionLoggable = function () {
  function SubscriptionLoggable() {
    this.subscriptions = [];
  }
  SubscriptionLoggable.prototype.logSubscribedFrame = function () {
    this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));
    return this.subscriptions.length - 1;
  };
  SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {
    var subscriptionLogs = this.subscriptions;
    var oldSubscriptionLog = subscriptionLogs[index];
    subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());
  };
  return SubscriptionLoggable;
}();
exports.SubscriptionLoggable = SubscriptionLoggable;
//# sourceMappingURL=SubscriptionLoggable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/testing/SubscriptionLog.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var SubscriptionLog = function () {
  function SubscriptionLog(subscribedFrame, unsubscribedFrame) {
    if (unsubscribedFrame === void 0) {
      unsubscribedFrame = Number.POSITIVE_INFINITY;
    }
    this.subscribedFrame = subscribedFrame;
    this.unsubscribedFrame = unsubscribedFrame;
  }
  return SubscriptionLog;
}();
exports.SubscriptionLog = SubscriptionLog;
//# sourceMappingURL=SubscriptionLog.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/applyMixins.js", function(__filename, __dirname, require, module, exports) {
"use strict";

function applyMixins(derivedCtor, baseCtors) {
  for (var i = 0, len = baseCtors.length; i < len; i++) {
    var baseCtor = baseCtors[i];
    var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);
    for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {
      var name_1 = propertyKeys[j];
      derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];
    }
  }
}
exports.applyMixins = applyMixins;
//# sourceMappingURL=applyMixins.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/testing/HotObservable.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = require('2086');
var Subscription_1 = require('2087');
var SubscriptionLoggable_1 = require('2088');
var applyMixins_1 = require('2089');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var HotObservable = function (_super) {
  __extends(HotObservable, _super);
  function HotObservable(messages, scheduler) {
    _super.call(this);
    this.messages = messages;
    this.subscriptions = [];
    this.scheduler = scheduler;
  }
  HotObservable.prototype._subscribe = function (subscriber) {
    var subject = this;
    var index = subject.logSubscribedFrame();
    subscriber.add(new Subscription_1.Subscription(function () {
      subject.logUnsubscribedFrame(index);
    }));
    return _super.prototype._subscribe.call(this, subscriber);
  };
  HotObservable.prototype.setup = function () {
    var subject = this;
    var messagesLength = subject.messages.length;
    /* tslint:disable:no-var-keyword */
    for (var i = 0; i < messagesLength; i++) {
      (function () {
        var message = subject.messages[i];
        /* tslint:enable */
        subject.scheduler.schedule(function () {
          message.notification.observe(subject);
        }, message.frame);
      })();
    }
  };
  return HotObservable;
}(Subject_1.Subject);
exports.HotObservable = HotObservable;
applyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
//# sourceMappingURL=HotObservable.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/VirtualTimeScheduler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = require('1768');
var AsyncScheduler_1 = require('1769');
var VirtualTimeScheduler = function (_super) {
  __extends(VirtualTimeScheduler, _super);
  function VirtualTimeScheduler(SchedulerAction, maxFrames) {
    var _this = this;
    if (SchedulerAction === void 0) {
      SchedulerAction = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Number.POSITIVE_INFINITY;
    }
    _super.call(this, SchedulerAction, function () {
      return _this.frame;
    });
    this.maxFrames = maxFrames;
    this.frame = 0;
    this.index = -1;
  }
  /**
   * Prompt the Scheduler to execute all of its queued actions, therefore
   * clearing its queue.
   * @return {void}
   */
  VirtualTimeScheduler.prototype.flush = function () {
    var _a = this,
        actions = _a.actions,
        maxFrames = _a.maxFrames;
    var error, action;
    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  VirtualTimeScheduler.frameTimeFactor = 10;
  return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.VirtualTimeScheduler = VirtualTimeScheduler;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var VirtualAction = function (_super) {
  __extends(VirtualAction, _super);
  function VirtualAction(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }
    _super.call(this, scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
    this.index = index;
    this.active = true;
    this.index = scheduler.index = index;
  }
  VirtualAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (!this.id) {
      return _super.prototype.schedule.call(this, state, delay);
    }
    this.active = false;
    // If an action is rescheduled, we save allocations by mutating its state,
    // pushing it to the end of the scheduler queue, and recycling the action.
    // But since the VirtualTimeScheduler is used for testing, VirtualActions
    // must be immutable so they can be inspected later.
    var action = new VirtualAction(this.scheduler, this.work);
    this.add(action);
    return action.schedule(state, delay);
  };
  VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    this.delay = scheduler.frame + delay;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction.sortActions);
    return true;
  };
  VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return undefined;
  };
  VirtualAction.prototype._execute = function (state, delay) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay);
    }
  };
  VirtualAction.sortActions = function (a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction;
}(AsyncAction_1.AsyncAction);
exports.VirtualAction = VirtualAction;
//# sourceMappingURL=VirtualTimeScheduler.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/animationFrame.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var AnimationFrameAction_1 = require('1780');
var AnimationFrameScheduler_1 = require('1781');
/**
 *
 * Animation Frame Scheduler
 *
 * <span class="informal">Perform task when `window.requestAnimationFrame` would fire</span>
 *
 * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler
 * behaviour.
 *
 * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.
 * It makes sure scheduled task will happen just before next browser content repaint,
 * thus performing animations as efficiently as possible.
 *
 * @example <caption>Schedule div height animation</caption>
 * const div = document.querySelector('.some-div');
 *
 * Rx.Scheduler.schedule(function(height) {
 *   div.style.height = height + "px";
 *
 *   this.schedule(height + 1);  // `this` references currently executing Action,
 *                               // which we reschedule with new state
 * }, 0, 0);
 *
 * // You will see .some-div element growing in height
 *
 *
 * @static true
 * @name animationFrame
 * @owner Scheduler
 */
exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
//# sourceMappingURL=animationFrame.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/AnimationFrameAction.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = require('2077');
var AnimationFrame_1 = require('2078');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AnimationFrameAction = function (_super) {
  __extends(AnimationFrameAction, _super);
  function AnimationFrameAction(scheduler, work) {
    _super.call(this, scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
  }
  AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    // If delay is greater than 0, request as an async action.
    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    // Push the action to the end of the scheduler queue.
    scheduler.actions.push(this);
    // If an animation frame has already been requested, don't request another
    // one. If an animation frame hasn't been requested yet, request one. Return
    // the current animation frame request id.
    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));
  };
  AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    // If delay exists and is greater than 0, or if the delay is null (the
    // action wasn't rescheduled) but was originally scheduled as an async
    // action, then recycle as an async action.
    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }
    // If the scheduler queue is empty, cancel the requested animation frame and
    // set the scheduled flag to undefined so the next AnimationFrameAction will
    // request its own.
    if (scheduler.actions.length === 0) {
      AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);
      scheduler.scheduled = undefined;
    }
    // Return undefined so the action knows to request a new async id if it's rescheduled.
    return undefined;
  };
  return AnimationFrameAction;
}(AsyncAction_1.AsyncAction);
exports.AnimationFrameAction = AnimationFrameAction;
//# sourceMappingURL=AnimationFrameAction.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/util/AnimationFrame.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var root_1 = require('2359');
var RequestAnimationFrameDefinition = function () {
  function RequestAnimationFrameDefinition(root) {
    if (root.requestAnimationFrame) {
      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);
      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);
    } else if (root.mozRequestAnimationFrame) {
      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);
      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);
    } else if (root.webkitRequestAnimationFrame) {
      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);
      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);
    } else if (root.msRequestAnimationFrame) {
      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);
      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);
    } else if (root.oRequestAnimationFrame) {
      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);
      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);
    } else {
      this.cancelAnimationFrame = root.clearTimeout.bind(root);
      this.requestAnimationFrame = function (cb) {
        return root.setTimeout(cb, 1000 / 60);
      };
    }
  }
  return RequestAnimationFrameDefinition;
}();
exports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;
exports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);
//# sourceMappingURL=AnimationFrame.js.map
});
__sbPundle.registerModule("../node_modules/rxjs/scheduler/AnimationFrameScheduler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var __extends = this && this.__extends || function (d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = require('2079');
var AnimationFrameScheduler = function (_super) {
  __extends(AnimationFrameScheduler, _super);
  function AnimationFrameScheduler() {
    _super.apply(this, arguments);
  }
  AnimationFrameScheduler.prototype.flush = function (action) {
    this.active = true;
    this.scheduled = undefined;
    var actions = this.actions;
    var error;
    var index = -1;
    var count = actions.length;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (++index < count && (action = actions.shift()));
    this.active = false;
    if (error) {
      while (++index < count && (action = actions.shift())) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AnimationFrameScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.AnimationFrameScheduler = AnimationFrameScheduler;
//# sourceMappingURL=AnimationFrameScheduler.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/mobx/helpers.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.watch = watch;
exports.react = react;

var _helpers = require('2869');

var AllHelpers = _interopRequireWildcard(_helpers);

var _mobx = require('2870');

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

// subscribe-aware helpers
function watch(fn) {
  const dispose = (0, _mobx.autorun)(fn);
  this.subscriptions.add(dispose);
  return dispose;
}

function react(fn, onReact, immediately = false) {
  const dispose = (0, _mobx.reaction)(fn, onReact, immediately);
  this.subscriptions.add(dispose);
  return dispose;
}

exports.default = () => ({
  name: 'helpers',
  once: true,
  onlyClass: true,
  decorator: Klass => {
    Object.assign(Klass.prototype, _extends({}, AllHelpers, {
      watch,
      react
    }));
  }
});
//# sourceMappingURL=helpers.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/@mcro/helpers/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ref = exports.on = exports.addEvent = exports.setInterval = exports.setTimeout = exports.CompositeDisposable = undefined;

var _sbEventKit = require('2885');

var EventKit = _interopRequireWildcard(_sbEventKit);

var _events = require('2886');

var Events = _interopRequireWildcard(_events);

var _ref = require('2887');

var _ref2 = _interopRequireDefault(_ref);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

const { CompositeDisposable } = EventKit;
exports.CompositeDisposable = CompositeDisposable;
const { setTimeout, setInterval, addEvent, on } = Events;
exports.setTimeout = setTimeout;
exports.setInterval = setInterval;
exports.addEvent = addEvent;
exports.on = on;
const ref = exports.ref = _ref2.default;
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/@mcro/helpers/lib/events.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.on = exports.addEvent = exports.setInterval = exports.setTimeout = undefined;

var _disposableEvent = require('2889');

var _disposableEvent2 = _interopRequireDefault(_disposableEvent);

var _sbEventKit = require('2890');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _addEvent(element, cb, bind) {
  if (element && element.emitter) {
    return _addEvent.call(this, element.emitter, cb, bind);
  }

  const e = (0, _disposableEvent2.default)(element, cb, bind);
  this.subscriptions.add(e);
  return e;
}

const originalSetTimeout = typeof window !== 'undefined' ? window.setTimeout : global.setTimeout;
const originalSetInterval = typeof window !== 'undefined' ? window.setInterval : global.setInterval;

function _setTimeout(givenCallback, duration) {
  let subscription;
  const callback = () => {
    if (subscription) subscription.dispose();
    givenCallback.call(this);
  };
  const timeoutId = originalSetTimeout(callback, duration);
  subscription = this.subscriptions.add(() => {
    clearTimeout(timeoutId);
  });
  return timeoutId;
}

function _setInterval(givenCallback, duration) {
  const intervalId = originalSetInterval(givenCallback, duration);
  this.subscriptions.add(() => {
    clearInterval(intervalId);
  });
  return intervalId;
}

// adds this.subscriptions to a class at call-time
function patchSubscribers(fn) {
  return function (...args) {
    if (!this.subscriptions) {
      this.subscriptions = new _sbEventKit.CompositeDisposable();
      // dispose
      const oComponentWillUnmount = this.componentWillUnmount;
      this.componentWillUnmount = function () {
        this.subscriptions.dispose();
        oComponentWillUnmount && oComponentWillUnmount.call(this, arguments);
      };
    }
    return fn.call(this, ...args);
  };
}

const setTimeout = exports.setTimeout = patchSubscribers(_setTimeout);
const setInterval = exports.setInterval = patchSubscribers(_setInterval);
const addEvent = exports.addEvent = patchSubscribers(_addEvent);
const on = exports.on = addEvent;
//# sourceMappingURL=events.js.map
});
__sbPundle.registerModule("../node_modules/disposable-event/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

var _sbEventKit = require('2461');

function disposableEvent(target, eventName, callback) {
  if (target.on) {
    target.on(eventName, callback);
  } else if (target.addListener) {
    target.addListener(eventName, callback);
  } else if (target.addEventListener) {
    target.addEventListener(eventName, callback);
  } else {
    throw new Error('Unknown event emitter');
  }
  return new _sbEventKit.Disposable(function () {
    if (target.off) {
      target.off(eventName, callback);
    } else if (target.removeListener) {
      target.removeListener(eventName, callback);
    } else if (target.removeEventListener) {
      target.removeEventListener(eventName, callback);
    } else {
      throw new Error('Unknown event emitter');
    }
  });
}

module.exports = disposableEvent;
});
__sbPundle.registerModule("../node_modules/sb-event-kit/lib/main.js", function(__filename, __dirname, require, module, exports) {
'use strict';
'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _disposable = require('2462');

Object.defineProperty(exports, 'Disposable', {
  enumerable: true,
  get: function get() {
    return _disposable.Disposable;
  }
});

var _compositeDisposable = require('2463');

Object.defineProperty(exports, 'CompositeDisposable', {
  enumerable: true,
  get: function get() {
    return _compositeDisposable.CompositeDisposable;
  }
});

var _emitter = require('2464');

Object.defineProperty(exports, 'Emitter', {
  enumerable: true,
  get: function get() {
    return _emitter.Emitter;
  }
});
});
__sbPundle.registerModule("../node_modules/sb-event-kit/lib/disposable.js", function(__filename, __dirname, require, module, exports) {
'use strict';
'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
class Disposable {

  constructor(callback) {
    this.disposed = false;
    this.callback = callback;
  }
  isDisposed() {
    return this.disposed;
  }
  dispose() {
    if (!this.disposed) {
      this.disposed = true;
      if (typeof this.callback === 'function') {
        this.callback();
      }
      this.callback = null;
    }
  }
}
exports.Disposable = Disposable;
});
__sbPundle.registerModule("../node_modules/sb-event-kit/lib/composite-disposable.js", function(__filename, __dirname, require, module, exports) {
'use strict';
'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
class CompositeDisposable {

  constructor() {
    this.disposed = false;
    this.disposables = new Set(arguments);
  }
  add() {
    if (!this.disposed) {
      var length = arguments.length;
      for (var i = 0; i < length; ++i) {
        this.disposables.add(arguments[i]);
      }
    }
  }
  remove() {
    if (!this.disposed) {
      var length = arguments.length;
      for (var i = 0; i < length; ++i) {
        this.disposables.delete(arguments[i]);
      }
    }
  }
  clear() {
    if (!this.disposed) {
      this.disposables.clear();
    }
  }
  isDisposed() {
    return this.disposed;
  }
  dispose() {
    if (!this.disposed) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.disposables[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          item.dispose();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.disposed = true;
      this.disposables.clear();
    }
  }
}
exports.CompositeDisposable = CompositeDisposable;
});
__sbPundle.registerModule("../node_modules/sb-event-kit/lib/emitter.js", function(__filename, __dirname, require, module, exports) {
'use strict';
'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Emitter = undefined;

var _disposable = require('2465');

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

class Emitter {

  constructor() {
    this.disposed = false;
    this.handlers = {};
  }
  on(eventName, handler) {
    var _this = this;

    if (this.disposed) {
      throw new Error('Emitter has been disposed');
    }
    if (typeof handler !== 'function') {
      throw new Error('Event handler must be a function');
    }
    if (typeof this.handlers[eventName] === 'undefined') {
      this.handlers[eventName] = new Set([handler]);
    } else {
      this.handlers[eventName].add(handler);
    }
    return new _disposable.Disposable(function () {
      _this.off(eventName, handler);
    });
  }
  off(eventName, handler) {
    if (!this.disposed && this.handlers[eventName]) {
      this.handlers[eventName].delete(handler);
    }
  }
  clear() {
    this.handlers = {};
  }
  emit(eventName) {
    if (this.disposed || typeof this.handlers[eventName] === 'undefined') {
      return;
    }

    for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }

    var paramsLength = params.length;
    var promises = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.handlers[eventName][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var callback = _step.value;

        var value = void 0;
        if (paramsLength === 1) {
          value = callback(params[0]);
        } else if (paramsLength === 2) {
          value = callback(params[0], params[1]);
        } else if (paramsLength === 3) {
          value = callback(params[0], params[1], params[2]);
        } else if (paramsLength === 4) {
          value = callback(params[0], params[1], params[2], params[3]);
        } else if (paramsLength === 5) {
          value = callback(params[0], params[1], params[2], params[3], params[4]);
        } else {
          value = callback.apply(undefined, _toConsumableArray(params));
        }
        promises.push(value);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return Promise.all(promises);
  }
  isDisposed() {
    return this.disposed;
  }
  dispose() {
    this.disposed = true;
    this.handlers = {};
  }
}
exports.Emitter = Emitter;
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/@mcro/helpers/lib/ref.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ref;

var _objectPath = require('2888');

var _objectPath2 = _interopRequireDefault(_objectPath);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// TODO make mobx-able
const action = (id, fn) => fn;

function firstSegment(path) {
  if (Array.isArray(path)) {
    return path[0];
  }
  return path.split('.')[0];
}

const Cache = {};

// like a cursor
// give it a reference to an object path
// it gives you helpers for get/set/...
// also works nicely with mobx
function ref(path) {
  // Cache
  // by returning same function, prevent react from deoptimizing renders that use this
  // because it can track the function as being stable over time
  // also this should have minimal overhead memory wise because refs are small
  // TODO see if weakmap works here
  // TODO add subscription to remove afer unmount
  let cacheKey;
  if (this) {
    this.__refUid = this.__refUid || Math.random();
    cacheKey = `${this.__refUid}${path}`;
    if (Cache[cacheKey]) {
      return Cache[cacheKey];
    }
  }

  const key = firstSegment(path);

  const get = () => {
    this[key]; // trigger mobx watch
    return _objectPath2.default.get(this, path);
  };

  const set = action(`ref.set ${path.toString()}`, value => {
    _objectPath2.default.set(this, path, value);
    const val = this[key];

    // fix mobx not updating
    if (val && val.constructor === Object) {
      this[key] = Object.assign({}, val);
    } else if (val && val.constructor === Array) {
      this[key] = [].concat(val);
    } else {
      this[key] = val;
    }
  });

  const increment = (val = 1) => () => set(get() + val);
  const setter = (...args) => () => set(...args);
  const toggle = () => set(!get());
  const clear = () => set(null);
  const equals = x => get() === x;

  const res = { get, set, toggle, clear, setter, increment, equals };

  if (this) {
    Cache[cacheKey] = res;
  }

  return res;
}
//# sourceMappingURL=ref.js.map
});
__sbPundle.registerModule("../node_modules/object-path/index.js", function(__filename, __dirname, require, module, exports) {
(function (root, factory) {
  'use strict';

  /*istanbul ignore next:cant test*/

  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else {
    // Browser globals
    root.objectPath = factory();
  }
})(this, function () {
  'use strict';

  var toStr = Object.prototype.toString;
  function hasOwnProperty(obj, prop) {
    if (obj == null) {
      return false;
    }
    //to handle objects with null prototypes (too edge case?)
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  function isEmpty(value) {
    if (!value) {
      return true;
    }
    if (isArray(value) && value.length === 0) {
      return true;
    } else if (typeof value !== 'string') {
      for (var i in value) {
        if (hasOwnProperty(value, i)) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  function toString(type) {
    return toStr.call(type);
  }

  function isObject(obj) {
    return typeof obj === 'object' && toString(obj) === "[object Object]";
  }

  var isArray = Array.isArray || function (obj) {
    /*istanbul ignore next:cant test*/
    return toStr.call(obj) === '[object Array]';
  };

  function isBoolean(obj) {
    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
  }

  function getKey(key) {
    var intKey = parseInt(key);
    if (intKey.toString() === key) {
      return intKey;
    }
    return key;
  }

  function factory(options) {
    options = options || {};

    var objectPath = function (obj) {
      return Object.keys(objectPath).reduce(function (proxy, prop) {
        if (prop === 'create') {
          return proxy;
        }

        /*istanbul ignore else*/
        if (typeof objectPath[prop] === 'function') {
          proxy[prop] = objectPath[prop].bind(objectPath, obj);
        }

        return proxy;
      }, {});
    };

    function hasShallowProperty(obj, prop) {
      return options.includeInheritedProps || typeof prop === 'number' && Array.isArray(obj) || hasOwnProperty(obj, prop);
    }

    function getShallowProperty(obj, prop) {
      if (hasShallowProperty(obj, prop)) {
        return obj[prop];
      }
    }

    function set(obj, path, value, doNotReplace) {
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (typeof path === 'string') {
        return set(obj, path.split('.').map(getKey), value, doNotReplace);
      }
      var currentPath = path[0];
      var currentValue = getShallowProperty(obj, currentPath);
      if (path.length === 1) {
        if (currentValue === void 0 || !doNotReplace) {
          obj[currentPath] = value;
        }
        return currentValue;
      }

      if (currentValue === void 0) {
        //check if we assume an array
        if (typeof path[1] === 'number') {
          obj[currentPath] = [];
        } else {
          obj[currentPath] = {};
        }
      }

      return set(obj[currentPath], path.slice(1), value, doNotReplace);
    }

    objectPath.has = function (obj, path) {
      if (typeof path === 'number') {
        path = [path];
      } else if (typeof path === 'string') {
        path = path.split('.');
      }

      if (!path || path.length === 0) {
        return !!obj;
      }

      for (var i = 0; i < path.length; i++) {
        var j = getKey(path[i]);

        if (typeof j === 'number' && isArray(obj) && j < obj.length || (options.includeInheritedProps ? j in Object(obj) : hasOwnProperty(obj, j))) {
          obj = obj[j];
        } else {
          return false;
        }
      }

      return true;
    };

    objectPath.ensureExists = function (obj, path, value) {
      return set(obj, path, value, true);
    };

    objectPath.set = function (obj, path, value, doNotReplace) {
      return set(obj, path, value, doNotReplace);
    };

    objectPath.insert = function (obj, path, value, at) {
      var arr = objectPath.get(obj, path);
      at = ~~at;
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }
      arr.splice(at, 0, value);
    };

    objectPath.empty = function (obj, path) {
      if (isEmpty(path)) {
        return void 0;
      }
      if (obj == null) {
        return void 0;
      }

      var value, i;
      if (!(value = objectPath.get(obj, path))) {
        return void 0;
      }

      if (typeof value === 'string') {
        return objectPath.set(obj, path, '');
      } else if (isBoolean(value)) {
        return objectPath.set(obj, path, false);
      } else if (typeof value === 'number') {
        return objectPath.set(obj, path, 0);
      } else if (isArray(value)) {
        value.length = 0;
      } else if (isObject(value)) {
        for (i in value) {
          if (hasShallowProperty(value, i)) {
            delete value[i];
          }
        }
      } else {
        return objectPath.set(obj, path, null);
      }
    };

    objectPath.push = function (obj, path /*, values */) {
      var arr = objectPath.get(obj, path);
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }

      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
    };

    objectPath.coalesce = function (obj, paths, defaultValue) {
      var value;

      for (var i = 0, len = paths.length; i < len; i++) {
        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
          return value;
        }
      }

      return defaultValue;
    };

    objectPath.get = function (obj, path, defaultValue) {
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (obj == null) {
        return defaultValue;
      }
      if (typeof path === 'string') {
        return objectPath.get(obj, path.split('.'), defaultValue);
      }

      var currentPath = getKey(path[0]);
      var nextObj = getShallowProperty(obj, currentPath);
      if (nextObj === void 0) {
        return defaultValue;
      }

      if (path.length === 1) {
        return nextObj;
      }

      return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
    };

    objectPath.del = function del(obj, path) {
      if (typeof path === 'number') {
        path = [path];
      }

      if (obj == null) {
        return obj;
      }

      if (isEmpty(path)) {
        return obj;
      }
      if (typeof path === 'string') {
        return objectPath.del(obj, path.split('.'));
      }

      var currentPath = getKey(path[0]);
      if (!hasShallowProperty(obj, currentPath)) {
        return obj;
      }

      if (path.length === 1) {
        if (isArray(obj)) {
          obj.splice(currentPath, 1);
        } else {
          delete obj[currentPath];
        }
      } else {
        return objectPath.del(obj[currentPath], path.slice(1));
      }

      return obj;
    };

    return objectPath;
  }

  var mod = factory();
  mod.create = factory;
  mod.withInheritedProps = factory({ includeInheritedProps: true });
  return mod;
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/subscribable.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sbEventKit = require('2872');

exports.default = () => ({
  name: 'subscribable',
  once: true,
  onlyClass: true,
  decorator: Klass => {
    if (Klass.prototype.subscriptions) {
      console.log('skip, already has subscriptions');
      return Klass;
    }
    Object.defineProperty(Klass.prototype, 'subscriptions', {
      configurable: true,
      enumerable: true,
      get() {
        if (!this.__subscriptions) {
          this.__subscriptions = new _sbEventKit.CompositeDisposable();
        }
        return this.__subscriptions;
      }
    });
  },
  mixin: {
    componentWillUnmount() {
      this.subscriptions.dispose();
    }
  }
});
//# sourceMappingURL=subscribable.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/emitsMount.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = (options, Helpers) => ({
  name: 'extends-react',
  once: true,
  onlyClass: true,
  decorator: Klass => {
    const ogMount = Klass.prototype.componentDidMount;
    Klass.prototype.componentDidMount = function (...args) {
      Helpers.emitter.emit('view.mount', {
        name: this.constructor.name,
        thing: this
      });
      return ogMount && ogMount.call(this, ...args);
    };
    const ogUnmount = Klass.prototype.componentWillUnmount;
    Klass.prototype.componentWillUnmount = function () {
      Helpers.emitter.emit('view.unmount', {
        name: this.constructor.name,
        thing: this
      });
      return ogUnmount && ogUnmount.call(this, ...args);
    };
    return Klass;
  }
});
//# sourceMappingURL=emitsMount.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/reactRenderArgs.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

// declare class ReactRenderArgs<Props, State, Context> {
//   props: $Abstract<Props>,
//   render(props: Props, state: State, context: Context): React$Element<any>,
// }

exports.default = () => ({
  name: 'react-render-args',
  once: true,
  onlyClass: true,
  decorator: Klass => {
    if (!Klass.prototype.render) {
      throw new Error('Not a react-like class');
    }
    // preact-like render
    const or = Klass.prototype.render;
    Klass.prototype.render = function () {
      return or.call(this, this.props, this.state, this.context);
    };

    return Klass;
  }
});
//# sourceMappingURL=reactRenderArgs.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/addContext.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = options => ({
  name: 'addContext',
  once: true,
  decorator: Klass => {
    Klass.contextTypes = _extends({}, Klass.contextTypes, options);
    return Klass;
  }
});
//# sourceMappingURL=addContext.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/attach.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = attacher;

var _react = require('2880');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('2881');

var _lodash = require('2882');

var _hoistNonReactStatics = require('2883');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function attacher(options) {
  return {
    name: 'attach',
    once: true,
    decorator: View => {
      var _class, _temp;

      let ContextAttacher = (_temp = _class = class ContextAttacher extends _react2.default.Component {

        render() {
          return _react2.default.createElement(View, _extends({}, this.props, (0, _lodash.pickBy)(this.context.stores, (value, key) => options.names.indexOf(key) >= 0)));
        }
      }, _class.contextTypes = {
        stores: _propTypes.object
      }, _temp);

      // copy statics

      (0, _hoistNonReactStatics2.default)(ContextAttacher, View);

      return ContextAttacher;
    }
  };
}
//# sourceMappingURL=attach.js.map
});
__sbPundle.registerModule("../node_modules/hoist-non-react-statics/index.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
'use strict';

var REACT_STATICS = {
  childContextTypes: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  mixins: true,
  propTypes: true,
  type: true
};

var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components

    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);
      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }

    return targetComponent;
  }

  return targetComponent;
};
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/storeProvidable.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = storeProvidable;

var _react = require('2873');

var _react2 = _interopRequireDefault(_react);

var _mobx = require('2874');

var Mobx = _interopRequireWildcard(_mobx);

var _black = require('2875');

var _propTypes = require('2876');

var _lodash = require('2877');

var _hoistNonReactStatics = require('2878');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _redboxReact = require('2879');

var _redboxReact2 = _interopRequireDefault(_redboxReact);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function storeProvidable(options, Helpers) {
  return {
    name: 'store-providable',
    once: true,
    onlyClass: true,
    decorator: (Klass, opts = {}) => {
      const allStores = opts.stores || options.stores;
      const context = opts.context || options.context;
      const storeDecorator = opts.storeDecorator || options.storeDecorator;

      if (!allStores) {
        return Klass;
      }

      // see setupStores()
      let Stores;

      function decorateStores() {
        Stores = allStores;
        if (storeDecorator && allStores) {
          for (const key of Object.keys(allStores)) {
            Stores[key] = storeDecorator(allStores[key]);
          }
        }
      }

      decorateStores();

      // keep action out of class directly because of hmr bug
      const updateProps = Mobx.action(`${Klass.name}.updateProps`, (props, nextProps) => {
        const curPropKeys = Object.keys(props);
        const nextPropsKeys = Object.keys(nextProps);
        // change granular so reactions are granular
        for (const prop of nextPropsKeys) {
          if (!(0, _lodash.isEqual)(props[prop], nextProps[prop])) {
            props[prop] = nextProps[prop];
          }
        }
        // remove
        for (const extraProp of (0, _lodash.difference)(curPropKeys, nextPropsKeys)) {
          props[extraProp] = undefined;
        }
      });

      // return HoC
      let StoreProvider = class StoreProvider extends _react2.default.PureComponent {
        constructor(...args) {
          var _temp;

          return _temp = super(...args), this.state = {
            error: null
          }, _temp;
        }

        static get name() {
          return Klass.name;
        }

        get name() {
          return Klass.name;
        }

        componentWillMount() {
          this.componentWillUpdate = this.componentWillUpdate.bind(this);
          this.setupProps();
          this.setupStores();
          this.unmounted = false;
        }

        // PureComponent means this is only called when props are not shallow equal
        componentWillUpdate(nextProps) {
          updateProps(this._props, nextProps);
        }

        componentDidMount() {
          if (this.stores === null) {
            return;
          }
          this.mountStores();
          _black.view.on('hmr', () => this.clearError && this.clearError());
        }

        clearError() {
          if (!this.unmounted) {
            this.setState({ error: null });
          }
        }

        componentWillUnmount() {
          // if you remove @view({ store: ... }) it tries to remove it here but its gone
          if (this.disposeStores) {
            this.disposeStores();
            _black.view.off('hmr', () => this.clearError && this.clearError());
            this.unmounted = true;
          }
        }

        componentDidCatch(error) {
          console.error('StoreProvidable.handleError', error);
          this.setState({ error });
        }

        // for reactive props in stores
        // 🐛 must run this before this.setupStore()
        setupProps() {
          if (!this._props) {
            Mobx.extendObservable(this, { _props: _extends({}, this.props) });
          }
        }

        // DO NOT USE CLASS PROPERTY DECORATORS FOR THIS, IDK WTF WHY
        setupStores() {
          const getProps = {
            get: () => this._props,
            configurable: true

            // start stores
          };const stores = Object.keys(Stores).reduce((acc, cur) => {
            const Store = Stores[cur];
            const createStore = () => {
              Object.defineProperty(Store.prototype, 'props', getProps);
              const store = new Store();
              delete Store.prototype.props; // safety, remove hack
              // then define directly
              Object.defineProperty(store, 'props', getProps);
              return store;
            };
            return _extends({}, acc, {
              [cur]: createStore()
            });
          }, {});

          // optional mount function
          if (options.onStoreMount) {
            for (const name of Object.keys(stores)) {
              // fallback to store if nothing returned
              stores[name] = options.onStoreMount.call(stores[name], name, stores[name], this.props) || stores[name];
            }
          }

          this.stores = stores;
        }

        mountStores() {
          if (!this.stores) {
            return;
          }
          for (const name of Object.keys(this.stores)) {
            const store = this.stores[name];
            Helpers.emitter.emit('store.mount', { name, thing: store });
            if (options.onStoreDidMount) {
              options.onStoreDidMount(store, this.props);
            }
          }
        }

        disposeStores() {
          if (!this.stores) {
            log('no stores to dispose');
            return;
          }
          for (const name of Object.keys(this.stores)) {
            const store = this.stores[name];
            Helpers.emitter.emit('store.unmount', { name, thing: store });
            if (options.onStoreUnmount) {
              options.onStoreUnmount(store);
            }
          }
        }

        hotReload() {
          this.disposeStores();
          this.setupProps();
          this.setupStores();
          this.mountStores();
        }

        render() {
          if (this.state.error) {
            return _react2.default.createElement(_redboxReact2.default, { $$draggable: true, error: this.state.error });
          }
          if (this.failed || !this.state) {
            return _react2.default.createElement(_redboxReact2.default, { $$draggable: true, error: { message: 'Failed view' } });
          }
          return _react2.default.createElement(Klass, _extends({}, this.props, this.stores));
        }
      };

      if (context && Stores) {
        StoreProvider.prototype.childContextTypes = {
          stores: _propTypes.object
        };

        StoreProvider.prototype.getChildContext = function () {
          if (options.warnOnOverwriteStore && this.context.stores) {
            Object.keys(Stores).forEach(name => {
              if (this.context.stores[name]) {
                console.log(`Notice! You are overwriting an existing store in provide. This may be intentional: ${name} from ${Klass.name}`);
              }
            });
          }

          const names = Object.keys(Stores);
          const stores = _extends({}, this.context.stores, (0, _lodash.pickBy)(this.stores, (value, key) => names.indexOf(key) >= 0));
          return { stores };
        };
      }

      // copy statics
      (0, _hoistNonReactStatics2.default)(StoreProvider, Klass);

      // add stores to context
      if (context) {
        StoreProvider.contextTypes = {
          stores: _propTypes.object
        };
        StoreProvider.childContextTypes = {
          stores: _propTypes.object
        };
      }

      return StoreProvider;
    }
  };
}
//# sourceMappingURL=storeProvidable.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__RewireAPI__ = exports.__ResetDependency__ = exports.__set__ = exports.__Rewire__ = exports.__GetDependency__ = exports.__get__ = exports.RedBoxError = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _propTypes = require('1111');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('1112');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('1113');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _style = require('1114');

var _style2 = _interopRequireDefault(_style);

var _errorStackParser = require('1115');

var _errorStackParser2 = _interopRequireDefault(_errorStackParser);

var _objectAssign = require('1116');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _lib = require('1117');

var _sourcemappedStacktrace = require('1118');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var RedBoxError = exports.RedBoxError = function (_get__2) {
  _inherits(RedBoxError, _get__2);

  function RedBoxError(props) {
    _classCallCheck(this, RedBoxError);

    var _this = _possibleConstructorReturn(this, (RedBoxError.__proto__ || Object.getPrototypeOf(RedBoxError)).call(this, props));

    _this.state = {
      error: null,
      mapped: false
    };

    _this.mapOnConstruction(props.error);
    return _this;
  }

  // State is used to store the error mapped to the source map.


  _createClass(RedBoxError, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!this.state.mapped) this.mapError(this.props.error);
    }

    // Try to map the error when the component gets constructed, this is possible
    // in some cases like evals.

  }, {
    key: 'mapOnConstruction',
    value: function mapOnConstruction(error) {
      var stackLines = error.stack.split('\n');

      // There's no stack, only the error message.
      if (stackLines.length < 2) {
        this.state = { error: error, mapped: true };
        return;
      }

      // Using the “eval” setting on webpack already gives the correct location.
      var isWebpackEval = stackLines[1].search(/\(webpack:\/{3}/) !== -1;
      if (isWebpackEval) {
        // No changes are needed here.
        this.state = { error: error, mapped: true };
        return;
      }

      // Other eval follow a specific pattern and can be easily parsed.
      var isEval = stackLines[1].search(/\(eval at/) !== -1;
      if (!isEval) {
        // mapping will be deferred until `componentDidMount`
        this.state = { error: error, mapped: false };
        return;
      }

      // The first line is the error message.
      var fixedLines = [stackLines.shift()];
      // The rest needs to be fixed.
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = stackLines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var stackLine = _step.value;

          var evalStackLine = stackLine.match(/(.+)\(eval at (.+) \(.+?\), .+(\:[0-9]+\:[0-9]+)\)/);
          if (evalStackLine) {
            var _evalStackLine = _slicedToArray(evalStackLine, 4),
                atSomething = _evalStackLine[1],
                file = _evalStackLine[2],
                rowColumn = _evalStackLine[3];

            fixedLines.push(atSomething + ' (' + file + rowColumn + ')');
          } else {
            // TODO: When stack frames of different types are detected, try to load the additional source maps
            fixedLines.push(stackLine);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      error.stack = fixedLines.join('\n');
      this.state = { error: error, mapped: true };
    }
  }, {
    key: 'mapError',
    value: function mapError(error) {
      var _this2 = this;

      _get__('mapStackTrace')(error.stack, function (mappedStack) {
        error.stack = mappedStack.join('\n');
        _this2.setState({ error: error, mapped: true });
      });
    }
  }, {
    key: 'renderFrames',
    value: function renderFrames(frames) {
      var _props = this.props,
          filename = _props.filename,
          editorScheme = _props.editorScheme,
          useLines = _props.useLines,
          useColumns = _props.useColumns;

      var _get__3 = _get__('assign')({}, _get__('style'), this.props.style),
          frame = _get__3.frame,
          file = _get__3.file,
          linkToFile = _get__3.linkToFile;

      return frames.map(function (f, index) {
        var text = void 0;
        var url = void 0;

        if (index === 0 && filename && !_get__('isFilenameAbsolute')(f.fileName)) {
          url = _get__('makeUrl')(filename, editorScheme);
          text = _get__('makeLinkText')(filename);
        } else {
          var lines = useLines ? f.lineNumber : null;
          var columns = useColumns ? f.columnNumber : null;
          url = _get__('makeUrl')(f.fileName, editorScheme, lines, columns);
          text = _get__('makeLinkText')(f.fileName, lines, columns);
        }

        return _get__('React').createElement('div', { style: frame, key: index }, _get__('React').createElement('div', null, f.functionName), _get__('React').createElement('div', { style: file }, _get__('React').createElement('a', { href: url, style: linkToFile }, text)));
      });
    }
  }, {
    key: 'render',
    value: function render() {
      // The error is received as a property to initialize state.error, which may
      // be updated when it is mapped to the source map.
      var error = this.state.error;
      var className = this.props.className;

      var _get__4 = _get__('assign')({}, _get__('style'), this.props.style),
          redbox = _get__4.redbox,
          message = _get__4.message,
          stack = _get__4.stack,
          frame = _get__4.frame;

      var frames = void 0;
      var parseError = void 0;
      try {
        frames = _get__('ErrorStackParser').parse(error);
      } catch (e) {
        parseError = new Error('Failed to parse stack trace. Stack trace information unavailable.');
      }

      if (parseError) {
        frames = _get__('React').createElement('div', { style: frame, key: 0 }, _get__('React').createElement('div', null, parseError.message));
      } else {
        frames = this.renderFrames(frames);
      }

      return _get__('React').createElement('div', { style: redbox, className: className }, _get__('React').createElement('div', { style: message }, error.name, ': ', error.message), _get__('React').createElement('div', { style: stack }, frames));
    }
  }]);

  return RedBoxError;
}(_get__('Component'));

// "Portal" component for actual RedBoxError component to
// render to (directly under body). Prevents bugs as in #27.


RedBoxError.propTypes = {
  error: _get__('PropTypes').instanceOf(Error).isRequired,
  filename: _get__('PropTypes').string,
  editorScheme: _get__('PropTypes').string,
  useLines: _get__('PropTypes').bool,
  useColumns: _get__('PropTypes').bool,
  style: _get__('PropTypes').object,
  className: _get__('PropTypes').string
};
RedBoxError.displayName = 'RedBoxError';
RedBoxError.defaultProps = {
  useLines: true,
  useColumns: true };

var RedBox = function (_get__5) {
  _inherits(RedBox, _get__5);

  function RedBox() {
    _classCallCheck(this, RedBox);

    return _possibleConstructorReturn(this, (RedBox.__proto__ || Object.getPrototypeOf(RedBox)).apply(this, arguments));
  }

  _createClass(RedBox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.el = document.createElement('div');
      document.body.appendChild(this.el);
      this.renderRedBoxError();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.renderRedBoxError();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _get__('ReactDOM').unmountComponentAtNode(this.el);
      document.body.removeChild(this.el);
      this.el = null;
    }
  }, {
    key: 'renderRedBoxError',
    value: function renderRedBoxError() {
      _get__('ReactDOM').render(_get__('React').createElement(_get__('RedBoxError'), this.props), this.el);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return RedBox;
}(_get__('Component'));

RedBox.propTypes = {
  error: _get__('PropTypes').instanceOf(Error).isRequired
};
RedBox.displayName = 'RedBox';
exports.default = RedBox;

var _RewiredData__ = Object.create(null);

var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';
var _RewireAPI__ = {};

(function () {
  function addPropertyToAPIObject(name, value) {
    Object.defineProperty(_RewireAPI__, name, {
      value: value,
      enumerable: false,
      configurable: true
    });
  }

  addPropertyToAPIObject('__get__', _get__);
  addPropertyToAPIObject('__GetDependency__', _get__);
  addPropertyToAPIObject('__Rewire__', _set__);
  addPropertyToAPIObject('__set__', _set__);
  addPropertyToAPIObject('__reset__', _reset__);
  addPropertyToAPIObject('__ResetDependency__', _reset__);
  addPropertyToAPIObject('__with__', _with__);
})();

function _get__(variableName) {
  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
    return _get_original__(variableName);
  } else {
    var value = _RewiredData__[variableName];

    if (value === INTENTIONAL_UNDEFINED) {
      return undefined;
    } else {
      return value;
    }
  }
}

function _get_original__(variableName) {
  switch (variableName) {
    case 'PropTypes':
      return _propTypes2.default;

    case 'mapStackTrace':
      return _sourcemappedStacktrace.mapStackTrace;

    case 'assign':
      return _objectAssign2.default;

    case 'style':
      return _style2.default;

    case 'isFilenameAbsolute':
      return _lib.isFilenameAbsolute;

    case 'makeUrl':
      return _lib.makeUrl;

    case 'makeLinkText':
      return _lib.makeLinkText;

    case 'ErrorStackParser':
      return _errorStackParser2.default;

    case 'Component':
      return _react.Component;

    case 'ReactDOM':
      return _reactDom2.default;

    case 'React':
      return _react2.default;

    case 'RedBoxError':
      return RedBoxError;
  }

  return undefined;
}

function _assign__(variableName, value) {
  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
    return _set_original__(variableName, value);
  } else {
    return _RewiredData__[variableName] = value;
  }
}

function _set_original__(variableName, _value) {
  switch (variableName) {}

  return undefined;
}

function _update_operation__(operation, variableName, prefix) {
  var oldValue = _get__(variableName);

  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;

  _assign__(variableName, newValue);

  return prefix ? newValue : oldValue;
}

function _set__(variableName, value) {
  if ((typeof variableName === 'undefined' ? 'undefined' : _typeof(variableName)) === 'object') {
    Object.keys(variableName).forEach(function (name) {
      _RewiredData__[name] = variableName[name];
    });
  } else {
    if (value === undefined) {
      _RewiredData__[variableName] = INTENTIONAL_UNDEFINED;
    } else {
      _RewiredData__[variableName] = value;
    }

    return function () {
      _reset__(variableName);
    };
  }
}

function _reset__(variableName) {
  delete _RewiredData__[variableName];
}

function _with__(object) {
  var rewiredVariableNames = Object.keys(object);
  var previousValues = {};

  function reset() {
    rewiredVariableNames.forEach(function (variableName) {
      _RewiredData__[variableName] = previousValues[variableName];
    });
  }

  return function (callback) {
    rewiredVariableNames.forEach(function (variableName) {
      previousValues[variableName] = _RewiredData__[variableName];
      _RewiredData__[variableName] = object[variableName];
    });
    var result = callback();

    if (!!result && typeof result.then == 'function') {
      result.then(reset).catch(reset);
    } else {
      reset();
    }

    return result;
  };
}

var _typeOfOriginalExport = typeof RedBox === 'undefined' ? 'undefined' : _typeof(RedBox);

function addNonEnumerableProperty(name, value) {
  Object.defineProperty(RedBox, name, {
    value: value,
    enumerable: false,
    configurable: true
  });
}

if ((_typeOfOriginalExport === 'object' || _typeOfOriginalExport === 'function') && Object.isExtensible(RedBox)) {
  addNonEnumerableProperty('__get__', _get__);
  addNonEnumerableProperty('__GetDependency__', _get__);
  addNonEnumerableProperty('__Rewire__', _set__);
  addNonEnumerableProperty('__set__', _set__);
  addNonEnumerableProperty('__reset__', _reset__);
  addNonEnumerableProperty('__ResetDependency__', _reset__);
  addNonEnumerableProperty('__with__', _with__);
  addNonEnumerableProperty('__RewireAPI__', _RewireAPI__);
}

exports.__get__ = _get__;
exports.__GetDependency__ = _get__;
exports.__Rewire__ = _set__;
exports.__set__ = _set__;
exports.__ResetDependency__ = _reset__;
exports.__RewireAPI__ = _RewireAPI__;
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/lib/style.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _DefaultExportValue = {
  redbox: {
    boxSizing: 'border-box',
    fontFamily: 'sans-serif',
    position: 'fixed',
    padding: 10,
    top: '0px',
    left: '0px',
    bottom: '0px',
    right: '0px',
    width: '100%',
    background: 'rgb(204, 0, 0)',
    color: 'white',
    zIndex: 2147483647,
    textAlign: 'left',
    fontSize: '16px',
    lineHeight: 1.2,
    overflow: 'auto'
  },
  message: {
    fontWeight: 'bold'
  },
  stack: {
    fontFamily: 'monospace',
    marginTop: '2em'
  },
  frame: {
    marginTop: '1em'
  },
  file: {
    fontSize: '0.8em',
    color: 'rgba(255, 255, 255, 0.7)'
  },
  linkToFile: {
    textDecoration: 'none',
    color: 'rgba(255, 255, 255, 0.7)'
  }
};
exports.default = _DefaultExportValue;
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/node_modules/error-stack-parser/error-stack-parser.js", function(__filename, __dirname, require, module, exports) {
(function (root, factory) {
  'use strict';
  // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

  /* istanbul ignore next */

  if (typeof define === 'function' && define.amd) {
    define('error-stack-parser', ['stackframe'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('1393'));
  } else {
    root.ErrorStackParser = factory(root.StackFrame);
  }
})(this, function ErrorStackParser(StackFrame) {
  'use strict';

  var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+\:\d+/;
  var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+\:\d+|\(native\))/m;
  var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code\])?$/;

  function _map(array, fn, thisArg) {
    if (typeof Array.prototype.map === 'function') {
      return array.map(fn, thisArg);
    } else {
      var output = new Array(array.length);
      for (var i = 0; i < array.length; i++) {
        output[i] = fn.call(thisArg, array[i]);
      }
      return output;
    }
  }

  function _filter(array, fn, thisArg) {
    if (typeof Array.prototype.filter === 'function') {
      return array.filter(fn, thisArg);
    } else {
      var output = [];
      for (var i = 0; i < array.length; i++) {
        if (fn.call(thisArg, array[i])) {
          output.push(array[i]);
        }
      }
      return output;
    }
  }

  function _indexOf(array, target) {
    if (typeof Array.prototype.indexOf === 'function') {
      return array.indexOf(target);
    } else {
      for (var i = 0; i < array.length; i++) {
        if (array[i] === target) {
          return i;
        }
      }
      return -1;
    }
  }

  return {
    /**
     * Given an Error object, extract the most information from it.
     *
     * @param {Error} error object
     * @return {Array} of StackFrames
     */
    parse: function ErrorStackParser$$parse(error) {
      if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
        return this.parseOpera(error);
      } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
        return this.parseV8OrIE(error);
      } else if (error.stack) {
        return this.parseFFOrSafari(error);
      } else {
        throw new Error('Cannot parse given Error object');
      }
    },

    // Separate line and column numbers from a string of the form: (URI:Line:Column)
    extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
      // Fail-fast but return locations like "(native)"
      if (urlLike.indexOf(':') === -1) {
        return [urlLike];
      }

      var regExp = /(.+?)(?:\:(\d+))?(?:\:(\d+))?$/;
      var parts = regExp.exec(urlLike.replace(/[\(\)]/g, ''));
      return [parts[1], parts[2] || undefined, parts[3] || undefined];
    },

    parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
      var filtered = _filter(error.stack.split('\n'), function (line) {
        return !!line.match(CHROME_IE_STACK_REGEXP);
      }, this);

      return _map(filtered, function (line) {
        if (line.indexOf('(eval ') > -1) {
          // Throw away eval information until we implement stacktrace.js/stackframe#8
          line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^\()]*)|(\)\,.*$)/g, '');
        }
        var tokens = line.replace(/^\s+/, '').replace(/\(eval code/g, '(').split(/\s+/).slice(1);
        var locationParts = this.extractLocation(tokens.pop());
        var functionName = tokens.join(' ') || undefined;
        var fileName = _indexOf(['eval', '<anonymous>'], locationParts[0]) > -1 ? undefined : locationParts[0];

        return new StackFrame(functionName, undefined, fileName, locationParts[1], locationParts[2], line);
      }, this);
    },

    parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
      var filtered = _filter(error.stack.split('\n'), function (line) {
        return !line.match(SAFARI_NATIVE_CODE_REGEXP);
      }, this);

      return _map(filtered, function (line) {
        // Throw away eval information until we implement stacktrace.js/stackframe#8
        if (line.indexOf(' > eval') > -1) {
          line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval\:\d+\:\d+/g, ':$1');
        }

        if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
          // Safari eval frames only have function names and nothing else
          return new StackFrame(line);
        } else {
          var tokens = line.split('@');
          var locationParts = this.extractLocation(tokens.pop());
          var functionName = tokens.join('@') || undefined;
          return new StackFrame(functionName, undefined, locationParts[0], locationParts[1], locationParts[2], line);
        }
      }, this);
    },

    parseOpera: function ErrorStackParser$$parseOpera(e) {
      if (!e.stacktrace || e.message.indexOf('\n') > -1 && e.message.split('\n').length > e.stacktrace.split('\n').length) {
        return this.parseOpera9(e);
      } else if (!e.stack) {
        return this.parseOpera10(e);
      } else {
        return this.parseOpera11(e);
      }
    },

    parseOpera9: function ErrorStackParser$$parseOpera9(e) {
      var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
      var lines = e.message.split('\n');
      var result = [];

      for (var i = 2, len = lines.length; i < len; i += 2) {
        var match = lineRE.exec(lines[i]);
        if (match) {
          result.push(new StackFrame(undefined, undefined, match[2], match[1], undefined, lines[i]));
        }
      }

      return result;
    },

    parseOpera10: function ErrorStackParser$$parseOpera10(e) {
      var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
      var lines = e.stacktrace.split('\n');
      var result = [];

      for (var i = 0, len = lines.length; i < len; i += 2) {
        var match = lineRE.exec(lines[i]);
        if (match) {
          result.push(new StackFrame(match[3] || undefined, undefined, match[2], match[1], undefined, lines[i]));
        }
      }

      return result;
    },

    // Opera 10.65+ Error.stack very similar to FF/Safari
    parseOpera11: function ErrorStackParser$$parseOpera11(error) {
      var filtered = _filter(error.stack.split('\n'), function (line) {
        return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
      }, this);

      return _map(filtered, function (line) {
        var tokens = line.split('@');
        var locationParts = this.extractLocation(tokens.pop());
        var functionCall = tokens.shift() || '';
        var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, '$2').replace(/\([^\)]*\)/g, '') || undefined;
        var argsRaw;
        if (functionCall.match(/\(([^\)]*)\)/)) {
          argsRaw = functionCall.replace(/^[^\(]+\(([^\)]*)\)$/, '$1');
        }
        var args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');
        return new StackFrame(functionName, args, locationParts[0], locationParts[1], locationParts[2], line);
      }, this);
    }
  };
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/node_modules/stackframe/stackframe.js", function(__filename, __dirname, require, module, exports) {
(function (root, factory) {
  'use strict';
  // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

  /* istanbul ignore next */

  if (typeof define === 'function' && define.amd) {
    define('stackframe', [], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.StackFrame = factory();
  }
})(this, function () {
  'use strict';

  function _isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }

  function StackFrame(functionName, args, fileName, lineNumber, columnNumber, source) {
    if (functionName !== undefined) {
      this.setFunctionName(functionName);
    }
    if (args !== undefined) {
      this.setArgs(args);
    }
    if (fileName !== undefined) {
      this.setFileName(fileName);
    }
    if (lineNumber !== undefined) {
      this.setLineNumber(lineNumber);
    }
    if (columnNumber !== undefined) {
      this.setColumnNumber(columnNumber);
    }
    if (source !== undefined) {
      this.setSource(source);
    }
  }

  StackFrame.prototype = {
    getFunctionName: function () {
      return this.functionName;
    },
    setFunctionName: function (v) {
      this.functionName = String(v);
    },

    getArgs: function () {
      return this.args;
    },
    setArgs: function (v) {
      if (Object.prototype.toString.call(v) !== '[object Array]') {
        throw new TypeError('Args must be an Array');
      }
      this.args = v;
    },

    // NOTE: Property name may be misleading as it includes the path,
    // but it somewhat mirrors V8's JavaScriptStackTraceApi
    // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi and Gecko's
    // http://mxr.mozilla.org/mozilla-central/source/xpcom/base/nsIException.idl#14
    getFileName: function () {
      return this.fileName;
    },
    setFileName: function (v) {
      this.fileName = String(v);
    },

    getLineNumber: function () {
      return this.lineNumber;
    },
    setLineNumber: function (v) {
      if (!_isNumber(v)) {
        throw new TypeError('Line Number must be a Number');
      }
      this.lineNumber = Number(v);
    },

    getColumnNumber: function () {
      return this.columnNumber;
    },
    setColumnNumber: function (v) {
      if (!_isNumber(v)) {
        throw new TypeError('Column Number must be a Number');
      }
      this.columnNumber = Number(v);
    },

    getSource: function () {
      return this.source;
    },
    setSource: function (v) {
      this.source = String(v);
    },

    toString: function () {
      var functionName = this.getFunctionName() || '{anonymous}';
      var args = '(' + (this.getArgs() || []).join(',') + ')';
      var fileName = this.getFileName() ? '@' + this.getFileName() : '';
      var lineNumber = _isNumber(this.getLineNumber()) ? ':' + this.getLineNumber() : '';
      var columnNumber = _isNumber(this.getColumnNumber()) ? ':' + this.getColumnNumber() : '';
      return functionName + args + fileName + lineNumber + columnNumber;
    }
  };

  return StackFrame;
});
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/lib/lib.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var filenameWithoutLoaders = exports.filenameWithoutLoaders = function filenameWithoutLoaders() {
  var filename = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var index = filename.lastIndexOf('!');

  return index < 0 ? filename : filename.substr(index + 1);
};

var filenameHasLoaders = exports.filenameHasLoaders = function filenameHasLoaders(filename) {
  var actualFilename = _get__('filenameWithoutLoaders')(filename);

  return actualFilename !== filename;
};

var filenameHasSchema = exports.filenameHasSchema = function filenameHasSchema(filename) {
  return (/^[\w]+\:/.test(filename)
  );
};

var isFilenameAbsolute = exports.isFilenameAbsolute = function isFilenameAbsolute(filename) {
  var actualFilename = _get__('filenameWithoutLoaders')(filename);

  if (actualFilename.indexOf('/') === 0) {
    return true;
  }

  return false;
};

var makeUrl = exports.makeUrl = function makeUrl(filename, scheme, line, column) {
  var actualFilename = _get__('filenameWithoutLoaders')(filename);

  if (_get__('filenameHasSchema')(filename)) {
    return actualFilename;
  }

  var url = 'file://' + actualFilename;

  if (scheme) {
    url = scheme + '://open?url=' + url;

    if (line && actualFilename === filename) {
      url = url + '&line=' + line;

      if (column) {
        url = url + '&column=' + column;
      }
    }
  }

  return url;
};

var makeLinkText = exports.makeLinkText = function makeLinkText(filename, line, column) {
  var text = _get__('filenameWithoutLoaders')(filename);

  if (line && text === filename) {
    text = text + ':' + line;

    if (column) {
      text = text + ':' + column;
    }
  }

  return text;
};

var _RewiredData__ = Object.create(null);

var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';
var _RewireAPI__ = {};

(function () {
  function addPropertyToAPIObject(name, value) {
    Object.defineProperty(_RewireAPI__, name, {
      value: value,
      enumerable: false,
      configurable: true
    });
  }

  addPropertyToAPIObject('__get__', _get__);
  addPropertyToAPIObject('__GetDependency__', _get__);
  addPropertyToAPIObject('__Rewire__', _set__);
  addPropertyToAPIObject('__set__', _set__);
  addPropertyToAPIObject('__reset__', _reset__);
  addPropertyToAPIObject('__ResetDependency__', _reset__);
  addPropertyToAPIObject('__with__', _with__);
})();

function _get__(variableName) {
  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
    return _get_original__(variableName);
  } else {
    var value = _RewiredData__[variableName];

    if (value === INTENTIONAL_UNDEFINED) {
      return undefined;
    } else {
      return value;
    }
  }
}

function _get_original__(variableName) {
  switch (variableName) {
    case 'filenameWithoutLoaders':
      return filenameWithoutLoaders;

    case 'filenameHasSchema':
      return filenameHasSchema;
  }

  return undefined;
}

function _assign__(variableName, value) {
  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
    return _set_original__(variableName, value);
  } else {
    return _RewiredData__[variableName] = value;
  }
}

function _set_original__(variableName, _value) {
  switch (variableName) {}

  return undefined;
}

function _update_operation__(operation, variableName, prefix) {
  var oldValue = _get__(variableName);

  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;

  _assign__(variableName, newValue);

  return prefix ? newValue : oldValue;
}

function _set__(variableName, value) {
  if ((typeof variableName === 'undefined' ? 'undefined' : _typeof(variableName)) === 'object') {
    Object.keys(variableName).forEach(function (name) {
      _RewiredData__[name] = variableName[name];
    });
  } else {
    if (value === undefined) {
      _RewiredData__[variableName] = INTENTIONAL_UNDEFINED;
    } else {
      _RewiredData__[variableName] = value;
    }

    return function () {
      _reset__(variableName);
    };
  }
}

function _reset__(variableName) {
  delete _RewiredData__[variableName];
}

function _with__(object) {
  var rewiredVariableNames = Object.keys(object);
  var previousValues = {};

  function reset() {
    rewiredVariableNames.forEach(function (variableName) {
      _RewiredData__[variableName] = previousValues[variableName];
    });
  }

  return function (callback) {
    rewiredVariableNames.forEach(function (variableName) {
      previousValues[variableName] = _RewiredData__[variableName];
      _RewiredData__[variableName] = object[variableName];
    });
    var result = callback();

    if (!!result && typeof result.then == 'function') {
      result.then(reset).catch(reset);
    } else {
      reset();
    }

    return result;
  };
}

exports.__get__ = _get__;
exports.__GetDependency__ = _get__;
exports.__Rewire__ = _set__;
exports.__set__ = _set__;
exports.__ResetDependency__ = _reset__;
exports.__RewireAPI__ = _RewireAPI__;
exports.default = _RewireAPI__;
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/node_modules/sourcemapped-stacktrace/dist/sourcemapped-stacktrace.js", function(__filename, __dirname, require, module, exports) {
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports["sourceMappedStackTrace"] = factory();else root["sourceMappedStackTrace"] = factory();
})(this, function () {
  return (/******/function (modules) {
      // webpackBootstrap
      /******/ // The module cache
      /******/var installedModules = {};

      /******/ // The require function
      /******/function __webpack_require__(moduleId) {

        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId])
          /******/return installedModules[moduleId].exports;

        /******/ // Create a new module (and put it into the cache)
        /******/var module = installedModules[moduleId] = {
          /******/exports: {},
          /******/id: moduleId,
          /******/loaded: false
          /******/ };

        /******/ // Execute the module function
        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

        /******/ // Flag the module as loaded
        /******/module.loaded = true;

        /******/ // Return the exports of the module
        /******/return module.exports;
        /******/
      }

      /******/ // expose the modules object (__webpack_modules__)
      /******/__webpack_require__.m = modules;

      /******/ // expose the module cache
      /******/__webpack_require__.c = installedModules;

      /******/ // __webpack_public_path__
      /******/__webpack_require__.p = "";

      /******/ // Load entry module and return exports
      /******/return __webpack_require__(0);
      /******/
    }(
    /************************************************************************/
    /******/[
    /* 0 */
    /***/function (module, exports, __webpack_require__) {

      var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /*
                                                                       * sourcemapped-stacktrace.js
                                                                       * created by James Salter <iteration@gmail.com> (2014)
                                                                       *
                                                                       * https://github.com/novocaine/sourcemapped-stacktrace
                                                                       *
                                                                       * Licensed under the New BSD license. See LICENSE or:
                                                                       * http://opensource.org/licenses/BSD-3-Clause
                                                                       */

      /*global define */

      // note we only include source-map-consumer, not the whole source-map library,
      // which includes gear for generating source maps that we don't need
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (source_map_consumer) {

        var global_mapForUri = {};

        /**
         * Re-map entries in a stacktrace using sourcemaps if available.
         *
         * @param {Array} stack - Array of strings from the browser's stack
         *                        representation. Currently only Chrome
         *                        format is supported.
         * @param {function} done - Callback invoked with the transformed stacktrace
         *                          (an Array of Strings) passed as the first
         *                          argument
         * @param {Object} [opts] - Optional options object.
         * @param {Function} [opts.filter] - Filter function applied to each stackTrace line.
         *                                   Lines which do not pass the filter won't be processesd.
         * @param {boolean} [opts.cacheGlobally] - Whether to cache sourcemaps globally across multiple calls.
         */
        var mapStackTrace = function (stack, done, opts) {
          var lines;
          var line;
          var mapForUri = {};
          var rows = {};
          var fields;
          var uri;
          var expected_fields;
          var regex;

          var fetcher = new Fetcher(function () {
            var result = processSourceMaps(lines, rows, fetcher.mapForUri);
            done(result);
          }, opts);

          if (isChromeOrEdge() || isIE11Plus()) {
            regex = /^ +at.+\((.*):([0-9]+):([0-9]+)/;
            expected_fields = 4;
            // (skip first line containing exception message)
            skip_lines = 1;
          } else if (isFirefox() || isSafari()) {
            regex = /@(.*):([0-9]+):([0-9]+)/;
            expected_fields = 4;
            skip_lines = 0;
          } else {
            throw new Error("unknown browser :(");
          }

          lines = stack.split("\n").slice(skip_lines);

          for (var i = 0; i < lines.length; i++) {
            line = lines[i];
            if (opts && opts.filter && !opts.filter(line)) continue;

            fields = line.match(regex);
            if (fields && fields.length === expected_fields) {
              rows[i] = fields;
              uri = fields[1];
              if (!uri.match(/<anonymous>/)) {
                fetcher.fetchScript(uri);
              }
            }
          }

          // if opts.cacheGlobally set, all maps could have been cached already,
          // thus we need to call done callback right away
          if (fetcher.sem === 0) {
            fetcher.done(fetcher.mapForUri);
          }
        };

        var isChromeOrEdge = function () {
          return navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
        };

        var isFirefox = function () {
          return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
        };

        var isSafari = function () {
          return navigator.userAgent.toLowerCase().indexOf('safari') > -1;
        };

        var isIE11Plus = function () {
          return document.documentMode && document.documentMode >= 11;
        };

        var Fetcher = function (done, opts) {
          this.sem = 0;
          this.mapForUri = opts && opts.cacheGlobally ? global_mapForUri : {};
          this.done = done;
        };

        Fetcher.prototype.fetchScript = function (uri) {
          if (!(uri in this.mapForUri)) {
            this.sem++;
            this.mapForUri[uri] = null;
          } else {
            return;
          }

          var xhr = createXMLHTTPObject();
          var that = this;
          xhr.onreadystatechange = function (e) {
            that.onScriptLoad.call(that, e, uri);
          };
          xhr.open("GET", uri, true);
          xhr.send();
        };

        var absUrlRegex = new RegExp('^(?:[a-z]+:)?//', 'i');

        Fetcher.prototype.onScriptLoad = function (e, uri) {
          if (e.target.readyState !== 4) {
            return;
          }

          if (e.target.status === 200 || uri.slice(0, 7) === "file://" && e.target.status === 0) {
            // find .map in file.
            //
            // attempt to find it at the very end of the file, but tolerate trailing
            // whitespace inserted by some packers.
            var match = e.target.responseText.match("//# [s]ourceMappingURL=(.*)[\\s]*$", "m");
            if (match && match.length === 2) {
              // get the map
              var mapUri = match[1];

              var embeddedSourceMap = mapUri.match("data:application/json;(charset=[^;]+;)?base64,(.*)");

              if (embeddedSourceMap && embeddedSourceMap[2]) {
                this.mapForUri[uri] = new source_map_consumer.SourceMapConsumer(atob(embeddedSourceMap[2]));
                this.done(this.mapForUri);
              } else {
                if (!absUrlRegex.test(mapUri)) {
                  // relative url; according to sourcemaps spec is 'source origin'
                  var origin;
                  var lastSlash = uri.lastIndexOf('/');
                  if (lastSlash !== -1) {
                    origin = uri.slice(0, lastSlash + 1);
                    mapUri = origin + mapUri;
                    // note if lastSlash === -1, actual script uri has no slash
                    // somehow, so no way to use it as a prefix... we give up and try
                    // as absolute
                  }
                }

                var xhrMap = createXMLHTTPObject();
                var that = this;
                xhrMap.onreadystatechange = function () {
                  if (xhrMap.readyState === 4) {
                    that.sem--;
                    if (xhrMap.status === 200 || mapUri.slice(0, 7) === "file://" && xhrMap.status === 0) {
                      that.mapForUri[uri] = new source_map_consumer.SourceMapConsumer(xhrMap.responseText);
                    }
                    if (that.sem === 0) {
                      that.done(that.mapForUri);
                    }
                  }
                };

                xhrMap.open("GET", mapUri, true);
                xhrMap.send();
              }
            } else {
              // no map
              this.sem--;
            }
          } else {
            // HTTP error fetching uri of the script
            this.sem--;
          }

          if (this.sem === 0) {
            this.done(this.mapForUri);
          }
        };

        var processSourceMaps = function (lines, rows, mapForUri) {
          var result = [];
          var map;
          for (var i = 0; i < lines.length; i++) {
            var row = rows[i];
            if (row) {
              var uri = row[1];
              var line = parseInt(row[2], 10);
              var column = parseInt(row[3], 10);
              map = mapForUri[uri];

              if (map) {
                // we think we have a map for that uri. call source-map library
                var origPos = map.originalPositionFor({ line: line, column: column });
                result.push(formatOriginalPosition(origPos.source, origPos.line, origPos.column, origPos.name || origName(lines[i])));
              } else {
                // we can't find a map for that url, but we parsed the row.
                // reformat unchanged line for consistency with the sourcemapped
                // lines.
                result.push(formatOriginalPosition(uri, line, column, origName(lines[i])));
              }
            } else {
              // we weren't able to parse the row, push back what we were given
              result.push(lines[i]);
            }
          }

          return result;
        };

        function origName(origLine) {
          var match = String(origLine).match(isChromeOrEdge() || isIE11Plus() ? / +at +([^ ]*).*/ : /([^@]*)@.*/);
          return match && match[1];
        }

        var formatOriginalPosition = function (source, line, column, name) {
          // mimic chrome's format
          return "    at " + (name ? name : "(unknown)") + " (" + source + ":" + line + ":" + column + ")";
        };

        // xmlhttprequest boilerplate
        var XMLHttpFactories = [function () {
          return new XMLHttpRequest();
        }, function () {
          return new ActiveXObject("Msxml2.XMLHTTP");
        }, function () {
          return new ActiveXObject("Msxml3.XMLHTTP");
        }, function () {
          return new ActiveXObject("Microsoft.XMLHTTP");
        }];

        function createXMLHTTPObject() {
          var xmlhttp = false;
          for (var i = 0; i < XMLHttpFactories.length; i++) {
            try {
              xmlhttp = XMLHttpFactories[i]();
            } catch (e) {
              continue;
            }
            break;
          }
          return xmlhttp;
        }

        return {
          mapStackTrace: mapStackTrace
        };
      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

      /***/
    },
    /* 1 */
    /***/function (module, exports, __webpack_require__) {

      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      var util = __webpack_require__(2);
      var binarySearch = __webpack_require__(3);
      var ArraySet = __webpack_require__(4).ArraySet;
      var base64VLQ = __webpack_require__(5);
      var quickSort = __webpack_require__(7).quickSort;

      function SourceMapConsumer(aSourceMap) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === 'string') {
          sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
        }

        return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);
      }

      SourceMapConsumer.fromSourceMap = function (aSourceMap) {
        return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
      };

      /**
       * The version of the source mapping spec that we are consuming.
       */
      SourceMapConsumer.prototype._version = 3;

      // `__generatedMappings` and `__originalMappings` are arrays that hold the
      // parsed mapping coordinates from the source map's "mappings" attribute. They
      // are lazily instantiated, accessed via the `_generatedMappings` and
      // `_originalMappings` getters respectively, and we only parse the mappings
      // and create these arrays once queried for a source location. We jump through
      // these hoops because there can be many thousands of mappings, and parsing
      // them is expensive, so we only want to do it if we must.
      //
      // Each object in the arrays is of the form:
      //
      //     {
      //       generatedLine: The line number in the generated code,
      //       generatedColumn: The column number in the generated code,
      //       source: The path to the original source file that generated this
      //               chunk of code,
      //       originalLine: The line number in the original source that
      //                     corresponds to this chunk of generated code,
      //       originalColumn: The column number in the original source that
      //                       corresponds to this chunk of generated code,
      //       name: The name of the original symbol which generated this chunk of
      //             code.
      //     }
      //
      // All properties except for `generatedLine` and `generatedColumn` can be
      // `null`.
      //
      // `_generatedMappings` is ordered by the generated positions.
      //
      // `_originalMappings` is ordered by the original positions.

      SourceMapConsumer.prototype.__generatedMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
        get: function () {
          if (!this.__generatedMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }

          return this.__generatedMappings;
        }
      });

      SourceMapConsumer.prototype.__originalMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
        get: function () {
          if (!this.__originalMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }

          return this.__originalMappings;
        }
      });

      SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
        var c = aStr.charAt(index);
        return c === ";" || c === ",";
      };

      /**
       * Parse the mappings in a string in to a data structure which we can easily
       * query (the ordered arrays in the `this.__generatedMappings` and
       * `this.__originalMappings` properties).
       */
      SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        throw new Error("Subclasses must implement _parseMappings");
      };

      SourceMapConsumer.GENERATED_ORDER = 1;
      SourceMapConsumer.ORIGINAL_ORDER = 2;

      SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
      SourceMapConsumer.LEAST_UPPER_BOUND = 2;

      /**
       * Iterate over each mapping between an original source/line/column and a
       * generated line/column in this source map.
       *
       * @param Function aCallback
       *        The function that is called with each mapping.
       * @param Object aContext
       *        Optional. If specified, this object will be the value of `this` every
       *        time that `aCallback` is called.
       * @param aOrder
       *        Either `SourceMapConsumer.GENERATED_ORDER` or
       *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
       *        iterate over the mappings sorted by the generated file's line/column
       *        order or the original's source/line/column order, respectively. Defaults to
       *        `SourceMapConsumer.GENERATED_ORDER`.
       */
      SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
        var context = aContext || null;
        var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

        var mappings;
        switch (order) {
          case SourceMapConsumer.GENERATED_ORDER:
            mappings = this._generatedMappings;
            break;
          case SourceMapConsumer.ORIGINAL_ORDER:
            mappings = this._originalMappings;
            break;
          default:
            throw new Error("Unknown order of iteration.");
        }

        var sourceRoot = this.sourceRoot;
        mappings.map(function (mapping) {
          var source = mapping.source === null ? null : this._sources.at(mapping.source);
          if (source != null && sourceRoot != null) {
            source = util.join(sourceRoot, source);
          }
          return {
            source: source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name === null ? null : this._names.at(mapping.name)
          };
        }, this).forEach(aCallback, context);
      };

      /**
       * Returns all generated line and column information for the original source,
       * line, and column provided. If no column is provided, returns all mappings
       * corresponding to a either the line we are searching for or the next
       * closest line that has any mappings. Otherwise, returns all mappings
       * corresponding to the given line and either the column we are searching for
       * or the next closest column that has any offsets.
       *
       * The only argument is an object with the following properties:
       *
       *   - source: The filename of the original source.
       *   - line: The line number in the original source.
       *   - column: Optional. the column number in the original source.
       *
       * and an array of objects is returned, each with the following properties:
       *
       *   - line: The line number in the generated source, or null.
       *   - column: The column number in the generated source, or null.
       */
      SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
        var line = util.getArg(aArgs, 'line');

        // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
        // returns the index of the closest mapping less than the needle. By
        // setting needle.originalColumn to 0, we thus find the last mapping for
        // the given line, provided such a mapping exists.
        var needle = {
          source: util.getArg(aArgs, 'source'),
          originalLine: line,
          originalColumn: util.getArg(aArgs, 'column', 0)
        };

        if (this.sourceRoot != null) {
          needle.source = util.relative(this.sourceRoot, needle.source);
        }
        if (!this._sources.has(needle.source)) {
          return [];
        }
        needle.source = this._sources.indexOf(needle.source);

        var mappings = [];

        var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
        if (index >= 0) {
          var mapping = this._originalMappings[index];

          if (aArgs.column === undefined) {
            var originalLine = mapping.originalLine;

            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we found. Since
            // mappings are sorted, this is guaranteed to find all mappings for
            // the line we found.
            while (mapping && mapping.originalLine === originalLine) {
              mappings.push({
                line: util.getArg(mapping, 'generatedLine', null),
                column: util.getArg(mapping, 'generatedColumn', null),
                lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
              });

              mapping = this._originalMappings[++index];
            }
          } else {
            var originalColumn = mapping.originalColumn;

            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we were searching for.
            // Since mappings are sorted, this is guaranteed to find all mappings for
            // the line we are searching for.
            while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
              mappings.push({
                line: util.getArg(mapping, 'generatedLine', null),
                column: util.getArg(mapping, 'generatedColumn', null),
                lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
              });

              mapping = this._originalMappings[++index];
            }
          }
        }

        return mappings;
      };

      exports.SourceMapConsumer = SourceMapConsumer;

      /**
       * A BasicSourceMapConsumer instance represents a parsed source map which we can
       * query for information about the original file positions by giving it a file
       * position in the generated source.
       *
       * The only parameter is the raw source map (either as a JSON string, or
       * already parsed to an object). According to the spec, source maps have the
       * following attributes:
       *
       *   - version: Which version of the source map spec this map is following.
       *   - sources: An array of URLs to the original source files.
       *   - names: An array of identifiers which can be referrenced by individual mappings.
       *   - sourceRoot: Optional. The URL root from which all sources are relative.
       *   - sourcesContent: Optional. An array of contents of the original source files.
       *   - mappings: A string of base64 VLQs which contain the actual mappings.
       *   - file: Optional. The generated file this source map is associated with.
       *
       * Here is an example source map, taken from the source map spec[0]:
       *
       *     {
       *       version : 3,
       *       file: "out.js",
       *       sourceRoot : "",
       *       sources: ["foo.js", "bar.js"],
       *       names: ["src", "maps", "are", "fun"],
       *       mappings: "AA,AB;;ABCDE;"
       *     }
       *
       * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
       */
      function BasicSourceMapConsumer(aSourceMap) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === 'string') {
          sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
        }

        var version = util.getArg(sourceMap, 'version');
        var sources = util.getArg(sourceMap, 'sources');
        // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
        // requires the array) to play nice here.
        var names = util.getArg(sourceMap, 'names', []);
        var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
        var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
        var mappings = util.getArg(sourceMap, 'mappings');
        var file = util.getArg(sourceMap, 'file', null);

        // Once again, Sass deviates from the spec and supplies the version as a
        // string rather than a number, so we use loose equality checking here.
        if (version != this._version) {
          throw new Error('Unsupported version: ' + version);
        }

        sources = sources.map(String)
        // Some source maps produce relative source paths like "./foo.js" instead of
        // "foo.js".  Normalize these first so that future comparisons will succeed.
        // See bugzil.la/1090768.
        .map(util.normalize)
        // Always ensure that absolute sources are internally stored relative to
        // the source root, if the source root is absolute. Not doing this would
        // be particularly problematic when the source root is a prefix of the
        // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
        .map(function (source) {
          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
        });

        // Pass `true` below to allow duplicate names and sources. While source maps
        // are intended to be compressed and deduplicated, the TypeScript compiler
        // sometimes generates source maps with duplicates in them. See Github issue
        // #72 and bugzil.la/889492.
        this._names = ArraySet.fromArray(names.map(String), true);
        this._sources = ArraySet.fromArray(sources, true);

        this.sourceRoot = sourceRoot;
        this.sourcesContent = sourcesContent;
        this._mappings = mappings;
        this.file = file;
      }

      BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

      /**
       * Create a BasicSourceMapConsumer from a SourceMapGenerator.
       *
       * @param SourceMapGenerator aSourceMap
       *        The source map that will be consumed.
       * @returns BasicSourceMapConsumer
       */
      BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
        var smc = Object.create(BasicSourceMapConsumer.prototype);

        var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
        var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
        smc.sourceRoot = aSourceMap._sourceRoot;
        smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
        smc.file = aSourceMap._file;

        // Because we are modifying the entries (by converting string sources and
        // names to indices into the sources and names ArraySets), we have to make
        // a copy of the entry or else bad things happen. Shared mutable state
        // strikes again! See github issue #191.

        var generatedMappings = aSourceMap._mappings.toArray().slice();
        var destGeneratedMappings = smc.__generatedMappings = [];
        var destOriginalMappings = smc.__originalMappings = [];

        for (var i = 0, length = generatedMappings.length; i < length; i++) {
          var srcMapping = generatedMappings[i];
          var destMapping = new Mapping();
          destMapping.generatedLine = srcMapping.generatedLine;
          destMapping.generatedColumn = srcMapping.generatedColumn;

          if (srcMapping.source) {
            destMapping.source = sources.indexOf(srcMapping.source);
            destMapping.originalLine = srcMapping.originalLine;
            destMapping.originalColumn = srcMapping.originalColumn;

            if (srcMapping.name) {
              destMapping.name = names.indexOf(srcMapping.name);
            }

            destOriginalMappings.push(destMapping);
          }

          destGeneratedMappings.push(destMapping);
        }

        quickSort(smc.__originalMappings, util.compareByOriginalPositions);

        return smc;
      };

      /**
       * The version of the source mapping spec that we are consuming.
       */
      BasicSourceMapConsumer.prototype._version = 3;

      /**
       * The list of original sources.
       */
      Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
        get: function () {
          return this._sources.toArray().map(function (s) {
            return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
          }, this);
        }
      });

      /**
       * Provide the JIT with a nice shape / hidden class.
       */
      function Mapping() {
        this.generatedLine = 0;
        this.generatedColumn = 0;
        this.source = null;
        this.originalLine = null;
        this.originalColumn = null;
        this.name = null;
      }

      /**
       * Parse the mappings in a string in to a data structure which we can easily
       * query (the ordered arrays in the `this.__generatedMappings` and
       * `this.__originalMappings` properties).
       */
      BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        var generatedLine = 1;
        var previousGeneratedColumn = 0;
        var previousOriginalLine = 0;
        var previousOriginalColumn = 0;
        var previousSource = 0;
        var previousName = 0;
        var length = aStr.length;
        var index = 0;
        var cachedSegments = {};
        var temp = {};
        var originalMappings = [];
        var generatedMappings = [];
        var mapping, str, segment, end, value;

        while (index < length) {
          if (aStr.charAt(index) === ';') {
            generatedLine++;
            index++;
            previousGeneratedColumn = 0;
          } else if (aStr.charAt(index) === ',') {
            index++;
          } else {
            mapping = new Mapping();
            mapping.generatedLine = generatedLine;

            // Because each offset is encoded relative to the previous one,
            // many segments often have the same encoding. We can exploit this
            // fact by caching the parsed variable length fields of each segment,
            // allowing us to avoid a second parse if we encounter the same
            // segment again.
            for (end = index; end < length; end++) {
              if (this._charIsMappingSeparator(aStr, end)) {
                break;
              }
            }
            str = aStr.slice(index, end);

            segment = cachedSegments[str];
            if (segment) {
              index += str.length;
            } else {
              segment = [];
              while (index < end) {
                base64VLQ.decode(aStr, index, temp);
                value = temp.value;
                index = temp.rest;
                segment.push(value);
              }

              if (segment.length === 2) {
                throw new Error('Found a source, but no line and column');
              }

              if (segment.length === 3) {
                throw new Error('Found a source and line, but no column');
              }

              cachedSegments[str] = segment;
            }

            // Generated column.
            mapping.generatedColumn = previousGeneratedColumn + segment[0];
            previousGeneratedColumn = mapping.generatedColumn;

            if (segment.length > 1) {
              // Original source.
              mapping.source = previousSource + segment[1];
              previousSource += segment[1];

              // Original line.
              mapping.originalLine = previousOriginalLine + segment[2];
              previousOriginalLine = mapping.originalLine;
              // Lines are stored 0-based
              mapping.originalLine += 1;

              // Original column.
              mapping.originalColumn = previousOriginalColumn + segment[3];
              previousOriginalColumn = mapping.originalColumn;

              if (segment.length > 4) {
                // Original name.
                mapping.name = previousName + segment[4];
                previousName += segment[4];
              }
            }

            generatedMappings.push(mapping);
            if (typeof mapping.originalLine === 'number') {
              originalMappings.push(mapping);
            }
          }
        }

        quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
        this.__generatedMappings = generatedMappings;

        quickSort(originalMappings, util.compareByOriginalPositions);
        this.__originalMappings = originalMappings;
      };

      /**
       * Find the mapping that best matches the hypothetical "needle" mapping that
       * we are searching for in the given "haystack" of mappings.
       */
      BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
        // To return the position we are searching for, we must first find the
        // mapping for the given position and then return the opposite position it
        // points to. Because the mappings are sorted, we can use binary search to
        // find the best mapping.

        if (aNeedle[aLineName] <= 0) {
          throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
        }
        if (aNeedle[aColumnName] < 0) {
          throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
        }

        return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
      };

      /**
       * Compute the last column for each generated mapping. The last column is
       * inclusive.
       */
      BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
        for (var index = 0; index < this._generatedMappings.length; ++index) {
          var mapping = this._generatedMappings[index];

          // Mappings do not contain a field for the last generated columnt. We
          // can come up with an optimistic estimate, however, by assuming that
          // mappings are contiguous (i.e. given two consecutive mappings, the
          // first mapping ends where the second one starts).
          if (index + 1 < this._generatedMappings.length) {
            var nextMapping = this._generatedMappings[index + 1];

            if (mapping.generatedLine === nextMapping.generatedLine) {
              mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
              continue;
            }
          }

          // The last mapping for each line spans the entire line.
          mapping.lastGeneratedColumn = Infinity;
        }
      };

      /**
       * Returns the original source, line, and column information for the generated
       * source's line and column positions provided. The only argument is an object
       * with the following properties:
       *
       *   - line: The line number in the generated source.
       *   - column: The column number in the generated source.
       *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
       *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
       *     closest element that is smaller than or greater than the one we are
       *     searching for, respectively, if the exact element cannot be found.
       *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
       *
       * and an object is returned with the following properties:
       *
       *   - source: The original source file, or null.
       *   - line: The line number in the original source, or null.
       *   - column: The column number in the original source, or null.
       *   - name: The original identifier, or null.
       */
      BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, 'line'),
          generatedColumn: util.getArg(aArgs, 'column')
        };

        var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));

        if (index >= 0) {
          var mapping = this._generatedMappings[index];

          if (mapping.generatedLine === needle.generatedLine) {
            var source = util.getArg(mapping, 'source', null);
            if (source !== null) {
              source = this._sources.at(source);
              if (this.sourceRoot != null) {
                source = util.join(this.sourceRoot, source);
              }
            }
            var name = util.getArg(mapping, 'name', null);
            if (name !== null) {
              name = this._names.at(name);
            }
            return {
              source: source,
              line: util.getArg(mapping, 'originalLine', null),
              column: util.getArg(mapping, 'originalColumn', null),
              name: name
            };
          }
        }

        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      };

      /**
       * Return true if we have the source content for every source in the source
       * map, false otherwise.
       */
      BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
        if (!this.sourcesContent) {
          return false;
        }
        return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {
          return sc == null;
        });
      };

      /**
       * Returns the original source content. The only argument is the url of the
       * original source file. Returns null if no original source content is
       * available.
       */
      BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        if (!this.sourcesContent) {
          return null;
        }

        if (this.sourceRoot != null) {
          aSource = util.relative(this.sourceRoot, aSource);
        }

        if (this._sources.has(aSource)) {
          return this.sourcesContent[this._sources.indexOf(aSource)];
        }

        var url;
        if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
          // XXX: file:// URIs and absolute paths lead to unexpected behavior for
          // many users. We can help them out when they expect file:// URIs to
          // behave like it would if they were running a local HTTP server. See
          // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
          var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
          if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
          }

          if ((!url.path || url.path == "/") && this._sources.has("/" + aSource)) {
            return this.sourcesContent[this._sources.indexOf("/" + aSource)];
          }
        }

        // This function is used recursively from
        // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
        // don't want to throw if we can't find the source - we just want to
        // return null, so we provide a flag to exit gracefully.
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + aSource + '" is not in the SourceMap.');
        }
      };

      /**
       * Returns the generated line and column information for the original source,
       * line, and column positions provided. The only argument is an object with
       * the following properties:
       *
       *   - source: The filename of the original source.
       *   - line: The line number in the original source.
       *   - column: The column number in the original source.
       *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
       *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
       *     closest element that is smaller than or greater than the one we are
       *     searching for, respectively, if the exact element cannot be found.
       *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
       *
       * and an object is returned with the following properties:
       *
       *   - line: The line number in the generated source, or null.
       *   - column: The column number in the generated source, or null.
       */
      BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
        var source = util.getArg(aArgs, 'source');
        if (this.sourceRoot != null) {
          source = util.relative(this.sourceRoot, source);
        }
        if (!this._sources.has(source)) {
          return {
            line: null,
            column: null,
            lastColumn: null
          };
        }
        source = this._sources.indexOf(source);

        var needle = {
          source: source,
          originalLine: util.getArg(aArgs, 'line'),
          originalColumn: util.getArg(aArgs, 'column')
        };

        var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));

        if (index >= 0) {
          var mapping = this._originalMappings[index];

          if (mapping.source === needle.source) {
            return {
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            };
          }
        }

        return {
          line: null,
          column: null,
          lastColumn: null
        };
      };

      exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

      /**
       * An IndexedSourceMapConsumer instance represents a parsed source map which
       * we can query for information. It differs from BasicSourceMapConsumer in
       * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
       * input.
       *
       * The only parameter is a raw source map (either as a JSON string, or already
       * parsed to an object). According to the spec for indexed source maps, they
       * have the following attributes:
       *
       *   - version: Which version of the source map spec this map is following.
       *   - file: Optional. The generated file this source map is associated with.
       *   - sections: A list of section definitions.
       *
       * Each value under the "sections" field has two fields:
       *   - offset: The offset into the original specified at which this section
       *       begins to apply, defined as an object with a "line" and "column"
       *       field.
       *   - map: A source map definition. This source map could also be indexed,
       *       but doesn't have to be.
       *
       * Instead of the "map" field, it's also possible to have a "url" field
       * specifying a URL to retrieve a source map from, but that's currently
       * unsupported.
       *
       * Here's an example source map, taken from the source map spec[0], but
       * modified to omit a section which uses the "url" field.
       *
       *  {
       *    version : 3,
       *    file: "app.js",
       *    sections: [{
       *      offset: {line:100, column:10},
       *      map: {
       *        version : 3,
       *        file: "section.js",
       *        sources: ["foo.js", "bar.js"],
       *        names: ["src", "maps", "are", "fun"],
       *        mappings: "AAAA,E;;ABCDE;"
       *      }
       *    }],
       *  }
       *
       * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
       */
      function IndexedSourceMapConsumer(aSourceMap) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === 'string') {
          sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
        }

        var version = util.getArg(sourceMap, 'version');
        var sections = util.getArg(sourceMap, 'sections');

        if (version != this._version) {
          throw new Error('Unsupported version: ' + version);
        }

        this._sources = new ArraySet();
        this._names = new ArraySet();

        var lastOffset = {
          line: -1,
          column: 0
        };
        this._sections = sections.map(function (s) {
          if (s.url) {
            // The url field will require support for asynchronicity.
            // See https://github.com/mozilla/source-map/issues/16
            throw new Error('Support for url field in sections not implemented.');
          }
          var offset = util.getArg(s, 'offset');
          var offsetLine = util.getArg(offset, 'line');
          var offsetColumn = util.getArg(offset, 'column');

          if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
            throw new Error('Section offsets must be ordered and non-overlapping.');
          }
          lastOffset = offset;

          return {
            generatedOffset: {
              // The offset fields are 0-based, but we use 1-based indices when
              // encoding/decoding from VLQ.
              generatedLine: offsetLine + 1,
              generatedColumn: offsetColumn + 1
            },
            consumer: new SourceMapConsumer(util.getArg(s, 'map'))
          };
        });
      }

      IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

      /**
       * The version of the source mapping spec that we are consuming.
       */
      IndexedSourceMapConsumer.prototype._version = 3;

      /**
       * The list of original sources.
       */
      Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
        get: function () {
          var sources = [];
          for (var i = 0; i < this._sections.length; i++) {
            for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
              sources.push(this._sections[i].consumer.sources[j]);
            }
          }
          return sources;
        }
      });

      /**
       * Returns the original source, line, and column information for the generated
       * source's line and column positions provided. The only argument is an object
       * with the following properties:
       *
       *   - line: The line number in the generated source.
       *   - column: The column number in the generated source.
       *
       * and an object is returned with the following properties:
       *
       *   - source: The original source file, or null.
       *   - line: The line number in the original source, or null.
       *   - column: The column number in the original source, or null.
       *   - name: The original identifier, or null.
       */
      IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, 'line'),
          generatedColumn: util.getArg(aArgs, 'column')
        };

        // Find the section containing the generated position we're trying to map
        // to an original position.
        var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {
          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
          if (cmp) {
            return cmp;
          }

          return needle.generatedColumn - section.generatedOffset.generatedColumn;
        });
        var section = this._sections[sectionIndex];

        if (!section) {
          return {
            source: null,
            line: null,
            column: null,
            name: null
          };
        }

        return section.consumer.originalPositionFor({
          line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
          column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
          bias: aArgs.bias
        });
      };

      /**
       * Return true if we have the source content for every source in the source
       * map, false otherwise.
       */
      IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
        return this._sections.every(function (s) {
          return s.consumer.hasContentsOfAllSources();
        });
      };

      /**
       * Returns the original source content. The only argument is the url of the
       * original source file. Returns null if no original source content is
       * available.
       */
      IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        for (var i = 0; i < this._sections.length; i++) {
          var section = this._sections[i];

          var content = section.consumer.sourceContentFor(aSource, true);
          if (content) {
            return content;
          }
        }
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + aSource + '" is not in the SourceMap.');
        }
      };

      /**
       * Returns the generated line and column information for the original source,
       * line, and column positions provided. The only argument is an object with
       * the following properties:
       *
       *   - source: The filename of the original source.
       *   - line: The line number in the original source.
       *   - column: The column number in the original source.
       *
       * and an object is returned with the following properties:
       *
       *   - line: The line number in the generated source, or null.
       *   - column: The column number in the generated source, or null.
       */
      IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
        for (var i = 0; i < this._sections.length; i++) {
          var section = this._sections[i];

          // Only consider this section if the requested source is in the list of
          // sources of the consumer.
          if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
            continue;
          }
          var generatedPosition = section.consumer.generatedPositionFor(aArgs);
          if (generatedPosition) {
            var ret = {
              line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
              column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
            };
            return ret;
          }
        }

        return {
          line: null,
          column: null
        };
      };

      /**
       * Parse the mappings in a string in to a data structure which we can easily
       * query (the ordered arrays in the `this.__generatedMappings` and
       * `this.__originalMappings` properties).
       */
      IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        for (var i = 0; i < this._sections.length; i++) {
          var section = this._sections[i];
          var sectionMappings = section.consumer._generatedMappings;
          for (var j = 0; j < sectionMappings.length; j++) {
            var mapping = sectionMappings[j];

            var source = section.consumer._sources.at(mapping.source);
            if (section.consumer.sourceRoot !== null) {
              source = util.join(section.consumer.sourceRoot, source);
            }
            this._sources.add(source);
            source = this._sources.indexOf(source);

            var name = section.consumer._names.at(mapping.name);
            this._names.add(name);
            name = this._names.indexOf(name);

            // The mappings coming from the consumer for the section have
            // generated positions relative to the start of the section, so we
            // need to offset them to be relative to the start of the concatenated
            // generated file.
            var adjustedMapping = {
              source: source,
              generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
              generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
              originalLine: mapping.originalLine,
              originalColumn: mapping.originalColumn,
              name: name
            };

            this.__generatedMappings.push(adjustedMapping);
            if (typeof adjustedMapping.originalLine === 'number') {
              this.__originalMappings.push(adjustedMapping);
            }
          }
        }

        quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
        quickSort(this.__originalMappings, util.compareByOriginalPositions);
      };

      exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

      /***/
    },
    /* 2 */
    /***/function (module, exports) {

      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      /**
       * This is a helper function for getting values from parameter/options
       * objects.
       *
       * @param args The object we are extracting values from
       * @param name The name of the property we are getting.
       * @param defaultValue An optional value to return if the property is missing
       * from the object. If this is not specified and the property is missing, an
       * error will be thrown.
       */
      function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
          return aArgs[aName];
        } else if (arguments.length === 3) {
          return aDefaultValue;
        } else {
          throw new Error('"' + aName + '" is a required argument.');
        }
      }
      exports.getArg = getArg;

      var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
      var dataUrlRegexp = /^data:.+\,.+$/;

      function urlParse(aUrl) {
        var match = aUrl.match(urlRegexp);
        if (!match) {
          return null;
        }
        return {
          scheme: match[1],
          auth: match[2],
          host: match[3],
          port: match[4],
          path: match[5]
        };
      }
      exports.urlParse = urlParse;

      function urlGenerate(aParsedUrl) {
        var url = '';
        if (aParsedUrl.scheme) {
          url += aParsedUrl.scheme + ':';
        }
        url += '//';
        if (aParsedUrl.auth) {
          url += aParsedUrl.auth + '@';
        }
        if (aParsedUrl.host) {
          url += aParsedUrl.host;
        }
        if (aParsedUrl.port) {
          url += ":" + aParsedUrl.port;
        }
        if (aParsedUrl.path) {
          url += aParsedUrl.path;
        }
        return url;
      }
      exports.urlGenerate = urlGenerate;

      /**
       * Normalizes a path, or the path portion of a URL:
       *
       * - Replaces consecutive slashes with one slash.
       * - Removes unnecessary '.' parts.
       * - Removes unnecessary '<dir>/..' parts.
       *
       * Based on code in the Node.js 'path' core module.
       *
       * @param aPath The path or url to normalize.
       */
      function normalize(aPath) {
        var path = aPath;
        var url = urlParse(aPath);
        if (url) {
          if (!url.path) {
            return aPath;
          }
          path = url.path;
        }
        var isAbsolute = exports.isAbsolute(path);

        var parts = path.split(/\/+/);
        for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
          part = parts[i];
          if (part === '.') {
            parts.splice(i, 1);
          } else if (part === '..') {
            up++;
          } else if (up > 0) {
            if (part === '') {
              // The first part is blank if the path is absolute. Trying to go
              // above the root is a no-op. Therefore we can remove all '..' parts
              // directly after the root.
              parts.splice(i + 1, up);
              up = 0;
            } else {
              parts.splice(i, 2);
              up--;
            }
          }
        }
        path = parts.join('/');

        if (path === '') {
          path = isAbsolute ? '/' : '.';
        }

        if (url) {
          url.path = path;
          return urlGenerate(url);
        }
        return path;
      }
      exports.normalize = normalize;

      /**
       * Joins two paths/URLs.
       *
       * @param aRoot The root path or URL.
       * @param aPath The path or URL to be joined with the root.
       *
       * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
       *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
       *   first.
       * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
       *   is updated with the result and aRoot is returned. Otherwise the result
       *   is returned.
       *   - If aPath is absolute, the result is aPath.
       *   - Otherwise the two paths are joined with a slash.
       * - Joining for example 'http://' and 'www.example.com' is also supported.
       */
      function join(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        if (aPath === "") {
          aPath = ".";
        }
        var aPathUrl = urlParse(aPath);
        var aRootUrl = urlParse(aRoot);
        if (aRootUrl) {
          aRoot = aRootUrl.path || '/';
        }

        // `join(foo, '//www.example.org')`
        if (aPathUrl && !aPathUrl.scheme) {
          if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
          }
          return urlGenerate(aPathUrl);
        }

        if (aPathUrl || aPath.match(dataUrlRegexp)) {
          return aPath;
        }

        // `join('http://', 'www.example.com')`
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
          aRootUrl.host = aPath;
          return urlGenerate(aRootUrl);
        }

        var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

        if (aRootUrl) {
          aRootUrl.path = joined;
          return urlGenerate(aRootUrl);
        }
        return joined;
      }
      exports.join = join;

      exports.isAbsolute = function (aPath) {
        return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
      };

      /**
       * Make a path relative to a URL or another path.
       *
       * @param aRoot The root path or URL.
       * @param aPath The path or URL to be made relative to aRoot.
       */
      function relative(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }

        aRoot = aRoot.replace(/\/$/, '');

        // It is possible for the path to be above the root. In this case, simply
        // checking whether the root is a prefix of the path won't work. Instead, we
        // need to remove components from the root one by one, until either we find
        // a prefix that fits, or we run out of components to remove.
        var level = 0;
        while (aPath.indexOf(aRoot + '/') !== 0) {
          var index = aRoot.lastIndexOf("/");
          if (index < 0) {
            return aPath;
          }

          // If the only part of the root that is left is the scheme (i.e. http://,
          // file:///, etc.), one or more slashes (/), or simply nothing at all, we
          // have exhausted all components, so the path is not relative to the root.
          aRoot = aRoot.slice(0, index);
          if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath;
          }

          ++level;
        }

        // Make sure we add a "../" for each component we removed from the root.
        return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
      }
      exports.relative = relative;

      var supportsNullProto = function () {
        var obj = Object.create(null);
        return !('__proto__' in obj);
      }();

      function identity(s) {
        return s;
      }

      /**
       * Because behavior goes wacky when you set `__proto__` on objects, we
       * have to prefix all the strings in our set with an arbitrary character.
       *
       * See https://github.com/mozilla/source-map/pull/31 and
       * https://github.com/mozilla/source-map/issues/30
       *
       * @param String aStr
       */
      function toSetString(aStr) {
        if (isProtoString(aStr)) {
          return '$' + aStr;
        }

        return aStr;
      }
      exports.toSetString = supportsNullProto ? identity : toSetString;

      function fromSetString(aStr) {
        if (isProtoString(aStr)) {
          return aStr.slice(1);
        }

        return aStr;
      }
      exports.fromSetString = supportsNullProto ? identity : fromSetString;

      function isProtoString(s) {
        if (!s) {
          return false;
        }

        var length = s.length;

        if (length < 9 /* "__proto__".length */) {
            return false;
          }

        if (s.charCodeAt(length - 1) !== 95 /* '_' */ || s.charCodeAt(length - 2) !== 95 /* '_' */ || s.charCodeAt(length - 3) !== 111 /* 'o' */ || s.charCodeAt(length - 4) !== 116 /* 't' */ || s.charCodeAt(length - 5) !== 111 /* 'o' */ || s.charCodeAt(length - 6) !== 114 /* 'r' */ || s.charCodeAt(length - 7) !== 112 /* 'p' */ || s.charCodeAt(length - 8) !== 95 /* '_' */ || s.charCodeAt(length - 9) !== 95 /* '_' */) {
            return false;
          }

        for (var i = length - 10; i >= 0; i--) {
          if (s.charCodeAt(i) !== 36 /* '$' */) {
              return false;
            }
        }

        return true;
      }

      /**
       * Comparator between two mappings where the original positions are compared.
       *
       * Optionally pass in `true` as `onlyCompareGenerated` to consider two
       * mappings with the same original source/line/column, but different generated
       * line and column the same. Useful when searching for a mapping with a
       * stubbed out mapping.
       */
      function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        var cmp = mappingA.source - mappingB.source;
        if (cmp !== 0) {
          return cmp;
        }

        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }

        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp;
        }

        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }

        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }

        return mappingA.name - mappingB.name;
      }
      exports.compareByOriginalPositions = compareByOriginalPositions;

      /**
       * Comparator between two mappings with deflated source and name indices where
       * the generated positions are compared.
       *
       * Optionally pass in `true` as `onlyCompareGenerated` to consider two
       * mappings with the same generated line and column, but different
       * source/name/original line and column the same. Useful when searching for a
       * mapping with a stubbed out mapping.
       */
      function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }

        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp;
        }

        cmp = mappingA.source - mappingB.source;
        if (cmp !== 0) {
          return cmp;
        }

        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }

        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }

        return mappingA.name - mappingB.name;
      }
      exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

      function strcmp(aStr1, aStr2) {
        if (aStr1 === aStr2) {
          return 0;
        }

        if (aStr1 > aStr2) {
          return 1;
        }

        return -1;
      }

      /**
       * Comparator between two mappings with inflated source and name strings where
       * the generated positions are compared.
       */
      function compareByGeneratedPositionsInflated(mappingA, mappingB) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }

        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }

        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }

        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }

        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }

        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

      /***/
    },
    /* 3 */
    /***/function (module, exports) {

      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      exports.GREATEST_LOWER_BOUND = 1;
      exports.LEAST_UPPER_BOUND = 2;

      /**
       * Recursive implementation of binary search.
       *
       * @param aLow Indices here and lower do not contain the needle.
       * @param aHigh Indices here and higher do not contain the needle.
       * @param aNeedle The element being searched for.
       * @param aHaystack The non-empty array being searched.
       * @param aCompare Function which takes two elements and returns -1, 0, or 1.
       * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
       *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
       *     closest element that is smaller than or greater than the one we are
       *     searching for, respectively, if the exact element cannot be found.
       */
      function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
        // This function terminates when one of the following is true:
        //
        //   1. We find the exact element we are looking for.
        //
        //   2. We did not find the exact element, but we can return the index of
        //      the next-closest element.
        //
        //   3. We did not find the exact element, and there is no next-closest
        //      element than the one we are searching for, so we return -1.
        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
        var cmp = aCompare(aNeedle, aHaystack[mid], true);
        if (cmp === 0) {
          // Found the element we are looking for.
          return mid;
        } else if (cmp > 0) {
          // Our needle is greater than aHaystack[mid].
          if (aHigh - mid > 1) {
            // The element is in the upper half.
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
          }

          // The exact needle element was not found in this haystack. Determine if
          // we are in termination case (3) or (2) and return the appropriate thing.
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return aHigh < aHaystack.length ? aHigh : -1;
          } else {
            return mid;
          }
        } else {
          // Our needle is less than aHaystack[mid].
          if (mid - aLow > 1) {
            // The element is in the lower half.
            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
          }

          // we are in termination case (3) or (2) and return the appropriate thing.
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return mid;
          } else {
            return aLow < 0 ? -1 : aLow;
          }
        }
      }

      /**
       * This is an implementation of binary search which will always try and return
       * the index of the closest element if there is no exact hit. This is because
       * mappings between original and generated line/col pairs are single points,
       * and there is an implicit region between each of them, so a miss just means
       * that you aren't on the very start of a region.
       *
       * @param aNeedle The element you are looking for.
       * @param aHaystack The array that is being searched.
       * @param aCompare A function which takes the needle and an element in the
       *     array and returns -1, 0, or 1 depending on whether the needle is less
       *     than, equal to, or greater than the element, respectively.
       * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
       *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
       *     closest element that is smaller than or greater than the one we are
       *     searching for, respectively, if the exact element cannot be found.
       *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
       */
      exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
        if (aHaystack.length === 0) {
          return -1;
        }

        var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
        if (index < 0) {
          return -1;
        }

        // We have found either the exact element, or the next-closest element than
        // the one we are searching for. However, there may be more than one such
        // element. Make sure we always return the smallest of these.
        while (index - 1 >= 0) {
          if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
            break;
          }
          --index;
        }

        return index;
      };

      /***/
    },
    /* 4 */
    /***/function (module, exports, __webpack_require__) {

      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      var util = __webpack_require__(2);
      var has = Object.prototype.hasOwnProperty;

      /**
       * A data structure which is a combination of an array and a set. Adding a new
       * member is O(1), testing for membership is O(1), and finding the index of an
       * element is O(1). Removing elements from the set is not supported. Only
       * strings are supported for membership.
       */
      function ArraySet() {
        this._array = [];
        this._set = Object.create(null);
      }

      /**
       * Static method for creating ArraySet instances from an existing array.
       */
      ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
        var set = new ArraySet();
        for (var i = 0, len = aArray.length; i < len; i++) {
          set.add(aArray[i], aAllowDuplicates);
        }
        return set;
      };

      /**
       * Return how many unique items are in this ArraySet. If duplicates have been
       * added, than those do not count towards the size.
       *
       * @returns Number
       */
      ArraySet.prototype.size = function ArraySet_size() {
        return Object.getOwnPropertyNames(this._set).length;
      };

      /**
       * Add the given string to this set.
       *
       * @param String aStr
       */
      ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
        var sStr = util.toSetString(aStr);
        var isDuplicate = has.call(this._set, sStr);
        var idx = this._array.length;
        if (!isDuplicate || aAllowDuplicates) {
          this._array.push(aStr);
        }
        if (!isDuplicate) {
          this._set[sStr] = idx;
        }
      };

      /**
       * Is the given string a member of this set?
       *
       * @param String aStr
       */
      ArraySet.prototype.has = function ArraySet_has(aStr) {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
      };

      /**
       * What is the index of the given string in the array?
       *
       * @param String aStr
       */
      ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
        throw new Error('"' + aStr + '" is not in the set.');
      };

      /**
       * What is the element at the given index?
       *
       * @param Number aIdx
       */
      ArraySet.prototype.at = function ArraySet_at(aIdx) {
        if (aIdx >= 0 && aIdx < this._array.length) {
          return this._array[aIdx];
        }
        throw new Error('No element indexed by ' + aIdx);
      };

      /**
       * Returns the array representation of this set (which has the proper indices
       * indicated by indexOf). Note that this is a copy of the internal array used
       * for storing the members so that no one can mess with internal state.
       */
      ArraySet.prototype.toArray = function ArraySet_toArray() {
        return this._array.slice();
      };

      exports.ArraySet = ArraySet;

      /***/
    },
    /* 5 */
    /***/function (module, exports, __webpack_require__) {

      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       *
       * Based on the Base 64 VLQ implementation in Closure Compiler:
       * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
       *
       * Copyright 2011 The Closure Compiler Authors. All rights reserved.
       * Redistribution and use in source and binary forms, with or without
       * modification, are permitted provided that the following conditions are
       * met:
       *
       *  * Redistributions of source code must retain the above copyright
       *    notice, this list of conditions and the following disclaimer.
       *  * Redistributions in binary form must reproduce the above
       *    copyright notice, this list of conditions and the following
       *    disclaimer in the documentation and/or other materials provided
       *    with the distribution.
       *  * Neither the name of Google Inc. nor the names of its
       *    contributors may be used to endorse or promote products derived
       *    from this software without specific prior written permission.
       *
       * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
       * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
       * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
       * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
       * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
       * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
       * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
       * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
       * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
       * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
       * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
       */

      var base64 = __webpack_require__(6);

      // A single base 64 digit can contain 6 bits of data. For the base 64 variable
      // length quantities we use in the source map spec, the first bit is the sign,
      // the next four bits are the actual value, and the 6th bit is the
      // continuation bit. The continuation bit tells us whether there are more
      // digits in this value following this digit.
      //
      //   Continuation
      //   |    Sign
      //   |    |
      //   V    V
      //   101011

      var VLQ_BASE_SHIFT = 5;

      // binary: 100000
      var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

      // binary: 011111
      var VLQ_BASE_MASK = VLQ_BASE - 1;

      // binary: 100000
      var VLQ_CONTINUATION_BIT = VLQ_BASE;

      /**
       * Converts from a two-complement value to a value where the sign bit is
       * placed in the least significant bit.  For example, as decimals:
       *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
       *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
       */
      function toVLQSigned(aValue) {
        return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
      }

      /**
       * Converts to a two-complement value from a value where the sign bit is
       * placed in the least significant bit.  For example, as decimals:
       *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
       *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
       */
      function fromVLQSigned(aValue) {
        var isNegative = (aValue & 1) === 1;
        var shifted = aValue >> 1;
        return isNegative ? -shifted : shifted;
      }

      /**
       * Returns the base 64 VLQ encoded value.
       */
      exports.encode = function base64VLQ_encode(aValue) {
        var encoded = "";
        var digit;

        var vlq = toVLQSigned(aValue);

        do {
          digit = vlq & VLQ_BASE_MASK;
          vlq >>>= VLQ_BASE_SHIFT;
          if (vlq > 0) {
            // There are still more digits in this value, so we must make sure the
            // continuation bit is marked.
            digit |= VLQ_CONTINUATION_BIT;
          }
          encoded += base64.encode(digit);
        } while (vlq > 0);

        return encoded;
      };

      /**
       * Decodes the next base 64 VLQ value from the given string and returns the
       * value and the rest of the string via the out parameter.
       */
      exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
        var strLen = aStr.length;
        var result = 0;
        var shift = 0;
        var continuation, digit;

        do {
          if (aIndex >= strLen) {
            throw new Error("Expected more digits in base 64 VLQ value.");
          }

          digit = base64.decode(aStr.charCodeAt(aIndex++));
          if (digit === -1) {
            throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
          }

          continuation = !!(digit & VLQ_CONTINUATION_BIT);
          digit &= VLQ_BASE_MASK;
          result = result + (digit << shift);
          shift += VLQ_BASE_SHIFT;
        } while (continuation);

        aOutParam.value = fromVLQSigned(result);
        aOutParam.rest = aIndex;
      };

      /***/
    },
    /* 6 */
    /***/function (module, exports) {

      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

      /**
       * Encode an integer in the range of 0 to 63 to a single base 64 digit.
       */
      exports.encode = function (number) {
        if (0 <= number && number < intToCharMap.length) {
          return intToCharMap[number];
        }
        throw new TypeError("Must be between 0 and 63: " + number);
      };

      /**
       * Decode a single base 64 character code digit to an integer. Returns -1 on
       * failure.
       */
      exports.decode = function (charCode) {
        var bigA = 65; // 'A'
        var bigZ = 90; // 'Z'

        var littleA = 97; // 'a'
        var littleZ = 122; // 'z'

        var zero = 48; // '0'
        var nine = 57; // '9'

        var plus = 43; // '+'
        var slash = 47; // '/'

        var littleOffset = 26;
        var numberOffset = 52;

        // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
        if (bigA <= charCode && charCode <= bigZ) {
          return charCode - bigA;
        }

        // 26 - 51: abcdefghijklmnopqrstuvwxyz
        if (littleA <= charCode && charCode <= littleZ) {
          return charCode - littleA + littleOffset;
        }

        // 52 - 61: 0123456789
        if (zero <= charCode && charCode <= nine) {
          return charCode - zero + numberOffset;
        }

        // 62: +
        if (charCode == plus) {
          return 62;
        }

        // 63: /
        if (charCode == slash) {
          return 63;
        }

        // Invalid base64 digit.
        return -1;
      };

      /***/
    },
    /* 7 */
    /***/function (module, exports) {

      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      // It turns out that some (most?) JavaScript engines don't self-host
      // `Array.prototype.sort`. This makes sense because C++ will likely remain
      // faster than JS when doing raw CPU-intensive sorting. However, when using a
      // custom comparator function, calling back and forth between the VM's C++ and
      // JIT'd JS is rather slow *and* loses JIT type information, resulting in
      // worse generated code for the comparator function than would be optimal. In
      // fact, when sorting with a comparator, these costs outweigh the benefits of
      // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
      // a ~3500ms mean speed-up in `bench/bench.html`.

      /**
       * Swap the elements indexed by `x` and `y` in the array `ary`.
       *
       * @param {Array} ary
       *        The array.
       * @param {Number} x
       *        The index of the first item.
       * @param {Number} y
       *        The index of the second item.
       */
      function swap(ary, x, y) {
        var temp = ary[x];
        ary[x] = ary[y];
        ary[y] = temp;
      }

      /**
       * Returns a random integer within the range `low .. high` inclusive.
       *
       * @param {Number} low
       *        The lower bound on the range.
       * @param {Number} high
       *        The upper bound on the range.
       */
      function randomIntInRange(low, high) {
        return Math.round(low + Math.random() * (high - low));
      }

      /**
       * The Quick Sort algorithm.
       *
       * @param {Array} ary
       *        An array to sort.
       * @param {function} comparator
       *        Function to use to compare two items.
       * @param {Number} p
       *        Start index of the array
       * @param {Number} r
       *        End index of the array
       */
      function doQuickSort(ary, comparator, p, r) {
        // If our lower bound is less than our upper bound, we (1) partition the
        // array into two pieces and (2) recurse on each half. If it is not, this is
        // the empty array and our base case.

        if (p < r) {
          // (1) Partitioning.
          //
          // The partitioning chooses a pivot between `p` and `r` and moves all
          // elements that are less than or equal to the pivot to the before it, and
          // all the elements that are greater than it after it. The effect is that
          // once partition is done, the pivot is in the exact place it will be when
          // the array is put in sorted order, and it will not need to be moved
          // again. This runs in O(n) time.

          // Always choose a random pivot so that an input array which is reverse
          // sorted does not cause O(n^2) running time.
          var pivotIndex = randomIntInRange(p, r);
          var i = p - 1;

          swap(ary, pivotIndex, r);
          var pivot = ary[r];

          // Immediately after `j` is incremented in this loop, the following hold
          // true:
          //
          //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
          //
          //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
          for (var j = p; j < r; j++) {
            if (comparator(ary[j], pivot) <= 0) {
              i += 1;
              swap(ary, i, j);
            }
          }

          swap(ary, i + 1, j);
          var q = i + 1;

          // (2) Recurse on each half.

          doQuickSort(ary, comparator, p, q - 1);
          doQuickSort(ary, comparator, q + 1, r);
        }
      }

      /**
       * Sort the given array in-place with the given comparator function.
       *
       * @param {Array} ary
       *        An array to sort.
       * @param {function} comparator
       *        Function to use to compare two items.
       */
      exports.quickSort = function (ary, comparator) {
        doQuickSort(ary, comparator, 0, ary.length - 1);
      };

      /***/
    }
    /******/])
  );
});
;
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/store.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storeOptions = exports.storeDecorator = undefined;
exports.default = store;

var _decor = require('2817');

var _decor2 = _interopRequireDefault(_decor);

var _emittable = require('2818');

var _emittable2 = _interopRequireDefault(_emittable);

var _automagical = require('2819');

var _automagical2 = _interopRequireDefault(_automagical);

var _subscribable = require('2820');

var _subscribable2 = _interopRequireDefault(_subscribable);

var _helpers = require('2821');

var _helpers2 = _interopRequireDefault(_helpers);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const storeDecorator = exports.storeDecorator = (0, _decor2.default)([_subscribable2.default, _helpers2.default, _emittable2.default, _automagical2.default]);
const storeOptions = exports.storeOptions = {
  storeDecorator,
  onStoreMount(name, store, props) {
    if (store.automagic) {
      store.automagic();
    }
    if (store.willMount) {
      store.willMount.call(store, props);
    }
  },
  onStoreUnmount(store) {
    if (store.willUnmount) {
      store.willUnmount.call(store);
    }
    store.subscriptions.dispose();
  }
};

function store(Store) {
  const DecoratedStore = storeDecorator(Store);
  const ProxyStore = function (...args) {
    const store = new DecoratedStore(...args);
    storeOptions.onStoreMount(Store.constructor.name, store, args[0]);
    return store;
  };
  return ProxyStore;
}
//# sourceMappingURL=store.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/core/emittable.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = emittable;

var _sbEventKit = require('2884');

// store.emitter
function emittable(options) {
  const emitterProp = options.emitterProp || 'emitter';
  const emitProp = options.emitProp || 'emit';

  return {
    name: 'emittable',
    once: true,
    onlyClass: true,
    decorator: Klass => {
      if (!Klass.prototype[emitterProp]) {
        Object.defineProperty(Klass.prototype, emitterProp, {
          get() {
            const KEY = `__${emitterProp}`;

            if (!this[KEY] || this[KEY].disposed) {
              // bugfix: auto remake emitters
              const emitter = new _sbEventKit.Emitter();
              this[KEY] = emitter;

              // bind
              emitter.emit = emitter.emit.bind(emitter);

              // auto add to susbcriptions
              if (this.subscriptions) {
                this.subscriptions.add(emitter);
              }
            }
            return this[KEY];
          }
        });
      }

      // bind emit directly
      if (!Klass.prototype[emitProp]) {
        Object.defineProperty(Klass.prototype, emitProp, {
          get() {
            return this[emitterProp].emit;
          }
        });
      }
    }
  };
}
//# sourceMappingURL=emittable.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/helpers/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.watch = exports.log = undefined;

var _log = require('2832');

var _log2 = _interopRequireDefault(_log);

var _watch = require('2833');

var _watch2 = _interopRequireDefault(_watch);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const log = exports.log = _log2.default;
const watch = exports.watch = _watch2.default;
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/helpers/log.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = log;

// helper that logs functions, works as decorator or plain
// passes through the first argument

let doCutoff = true;

// Takes any string and converts it into a #RRGGBB color.
let StringToColor = class StringToColor {
  constructor() {
    this.hash = {};
    this.colorId = 0;
    this.colors = ['#b19cd9', '#d9b19c', '#9cc4d9', '#c4d99c', '#87d086', '#d08687', '#8687d0', '#cf86d0', '#d0cf86', '#64cbcb', '#cb9864', '#cb6498', '#cb6464', '#ecc481', '#81a9ec', '#dfec81', '#81ecc4', '#c481ec'];
  }

  getColor(thing) {
    const str = cutoff((thing || '').toString(), 7);
    if (!this.hash[str]) {
      this.hash[str] = this.colors[this.colorId++];
    }
    return this.hash[str];
  }
};

const Color = new StringToColor();

function cutoff(thing, amt = 150) {
  if (doCutoff && thing.length > amt) {
    return thing.slice(0, amt - 3) + '...';
  }
  return thing;
}

function prettyPrint(thing) {
  if (typeof thing === 'function') {
    return thing.toString && thing.toString() || thing;
  }
  if (Array.isArray(thing)) {
    return `[ \n${thing.map(prettyPrint)}\n ] `;
  }
  if (typeof thing === 'object') {
    if (!thing) {
      return 'null';
    }
    try {
      return cutoff(JSON.stringify(thing, null, 2));
    } catch (e) {
      return thing;
    }
  } else if (typeof thing === 'undefined') {
    return 'undefined';
  } else {
    return thing;
  }
}

function doLog(...args) {
  const [target, key, descriptor] = args;

  const logger = (...things) => {
    console.log(`%c${things.map(prettyPrint).join(' ')}`, `background: ${Color.getColor(things[0])}`);
  };

  if (args.length === 3 && typeof target === 'object' && typeof key === 'string' && typeof descriptor === 'object') {
    // decorator
    if (descriptor.initializer) {
      const ogInit = descriptor.initializer;
      descriptor.initializer = function () {
        return wrapLogger(ogInit.call(this), target, key);
      };
    } else if (descriptor.get) {
      const ogGet = descriptor.get;
      descriptor.get = function () {
        return wrapLogger(ogGet, target, key);
      };
    }

    return descriptor;
  } else if (args.length === 1 && typeof args[0] === 'function') {
    // regular fn
    const [wrapFn] = args;
    logger(wrapFn);
    return wrapLogger(wrapFn);
  }

  logger(...args);

  // pass through
  if (args.length === 1) {
    return args[0];
  }
}

function log(...args) {
  doCutoff = true;
  const res = doLog(...args);
  doCutoff = false;
  return res;
}

log.full = function (...args) {
  doCutoff = false;
  return doLog(...args);
};

function wrapLogger(wrapFn, parent, name) {
  const parentName = parent instanceof Object ? parent.name || parent.constructor && parent.constructor.name || '' : parent || '';
  const methodName = wrapFn.name || name || '';
  const color = Color.getColor(`${parentName}${methodName}`);

  return function (...args) {
    const result = wrapFn.call(this, ...args);
    const state = this && this.state && Object.keys(this.state).reduce((acc, key, i) => ` | ${key.slice(0, 9).padEnd(10)}: ${`${this.state[key]}`.slice(0, 9).padEnd(10)}${i % 3 === 0 ? '\n' : ''}${acc}`, '');
    console.log(`%c${parent ? `${parentName}.` : ''}${methodName}(${args.map(prettyPrint).join(',')}) => ${result}\nSTATE:\n${state}`, `color: ${color}`);
    return result;
  };
}

log.debug = true;
log.filter = /^(DocPage)/;
//# sourceMappingURL=log.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/helpers/watch.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = watch;
function validWatch(val) {
  return Array.isArray(val) || typeof val === 'function';
}

function attachWatch(val) {
  val.IS_AUTO_RUN = true;
  return val;
}

// @watch decorator
function watch(target, method, descriptor) {
  // non-decorator
  if (validWatch(target)) {
    return attachWatch(target);
  }

  // decorator
  if (descriptor.initializer) {
    const ogInit = descriptor.initializer;
    return _extends({}, descriptor, {
      configurable: true,
      initializer: function () {
        const value = ogInit.call(this);
        if (validWatch(value)) {
          return attachWatch(value);
        } else {
          console.log('got a', descriptor, value);
          throw 'Expected a function or array to watch';
        }
      }
    });
  }
}
//# sourceMappingURL=watch.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/black/lib/constants.js", function(__filename, __dirname, require, module, exports) {
(function(process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
const IS_PROD = exports.IS_PROD = 'development' === '"production"';
const IS_ELECTRON = exports.IS_ELECTRON = isElectron();

function isElectron() {
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }
  if (typeof process !== 'undefined' && process.versions && !!process.versions.electron) {
    return true;
  }
  return false;
}
//# sourceMappingURL=constants.js.map
})(require(2822))
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/inject.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = inject;

var _reactTunnel = require('2690');

// adds object fallback if not defined
function inject(mapProvidedToProps) {
  return (0, _reactTunnel.inject)(props => mapProvidedToProps(props) || {});
}
//# sourceMappingURL=inject.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inject = exports.Provider = undefined;

var _react = require('2830');

var _react2 = _interopRequireDefault(_react);

var _createAll2 = require('2831');

var _createAll3 = _interopRequireDefault(_createAll2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var _createAll = (0, _createAll3.default)(_react2.default);

var Provider = _createAll.Provider,
    inject = _createAll.inject;
exports.Provider = Provider;
exports.inject = inject;
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/components/createAll.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAll;

var _createProvider = require('2845');

var _createProvider2 = _interopRequireDefault(_createProvider);

var _createInject = require('2846');

var _createInject2 = _interopRequireDefault(_createInject);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function createAll(React) {
  var Provider = (0, _createProvider2.default)(React);
  var inject = (0, _createInject2.default)(React);

  return { Provider: Provider, inject: inject };
}
//# sourceMappingURL=createAll.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/components/createProvider.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

exports.default = createProvider;

var _invariant = require('2855');

var _invariant2 = _interopRequireDefault(_invariant);

var _shallowEqual = require('2856');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _isPlainObject = require('2857');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _hasEmptyIntersection = require('2858');

var _hasEmptyIntersection2 = _interopRequireDefault(_hasEmptyIntersection);

var _sharedKeys = require('2859');

var _sharedKeys2 = _interopRequireDefault(_sharedKeys);

var _propTypes = require('2860');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function createProvider(React) {
  var _class, _temp;

  var Component = React.Component,
      Children = React.Children;

  return _temp = _class = function (_Component) {
    _inherits(Provider, _Component);

    _createClass(Provider, [{
      key: 'getChildContext',
      value: function getChildContext() {
        return { provided: this.state.provided };
      }
    }]);

    function Provider(props, context) {
      _classCallCheck(this, Provider);

      var _this = _possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).call(this, props, context));

      var provided = _this.providedFromPropsAndContext(props, context);
      _this.state = { provided: provided };
      return _this;
    }

    _createClass(Provider, [{
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps, nextContext) {
        var provided = this.state.provided;

        var nextProvided = this.providedFromPropsAndContext(nextProps, nextContext);
        if ((0, _shallowEqual2.default)(provided, nextProvided)) {
          return;
        }
        this.setState({ provided: nextProvided });
      }
    }, {
      key: 'providedFromPropsAndContext',
      value: function providedFromPropsAndContext(props, context) {
        var isNestedProvider = (0, _isPlainObject2.default)(context.provided);
        var parentProvided = isNestedProvider ? context.provided : {};

        if (isNestedProvider) {
          (0, _invariant2.default)((0, _isPlainObject2.default)(parentProvided), 'This Provider appears to be nested inside another provider but received a parent `provided` ' + 'is not a plain Object. `provided` must be always be a plain Object. %s', parentProvided);
        }

        var provide = props.provide;

        var provider = provide;

        if ((0, _isPlainObject2.default)(provide)) {
          provider = function provider(parentProvided) {
            return _extends({}, parentProvided, provide);
          };
        }

        var provided = provider(parentProvided);

        (0, _invariant2.default)((0, _isPlainObject2.default)(provided), 'This Provider is attempting to provide something other than a plain Object. ' + 'the `provide` prop must either be a plain object itself or a function that returns ' + 'a plain Object. `provide` is or returned %s', provided);

        return provided;
      }
    }, {
      key: 'isNested',
      value: function isNested() {}
    }, {
      key: 'render',
      value: function render() {
        return Children.only(this.props.children);
      }
    }]);

    return Provider;
  }(Component), _class.contextTypes = {
    provided: _propTypes.object
  }, _class.childContextTypes = {
    provided: _propTypes.object.isRequired
  }, _class.propTypes = {
    children: _propTypes.element.isRequired,
    provide: (0, _propTypes.oneOfType)([_propTypes.object, _propTypes.func])
  }, _temp;
}
//# sourceMappingURL=createProvider.js.map
});
__sbPundle.registerModule("../node_modules/invariant/browser.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function (condition, format, a, b, c, d, e, f) {
  if ('development' !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/utils/shallowEqual.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shallowEqual;
/**
 * copied from https://github.com/gaearon/react-redux/blob/master/src/utils/isPlainObject.js authored by @gaearon
 */

function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var hasOwn = Object.prototype.hasOwnProperty;
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}
//# sourceMappingURL=shallowEqual.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/utils/isPlainObject.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

exports.default = isPlainObject;
/**
 * copied from https://github.com/gaearon/react-redux/blob/master/src/utils/isPlainObject.js authored by @gaearon
 */

var fnToString = function fnToString(fn) {
  return Function.prototype.toString.call(fn);
};

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
    return false;
  }

  var proto = typeof obj.constructor === 'function' ? Object.getPrototypeOf(obj) : Object.prototype;

  if (proto === null) {
    return true;
  }

  var constructor = proto.constructor;

  return typeof constructor === 'function' && constructor instanceof constructor && fnToString(constructor) === fnToString(Object);
}
//# sourceMappingURL=isPlainObject.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/utils/hasEmptyIntersection.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = hasEmptyIntersection;
function hasEmptyIntersection(objA, objB) {
  if (!objA || !objB) {
    return true;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length === 0 || keysB.length === 0) {
    return true;
  }

  if (objA === objB) {
    return false;
  }

  var objCombined = _extends({}, objA, objB);
  var keysCombined = Object.keys(objCombined);

  if (keysA.length + keysB.length === keysCombined.length) {
    return true;
  }

  return false;
}
//# sourceMappingURL=hasEmptyIntersection.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/utils/sharedKeys.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sharedKeys;
function sharedKeys(objA, objB) {

  if (!objA || !objB) {
    return [];
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length === 0 || keysB.length === 0) {
    return [];
  }

  if (objA === objB) {
    return keysA;
  }

  var sharedKeys = [];

  var hasOwn = Object.prototype.hasOwnProperty;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = keysA[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var keyA = _step.value;

      if (hasOwn.call(objB, keyA)) {
        sharedKeys.push(keyA);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return sharedKeys;
}
//# sourceMappingURL=sharedKeys.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/components/createInject.js", function(__filename, __dirname, require, module, exports) {
(function(process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = createInject;

var _invariant = require('2861');

var _invariant2 = _interopRequireDefault(_invariant);

var _shallowEqual = require('2862');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _isPlainObject = require('2863');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _propTypes = require('2864');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var defaultMapProvidedToProps = function defaultMapProvidedToProps(provided) {
  return _extends({}, provided);
};

function getDisplayName(Component) {
  return Component.displayName || Component.name || 'Component';
}

function createInject(React) {
  var Component = React.Component;

  //@TODO have not tested nextVersion stuff

  var nextVersion = 0;
  return function inject(mapProvidedToProps) {
    var finalMapProvidedToProps = mapProvidedToProps || defaultMapProvidedToProps;

    // Helps track hot reloading.
    var version = nextVersion++;

    function computeProvidedProps(provided) {
      var providedProps = finalMapProvidedToProps(provided);
      (0, _invariant2.default)((0, _isPlainObject2.default)(providedProps), '`mapProvidedToProps` must return an object. Instead received %s.', providedProps);
      return providedProps;
    }

    return function wrapWithInject(WrappedComponent) {
      var _class, _temp;

      var Inject = (_temp = _class = function (_Component) {
        _inherits(Inject, _Component);

        _createClass(Inject, [{
          key: 'shouldComponentUpdate',
          value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
            return !(0, _shallowEqual2.default)(this.state.provided, nextState.provided) || !(0, _shallowEqual2.default)(this.props, nextProps);
          }
        }]);

        function Inject(props, context) {
          _classCallCheck(this, Inject);

          var _this = _possibleConstructorReturn(this, (Inject.__proto__ || Object.getPrototypeOf(Inject)).call(this, props, context));

          _this.version = version;
          _this.provided = context.provided;

          (0, _invariant2.default)(_this.provided, 'Could not find "provided" in context ' + ('of "' + _this.constructor.displayName + '". ') + 'Wrap a higher component in a <Provider>. ');

          _this.state = {
            provided: computeProvidedProps(_this.provided)
          };
          return _this;
        }

        _createClass(Inject, [{
          key: 'componentWillReceiveProps',
          value: function componentWillReceiveProps(nextProps, nextContext) {
            if (!(0, _shallowEqual2.default)(this.provided, nextContext.provided)) {
              this.provided = nextContext.provided;
              this.recomputeProvidedProps(nextContext);
            }
          }
        }, {
          key: 'recomputeProvidedProps',
          value: function recomputeProvidedProps() {
            var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.context;

            var nextProvidedProps = computeProvidedProps(context.provided);
            if (!(0, _shallowEqual2.default)(nextProvidedProps, this.state.provided)) {
              this.setState({ provided: nextProvidedProps });
            }
          }
        }, {
          key: 'getWrappedInstance',
          value: function getWrappedInstance() {
            return this.refs.wrappedInstance;
          }
        }, {
          key: 'render',
          value: function render() {
            return React.createElement(WrappedComponent, _extends({ ref: 'wrappedInstance'
            }, this.state.provided, this.props));
          }
        }]);

        return Inject;
      }(Component), _class.displayName = 'inject(' + getDisplayName(WrappedComponent) + ')', _class.WrappedComponent = WrappedComponent, _class.contextTypes = {
        provided: _propTypes.object
      }, _temp);

      if (
      // Node-like CommonJS environments (Browserify, Webpack)
      typeof process !== 'undefined' && typeof process.env !== 'undefined' && 'development' !== 'production' ||
      // React Native
      typeof __DEV__ !== 'undefined' && __DEV__ //eslint-disable-line no-undef
      ) {
          Inject.prototype.componentWillUpdate = function componentWillUpdate() {
            if (this.version === version) {
              return;
            }

            // We are hot reloading!
            this.version = version;

            // Update the state and bindings.
            this.recomputeProvidedProps();
          };
        }

      return Inject;
    };
  };
}
//# sourceMappingURL=createInject.js.map
})(require(2865))
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/getTarget.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getTarget;

var _reactDom = require('2691');

function getTarget(target) {
  if (!target) {
    return null;
  }
  switch (typeof target) {
    case 'string':
      return document.querySelector(target);
    case 'function':
      return (0, _reactDom.findDOMNode)(target());
  }
  try {
    return (0, _reactDom.findDOMNode)(target);
  } catch (e) {
    return target;
  }
}
//# sourceMappingURL=getTarget.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/keycode.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keyCode;

var _keycode = require('2692');

var _keycode2 = _interopRequireDefault(_keycode);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// fix react synth event
function keyCode(event) {
  event.persist();
  const code = (0, _keycode2.default)(event);
  if (localStorage.debug) {
    console.log(code);
  }
  return code;
}
//# sourceMappingURL=keycode.js.map
});
__sbPundle.registerModule("../node_modules/keycode/index.js", function(__filename, __dirname, require, module, exports) {
// Source: http://jsfiddle.net/vWx8V/
// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

/**
 * Conenience method returns corresponding value for given keyName or keyCode.
 *
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Mixed}
 * @api public
 */

exports = module.exports = function (searchInput) {
  // Keyboard Events
  if (searchInput && 'object' === typeof searchInput) {
    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;
    if (hasKeyCode) searchInput = hasKeyCode;
  }

  // Numbers
  if ('number' === typeof searchInput) return names[searchInput];

  // Everything else (cast to string)
  var search = String(searchInput);

  // check codes
  var foundNamedKey = codes[search.toLowerCase()];
  if (foundNamedKey) return foundNamedKey;

  // check aliases
  var foundNamedKey = aliases[search.toLowerCase()];
  if (foundNamedKey) return foundNamedKey;

  // weird character?
  if (search.length === 1) return search.charCodeAt(0);

  return undefined;
};

/**
 * Get by name
 *
 *   exports.code['enter'] // => 13
 */

var codes = exports.code = exports.codes = {
  'backspace': 8,
  'tab': 9,
  'enter': 13,
  'shift': 16,
  'ctrl': 17,
  'alt': 18,
  'pause/break': 19,
  'caps lock': 20,
  'esc': 27,
  'space': 32,
  'page up': 33,
  'page down': 34,
  'end': 35,
  'home': 36,
  'left': 37,
  'up': 38,
  'right': 39,
  'down': 40,
  'insert': 45,
  'delete': 46,
  'command': 91,
  'left command': 91,
  'right command': 93,
  'numpad *': 106,
  'numpad +': 107,
  'numpad -': 109,
  'numpad .': 110,
  'numpad /': 111,
  'num lock': 144,
  'scroll lock': 145,
  'my computer': 182,
  'my calculator': 183,
  ';': 186,
  '=': 187,
  ',': 188,
  '-': 189,
  '.': 190,
  '/': 191,
  '`': 192,
  '[': 219,
  '\\': 220,
  ']': 221,
  "'": 222

  // Helper aliases

};var aliases = exports.aliases = {
  'windows': 91,
  '⇧': 16,
  '⌥': 18,
  '⌃': 17,
  '⌘': 91,
  'ctl': 17,
  'control': 17,
  'option': 18,
  'pause': 19,
  'break': 19,
  'caps': 20,
  'return': 13,
  'escape': 27,
  'spc': 32,
  'pgup': 33,
  'pgdn': 34,
  'ins': 45,
  'del': 46,
  'cmd': 91

  /*!
   * Programatically add the following
   */

  // lower case chars
};for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32;

// numbers
for (var i = 48; i < 58; i++) codes[i - 48] = i;

// function keys
for (i = 1; i < 13; i++) codes['f' + i] = i + 111;

// numpad keys
for (i = 0; i < 10; i++) codes['numpad ' + i] = i + 96;

/**
 * Get by code
 *
 *   exports.name[13] // => 'Enter'
 */

var names = exports.names = exports.title = {}; // title for backward compat

// Create reverse mapping
for (i in codes) names[codes[i]] = i;

// Add aliases
for (var alias in aliases) {
  codes[alias] = aliases[alias];
}
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/arrow.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2541');

var React = _interopRequireWildcard(_react2);

var _index = require('2542');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2543');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Arrow: {
    displayName: 'Arrow'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/arrow.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Arrow = _wrapComponent('Arrow')((_dec = _black.view.ui, _dec(_class = (_temp2 = _class2 = class Arrow extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.getRotation = towards => {
      switch (towards) {
        case 'left':
          return '-90deg';
        case 'right':
          return '0deg';
      }
      return '0deg';
    }, this.getOuterRotation = towards => {
      switch (towards) {
        case 'right':
          return '90deg';
      }
    }, _temp;
  }

  render(_ref) {
    let { size, towards, theme, boxShadow, background } = _ref,
        props = _objectWithoutProperties(_ref, ['size', 'towards', 'theme', 'boxShadow', 'background']);

    const _gloss = this.glossElement.bind(this);

    const onBottom = towards === 'bottom';
    const innerTop = size * (onBottom ? -1 : 1);

    // add padding so big shadows work
    return _gloss('arrowOuter', {
      css: { transform: { rotate: this.getOuterRotation(towards) } },
      style: {
        width: size,
        height: size
      }
    }, _gloss('arrow', _extends({
      css: {
        transform: { rotate: this.getRotation(towards) }
      }
    }, props), _gloss('arrowInner', {
      style: {
        top: innerTop * 0.75,
        width: size,
        height: size
      }
    })));
  }

}, _class2.defaultProps = {
  size: 16,
  towards: 'bottom'
}, _class2.style = {
  // why arrowOuter and arrow? Because chrome transform rotate destroy overflow: hidden, so we nest one more
  arrowOuter: {
    position: 'relative',
    overflow: 'hidden'
  },
  arrowInner: {
    position: 'absolute',
    left: 0,
    borderRadius: 1,
    transform: 'rotate(45deg)'
  }
}, _class2.theme = ({ size, background, boxShadow }, theme) => ({
  arrowInner: {
    background: background === true ? theme.base.background : background || theme.base.background,
    boxShadow: boxShadow
  },
  arrow: {
    width: size,
    height: size
  }
}), _temp2)) || _class));

exports.default = Arrow;
//# sourceMappingURL=arrow.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/badge.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2544');

var React = _interopRequireWildcard(_react2);

var _index = require('2545');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2546');

var _surface = require('2547');

var _surface2 = _interopRequireDefault(_surface);

var _text = require('2548');

var _text2 = _interopRequireDefault(_text);

var _icon = require('2549');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Badge: {
    displayName: 'Badge'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/badge.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Badge = _wrapComponent('Badge')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Badge extends React.Component {

  render(_ref) {
    let {
      label,
      children,
      color,
      icon,
      iconProps,
      attach,
      className,
      style,
      labelBefore,
      fontSize
    } = _ref,
        props = _objectWithoutProperties(_ref, ['label', 'children', 'color', 'icon', 'iconProps', 'attach', 'className', 'style', 'labelBefore', 'fontSize']);

    const _gloss = this.glossElement.bind(this);

    const fontSizeNum = +fontSize;

    return _gloss(_surface2.default, _extends({
      $badge: true,
      className: className,
      css: props,
      style: style
    }, attach), icon || children || label ? _gloss('content', { $labelBefore: labelBefore }, label ? _gloss('lbl', { $hasChildren: !!children }, _gloss(_text2.default, {
      fontSize: fontSizeNum,
      lineHeight: fontSizeNum + 1,
      color: color
    }, label)) : null, icon ? _gloss(_icon2.default, _extends({ size: 16, name: icon, color: color }, iconProps)) : null, children ? _gloss('inner', { $hasLabel: !!label }, _gloss(_text2.default, {
      fontSize: fontSizeNum,
      lineHeight: fontSizeNum + 1,
      color: color
    }, children)) : null) : null);
  }

}, _class2.defaultProps = {
  background: [0, 0, 0, 0.1],
  borderRadius: 30,
  fontSize: 12
}, _class2.style = {
  badge: {
    height: 18,
    padding: [2, 3],
    marginLeft: 5,
    alignSelf: 'center',
    flexFlow: 'row',
    alignItems: 'center'
  },
  content: {
    flexFlow: 'row',
    alignItems: 'center'
  },
  labelBefore: {
    flexDirection: 'row-reverse'
  },
  inner: {
    display: 'block',
    whiteSpace: 'nowrap',
    textOverflow: 'ellipsis',
    margin: 'auto',
    textAlign: 'center',
    padding: [0, 4]
  },
  hasLabel: {
    paddingLeft: 4
  },
  lbl: {
    padding: [2, 4]
  },
  hasChildren: {
    paddingRight: 4
  }
}, _temp)) || _class));

exports.default = Badge;
//# sourceMappingURL=badge.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/surface.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2663');

var React = _interopRequireWildcard(_react2);

var _index = require('2664');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _gloss3 = require('2665');

var _black = require('2666');

var _inject = require('2667');

var _inject2 = _interopRequireDefault(_inject);

var _color = require('2668');

var _color2 = _interopRequireDefault(_color);

var _icon = require('2669');

var _icon2 = _interopRequireDefault(_icon);

var _hoverGlow = require('2670');

var _hoverGlow2 = _interopRequireDefault(_hoverGlow);

var _glint = require('2671');

var _glint2 = _interopRequireDefault(_glint);

var _popover = require('2672');

var _popover2 = _interopRequireDefault(_popover);

var _propTypes = require('2673');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Surface: {
    displayName: 'Surface'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/surface.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const IS_PROD = 'development' === 'production';

const ICON_PAD = 10;
const LINE_HEIGHT = 30;
const DEFAULT_GLOW_COLOR = [255, 255, 255];
const BORDER_RADIUS_SIDES = ['borderBottomRadius', 'borderTopRadius', 'borderLeftRadius', 'borderRightRadius'];

const hasChildren = children => Array.isArray(children) ? children.reduce((a, b) => a || !!b, false) : !!children;

const Surface = _wrapComponent('Surface')((_dec = _black.view.ui, _dec(_class = (_temp2 = _class2 = class Surface extends React.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.uniq = `SRFC-${Math.round(Math.random() * 100000000)}`, this.onClick = e => {
      e.preventDefault();
      if (this.props.onClick) {
        this.props.onClick(e);
      }
    }, _temp;
  }

  get uiContext() {
    return this.context.provided.uiContext;
  }

  render() {
    const _gloss2 = this.glossElement.bind(this);

    const _props = this.props,
          {
      active,
      after,
      align,
      alignSelf,
      background,
      badge,
      badgeProps,
      border,
      borderBottom,
      borderBottomRadius,
      borderColor,
      borderLeft,
      borderLeftRadius: _borderLeftRadius,
      borderRadius: _borderRadius,
      borderRight,
      borderRightRadius: _borderRightRadius,
      borderStyle,
      borderTop,
      borderTopRadius,
      borderWidth,
      boxShadow,
      children,
      chromeless,
      circular,
      className,
      clickable,
      color,
      dim,
      disabled,
      elementProps,
      elevation,
      flex,
      flexFlow,
      focusable,
      fontSize,
      fontWeight,
      getRef,
      glint,
      glow,
      glowProps,
      height,
      highlight,
      highlightBackground,
      highlightColor,
      hover,
      hoverable,
      hoverBackground,
      hoverColor,
      hovered,
      icon,
      iconAfter,
      iconColor,
      iconProps,
      iconSize: _iconSize,
      inline,
      justify,
      lineHeight,
      margin,
      marginBottom,
      marginLeft,
      marginRight,
      marginTop,
      maxWidth,
      minWidth,
      noElement,
      noWrap,
      onClick,
      opacity,
      padding,
      paddingBottom,
      paddingLeft,
      paddingRight,
      paddingTop,
      placeholderColor,
      row,
      size,
      sizeIcon,
      spaced,
      stretch,
      style,
      tagName,
      textAlign,
      theme,
      tooltip,
      tooltipProps,
      width,
      wrapElement
    } = _props,
          props = _objectWithoutProperties(_props, ['active', 'after', 'align', 'alignSelf', 'background', 'badge', 'badgeProps', 'border', 'borderBottom', 'borderBottomRadius', 'borderColor', 'borderLeft', 'borderLeftRadius', 'borderRadius', 'borderRight', 'borderRightRadius', 'borderStyle', 'borderTop', 'borderTopRadius', 'borderWidth', 'boxShadow', 'children', 'chromeless', 'circular', 'className', 'clickable', 'color', 'dim', 'disabled', 'elementProps', 'elevation', 'flex', 'flexFlow', 'focusable', 'fontSize', 'fontWeight', 'getRef', 'glint', 'glow', 'glowProps', 'height', 'highlight', 'highlightBackground', 'highlightColor', 'hover', 'hoverable', 'hoverBackground', 'hoverColor', 'hovered', 'icon', 'iconAfter', 'iconColor', 'iconProps', 'iconSize', 'inline', 'justify', 'lineHeight', 'margin', 'marginBottom', 'marginLeft', 'marginRight', 'marginTop', 'maxWidth', 'minWidth', 'noElement', 'noWrap', 'onClick', 'opacity', 'padding', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', 'placeholderColor', 'row', 'size', 'sizeIcon', 'spaced', 'stretch', 'style', 'tagName', 'textAlign', 'theme', 'tooltip', 'tooltipProps', 'width', 'wrapElement']);
    const hasIconBefore = icon && !iconAfter;
    const hasIconAfter = icon && iconAfter;
    const stringIcon = typeof icon === 'string';
    const { themeValues } = this;

    const passProps = _extends({
      tagName,
      ref: getRef,
      style
    }, props);

    let borderLeftRadius = _borderLeftRadius || themeValues.borderRadius.borderLeftRadius;
    let borderRightRadius = _borderRightRadius || themeValues.borderRadius.borderRightRadius;

    if (typeof borderLeftRadius === 'undefined') {
      borderLeftRadius = themeValues.radius;
      borderRightRadius = themeValues.radius;
    }

    const glowColor = this.theme && themeValues.color.lighten(0.2) || DEFAULT_GLOW_COLOR;

    const contents = [glint ? _gloss2(_glint2.default, {
      key: 0,

      size: size,
      borderLeftRadius: borderLeftRadius - 1,
      borderRightRadius: borderRightRadius - 1
    }) : null, badge ? _gloss2('badge', badgeProps, typeof badge !== 'boolean' ? badge : '') : null, icon && !stringIcon ? _gloss2('icon', { key: 1, $iconAfter: hasIconAfter }, icon) : null, icon && stringIcon ? _gloss2(_icon2.default, _extends({
      key: 1,

      $icon: true,
      $iconAfter: hasIconAfter,
      name: icon,
      size: themeValues.iconSize
    }, iconProps)) : null, glow && !active && !disabled ? _gloss2(_hoverGlow2.default, _extends({
      key: 2,

      full: true,
      scale: 1.3,
      show: true,
      color: glowColor,
      opacity: 0.2,
      borderLeftRadius: borderLeftRadius - 1,
      borderRightRadius: borderRightRadius - 1
    }, glowProps)) : null, !noElement || noElement && !noWrap && hasChildren(children) ? _gloss2('element', _extends({
      key: 3
    }, wrapElement && passProps, elementProps, {
      $hasIconBefore: hasIconBefore,
      $hasIconAfter: hasIconAfter
    }), children) : null, noElement && noWrap && hasChildren(children) && children, tooltip && _gloss2(_popover2.default, _extends({
      key: 4,
      theme: 'dark',
      background: true,
      openOnHover: true,
      closeOnClick: true,
      noHover: true,
      noArrow: true,
      animation: 'bounce 150ms',
      target: `.${this.uniq}`,
      padding: [2, 7],
      borderRadius: 5,
      distance: 8,
      forgiveness: 8,
      arrowSize: 10,
      delay: 100,
      popoverProps: { style: { fontSize: 12 } }
    }, tooltipProps), tooltip)].filter(Boolean);

    const surface = _gloss2('surface', _extends({
      className: `${this.uniq} ${className || ''}`,
      ref: this.ref('surfaceRef').set,
      onClick: this.onClick
    }, !wrapElement && passProps), after && _gloss2('wrap', null, _gloss2('before', null, contents), _gloss2('after', null, after)), !after && contents);

    if (theme) {
      return _gloss2(_gloss3.Theme, { name: theme }, surface);
    }

    return surface;
  }

}, _class2.contextTypes = {
  provided: _propTypes.object
}, _class2.defaultProps = {
  tagName: IS_PROD ? 'div' : 'surface',
  borderStyle: 'solid',
  borderWidth: 0
}, _class2.style = {
  surface: {
    lineHeight: '1rem',
    position: 'relative'
  },
  element: {
    border: 'none',
    background: 'transparent',
    userSelect: 'none',
    height: '100%',
    flex: 1,
    color: 'inherit'
  },
  icon: {
    pointerEvents: 'none'
  },
  hasIconBefore: {
    // this adjusts for height
    marginLeft: ICON_PAD
  },
  hasIconAfter: {
    marginRight: ICON_PAD
  },
  iconAfter: {
    order: 3
  }
}, _class2.inlineStyle = {
  margin: [-3, 0],
  borderRadius: 1000
}, _class2.disabledStyle = {
  opacity: 0.2
  // pointerEvents: 'none',
}, _class2.dimStyle = {
  opacity: 0.5,
  '&:hover': {
    opacity: 1
  }
}, _class2.spacedStyles = {
  margin: [0, 5],
  borderRightWidth: 1
}, _class2.theme = (props, theme, self) => {
  const uiContext = self.uiContext;

  // sizes
  const size = props.size === true ? 1 : props.size || 1;
  const height = props.height || props.style && props.style.height;
  const width = props.width;
  const padding = props.padding;
  const flex = props.flex === true ? 1 : props.flex;
  const STATE = props.highlight && 'highlight' || props.active && 'active' || 'base';

  // colors
  const color = (0, _color2.default)(props.color || props.highlight && props.highlightColor || theme[STATE].color);
  const iconColor = props.iconColor || color;

  // background
  const baseBackground = props.background === true ? theme[STATE].background : props.background || theme[STATE].background;
  let background = props.highlight ? props.highlightBackground || theme.highlight.background : props.active ? props.activeBackground || theme.active.background || baseBackground : baseBackground;

  const isGradient = typeof background === 'string' && (background.indexOf('linear-gradient') === 0 || background.indexOf('radial-gradient') === 0);
  const isTransparent = background === 'transparent';
  const colorfulBg = !isGradient && !isTransparent;

  if (colorfulBg && background && !background.model) {
    background = (0, _color2.default)(background);
  }

  const hoverBackground = !props.highlight && (props.hoverBackground === true ? theme.hover.background : props.hoverBackground || theme.hover.background || (colorfulBg ? background.lighten(0.5) : background));

  const borderColor = (0, _color2.default)(props.borderColor || theme[STATE].borderColor || 'transparent');
  let hoverColor = (0, _color2.default)(props.hoverColor || theme[STATE].color.lighten(0.2) || props.color);

  const hoverBorderColor = props.hoverBorderColor || props.borderColor && (0, _color2.default)(props.borderColor).lighten(0.2) || theme[STATE].borderColor || theme.hover.borderColor || borderColor.lighten(0.2);

  // shadows
  const boxShadow = typeof props.boxShadow === 'string' ? [props.boxShadow] : props.boxShadow || [];
  if (props.elevation) {
    boxShadow.push([0, (Math.log(props.elevation) + 1) * 3 + 1, (Math.log(props.elevation) + 1) * 10, [0, 0, 0, 1 / Math.log(props.elevation) * 0.15]]);
  }

  // glint
  let glintColor;
  if (props.glint) {
    glintColor = props.glint === true ? colorfulBg ? background.lighten(0.1) : [255, 255, 255, 0.2] : props.glint;
    // boxShadow.push(['inset', 0, 0, 0, glintColor])
  }

  // borderRadius
  let radius = props.circular ? height / 2 : props.borderRadius;
  radius = radius === true ? height / 3.4 * size : radius;
  radius = typeof radius === 'number' ? Math.round(radius) : radius;

  const borderRadius = {};
  if (uiContext && uiContext.inSegment) {
    borderRadius.borderLeftRadius = uiContext.inSegment.first ? radius : 0;
    borderRadius.borderRightRadius = uiContext.inSegment.last ? radius : 0;
  } else if (props.circular) {
    borderRadius.borderRadius = size * LINE_HEIGHT;
  } else {
    let hasSidesDefined = false;
    for (const side of BORDER_RADIUS_SIDES) {
      if (props[side]) {
        hasSidesDefined = true;
        if (props[side] === true) {
          borderRadius[side] = radius;
        } else {
          borderRadius[side] = props[side];
        }
      }
    }
    if (!hasSidesDefined && radius) {
      borderRadius.borderRadius = radius;
    }
  }
  if (Object.keys(borderRadius).length) {
    // always add hidden for things with radius
    borderRadius.overflow = props.overflow || 'hidden';
  }

  // circular
  const circularStyles = props.circular && {
    padding: 0,
    width: height

    // icon
  };const iconStyle = {
    color: iconColor
  };
  const hoverIconStyle = {
    color: props.iconHoverColor || hoverColor

    // state styles
  };const hoverStyle = (props.hover || !props.chromeless && !props.disabled && (props.hoverable || props.hoverBackground)) && _extends({}, theme.hover, {
    color: hoverColor,
    borderColor: hoverBorderColor,
    background: hoverBackground
  }, props.hover);

  const activeStyle = !props.chromeless && _extends({
    position: 'relative',
    zIndex: props.zIndex || 1000
  }, props.clickable && theme[STATE], props.clickable && { '&:hover': theme[STATE] });

  const chromelessStyle = props.chromeless && {
    borderWidth: 0,
    background: 'transparent'
  };

  const focusable = props.focusable || uiContext && uiContext.inForm;
  const focusStyle = !props.chromeless && _extends({}, theme.focus, {
    boxShadow: [...boxShadow, [0, 0, 0, 4, (0, _color2.default)(theme.focus.color).alpha(0.05)]]
  });

  const iconSize = props.iconSize || Math.round(size * 11 * (props.sizeIcon || 1));

  // TODO figure out better pattern for this
  self.themeValues = {
    iconSize,
    borderRadiusSize: radius,
    borderRadius,
    glintColor,
    color
  };

  const flexFlow = props.flexFlow || props.row ? 'row' : 'column';
  const iconPad = props.icon ? `- ${iconSize + ICON_PAD}px` : '';

  const result = {
    element: _extends({
      height
    }, borderRadius, {
      overflow: props.overflow || 'visible',
      flexFlow: props.noElement ? 'column' : flexFlow,
      fontSize: props.fontSize,
      fontWeight: props.fontWeight,
      lineHeight: props.lineHeight || 'inherit',
      justifyContent: props.justify,
      maxWidth: `calc(100% ${iconPad})`,
      maxHeight: '100%',
      textAlign: props.textAlign
    }),
    surface: _extends({
      transform: _extends({
        z: 0
      }, props.transform),
      position: props.position,
      zIndex: props.zIndex,
      opacity: props.opacity,
      minWidth: props.minWidth,
      maxWidth: props.maxWidth,
      color,
      overflow: props.overflow || props.glow ? 'hidden' : props.overflow,
      height,
      width,
      flex,
      padding,
      borderColor,
      background,
      boxShadow,
      justifyContent: props.justify,
      alignItems: props.align,
      alignSelf: props.alignSelf,
      flexFlow
    }, borderRadius, {
      margin: props.margin,
      borderWidth: props.borderWidth,
      borderStyle: props.borderStyle || props.borderWidth ? 'solid' : undefined,
      border: props.border,
      borderBottom: props.borderBottom,
      borderTop: props.borderTop,
      borderLeft: props.borderLeft,
      borderRight: props.borderRight,
      marginBottom: props.marginBottom,
      marginTop: props.marginTop,
      marginLeft: uiContext && uiContext.inSegment && !uiContext.inSegment.first ? -1 : props.marginLeft,
      marginRight: props.marginRight,
      paddingBottom: props.paddingBottom,
      paddingTop: props.paddingTop,
      paddingLeft: props.paddingLeft,
      paddingRight: props.paddingRight
    }, circularStyles, {
      '& > icon': props.hovered ? hoverIconStyle : iconStyle,
      '&:hover > icon': hoverIconStyle,
      '&:hover': hoverStyle
    }, props.wrapElement && {
      '& > :focus': focusable && focusStyle,
      '& > :active': activeStyle
    }, !props.wrapElement && {
      '&:focus': focusable && focusStyle,
      '&:active': activeStyle
    }, props.hovered && hoverStyle, props.inline && self.constructor.inlineStyle, props.disabled && self.constructor.disabledStyle, props.dim && self.constructor.dimStyle, props.spaced && self.constructor.spacedStyle, chromelessStyle, props.active && activeStyle, props.style)
  };

  return result;
}, _temp2)) || _class));

exports.default = Surface;
//# sourceMappingURL=surface.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/icon.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _class, _temp2;

var _react = require('2609');

var React = _interopRequireWildcard(_react);

var _black = require('2610');

var _color = require('2611');

var _color2 = _interopRequireDefault(_color);

var _popover = require('2612');

var _popover2 = _interopRequireDefault(_popover);

var _iconNames = require('2613');

var _iconNames2 = _interopRequireDefault(_iconNames);

var _iconsDetailed = require('2614');

var _iconsDetailed2 = _interopRequireDefault(_iconsDetailed);

var _fuzzy = require('2615');

var _fuzzy2 = _interopRequireDefault(_fuzzy);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const cache = {};
const findMatch = name => {
  if (cache[name]) return cache[name];
  if (_iconNames2.default[name]) return _iconNames2.default[name];
  const matches = _fuzzy2.default.filter(name, _iconNames2.default);
  const match = matches.length ? matches[0].original : null;
  cache[name] = match;
  return match;
};

let Icon = (_temp2 = _class = class Icon extends React.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.uniq = `icon-${Math.round(Math.random() * 1000000)}`, _temp;
  }

  render() {
    const _props = this.props,
          {
      color,
      hoverColor,
      size,
      tooltip,
      tooltipProps,
      name,
      type,
      className,
      onClick,
      attach,
      children,
      button,
      margin,
      opacity,
      style,
      contentEditable,
      alignSelf,
      width,
      height
    } = _props,
          props = _objectWithoutProperties(_props, ['color', 'hoverColor', 'size', 'tooltip', 'tooltipProps', 'name', 'type', 'className', 'onClick', 'attach', 'children', 'button', 'margin', 'opacity', 'style', 'contentEditable', 'alignSelf', 'width', 'height']);
    const iconName = findMatch(name);
    let content = children || !iconName ? name : '';

    if (type === 'detailed') {
      content = React.createElement('detailIcon', { css: { transform: { scale: 0.01 * size } } }, _iconsDetailed2.default[name]);
    }

    const styles = {
      margin,
      alignSelf: alignSelf,
      alignItems: 'center',
      opacity: opacity,
      color: color ? (0, _color2.default)(color).toString() : '',
      width: width || size,
      height: height || size,
      fontSize: size,
      lineHeight: `${size / 12 - 1}rem`, // scale where 1 when 14
      '&:hover': hoverColor && {
        color: hoverColor.toString()
      }
    };

    return React.createElement('div', _extends({
      contentEditable: false,
      className: `${className || ''} ${this.uniq}`,
      onClick: onClick,
      style: _extends({}, styles, style)
    }, props, {
      contentEditable: contentEditable
    }), React.createElement('div', {
      contentEditable: false,
      className: `nc-icon-${type} ${iconName}`,
      contentEditable: contentEditable,
      style: {
        margin: 'auto',
        textRendering: 'geometricPrecision'
      }
    }, content), tooltip && React.createElement(_popover2.default, _extends({
      theme: 'dark',
      background: true,
      openOnHover: true,
      noArrow: true,
      noHover: true,
      target: `.${this.uniq}`,
      padding: [0, 5],
      distance: 10,
      towards: 'top'
    }, tooltipProps), tooltip));
  }
}, _class.defaultProps = {
  size: 16,
  type: 'mini',
  margin: 0
}, _temp2);
exports.default = Icon;
//# sourceMappingURL=icon.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/popover.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2636');

var React = _interopRequireWildcard(_react2);

var _index = require('2637');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2638');

var _getTarget = require('2639');

var _getTarget2 = _interopRequireDefault(_getTarget);

var _portal = require('2640');

var _portal2 = _interopRequireDefault(_portal);

var _lodash = require('2641');

var _arrow = require('2642');

var _arrow2 = _interopRequireDefault(_arrow);

var _surface = require('2643');

var _surface2 = _interopRequireDefault(_surface);

var _injectTheme = require('2644');

var _injectTheme2 = _interopRequireDefault(_injectTheme);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Popover: {
    displayName: 'Popover'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/popover.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const INVERSE = {
  top: 'bottom',
  bottom: 'top',
  left: 'right',
  right: 'left'
};

const DEFAULT_SHADOW = '0 0px 2px rgba(0,0,0,0.15)';
const ELEVATION_SHADOW = x => [0, x * 1.5, x * 3.5, [0, 0, 0, 0.1]];

const getShadow = (shadow, elevation) => {
  let base = shadow === true ? [DEFAULT_SHADOW] : shadow || [];
  if (!Array.isArray(base)) base = [base];
  if (elevation) {
    base.push(ELEVATION_SHADOW(elevation));
  }
  return base;
};
const calcForgiveness = (forgiveness, distance) => forgiveness;

const Popover = _wrapComponent('Popover')((_dec = _black.view.ui, (0, _injectTheme2.default)(_class = _dec(_class = (_temp2 = _class2 = class Popover extends React.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.curProps = {}, this.popoverRef = null, this.targetRef = null, this.state = {
      targetHovered: null,
      menuHovered: false,
      top: 0,
      left: 0,
      bottom: 0,
      arrowTop: 0,
      arrowLeft: 0,
      arrowInnerTop: 0,
      isOpen: false,
      direction: null,
      delay: 16

      // curProps is always up to date, so we dont have to thread props around a ton
      // also, nicely lets us define get fn helpers

    }, this.componentWillReceiveProps = nextProps => {
      this.curProps = nextProps;
      this.setPosition();
    }, this.componentWillUpdate = nextProps => {
      this.setOpenOrClosed(nextProps);
      this.setTarget();
    }, this.shouldSendDidOpen = true, this.close = () => {
      return new Promise(resolve => {
        this.setState({ closing: true }, () => {
          if (this.curProps.onClose) {
            this.curProps.onClose();
          }

          this.closingTimeout = this.setTimeout(() => {
            this.setState({ closing: false, isOpen: false }, this.props.onDidClose);
            resolve();
          }, 300);
        });
      });
    }, this.listenForClick = () => {
      if (!(this.target instanceof HTMLElement)) {
        console.log('bad target', this.target, this.props);
        return;
      }
      // click away to close
      this.on(this.target, 'click', e => {
        e.stopPropagation();
        this.isClickingTarget = true;
        if (typeof this.curProps.open === 'undefined') {
          if (this.state.isOpen) {
            this.close();
          } else {
            this.open();
          }
        }
        this.setTimeout(() => {
          this.isClickingTarget = false;
        });
      });
    }, this.edgePad = (currentPosition, windowSize, popoverSize) => {
      return Math.min(
      // upper limit
      windowSize - this.curProps.edgePadding - popoverSize,
      // lower limit
      Math.max(this.curProps.edgePadding, currentPosition));
    }, this.listeners = [], this.lastEvent = {
      leave: { target: null, menu: null },
      enter: { target: null, menu: null }
    }, this.isNodeHovered = (node, checkParent = false) => {
      return !!node.parentNode.querySelector(`${node.tagName}:hover`) || checkParent && !!node.parentNode.querySelector(':hover') || node.querySelector(':hover');
    }, this.overlayRef = ref => {
      if (ref) {
        this.on(ref, 'contextmenu', e => this.handleOverlayClick(e));
      }
    }, _temp;
  }

  componentWillMount() {
    this.curProps = this.props;
  }

  componentDidMount() {
    this.mounted = true;
    const { openOnClick, closeOnClick, closeOnEsc, open } = this.curProps;

    this.listenForResize();
    this.setTarget();
    this.listenForHover();

    if (openOnClick) {
      this.listenForClick();
    }
    if (openOnClick || closeOnClick) {
      this.listenForClickAway();
    }
    if (open) {
      this.open();
    }
    if (closeOnEsc) {
      this.on(window, 'keyup', e => {
        if (e.keyCode === 27) {
          log('close popover');
          this.close();
        }
      });
    }
  }

  componentWillUnmount() {
    this.unmounted = true;
  }

  componentDidUpdate() {
    if (this.props.onDidOpen) {
      if (this.shouldSendDidOpen && this.showPopover) {
        this.props.onDidOpen();
        this.shouldSendDidOpen = false;
      } else if (!this.shouldSendDidOpen && !this.showPopover) {
        this.shouldSendDidOpen = true;
      }
    }
  }

  listenForResize() {
    const updatePosition = (0, _lodash.throttle)(() => this.setPosition(), 32);
    const updatePositionInactive = (0, _lodash.debounce)(() => this.setPosition(), 300);
    this.on(window, 'resize', () => {
      if (this.showPopover) {
        updatePosition();
      } else {
        updatePositionInactive();
      }
    });
  }

  open() {
    this.setPosition(() => {
      this.setState({ isOpen: true }, () => {
        if (this.curProps.onOpen) {
          this.curProps.onOpen();
        }
      });
    });
  }

  listenForClickAway() {
    this.on(window, 'click', e => {
      const { showPopover, isClickingTarget, keepOpenOnClickTarget } = this;
      const { open, closeOnClick } = this.curProps;
      // forced open or hidden
      if (open || !showPopover) {
        return;
      }
      // closeOnClickPopover
      if (closeOnClick && !isClickingTarget) {
        this.stopListeningUntilNextMouseEnter();
        this.close();
        e.stopPropagation();
        return;
      }
      // closeOnClickTarget
      if (!keepOpenOnClickTarget && isClickingTarget) {
        this.close();
        e.stopPropagation();
      }
    });
  }

  async stopListeningUntilNextMouseEnter() {
    await this.clearHovered();
    this.removeListenForHover();
    this.close();
    this.setTimeout(this.listenForHover, 100);
  }

  clearHovered() {
    return new Promise(resolve => this.setState({ menuHovered: false, targetHovered: false }, resolve));
  }

  setTarget() {
    this.target = (0, _getTarget2.default)(this.targetRef || this.curProps.target);
  }

  get isHovered() {
    const target = this.target;
    if (!target) {
      return false;
    }
    const { noHover, targetHovered, menuHovered } = this.state;
    if (noHover) {
      return targetHovered;
    }
    return targetHovered || menuHovered;
  }

  // transitions between open and closed
  setOpenOrClosed(nextProps) {
    if (nextProps.open === this.props.open) {
      return;
    }
    if (nextProps.open !== this.props.open) {
      if (nextProps.open) {
        this.setPosition();
      }
      if (!this.state.isOpen && nextProps.open) {
        this.open();
      }
      if (this.state.isOpen && !nextProps.open) {
        this.close();
      }
    }
  }

  setPosition(callback) {
    clearTimeout(this.positionTimeout);
    this.positionTimeout = this.setTimeout(() => {
      if (!this.unmounted) {
        this.setState(this.positionState, callback);
      }
    });
  }

  get forgiveness() {
    return calcForgiveness(this.curProps.forgiveness, this.curProps.distance);
  }

  get popoverSize() {
    const { popoverRef, forgiveness } = this;
    const { width, height } = this.curProps;
    const size = {
      height: (0, _lodash.isNumber)(width) ? width : popoverRef.clientHeight,
      width: (0, _lodash.isNumber)(height) ? height : popoverRef.clientWidth
      // adjust for forgiveness
    };size.height -= forgiveness * 2;
    size.width -= forgiveness * 2;
    return size;
  }

  get targetBounds() {
    const { top, left } = this.curProps;
    const bounds = {};
    // find target dimensions
    if (this.isManuallyPositioned) {
      bounds.width = 0;
      bounds.height = 0;
      bounds.left = left;
      bounds.top = top;
    } else {
      if (!this.target) {
        return false;
      } else {
        if (this.target.getBoundingClientRect) {
          const targetBounds = this.target.getBoundingClientRect();
          bounds.width = targetBounds.width;
          bounds.height = targetBounds.height;
          bounds.left = targetBounds.left;
          bounds.top = targetBounds.top;
        }
      }
    }
    return bounds;
  }

  get isManuallyPositioned() {
    const { bottom, top, left } = this.curProps;
    return ((0, _lodash.isNumber)(bottom) || (0, _lodash.isNumber)(top)) && (0, _lodash.isNumber)(left);
  }

  get positionState() {
    if (!this.target && !this.isManuallyPositioned) {
      console.warn('No top/left/bottom or target given to Popover,', 'target:', this.target, 'this.props:', this.props);
      return {};
    }
    if (this.targetBounds === false) {
      return {};
    }
    return _extends({}, this.x, this.y, {
      direction: this.direction
    });
  }

  get direction() {
    const { forgiveness, popoverSize, targetBounds } = this;
    const { towards } = this.curProps;
    if (towards !== 'auto') {
      return towards;
    }
    const popoverY = popoverSize.height + forgiveness;
    const targetY = targetBounds.top + targetBounds.height;
    const towardsTop = targetY + popoverY > window.innerHeight;
    return towardsTop ? 'top' : 'bottom';
  }

  get x() {
    const { direction, popoverSize, targetBounds } = this;
    const VERTICAL = direction === 'top' || direction === 'bottom';
    const { adjust, distance, arrowSize, forgiveness } = this.curProps;

    // measurements
    const popoverHalfWidth = popoverSize.width / 2;
    const targetCenter = targetBounds.left + targetBounds.width / 2;
    const arrowCenter = window.innerWidth - popoverHalfWidth;

    let left;
    let arrowLeft = 0; // defaults to 0

    // auto for now will just be top/bottom
    // in future it needs to measure target and then determine
    if (VERTICAL) {
      left = this.edgePad(targetCenter - popoverHalfWidth, window.innerWidth, popoverSize.width);

      // arrow
      if (targetCenter < popoverHalfWidth) {
        // ON LEFT SIDE
        const edgeAdjustment = left;
        arrowLeft = -popoverHalfWidth + targetCenter - edgeAdjustment;
      } else if (targetCenter > arrowCenter) {
        // ON RIGHT SIDE
        const edgeAdjustment = window.innerWidth - (left + popoverSize.width);
        arrowLeft = targetCenter - arrowCenter + edgeAdjustment;
      }

      // arrowLeft bounds
      const max = Math.max(0, popoverHalfWidth - arrowSize * 0.75);
      const min = -popoverHalfWidth + arrowSize * 0.5 + distance;
      arrowLeft = Math.max(min, Math.min(max, arrowLeft));
      arrowLeft = -(arrowSize / 2) + arrowLeft;

      // adjust arrows off in this case
      // TODO: this isnt quite right
      if (distance > forgiveness) {
        arrowLeft = arrowLeft / 2;
      }
    } else {
      // HORIZONTAL
      if (direction === 'left') {
        arrowLeft = popoverHalfWidth;
        left = targetBounds.left - popoverSize.width - distance;
      } else {
        left = targetBounds.left + targetBounds.width + distance;
        arrowLeft = -popoverHalfWidth - arrowSize;
      }
    }

    // adjustments
    left += adjust[0];
    arrowLeft -= adjust[0];

    return { arrowLeft, left };
  }

  get y() {
    const { forgiveness, direction, popoverSize, targetBounds } = this;
    const VERTICAL = direction === 'top' || direction === 'bottom';
    const { distance, adjust, noArrow, arrowSize } = this.curProps;

    // since its rotated 45deg, the real height is less 1/4 of set height
    const arrowHeight = noArrow ? 0 : arrowSize * 0.75;
    const targetCenter = targetBounds.top + targetBounds.height / 2;
    const targetTopReal = targetBounds.top - window.scrollY;

    let arrowTop;
    let maxHeight;
    let top = null;

    const arrowAdjust = Math.max(forgiveness, distance);

    // bottom half
    if (VERTICAL) {
      // determine arrow location
      if (direction === 'top') {
        arrowTop = popoverSize.height + arrowAdjust;
        top = targetTopReal - popoverSize.height - distance;
      } else {
        arrowTop = -arrowSize + arrowAdjust;
        top = targetTopReal + targetBounds.height + distance;
      }

      // final top
      top = this.edgePad(top, window.innerHeight, popoverSize.height);
    } else {
      // left or right
      const yCenter = targetCenter - popoverSize.height / 2;
      top = yCenter;
      arrowTop = popoverSize.height / 2 - arrowHeight / 2 + forgiveness;
    }

    // adjustments
    top += adjust[1];
    arrowTop -= adjust[1];

    // max height
    if (VERTICAL) {
      if (direction === 'top') {
        maxHeight = targetBounds.top - top + forgiveness * 2 - arrowSize / 2;
      } else {
        maxHeight = window.innerHeight - (targetBounds.top + targetBounds.height);
      }
    }

    return { arrowTop, top, maxHeight };
  }

  handleOverlayClick(event) {
    event.stopPropagation();
    this.close();
  }

  listenForHover() {
    if (!(this.target instanceof HTMLElement)) {
      return;
    }
    this.listeners = this.addHoverListeners('target', this.target);
    if (!this.curProps.noHover) {
      this.listeners = [...this.listeners, ...this.addHoverListeners('menu', this.popoverRef)];
    }
  }

  removeListenForHover() {
    for (const listener of this.listeners) {
      listener.dispose();
    }
    this.listeners = [];
  }

  addHoverListeners(name, node) {
    if (!(node instanceof HTMLElement)) {
      console.log('no node!', name);
      return;
    }

    const listeners = [];

    const { delay, noHover } = this.curProps;
    const isPopover = name === 'menu';
    const isTarget = name === 'target';
    const setHovered = () => this.hoverStateSet(name, true);
    const setUnhovered = () => this.hoverStateSet(name, false);
    const openIfOver = () => this.isNodeHovered(node, isPopover) && setHovered();
    const closeIfOut = () => {
      if (!this.isNodeHovered(node, isPopover)) {
        setUnhovered();
        if (delayOpenIfHover.cancel) {
          // cancel previous
          delayOpenIfHover.cancel();
        }
      }
    };
    const delayOpenIfHover = isTarget ? (0, _lodash.debounce)(openIfOver, delay) : openIfOver;
    // this will avoid the delay open if its already open
    const onEnter = () => isTarget && this.state.menuHovered ? openIfOver() : delayOpenIfHover();
    const onLeave = (0, _lodash.debounce)(closeIfOut, isTarget ? 80 : 20); // 🐛 target should close slower than menu opens

    // logic for enter/leave
    listeners.push(this.on(node, 'mouseenter', () => {
      onEnter();
      // insanity, but mouseleave is horrible
      if (this.curProps.target) {
        this.setTimeout(onLeave, 150);
      }
    }));

    // if noHover it reduces bugs to just not check hovered state
    const onMouseLeave = noHover ? setUnhovered : onLeave;
    listeners.push(this.on(node, 'mouseleave', onMouseLeave));

    return listeners;
  }

  // hover helpers
  hoverStateSet(name, val) {
    const { openOnHover, onMouseEnter } = this.curProps;
    const setter = () => {
      // this.lastEvent[val ? 'enter' : 'leave'][name] = Date.now()
      this.setState({ [`${name}Hovered`]: val });
    };

    if (val) {
      if (openOnHover) {
        this.setPosition(setter);
      }
      if (onMouseEnter) {
        onMouseEnter();
      }
    } else {
      if (openOnHover) {
        setter();
      }
    }
    return val;
  }

  get showPopover() {
    const { isOpen } = this.state;
    const { openOnHover, open, openOnClick } = this.props;
    const openUndef = typeof open === 'undefined';
    return this.mounted && open || isOpen || openUndef && (openOnHover && this.isHovered || openOnClick && isOpen);
  }

  render(_ref) {
    let {
      adjust,
      animation,
      arrowSize,
      background,
      children,
      closeOnClick,
      delay,
      distance,
      edgePadding,
      forgiveness,
      height,
      left: _left,
      noArrow,
      noHover,
      onClose,
      open,
      openOnClick,
      openOnHover,
      overlay,
      passActive,
      popoverProps,
      shadow,
      showForgiveness,
      style,
      target,
      theme,
      top: _top,
      towards,
      width,
      elevation,
      keepOpenOnClickTarget,
      onDidOpen,
      closeOnEsc
    } = _ref,
        props = _objectWithoutProperties(_ref, ['adjust', 'animation', 'arrowSize', 'background', 'children', 'closeOnClick', 'delay', 'distance', 'edgePadding', 'forgiveness', 'height', 'left', 'noArrow', 'noHover', 'onClose', 'open', 'openOnClick', 'openOnHover', 'overlay', 'passActive', 'popoverProps', 'shadow', 'showForgiveness', 'style', 'target', 'theme', 'top', 'towards', 'width', 'elevation', 'keepOpenOnClickTarget', 'onDidOpen', 'closeOnEsc']);

    const _gloss28 = this.glossElement.bind(this);

    const {
      bottom,
      top,
      left,
      arrowTop,
      arrowLeft,
      isOpen,
      closing,
      maxHeight,
      direction
    } = this.state;
    const { showPopover } = this;

    const controlledTarget = target => {
      const targetProps = {
        ref: this.ref('targetRef').set
      };
      if (passActive) {
        targetProps.active = isOpen && !closing;
      }
      const { acceptsHovered } = target.type;
      if (acceptsHovered) {
        targetProps[acceptsHovered === true ? 'hovered' : acceptsHovered] = showPopover;
      }
      return React.cloneElement(target, targetProps);
    };

    return _gloss28('root', null, React.isValidElement(target) && controlledTarget(target), _gloss28(_portal2.default, null, _gloss28('container', {
      'data-towards': direction,
      $open: showPopover,
      $closing: closing
    }, overlay ? _gloss28('background', {
      ref: this.overlayRef,
      $overlayShown: showPopover && !closing,
      onClick: e => this.handleOverlayClick(e)
    }) : null, _gloss28('popover', _extends({}, popoverProps, {
      $popoverOpen: !closing && showPopover,
      ref: this.ref('popoverRef').set,
      style: _extends({}, style, {
        top: top || 'auto',
        bottom: bottom || 'auto',
        left,
        width,
        // because things that extend downwards wont always fill all the way
        // so arrow will be floating, so lets make it always expand fully down
        // when the popover arrow is at bottom
        height: direction === 'top' ? height || maxHeight : height,
        maxHeight
      })
    }), !noArrow ? _gloss28('arrowContain', {
      css: {
        top: arrowTop,
        marginLeft: arrowLeft,
        zIndex: 100000000000 // above any shadows
      }
    }, _gloss28(_arrow2.default, {
      theme: theme && theme.base,
      background: background !== 'transparent' ? background : null,
      size: arrowSize,
      towards: INVERSE[direction],
      boxShadow: getShadow(shadow, elevation)
    })) : null, _gloss28(_surface2.default, _extends({
      flex: 1
    }, props, {
      elevation: elevation,
      background: background
    }), typeof children === 'function' ? children(showPopover) : children)))));
  }

}, _class2.acceptsHovered = 'open', _class2.defaultProps = {
  edgePadding: 5,
  distance: 10,
  arrowSize: 24,
  forgiveness: 15,
  towards: 'auto',
  animation: 'slide 300ms',
  adjust: [0, 0],
  delay: 16
}, _class2.style = {
  container: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 101,
    pointerEvents: 'none',
    '& > *': {
      pointerEvents: 'none !important'
    }
  },
  content: {
    flex: 1
  },
  open: {
    zIndex: 100000,
    '& > *': {
      pointerEvents: 'all !important'
    }
  },
  closing: {
    zIndex: 100000 - 1
  },
  background: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    background: 'transparent',
    pointerEvents: 'none',
    opacity: 0,
    transition: 'all ease-in 100ms',
    zIndex: -2
  },
  overlayShown: {
    opacity: 1,
    pointerEvents: 'all'
  },
  popover: {
    position: 'absolute',
    pointerEvents: 'none',
    zIndex: -1,
    opacity: 0,
    transition: 'opacity ease-in 60ms, transform ease-out 100ms',
    transform: {
      y: -5
    }
  },
  popoverOpen: {
    opacity: 1,
    pointerEvents: 'auto !important',
    transition: 'transform 0ms',
    transform: {
      y: 0
    }
  },
  item: {
    minWidth: 120
  },
  itemFirstChild: {
    borderTop: 'none'
  },
  arrowContain: {
    position: 'absolute',
    left: '50%'
  }
}, _class2.theme = (props, theme) => {
  return {
    popover: {
      padding: calcForgiveness(props.forgiveness, props.distance),
      margin: -calcForgiveness(props.forgiveness, props.distance),
      background: props.showForgiveness ? [250, 250, 0, 0.2] : 'auto'
    },
    popoverOpen: {
      animation: props.animation === true ? 'bounce 200ms' : props.animation
    },
    background: {
      background: props.overlay === true ? 'rgba(0,0,0,0.2)' : props.overlay
    }
  };
}, _temp2)) || _class) || _class));

Popover.acceptsHovered = 'open';

exports.default = Popover;
//# sourceMappingURL=popover.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/injectTheme.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _react = require('2771');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('2772');

var _getThemeFromContext = require('2773');

var _getThemeFromContext2 = _interopRequireDefault(_getThemeFromContext);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// resolves the active theme object into props.theme as object
// sets props.theme onto context for children
// converts theme="colorname" into color and passes down
exports.default = View => {
  var _class, _temp2;

  return _temp2 = _class = class ThemeInject extends _react2.default.Component {
    constructor(...args) {
      var _temp;

      return _temp = super(...args), this.theme = (0, _getThemeFromContext2.default)('theme'), _temp;
    }

    getChildContext() {
      const context = this.theme();
      if (context) {
        return context;
      } else {
        return {};
      }
    }

    render() {
      const theme = this.theme();
      const themeProps = theme ? {
        theme: theme.uiActiveTheme
      } : null;

      return _react2.default.createElement(View, _extends({}, this.props, themeProps));
    }
  }, _class.contextTypes = {
    uiActiveThemeName: _propTypes.string,
    uiActiveTheme: _propTypes.object,
    uiThemes: _propTypes.object
  }, _class.childContextTypes = {
    uiActiveThemeName: _propTypes.string,
    uiActiveTheme: _propTypes.object,
    uiThemes: _propTypes.object
  }, _temp2;
};
//# sourceMappingURL=injectTheme.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/iconNames.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ['ui-1_analytics-88', 'ui-1_analytics-89', 'ui-1_attach-86', 'ui-1_attach-87', 'ui-1_bell-53', 'ui-1_bell-54', 'ui-1_bell-55', 'ui-1_bold-add', 'ui-1_bold-delete', 'ui-1_bold-remove', 'ui-1_bookmark-add', 'ui-1_bookmark-remove', 'ui-1_calendar-57', 'ui-1_calendar-60', 'ui-1_check-bold', 'ui-1_check-circle-07', 'ui-1_check-circle-08', 'ui-1_check-curve', 'ui-1_check-simple', 'ui-1_check-small', 'ui-1_check-square-09', 'ui-1_check-square-11', 'ui-1_check', 'ui-1_circle-add', 'ui-1_circle-bold-add', 'ui-1_circle-bold-remove', 'ui-1_circle-delete', 'ui-1_circle-remove', 'ui-1_dashboard-29', 'ui-1_dashboard-30', 'ui-1_dashboard-half', 'ui-1_dashboard-level', 'ui-1_database', 'ui-1_drop', 'ui-1_edit-71', 'ui-1_edit-72', 'ui-1_edit-73', 'ui-1_edit-74', 'ui-1_edit-75', 'ui-1_edit-76', 'ui-1_edit-77', 'ui-1_edit-78', 'ui-1_email-83', 'ui-1_email-84', 'ui-1_eye-17', 'ui-1_eye-19', 'ui-1_eye-ban-18', 'ui-1_eye-ban-20', 'ui-1_flame', 'ui-1_home-minimal', 'ui-1_home-51', 'ui-1_home-52', 'ui-1_home-simple', 'ui-1_leaf-80', 'ui-1_leaf-81', 'ui-1_leaf-edit', 'ui-1_lock-circle', 'ui-1_lock-circle-open', 'ui-1_lock-open', 'ui-1_lock', 'ui-1_notification-69', 'ui-1_pencil', 'ui-1_preferences-circle-rotate', 'ui-1_preferences-circle', 'ui-1_preferences-container-circle-rotate', 'ui-1_preferences-container-circle', 'ui-1_preferences-container-rotate', 'ui-1_preferences-container', 'ui-1_preferences-rotate', 'ui-1_preferences', 'ui-1_send', 'ui-1_settings-gear-63', 'ui-1_settings-gear-64', 'ui-1_settings-gear-65', 'ui-1_settings-tool-66', 'ui-1_simple-add', 'ui-1_simple-delete', 'ui-1_simple-remove', 'ui-1_trash-simple', 'ui-1_trash', 'ui-1_ui-03', 'ui-1_ui-04', 'ui-1_zoom', 'ui-1_zoom-bold-in', 'ui-1_zoom-bold-out', 'ui-1_zoom-bold', 'ui-1_zoom-in', 'ui-1_zoom-out', 'ui-2_alert', 'ui-2_alert-', 'ui-2_alert-circle', 'ui-2_alert-circle-', 'ui-2_alert-circle-i', 'ui-2_alert-i', 'ui-2_alert-square', 'ui-2_alert-square-', 'ui-2_alert-square-i', 'ui-2_archive', 'ui-2_ban', 'ui-2_battery-81', 'ui-2_battery-83', 'ui-2_battery-half', 'ui-2_battery-low', 'ui-2_bluetooth', 'ui-2_book', 'ui-2_chart-bar-52', 'ui-2_chart-bar-53', 'ui-2_chat', 'ui-2_chat-content', 'ui-2_chat-round', 'ui-2_chat-round-content', 'ui-2_circle-bold-delete', 'ui-2_cloud-25', 'ui-2_cloud-26', 'ui-2_disk', 'ui-2_enlarge-57', 'ui-2_enlarge-58', 'ui-2_favourite-28', 'ui-2_favourite-31', 'ui-2_filter', 'ui-2_fullsize', 'ui-2_grid-45', 'ui-2_grid-46', 'ui-2_grid-48', 'ui-2_grid-50', 'ui-2_grid-square', 'ui-2_hourglass', 'ui-2_lab', 'ui-2_layers', 'ui-2_like', 'ui-2_link-66', 'ui-2_link-68', 'ui-2_link-69', 'ui-2_link-72', 'ui-2_link-broken-70', 'ui-2_link-broken-73', 'ui-2_menu-34', 'ui-2_menu-35', 'ui-2_menu-bold', 'ui-2_menu-dots', 'ui-2_menu-square', 'ui-2_node', 'ui-2_paragraph', 'ui-2_phone', 'ui-2_share-bold', 'ui-2_share', 'ui-2_small-add', 'ui-2_small-delete', 'ui-2_small-remove', 'ui-2_square-add-08', 'ui-2_square-add-11', 'ui-2_square-delete-10', 'ui-2_square-delete-13', 'ui-2_square-remove-09', 'ui-2_square-remove-12', 'ui-2_target', 'ui-2_tile-55', 'ui-2_tile-56', 'ui-2_time-alarm', 'ui-2_time-clock', 'ui-2_time-countdown', 'ui-2_time', 'ui-2_webpage', 'ui-3_alert', 'ui-3_backward', 'ui-3_bolt', 'ui-3_bullet-list', 'ui-3_calendar-add', 'ui-3_card-add', 'ui-3_card-alert', 'ui-3_chart-bars', 'ui-3_chart', 'ui-3_chat-33', 'ui-3_chat-45', 'ui-3_chat-46', 'ui-3_chat-reply', 'ui-3_check-in', 'ui-3_check-out', 'ui-3_dock-bottom', 'ui-3_dock-left', 'ui-3_dock-right', 'ui-3_dock-top', 'ui-3_filter-check', 'ui-3_filter-remove', 'ui-3_forward', 'ui-3_funnel-39', 'ui-3_funnel-40', 'ui-3_funnel-41', 'ui-3_heart', 'ui-3_infinite', 'ui-3_link', 'ui-3_menu', 'ui-3_menu-left', 'ui-3_menu-right', 'ui-3_metrics', 'ui-3_phone-call-end', 'ui-3_phone-call', 'ui-3_phone', 'ui-3_playlist', 'ui-3_security', 'ui-3_segmentation', 'ui-3_select', 'ui-3_send', 'ui-3_signal', 'ui-3_slide-left', 'ui-3_slide-right', 'ui-3_table-left', 'ui-3_table-right', 'ui-3_tag', 'ui-3_widget', 'ui-e_round-e-alert', 'ui-e_round-e-help', 'ui-e_round-e-info', 'ui-e_square-e-alert', 'ui-e_square-e-help', 'ui-e_square-e-info', 'ui-e_star-half', 'ui-e-2_calendar-add', 'ui-e-2_dock-bottom', 'ui-e-2_dock-left', 'ui-e-2_dock-right', 'ui-e-2_dock-top', 'ui-e-2_heart', 'nature_bee', 'nature_butterfly', 'nature_chicken', 'nature_clover', 'nature_collar', 'nature_cow', 'nature_dog-house', 'nature_dog', 'nature_flower-05', 'nature_flower-06', 'nature_flower-07', 'nature_food-dog', 'nature_food', 'nature_mountain', 'nature_mushroom', 'nature_panda', 'nature_paw', 'nature_pig', 'nature_plant-ground', 'nature_plant-vase', 'nature_rat', 'nature_tree-01', 'nature_tree-02', 'nature_tree-03', 'nature_turtle', 'nature_wood', 'arrows-1_back-78', 'arrows-1_back-80', 'arrows-1_bold-down', 'arrows-1_bold-left', 'arrows-1_bold-right', 'arrows-1_bold-up', 'arrows-1_circle-down-12', 'arrows-1_circle-down-40', 'arrows-1_circle-left-10', 'arrows-1_circle-left-38', 'arrows-1_circle-right-09', 'arrows-1_circle-right-37', 'arrows-1_circle-up-11', 'arrows-1_circle-up-39', 'arrows-1_cloud-download-95', 'arrows-1_cloud-upload-96', 'arrows-1_curved-next', 'arrows-1_curved-previous', 'arrows-1_direction-53', 'arrows-1_direction-56', 'arrows-1_double-left', 'arrows-1_double-right', 'arrows-1_download', 'arrows-1_enlarge-diagonal-43', 'arrows-1_enlarge-diagonal-44', 'arrows-1_enlarge-horizontal', 'arrows-1_enlarge-vertical', 'arrows-1_fullscreen-70', 'arrows-1_fullscreen-71', 'arrows-1_fullscreen-76', 'arrows-1_fullscreen-77', 'arrows-1_fullscreen-double-74', 'arrows-1_fullscreen-double-75', 'arrows-1_fullscreen-split-72', 'arrows-1_fullscreen-split-73', 'arrows-1_log-in', 'arrows-1_log-out', 'arrows-1_loop-82', 'arrows-1_minimal-down', 'arrows-1_minimal-left', 'arrows-1_minimal-right', 'arrows-1_minimal-up', 'arrows-1_redo-79', 'arrows-1_redo-81', 'arrows-1_refresh-68', 'arrows-1_refresh-69', 'arrows-1_round-down', 'arrows-1_round-left', 'arrows-1_round-right', 'arrows-1_round-up', 'arrows-1_share-66', 'arrows-1_share-91', 'arrows-1_share-92', 'arrows-1_shuffle-97', 'arrows-1_shuffle-98', 'arrows-1_simple-down', 'arrows-1_simple-left', 'arrows-1_simple-right', 'arrows-1_simple-up', 'arrows-1_small-triangle-down', 'arrows-1_small-triangle-left', 'arrows-1_small-triangle-right', 'arrows-1_small-triangle-up', 'arrows-1_square-down', 'arrows-1_square-left', 'arrows-1_square-right', 'arrows-1_square-up', 'arrows-1_strong-down', 'arrows-1_strong-left', 'arrows-1_strong-right', 'arrows-1_strong-up', 'arrows-1_tail-down', 'arrows-1_tail-left', 'arrows-1_tail-right', 'arrows-1_tail-triangle-down', 'arrows-1_tail-triangle-left', 'arrows-1_tail-triangle-right', 'arrows-1_tail-triangle-up', 'arrows-1_tail-up', 'arrows-1_trend-down', 'arrows-1_trend-up', 'arrows-1_triangle-down-20', 'arrows-1_triangle-down-65', 'arrows-1_triangle-left-18', 'arrows-1_triangle-left-63', 'arrows-1_triangle-right-17', 'arrows-1_triangle-right-62', 'arrows-1_triangle-up-19', 'arrows-1_triangle-up-64', 'arrows-1_zoom-88', 'arrows-2_block-down', 'arrows-2_block-left', 'arrows-2_block-right', 'arrows-2_block-up', 'arrows-2_conversion', 'arrows-2_corner-down-round', 'arrows-2_corner-down', 'arrows-2_corner-left-down', 'arrows-2_corner-left-round', 'arrows-2_corner-left', 'arrows-2_corner-right-down', 'arrows-2_corner-right-round', 'arrows-2_corner-right', 'arrows-2_corner-up-left', 'arrows-2_corner-up-right', 'arrows-2_corner-up-round', 'arrows-2_corner-up', 'arrows-2_cross-down', 'arrows-2_cross-left', 'arrows-2_cross-right', 'arrows-2_cross-up', 'arrows-2_delete-49', 'arrows-2_delete-50', 'arrows-2_direction', 'arrows-2_dots-download', 'arrows-2_dots-upload', 'arrows-2_eject', 'arrows-2_enlarge-circle', 'arrows-2_file-download-87', 'arrows-2_file-upload-86', 'arrows-2_hit-down', 'arrows-2_hit-left', 'arrows-2_hit-right', 'arrows-2_hit-up', 'arrows-2_log-out', 'arrows-2_move-down-right', 'arrows-2_move-down', 'arrows-2_move-left', 'arrows-2_move-right', 'arrows-2_move-up-left', 'arrows-2_move-up', 'arrows-2_push-next', 'arrows-2_push-previous', 'arrows-2_replay', 'arrows-2_round-left-down', 'arrows-2_round-right-down', 'arrows-2_round-up-left', 'arrows-2_round-up-right', 'arrows-2_select-83', 'arrows-2_select-84', 'arrows-2_skew-down', 'arrows-2_skew-left', 'arrows-2_skew-right', 'arrows-2_skew-up', 'arrows-2_small-left', 'arrows-2_small-right', 'arrows-2_square-download', 'arrows-2_square-upload', 'arrows-2_triangle-down', 'arrows-2_triangle-left', 'arrows-2_triangle-right', 'arrows-2_triangle-up', 'arrows-2_zoom', 'arrows-3_circle-simple-down', 'arrows-3_circle-simple-left', 'arrows-3_circle-simple-right', 'arrows-3_circle-simple-up', 'arrows-3_small-down', 'arrows-3_small-up', 'arrows-3_square-corner-down-left', 'arrows-3_square-corner-down-right', 'arrows-3_square-corner-up-left', 'arrows-3_square-corner-up-right', 'arrows-3_square-down-06', 'arrows-3_square-left-04', 'arrows-3_square-right-03', 'arrows-3_square-simple-down', 'arrows-3_square-simple-left', 'arrows-3_square-simple-right', 'arrows-3_square-simple-up', 'arrows-3_square-up-05', 'arrows-e_archive-e-download', 'arrows-e_archive-e-upload', 'arrows-e_circle-e-down-04', 'arrows-e_circle-e-down-12', 'arrows-e_circle-e-left-02', 'arrows-e_circle-e-left-10', 'arrows-e_circle-e-right-01', 'arrows-e_circle-e-right-09', 'arrows-e_circle-e-up-03', 'arrows-e_circle-e-up-11', 'arrows-e_enlarge-21', 'arrows-e_enlarge-22', 'arrows-e_expand', 'arrows-e_move-bottom-right', 'arrows-e_move-top-left', 'arrows-e_refresh-19', 'arrows-e_refresh-20', 'arrows-e_resize-h', 'arrows-e_resize-v', 'arrows-e_share-26', 'arrows-e_share-27', 'arrows-e_square-e-down', 'arrows-e_square-e-left', 'arrows-e_square-e-right', 'arrows-e_square-e-up', 'arrows-e_zoom-circle', 'arrows-e_zoom-e', 'arrows-e_zoom-square', 'arrows-e_zoom-triangles', 'business_agenda', 'business_atm', 'business_award-48', 'business_award-49', 'business_award-74', 'business_badge', 'business_bank', 'business_board-27', 'business_board-28', 'business_books', 'business_briefcase-24', 'business_briefcase-25', 'business_briefcase-26', 'business_building', 'business_bulb-61', 'business_bulb-62', 'business_bulb-63', 'business_businessman-03', 'business_businessman-04', 'business_calculator', 'business_chair', 'business_chart-bar-32', 'business_chart-growth', 'business_chart-pie-35', 'business_chart-pie-36', 'business_chart', 'business_cheque', 'business_coins', 'business_connect', 'business_contacts', 'business_currency-dollar', 'business_currency-euro', 'business_currency-pound', 'business_currency-yen', 'business_factory', 'business_globe', 'business_goal-64', 'business_goal-65', 'business_hammer', 'business_handout', 'business_hat', 'business_hierarchy-53', 'business_math', 'business_money-11', 'business_money-12', 'business_money-13', 'business_money-bag', 'business_net', 'business_notes', 'business_percentage-39', 'business_pin', 'business_plug', 'business_progress', 'business_safe', 'business_sign', 'business_signature', 'business_stock', 'business_strategy', 'business_tie-01', 'business_tie-02', 'business_wallet-43', 'business_wallet-44', 'clothes_baby', 'clothes_backpack', 'clothes_bag-21', 'clothes_bag-22', 'clothes_belt', 'clothes_boot-woman', 'clothes_boot', 'clothes_bra', 'clothes_button', 'clothes_cap', 'clothes_corset', 'clothes_dress-woman', 'clothes_flip', 'clothes_glasses', 'clothes_hat-top', 'clothes_hat', 'clothes_iron', 'clothes_jeans-41', 'clothes_jeans-pocket', 'clothes_kitchen', 'clothes_long-sleeve', 'clothes_makeup', 'clothes_ring', 'clothes_scarf', 'clothes_shirt-buttons', 'clothes_shirt-neck', 'clothes_shirt', 'clothes_shoe-man', 'clothes_shoe-sport', 'clothes_shoe-woman', 'clothes_skirt', 'clothes_slacks-12', 'clothes_sock', 'clothes_tie-bow', 'clothes_tshirt-53', 'clothes_tshirt-54', 'clothes_underwear-man', 'clothes_underwear', 'clothes_vest', 'clothes_wash', 'design_album', 'design_align-bottom', 'design_align-center-horizontal', 'design_align-center-vertical', 'design_align-left', 'design_align-right', 'design_align-top', 'design_app', 'design_artboard', 'design_blend', 'design_book-bookmark', 'design_book-open', 'design_brush', 'design_bug', 'design_bullet-list-67', 'design_bullet-list-68', 'design_bullet-list-69', 'design_bullet-list-70', 'design_clone', 'design_code', 'design_collection', 'design_command', 'design_compass', 'design_contrast', 'design_copy', 'design_crop', 'design_cursor-48', 'design_cursor-49', 'design_design', 'design_distribute-horizontal', 'design_distribute-vertical', 'design_eraser-32', 'design_eraser-33', 'design_eraser-46', 'design_flip-horizontal', 'design_flip-vertical', 'design_image', 'design_magnet', 'design_marker', 'design_measure-02', 'design_measure-17', 'design_measure-big', 'design_mouse-08', 'design_mouse-09', 'design_mouse-10', 'design_note-code', 'design_paint-16', 'design_paint-37', 'design_paint-38', 'design_paint-bucket-39', 'design_paint-bucket-40', 'design_palette', 'design_pantone', 'design_patch-19', 'design_patch-34', 'design_path-exclude', 'design_path-intersect', 'design_path-minus', 'design_path-unite', 'design_pen-01', 'design_pen-23', 'design_pen-tool', 'design_phone', 'design_scissors', 'design_shape-adjust', 'design_shape-circle', 'design_shape-polygon', 'design_shape-square', 'design_shape-triangle', 'design_shapes', 'design_sharpener', 'design_slice', 'design_spray', 'design_stamp', 'design_tablet', 'design_text', 'design_todo', 'design_usb', 'design_vector', 'design_wand', 'design_webpage', 'design_window-code', 'design_window-paragraph', 'design_window-responsive', 'design-2_3d-28', 'design-2_3d-29', 'design-2_android', 'design-2_angle', 'design-2_animation-14', 'design-2_animation-31', 'design-2_animation-32', 'design-2_apple', 'design-2_bucket', 'design-2_button', 'design-2_canvas', 'design-2_css3', 'design-2_cursor-add', 'design-2_cursor-grab', 'design-2_cursor-load', 'design-2_cursor-menu', 'design-2_cursor-not-allowed', 'design-2_cursor-pointer', 'design-2_cursor-text', 'design-2_divider', 'design-2_filter-organization', 'design-2_form', 'design-2_frame', 'design-2_group', 'design-2_html5', 'design-2_image', 'design-2_layers', 'design-2_layout-11', 'design-2_layout-25', 'design-2_mirror', 'design-2_move-down', 'design-2_move-up', 'design-2_paint-brush', 'design-2_ruler-pencil', 'design-2_scale-down', 'design-2_scale-up', 'design-2_scale', 'design-2_selection', 'design-2_slider', 'design-2_text', 'design-2_transform-origin', 'design-2_transform', 'design-2_ungroup', 'emoticons_angry-10', 'emoticons_angry-44', 'emoticons_big-eyes', 'emoticons_big-smile', 'emoticons_bigmouth', 'emoticons_bomb', 'emoticons_cake', 'emoticons_cry-15', 'emoticons_cute', 'emoticons_devil', 'emoticons_fist', 'emoticons_ghost', 'emoticons_happy-sun', 'emoticons_kiss', 'emoticons_laugh-35', 'emoticons_like-no', 'emoticons_like', 'emoticons_manga-62', 'emoticons_manga-63', 'emoticons_monster', 'emoticons_nerd-22', 'emoticons_poop', 'emoticons_puzzled', 'emoticons_quite-happy', 'emoticons_robot', 'emoticons_sad', 'emoticons_satisfied', 'emoticons_shark', 'emoticons_shy', 'emoticons_skull', 'emoticons_smile', 'emoticons_speechless', 'emoticons_sunglasses-48', 'emoticons_sunglasses-49', 'emoticons_surprise', 'emoticons_virus', 'emoticons_what', 'emoticons-e_angry-e-08', 'emoticons-e_angry-e-17', 'emoticons-e_ghost-e', 'emoticons-e_kiss-e', 'emoticons-e_laugh-e', 'emoticons-e_monster-e', 'emoticons-e_puzzled-e', 'emoticons-e_quite-happy-e', 'emoticons-e_robot-e', 'emoticons-e_sad-e', 'emoticons-e_satisfied-e', 'emoticons-e_shark-e', 'emoticons-e_shy-e', 'emoticons-e_smile-e', 'emoticons-e_speechless-e', 'emoticons-e_surprise-e', 'emoticons-e_what-e', 'envir_bulb-saver', 'envir_bulb', 'envir_car', 'envir_fuel-electric', 'envir_fuel', 'envir_home', 'envir_level', 'envir_panel', 'envir_radiation', 'envir_recycling', 'envir_save-planet', 'envir_waste-danger', 'envir_waste-recycling', 'envir_waste', 'envir_water-hand', 'envir_water-sink', 'envir_water', 'envir_wind', 'files_add', 'files_archive-paper', 'files_paper', 'files_archive-3d-content', 'files_archive-check', 'files_archive-content', 'files_archive', 'files_book-07', 'files_box', 'files_copy', 'files_drawer', 'files_folder-13', 'files_folder-14', 'files_folder-15', 'files_folder-16', 'files_folder-17', 'files_folder-18', 'files_folder-add', 'files_folder-remove', 'files_notebook', 'files_remove', 'files_single-content-02', 'files_single-content-03', 'files_single-copies', 'files_single-copy-04', 'files_single-copy-06', 'files_single-folded-content', 'files_single-folded', 'files_single-paragraph', 'files_single', 'files-e_add', 'files-e_book', 'files-e_folder-02', 'files-e_folder-03', 'files-e_folder-add', 'files-e_folder-remove', 'files-e_remove', 'food_baby', 'food_bacon', 'food_banana', 'food_barbecue-tools', 'food_beer-95', 'food_beer-96', 'food_beverage', 'food_bottle-wine', 'food_bottle', 'food_bowl', 'food_bread', 'food_broccoli', 'food_cake-13', 'food_cake-slice', 'food_candle', 'food_candy', 'food_carrot', 'food_champagne', 'food_cheese-24', 'food_cheese-87', 'food_cheeseburger', 'food_chef-hat', 'food_cherry', 'food_chicken', 'food_chili', 'food_chinese', 'food_chips', 'food_chocolate', 'food_cocktail', 'food_coffe-long', 'food_coffee-long', 'food_coffee', 'food_cookies', 'food_course', 'food_crab', 'food_croissant', 'food_cutlery-75', 'food_cutlery-76', 'food_cutlery-77', 'food_donut', 'food_drink', 'food_egg', 'food_energy-drink', 'food_fish', 'food_glass', 'food_grape', 'food_hob', 'food_hot-dog', 'food_ice-cream-22', 'food_ice-cream-72', 'food_kettle', 'food_knife', 'food_lighter', 'food_matches', 'food_measuring-cup', 'food_microwave', 'food_milk', 'food_moka', 'food_muffin', 'food_mug', 'food_pan', 'food_pizza-slice', 'food_plate', 'food_pot', 'food_recipe-book-46', 'food_recipe-book-47', 'food_rolling-pin', 'food_sausage', 'food_scale', 'food_steak', 'food_strawberry', 'food_sushi', 'food_tacos', 'food_tea', 'food_watermelon', 'food_whisk', 'health_apple', 'health_bag-49', 'health_bag-50', 'health_brain', 'health_dna-27', 'health_dna-38', 'health_flask', 'health_heartbeat-16', 'health_height', 'health_hospital-32', 'health_hospital-33', 'health_hospital-34', 'health_humidity-26', 'health_humidity-52', 'health_molecule-39', 'health_notebook', 'health_patch-46', 'health_pill-42', 'health_pill-43', 'health_pill-container-44', 'health_pill-container-47', 'health_pulse-chart', 'health_pulse-sleep', 'health_pulse', 'health_steps', 'health_syringe', 'health_temperature-23', 'health_temperature-24', 'health_tooth', 'health_weed', 'health_weight', 'health_wheelchair', 'health_woman', 'holidays_bat', 'holidays_bones', 'holidays_boot', 'holidays_candy', 'holidays_cat', 'holidays_cauldron', 'holidays_chimney', 'holidays_cockade', 'holidays_coffin', 'holidays_deer', 'holidays_egg-38', 'holidays_egg-39', 'holidays_ghost', 'holidays_gift', 'holidays_glove', 'holidays_grave', 'holidays_light', 'holidays_message', 'holidays_owl', 'holidays_pumpkin', 'holidays_rabbit', 'holidays_santa-hat', 'holidays_sickle', 'holidays_snow-ball', 'holidays_snowman', 'holidays_soak', 'holidays_spider', 'holidays_tree-ball', 'holidays_tree', 'holidays_vampire', 'holidays_witch-hat', 'holidays_wolf', 'holidays_zombie', 'furniture_air-conditioner', 'furniture_armchair', 'furniture_bed-09', 'furniture_bed-23', 'furniture_cabinet', 'furniture_cactus', 'furniture_chair', 'furniture_coat-hanger', 'furniture_coffee', 'furniture_cradle', 'furniture_curtain', 'furniture_desk', 'furniture_door', 'furniture_drawer', 'furniture_fridge', 'furniture_hanger', 'furniture_iron', 'furniture_lamp-floor', 'furniture_lamp', 'furniture_library', 'furniture_light', 'furniture_mixer', 'furniture_oven', 'furniture_shower', 'furniture_sink-wash', 'furniture_sink', 'furniture_storage-hanger', 'furniture_storage', 'furniture_toilet-paper', 'furniture_toilet', 'furniture_tv', 'furniture_wardrobe', 'furniture_wash', 'loader_circle-04', 'loader_dots-06', 'loader_gear', 'loader_refresh', 'location_appointment', 'location_bookmark-add', 'location_bookmark-remove', 'location_bookmark', 'location_compass-04', 'location_compass-05', 'location_compass-06', 'location_crosshair', 'location_explore', 'location_flag-diagonal-33', 'location_flag-diagonal-34', 'location_flag-points-31', 'location_flag-points-32', 'location_flag-simple', 'location_flag-triangle', 'location_flag', 'location_gps', 'location_map', 'location_marker', 'location_pin-add', 'location_pin-copy', 'location_pin-remove', 'location_pin', 'location_pins', 'location_position-marker', 'location_radar', 'location_treasure-map-40', 'location_world', 'location-e_bookmark-add', 'location-e_bookmark-remove', 'location-e_flag-06', 'location-e_flag-07', 'location-e_gps', 'location-e_pin-add', 'location-e_pin-remove', 'location-e_pin', 'media-1_3d', 'media-1_album', 'media-1_audio-91', 'media-1_audio-92', 'media-1_balance', 'media-1_brightness-46', 'media-1_brightness-47', 'media-1_button-eject', 'media-1_button-next', 'media-1_button-pause', 'media-1_button-play', 'media-1_button-power', 'media-1_button-previous', 'media-1_button-record', 'media-1_button-rewind', 'media-1_button-skip', 'media-1_button-stop', 'media-1_camera-18', 'media-1_camera-19', 'media-1_camera-20', 'media-1_camera-ban-37', 'media-1_camera-compact', 'media-1_camera-square-57', 'media-1_camera-time', 'media-1_countdown-34', 'media-1_edit-color', 'media-1_edit-contrast-42', 'media-1_edit-contrast-43', 'media-1_edit-saturation', 'media-1_flash-21', 'media-1_flash-24', 'media-1_flash-29', 'media-1_focus-32', 'media-1_focus-38', 'media-1_focus-40', 'media-1_focus-circle', 'media-1_frame-12', 'media-1_frame-41', 'media-1_grid', 'media-1_image-01', 'media-1_image-02', 'media-1_image-05', 'media-1_layers', 'media-1_lens-31', 'media-1_lens-56', 'media-1_macro', 'media-1_movie-61', 'media-1_movie-62', 'media-1_night', 'media-1_picture', 'media-1_play-68', 'media-1_play-69', 'media-1_player', 'media-1_polaroid-add', 'media-1_polaroid-delete', 'media-1_polaroid-multiple', 'media-1_polaroid', 'media-1_roll', 'media-1_sd', 'media-1_ticket-75', 'media-1_ticket-76', 'media-1_touch', 'media-1_tripod', 'media-1_video-64', 'media-1_video-65', 'media-1_video-66', 'media-1_video-67', 'media-1_videocamera-71', 'media-1_videocamera-72', 'media-1_volume-93', 'media-1_volume-97', 'media-1_volume-down', 'media-1_volume-up', 'media-2_headphones-mic', 'media-2_headphones', 'media-2_knob', 'media-2_mic', 'media-2_music-album', 'media-2_note-03', 'media-2_note-04', 'media-2_radio', 'media-2_sound-wave', 'media-2_speaker-01', 'media-2_speaker-05', 'media-2_tape', 'objects_alien-29', 'objects_alien-33', 'objects_anchor', 'objects_astronaut', 'objects_axe', 'objects_baby-bottle', 'objects_baby', 'objects_baloon', 'objects_battery', 'objects_bear', 'objects_billiard', 'objects_binocular', 'objects_bow', 'objects_bowling', 'objects_broom', 'objects_cone', 'objects_controller', 'objects_diamond', 'objects_dice', 'objects_globe', 'objects_hut', 'objects_key-25', 'objects_key-26', 'objects_lamp', 'objects_leaf-36', 'objects_light', 'objects_planet', 'objects_puzzle-09', 'objects_puzzle-10', 'objects_shovel', 'objects_skull', 'objects_spaceship', 'objects_support-16', 'objects_support-17', 'objects_umbrella-13', 'objects_umbrella-14', 'objects_wool-ball', 'education_agenda-bookmark', 'education_atom', 'education_award-55', 'education_backpack-57', 'education_backpack-58', 'education_ball-basket', 'education_ball-soccer', 'education_board-51', 'education_book-39', 'education_book-bookmark', 'education_book-open', 'education_books-46', 'education_flask', 'education_glasses', 'education_hat', 'education_language', 'education_molecule', 'education_notepad', 'education_paper-diploma', 'education_paper', 'education_pencil-47', 'education_school', 'shopping_award', 'shopping_bag-09', 'shopping_bag-16', 'shopping_bag-17', 'shopping_bag-20', 'shopping_bag-add-18', 'shopping_bag-add-21', 'shopping_bag-remove-19', 'shopping_bag-remove-22', 'shopping_barcode', 'shopping_bardcode-qr', 'shopping_basket-simple-add', 'shopping_basket-simple-remove', 'shopping_basket-simple', 'shopping_basket', 'shopping_bitcoin', 'shopping_box-ribbon', 'shopping_box', 'shopping_cart-modern-in', 'shopping_cart-modern', 'shopping_cart-simple-add', 'shopping_cart-simple-in', 'shopping_cart-simple-remove', 'shopping_cart-simple', 'shopping_cart', 'shopping_cash-register', 'shopping_chart', 'shopping_credit-card-in', 'shopping_credit-card', 'shopping_delivery-fast', 'shopping_discount', 'shopping_gift', 'shopping_list', 'shopping_newsletter', 'shopping_receipt-list-42', 'shopping_receipt-list-43', 'shopping_receipt', 'shopping_shop', 'shopping_stock', 'shopping_tag-content', 'shopping_tag-cut', 'shopping_tag', 'shopping_wallet', 'social_logo-500px', 'social_logo-angellist', 'social_logo-behance', 'social_logo-blogger', 'social_logo-buffer', 'social_logo-buysellads', 'social_logo-codepen', 'social_logo-creative-market', 'social_logo-crunchbase', 'social_logo-deviantart', 'social_logo-dribbble', 'social_logo-dropbox', 'social_logo-envato', 'social_logo-evernote', 'social_logo-facebook', 'social_logo-fb-simple', 'social_logo-feedly', 'social_logo-flickr', 'social_logo-github', 'social_logo-google-plus', 'social_logo-instagram', 'social_logo-lastfm', 'social_logo-linkedin', 'social_logo-meetup', 'social_logo-myspace', 'social_logo-paypal', 'social_logo-pinterest', 'social_logo-product-hunt', 'social_logo-reddit', 'social_logo-rss', 'social_logo-shopify', 'social_logo-skype', 'social_logo-slack', 'social_logo-soundcloud', 'social_logo-spotify', 'social_logo-trello', 'social_logo-tumblr', 'social_logo-twitter', 'social_logo-vimeo', 'social_logo-vine', 'social_logo-whatsapp', 'social_logo-wordpress', 'social_logo-yelp', 'social_logo-youtube', 'sport_badminton', 'sport_baseball-ball', 'sport_baseball-bat', 'sport_basketball-12', 'sport_boxing', 'sport_cardio', 'sport_cricket', 'sport_crown', 'sport_dart', 'sport_dumbbells', 'sport_fencing', 'sport_fishing', 'sport_flag-finish', 'sport_football-headguard', 'sport_golf', 'sport_helmet', 'sport_hockey', 'sport_kettlebell', 'sport_ping-pong', 'sport_podium', 'sport_rope', 'sport_rugby', 'sport_shaker', 'sport_skateboard', 'sport_snowboard', 'sport_soccer-field', 'sport_steering-wheel', 'sport_supplement', 'sport_surf', 'sport_tactic', 'sport_tennis-ball', 'sport_tennis', 'sport_trophy', 'sport_user-run', 'sport_volleyball', 'sport_whistle', 'tech_cable-49', 'tech_cd-reader', 'tech_computer-monitor', 'tech_computer-old', 'tech_computer', 'tech_controller-modern', 'tech_controller', 'tech_desktop-screen', 'tech_desktop', 'tech_disk-reader', 'tech_disk', 'tech_headphones', 'tech_keyboard-wifi', 'tech_keyboard', 'tech_laptop-camera', 'tech_laptop-front', 'tech_laptop', 'tech_mobile-button', 'tech_mobile-camera', 'tech_mobile-recharger-08', 'tech_mobile-recharger-09', 'tech_mobile-toolbar', 'tech_mobile', 'tech_music', 'tech_navigation', 'tech_player-19', 'tech_player-48', 'tech_print-round', 'tech_print', 'tech_ram', 'tech_remote', 'tech_signal', 'tech_socket', 'tech_sync', 'tech_tablet-button', 'tech_tablet-reader-31', 'tech_tablet-reader-42', 'tech_tablet-toolbar', 'tech_tablet', 'tech_tv-old', 'tech_tv', 'tech_watch-circle', 'tech_watch-time', 'tech_watch', 'tech_webcam-38', 'tech_webcam-39', 'tech_wifi-router', 'tech_wifi', 'text_align-center', 'text_align-justify', 'text_align-left', 'text_align-right', 'text_background', 'text_bold', 'text_capitalize', 'text_caps-small', 'text_color', 'text_edit', 'text_italic', 'text_line-height', 'text_list-bullet', 'text_list-numbers', 'text_margin-left', 'text_margin-right', 'text_quote', 'text_scale-horizontal', 'text_scale-vertical', 'text_size', 'text_strikethrough', 'text_subscript', 'text_superscript', 'text_tracking', 'text_underline', 'gestures_2x-drag-down', 'gestures_2x-drag-up', 'gestures_active-38', 'gestures_active-40', 'gestures_camera', 'gestures_double-tap', 'gestures_drag-21', 'gestures_drag-31', 'gestures_drag-down', 'gestures_drag-left', 'gestures_drag-right', 'gestures_drag-up', 'gestures_grab', 'gestures_pin', 'gestures_pinch', 'gestures_rotate-22', 'gestures_scan', 'gestures_stretch', 'gestures_swipe-bottom', 'gestures_swipe-left', 'gestures_swipe-right', 'gestures_swipe-up', 'gestures_tap-01', 'gestures_tap-02', 'transportation_air-baloon', 'transportation_bike', 'transportation_boat-small-02', 'transportation_boat-small-03', 'transportation_boat', 'transportation_bus-front-10', 'transportation_bus-front-12', 'transportation_car-front', 'transportation_car-taxi', 'transportation_car', 'transportation_helicopter', 'transportation_helmet', 'transportation_light-traffic', 'transportation_moto', 'transportation_plane-17', 'transportation_plane-18', 'transportation_road', 'transportation_skateboard', 'transportation_tractor', 'transportation_train', 'transportation_tram', 'transportation_truck-front', 'transportation_vespa-front', 'travel_backpack', 'travel_bag', 'travel_camping', 'travel_drink', 'travel_explore', 'travel_fire', 'travel_hotel-bell', 'travel_hotel-symbol', 'travel_hotel', 'travel_igloo', 'travel_jellyfish', 'travel_lamp', 'travel_luggage', 'travel_octopus', 'travel_passport', 'travel_pickaxe', 'travel_pool', 'travel_rackets', 'travel_road-sign-left', 'travel_road-sign-right', 'travel_rowing', 'travel_sea-mask', 'travel_shark', 'travel_spa', 'travel_sunglasses', 'travel_surf', 'travel_swimwear', 'travel_swiss-knife', 'travel_trolley', 'travel_world', 'users_add-27', 'users_add-29', 'users_badge-13', 'users_badge-14', 'users_badge-15', 'users_circle-08', 'users_circle-09', 'users_circle-10', 'users_delete-28', 'users_delete-30', 'users_man-20', 'users_multiple-11', 'users_multiple-19', 'users_single-01', 'users_single-02', 'users_single-03', 'users_single-04', 'users_single-05', 'users_single-body', 'users_square-31', 'users_square-32', 'users_square-33', 'users_woman-21', 'weather_celsius', 'weather_cloud-drop', 'weather_cloud-fog-31', 'weather_cloud-fog-32', 'weather_cloud-hail', 'weather_cloud-light', 'weather_cloud-moon', 'weather_cloud-rain', 'weather_cloud-snow-34', 'weather_cloud-snow-42', 'weather_cloud-sun-17', 'weather_compass', 'weather_drop-15', 'weather_drops', 'weather_eclipse', 'weather_fahrenheit', 'weather_fog', 'weather_forecast', 'weather_hurricane-44', 'weather_hurricane-45', 'weather_moon-cloud-drop', 'weather_moon-cloud-fog', 'weather_moon-cloud-hail', 'weather_moon-cloud-light', 'weather_moon-cloud-rain', 'weather_moon-cloud-snow-61', 'weather_moon-cloud-snow-62', 'weather_moon-fog', 'weather_moon-full', 'weather_moon-stars', 'weather_moon', 'weather_rain-hail', 'weather_rain', 'weather_rainbow', 'weather_snow', 'weather_sun-cloud-drop', 'weather_sun-cloud-fog', 'weather_sun-cloud-hail', 'weather_sun-cloud-light', 'weather_sun-cloud-rain', 'weather_sun-cloud-snow-54', 'weather_sun-cloud-snow-55', 'weather_sun-cloud', 'weather_sun-fog-30', 'weather_sun-fog-43', 'weather_wind', 'weather-e_cloud-01', 'weather-e_cloud-02'];
//# sourceMappingURL=iconNames.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/iconsDetailed.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('2770');

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

exports.default = {
  clock: React.createElement("svg", { width: "1.778in", height: "1.778in" }, React.createElement("defs", null, React.createElement("filter", { id: "Filter_0" }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "0", dy: "7" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "0" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", {
    operator: "out",
    "in": "floodOut",
    in2: "blurOut",
    result: "compOut"
  }), React.createElement("feComposite", { operator: "in", "in": "compOut", in2: "SourceAlpha" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.1" })), React.createElement("feBlend", { mode: "multiply", in2: "SourceGraphic" })), React.createElement("filter", {
    filterUnits: "userSpaceOnUse",
    id: "Filter_1",
    x: "49px",
    y: "32px",
    width: "43px",
    height: "53px"
  }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "0", dy: "5" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "0" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", { operator: "atop", "in": "floodOut", in2: "blurOut" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.1" })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", { "in": "SourceGraphic" }))), React.createElement("filter", {
    filterUnits: "userSpaceOnUse",
    id: "Filter_2",
    x: "49px",
    y: "49px",
    width: "53px",
    height: "57px"
  }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "0", dy: "5" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "0" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", { operator: "atop", "in": "floodOut", in2: "blurOut" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.1" })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", { "in": "SourceGraphic" }))), React.createElement("filter", {
    filterUnits: "userSpaceOnUse",
    id: "Filter_3",
    x: "15px",
    y: "57px",
    width: "92px",
    height: "16px"
  }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "0", dy: "2" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "0" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", { operator: "atop", "in": "floodOut", in2: "blurOut" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.1" })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", { "in": "SourceGraphic" })))), React.createElement("g", { filter: "url(#Filter_0)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(115, 186, 93)",
    d: "M63.922,8.000 C94.850,8.000 119.922,33.072 119.922,64.000 C119.922,94.928 94.850,120.000 63.922,120.000 C32.994,120.000 7.922,94.928 7.922,64.000 C7.922,33.072 32.994,8.000 63.922,8.000 Z"
  })), React.createElement("g", { filter: "url(#Filter_1)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(255, 255, 255)",
    d: "M91.512,36.513 L54.006,79.435 L49.488,75.487 L86.994,32.565 L91.512,36.513 Z"
  })), React.createElement("g", { filter: "url(#Filter_2)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(255, 255, 255)",
    d: "M94.487,89.168 L101.680,96.116 L97.512,100.431 L78.939,82.493 L49.320,53.885 L53.488,49.569 L60.681,56.516 L60.681,56.516 L83.107,78.177 L94.487,89.168 L94.487,89.168 Z"
  })), React.createElement("g", { filter: "url(#Filter_3)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(250, 86, 90)",
    d: "M79.000,65.000 L65.924,65.000 C65.555,65.736 64.802,66.247 63.922,66.247 C63.042,66.247 62.289,65.736 61.920,65.000 L43.000,65.000 L28.004,65.000 C27.525,67.931 24.989,70.171 21.922,70.171 C18.514,70.171 15.751,67.408 15.751,64.000 C15.751,60.592 18.514,57.829 21.922,57.829 C24.989,57.829 27.525,60.069 28.004,63.000 L43.000,63.000 L61.920,63.000 C62.289,62.264 63.042,61.753 63.922,61.753 C64.802,61.753 65.555,62.264 65.924,63.000 L79.000,63.000 L79.000,65.000 Z"
  })), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(255, 255, 255)",
    d: "M64.000,128.000 C28.654,128.000 0.000,99.346 0.000,64.000 C0.000,28.654 28.654,0.000 64.000,0.000 C99.346,0.000 128.000,28.654 128.000,64.000 C128.000,99.346 99.346,128.000 64.000,128.000 ZM63.922,9.952 C34.072,9.952 9.874,34.150 9.874,64.000 C9.874,93.850 34.072,118.048 63.922,118.048 C93.772,118.048 117.970,93.850 117.970,64.000 C117.970,34.150 93.772,9.952 63.922,9.952 Z"
  })),

  mail: React.createElement("svg", { width: "1.931in", height: "1.861in" }, React.createElement("defs", null, React.createElement("filter", { id: "Filter_0" }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "1.439", dy: "-1.389" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "5.477" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", {
    operator: "out",
    "in": "floodOut",
    in2: "blurOut",
    result: "compOut"
  }), React.createElement("feComposite", { operator: "in", "in": "compOut", in2: "SourceAlpha" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.05" })), React.createElement("feBlend", { mode: "normal", in2: "SourceGraphic" })), React.createElement("filter", { id: "Filter_1" }, React.createElement("feFlood", {
    "flood-color": "rgb(163, 0, 4)",
    "flood-opacity": "0.1",
    result: "floodOut"
  }), React.createElement("feComposite", {
    operator: "atop",
    "in": "floodOut",
    in2: "SourceGraphic",
    result: "compOut"
  }), React.createElement("feBlend", { mode: "normal", "in": "compOut", in2: "SourceGraphic" }))), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(201, 69, 72)",
    d: "M133.000,106.000 L5.000,106.000 L5.000,46.000 L5.082,46.000 C5.033,45.600 5.000,45.195 5.000,44.781 L5.000,42.781 L68.922,0.281 L133.000,42.781 L133.000,44.781 C133.000,45.195 132.967,45.600 132.918,46.000 L133.000,46.000 L133.000,106.000 Z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(255, 255, 255)",
    d: "M18.000,0.000 L120.000,0.000 C122.761,0.000 125.000,2.239 125.000,5.000 L125.000,123.000 C125.000,125.761 122.761,128.000 120.000,128.000 L18.000,128.000 C15.239,128.000 13.000,125.761 13.000,123.000 L13.000,5.000 C13.000,2.239 15.239,0.000 18.000,0.000 Z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(227, 241, 252)",
    d: "M30.500,18.000 L67.500,18.000 C68.881,18.000 70.000,19.119 70.000,20.500 C70.000,21.881 68.881,23.000 67.500,23.000 L30.500,23.000 C29.119,23.000 28.000,21.881 28.000,20.500 C28.000,19.119 29.119,18.000 30.500,18.000 Z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(227, 241, 252)",
    d: "M108.500,61.000 L30.500,61.000 C29.119,61.000 28.000,59.881 28.000,58.500 C28.000,57.119 29.119,56.000 30.500,56.000 L108.500,56.000 C109.881,56.000 111.000,57.119 111.000,58.500 C111.000,59.881 109.881,61.000 108.500,61.000 ZM108.500,51.000 L30.500,51.000 C29.119,51.000 28.000,49.881 28.000,48.500 C28.000,47.119 29.119,46.000 30.500,46.000 L108.500,46.000 C109.881,46.000 111.000,47.119 111.000,48.500 C111.000,49.881 109.881,51.000 108.500,51.000 ZM108.500,41.000 L30.500,41.000 C29.119,41.000 28.000,39.881 28.000,38.500 C28.000,37.119 29.119,36.000 30.500,36.000 L108.500,36.000 C109.881,36.000 111.000,37.119 111.000,38.500 C111.000,39.881 109.881,41.000 108.500,41.000 ZM30.500,66.000 L108.500,66.000 C109.881,66.000 111.000,67.119 111.000,68.500 C111.000,69.881 109.881,71.000 108.500,71.000 L30.500,71.000 C29.119,71.000 28.000,69.881 28.000,68.500 C28.000,67.119 29.119,66.000 30.500,66.000 Z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(250, 86, 90)",
    d: "M123.000,128.000 L15.000,128.000 C9.477,128.000 5.000,123.523 5.000,118.000 L5.000,112.000 L5.000,47.000 L5.000,43.000 L68.922,85.500 L133.000,43.000 L133.000,47.000 L133.000,112.000 L133.000,118.000 C133.000,123.523 128.523,128.000 123.000,128.000 Z"
  }), React.createElement("g", { filter: "url(#Filter_0)" }, React.createElement("g", { filter: "url(#Filter_1)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(237, 76, 80)",
    d: "M5.000,43.000 L133.000,128.000 L133.000,43.000 L5.000,43.000 Z"
  })))),

  calendar: React.createElement("svg", { width: "1.778in", height: "1.542in" }, React.createElement("defs", null, React.createElement("filter", {
    filterUnits: "userSpaceOnUse",
    id: "Filter_0",
    x: "0px",
    y: "65px",
    width: "3px",
    height: "10px"
  }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "0", dy: "3" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "0" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", { operator: "atop", "in": "floodOut", in2: "blurOut" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.1" })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", { "in": "SourceGraphic" }))), React.createElement("filter", {
    filterUnits: "userSpaceOnUse",
    id: "Filter_1",
    x: "125px",
    y: "65px",
    width: "3px",
    height: "10px"
  }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "0", dy: "3" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "0" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", { operator: "atop", "in": "floodOut", in2: "blurOut" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.1" })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", { "in": "SourceGraphic" }))), React.createElement("linearGradient", { id: "PSgrad_0", x1: "0%", x2: "0%", y1: "100%", y2: "0%" }, React.createElement("stop", { offset: "0%", "stop-color": "rgb(69,78,95)", "stop-opacity": "0.1" }), React.createElement("stop", { offset: "100%", "stop-color": "rgb(77,87,108)", "stop-opacity": "0" })), React.createElement("filter", {
    filterUnits: "userSpaceOnUse",
    id: "Filter_2",
    x: "0px",
    y: "0px",
    width: "128px",
    height: "30px"
  }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "0", dy: "3" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "0" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", { operator: "atop", "in": "floodOut", in2: "blurOut" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.1" })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", { "in": "SourceGraphic" })))), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(255, 255, 255)",
    d: "M118.000,111.000 L10.000,111.000 C4.477,111.000 0.000,106.523 0.000,101.000 L0.000,97.000 L0.000,31.000 L0.000,27.000 L128.000,27.000 L128.000,31.000 L128.000,97.000 L128.000,101.000 C128.000,106.523 123.523,111.000 118.000,111.000 Z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(77, 87, 108)",
    d: "M84.989,54.449 C83.846,52.867 82.115,52.076 79.795,52.076 C77.140,52.076 75.031,53.302 73.467,55.754 C71.902,58.206 71.032,61.717 70.856,66.288 C71.946,64.688 73.317,63.493 74.970,62.702 C76.481,61.999 78.169,61.647 80.032,61.647 C83.196,61.647 85.956,62.658 88.312,64.679 C90.667,66.701 91.845,69.715 91.845,73.723 C91.845,77.151 90.728,80.188 88.496,82.833 C86.264,85.479 83.082,86.801 78.951,86.801 C75.418,86.801 72.368,85.461 69.802,82.780 C67.235,80.100 65.952,75.587 65.952,69.241 C65.952,64.547 66.523,60.566 67.666,57.296 C69.863,51.039 73.880,47.910 79.716,47.910 C83.935,47.910 86.875,49.004 88.536,51.192 C90.197,53.381 91.027,55.635 91.027,57.956 L86.334,57.956 C86.053,56.462 85.604,55.292 84.989,54.449 ZM73.559,80.144 C74.957,81.770 76.895,82.583 79.373,82.583 C81.869,82.583 83.737,81.743 84.976,80.064 C86.215,78.386 86.835,76.404 86.835,74.119 C86.835,72.185 86.281,70.344 85.174,68.595 C84.066,66.846 82.053,65.971 79.136,65.971 C77.096,65.971 75.308,66.648 73.770,68.001 C72.232,69.355 71.463,71.394 71.463,74.119 C71.463,76.509 72.162,78.518 73.559,80.144 ZM51.872,71.535 L48.260,73.539 C46.537,74.488 45.183,75.393 44.199,76.254 C42.441,77.784 41.334,79.480 40.877,81.343 L61.496,81.343 L61.496,85.826 L35.577,85.826 C35.753,82.574 36.425,79.744 37.594,77.335 C38.763,74.927 41.044,72.739 44.437,70.770 L49.499,67.843 C51.767,66.525 53.357,65.399 54.271,64.465 C55.713,63.004 56.434,61.331 56.434,59.446 C56.434,57.244 55.774,55.496 54.456,54.202 C53.138,52.907 51.380,52.260 49.183,52.260 C45.930,52.260 43.681,53.495 42.433,55.962 C41.764,57.285 41.395,59.118 41.325,61.462 L36.500,61.462 C36.553,58.176 37.159,55.495 38.319,53.420 C40.376,49.764 44.006,47.936 49.209,47.936 C53.533,47.936 56.693,49.105 58.688,51.443 C60.683,53.781 61.681,56.383 61.681,59.248 C61.681,62.271 60.617,64.855 58.490,67.000 C57.260,68.248 55.053,69.759 51.872,71.535 Z"
  }), React.createElement("g", { filter: "url(#Filter_0)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(192, 200, 208)",
    d: "M0.000,65.000 L3.000,65.000 L3.000,72.000 L0.000,72.000 L0.000,65.000 Z"
  })), React.createElement("g", { filter: "url(#Filter_1)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(193, 200, 208)",
    d: "M125.000,65.000 L128.000,65.000 L128.000,72.000 L125.000,72.000 L125.000,65.000 Z"
  })), React.createElement("path", {
    fillRule: "evenodd",
    "fill-opacity": "0",
    fill: "rgb(255, 255, 255)",
    d: "M0.000,39.000 L128.000,39.000 L128.000,69.000 L0.000,69.000 L0.000,39.000 Z"
  }), React.createElement("path", {
    fill: "url(#PSgrad_0)",
    d: "M0.000,39.000 L128.000,39.000 L128.000,69.000 L0.000,69.000 L0.000,39.000 Z"
  }), React.createElement("g", { filter: "url(#Filter_2)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(250, 86, 90)",
    d: "M0.000,27.000 L0.000,10.000 C0.000,4.477 4.477,0.000 10.000,0.000 L118.000,0.000 C123.523,0.000 128.000,4.477 128.000,10.000 L128.000,27.000 L0.000,27.000 Z"
  })), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(255, 255, 255)",
    d: "M85.880,18.233 C85.422,19.544 85.059,20.358 84.792,20.673 C84.526,20.989 83.992,21.146 83.191,21.146 C83.030,21.146 82.901,21.145 82.804,21.143 C82.706,21.141 82.560,21.134 82.365,21.121 L82.365,19.674 L82.594,19.686 C82.771,19.695 82.940,19.688 83.101,19.667 C83.262,19.646 83.398,19.597 83.508,19.521 C83.613,19.449 83.712,19.299 83.803,19.071 C83.894,18.842 83.933,18.702 83.920,18.652 L81.378,11.428 L83.390,11.428 L84.901,16.532 L86.329,11.428 L88.252,11.428 L85.880,18.233 ZM78.817,17.953 C78.795,17.831 78.779,17.691 78.766,17.534 C78.515,17.805 78.225,18.036 77.898,18.226 C77.506,18.451 77.063,18.563 76.569,18.563 C75.939,18.563 75.419,18.384 75.008,18.026 C74.598,17.669 74.392,17.162 74.392,16.506 C74.392,15.656 74.723,15.040 75.383,14.659 C75.746,14.452 76.279,14.303 76.982,14.215 L77.602,14.138 C77.939,14.096 78.180,14.043 78.325,13.980 C78.585,13.870 78.715,13.698 78.715,13.466 C78.715,13.182 78.615,12.986 78.416,12.878 C78.216,12.771 77.924,12.717 77.538,12.717 C77.104,12.717 76.798,12.822 76.617,13.034 C76.489,13.191 76.403,13.402 76.360,13.669 L74.614,13.669 C74.653,13.064 74.823,12.566 75.125,12.177 C75.605,11.568 76.429,11.263 77.598,11.263 C78.359,11.263 79.035,11.413 79.625,11.714 C80.216,12.014 80.511,12.581 80.511,13.415 L80.511,16.589 C80.511,16.809 80.516,17.075 80.524,17.388 C80.537,17.625 80.573,17.786 80.632,17.871 C80.691,17.956 80.780,18.025 80.899,18.080 L80.899,18.347 L78.931,18.347 C78.876,18.207 78.838,18.076 78.817,17.953 ZM78.709,14.983 C78.593,15.055 78.476,15.113 78.358,15.157 C78.240,15.202 78.078,15.243 77.872,15.281 L77.460,15.357 C77.074,15.425 76.797,15.507 76.629,15.605 C76.344,15.770 76.201,16.026 76.201,16.373 C76.201,16.682 76.288,16.905 76.462,17.042 C76.636,17.180 76.848,17.249 77.097,17.249 C77.493,17.249 77.857,17.135 78.190,16.906 C78.523,16.677 78.696,16.261 78.709,15.656 L78.709,14.983 ZM71.460,17.388 C71.202,17.799 70.907,18.097 70.577,18.283 C70.247,18.470 69.837,18.563 69.346,18.563 C68.538,18.563 67.857,18.236 67.305,17.582 C66.753,16.928 66.477,16.089 66.477,15.065 C66.477,13.885 66.749,12.956 67.292,12.279 C67.836,11.602 68.563,11.263 69.473,11.263 C69.892,11.263 70.264,11.355 70.590,11.539 C70.916,11.723 71.180,11.978 71.384,12.304 L71.384,9.003 L73.218,9.003 L73.218,18.347 L71.460,18.347 L71.460,17.388 ZM70.793,13.174 C70.531,12.954 70.226,12.844 69.879,12.844 C69.350,12.844 68.962,13.043 68.714,13.443 C68.467,13.843 68.343,14.339 68.343,14.932 C68.343,15.571 68.469,16.082 68.721,16.465 C68.972,16.848 69.354,17.039 69.866,17.039 C70.378,17.039 70.768,16.849 71.034,16.468 C71.301,16.087 71.434,15.594 71.434,14.989 C71.434,14.143 71.221,13.538 70.793,13.174 ZM63.386,14.138 C63.386,13.775 63.337,13.495 63.241,13.301 C63.064,12.945 62.728,12.767 62.232,12.767 C61.623,12.767 61.205,13.028 60.978,13.548 C60.861,13.823 60.802,14.174 60.802,14.602 L60.802,18.347 L58.993,18.347 L58.993,11.441 L60.745,11.441 L60.745,12.450 C60.977,12.094 61.196,11.839 61.402,11.682 C61.773,11.403 62.243,11.263 62.812,11.263 C63.524,11.263 64.106,11.450 64.560,11.825 C65.012,12.199 65.239,12.820 65.239,13.688 L65.239,18.347 L63.386,18.347 L63.386,14.138 ZM54.150,18.582 C52.960,18.582 52.074,18.221 51.490,17.501 C50.906,16.780 50.614,15.912 50.614,14.897 C50.614,13.899 50.906,13.035 51.490,12.303 C52.074,11.572 52.960,11.206 54.150,11.206 C55.339,11.206 56.225,11.572 56.809,12.303 C57.393,13.035 57.685,13.899 57.685,14.897 C57.685,15.912 57.393,16.780 56.809,17.501 C56.225,18.221 55.339,18.582 54.150,18.582 ZM55.362,13.297 C55.079,12.923 54.672,12.736 54.143,12.736 C53.614,12.736 53.207,12.923 52.921,13.297 C52.636,13.670 52.493,14.204 52.493,14.897 C52.493,15.590 52.636,16.125 52.921,16.501 C53.207,16.877 53.614,17.065 54.143,17.065 C54.672,17.065 55.079,16.877 55.362,16.501 C55.646,16.125 55.787,15.590 55.787,14.897 C55.787,14.204 55.646,13.670 55.362,13.297 ZM47.554,12.018 C47.554,11.836 47.557,11.581 47.561,11.253 C47.565,10.926 47.567,10.673 47.567,10.495 L45.794,18.347 L43.894,18.347 L42.134,10.495 C42.134,10.673 42.136,10.926 42.140,11.253 C42.144,11.581 42.146,11.836 42.146,12.018 L42.146,18.347 L40.324,18.347 L40.324,8.990 L43.169,8.990 L44.873,16.347 L46.563,8.990 L49.376,8.990 L49.376,18.347 L47.554,18.347 L47.554,12.018 Z"
  })),

  paper: React.createElement("svg", { width: "1.347in", height: "1.792in" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(45, 203, 115)",
    d: "M5.000,1.000 L57.392,1.000 L96.000,39.608 L96.000,124.000 C96.000,126.761 93.761,129.000 91.000,129.000 L5.000,129.000 C2.239,129.000 0.000,126.761 0.000,124.000 L0.000,6.000 C0.000,3.239 2.239,1.000 5.000,1.000 Z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(255, 255, 255)",
    d: "M68.500,61.000 L51.500,61.000 L31.500,61.000 L14.500,61.000 C13.119,61.000 12.000,59.881 12.000,58.500 C12.000,57.119 13.119,56.000 14.500,56.000 L31.500,56.000 L51.500,56.000 L68.500,56.000 C69.881,56.000 71.000,57.119 71.000,58.500 C71.000,59.881 69.881,61.000 68.500,61.000 ZM51.500,49.000 L14.500,49.000 C13.119,49.000 12.000,47.881 12.000,46.500 C12.000,45.119 13.119,44.000 14.500,44.000 L51.500,44.000 C52.881,44.000 54.000,45.119 54.000,46.500 C54.000,47.881 52.881,49.000 51.500,49.000 ZM14.500,69.000 L51.500,69.000 C52.881,69.000 54.000,70.119 54.000,71.500 C54.000,72.881 52.881,74.000 51.500,74.000 L14.500,74.000 C13.119,74.000 12.000,72.881 12.000,71.500 C12.000,70.119 13.119,69.000 14.500,69.000 ZM14.500,82.000 L27.500,82.000 L51.500,82.000 L64.500,82.000 C65.881,82.000 67.000,83.119 67.000,84.500 C67.000,85.881 65.881,87.000 64.500,87.000 L51.500,87.000 L27.500,87.000 L14.500,87.000 C13.119,87.000 12.000,85.881 12.000,84.500 C12.000,83.119 13.119,82.000 14.500,82.000 ZM14.500,106.000 L51.500,106.000 C52.881,106.000 54.000,107.119 54.000,108.500 C54.000,109.881 52.881,111.000 51.500,111.000 L14.500,111.000 C13.119,111.000 12.000,109.881 12.000,108.500 C12.000,107.119 13.119,106.000 14.500,106.000 Z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(36, 189, 104)",
    d: "M96.000,40.000 L96.000,75.993 L60.007,40.000 L96.000,40.000 Z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(92, 225, 151)",
    d: "M96.042,39.540 L95.088,39.540 L95.555,40.006 L61.947,40.006 C59.186,40.006 56.947,37.768 56.947,35.006 L56.947,34.434 L56.947,1.399 L56.947,0.827 L57.434,1.313 L57.434,0.932 L96.042,39.540 Z"
  })),

  picture: React.createElement("svg", { width: "3.889in", height: "3.528in" }, React.createElement("defs", null, React.createElement("filter", { id: "Filter_0" }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "0", dy: "5" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "0" }), React.createElement("feFlood", { "flood-color": "rgb(0, 54, 190)", result: "floodOut" }), React.createElement("feComposite", {
    operator: "out",
    "in": "floodOut",
    in2: "blurOut",
    result: "compOut"
  }), React.createElement("feComposite", { operator: "in", "in": "compOut", in2: "SourceAlpha" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.13" })), React.createElement("feBlend", { mode: "normal", in2: "SourceGraphic" })), React.createElement("filter", {
    filterUnits: "userSpaceOnUse",
    id: "Filter_1",
    x: "0px",
    y: "3px",
    width: "251px",
    height: "251px"
  }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "5", dy: "0" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "6.782" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", { operator: "atop", "in": "floodOut", in2: "blurOut" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.75" })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", { "in": "SourceGraphic" }))), React.createElement("filter", {
    filterUnits: "userSpaceOnUse",
    id: "Filter_2",
    x: "63px",
    y: "0px",
    width: "217px",
    height: "217px"
  }, React.createElement("feOffset", { "in": "SourceAlpha", dx: "5", dy: "0" }), React.createElement("feGaussianBlur", { result: "blurOut", stdDeviation: "6.782" }), React.createElement("feFlood", { "flood-color": "rgb(2, 3, 3)", result: "floodOut" }), React.createElement("feComposite", { operator: "atop", "in": "floodOut", in2: "blurOut" }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", { type: "linear", slope: "0.75" })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", { "in": "SourceGraphic" })))), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(255, 255, 255)",
    d: "M72.000,8.000 L160.000,8.000 C171.046,8.000 180.000,16.954 180.000,28.000 L180.000,116.000 C180.000,127.046 171.046,136.000 160.000,136.000 L72.000,136.000 C60.954,136.000 52.000,127.046 52.000,116.000 L52.000,28.000 C52.000,16.954 60.954,8.000 72.000,8.000 Z"
  }), React.createElement("g", { filter: "url(#Filter_0)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(156, 190, 247)",
    d: "M76.000,18.000 L156.000,18.000 C163.732,18.000 170.000,24.268 170.000,32.000 L170.000,112.000 C170.000,119.732 163.732,126.000 156.000,126.000 L76.000,126.000 C68.268,126.000 62.000,119.732 62.000,112.000 L62.000,32.000 C62.000,24.268 68.268,18.000 76.000,18.000 Z"
  })), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(255, 255, 255)",
    d: "M95.000,48.880 C103.351,48.880 110.120,55.649 110.120,64.000 C110.120,72.351 103.351,79.120 95.000,79.120 C86.649,79.120 79.880,72.351 79.880,64.000 C79.880,55.649 86.649,48.880 95.000,48.880 Z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(62, 97, 133)",
    d: "M18.775,101.544 L55.544,64.775 L143.225,152.456 L106.456,189.225 L18.775,101.544 Z"
  }), React.createElement("g", { filter: "url(#Filter_1)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(62, 97, 133)",
    d: "M120.000,48.804 L199.196,128.000 L120.000,207.196 L40.804,128.000 L120.000,48.804 Z"
  })), React.createElement("g", { filter: "url(#Filter_2)" }, React.createElement("path", {
    fillRule: "evenodd",
    fill: "rgb(62, 97, 133)",
    d: "M228.225,82.544 L191.456,45.775 L103.775,133.456 L140.544,170.225 L228.225,82.544 Z"
  }))),

  drive: React.createElement("svg", { viewBox: "0 0 139 120.4" }, React.createElement("radialGradient", {
    id: "a",
    cx: "-254.81979",
    cy: "705.83588",
    gradientTransform: "matrix(2.827 1.6322 -1.6322 2.827 2092.1199 -1494.5786)",
    gradientUnits: "userSpaceOnUse",
    r: "82.978401"
  }, React.createElement("stop", { offset: "0", "stop-color": "#4387fd" }), React.createElement("stop", { offset: ".65", "stop-color": "#3078f0" }), React.createElement("stop", { offset: ".9099", "stop-color": "#2b72ea" }), React.createElement("stop", { offset: "1", "stop-color": "#286ee6" })), React.createElement("radialGradient", {
    id: "b",
    cx: "-254.8174",
    cy: "705.83691",
    gradientTransform: "matrix(2.827 1.6322 -1.6322 2.827 2092.1199 -1494.5786)",
    gradientUnits: "userSpaceOnUse",
    r: "82.973"
  }, React.createElement("stop", { offset: "0", "stop-color": "#ffd24d" }), React.createElement("stop", { offset: "1", "stop-color": "#f6c338" })), React.createElement("path", { d: "m24.2 120.4-24.2-41.9 45.3-78.5 24.2 41.9z", fill: "#0da960" }), React.createElement("path", { d: "m24.2 120.4 24.2-41.9h90.6l-24.2 41.9z", fill: "url(#a)" }), React.createElement("path", { d: "m139 78.5h-48.4l-45.3-78.5h48.4z", fill: "url(#b)" }), React.createElement("path", { d: "m69.5 78.5h-21.1l10.5-18.3-34.7 60.2z", fill: "#2d6fdd" }), React.createElement("path", { d: "m90.6 78.5h48.4l-58.9-18.3z", fill: "#e5b93c" }), React.createElement("path", { d: "m58.9 60.2 10.6-18.3-24.2-41.9z", fill: "#0c9b57" })),

  gmail: React.createElement("svg", {
    width: "256px",
    height: "194px",
    viewBox: "0 0 256 194",
    version: "1.1",
    preserveAspectRatio: "xMidYMid"
  }, React.createElement("defs", null, React.createElement("linearGradient", {
    x1: "0.00388991071%",
    y1: "49.997619%",
    x2: "100.032232%",
    y2: "49.997619%",
    id: "linearGradient-1"
  }, React.createElement("stop", { "stop-color": "#000000", "stop-opacity": "0.1", offset: "0%" }), React.createElement("stop", { "stop-color": "#000000", "stop-opacity": "0.2", offset: "100%" }))), React.createElement("g", null, React.createElement("path", {
    d: "M238.833923,193.595007 L16.1542195,193.595007 C7.51970044,193.595007 0.248526454,186.551057 0.248526454,177.689314 L0.248526454,16.8145898 C0.248526454,8.18007073 7.29247625,0.908896748 16.1542195,0.908896748 L238.833923,0.908896748 C247.468442,0.908896748 254.739616,7.95284654 254.739616,16.8145898 L254.739616,177.689314 C254.739616,186.551057 247.695666,193.595007 238.833923,193.595007 L238.833923,193.595007 Z",
    fill: "#E3E3E3"
  }), React.createElement("path", {
    d: "M32.0599126,193.595007 L127.266847,117.020456 L127.94852,112.930421 L29.7876708,42.2636988 L29.5604466,190.186644 L32.0599126,193.595007 Z",
    opacity: "0.1",
    fill: "#231F20"
  }), React.createElement("path", {
    d: "M16.1542195,193.595007 C7.29247625,193.595007 0.248526454,186.551057 0.248526454,177.689314 L0.248526454,16.5873656 C0.248526454,7.72562236 7.29247625,6.13505305 16.1542195,6.13505305 C25.0159628,6.13505305 32.0599126,7.95284654 32.0599126,16.5873656 L32.0599126,193.595007 L16.1542195,193.595007 L16.1542195,193.595007 Z",
    fill: "#D54B3D"
  }), React.createElement("path", {
    d: "M16.1542195,8.40729492 C27.5154289,8.40729492 29.7876708,11.8156577 29.7876708,16.5873656 L29.7876708,191.322765 L16.1542195,191.322765 C8.65582137,191.322765 2.52076832,185.187712 2.52076832,177.689314 L2.52076832,16.5873656 C2.52076832,11.5884335 4.79301019,8.40729492 16.1542195,8.40729492 L16.1542195,8.40729492 Z M16.1542195,6.13505305 C7.29247625,6.13505305 0.248526454,7.95284654 0.248526454,16.5873656 L0.248526454,177.689314 C0.248526454,186.551057 7.29247625,193.595007 16.1542195,193.595007 L32.0599126,193.595007 L32.0599126,16.5873656 C32.0599126,7.72562236 25.0159628,6.13505305 16.1542195,6.13505305 L16.1542195,6.13505305 L16.1542195,6.13505305 Z",
    fill: "#D72B27"
  }), React.createElement("path", {
    d: "M238.833923,193.595007 L222.92823,193.595007 L222.92823,16.1329173 C222.92823,7.27117398 229.972179,6.13505305 238.833923,6.13505305 C247.695666,6.13505305 254.739616,7.27117398 254.739616,16.1329173 L254.739616,177.916538 C254.739616,186.551057 247.695666,193.595007 238.833923,193.595007 L238.833923,193.595007 Z",
    fill: "#D54B3D"
  }), React.createElement("path", {
    d: "M238.833923,8.40729492 C249.059011,8.40729492 252.467374,10.4523126 252.467374,16.1329173 L252.467374,177.916538 C252.467374,185.414937 246.332321,191.54999 238.833923,191.54999 L225.200472,191.54999 L225.200472,16.1329173 C225.200472,10.2250884 228.608834,8.40729492 238.833923,8.40729492 L238.833923,8.40729492 Z M238.833923,6.13505305 C229.972179,6.13505305 222.92823,7.27117398 222.92823,16.1329173 L222.92823,193.822231 L238.833923,193.822231 C247.695666,193.822231 254.739616,186.778282 254.739616,177.916538 L254.739616,16.1329173 C254.739616,7.27117398 247.695666,6.13505305 238.833923,6.13505305 L238.833923,6.13505305 L238.833923,6.13505305 Z",
    fill: "#D72B27"
  }), React.createElement("path", {
    d: "M170.666667,193.595007 L1.57979906,23.1947544 L10.4736149,26.8124541 L128.175744,111.567076 L254.73962,18.7604631 L254.739616,177.916538 C254.739616,186.551057 247.695666,193.595007 238.833923,193.595007 L170.666667,193.595007 Z",
    fill: "url(#linearGradient-1)"
  }), React.createElement("path", {
    d: "M127.266847,117.020456 L7.06525206,29.7663685 C0.0213022675,24.5402122 -2.02371542,14.542348 3.20244088,7.49839817 C8.42859718,0.454448374 18.6536856,-1.13612093 25.9248596,4.09003537 L127.494071,77.9378961 L229.744955,3.18113862 C236.788905,-2.04501768 246.786769,-0.454448374 252.012926,6.81672561 C257.239082,13.8606754 255.648513,23.8585396 248.377339,29.0846959 L127.266847,117.020456 L127.266847,117.020456 Z",
    fill: "#D54B3D"
  }), React.createElement("path", {
    d: "M238.833923,2.27224187 L238.833923,2.27224187 C243.151182,2.27224187 247.241218,4.31725955 249.967908,7.95284654 C254.285167,14.0878996 252.921822,22.4951945 247.013993,27.0396782 L127.266847,114.293766 L8.42859718,27.948575 C2.29354414,23.4040913 0.702974828,14.7695722 5.02023438,8.86174329 C7.51970044,5.45338049 11.83696,3.18113862 16.3814437,3.18113862 C19.3353582,3.18113862 22.2892726,4.09003537 24.5615145,5.90782886 L125.903502,79.5284654 L127.266847,80.4373622 L128.630192,79.5284654 L230.653852,4.77170793 C233.153318,3.18113862 235.880008,2.27224187 238.833923,2.27224187 L238.833923,2.27224187 Z M238.833923,0 C235.652784,0 232.244421,0.908896748 229.517731,2.95391443 L127.266847,77.7106719 L25.6976354,3.86281118 C22.9709451,1.8177935 19.5625823,0.908896748 16.1542195,0.908896748 C11.1552874,0.908896748 6.15635532,3.18113862 2.9752167,7.49839817 C-2.02371542,14.542348 0.0213022675,24.5402122 7.06525206,29.7663685 L127.266847,117.24768 L248.150114,29.0846959 C255.194064,23.8585396 256.784634,14.0878996 251.785701,6.81672561 C248.604563,2.27224187 243.832855,0 238.833923,0 L238.833923,0 L238.833923,0 Z",
    fill: "#D72B27"
  }))),

  dropbox: React.createElement("svg", { x: "0px", y: "0px", viewBox: "0 0 512 512" }, React.createElement("g", null, React.createElement("polygon", {
    style: { fill: '#0093EB' },
    points: "100.571,383.086 100.571,341.943 170.057,382.171 256,301.714 256,484.571 \t"
  }), React.createElement("polygon", {
    style: { fill: '#0093EB' },
    points: "17.371,274.286 107.886,192 256,283.429 170.057,363.886 \t"
  }), React.createElement("polygon", {
    style: { fill: '#0093EB' },
    points: "107.886,192 0,109.714 155.429,27.429 265.143,100.571 \t"
  }), React.createElement("polygon", {
    style: { fill: '#0093EB' },
    points: "411.429,384 256,484.571 256,301.714 344.686,378.514 411.429,336.457 \t"
  }), React.createElement("polygon", {
    style: { fill: '#0093EB' },
    points: "344.686,360.229 256,283.429 405.029,188.343 494.629,265.143 \t"
  }), React.createElement("polygon", {
    style: { fill: '#0093EB' },
    points: "405.029,188.343 265.143,100.571 374.857,27.429 512,109.714 \t"
  })))
};
//# sourceMappingURL=iconsDetailed.js.map
});
__sbPundle.registerModule("../node_modules/fuzzy/lib/fuzzy.js", function(__filename, __dirname, require, module, exports) {
/*
 * Fuzzy
 * https://github.com/myork/fuzzy
 *
 * Copyright (c) 2012 Matt York
 * Licensed under the MIT license.
 */

(function () {

  var root = this;

  var fuzzy = {};

  // Use in node or in browser
  if (typeof exports !== 'undefined') {
    module.exports = fuzzy;
  } else {
    root.fuzzy = fuzzy;
  }

  // Return all elements of `array` that have a fuzzy
  // match against `pattern`.
  fuzzy.simpleFilter = function (pattern, array) {
    return array.filter(function (str) {
      return fuzzy.test(pattern, str);
    });
  };

  // Does `pattern` fuzzy match `str`?
  fuzzy.test = function (pattern, str) {
    return fuzzy.match(pattern, str) !== null;
  };

  // If `pattern` matches `str`, wrap each matching character
  // in `opts.pre` and `opts.post`. If no match, return null
  fuzzy.match = function (pattern, str, opts) {
    opts = opts || {};
    var patternIdx = 0,
        result = [],
        len = str.length,
        totalScore = 0,
        currScore = 0
    // prefix
    ,
        pre = opts.pre || ''
    // suffix
    ,
        post = opts.post || ''
    // String to compare against. This might be a lowercase version of the
    // raw string
    ,
        compareString = opts.caseSensitive && str || str.toLowerCase(),
        ch;

    pattern = opts.caseSensitive && pattern || pattern.toLowerCase();

    // For each character in the string, either add it to the result
    // or wrap in template if it's the next string in the pattern
    for (var idx = 0; idx < len; idx++) {
      ch = str[idx];
      if (compareString[idx] === pattern[patternIdx]) {
        ch = pre + ch + post;
        patternIdx += 1;

        // consecutive characters should increase the score more than linearly
        currScore += 1 + currScore;
      } else {
        currScore = 0;
      }
      totalScore += currScore;
      result[result.length] = ch;
    }

    // return rendered string if we have a match for every char
    if (patternIdx === pattern.length) {
      // if the string is an exact match with pattern, totalScore should be maxed
      totalScore = compareString === pattern ? Infinity : totalScore;
      return { rendered: result.join(''), score: totalScore };
    }

    return null;
  };

  // The normal entry point. Filters `arr` for matches against `pattern`.
  // It returns an array with matching values of the type:
  //
  //     [{
  //         string:   '<b>lah' // The rendered string
  //       , index:    2        // The index of the element in `arr`
  //       , original: 'blah'   // The original element in `arr`
  //     }]
  //
  // `opts` is an optional argument bag. Details:
  //
  //    opts = {
  //        // string to put before a matching character
  //        pre:     '<b>'
  //
  //        // string to put after matching character
  //      , post:    '</b>'
  //
  //        // Optional function. Input is an entry in the given arr`,
  //        // output should be the string to test `pattern` against.
  //        // In this example, if `arr = [{crying: 'koala'}]` we would return
  //        // 'koala'.
  //      , extract: function(arg) { return arg.crying; }
  //    }
  fuzzy.filter = function (pattern, arr, opts) {
    if (!arr || arr.length === 0) {
      return [];
    }
    if (typeof pattern !== 'string') {
      return arr;
    }
    opts = opts || {};
    return arr.reduce(function (prev, element, idx, arr) {
      var str = element;
      if (opts.extract) {
        str = opts.extract(element);
      }
      var rendered = fuzzy.match(pattern, str, opts);
      if (rendered != null) {
        prev[prev.length] = {
          string: rendered.rendered,
          score: rendered.score,
          index: idx,
          original: element
        };
      }
      return prev;
    }, [])

    // Sort by score. Browsers are inconsistent wrt stable/unstable
    // sorting, so force stable by using the index in the case of tie.
    // See http://ofb.net/~sethml/is-sort-stable.html
    .sort(function (a, b) {
      var compare = b.score - a.score;
      if (compare) return compare;
      return a.index - b.index;
    });
  };
})();
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/effects/hoverGlow.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2697');

var React = _interopRequireWildcard(_react2);

var _index = require('2698');

var _index2 = _interopRequireDefault(_index);

var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _class3, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2699');

var _color = require('2700');

var _color2 = _interopRequireDefault(_color);

var _offset = require('2701');

var _offset2 = _interopRequireDefault(_offset);

var _lodashDecorators = require('2702');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const _components = {
  HoverGlow: {
    displayName: 'HoverGlow'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/effects/hoverGlow.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const HoverGlow = _wrapComponent('HoverGlow')((_dec = _black.view.ui, _dec2 = (0, _lodashDecorators.throttle)(14), _dec3 = (0, _lodashDecorators.throttle)(20), _dec(_class = (_class2 = (_temp2 = _class3 = class HoverGlow extends React.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      track: false,
      position: {}
    }, this.rootRef = null, this.bounds = {}, _temp;
  }

  componentDidMount() {
    this.setState = this.setState.bind(this);
    this.setTimeout(() => {
      this.follow();
    });
  }

  follow() {
    let node;

    if (this.props.parent) {
      node = this.props.parent();
    } else if (this.rootRef) {
      node = this.rootRef.parentNode;
    }

    if (node) {
      this.node = node;
      this.setBounds();
      this.on(node, 'mouseenter', () => {
        this.trackMouse(true);
      });
      this.on(node, 'mousemove', event => {
        this.move(event);
      });
      this.on(node, 'mouseleave', () => {
        this.trackMouse(false);
      });
      // Resize.listenTo(node, this.setBounds)

      if (this.props.clickable) {
        this.on(node, 'mousedown', event => {
          this.mouseDown(event);
        });
      }
    }

    if (this.props.show) {
      // trigger it to show
      this.setState({});
    }
  }

  componentWillUnmount() {
    this.unmounted = true;
    if (this.node) {
      // Resize.removeAllListeners(this.node)
    }
  }

  setBounds() {
    this.bounds = this.node.getBoundingClientRect();
  }

  // offset gives us offset without scroll, just based on parent

  move(e) {
    const [x, y] = (0, _offset2.default)(e, this.node);
    if (this.unmounted || !this.bounds) {
      console.log('no move', this);
      return;
    }
    this.setState({
      position: {
        x: x - this.bounds.width / 2,
        y: y - this.bounds.height / 2
      }
    });
  }

  mouseDown() {
    this.setState({ clicked: true }, () => {
      this.setTimeout(() => {
        this.setState({ clicked: false });
      }, this.props.clickDuration);
    });
  }

  trackMouse(track) {
    if (this.unmounted) {
      return;
    }
    this.setState({ track });
  }

  render(_ref) {
    let {
      boundPct,
      full,
      scale,
      color,
      clickable,
      borderRadius,
      borderLeftRadius,
      borderRightRadius,
      zIndex,
      resist,
      opacity,
      inverse,
      offsetTop,
      offsetLeft,
      width: propWidth,
      height: propHeight,
      size,
      clickDuration,
      clickScale,
      draggable,
      transition,
      parent,
      children,
      behind,
      background,
      gradient,
      backdropFilter,
      overflow,
      overlayZIndex,
      blur,
      show
    } = _ref,
        props = _objectWithoutProperties(_ref, ['boundPct', 'full', 'scale', 'color', 'clickable', 'borderRadius', 'borderLeftRadius', 'borderRightRadius', 'zIndex', 'resist', 'opacity', 'inverse', 'offsetTop', 'offsetLeft', 'width', 'height', 'size', 'clickDuration', 'clickScale', 'draggable', 'transition', 'parent', 'children', 'behind', 'background', 'gradient', 'backdropFilter', 'overflow', 'overlayZIndex', 'blur', 'show']);

    const _gloss8 = this.glossElement.bind(this);

    const setRootRef = this.ref('rootRef').set;
    const { track } = this.state;

    if (!show && !transition && (!track && !children || !track)) {
      return _gloss8('overlay', { ref: setRootRef, style: { opacity: 0 } });
    }

    // find width / height (full == match size of container)
    let width = size || propWidth;
    let height = size || propHeight;
    if (full) {
      width = this.bounds.width;
      height = this.bounds.height;
    }

    if (isNaN(width) || isNaN(height)) {
      console.log('weird');
      return null;
    }

    const { position, clicked } = this.state;
    const x = position.x || 0;
    const y = position.y || 0;

    // resists being moved (towards center)
    const resisted = coord => {
      if (resist === 0) return coord;
      const resistAmt = 1 - resist / 100;
      return coord * resistAmt;
    };
    // bounds it within box x% size of parent
    const bounded = (coord, glowSize, parentSize) => {
      if (boundPct === null || boundPct > 100) return coord;
      const difference = parentSize - glowSize;
      const direction = coord / Math.abs(coord);
      const max = difference * (boundPct / 100) / 2;
      const cur = Math.abs(coord);
      return Math.min(max, cur) * direction;
    };
    const inversed = coord => {
      if (!inverse) return coord;
      return -coord;
    };
    const colorRGB = (0, _color2.default)(color).toString();
    const translateX = inversed(bounded(resisted(x), width * scale, this.bounds.width));
    const translateY = inversed(bounded(resisted(y), height * scale, this.bounds.height));
    const extraScale = clicked ? clickScale : 1;

    const glow = _gloss8('overlay', _extends({
      ref: setRootRef,
      $$draggable: draggable,
      css: {
        borderLeftRadius: borderLeftRadius || borderRadius,
        borderRightRadius: borderRightRadius || borderRadius,
        overflow,
        zIndex: behind ? -1 : overlayZIndex
      }
    }, props), _gloss8('glow', {
      style: {
        zIndex: behind ? -1 : 1,
        opacity: 1,
        transition: `
              transform linear ${transition}ms
            `,
        transform: `
                translateX(${translateX + offsetLeft}px)
                translateY(${translateY + offsetTop}px)
                translateZ(0px)
              `
      }
    }, _gloss8('blur', {
      height: height,
      width: width,
      style: {
        transform: `scale(${scale * extraScale}) translateZ(0px)`,
        opacity: track || show ? opacity : 0,
        width,
        height,
        marginLeft: -width / 2,
        marginTop: -height / 2,
        filter: blur ? `blur(${blur}px)` : '',
        backdropFilter,
        zIndex,
        background: background || gradient ? `radial-gradient(${(0, _color2.default)(color).toString()}, transparent 70%)` : colorRGB,
        borderRadius,
        transition: `
                  opacity linear ${transition}ms
                `
      }
    })));

    if (!children) {
      return glow;
    }

    // allow passthrough
    return children({
      translateX,
      translateY,
      glow
    });
  }

}, _class3.acceptsHovered = 'show', _class3.defaultProps = {
  width: 380,
  height: 200,
  color: [255, 255, 255],
  zIndex: 1,
  resist: 0,
  scale: 1,
  opacity: 0.025,
  boundPct: null,
  offsetTop: 0,
  offsetLeft: 0,
  clickable: false,
  clickDuration: 150,
  clickScale: 2,
  transition: 0,
  overlayZIndex: 1,
  blur: 15,
  backdropFilter: 'contrast(100%)'
}, _class3.style = {
  overlay: {
    position: 'absolute',
    transform: 'translateZ(0)',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    userSelect: 'none'
    // pointerEvents: 'none',
  },
  glow: {
    pointerEvents: 'none',
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translateZ(0)'
  }
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'move', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'move'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'trackMouse', [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, 'trackMouse'), _class2.prototype)), _class2)) || _class));

HoverGlow.acceptsHovered = 'show';

exports.default = HoverGlow;
//# sourceMappingURL=hoverGlow.js.map
});
__sbPundle.registerModule("../node_modules/lodash-decorators/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj['default'] = obj;return newObj;
  }
}

var _functions = require('962');

var functions = _interopRequireWildcard(_functions);

var _bindBind = require('963');

var _bindBind2 = _interopRequireDefault(_bindBind);

var _tap = require('964');

var _tap2 = _interopRequireDefault(_tap);

var _bindBindAll = require('965');

var _bindBindAll2 = _interopRequireDefault(_bindBindAll);

var _mixin = require('966');

var _mixin2 = _interopRequireDefault(_mixin);

var _attempt = require('967');

var _attempt2 = _interopRequireDefault(_attempt);

var _decoratorFactory = require('968');

var _Applicator = require('969');

exports.bind = _bindBind2['default'];
exports.tap = _tap2['default'];
exports.bindAll = _bindBindAll2['default'];
exports.mixin = _mixin2['default'];
exports.attempt = _attempt2['default'];

// Instance decorators
var once = (0, _decoratorFactory.createInstanceDecorator)(functions.once, _Applicator.applicators.single);
exports.once = once;
var debounce = (0, _decoratorFactory.createInstanceDecorator)(functions.debounce, _Applicator.applicators.pre);
exports.debounce = debounce;
var throttle = (0, _decoratorFactory.createInstanceDecorator)(functions.throttle, _Applicator.applicators.pre);
exports.throttle = throttle;
var memoize = (0, _decoratorFactory.createInstanceDecorator)(functions.memoize, _Applicator.applicators.pre);
exports.memoize = memoize;
var after = (0, _decoratorFactory.createInstanceDecorator)(functions.after, _Applicator.applicators.post);
exports.after = after;
var before = (0, _decoratorFactory.createInstanceDecorator)(functions.before, _Applicator.applicators.post);

exports.before = before;
// Prototype decorators
var spread = (0, _decoratorFactory.createDecorator)(functions.spread, _Applicator.applicators.single);
exports.spread = spread;
var rearg = (0, _decoratorFactory.createDecorator)(functions.rearg, _Applicator.applicators.single);
exports.rearg = rearg;
var negate = (0, _decoratorFactory.createDecorator)(functions.negate, _Applicator.applicators.single);
exports.negate = negate;
var overArgs = (0, _decoratorFactory.createDecorator)(functions.overArgs, _Applicator.applicators.pre);
exports.overArgs = overArgs;
var ary = (0, _decoratorFactory.createDecorator)(functions.ary, _Applicator.applicators.pre);
exports.ary = ary;
var unary = (0, _decoratorFactory.createDecorator)(functions.unary, _Applicator.applicators.single);
exports.unary = unary;
var curry = (0, _decoratorFactory.createDecorator)(functions.curry, _Applicator.applicators.pre);
exports.curry = curry;
var curryRight = (0, _decoratorFactory.createDecorator)(functions.curryRight, _Applicator.applicators.pre);
exports.curryRight = curryRight;
var rest = (0, _decoratorFactory.createDecorator)(functions.rest, _Applicator.applicators.pre);
exports.rest = rest;
var partial = (0, _decoratorFactory.createDecorator)(functions.partial, _Applicator.applicators.partial);
exports.partial = partial;
var partialRight = (0, _decoratorFactory.createDecorator)(functions.partialRight, _Applicator.applicators.partial);
exports.partialRight = partialRight;
var wrap = (0, _decoratorFactory.createDecorator)(functions.wrap, _Applicator.applicators.wrap);
exports.wrap = wrap;
var flow = (0, _decoratorFactory.createDecorator)(functions.flow, _Applicator.applicators.compose);
exports.flow = flow;
var flowRight = (0, _decoratorFactory.createDecorator)(functions.flowRight, _Applicator.applicators.compose);
exports.flowRight = flowRight;
var delay = (0, _decoratorFactory.createDecorator)(functions.delay, _Applicator.applicators.partialed);
exports.delay = delay;
var defer = (0, _decoratorFactory.createDecorator)(functions.defer, _Applicator.applicators.partialed);
exports.defer = defer;
var flip = (0, _decoratorFactory.createDecorator)(functions.flip, _Applicator.applicators.single);

exports.flip = flip;
// Uppercase aliases
exports.Once = once;
exports.Debounce = debounce;
exports.Throttle = throttle;
exports.Memoize = memoize;
exports.After = after;
exports.Before = before;
exports.Spread = spread;
exports.Rearg = rearg;
exports.Negate = negate;
exports.OverArgs = overArgs;
exports.Ary = ary;
exports.Unary = unary;
exports.Curry = curry;
exports.CurryRight = curryRight;
exports.Rest = rest;
exports.Partial = partial;
exports.PartialRight = partialRight;
exports.Wrap = wrap;
exports.Flow = flow;
exports.FlowRight = flowRight;
exports.Delay = delay;
exports.Defer = defer;
exports.Bind = _bindBind2['default'];
exports.Tap = _tap2['default'];
exports.BindAll = _bindBindAll2['default'];
exports.Mixin = _mixin2['default'];
exports.Attempt = _attempt2['default'];
exports.Flip = flip;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/functions.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _lodashOnce = require('1032');

var _lodashOnce2 = _interopRequireDefault(_lodashOnce);

var _lodashDebounce = require('1033');

var _lodashDebounce2 = _interopRequireDefault(_lodashDebounce);

var _lodashThrottle = require('1034');

var _lodashThrottle2 = _interopRequireDefault(_lodashThrottle);

var _lodashMemoize = require('1035');

var _lodashMemoize2 = _interopRequireDefault(_lodashMemoize);

var _lodashAfter = require('1036');

var _lodashAfter2 = _interopRequireDefault(_lodashAfter);

var _lodashBefore = require('1037');

var _lodashBefore2 = _interopRequireDefault(_lodashBefore);

var _lodashSpread = require('1038');

var _lodashSpread2 = _interopRequireDefault(_lodashSpread);

var _lodashRearg = require('1039');

var _lodashRearg2 = _interopRequireDefault(_lodashRearg);

var _lodashNegate = require('1040');

var _lodashNegate2 = _interopRequireDefault(_lodashNegate);

var _lodashOverArgs = require('1041');

var _lodashOverArgs2 = _interopRequireDefault(_lodashOverArgs);

var _lodashAry = require('1042');

var _lodashAry2 = _interopRequireDefault(_lodashAry);

var _lodashCurry = require('1043');

var _lodashCurry2 = _interopRequireDefault(_lodashCurry);

var _lodashCurryRight = require('1044');

var _lodashCurryRight2 = _interopRequireDefault(_lodashCurryRight);

var _lodashRest = require('1045');

var _lodashRest2 = _interopRequireDefault(_lodashRest);

var _lodashPartial = require('1046');

var _lodashPartial2 = _interopRequireDefault(_lodashPartial);

var _lodashPartialRight = require('1047');

var _lodashPartialRight2 = _interopRequireDefault(_lodashPartialRight);

var _lodashWrap = require('1048');

var _lodashWrap2 = _interopRequireDefault(_lodashWrap);

var _lodashFlow = require('1049');

var _lodashFlow2 = _interopRequireDefault(_lodashFlow);

var _lodashFlowRight = require('1050');

var _lodashFlowRight2 = _interopRequireDefault(_lodashFlowRight);

var _lodashDelay = require('1051');

var _lodashDelay2 = _interopRequireDefault(_lodashDelay);

var _lodashDefer = require('1052');

var _lodashDefer2 = _interopRequireDefault(_lodashDefer);

var _lodashUnary = require('1053');

var _lodashUnary2 = _interopRequireDefault(_lodashUnary);

var _lodashFlip = require('1054');

var _lodashFlip2 = _interopRequireDefault(_lodashFlip);

exports.once = _lodashOnce2['default'];
exports.debounce = _lodashDebounce2['default'];
exports.throttle = _lodashThrottle2['default'];
exports.memoize = _lodashMemoize2['default'];
exports.after = _lodashAfter2['default'];
exports.before = _lodashBefore2['default'];
exports.spread = _lodashSpread2['default'];
exports.rearg = _lodashRearg2['default'];
exports.negate = _lodashNegate2['default'];
exports.overArgs = _lodashOverArgs2['default'];
exports.ary = _lodashAry2['default'];
exports.curry = _lodashCurry2['default'];
exports.curryRight = _lodashCurryRight2['default'];
exports.rest = _lodashRest2['default'];
exports.partial = _lodashPartial2['default'];
exports.partialRight = _lodashPartialRight2['default'];
exports.wrap = _lodashWrap2['default'];
exports.flow = _lodashFlow2['default'];
exports.flowRight = _lodashFlowRight2['default'];
exports.delay = _lodashDelay2['default'];
exports.defer = _lodashDefer2['default'];
exports.unary = _lodashUnary2['default'];
exports.flip = _lodashFlip2['default'];
});
__sbPundle.registerModule("../node_modules/lodash/once.js", function(__filename, __dirname, require, module, exports) {
var before = require('1145');

/**
 * Creates a function that is restricted to invoking `func` once. Repeat calls
 * to the function return the value of the first invocation. The `func` is
 * invoked with the `this` binding and arguments of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication);
 * initialize();
 * initialize();
 * // => `createApplication` is invoked once
 */
function once(func) {
  return before(2, func);
}

module.exports = once;
});
__sbPundle.registerModule("../node_modules/lodash/before.js", function(__filename, __dirname, require, module, exports) {
var toInteger = require('1150');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */
function before(n, func) {
  var result;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  n = toInteger(n);
  return function () {
    if (--n > 0) {
      result = func.apply(this, arguments);
    }
    if (n <= 1) {
      func = undefined;
    }
    return result;
  };
}

module.exports = before;
});
__sbPundle.registerModule("../node_modules/lodash/toInteger.js", function(__filename, __dirname, require, module, exports) {
var toFinite = require('1226');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? remainder ? result - remainder : result : 0;
}

module.exports = toInteger;
});
__sbPundle.registerModule("../node_modules/lodash/toFinite.js", function(__filename, __dirname, require, module, exports) {
var toNumber = require('1326');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;
});
__sbPundle.registerModule("../node_modules/lodash/toNumber.js", function(__filename, __dirname, require, module, exports) {
var isObject = require('1240'),
    isSymbol = require('1241');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = toNumber;
});
__sbPundle.registerModule("../node_modules/lodash/isObject.js", function(__filename, __dirname, require, module, exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;
});
__sbPundle.registerModule("../node_modules/lodash/isSymbol.js", function(__filename, __dirname, require, module, exports) {
var baseGetTag = require('1339'),
    isObjectLike = require('1340');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;
});
__sbPundle.registerModule("../node_modules/lodash/_baseGetTag.js", function(__filename, __dirname, require, module, exports) {
var Symbol = require('1211'),
    getRawTag = require('1212'),
    objectToString = require('1213');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;
});
__sbPundle.registerModule("../node_modules/lodash/_Symbol.js", function(__filename, __dirname, require, module, exports) {
var root = require('1319');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;
});
__sbPundle.registerModule("../node_modules/lodash/_root.js", function(__filename, __dirname, require, module, exports) {
var freeGlobal = require('1338');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;
});
__sbPundle.registerModule("../node_modules/lodash/_freeGlobal.js", function(__filename, __dirname, require, module, exports) {
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;
});
__sbPundle.registerModule("../node_modules/lodash/_getRawTag.js", function(__filename, __dirname, require, module, exports) {
var Symbol = require('1318');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;
});
__sbPundle.registerModule("../node_modules/lodash/_objectToString.js", function(__filename, __dirname, require, module, exports) {
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;
});
__sbPundle.registerModule("../node_modules/lodash/isObjectLike.js", function(__filename, __dirname, require, module, exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;
});
__sbPundle.registerModule("../node_modules/lodash/debounce.js", function(__filename, __dirname, require, module, exports) {
var isObject = require('1154'),
    now = require('1155'),
    toNumber = require('1156');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;
});
__sbPundle.registerModule("../node_modules/lodash/now.js", function(__filename, __dirname, require, module, exports) {
var root = require('1239');

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function () {
  return root.Date.now();
};

module.exports = now;
});
__sbPundle.registerModule("../node_modules/lodash/throttle.js", function(__filename, __dirname, require, module, exports) {
var debounce = require('1147'),
    isObject = require('1148');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;
});
__sbPundle.registerModule("../node_modules/lodash/memoize.js", function(__filename, __dirname, require, module, exports) {
var MapCache = require('1151');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function () {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;
});
__sbPundle.registerModule("../node_modules/lodash/_MapCache.js", function(__filename, __dirname, require, module, exports) {
var mapCacheClear = require('1230'),
    mapCacheDelete = require('1231'),
    mapCacheGet = require('1232'),
    mapCacheHas = require('1233'),
    mapCacheSet = require('1234');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;
});
__sbPundle.registerModule("../node_modules/lodash/_mapCacheClear.js", function(__filename, __dirname, require, module, exports) {
var Hash = require('1328'),
    ListCache = require('1329'),
    Map = require('1330');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;
});
__sbPundle.registerModule("../node_modules/lodash/_Hash.js", function(__filename, __dirname, require, module, exports) {
var hashClear = require('1416'),
    hashDelete = require('1417'),
    hashGet = require('1418'),
    hashHas = require('1419'),
    hashSet = require('1420');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;
});
__sbPundle.registerModule("../node_modules/lodash/_hashClear.js", function(__filename, __dirname, require, module, exports) {
var nativeCreate = require('1646');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;
});
__sbPundle.registerModule("../node_modules/lodash/_nativeCreate.js", function(__filename, __dirname, require, module, exports) {
var getNative = require('1692');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;
});
__sbPundle.registerModule("../node_modules/lodash/_getNative.js", function(__filename, __dirname, require, module, exports) {
var baseIsNative = require('1654'),
    getValue = require('1655');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;
});
__sbPundle.registerModule("../node_modules/lodash/_baseIsNative.js", function(__filename, __dirname, require, module, exports) {
var isFunction = require('1694'),
    isMasked = require('1695'),
    isObject = require('1696'),
    toSource = require('1697');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;
});
__sbPundle.registerModule("../node_modules/lodash/isFunction.js", function(__filename, __dirname, require, module, exports) {
var baseGetTag = require('1133'),
    isObject = require('1134');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;
});
__sbPundle.registerModule("../node_modules/lodash/_isMasked.js", function(__filename, __dirname, require, module, exports) {
var coreJsData = require('2051');

/** Used to detect methods masquerading as native. */
var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;
});
__sbPundle.registerModule("../node_modules/lodash/_coreJsData.js", function(__filename, __dirname, require, module, exports) {
var root = require('2091');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;
});
__sbPundle.registerModule("../node_modules/lodash/_toSource.js", function(__filename, __dirname, require, module, exports) {
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;
});
__sbPundle.registerModule("../node_modules/lodash/_getValue.js", function(__filename, __dirname, require, module, exports) {
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;
});
__sbPundle.registerModule("../node_modules/lodash/_hashDelete.js", function(__filename, __dirname, require, module, exports) {
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;
});
__sbPundle.registerModule("../node_modules/lodash/_hashGet.js", function(__filename, __dirname, require, module, exports) {
var nativeCreate = require('1647');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;
});
__sbPundle.registerModule("../node_modules/lodash/_hashHas.js", function(__filename, __dirname, require, module, exports) {
var nativeCreate = require('1648');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;
});
__sbPundle.registerModule("../node_modules/lodash/_hashSet.js", function(__filename, __dirname, require, module, exports) {
var nativeCreate = require('1649');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;
});
__sbPundle.registerModule("../node_modules/lodash/_ListCache.js", function(__filename, __dirname, require, module, exports) {
var listCacheClear = require('1421'),
    listCacheDelete = require('1422'),
    listCacheGet = require('1423'),
    listCacheHas = require('1424'),
    listCacheSet = require('1425');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;
});
__sbPundle.registerModule("../node_modules/lodash/_listCacheClear.js", function(__filename, __dirname, require, module, exports) {
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;
});
__sbPundle.registerModule("../node_modules/lodash/_listCacheDelete.js", function(__filename, __dirname, require, module, exports) {
var assocIndexOf = require('1650');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;
});
__sbPundle.registerModule("../node_modules/lodash/_assocIndexOf.js", function(__filename, __dirname, require, module, exports) {
var eq = require('1693');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;
});
__sbPundle.registerModule("../node_modules/lodash/eq.js", function(__filename, __dirname, require, module, exports) {
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;
});
__sbPundle.registerModule("../node_modules/lodash/_listCacheGet.js", function(__filename, __dirname, require, module, exports) {
var assocIndexOf = require('1651');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;
});
__sbPundle.registerModule("../node_modules/lodash/_listCacheHas.js", function(__filename, __dirname, require, module, exports) {
var assocIndexOf = require('1652');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;
});
__sbPundle.registerModule("../node_modules/lodash/_listCacheSet.js", function(__filename, __dirname, require, module, exports) {
var assocIndexOf = require('1653');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;
});
__sbPundle.registerModule("../node_modules/lodash/_Map.js", function(__filename, __dirname, require, module, exports) {
var getNative = require('1426'),
    root = require('1427');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;
});
__sbPundle.registerModule("../node_modules/lodash/_mapCacheDelete.js", function(__filename, __dirname, require, module, exports) {
var getMapData = require('1331');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;
});
__sbPundle.registerModule("../node_modules/lodash/_getMapData.js", function(__filename, __dirname, require, module, exports) {
var isKeyable = require('1429');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;
});
__sbPundle.registerModule("../node_modules/lodash/_isKeyable.js", function(__filename, __dirname, require, module, exports) {
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;
});
__sbPundle.registerModule("../node_modules/lodash/_mapCacheGet.js", function(__filename, __dirname, require, module, exports) {
var getMapData = require('1332');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;
});
__sbPundle.registerModule("../node_modules/lodash/_mapCacheHas.js", function(__filename, __dirname, require, module, exports) {
var getMapData = require('1333');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;
});
__sbPundle.registerModule("../node_modules/lodash/_mapCacheSet.js", function(__filename, __dirname, require, module, exports) {
var getMapData = require('1334');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;
});
__sbPundle.registerModule("../node_modules/lodash/after.js", function(__filename, __dirname, require, module, exports) {
var toInteger = require('1149');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * The opposite of `_.before`; this method creates a function that invokes
 * `func` once it's called `n` or more times.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {number} n The number of calls before `func` is invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var saves = ['profile', 'settings'];
 *
 * var done = _.after(saves.length, function() {
 *   console.log('done saving!');
 * });
 *
 * _.forEach(saves, function(type) {
 *   asyncSave({ 'type': type, 'complete': done });
 * });
 * // => Logs 'done saving!' after the two async saves have completed.
 */
function after(n, func) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  n = toInteger(n);
  return function () {
    if (--n < 1) {
      return func.apply(this, arguments);
    }
  };
}

module.exports = after;
});
__sbPundle.registerModule("../node_modules/lodash/spread.js", function(__filename, __dirname, require, module, exports) {
var apply = require('1167'),
    arrayPush = require('1168'),
    baseRest = require('1169'),
    castSlice = require('1170'),
    toInteger = require('1171');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * create function and an array of arguments much like
 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
 *
 * **Note:** This method is based on the
 * [spread operator](https://mdn.io/spread_operator).
 *
 * @static
 * @memberOf _
 * @since 3.2.0
 * @category Function
 * @param {Function} func The function to spread arguments over.
 * @param {number} [start=0] The start position of the spread.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.spread(function(who, what) {
 *   return who + ' says ' + what;
 * });
 *
 * say(['fred', 'hello']);
 * // => 'fred says hello'
 *
 * var numbers = Promise.all([
 *   Promise.resolve(40),
 *   Promise.resolve(36)
 * ]);
 *
 * numbers.then(_.spread(function(x, y) {
 *   return x + y;
 * }));
 * // => a Promise of 76
 */
function spread(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  start = start == null ? 0 : nativeMax(toInteger(start), 0);
  return baseRest(function (args) {
    var array = args[start],
        otherArgs = castSlice(args, 0, start);

    if (array) {
      arrayPush(otherArgs, array);
    }
    return apply(func, this, otherArgs);
  });
}

module.exports = spread;
});
__sbPundle.registerModule("../node_modules/lodash/_apply.js", function(__filename, __dirname, require, module, exports) {
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;
});
__sbPundle.registerModule("../node_modules/lodash/_arrayPush.js", function(__filename, __dirname, require, module, exports) {
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;
});
__sbPundle.registerModule("../node_modules/lodash/_baseRest.js", function(__filename, __dirname, require, module, exports) {
var identity = require('1202'),
    overRest = require('1203'),
    setToString = require('1204');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;
});
__sbPundle.registerModule("../node_modules/lodash/identity.js", function(__filename, __dirname, require, module, exports) {
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;
});
__sbPundle.registerModule("../node_modules/lodash/_overRest.js", function(__filename, __dirname, require, module, exports) {
var apply = require('1315');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;
});
__sbPundle.registerModule("../node_modules/lodash/_setToString.js", function(__filename, __dirname, require, module, exports) {
var baseSetToString = require('1310'),
    shortOut = require('1311');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;
});
__sbPundle.registerModule("../node_modules/lodash/_baseSetToString.js", function(__filename, __dirname, require, module, exports) {
var constant = require('1413'),
    defineProperty = require('1414'),
    identity = require('1415');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function (func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;
});
__sbPundle.registerModule("../node_modules/lodash/constant.js", function(__filename, __dirname, require, module, exports) {
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function () {
    return value;
  };
}

module.exports = constant;
});
__sbPundle.registerModule("../node_modules/lodash/_defineProperty.js", function(__filename, __dirname, require, module, exports) {
var getNative = require('1428');

var defineProperty = function () {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

module.exports = defineProperty;
});
__sbPundle.registerModule("../node_modules/lodash/_shortOut.js", function(__filename, __dirname, require, module, exports) {
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function () {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;
});
__sbPundle.registerModule("../node_modules/lodash/_castSlice.js", function(__filename, __dirname, require, module, exports) {
var baseSlice = require('1255');

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return !start && end >= length ? array : baseSlice(array, start, end);
}

module.exports = castSlice;
});
__sbPundle.registerModule("../node_modules/lodash/_baseSlice.js", function(__filename, __dirname, require, module, exports) {
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;
});
__sbPundle.registerModule("../node_modules/lodash/rearg.js", function(__filename, __dirname, require, module, exports) {
var createWrap = require('1152'),
    flatRest = require('1153');

/** Used to compose bitmasks for function metadata. */
var WRAP_REARG_FLAG = 256;

/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */
var rearg = flatRest(function (func, indexes) {
  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});

module.exports = rearg;
});
__sbPundle.registerModule("../node_modules/lodash/_createWrap.js", function(__filename, __dirname, require, module, exports) {
var baseSetData = require('1190'),
    createBind = require('1191'),
    createCurry = require('1192'),
    createHybrid = require('1193'),
    createPartial = require('1194'),
    getData = require('1195'),
    mergeData = require('1196'),
    setData = require('1197'),
    setWrapToString = require('1198'),
    toInteger = require('1199');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *    1 - `_.bind`
 *    2 - `_.bindKey`
 *    4 - `_.curry` or `_.curryRight` of a bound function
 *    8 - `_.curry`
 *   16 - `_.curryRight`
 *   32 - `_.partial`
 *   64 - `_.partialRight`
 *  128 - `_.rearg`
 *  256 - `_.ary`
 *  512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
  if (!isBindKey && typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
    partials = holders = undefined;
  }
  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
  arity = arity === undefined ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;

  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
    var partialsRight = partials,
        holdersRight = holders;

    partials = holders = undefined;
  }
  var data = isBindKey ? undefined : getData(func);

  var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

  if (data) {
    mergeData(newData, data);
  }
  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
  }
  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(undefined, newData);
  }
  var setter = data ? baseSetData : setData;
  return setWrapToString(setter(result, newData), func, bitmask);
}

module.exports = createWrap;
});
__sbPundle.registerModule("../node_modules/lodash/_baseSetData.js", function(__filename, __dirname, require, module, exports) {
var identity = require('1296'),
    metaMap = require('1297');

/**
 * The base implementation of `setData` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var baseSetData = !metaMap ? identity : function (func, data) {
  metaMap.set(func, data);
  return func;
};

module.exports = baseSetData;
});
__sbPundle.registerModule("../node_modules/lodash/_metaMap.js", function(__filename, __dirname, require, module, exports) {
var WeakMap = require('1398');

/** Used to store function metadata. */
var metaMap = WeakMap && new WeakMap();

module.exports = metaMap;
});
__sbPundle.registerModule("../node_modules/lodash/_WeakMap.js", function(__filename, __dirname, require, module, exports) {
var getNative = require('1636'),
    root = require('1637');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;
});
__sbPundle.registerModule("../node_modules/lodash/_createBind.js", function(__filename, __dirname, require, module, exports) {
var createCtor = require('1282'),
    root = require('1283');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1;

/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}

module.exports = createBind;
});
__sbPundle.registerModule("../node_modules/lodash/_createCtor.js", function(__filename, __dirname, require, module, exports) {
var baseCreate = require('1394'),
    isObject = require('1395');

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */
function createCtor(Ctor) {
  return function () {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;
    switch (args.length) {
      case 0:
        return new Ctor();
      case 1:
        return new Ctor(args[0]);
      case 2:
        return new Ctor(args[0], args[1]);
      case 3:
        return new Ctor(args[0], args[1], args[2]);
      case 4:
        return new Ctor(args[0], args[1], args[2], args[3]);
      case 5:
        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6:
        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7:
        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate(Ctor.prototype),
        result = Ctor.apply(thisBinding, args);

    // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.
    return isObject(result) ? result : thisBinding;
  };
}

module.exports = createCtor;
});
__sbPundle.registerModule("../node_modules/lodash/_baseCreate.js", function(__filename, __dirname, require, module, exports) {
var isObject = require('1450');

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = function () {
  function object() {}
  return function (proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();

module.exports = baseCreate;
});
__sbPundle.registerModule("../node_modules/lodash/_createCurry.js", function(__filename, __dirname, require, module, exports) {
var apply = require('1284'),
    createCtor = require('1285'),
    createHybrid = require('1286'),
    createRecurry = require('1287'),
    getHolder = require('1288'),
    replaceHolders = require('1289'),
    root = require('1290');

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);

    length -= holders.length;
    if (length < arity) {
      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
    }
    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
    return apply(fn, this, args);
  }
  return wrapper;
}

module.exports = createCurry;
});
__sbPundle.registerModule("../node_modules/lodash/_createHybrid.js", function(__filename, __dirname, require, module, exports) {
var composeArgs = require('1270'),
    composeArgsRight = require('1271'),
    countHolders = require('1272'),
    createCtor = require('1273'),
    createRecurry = require('1274'),
    getHolder = require('1275'),
    reorder = require('1276'),
    replaceHolders = require('1277'),
    root = require('1278');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_ARY_FLAG = 128,
    WRAP_FLIP_FLAG = 512;

/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & WRAP_ARY_FLAG,
      isBind = bitmask & WRAP_BIND_FLAG,
      isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
      isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
      isFlip = bitmask & WRAP_FLIP_FLAG,
      Ctor = isBindKey ? undefined : createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length;

    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder(wrapper),
          holdersCount = countHolders(args, placeholder);
    }
    if (partials) {
      args = composeArgs(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders(args, placeholder);
      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
    }
    var thisBinding = isBind ? thisArg : this,
        fn = isBindKey ? thisBinding[func] : func;

    length = args.length;
    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== root && this instanceof wrapper) {
      fn = Ctor || createCtor(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}

module.exports = createHybrid;
});
__sbPundle.registerModule("../node_modules/lodash/_composeArgs.js", function(__filename, __dirname, require, module, exports) {
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }
  return result;
}

module.exports = composeArgs;
});
__sbPundle.registerModule("../node_modules/lodash/_composeArgsRight.js", function(__filename, __dirname, require, module, exports) {
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

module.exports = composeArgsRight;
});
__sbPundle.registerModule("../node_modules/lodash/_countHolders.js", function(__filename, __dirname, require, module, exports) {
/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */
function countHolders(array, placeholder) {
  var length = array.length,
      result = 0;

  while (length--) {
    if (array[length] === placeholder) {
      ++result;
    }
  }
  return result;
}

module.exports = countHolders;
});
__sbPundle.registerModule("../node_modules/lodash/_createRecurry.js", function(__filename, __dirname, require, module, exports) {
var isLaziable = require('1399'),
    setData = require('1400'),
    setWrapToString = require('1401');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;

/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & WRAP_CURRY_FLAG,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;

  bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
  }
  var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];

  var result = wrapFunc.apply(undefined, newData);
  if (isLaziable(func)) {
    setData(result, newData);
  }
  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

module.exports = createRecurry;
});
__sbPundle.registerModule("../node_modules/lodash/_isLaziable.js", function(__filename, __dirname, require, module, exports) {
var LazyWrapper = require('1356'),
    getData = require('1357'),
    getFuncName = require('1358'),
    lodash = require('1359');

/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */
function isLaziable(func) {
  var funcName = getFuncName(func),
      other = lodash[funcName];

  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    return false;
  }
  if (func === other) {
    return true;
  }
  var data = getData(other);
  return !!data && func === data[0];
}

module.exports = isLaziable;
});
__sbPundle.registerModule("../node_modules/lodash/_LazyWrapper.js", function(__filename, __dirname, require, module, exports) {
var baseCreate = require('1448'),
    baseLodash = require('1449');

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/**
 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
 *
 * @private
 * @constructor
 * @param {*} value The value to wrap.
 */
function LazyWrapper(value) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__dir__ = 1;
  this.__filtered__ = false;
  this.__iteratees__ = [];
  this.__takeCount__ = MAX_ARRAY_LENGTH;
  this.__views__ = [];
}

// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype = baseCreate(baseLodash.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;

module.exports = LazyWrapper;
});
__sbPundle.registerModule("../node_modules/lodash/_baseLodash.js", function(__filename, __dirname, require, module, exports) {
/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */
function baseLodash() {
  // No operation performed.
}

module.exports = baseLodash;
});
__sbPundle.registerModule("../node_modules/lodash/_getData.js", function(__filename, __dirname, require, module, exports) {
var metaMap = require('1291'),
    noop = require('1292');

/**
 * Gets metadata for `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {*} Returns the metadata for `func`.
 */
var getData = !metaMap ? noop : function (func) {
  return metaMap.get(func);
};

module.exports = getData;
});
__sbPundle.registerModule("../node_modules/lodash/noop.js", function(__filename, __dirname, require, module, exports) {
/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;
});
__sbPundle.registerModule("../node_modules/lodash/_getFuncName.js", function(__filename, __dirname, require, module, exports) {
var realNames = require('1365');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the name of `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {string} Returns the function name.
 */
function getFuncName(func) {
  var result = func.name + '',
      array = realNames[result],
      length = hasOwnProperty.call(realNames, result) ? array.length : 0;

  while (length--) {
    var data = array[length],
        otherFunc = data.func;
    if (otherFunc == null || otherFunc == func) {
      return data.name;
    }
  }
  return result;
}

module.exports = getFuncName;
});
__sbPundle.registerModule("../node_modules/lodash/_realNames.js", function(__filename, __dirname, require, module, exports) {
/** Used to lookup unminified function names. */
var realNames = {};

module.exports = realNames;
});
__sbPundle.registerModule("../node_modules/lodash/wrapperLodash.js", function(__filename, __dirname, require, module, exports) {
var LazyWrapper = require('1451'),
    LodashWrapper = require('1452'),
    baseLodash = require('1453'),
    isArray = require('1454'),
    isObjectLike = require('1455'),
    wrapperClone = require('1456');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates a `lodash` object which wraps `value` to enable implicit method
 * chain sequences. Methods that operate on and return arrays, collections,
 * and functions can be chained together. Methods that retrieve a single value
 * or may return a primitive value will automatically end the chain sequence
 * and return the unwrapped value. Otherwise, the value must be unwrapped
 * with `_#value`.
 *
 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
 * enabled using `_.chain`.
 *
 * The execution of chained methods is lazy, that is, it's deferred until
 * `_#value` is implicitly or explicitly called.
 *
 * Lazy evaluation allows several methods to support shortcut fusion.
 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
 * the creation of intermediate arrays and can greatly reduce the number of
 * iteratee executions. Sections of a chain sequence qualify for shortcut
 * fusion if the section is applied to an array and iteratees accept only
 * one argument. The heuristic for whether a section qualifies for shortcut
 * fusion is subject to change.
 *
 * Chaining is supported in custom builds as long as the `_#value` method is
 * directly or indirectly included in the build.
 *
 * In addition to lodash methods, wrappers have `Array` and `String` methods.
 *
 * The wrapper `Array` methods are:
 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
 *
 * The wrapper `String` methods are:
 * `replace` and `split`
 *
 * The wrapper methods that support shortcut fusion are:
 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
 *
 * The chainable wrapper methods are:
 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
 * `zipObject`, `zipObjectDeep`, and `zipWith`
 *
 * The wrapper methods that are **not** chainable by default are:
 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
 * `upperFirst`, `value`, and `words`
 *
 * @name _
 * @constructor
 * @category Seq
 * @param {*} value The value to wrap in a `lodash` instance.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2, 3]);
 *
 * // Returns an unwrapped value.
 * wrapped.reduce(_.add);
 * // => 6
 *
 * // Returns a wrapped value.
 * var squares = wrapped.map(square);
 *
 * _.isArray(squares);
 * // => false
 *
 * _.isArray(squares.value());
 * // => true
 */
function lodash(value) {
  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
    if (value instanceof LodashWrapper) {
      return value;
    }
    if (hasOwnProperty.call(value, '__wrapped__')) {
      return wrapperClone(value);
    }
  }
  return new LodashWrapper(value);
}

// Ensure wrappers are instances of `baseLodash`.
lodash.prototype = baseLodash.prototype;
lodash.prototype.constructor = lodash;

module.exports = lodash;
});
__sbPundle.registerModule("../node_modules/lodash/_LodashWrapper.js", function(__filename, __dirname, require, module, exports) {
var baseCreate = require('1363'),
    baseLodash = require('1364');

/**
 * The base constructor for creating `lodash` wrapper objects.
 *
 * @private
 * @param {*} value The value to wrap.
 * @param {boolean} [chainAll] Enable explicit method chain sequences.
 */
function LodashWrapper(value, chainAll) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__chain__ = !!chainAll;
  this.__index__ = 0;
  this.__values__ = undefined;
}

LodashWrapper.prototype = baseCreate(baseLodash.prototype);
LodashWrapper.prototype.constructor = LodashWrapper;

module.exports = LodashWrapper;
});
__sbPundle.registerModule("../node_modules/lodash/isArray.js", function(__filename, __dirname, require, module, exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;
});
__sbPundle.registerModule("../node_modules/lodash/_wrapperClone.js", function(__filename, __dirname, require, module, exports) {
var LazyWrapper = require('1678'),
    LodashWrapper = require('1679'),
    copyArray = require('1680');

/**
 * Creates a clone of `wrapper`.
 *
 * @private
 * @param {Object} wrapper The wrapper to clone.
 * @returns {Object} Returns the cloned wrapper.
 */
function wrapperClone(wrapper) {
  if (wrapper instanceof LazyWrapper) {
    return wrapper.clone();
  }
  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
  result.__actions__ = copyArray(wrapper.__actions__);
  result.__index__ = wrapper.__index__;
  result.__values__ = wrapper.__values__;
  return result;
}

module.exports = wrapperClone;
});
__sbPundle.registerModule("../node_modules/lodash/_copyArray.js", function(__filename, __dirname, require, module, exports) {
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;
});
__sbPundle.registerModule("../node_modules/lodash/_setData.js", function(__filename, __dirname, require, module, exports) {
var baseSetData = require('1302'),
    shortOut = require('1303');

/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var setData = shortOut(baseSetData);

module.exports = setData;
});
__sbPundle.registerModule("../node_modules/lodash/_setWrapToString.js", function(__filename, __dirname, require, module, exports) {
var getWrapDetails = require('1298'),
    insertWrapDetails = require('1299'),
    setToString = require('1300'),
    updateWrapDetails = require('1301');

/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */
function setWrapToString(wrapper, reference, bitmask) {
  var source = reference + '';
  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}

module.exports = setWrapToString;
});
__sbPundle.registerModule("../node_modules/lodash/_getWrapDetails.js", function(__filename, __dirname, require, module, exports) {
/** Used to match wrap detail comments. */
var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    reSplitDetails = /,? & /;

/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */
function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}

module.exports = getWrapDetails;
});
__sbPundle.registerModule("../node_modules/lodash/_insertWrapDetails.js", function(__filename, __dirname, require, module, exports) {
/** Used to match wrap detail comments. */
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */
function insertWrapDetails(source, details) {
  var length = details.length;
  if (!length) {
    return source;
  }
  var lastIndex = length - 1;
  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
  details = details.join(length > 2 ? ', ' : ' ');
  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}

module.exports = insertWrapDetails;
});
__sbPundle.registerModule("../node_modules/lodash/_updateWrapDetails.js", function(__filename, __dirname, require, module, exports) {
var arrayEach = require('1402'),
    arrayIncludes = require('1403');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256,
    WRAP_FLIP_FLAG = 512;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */
function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function (pair) {
    var value = '_.' + pair[0];
    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

module.exports = updateWrapDetails;
});
__sbPundle.registerModule("../node_modules/lodash/_arrayEach.js", function(__filename, __dirname, require, module, exports) {
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;
});
__sbPundle.registerModule("../node_modules/lodash/_arrayIncludes.js", function(__filename, __dirname, require, module, exports) {
var baseIndexOf = require('1638');

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;
});
__sbPundle.registerModule("../node_modules/lodash/_baseIndexOf.js", function(__filename, __dirname, require, module, exports) {
var baseFindIndex = require('1689'),
    baseIsNaN = require('1690'),
    strictIndexOf = require('1691');

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;
});
__sbPundle.registerModule("../node_modules/lodash/_baseFindIndex.js", function(__filename, __dirname, require, module, exports) {
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;
});
__sbPundle.registerModule("../node_modules/lodash/_baseIsNaN.js", function(__filename, __dirname, require, module, exports) {
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;
});
__sbPundle.registerModule("../node_modules/lodash/_strictIndexOf.js", function(__filename, __dirname, require, module, exports) {
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;
});
__sbPundle.registerModule("../node_modules/lodash/_getHolder.js", function(__filename, __dirname, require, module, exports) {
/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */
function getHolder(func) {
  var object = func;
  return object.placeholder;
}

module.exports = getHolder;
});
__sbPundle.registerModule("../node_modules/lodash/_reorder.js", function(__filename, __dirname, require, module, exports) {
var copyArray = require('1396'),
    isIndex = require('1397');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */
function reorder(array, indexes) {
  var arrLength = array.length,
      length = nativeMin(indexes.length, arrLength),
      oldArray = copyArray(array);

  while (length--) {
    var index = indexes[length];
    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
  }
  return array;
}

module.exports = reorder;
});
__sbPundle.registerModule("../node_modules/lodash/_isIndex.js", function(__filename, __dirname, require, module, exports) {
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;
});
__sbPundle.registerModule("../node_modules/lodash/_replaceHolders.js", function(__filename, __dirname, require, module, exports) {
/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */
function replaceHolders(array, placeholder) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER) {
      array[index] = PLACEHOLDER;
      result[resIndex++] = index;
    }
  }
  return result;
}

module.exports = replaceHolders;
});
__sbPundle.registerModule("../node_modules/lodash/_createPartial.js", function(__filename, __dirname, require, module, exports) {
var apply = require('1279'),
    createCtor = require('1280'),
    root = require('1281');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1;

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = this && this !== root && this instanceof wrapper ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}

module.exports = createPartial;
});
__sbPundle.registerModule("../node_modules/lodash/_mergeData.js", function(__filename, __dirname, require, module, exports) {
var composeArgs = require('1293'),
    composeArgsRight = require('1294'),
    replaceHolders = require('1295');

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */
function mergeData(data, source) {
  var bitmask = data[1],
      srcBitmask = source[1],
      newBitmask = bitmask | srcBitmask,
      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

  var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

  // Exit early if metadata can't be merged.
  if (!(isCommon || isCombo)) {
    return data;
  }
  // Use source `thisArg` if available.
  if (srcBitmask & WRAP_BIND_FLAG) {
    data[2] = source[2];
    // Set when currying a bound function.
    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
  }
  // Compose partial arguments.
  var value = source[3];
  if (value) {
    var partials = data[3];
    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
  }
  // Compose partial right arguments.
  value = source[5];
  if (value) {
    partials = data[5];
    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
  }
  // Use source `argPos` if available.
  value = source[7];
  if (value) {
    data[7] = value;
  }
  // Use source `ary` if it's smaller.
  if (srcBitmask & WRAP_ARY_FLAG) {
    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
  }
  // Use source `arity` if one is not provided.
  if (data[9] == null) {
    data[9] = source[9];
  }
  // Use source `func` and merge bitmasks.
  data[0] = source[0];
  data[1] = newBitmask;

  return data;
}

module.exports = mergeData;
});
__sbPundle.registerModule("../node_modules/lodash/_flatRest.js", function(__filename, __dirname, require, module, exports) {
var flatten = require('1227'),
    overRest = require('1228'),
    setToString = require('1229');

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;
});
__sbPundle.registerModule("../node_modules/lodash/flatten.js", function(__filename, __dirname, require, module, exports) {
var baseFlatten = require('1327');

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;
});
__sbPundle.registerModule("../node_modules/lodash/_baseFlatten.js", function(__filename, __dirname, require, module, exports) {
var arrayPush = require('1242'),
    isFlattenable = require('1243');

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;
});
__sbPundle.registerModule("../node_modules/lodash/_isFlattenable.js", function(__filename, __dirname, require, module, exports) {
var Symbol = require('1360'),
    isArguments = require('1361'),
    isArray = require('1362');

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;
});
__sbPundle.registerModule("../node_modules/lodash/isArguments.js", function(__filename, __dirname, require, module, exports) {
var baseIsArguments = require('1404'),
    isObjectLike = require('1405');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function () {
  return arguments;
}()) ? baseIsArguments : function (value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;
});
__sbPundle.registerModule("../node_modules/lodash/_baseIsArguments.js", function(__filename, __dirname, require, module, exports) {
var baseGetTag = require('1639'),
    isObjectLike = require('1640');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;
});
__sbPundle.registerModule("../node_modules/lodash/negate.js", function(__filename, __dirname, require, module, exports) {
/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */
function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return function () {
    var args = arguments;
    switch (args.length) {
      case 0:
        return !predicate.call(this);
      case 1:
        return !predicate.call(this, args[0]);
      case 2:
        return !predicate.call(this, args[0], args[1]);
      case 3:
        return !predicate.call(this, args[0], args[1], args[2]);
    }
    return !predicate.apply(this, args);
  };
}

module.exports = negate;
});
__sbPundle.registerModule("../node_modules/lodash/overArgs.js", function(__filename, __dirname, require, module, exports) {
var apply = require('1157'),
    arrayMap = require('1158'),
    baseFlatten = require('1159'),
    baseIteratee = require('1160'),
    baseRest = require('1161'),
    baseUnary = require('1162'),
    castRest = require('1163'),
    isArray = require('1164');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Creates a function that invokes `func` with its arguments transformed.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Function
 * @param {Function} func The function to wrap.
 * @param {...(Function|Function[])} [transforms=[_.identity]]
 *  The argument transforms.
 * @returns {Function} Returns the new function.
 * @example
 *
 * function doubled(n) {
 *   return n * 2;
 * }
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var func = _.overArgs(function(x, y) {
 *   return [x, y];
 * }, [square, doubled]);
 *
 * func(9, 3);
 * // => [81, 6]
 *
 * func(10, 5);
 * // => [100, 10]
 */
var overArgs = castRest(function (func, transforms) {
  transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(baseIteratee)) : arrayMap(baseFlatten(transforms, 1), baseUnary(baseIteratee));

  var funcsLength = transforms.length;
  return baseRest(function (args) {
    var index = -1,
        length = nativeMin(args.length, funcsLength);

    while (++index < length) {
      args[index] = transforms[index].call(this, args[index]);
    }
    return apply(func, this, args);
  });
});

module.exports = overArgs;
});
__sbPundle.registerModule("../node_modules/lodash/_arrayMap.js", function(__filename, __dirname, require, module, exports) {
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;
});
__sbPundle.registerModule("../node_modules/lodash/_baseIteratee.js", function(__filename, __dirname, require, module, exports) {
var baseMatches = require('1244'),
    baseMatchesProperty = require('1245'),
    identity = require('1246'),
    isArray = require('1247'),
    property = require('1248');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;
});
__sbPundle.registerModule("../node_modules/lodash/_baseMatches.js", function(__filename, __dirname, require, module, exports) {
var baseIsMatch = require('1349'),
    getMatchData = require('1350'),
    matchesStrictComparable = require('1351');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;
});
__sbPundle.registerModule("../node_modules/lodash/_baseIsMatch.js", function(__filename, __dirname, require, module, exports) {
var Stack = require('1443'),
    baseIsEqual = require('1444');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;
});
__sbPundle.registerModule("../node_modules/lodash/_Stack.js", function(__filename, __dirname, require, module, exports) {
var ListCache = require('1672'),
    stackClear = require('1673'),
    stackDelete = require('1674'),
    stackGet = require('1675'),
    stackHas = require('1676'),
    stackSet = require('1677');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;
});
__sbPundle.registerModule("../node_modules/lodash/_stackClear.js", function(__filename, __dirname, require, module, exports) {
var ListCache = require('1716');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;
});
__sbPundle.registerModule("../node_modules/lodash/_stackDelete.js", function(__filename, __dirname, require, module, exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;
});
__sbPundle.registerModule("../node_modules/lodash/_stackGet.js", function(__filename, __dirname, require, module, exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;
});
__sbPundle.registerModule("../node_modules/lodash/_stackHas.js", function(__filename, __dirname, require, module, exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;
});
__sbPundle.registerModule("../node_modules/lodash/_stackSet.js", function(__filename, __dirname, require, module, exports) {
var ListCache = require('1720'),
    Map = require('1721'),
    MapCache = require('1722');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;
});
__sbPundle.registerModule("../node_modules/lodash/_baseIsEqual.js", function(__filename, __dirname, require, module, exports) {
var baseIsEqualDeep = require('1430'),
    isObjectLike = require('1431');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;
});
__sbPundle.registerModule("../node_modules/lodash/_baseIsEqualDeep.js", function(__filename, __dirname, require, module, exports) {
var Stack = require('1662'),
    equalArrays = require('1663'),
    equalByTag = require('1664'),
    equalObjects = require('1665'),
    getTag = require('1666'),
    isArray = require('1667'),
    isBuffer = require('1668'),
    isTypedArray = require('1669');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;
});
__sbPundle.registerModule("../node_modules/lodash/_equalArrays.js", function(__filename, __dirname, require, module, exports) {
var SetCache = require('1717'),
    arraySome = require('1718'),
    cacheHas = require('1719');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;
});
__sbPundle.registerModule("../node_modules/lodash/_SetCache.js", function(__filename, __dirname, require, module, exports) {
var MapCache = require('1727'),
    setCacheAdd = require('1728'),
    setCacheHas = require('1729');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache();
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;
});
__sbPundle.registerModule("../node_modules/lodash/_setCacheAdd.js", function(__filename, __dirname, require, module, exports) {
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;
});
__sbPundle.registerModule("../node_modules/lodash/_setCacheHas.js", function(__filename, __dirname, require, module, exports) {
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;
});
__sbPundle.registerModule("../node_modules/lodash/_arraySome.js", function(__filename, __dirname, require, module, exports) {
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;
});
__sbPundle.registerModule("../node_modules/lodash/_cacheHas.js", function(__filename, __dirname, require, module, exports) {
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;
});
__sbPundle.registerModule("../node_modules/lodash/_equalByTag.js", function(__filename, __dirname, require, module, exports) {
var Symbol = require('1702'),
    Uint8Array = require('1703'),
    eq = require('1704'),
    equalArrays = require('1705'),
    mapToArray = require('1706'),
    setToArray = require('1707');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;
});
__sbPundle.registerModule("../node_modules/lodash/_Uint8Array.js", function(__filename, __dirname, require, module, exports) {
var root = require('2053');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;
});
__sbPundle.registerModule("../node_modules/lodash/_mapToArray.js", function(__filename, __dirname, require, module, exports) {
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;
});
__sbPundle.registerModule("../node_modules/lodash/_setToArray.js", function(__filename, __dirname, require, module, exports) {
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;
});
__sbPundle.registerModule("../node_modules/lodash/_equalObjects.js", function(__filename, __dirname, require, module, exports) {
var getAllKeys = require('1708');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;
});
__sbPundle.registerModule("../node_modules/lodash/_getAllKeys.js", function(__filename, __dirname, require, module, exports) {
var baseGetAllKeys = require('2054'),
    getSymbols = require('2055'),
    keys = require('2056');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;
});
__sbPundle.registerModule("../node_modules/lodash/_baseGetAllKeys.js", function(__filename, __dirname, require, module, exports) {
var arrayPush = require('2092'),
    isArray = require('2093');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;
});
__sbPundle.registerModule("../node_modules/lodash/_getSymbols.js", function(__filename, __dirname, require, module, exports) {
var arrayFilter = require('2094'),
    stubArray = require('2095');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;
});
__sbPundle.registerModule("../node_modules/lodash/_arrayFilter.js", function(__filename, __dirname, require, module, exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;
});
__sbPundle.registerModule("../node_modules/lodash/stubArray.js", function(__filename, __dirname, require, module, exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;
});
__sbPundle.registerModule("../node_modules/lodash/keys.js", function(__filename, __dirname, require, module, exports) {
var arrayLikeKeys = require('1205'),
    baseKeys = require('1206'),
    isArrayLike = require('1207');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;
});
__sbPundle.registerModule("../node_modules/lodash/_arrayLikeKeys.js", function(__filename, __dirname, require, module, exports) {
var baseTimes = require('1304'),
    isArguments = require('1305'),
    isArray = require('1306'),
    isBuffer = require('1307'),
    isIndex = require('1308'),
    isTypedArray = require('1309');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
    // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' ||
    // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') ||
    // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
    // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;
});
__sbPundle.registerModule("../node_modules/lodash/_baseTimes.js", function(__filename, __dirname, require, module, exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;
});
__sbPundle.registerModule("../node_modules/lodash/isBuffer.js", function(__filename, __dirname, require, module, exports) {
var root = require('1406'),
    stubFalse = require('1407');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;
});
__sbPundle.registerModule("../node_modules/lodash/stubFalse.js", function(__filename, __dirname, require, module, exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;
});
__sbPundle.registerModule("../node_modules/lodash/isTypedArray.js", function(__filename, __dirname, require, module, exports) {
var baseIsTypedArray = require('1408'),
    baseUnary = require('1409'),
    nodeUtil = require('1410');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;
});
__sbPundle.registerModule("../node_modules/lodash/_baseIsTypedArray.js", function(__filename, __dirname, require, module, exports) {
var baseGetTag = require('1641'),
    isLength = require('1642'),
    isObjectLike = require('1643');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;
});
__sbPundle.registerModule("../node_modules/lodash/isLength.js", function(__filename, __dirname, require, module, exports) {
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;
});
__sbPundle.registerModule("../node_modules/lodash/_baseUnary.js", function(__filename, __dirname, require, module, exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;
});
__sbPundle.registerModule("../node_modules/lodash/_nodeUtil.js", function(__filename, __dirname, require, module, exports) {
(function(process){
var freeGlobal = require('1644');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = function () {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;
})(require(1645))
});
__sbPundle.registerModule("../node_modules/lodash/_baseKeys.js", function(__filename, __dirname, require, module, exports) {
var isPrototype = require('1316'),
    nativeKeys = require('1317');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;
});
__sbPundle.registerModule("../node_modules/lodash/_isPrototype.js", function(__filename, __dirname, require, module, exports) {
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

  return value === proto;
}

module.exports = isPrototype;
});
__sbPundle.registerModule("../node_modules/lodash/_nativeKeys.js", function(__filename, __dirname, require, module, exports) {
var overArg = require('1412');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;
});
__sbPundle.registerModule("../node_modules/lodash/_overArg.js", function(__filename, __dirname, require, module, exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;
});
__sbPundle.registerModule("../node_modules/lodash/isArrayLike.js", function(__filename, __dirname, require, module, exports) {
var isFunction = require('1218'),
    isLength = require('1219');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;
});
__sbPundle.registerModule("../node_modules/lodash/_getTag.js", function(__filename, __dirname, require, module, exports) {
var DataView = require('1709'),
    Map = require('1710'),
    Promise = require('1711'),
    Set = require('1712'),
    WeakMap = require('1713'),
    baseGetTag = require('1714'),
    toSource = require('1715');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
  getTag = function (value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;
        case mapCtorString:
          return mapTag;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag;
        case weakMapCtorString:
          return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;
});
__sbPundle.registerModule("../node_modules/lodash/_DataView.js", function(__filename, __dirname, require, module, exports) {
var getNative = require('2057'),
    root = require('2058');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;
});
__sbPundle.registerModule("../node_modules/lodash/_Promise.js", function(__filename, __dirname, require, module, exports) {
var getNative = require('2061'),
    root = require('2062');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;
});
__sbPundle.registerModule("../node_modules/lodash/_Set.js", function(__filename, __dirname, require, module, exports) {
var getNative = require('2059'),
    root = require('2060');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;
});
__sbPundle.registerModule("../node_modules/lodash/_getMatchData.js", function(__filename, __dirname, require, module, exports) {
var isStrictComparable = require('1445'),
    keys = require('1446');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;
});
__sbPundle.registerModule("../node_modules/lodash/_isStrictComparable.js", function(__filename, __dirname, require, module, exports) {
var isObject = require('1439');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;
});
__sbPundle.registerModule("../node_modules/lodash/_matchesStrictComparable.js", function(__filename, __dirname, require, module, exports) {
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}

module.exports = matchesStrictComparable;
});
__sbPundle.registerModule("../node_modules/lodash/_baseMatchesProperty.js", function(__filename, __dirname, require, module, exports) {
var baseIsEqual = require('1342'),
    get = require('1343'),
    hasIn = require('1344'),
    isKey = require('1345'),
    isStrictComparable = require('1346'),
    matchesStrictComparable = require('1347'),
    toKey = require('1348');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;
});
__sbPundle.registerModule("../node_modules/lodash/get.js", function(__filename, __dirname, require, module, exports) {
var baseGet = require('1434');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;
});
__sbPundle.registerModule("../node_modules/lodash/_baseGet.js", function(__filename, __dirname, require, module, exports) {
var castPath = require('1670'),
    toKey = require('1671');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return index && index == length ? object : undefined;
}

module.exports = baseGet;
});
__sbPundle.registerModule("../node_modules/lodash/_castPath.js", function(__filename, __dirname, require, module, exports) {
var isArray = require('1698'),
    isKey = require('1699'),
    stringToPath = require('1700'),
    toString = require('1701');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;
});
__sbPundle.registerModule("../node_modules/lodash/_isKey.js", function(__filename, __dirname, require, module, exports) {
var isArray = require('1440'),
    isSymbol = require('1441');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}

module.exports = isKey;
});
__sbPundle.registerModule("../node_modules/lodash/_stringToPath.js", function(__filename, __dirname, require, module, exports) {
var memoizeCapped = require('2052');

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function (string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function (match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});

module.exports = stringToPath;
});
__sbPundle.registerModule("../node_modules/lodash/_memoizeCapped.js", function(__filename, __dirname, require, module, exports) {
var memoize = require('2090');

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;
});
__sbPundle.registerModule("../node_modules/lodash/toString.js", function(__filename, __dirname, require, module, exports) {
var baseToString = require('1341');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;
});
__sbPundle.registerModule("../node_modules/lodash/_baseToString.js", function(__filename, __dirname, require, module, exports) {
var Symbol = require('1435'),
    arrayMap = require('1436'),
    isArray = require('1437'),
    isSymbol = require('1438');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = baseToString;
});
__sbPundle.registerModule("../node_modules/lodash/_toKey.js", function(__filename, __dirname, require, module, exports) {
var isSymbol = require('1442');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = toKey;
});
__sbPundle.registerModule("../node_modules/lodash/hasIn.js", function(__filename, __dirname, require, module, exports) {
var baseHasIn = require('1432'),
    hasPath = require('1433');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;
});
__sbPundle.registerModule("../node_modules/lodash/_baseHasIn.js", function(__filename, __dirname, require, module, exports) {
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;
});
__sbPundle.registerModule("../node_modules/lodash/_hasPath.js", function(__filename, __dirname, require, module, exports) {
var castPath = require('1656'),
    isArguments = require('1657'),
    isArray = require('1658'),
    isIndex = require('1659'),
    isLength = require('1660'),
    toKey = require('1661');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}

module.exports = hasPath;
});
__sbPundle.registerModule("../node_modules/lodash/property.js", function(__filename, __dirname, require, module, exports) {
var baseProperty = require('1352'),
    basePropertyDeep = require('1353'),
    isKey = require('1354'),
    toKey = require('1355');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;
});
__sbPundle.registerModule("../node_modules/lodash/_baseProperty.js", function(__filename, __dirname, require, module, exports) {
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;
});
__sbPundle.registerModule("../node_modules/lodash/_basePropertyDeep.js", function(__filename, __dirname, require, module, exports) {
var baseGet = require('1447');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;
});
__sbPundle.registerModule("../node_modules/lodash/_castRest.js", function(__filename, __dirname, require, module, exports) {
var baseRest = require('1256');

/**
 * A `baseRest` alias which can be replaced with `identity` by module
 * replacement plugins.
 *
 * @private
 * @type {Function}
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
var castRest = baseRest;

module.exports = castRest;
});
__sbPundle.registerModule("../node_modules/lodash/ary.js", function(__filename, __dirname, require, module, exports) {
var createWrap = require('1166');

/** Used to compose bitmasks for function metadata. */
var WRAP_ARY_FLAG = 128;

/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */
function ary(func, n, guard) {
  n = guard ? undefined : n;
  n = func && n == null ? func.length : n;
  return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
}

module.exports = ary;
});
__sbPundle.registerModule("../node_modules/lodash/curry.js", function(__filename, __dirname, require, module, exports) {
var createWrap = require('1165');

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_FLAG = 8;

/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */
function curry(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curry.placeholder;
  return result;
}

// Assign default placeholders.
curry.placeholder = {};

module.exports = curry;
});
__sbPundle.registerModule("../node_modules/lodash/curryRight.js", function(__filename, __dirname, require, module, exports) {
var createWrap = require('1189');

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_RIGHT_FLAG = 16;

/**
 * This method is like `_.curry` except that arguments are applied to `func`
 * in the manner of `_.partialRight` instead of `_.partial`.
 *
 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curryRight(abc);
 *
 * curried(3)(2)(1);
 * // => [1, 2, 3]
 *
 * curried(2, 3)(1);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(3)(1, _)(2);
 * // => [1, 2, 3]
 */
function curryRight(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curryRight.placeholder;
  return result;
}

// Assign default placeholders.
curryRight.placeholder = {};

module.exports = curryRight;
});
__sbPundle.registerModule("../node_modules/lodash/rest.js", function(__filename, __dirname, require, module, exports) {
var baseRest = require('1177'),
    toInteger = require('1178');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * created function and arguments from `start` and beyond provided as
 * an array.
 *
 * **Note:** This method is based on the
 * [rest parameter](https://mdn.io/rest_parameters).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.rest(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
 *
 * say('hello', 'fred', 'barney', 'pebbles');
 * // => 'hello fred, barney, & pebbles'
 */
function rest(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  start = start === undefined ? start : toInteger(start);
  return baseRest(func, start);
}

module.exports = rest;
});
__sbPundle.registerModule("../node_modules/lodash/partial.js", function(__filename, __dirname, require, module, exports) {
var baseRest = require('1119'),
    createWrap = require('1120'),
    getHolder = require('1121'),
    replaceHolders = require('1122');

/** Used to compose bitmasks for function metadata. */
var WRAP_PARTIAL_FLAG = 32;

/**
 * Creates a function that invokes `func` with `partials` prepended to the
 * arguments it receives. This method is like `_.bind` except it does **not**
 * alter the `this` binding.
 *
 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for partially applied arguments.
 *
 * **Note:** This method doesn't set the "length" property of partially
 * applied functions.
 *
 * @static
 * @memberOf _
 * @since 0.2.0
 * @category Function
 * @param {Function} func The function to partially apply arguments to.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new partially applied function.
 * @example
 *
 * function greet(greeting, name) {
 *   return greeting + ' ' + name;
 * }
 *
 * var sayHelloTo = _.partial(greet, 'hello');
 * sayHelloTo('fred');
 * // => 'hello fred'
 *
 * // Partially applied with placeholders.
 * var greetFred = _.partial(greet, _, 'fred');
 * greetFred('hi');
 * // => 'hi fred'
 */
var partial = baseRest(function (func, partials) {
  var holders = replaceHolders(partials, getHolder(partial));
  return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
});

// Assign default placeholders.
partial.placeholder = {};

module.exports = partial;
});
__sbPundle.registerModule("../node_modules/lodash/partialRight.js", function(__filename, __dirname, require, module, exports) {
var baseRest = require('1172'),
    createWrap = require('1173'),
    getHolder = require('1174'),
    replaceHolders = require('1175');

/** Used to compose bitmasks for function metadata. */
var WRAP_PARTIAL_RIGHT_FLAG = 64;

/**
 * This method is like `_.partial` except that partially applied arguments
 * are appended to the arguments it receives.
 *
 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for partially applied arguments.
 *
 * **Note:** This method doesn't set the "length" property of partially
 * applied functions.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Function
 * @param {Function} func The function to partially apply arguments to.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new partially applied function.
 * @example
 *
 * function greet(greeting, name) {
 *   return greeting + ' ' + name;
 * }
 *
 * var greetFred = _.partialRight(greet, 'fred');
 * greetFred('hi');
 * // => 'hi fred'
 *
 * // Partially applied with placeholders.
 * var sayHelloTo = _.partialRight(greet, 'hello', _);
 * sayHelloTo('fred');
 * // => 'hello fred'
 */
var partialRight = baseRest(function (func, partials) {
  var holders = replaceHolders(partials, getHolder(partialRight));
  return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
});

// Assign default placeholders.
partialRight.placeholder = {};

module.exports = partialRight;
});
__sbPundle.registerModule("../node_modules/lodash/wrap.js", function(__filename, __dirname, require, module, exports) {
var castFunction = require('1183'),
    partial = require('1184');

/**
 * Creates a function that provides `value` to `wrapper` as its first
 * argument. Any additional arguments provided to the function are appended
 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
 * binding of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {*} value The value to wrap.
 * @param {Function} [wrapper=identity] The wrapper function.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var p = _.wrap(_.escape, function(func, text) {
 *   return '<p>' + func(text) + '</p>';
 * });
 *
 * p('fred, barney, & pebbles');
 * // => '<p>fred, barney, &amp; pebbles</p>'
 */
function wrap(value, wrapper) {
  return partial(castFunction(wrapper), value);
}

module.exports = wrap;
});
__sbPundle.registerModule("../node_modules/lodash/_castFunction.js", function(__filename, __dirname, require, module, exports) {
var identity = require('1216');

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;
});
__sbPundle.registerModule("../node_modules/lodash/flow.js", function(__filename, __dirname, require, module, exports) {
var createFlow = require('1176');

/**
 * Creates a function that returns the result of invoking the given functions
 * with the `this` binding of the created function, where each successive
 * invocation is supplied the return value of the previous.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flowRight
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flow([_.add, square]);
 * addSquare(1, 2);
 * // => 9
 */
var flow = createFlow();

module.exports = flow;
});
__sbPundle.registerModule("../node_modules/lodash/_createFlow.js", function(__filename, __dirname, require, module, exports) {
var LodashWrapper = require('1249'),
    flatRest = require('1250'),
    getData = require('1251'),
    getFuncName = require('1252'),
    isArray = require('1253'),
    isLaziable = require('1254');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256;

/**
 * Creates a `_.flow` or `_.flowRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new flow function.
 */
function createFlow(fromRight) {
  return flatRest(function (funcs) {
    var length = funcs.length,
        index = length,
        prereq = LodashWrapper.prototype.thru;

    if (fromRight) {
      funcs.reverse();
    }
    while (index--) {
      var func = funcs[index];
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
        var wrapper = new LodashWrapper([], true);
      }
    }
    index = wrapper ? index : length;
    while (++index < length) {
      func = funcs[index];

      var funcName = getFuncName(func),
          data = funcName == 'wrapper' ? getData(func) : undefined;

      if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
      } else {
        wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
      }
    }
    return function () {
      var args = arguments,
          value = args[0];

      if (wrapper && args.length == 1 && isArray(value)) {
        return wrapper.plant(value).value();
      }
      var index = 0,
          result = length ? funcs[index].apply(this, args) : value;

      while (++index < length) {
        result = funcs[index].call(this, result);
      }
      return result;
    };
  });
}

module.exports = createFlow;
});
__sbPundle.registerModule("../node_modules/lodash/flowRight.js", function(__filename, __dirname, require, module, exports) {
var createFlow = require('1179');

/**
 * This method is like `_.flow` except that it creates a function that
 * invokes the given functions from right to left.
 *
 * @static
 * @since 3.0.0
 * @memberOf _
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flow
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flowRight([square, _.add]);
 * addSquare(1, 2);
 * // => 9
 */
var flowRight = createFlow(true);

module.exports = flowRight;
});
__sbPundle.registerModule("../node_modules/lodash/delay.js", function(__filename, __dirname, require, module, exports) {
var baseDelay = require('1180'),
    baseRest = require('1181'),
    toNumber = require('1182');

/**
 * Invokes `func` after `wait` milliseconds. Any additional arguments are
 * provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to delay.
 * @param {number} wait The number of milliseconds to delay invocation.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {number} Returns the timer id.
 * @example
 *
 * _.delay(function(text) {
 *   console.log(text);
 * }, 1000, 'later');
 * // => Logs 'later' after one second.
 */
var delay = baseRest(function (func, wait, args) {
  return baseDelay(func, toNumber(wait) || 0, args);
});

module.exports = delay;
});
__sbPundle.registerModule("../node_modules/lodash/_baseDelay.js", function(__filename, __dirname, require, module, exports) {
/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * The base implementation of `_.delay` and `_.defer` which accepts `args`
 * to provide to `func`.
 *
 * @private
 * @param {Function} func The function to delay.
 * @param {number} wait The number of milliseconds to delay invocation.
 * @param {Array} args The arguments to provide to `func`.
 * @returns {number|Object} Returns the timer id or timeout object.
 */
function baseDelay(func, wait, args) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return setTimeout(function () {
    func.apply(undefined, args);
  }, wait);
}

module.exports = baseDelay;
});
__sbPundle.registerModule("../node_modules/lodash/defer.js", function(__filename, __dirname, require, module, exports) {
var baseDelay = require('1185'),
    baseRest = require('1186');

/**
 * Defers invoking the `func` until the current call stack has cleared. Any
 * additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to defer.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {number} Returns the timer id.
 * @example
 *
 * _.defer(function(text) {
 *   console.log(text);
 * }, 'deferred');
 * // => Logs 'deferred' after one millisecond.
 */
var defer = baseRest(function (func, args) {
  return baseDelay(func, 1, args);
});

module.exports = defer;
});
__sbPundle.registerModule("../node_modules/lodash/unary.js", function(__filename, __dirname, require, module, exports) {
var ary = require('1188');

/**
 * Creates a function that accepts up to one argument, ignoring any
 * additional arguments.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.unary(parseInt));
 * // => [6, 8, 10]
 */
function unary(func) {
  return ary(func, 1);
}

module.exports = unary;
});
__sbPundle.registerModule("../node_modules/lodash/flip.js", function(__filename, __dirname, require, module, exports) {
var createWrap = require('1187');

/** Used to compose bitmasks for function metadata. */
var WRAP_FLIP_FLAG = 512;

/**
 * Creates a function that invokes `func` with arguments reversed.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to flip arguments for.
 * @returns {Function} Returns the new flipped function.
 * @example
 *
 * var flipped = _.flip(function() {
 *   return _.toArray(arguments);
 * });
 *
 * flipped('a', 'b', 'c', 'd');
 * // => ['d', 'c', 'b', 'a']
 */
function flip(func) {
  return createWrap(func, WRAP_FLIP_FLAG);
}

module.exports = flip;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/bind/bind.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = bindWrapper;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _lodashIsFunction = require('1059');

var _lodashIsFunction2 = _interopRequireDefault(_lodashIsFunction);

var _lodashBind = require('1060');

var _lodashBind2 = _interopRequireDefault(_lodashBind);

var _utilsCopyMetaData = require('1061');

var _utilsCopyMetaData2 = _interopRequireDefault(_utilsCopyMetaData);

var _bindAll = require('1062');

var _bindAll2 = _interopRequireDefault(_bindAll);

var _Applicator = require('1063');

var _Applicator2 = _interopRequireDefault(_Applicator);

function bindWrapper() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return function bindDecorator() {
    for (var _len2 = arguments.length, properties = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      properties[_key2] = arguments[_key2];
    }

    return properties.length === 1 ? _bindAll2['default'].apply(undefined, args).apply(undefined, properties) : bindMethod.apply(undefined, properties.concat(args));
  };
}

function bindMethod(target, name, descriptor) {
  for (var _len3 = arguments.length, args = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
    args[_key3 - 3] = arguments[_key3];
  }

  var value = descriptor.value;
  var _get = descriptor.get;
  var writable = descriptor.writable;

  return {
    configurable: true,
    // Allows the user to reassign the variable
    set: function set(value) {
      Object.defineProperty(this, name, {
        configurable: true,
        value: value,
        writable: writable
      });
    },
    get: function get() {
      var thisValue = value;

      if ((0, _lodashIsFunction2['default'])(_get)) {
        thisValue = _get.call(this);
      }

      var boundValue = thisValue;

      if ((0, _lodashIsFunction2['default'])(thisValue)) {
        boundValue = _lodashBind2['default'].apply(undefined, [thisValue, this].concat(args));
        (0, _utilsCopyMetaData2['default'])(thisValue, boundValue);
      }

      Object.defineProperty(this, name, {
        writable: writable,
        configurable: true,
        value: boundValue
      });

      return boundValue;
    }
  };
}
module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash/bind.js", function(__filename, __dirname, require, module, exports) {
var baseRest = require('1376'),
    createWrap = require('1377'),
    getHolder = require('1378'),
    replaceHolders = require('1379');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_PARTIAL_FLAG = 32;

/**
 * Creates a function that invokes `func` with the `this` binding of `thisArg`
 * and `partials` prepended to the arguments it receives.
 *
 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for partially applied arguments.
 *
 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
 * property of bound functions.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to bind.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new bound function.
 * @example
 *
 * function greet(greeting, punctuation) {
 *   return greeting + ' ' + this.user + punctuation;
 * }
 *
 * var object = { 'user': 'fred' };
 *
 * var bound = _.bind(greet, object, 'hi');
 * bound('!');
 * // => 'hi fred!'
 *
 * // Bound with placeholders.
 * var bound = _.bind(greet, object, _, '!');
 * bound('hi');
 * // => 'hi fred!'
 */
var bind = baseRest(function (func, thisArg, partials) {
  var bitmask = WRAP_BIND_FLAG;
  if (partials.length) {
    var holders = replaceHolders(partials, getHolder(bind));
    bitmask |= WRAP_PARTIAL_FLAG;
  }
  return createWrap(func, bitmask, thisArg, partials, holders);
});

// Assign default placeholders.
bind.placeholder = {};

module.exports = bind;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/utils/copyMetaData.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = copyMetaData;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _lodashForOwn = require('1072');

var _lodashForOwn2 = _interopRequireDefault(_lodashForOwn);

/**
 * Used to copy over meta data from function to function.
 * If meta data is attached to a function. This can get lost
 * when wrapping functions. This tries to persist that.
 */

function copyMetaData(to, from) {
  (0, _lodashForOwn2['default'])(from, function (value, key) {
    return to[key] = value;
  });
  return to;
}

module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash/forOwn.js", function(__filename, __dirname, require, module, exports) {
var baseForOwn = require('1135'),
    castFunction = require('1136');

/**
 * Iterates over own enumerable string keyed properties of an object and
 * invokes `iteratee` for each property. The iteratee is invoked with three
 * arguments: (value, key, object). Iteratee functions may exit iteration
 * early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwnRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forOwn(object, iteratee) {
  return object && baseForOwn(object, castFunction(iteratee));
}

module.exports = forOwn;
});
__sbPundle.registerModule("../node_modules/lodash/_baseForOwn.js", function(__filename, __dirname, require, module, exports) {
var baseFor = require('1214'),
    keys = require('1215');

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;
});
__sbPundle.registerModule("../node_modules/lodash/_baseFor.js", function(__filename, __dirname, require, module, exports) {
var createBaseFor = require('1320');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;
});
__sbPundle.registerModule("../node_modules/lodash/_createBaseFor.js", function(__filename, __dirname, require, module, exports) {
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function (object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/bind/bindAll.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = bindAllWrapper;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _bindAllClassMethods = require('1064');

var _bindAllClassMethods2 = _interopRequireDefault(_bindAllClassMethods);

var _lodashFlatten = require('1065');

var _lodashFlatten2 = _interopRequireDefault(_lodashFlatten);

var _utilsAssignAll = require('1066');

var _utilsAssignAll2 = _interopRequireDefault(_utilsAssignAll);

var _utilsWrapConstructor = require('1067');

var _utilsWrapConstructor2 = _interopRequireDefault(_utilsWrapConstructor);

var _utilsLog = require('1068');

var _utilsLog2 = _interopRequireDefault(_utilsLog);

/**
 * Binds all class methods to the instance upon instantiation. This
 * extends the current constructor and copies over all properties,
 * including static methods. We could do an ES6 class extend instead
 * but we need to bind all the class methods BEFORE we call the super
 * constructor, which ES6 classes won't let us do.
 */

function bindAllWrapper() {
  for (var _len = arguments.length, methods = Array(_len), _key = 0; _key < _len; _key++) {
    methods[_key] = arguments[_key];
  }

  methods = (0, _lodashFlatten2['default'])(methods);

  return function bindAllDecorator() {
    for (var _len2 = arguments.length, properties = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      properties[_key2] = arguments[_key2];
    }

    if (properties.length > 1) {
      throw new Error((0, _utilsLog2['default'])('BindAll decorator can only be applied to a class'));
    }

    return (0, _utilsWrapConstructor2['default'])(properties[0], function (Ctor) {
      (0, _bindAllClassMethods2['default'])(this, methods.length ? methods : null);

      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      return Ctor.apply(this, args);
    });
  };
}

module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash-decorators/bind/bindAllClassMethods.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = bindAllClassMethods;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _lodashIsFunction = require('1079');

var _lodashIsFunction2 = _interopRequireDefault(_lodashIsFunction);

var _lodashIsNull = require('1080');

var _lodashIsNull2 = _interopRequireDefault(_lodashIsNull);

var _lodashNoop = require('1081');

var _lodashNoop2 = _interopRequireDefault(_lodashNoop);

var _lodashIsBoolean = require('1082');

var _lodashIsBoolean2 = _interopRequireDefault(_lodashIsBoolean);

var _utilsCopyMetaData = require('1083');

var _utilsCopyMetaData2 = _interopRequireDefault(_utilsCopyMetaData);

var _bindMap = require('1084');

var _bindMap2 = _interopRequireDefault(_bindMap);

function bindAllClassMethods(object) {
  var methods = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var source = arguments.length <= 2 || arguments[2] === undefined ? object : arguments[2];
  return function () {
    var usePick = Array.isArray(methods);
    var properties = Object.getOwnPropertyNames(source);

    for (var i = 0, len = properties.length; i < len; i++) {
      var key = properties[i];

      if (usePick && methods.indexOf(key) === -1) {
        continue;
      }

      var descriptor = Object.getOwnPropertyDescriptor(source, key) || {};

      if (!object.hasOwnProperty(key) && key !== 'constructor') {
        if (!descriptor.get && (0, _lodashIsFunction2['default'])(descriptor.value)) {
          Object.defineProperty(object, key, {
            value: (0, _utilsCopyMetaData2['default'])(descriptor.value.bind(object), descriptor.value),
            configurable: true,
            enumerable: (0, _lodashIsBoolean2['default'])(descriptor.enumerable) ? descriptor.enumerable : false,
            writable: (0, _lodashIsBoolean2['default'])(descriptor.writable) ? descriptor.writable : true
          });
        } else if (descriptor.get) {
          if (!_bindMap2['default'].has([object, key])) {
            _bindMap2['default'].set([object, key], true);
          }
        }
      }
    }

    var nextProto = Object.getPrototypeOf(source);

    if (!(0, _lodashIsNull2['default'])(nextProto) && Object.prototype !== nextProto) {
      bindAllClassMethods(object, methods, nextProto);
    }

    return object;
  }();
}

module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash/isNull.js", function(__filename, __dirname, require, module, exports) {
/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

module.exports = isNull;
});
__sbPundle.registerModule("../node_modules/lodash/isBoolean.js", function(__filename, __dirname, require, module, exports) {
var baseGetTag = require('1457'),
    isObjectLike = require('1458');

/** `Object#toString` result references. */
var boolTag = '[object Boolean]';

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */
function isBoolean(value) {
  return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
}

module.exports = isBoolean;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/bind/bindMap.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _utilsCompositeKeyWeakMap = require('1073');

var _utilsCompositeKeyWeakMap2 = _interopRequireDefault(_utilsCompositeKeyWeakMap);

exports['default'] = new _utilsCompositeKeyWeakMap2['default']();
module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash-decorators/utils/CompositeKeyWeakMap.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}

var _lodashIsUndefined = require('1071');

var _lodashIsUndefined2 = _interopRequireDefault(_lodashIsUndefined);

var CompositeKeyWeakMap = function () {
  function CompositeKeyWeakMap() {
    _classCallCheck(this, CompositeKeyWeakMap);

    this.weakMap = new WeakMap();
  }

  _createClass(CompositeKeyWeakMap, [{
    key: 'set',
    value: function set(keys, value) {
      var map = this.weakMap;

      for (var i = 0, len = keys.length - 1; i < len; i++) {
        var key = keys[i];
        var next = map.get(keys[i]);

        if (!next) {
          next = new Map();
          map.set(keys[i], next);
        }

        map = next;
      }

      map.set(keys[keys.length - 1], value);
    }
  }, {
    key: 'get',
    value: function get(keys) {
      var next = this.weakMap;

      for (var i = 0, len = keys.length; i < len; i++) {
        next = next.get(keys[i]);

        if ((0, _lodashIsUndefined2['default'])(next)) {
          break;
        }
      }

      return next;
    }
  }, {
    key: 'has',
    value: function has(keys) {
      return !(0, _lodashIsUndefined2['default'])(this.get(keys));
    }
  }]);

  return CompositeKeyWeakMap;
}();

exports['default'] = CompositeKeyWeakMap;
module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash/isUndefined.js", function(__filename, __dirname, require, module, exports) {
/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/utils/assignAll.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = assignAll;
exports.assignProperty = assignProperty;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
  } else {
    return Array.from(arr);
  }
}

var _lodashWithout = require('1085');

var _lodashWithout2 = _interopRequireDefault(_lodashWithout);

var _lodashIsObject = require('1086');

var _lodashIsObject2 = _interopRequireDefault(_lodashIsObject);

var _lodashAttempt = require('1087');

var _lodashAttempt2 = _interopRequireDefault(_lodashAttempt);

var FUNCTION_PROPERTY_EXCLUDES = ['length', 'name', 'arguments', 'caller', 'prototype'];

exports.FUNCTION_PROPERTY_EXCLUDES = FUNCTION_PROPERTY_EXCLUDES;
/**
 * Assigns all properties, including non-enumerable properties over
 * to the destination object.
 */

function assignAll(to, from) {
  var excludes = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

  var names = _lodashWithout2['default'].apply(undefined, [Object.getOwnPropertyNames(from)].concat(_toConsumableArray(excludes)));

  for (var i = 0, len = names.length; i < len; i++) {
    var _name = names[i];

    (0, _lodashAttempt2['default'])(assignProperty, to, from, _name);
  }

  return to;
}

function assignProperty(to, from, name) {
  var destDtor = Object.getOwnPropertyDescriptor(to, name);

  if (!destDtor || destDtor.configurable) {
    var srcDtor = Object.getOwnPropertyDescriptor(from, name);

    if ((0, _lodashIsObject2['default'])(srcDtor)) {
      Object.defineProperty(to, name, srcDtor);
    } else {
      // Fallback to regular assignment
      to[name] = from[name];
    }
  }
}
});
__sbPundle.registerModule("../node_modules/lodash/without.js", function(__filename, __dirname, require, module, exports) {
var baseDifference = require('1459'),
    baseRest = require('1460'),
    isArrayLikeObject = require('1461');

/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */
var without = baseRest(function (array, values) {
  return isArrayLikeObject(array) ? baseDifference(array, values) : [];
});

module.exports = without;
});
__sbPundle.registerModule("../node_modules/lodash/_baseDifference.js", function(__filename, __dirname, require, module, exports) {
var SetCache = require('1683'),
    arrayIncludes = require('1684'),
    arrayIncludesWith = require('1685'),
    arrayMap = require('1686'),
    baseUnary = require('1687'),
    cacheHas = require('1688');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  } else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = comparator || value !== 0 ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    } else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;
});
__sbPundle.registerModule("../node_modules/lodash/_arrayIncludesWith.js", function(__filename, __dirname, require, module, exports) {
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;
});
__sbPundle.registerModule("../node_modules/lodash/isArrayLikeObject.js", function(__filename, __dirname, require, module, exports) {
var isArrayLike = require('1681'),
    isObjectLike = require('1682');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;
});
__sbPundle.registerModule("../node_modules/lodash/attempt.js", function(__filename, __dirname, require, module, exports) {
var apply = require('1130'),
    baseRest = require('1131'),
    isError = require('1132');

/**
 * Attempts to invoke `func`, returning either the result or the caught error
 * object. Any additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Function} func The function to attempt.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {*} Returns the `func` result or error object.
 * @example
 *
 * // Avoid throwing errors for invalid selectors.
 * var elements = _.attempt(function(selector) {
 *   return document.querySelectorAll(selector);
 * }, '>_>');
 *
 * if (_.isError(elements)) {
 *   elements = [];
 * }
 */
var attempt = baseRest(function (func, args) {
  try {
    return apply(func, undefined, args);
  } catch (e) {
    return isError(e) ? e : new Error(e);
  }
});

module.exports = attempt;
});
__sbPundle.registerModule("../node_modules/lodash/isError.js", function(__filename, __dirname, require, module, exports) {
var baseGetTag = require('1208'),
    isObjectLike = require('1209'),
    isPlainObject = require('1210');

/** `Object#toString` result references. */
var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';

/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */
function isError(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
}

module.exports = isError;
});
__sbPundle.registerModule("../node_modules/lodash/isPlainObject.js", function(__filename, __dirname, require, module, exports) {
var baseGetTag = require('1312'),
    getPrototype = require('1313'),
    isObjectLike = require('1314');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;
});
__sbPundle.registerModule("../node_modules/lodash/_getPrototype.js", function(__filename, __dirname, require, module, exports) {
var overArg = require('1411');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/utils/wrapConstructor.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = wrapConstructor;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _assignAll = require('1088');

var _assignAll2 = _interopRequireDefault(_assignAll);

/**
 * Wraps a constructor and allows for modifying constructor flow.
 * Still retains same prototype and static properties.
 *
 * @param {Function} Ctor The constructor to wrap.
 * @param {Function} wrapper The wrapper to call. The wrapper
 *   gets called with the constructor and then any arguments
 *   passed into the constructor. It is the consumers responsibility
 *   to call `super` on the constructor.
 * @returns {Function} A new class constructor.
 */

function wrapConstructor(Ctor, wrapper) {
  function ClassWrapper() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return wrapper.call.apply(wrapper, [this, Ctor].concat(args));
  }

  ClassWrapper.prototype = Ctor.prototype;

  return (0, _assignAll2['default'])(ClassWrapper, Ctor, _assignAll.FUNCTION_PROPERTY_EXCLUDES);
}

module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash-decorators/utils/log.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = log;

function log() {
  var message = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

  return 'lodash-decorators -> ' + message;
}

module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash-decorators/Applicator.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.invoke = invoke;
exports.resolveFunction = resolveFunction;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
  } else {
    return Array.from(arr);
  }
}

var _lodashAssign = require('1055');

var _lodashAssign2 = _interopRequireDefault(_lodashAssign);

var _lodashIsFunction = require('1056');

var _lodashIsFunction2 = _interopRequireDefault(_lodashIsFunction);

var _lodashPartial = require('1057');

var _lodashPartial2 = _interopRequireDefault(_lodashPartial);

var _utilsLog = require('1058');

var _utilsLog2 = _interopRequireDefault(_utilsLog);

var applicators = {
  // Methods where the function is the last argument or the first
  // and all other arguments come before or after.
  post: function post(fn, target, value) {
    for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }

    return fn.apply(undefined, args.concat([value]));
  },
  pre: function pre(fn, target, value) {
    for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      args[_key2 - 3] = arguments[_key2];
    }

    return fn.apply(undefined, [value].concat(args));
  },

  // Partials are slightly different. They partial an existing function
  // on the object referenced by string name.
  partial: function partial(fn, target, value) {
    for (var _len3 = arguments.length, args = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
      args[_key3 - 3] = arguments[_key3];
    }

    return function () {
      for (var _len4 = arguments.length, invokeArgs = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        invokeArgs[_key4] = arguments[_key4];
      }

      return fn.apply(undefined, [resolveFunction(args[0], this, target)].concat(_toConsumableArray(args.slice(1)))).apply(this, invokeArgs);
    };
  },

  // Wrap is a different case since the original function value
  // needs to be given to the wrap method.
  wrap: function wrap(fn, target, value, fnName) {
    return function () {
      for (var _len5 = arguments.length, invokeArgs = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        invokeArgs[_key5] = arguments[_key5];
      }

      return fn(resolveFunction(fnName, this, target), value).apply(this, invokeArgs);
    };
  },

  replace: function replace(fn, target, value) {
    for (var _len6 = arguments.length, args = Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {
      args[_key6 - 3] = arguments[_key6];
    }

    return fn.apply(undefined, args);
  },

  // Calls the function with key functions and the value
  compose: function compose(fn, target, value) {
    for (var _len7 = arguments.length, args = Array(_len7 > 3 ? _len7 - 3 : 0), _key7 = 3; _key7 < _len7; _key7++) {
      args[_key7 - 3] = arguments[_key7];
    }

    return function () {
      var _this = this;

      for (var _len8 = arguments.length, invokeArgs = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        invokeArgs[_key8] = arguments[_key8];
      }

      return fn.apply(undefined, [value].concat(_toConsumableArray(args.map(function (method) {
        return resolveFunction(method, _this, target);
      })))).apply(this, invokeArgs);
    };
  },

  partialed: function partialed(fn, target, value) {
    for (var _len9 = arguments.length, args = Array(_len9 > 3 ? _len9 - 3 : 0), _key9 = 3; _key9 < _len9; _key9++) {
      args[_key9 - 3] = arguments[_key9];
    }

    return _lodashPartial2['default'].apply(undefined, [fn, value].concat(args));
  },
  single: function single(fn, target, value) {
    for (var _len10 = arguments.length, args = Array(_len10 > 3 ? _len10 - 3 : 0), _key10 = 3; _key10 < _len10; _key10++) {
      args[_key10 - 3] = arguments[_key10];
    }

    return applicators.pre.apply(applicators, [fn, target, value].concat(args));
  }
};

exports.applicators = applicators;
/**
 * Applys a specific method signature onto a set of arguments. This is due to the various different APIs
 * these functions provide.
 */

/**
  * Invokes an applicator method.
  *
  * @param {Function} applicator The applicator function.
  * @param {Function} method The function the applicator if being applied to.
  * @param {Object} target The target object given to the decorator.
  * @param {Function} value The value the decorator is being applied to.
  * @param {...*} [args] Any additional arguments passed to the applicator.
  * @returns {Function} A function with __method__ applied to __value__
  *   with the __applicator__s signature.
  */

function invoke(applicator, method, target, value) {
  for (var _len11 = arguments.length, args = Array(_len11 > 4 ? _len11 - 4 : 0), _key11 = 4; _key11 < _len11; _key11++) {
    args[_key11 - 4] = arguments[_key11];
  }

  return applicator.apply(undefined, [method, target, value].concat(args));
}

/**
  * Resolves a function on the current target object. It first will
  * try and resolve on the context object, then the target object,
  * then an error will be thrown if the method can not be resolved.
  *
  * @param {Function|String} method The method or method name.
  * @param {Object} [context] The context object to resolve from.
  * @param {Object} [target] The target object to resolve from.
  * @returns {Function} The resolved function.
  */

function resolveFunction(method, context, target) {
  if ((0, _lodashIsFunction2['default'])(method)) {
    return method;
  } else if ((0, _lodashIsFunction2['default'])(context[method])) {
    return context[method];
  } else if ((0, _lodashIsFunction2['default'])(target[method])) {
    return target[method];
  }

  throw new ReferenceError((0, _utilsLog2['default'])('Can not resolve method ' + method + ' on any target Objects'));
}
});
__sbPundle.registerModule("../node_modules/lodash/assign.js", function(__filename, __dirname, require, module, exports) {
var assignValue = require('1139'),
    copyObject = require('1140'),
    createAssigner = require('1141'),
    isArrayLike = require('1142'),
    isPrototype = require('1143'),
    keys = require('1144');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function (object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;
});
__sbPundle.registerModule("../node_modules/lodash/_assignValue.js", function(__filename, __dirname, require, module, exports) {
var baseAssignValue = require('1220'),
    eq = require('1221');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;
});
__sbPundle.registerModule("../node_modules/lodash/_baseAssignValue.js", function(__filename, __dirname, require, module, exports) {
var defineProperty = require('1321');

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;
});
__sbPundle.registerModule("../node_modules/lodash/_copyObject.js", function(__filename, __dirname, require, module, exports) {
var assignValue = require('1224'),
    baseAssignValue = require('1225');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;
});
__sbPundle.registerModule("../node_modules/lodash/_createAssigner.js", function(__filename, __dirname, require, module, exports) {
var baseRest = require('1222'),
    isIterateeCall = require('1223');

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function (object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;
});
__sbPundle.registerModule("../node_modules/lodash/_isIterateeCall.js", function(__filename, __dirname, require, module, exports) {
var eq = require('1322'),
    isArrayLike = require('1323'),
    isIndex = require('1324'),
    isObject = require('1325');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/tap.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _decoratorFactory = require('1011');

var _Applicator = require('1012');

var _utilsReturnAtIndex = require('1013');

var _utilsReturnAtIndex2 = _interopRequireDefault(_utilsReturnAtIndex);

/**
 * Returns the first argument from the function regardless of
 * the decorated functions return value.
 */
exports['default'] = (0, _decoratorFactory.createDecorator)(function tapDecorator(fn) {
  return (0, _utilsReturnAtIndex2['default'])(fn, 0);
}, _Applicator.applicators.single);
module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash-decorators/decoratorFactory.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getDecoratorTarget = getDecoratorTarget;

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj['default'] = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _lodashForOwn = require('1020');

var _lodashForOwn2 = _interopRequireDefault(_lodashForOwn);

var _lodashIsFunction = require('1021');

var _lodashIsFunction2 = _interopRequireDefault(_lodashIsFunction);

var _lodashPartial = require('1022');

var _lodashPartial2 = _interopRequireDefault(_lodashPartial);

var _lodashIdentity = require('1023');

var _lodashIdentity2 = _interopRequireDefault(_lodashIdentity);

var _lodashValues = require('1024');

var _lodashValues2 = _interopRequireDefault(_lodashValues);

var _lodashAssign = require('1025');

var _lodashAssign2 = _interopRequireDefault(_lodashAssign);

var _lodashUpperFirst = require('1026');

var _lodashUpperFirst2 = _interopRequireDefault(_lodashUpperFirst);

var _bindBindMap = require('1027');

var _bindBindMap2 = _interopRequireDefault(_bindBindMap);

var _utilsCompositeKeyWeakMap = require('1028');

var _utilsCompositeKeyWeakMap2 = _interopRequireDefault(_utilsCompositeKeyWeakMap);

var _utilsCopyMetaData = require('1029');

var _utilsCopyMetaData2 = _interopRequireDefault(_utilsCopyMetaData);

var _Applicator = require('1030');

var Applicator = _interopRequireWildcard(_Applicator);

var _utilsLog = require('1031');

var _utilsLog2 = _interopRequireDefault(_utilsLog);

var applicators = Applicator.applicators;

var instanceMethodMap = new _utilsCompositeKeyWeakMap2['default']();

var decoratorTargets = {
  GET: 'get',
  SET: 'set',
  VALUE: 'value',
  INITIALIZER: 'initializer'
};

exports.decoratorTargets = decoratorTargets;
var decoratorTargetSet = new Set((0, _lodashValues2['default'])(decoratorTargets));

exports.decoratorTargetSet = decoratorTargetSet;
/**
 * Gets a decorators target type.
 *
 * @param {Object} target The decorator target.
 * @param {String} name The property name.
 * @param {Object} descriptor The property descriptor.
 * @returns {String} A decorator target type.
 */

function getDecoratorTarget(target, name, descriptor) {
  if (descriptor.get) {
    return decoratorTargets.GET;
  } else if (descriptor.set) {
    return decoratorTargets.SET;
  } else if (descriptor.value) {
    return decoratorTargets.VALUE;
  } else if (descriptor.initializer) {
    return decoratorTargets.INITIALIZER;
  }

  throw new ReferenceError((0, _utilsLog2['default'])('Invalid decorator target.'));
}

var createDecorator = createDecoratorFactory(createDecoratorApplicator(getDecoratorTarget), (0, _lodashPartial2['default'])(wrapDecoratorWithAccessors, false));

exports.createDecorator = createDecorator;
var createGetterDecorator = createDecoratorFactory(createDecoratorApplicator(decoratorTargets.GET));

exports.createGetterDecorator = createGetterDecorator;
var createSetterDecorator = createDecoratorFactory(createDecoratorApplicator(decoratorTargets.SET));

exports.createSetterDecorator = createSetterDecorator;
var createInstanceDecorator = createDecoratorFactory(createInstanceDecoratorApplicator(getDecoratorTarget), (0, _lodashPartial2['default'])(wrapDecoratorWithAccessors, true), true);

exports.createInstanceDecorator = createInstanceDecorator;
var createInstanceSetterDecorator = createDecoratorFactory(createInstanceDecoratorApplicator(decoratorTargets.SET), _lodashIdentity2['default'], true);

exports.createInstanceSetterDecorator = createInstanceSetterDecorator;
var createInstanceGetterDecorator = createDecoratorFactory(createInstanceDecoratorApplicator(decoratorTargets.GET), _lodashIdentity2['default'], true);

exports.createInstanceGetterDecorator = createInstanceGetterDecorator;
function throwInstanceError() {
  // Instance decorators need to be processed last in the chain, proceding prototype decorators.
  // Any prototype decorator processed after an instance decorator will get the getter proxy
  // instead of the function
  throw new Error((0, _utilsLog2['default'])('Instance decorators need to come after prototype decorators!'));
}

function resolveTargetName(targetName) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return (0, _lodashIsFunction2['default'])(targetName) ? targetName.apply(undefined, args) : targetName;
}

function createDecoratorApplicator(forcedTargetName) {
  return function decoratorApplicator(target, name, descriptor, method, applicator, instanceMap) {
    var targetName = resolveTargetName(forcedTargetName, target, name, descriptor);

    if (instanceMethodMap.has([target, name])) {
      throwInstanceError();
    }

    if (decoratorTargetSet.has(targetName)) {
      var targetMethod = descriptor[targetName];

      for (var _len2 = arguments.length, args = Array(_len2 > 6 ? _len2 - 6 : 0), _key2 = 6; _key2 < _len2; _key2++) {
        args[_key2 - 6] = arguments[_key2];
      }

      descriptor[targetName] = Applicator.invoke.apply(Applicator, [applicator, method, target, targetMethod].concat(args));
      (0, _utilsCopyMetaData2['default'])(descriptor[targetName], targetMethod);
    }

    return descriptor;
  };
}

function createInstanceDecoratorApplicator(forcedTargetName) {
  return function instanceDecoratorApplicator(target, name, descriptor, method, applicator, instanceMap) {
    for (var _len3 = arguments.length, args = Array(_len3 > 6 ? _len3 - 6 : 0), _key3 = 6; _key3 < _len3; _key3++) {
      args[_key3 - 6] = arguments[_key3];
    }

    var targetName = resolveTargetName(forcedTargetName, target, name, descriptor);
    var targetMethod = descriptor[targetName];
    var methodMapKey = [target, name];
    var hasInstanceMap = instanceMethodMap.has(methodMapKey);

    // Used as a unique symbol for this decorator/method combination.
    // We can then tell where this decorator is in the chain.
    var token = Symbol();

    switch (targetName) {
      // We are assuming at this point this is a method being decorated and not a getter or setter.
      case decoratorTargets.VALUE:
        if (!hasInstanceMap) {
          instanceMethodMap.set(methodMapKey, [token]);
          hasInstanceMap = true;
        }

        delete descriptor.value;
        delete descriptor.writable;
        descriptor.get = createGetterProxy();
        descriptor.set = createBaseValueSetter(descriptor);
        break;
      case decoratorTargets.GET:
        if (hasInstanceMap) {
          instanceMethodMap.get(methodMapKey).unshift(token);
        }

        descriptor.get = createGetterProxy();

        // If there is no setter create one to avoid errors
        if (!descriptor.set) {
          descriptor.set = _lodashIdentity2['default'];
        }

        break;
      case decoratorTargets.SET:
        descriptor.set = createSetterProxy();

        if (!descriptor.get) {
          descriptor.get = _lodashIdentity2['default'];
        }

        break;
    }

    return descriptor;

    // If the user assigns a value to a method with a instance decorator,
    // the value for the decorator will be overwritten. You will loose the
    // decorator chain, which would be the expected behaviour.
    function createBaseValueSetter(_ref) {
      var enumerable = _ref.enumerable;
      var writable = _ref.writable;
      var configurable = _ref.configurable;

      return function baseValueSetter(value) {
        Object.defineProperty(this, name, {
          value: value,
          configurable: configurable,
          writable: writable,
          enumerable: enumerable
        });
      };
    }

    function createSetterProxy() {
      return (0, _utilsCopyMetaData2['default'])(function instanceSetterProxy(value) {
        var keys = [this, decoratorTargets.SET, targetMethod];

        if (!instanceMap.has(keys)) {
          instanceMap.set(keys, Applicator.invoke.apply(Applicator, [applicator, method, this, targetMethod].concat(args)));
        }

        var setter = instanceMap.get(keys);

        return setter.call(this, value);
      });
    }

    // A proxy that gets the instances wrapped function and either returns it
    // or executes it. If the decorator is the first in the chain to execute
    // and was applied to a method and not a getter, then it will return the
    // function and all subsequent functions will execute.
    function createGetterProxy() {
      return (0, _utilsCopyMetaData2['default'])(instanceGetterProxy, targetMethod);

      function instanceGetterProxy() {
        var keys = [this, decoratorTargets.GET, targetMethod];
        var invoke = true;

        if (hasInstanceMap) {
          invoke = instanceMethodMap.get(methodMapKey).indexOf(token) !== 0;
        }

        if (!instanceMap.has(keys)) {
          instanceMap.set(keys, Applicator.invoke.apply(Applicator, [applicator, method, this, targetMethod].concat(args)));
        }

        var fn = instanceMap.get(keys);

        return invoke ? fn.apply(this, arguments) : _bindBindMap2['default'].has([this, name]) ? (0, _utilsCopyMetaData2['default'])(fn.bind(this), fn) : fn;
      }
    }
  };
}

function createDecoratorFactory(executeFn) {
  var modifierFn = arguments.length <= 1 || arguments[1] === undefined ? _lodashIdentity2['default'] : arguments[1];
  var createInstanceMap = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  return function createDecorator(method) {
    var applicator = arguments.length <= 1 || arguments[1] === undefined ? applicators.pre : arguments[1];

    var instanceMap = createInstanceMap ? new _utilsCompositeKeyWeakMap2['default']() : null;
    var decorator = applicator === applicators.single ? wrapper() : wrapper;

    return modifierFn(decorator, method, applicator);

    function wrapper() {
      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return function decorator(target, name, descriptor) {
        return executeFn.apply(undefined, [target, name, descriptor, method, applicator, instanceMap].concat(args));
      };
    }
  };
}

function wrapDecoratorWithAccessors(instance, decorator, method, applicator) {
  // For an instance decorator provide a way to apply to the proto instead of instance and vice-versa
  var accessors = {
    get: instance ? createInstanceGetterDecorator(method, applicator) : createGetterDecorator(method, applicator),
    set: instance ? createInstanceSetterDecorator(method, applicator) : createSetterDecorator(method, applicator),
    proto: instance ? createDecorator(method, applicator) : decorator
  };

  (0, _lodashForOwn2['default'])(accessors, function (value, key) {
    decorator[key] = value;
    decorator[(0, _lodashUpperFirst2['default'])(key)] = value;
  });

  return decorator;
}
});
__sbPundle.registerModule("../node_modules/lodash/values.js", function(__filename, __dirname, require, module, exports) {
var baseValues = require('1137'),
    keys = require('1138');

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;
});
__sbPundle.registerModule("../node_modules/lodash/_baseValues.js", function(__filename, __dirname, require, module, exports) {
var arrayMap = require('1217');

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function (key) {
    return object[key];
  });
}

module.exports = baseValues;
});
__sbPundle.registerModule("../node_modules/lodash/upperFirst.js", function(__filename, __dirname, require, module, exports) {
var createCaseFirst = require('1146');

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

module.exports = upperFirst;
});
__sbPundle.registerModule("../node_modules/lodash/_createCaseFirst.js", function(__filename, __dirname, require, module, exports) {
var castSlice = require('1235'),
    hasUnicode = require('1236'),
    stringToArray = require('1237'),
    toString = require('1238');

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function (string) {
    string = toString(string);

    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

    var chr = strSymbols ? strSymbols[0] : string.charAt(0);

    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

module.exports = createCaseFirst;
});
__sbPundle.registerModule("../node_modules/lodash/_hasUnicode.js", function(__filename, __dirname, require, module, exports) {
/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;
});
__sbPundle.registerModule("../node_modules/lodash/_stringToArray.js", function(__filename, __dirname, require, module, exports) {
var asciiToArray = require('1335'),
    hasUnicode = require('1336'),
    unicodeToArray = require('1337');

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}

module.exports = stringToArray;
});
__sbPundle.registerModule("../node_modules/lodash/_asciiToArray.js", function(__filename, __dirname, require, module, exports) {
/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;
});
__sbPundle.registerModule("../node_modules/lodash/_unicodeToArray.js", function(__filename, __dirname, require, module, exports) {
/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/utils/returnAtIndex.js", function(__filename, __dirname, require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = returnAtIndex;

function returnAtIndex(fn, index) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    fn.call.apply(fn, [this].concat(args));
    return args[index];
  };
}

module.exports = exports["default"];
});
__sbPundle.registerModule("../node_modules/lodash-decorators/mixin.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = mixinDecoratorWrapper;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _lodashMixin = require('1018');

var _lodashMixin2 = _interopRequireDefault(_lodashMixin);

var _utilsLog = require('1019');

var _utilsLog2 = _interopRequireDefault(_utilsLog);

function mixinDecoratorWrapper(src, options) {
  return function mixinDecorator(target, name, descriptor) {
    if (arguments.length > 1) {
      throw new Error((0, _utilsLog2['default'])('Mixin decorator can only be applied to classes'));
    }

    (0, _lodashMixin2['default'])(target.prototype, src, options);

    return target;
  };
}

module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/lodash/mixin.js", function(__filename, __dirname, require, module, exports) {
var arrayEach = require('1123'),
    arrayPush = require('1124'),
    baseFunctions = require('1125'),
    copyArray = require('1126'),
    isFunction = require('1127'),
    isObject = require('1128'),
    keys = require('1129');

/**
 * Adds all own enumerable string keyed function properties of a source
 * object to the destination object. If `object` is a function, then methods
 * are added to its prototype as well.
 *
 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
 * avoid conflicts caused by modifying the original.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {Function|Object} [object=lodash] The destination object.
 * @param {Object} source The object of functions to add.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
 * @returns {Function|Object} Returns `object`.
 * @example
 *
 * function vowels(string) {
 *   return _.filter(string, function(v) {
 *     return /[aeiou]/i.test(v);
 *   });
 * }
 *
 * _.mixin({ 'vowels': vowels });
 * _.vowels('fred');
 * // => ['e']
 *
 * _('fred').vowels().value();
 * // => ['e']
 *
 * _.mixin({ 'vowels': vowels }, { 'chain': false });
 * _('fred').vowels();
 * // => ['e']
 */
function mixin(object, source, options) {
  var props = keys(source),
      methodNames = baseFunctions(source, props);

  var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
      isFunc = isFunction(object);

  arrayEach(methodNames, function (methodName) {
    var func = source[methodName];
    object[methodName] = func;
    if (isFunc) {
      object.prototype[methodName] = function () {
        var chainAll = this.__chain__;
        if (chain || chainAll) {
          var result = object(this.__wrapped__),
              actions = result.__actions__ = copyArray(this.__actions__);

          actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
          result.__chain__ = chainAll;
          return result;
        }
        return func.apply(object, arrayPush([this.value()], arguments));
      };
    }
  });

  return object;
}

module.exports = mixin;
});
__sbPundle.registerModule("../node_modules/lodash/_baseFunctions.js", function(__filename, __dirname, require, module, exports) {
var arrayFilter = require('1200'),
    isFunction = require('1201');

/**
 * The base implementation of `_.functions` which creates an array of
 * `object` function property names filtered from `props`.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Array} props The property names to filter.
 * @returns {Array} Returns the function names.
 */
function baseFunctions(object, props) {
  return arrayFilter(props, function (key) {
    return isFunction(object[key]);
  });
}

module.exports = baseFunctions;
});
__sbPundle.registerModule("../node_modules/lodash-decorators/attempt.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _lodashPartial = require('1014');

var _lodashPartial2 = _interopRequireDefault(_lodashPartial);

var _lodashAttempt = require('1015');

var _lodashAttempt2 = _interopRequireDefault(_lodashAttempt);

var _decoratorFactory = require('1016');

var _Applicator = require('1017');

exports['default'] = (0, _decoratorFactory.createDecorator)(function (fn) {
  return (0, _lodashPartial2['default'])(_lodashAttempt2['default'], fn);
}, _Applicator.applicators.single);
module.exports = exports['default'];
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/effects/glint.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2719');

var React = _interopRequireWildcard(_react2);

var _index = require('2720');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2721');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Glint: {
    displayName: 'Glint'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/effects/glint.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const isUndef = x => typeof x === 'undefined';

const Glint = _wrapComponent('Glint')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Glint extends React.Component {

  render({ className, attach, style }) {
    const _gloss = this.glossElement.bind(this);

    return _gloss('glint', _extends({ className: className, style: style }, attach));
  }

}, _class2.defaultProps = {
  color: [255, 255, 255, 0.15],
  size: 1
}, _class2.style = {
  glint: {
    pointerEvents: 'none',
    position: 'absolute',
    left: 0,
    right: 0,
    height: 10,
    zIndex: 10000
  }
}, _class2.theme = _ref => {
  let {
    borderRadius,
    bottom,
    borderRightRadius,
    borderLeftRadius,
    top,
    color,
    size
  } = _ref,
      props = _objectWithoutProperties(_ref, ['borderRadius', 'bottom', 'borderRightRadius', 'borderLeftRadius', 'top', 'color', 'size']);

  const radiusStyle = borderRadius && {
    borderRadius
  };
  const rightRadiusStyle = borderRightRadius && {
    [isUndef(bottom) ? 'borderTopRightRadius' : 'borderBottomRightRadius']: borderRightRadius
  };
  const leftRadiusStyle = borderLeftRadius && {
    [isUndef(bottom) ? 'borderTopLeftRadius' : 'borderBottomLeftRadius']: borderLeftRadius
  };

  return {
    glint: _extends({
      top: 0,
      height: '100%',
      transform: { y: 0.5 * (bottom ? 1 : -1), z: 0 },
      borderTop: isUndef(bottom) && [size, color],
      borderBottom: !isUndef(bottom) && [size, color]
    }, radiusStyle, rightRadiusStyle, leftRadiusStyle, props)
  };
}, _temp)) || _class));

exports.default = Glint;
//# sourceMappingURL=glint.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/text.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('16');

var React = _interopRequireWildcard(_react2);

var _index = require('17');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _class3, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('18');

var _ui = require('19');

var _mobx = require('20');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

const _components = {
  Text: {
    displayName: 'Text'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/text.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

// click away from edit clears it
const Text = _wrapComponent('Text')((_dec = _black.view.ui, _dec(_class = (_class2 = (_temp2 = _class3 = class Text extends React.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), _initDefineProp(this, 'selected', _descriptor, this), _initDefineProp(this, 'editable', _descriptor2, this), this.node = null, _temp;
  }

  componentWillMount() {
    this.handleProps(this.props);
    this.handleKeydown = this.handleKeydown.bind(this);
    this.getRef = this.getRef.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    this.handleProps(nextProps);
  }

  handleProps(props) {
    // setup reaction for editing if necessary
    if (!this.editableReaction && props.editable) {
      this.editableReaction = this.react(() => this.editable, editable => {
        if (this.clickaway) {
          this.clickaway.dispose();
        }
        if (editable) {
          // this.clickaway = this.addEvent(window, 'click', (event: Event) => {
          //   if (this.props.onFinishEdit) {
          //     this.props.onFinishEdit(this.value)
          //   }
          // })
        }
      }, true);
    }
    // set props
    if (typeof props.editing !== 'undefined') {
      if (!props.editing && this.selected) {
        this.selected = false;
      }
    }
    if (typeof props.editable !== 'undefined') {
      if (this.editable !== props.editable) {
        this.editable = props.editable;
      }
    }
  }

  componentDidUpdate() {
    if (this.node && this.props.autoselect && this.props.editable && !this.selected) {
      this.node.focus();
      document.execCommand('selectAll', false, null);
      this.selected = true;
    }
  }

  focus() {
    this.node && this.node.focus();
  }

  get value() {
    return this.node && this.node.innerText || '';
  }

  handleKeydown(event) {
    const { onFinishEdit, onCancelEdit, editable, onKeyDown } = this.props;
    if (editable) {
      const code = (0, _ui.keycode)(event);
      if (code === 'enter') {
        event.preventDefault();
        if (onFinishEdit) onFinishEdit(this.value, event);
      }
      if (code === 'esc') {
        event.preventDefault();
        if (onCancelEdit) onCancelEdit(this.value, event);
      }
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  }

  getRef(node) {
    if (node) {
      this.node = node;
      if (this.props.getRef) {
        this.props.getRef(node);
      }
    }
  }

  render(_ref) {
    let {
      editable,
      autoselect,
      onFinishEdit,
      onCancelEdit,
      onKeyDown,
      selectable,
      ellipse,
      children,
      fontWeight,
      fontSize,
      color,
      opacity,
      size,
      tagName,
      css,
      onClick,
      onMouseEnter,
      onMouseLeave,
      onFocus,
      onBlur,
      getRef,
      style,
      placeholder,
      lineHeight,
      lines,
      attach,
      html
    } = _ref,
        props = _objectWithoutProperties(_ref, ['editable', 'autoselect', 'onFinishEdit', 'onCancelEdit', 'onKeyDown', 'selectable', 'ellipse', 'children', 'fontWeight', 'fontSize', 'color', 'opacity', 'size', 'tagName', 'css', 'onClick', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur', 'getRef', 'style', 'placeholder', 'lineHeight', 'lines', 'attach', 'html']);

    const _gloss9 = this.glossElement.bind(this);

    const eventProps = {
      onClick,
      onMouseEnter,
      onMouseLeave,
      onFocus,
      onBlur
    };

    let inner = html ? _gloss9('span', { dangerouslySetInnerHTML: { __html: html } }) : children;

    if (lines) {
      if (!children) {
        return null;
      }
      let childrenString = children;
      if (Array.isArray(children)) {
        childrenString = children.filter(x => !!x).join('');
      }
      // TODO get a good ellpse tool
      // inner = (
      //   <LinesEllipse
      //     className="line-ellipse"
      //     text={childrenString}
      //     maxLine={200}
      //   />
      // )
    }
    return _gloss9('text', _extends({
      tagName: tagName,
      contentEditable: editable,
      $selectable: selectable,
      suppressContentEditableWarning: editable,
      onKeyDown: this.handleKeydown,
      ref: this.getRef,
      style: style,
      css: _extends({}, props, css),
      $ellipseText: ellipse
    }, eventProps, attach), !ellipse && inner, ellipse ? _gloss9('span', { $$ellipse: true }, inner) : null);
  }

}, _class3.defaultProps = {
  tagName: 'text' // TODO: prod p mode
}, _class3.style = {
  text: {
    display: 'inline-block',
    userSelect: 'none',
    cursor: 'default',
    maxWidth: '100%',
    wordBreak: 'break-word',
    position: 'relative'
  },
  ellipseText: {
    display: 'flex',
    flex: 1,
    overflow: 'hidden'
  },
  selectable: {
    userSelect: 'auto',
    cursor: 'text'
  }
}, _class3.theme = (props, theme) => {
  const fontSize = typeof props.fontSize === 'number' && props.fontSize || props.size ? props.size * 14 : 'auto';
  return {
    text: {
      fontSize,
      display: props.display,
      fontWeight: props.fontWeight,
      lineHeight: typeof props.lineHeight === 'number' ? `${props.lineHeight}px` : props.lineHeight || `${fontSize + 5}px`,
      color: props.color || theme.base.color,
      opacity: props.opacity
    },
    ellipse: {
      color: props.color || theme.base.color,
      wordBreak: 'inherit'
    }
  };
}, _temp2), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'selected', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return false;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'editable', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return false;
  }
})), _class2)) || _class));

exports.default = Text;
//# sourceMappingURL=text.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/button.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2550');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2551');

var _index2 = _interopRequireDefault(_index);

var _dec, _dec2, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _sizedSurface = require('2552');

var _sizedSurface2 = _interopRequireDefault(_sizedSurface);

var _injectTheme = require('2553');

var _injectTheme2 = _interopRequireDefault(_injectTheme);

var _reactTunnel = require('2554');

var _black = require('2555');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Button: {
    displayName: 'Button'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/button.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Button = _wrapComponent('Button')((_dec = (0, _reactTunnel.inject)(context => ({ uiContext: context.uiContext })), _dec2 = _black.view.ui, _dec(_class = (0, _injectTheme2.default)(_class = _dec2(_class = (_temp = _class2 = class Button extends _react3.default.PureComponent {
  render(_ref) {
    let {
      uiContext,
      badge,
      children,
      theme,
      chromeless,
      type,
      glow,
      glowProps,
      badgeProps
    } = _ref,
        props = _objectWithoutProperties(_ref, ['uiContext', 'badge', 'children', 'theme', 'chromeless', 'type', 'glow', 'glowProps', 'badgeProps']);

    const _gloss = this.glossElement.bind(this);

    let onClick = props.onClick;

    // patch until figure out why this doesnt trigger onSubmit
    if (type === 'submit') {
      const ogOnClick = onClick;
      onClick = function (...args) {
        uiContext.form.submit();
        return ogOnClick && ogOnClick(...args) || null;
      };
    }
    return _gloss(_sizedSurface2.default, _extends({
      tagName: 'button',
      type: type,
      clickable: true,
      hoverable: true,
      borderRadius: true,
      sizeFont: true,
      sizePadding: 1.2,
      sizeRadius: true,
      sizeHeight: true,
      sizeIcon: 1.1,
      borderWidth: 1,
      glint: !chromeless,
      chromeless: chromeless,
      row: true,
      align: 'center',
      justify: 'center',
      glow: glow,
      css: {
        flexWrap: 'nowrap',
        whiteSpace: 'pre'
      },
      glowProps: _extends({
        scale: 1.8,
        draggable: false,
        show: false
      }, glowProps, theme && theme.glow)
    }, props, {
      onClick: onClick,
      noElement: true,
      after: badge ? _gloss('badge', _extends({
        $badgeSize: props.size === true ? 1 : props.size || 1
      }, badgeProps), _gloss('contents', null, badge)) : null
    }), children);
  }

}, _class2.style = {
  badge: {
    position: 'absolute',
    top: '23%',
    right: '30%',
    textAlign: 'right',
    alignSelf: 'flex-end',
    textShadow: '1px 1px 0 rgba(0,0,0,0.15)',
    lineHeight: '1px',
    fontWeight: 600,
    borderRadius: 120000,
    justifyContent: 'center',
    background: 'linear-gradient(left, red, purple)',
    color: '#fff',
    overflow: 'hidden',
    pointerEvents: 'none',
    border: [8, '#fff'],
    zIndex: 100000000,
    transform: {
      scale: 0.14,
      x: '345%',
      y: 0,
      z: 0
    }
  },
  badgeSize: size => ({
    minWidth: size * 90 + 2,
    height: size * 90 + 2,
    fontSize: size * 60,
    marginTop: -((size * 90 + 2) / 2)
  }),
  contents: {
    alignItems: 'center',
    justifyContent: 'center',
    margin: [0, 18]
  }
}, _temp)) || _class) || _class) || _class));

exports.default = Button;

Button.acceptsHovered = true;
//# sourceMappingURL=button.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/sizedSurface.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = SizedSurface;

var _react = require('2656');

var React = _interopRequireWildcard(_react);

var _surface = require('2657');

var _surface2 = _interopRequireDefault(_surface);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const LINE_HEIGHT = 30;
const num = x => x === true ? 1 : x || 1;

function SizedSurface(props) {
  const {
    sizeHeight,
    sizeMargin,
    sizeFont,
    sizePadding,
    sizeRadius
  } = props,
        rest = _objectWithoutProperties(props, ['sizeHeight', 'sizeMargin', 'sizeFont', 'sizePadding', 'sizeRadius']);

  const size = num(props.size);

  // sizes
  const height = sizeHeight ? Math.round(sizeHeight && size * LINE_HEIGHT * num(sizeHeight)) : props.height || undefined;
  const fontSize = sizeFont && height * 0.45 * num(sizeFont);
  const padWithWrap = props.wrapElement ? 0 : height ? height / 3.5 : 8;
  const padding = sizePadding && [0, padWithWrap * num(sizePadding)] || 0;
  const margin = sizeMargin && num(sizeMargin) * 0.25 || 0;
  const radius = sizeRadius && num(sizeRadius) * 4 || 0;

  const pass = {};
  if (sizeHeight) {
    pass.height = height;
  }
  if (sizeFont) {
    pass.fontSize = fontSize;
  }
  if (sizePadding) {
    pass.padding = padding;
  }
  if (sizeMargin) {
    pass.margin = margin;
  }
  if (sizeRadius) {
    pass.borderRadius = radius;
  }

  return React.createElement(_surface2.default, _extends({}, pass, rest));
}
//# sourceMappingURL=sizedSurface.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/definitionList.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2560');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2561');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _black = require('2562');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  DefinitionList: {
    displayName: 'DefinitionList'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/definitionList.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const DefinitionList = _wrapComponent('DefinitionList')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class DefinitionList extends _react3.default.Component {
  render() {
    const _gloss = this.glossElement.bind(this);

    const _props = this.props,
          { object, children } = _props,
          props = _objectWithoutProperties(_props, ['object', 'children']);
    const target = object || children;
    const rows = Object.keys(target);

    return _gloss('dl', props, rows.map((item, i) => _gloss('row', { key: `${item}${i}` }, _gloss('dt', null, item), _gloss('dd', null, typeof target[item] === 'object' ? JSON.stringify(target[item]) : target[item]))));
  }

}, _class2.style = {
  dl: {
    padding: [5, 0]
  },
  row: {
    borderBottom: '1px dotted rgba(0,0,0,0.07)',
    flexFlow: 'row'
  },
  dt: {
    flex: 1,
    fontWeight: 500,
    display: 'block',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  dd: {
    color: 'rgba(0,0,0,0.7)'
  }
}, _temp)) || _class));

exports.default = DefinitionList;
//# sourceMappingURL=definitionList.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/drawer.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2556');

var React = _interopRequireWildcard(_react2);

var _index = require('2557');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2558');

var _surface = require('2559');

var _surface2 = _interopRequireDefault(_surface);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Drawer: {
    displayName: 'Drawer'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/drawer.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const opposite = direction => ({
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
})[direction];

const Drawer = _wrapComponent('Drawer')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Drawer extends React.PureComponent {

  render(_ref) {
    let {
      transparent,
      transition,
      transitionDuration,
      open,
      children,
      from,
      size,
      percent,
      onClickOverlay,
      showOverlay,
      boxShadow,
      bordered,
      zIndex,
      className,
      overlayBlur,
      theme,
      scrollable,
      closePortal,
      style,
      containerProps
    } = _ref,
        props = _objectWithoutProperties(_ref, ['transparent', 'transition', 'transitionDuration', 'open', 'children', 'from', 'size', 'percent', 'onClickOverlay', 'showOverlay', 'boxShadow', 'bordered', 'zIndex', 'className', 'overlayBlur', 'theme', 'scrollable', 'closePortal', 'style', 'containerProps']);

    const _gloss = this.glossElement.bind(this);

    const unit = +percent ? '%' : 'px';
    const flip = /right|bottom/.test(from) ? 1 : -1;
    const translate = `${(open ? 0 : size) * flip}${unit}`;
    const sizeKey = /left|right/.test(from) ? 'width' : 'height';
    const panelStyle = {
      transform: sizeKey === 'width' ? `translate(${translate})` : `translate(0px, ${translate})`,
      [sizeKey]: `${size}${unit}`
    };

    return _gloss('drawer', containerProps, _gloss(_surface2.default, _extends({
      style: _extends({}, style, panelStyle),
      $panel: true,
      $from: from,
      $panelOpen: open,
      className: className
    }, props), children), showOverlay ? _gloss('overlay', {
      $overlayOpen: open,
      $overlayBg: { blur: overlayBlur === true ? 5 : overlayBlur },
      onClick: e => {
        e.preventDefault();
        if (onClickOverlay) {
          onClickOverlay(false, e);
        }
      }
    }) : null);
  }

}, _class2.defaultProps = {
  size: 400,
  from: 'left',
  zIndex: 10000,
  transitionDuration: 500
}, _class2.style = {
  drawer: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    pointerEvents: 'none',
    transform: {
      z: 0
    }
  },
  // darken bg much less if blurring
  overlayBg: ({ blur }) => blur ? {
    backdropFilter: `blur(${blur}px)`,
    background: 'rgba(0,0,0,0.1)'
  } : {
    background: 'rgba(0,0,0,0.25)'
  },
  panel: {
    pointerEvents: 'none',
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    transition: 'transform ease-in-out 150ms',
    zIndex: 100
  },
  panelOpen: {
    pointerEvents: 'all',
    transform: { x: 0, y: 0, z: 0 }
  },
  from: direction => ({
    [direction]: 0,
    [opposite(direction)]: 'auto'
  }),
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    opacity: 0,
    transition: 'all ease-in-out 250ms',
    zIndex: -1,
    pointerEvents: 'none'
  },
  overlayOpen: {
    opacity: 1,
    zIndex: 1,
    pointerEvents: 'all'
  }
}, _class2.theme = (props, theme) => {
  return {
    drawer: {
      zIndex: props.zIndex
    },
    panel: {
      overflowY: props.scrollable ? 'scroll' : 'inherit',
      // transition:
      //   (props.transition && `all ease-in ${props.transitionDuration}`) || '',
      borderColor: props.bordered && theme.base.borderColor || '',
      boxShadow: props.boxShadow === true ? '0 0 6px rgba(0,0,0,0.3)' : props.boxShadow
    }
  };
}, _temp)) || _class));

exports.default = Drawer;
//# sourceMappingURL=drawer.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/dropdown.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2563');

var React = _interopRequireWildcard(_react2);

var _index = require('2564');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2565');

var _list = require('2566');

var _list2 = _interopRequireDefault(_list);

var _button = require('2567');

var _button2 = _interopRequireDefault(_button);

var _popover = require('2568');

var _popover2 = _interopRequireDefault(_popover);

var _arrow = require('2569');

var _arrow2 = _interopRequireDefault(_arrow);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Dropdown: {
    displayName: 'Dropdown'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/dropdown.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Dropdown = _wrapComponent('Dropdown')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Dropdown extends React.Component {

  render(_ref) {
    let {
      color,
      children,
      onChange,
      width,
      items,
      popoverProps,
      buttonProps,
      theme,
      noWrap
    } = _ref,
        props = _objectWithoutProperties(_ref, ['color', 'children', 'onChange', 'width', 'items', 'popoverProps', 'buttonProps', 'theme', 'noWrap']);

    const _gloss = this.glossElement.bind(this);

    const arrow = _gloss('icon', { $arrow: true }, _gloss(_arrow2.default, { color: '#000', size: 8 }));

    return _gloss('dropdown', null, _gloss(_popover2.default, _extends({
      openOnClick: true,
      openOnHover: true,
      closeOnEsc: true,
      background: true,
      borderRadius: 6,
      elevation: 3,
      arrowSize: 12,
      distance: 4,
      target: !noWrap ? _gloss(_button2.default, _extends({
        glow: false,
        iconAfter: true,
        icon: arrow,
        borderRadius: 16
      }, buttonProps), children) : null
    }, popoverProps), _gloss(_list2.default, _extends({
      controlled: true,
      width: width,
      items: items,
      getItem: item => ({
        primary: item
      })
    }, props))));
  }

}, _class2.defaultProps = {
  width: 100
}, _class2.style = {
  target: {
    flexFlow: 'row',
    alignItems: 'center'
  },
  icon: {
    marginLeft: 5
  },
  arrow: {
    transform: {
      y: 1
    }
  }
}, _temp)) || _class));

exports.default = Dropdown;
//# sourceMappingURL=dropdown.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/list.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2589');

var React = _interopRequireWildcard(_react2);

var _index = require('2590');

var _index2 = _interopRequireDefault(_index);

var _dec, _dec2, _class, _class2, _temp2, _initialiseProps;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2591');

var _listItem = require('2592');

var _listItem2 = _interopRequireDefault(_listItem);

var _reactVirtualized = require('2593');

var _parentSize = require('2594');

var _parentSize2 = _interopRequireDefault(_parentSize);

var _surface = require('2595');

var _surface2 = _interopRequireDefault(_surface);

var _mobx = require('2596');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

const _components = {
  List: {
    displayName: 'List'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/list.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const idFn = _ => _;

const List = _wrapComponent('List')((_dec = (0, _parentSize2.default)('virtualized'), _dec2 = _black.view.ui, _dec(_class = _dec2(_class = (_temp2 = _class2 = class List extends React.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), _initialiseProps.call(this), _temp;
  }

  // for tracking list resizing for virtual lists


  componentWillMount() {
    this.totalItems = this.getTotalItems(this.props);

    if (typeof this.props.defaultSelected !== 'undefined') {
      this.setState({ selected: this.props.defaultSelected });
    }

    if (this.props.getRef) {
      this.props.getRef(this);
    }

    this.updateChildren();

    this.setTimeout(() => {
      // TODO stupid ass bugfix, for some reason lists started flickering
      // likely a bug with our cellmeasurer, or maybe even gloss
      // this seems to fix for now
      if (this.props.virtualized) {
        this.setState({
          started: true
        });
      }
    });
  }

  // willUpdate only runs when PureComponent has new props
  componentWillUpdate(nextProps) {
    const { updateChildren, selected } = nextProps;
    if (typeof selected !== 'undefined') {
      this.lastDidReceivePropsDate = Date.now();
      if (selected !== this.state.selected) {
        this.setState({ selected });
      }
    }

    const totalItems = this.getTotalItems(nextProps);
    const hasNewItems = totalItems !== this.totalItems;
    if (hasNewItems) {
      this.totalItems = totalItems;
      // resize to fit
      const { parentHeight } = this.props;
      if (parentHeight && nextProps.parentHeight && (nextProps.parentSize.height !== parentHeight.height || nextProps.parentHeight.width !== parentHeight.width)) {
        nextProps.parentSize.measure();
      }
    }

    if (updateChildren || typeof selected === 'number' && this.state.selected !== selected || hasNewItems || !this.childrenVersion) {
      this.props = nextProps;
      this.updateChildren();
    }

    if (nextProps.virtualized && nextProps.virtualized.measure) {
      this.measure();
    }
  }

  // wrap weird signature


  highlightItem(setter, cb) {
    const selected = setter(this.state.selected);
    this.lastSelectionDate = Date.now();
    // only setstate if controlled
    if (this.props.controlled) {
      this.setState({ selected }, () => {
        this.props.onSelect(this.selected, selected);
        if (cb) cb();
      });
    } else {
      this.state.selected = selected;
      this.props.onSelect(this.selected, selected);
      if (cb) cb();
    }
    return selected;
  }

  get selected() {
    const { selected } = this.state;
    if (selected === null || !this.props.items) {
      return null;
    } else {
      return this.props.items[selected];
    }
  }

  get showInternalSelection() {
    if (typeof this.props.selected !== 'undefined') {
      return true;
    }
    if (this.props.isSelected) {
      return false;
    }
    return this.lastSelectionDate > this.lastDidReceivePropsDate;
  }

  getItemProps(index, rowProps, isListItem) {
    const {
      onItemMount,
      size,
      onSelect,
      controlled,
      itemProps,
      isSelected,
      selected,
      segmented
    } = this.props;
    const getRef = this.gatherRefs(index);
    const props = _extends({}, rowProps, isListItem ? {
      onItemMount,
      size,
      getRef,
      segmented,
      isFirstElement: index === 0,
      isLastElement: index === this.totalItems - 1
    } : {
      ref: getRef
    }, itemProps);
    // fallback key
    props.key = props.key || index;
    // handle click
    if (onSelect || controlled) {
      const ogClick = props.onClick;
      props.onClick = e => {
        this.highlightItem(() => index);
        if (ogClick) {
          ogClick.call(this, e);
        }
      };
    }
    // highlight logic
    if (controlled && this.showInternalSelection) {
      // set highlight if necessary
      props.highlight = index === this.state.selected;
    } else {
      if (selected === index) {
        props.highlight = true;
      } else if (isSelected) {
        props.highlight = isSelected(index);
      }
      // if they provide a prop-based isSelected, still track the right index internally
      if (props.highlight && this.state.selected !== index) {
        this.state.selected = index;
      }
    }
    return props;
  }

  // for items={}
  // curried so we can avoid work in virtualized contexts


  // for children={}


  // mutative which is odd
  // sets:
  //   this.children
  //   this.groupedIndex
  //   this.realIndex
  //   this.totalGroups
  updateChildren() {
    const _gloss7 = this.glossElement.bind(this);

    const { props } = this;
    const { items, virtualized, groupKey, parentSize } = props;
    const hasChildren = props.children;
    if (!items && !hasChildren) {
      return null;
    }
    if (virtualized && !parentSize) {
      return null;
    }
    let children;
    if (hasChildren) {
      children = this.getListChildren(props.children);
    } else {
      if ((0, _mobx.isArrayLike)(items)) {
        children = items.map(this.getListItem);
      } else {
        console.error('not array', items);
        return;
      }
    }

    // if no need, just get them right away
    if (!virtualized) {
      children = children.map(child => child());
    }

    // grouping logic
    const groupedIndex = [];
    let realIndex = [];
    let totalGroups = 0;

    if (groupKey && items) {
      const groups = [];
      let lastGroup = null;

      items.forEach((item, itemIndex) => {
        const index = itemIndex + totalGroups;
        if (lastGroup !== item[groupKey]) {
          lastGroup = item[groupKey];
          // if is separator
          if (lastGroup) {
            groups.push({ index, name: lastGroup });
            totalGroups = totalGroups + 1;
            groupedIndex[index] = true; // separator
            groupedIndex[index + 1] = itemIndex; // next
            return;
          }
        }
        realIndex[itemIndex] = index - totalGroups;
        groupedIndex[index] = itemIndex;
      });

      realIndex = realIndex.filter(x => typeof x !== 'undefined');

      for (const _ref of groups) {
        const { index, name } = _ref;

        let child = extraProps => _gloss7('separator', _extends({ key: name }, extraProps), name);
        if (!virtualized) {
          child = child();
        }
        children.splice(index, 0, child);
      }
    }

    this.cache = new _reactVirtualized.CellMeasurerCache({
      defaultHeight: 50,
      fixedWidth: true
    });

    this.children = children;
    this.totalGroups = totalGroups;
    if (totalGroups) {
      this.realIndex = realIndex;
      this.groupedIndex = groupedIndex;
    }
    this.childrenVersion = Math.random();
  }

  render() {
    const _gloss8 = this.glossElement.bind(this);

    const { children } = this;
    if (!children) {
      return null;
    }
    const { virtualized, parentSize, scrollable, style, attach } = this.props;
    if (virtualized && !parentSize) {
      return null;
    }
    let { width, height } = this.props;
    if (virtualized && parentSize) {
      height = parentSize.height || height || 0;
      width = parentSize.width || width || 0;
    }
    const { totalItems, totalGroups, realIndex } = this;
    return _gloss8(_surface2.default, _extends({
      $list: true,
      $visible: !virtualized || this.state.started,
      tagName: 'list',
      align: 'stretch',
      height: height,
      width: width,
      style: _extends({
        overflowY: scrollable ? 'scroll' : 'auto',
        height: virtualized ? '100%' : 'auto'
      }, style)
    }, attach), virtualized ? _gloss8(_reactVirtualized.List, _extends({
      deferredMeasurementCache: this.cache,
      height: height,
      width: width,
      ref: this.setVirtualRef,
      overscanRowCount: 10,
      scrollToIndex: realIndex ? realIndex[this.state.selected] : this.state.selected,
      rowCount: totalItems + totalGroups,
      rowRenderer: this.rowRenderer,
      rowHeight: this.cache.rowHeight
    }, virtualized)) : null, !virtualized && children);
  }

}, _class2.Item = _listItem2.default, _class2.defaultProps = {
  getItem: idFn,
  onSelect: idFn,
  onHighlight: idFn
}, _class2.style = {
  list: {
    overflowX: 'visible',
    visibility: 'hidden'
  },
  visible: {
    visibility: 'visible'
  },
  separator: {
    fontSize: 13,
    fontWeight: 400,
    padding: [15, 10, 6],
    justifyContent: 'center',
    // background: [0, 0, 0, 0.02],
    color: [255, 255, 255, 0.35]
  }
}, _initialiseProps = function () {
  this.state = {
    selected: -1 };
  this.totalItems = null;
  this.itemRefs = [];
  this.virtualListRef = null;
  this.totalGroups = 0;

  this.scrollToRow = index => {
    if (!this.virtualListRef) {
      return;
    }
    let row = index;
    if (this.realIndex) {
      row = index === 0 ? 0 : this.realIndex[index] || index + this.totalGroups;
    }
    this.virtualListRef.scrollToRow(row);
  };

  this.measure = () => {
    if (this.virtualListRef) {
      this.virtualListRef.recomputeRowHeights(0);
    }
  };

  this.gatherRefs = index => ref => {
    if (ref) {
      this.itemRefs[index] = ref;
    }
  };

  this.getTotalItems = props => props.items ? props.items.length : React.Children.count(props.children);

  this.isSelected = fn => (...args) => typeof this.state.selected === 'number' ? fn(...args) : null;

  this.select = selector => {
    if (typeof selector === 'number') {
      this.highlightItem(() => selector);
    } else if (typeof selector === 'function' && this.props.items) {
      this.highlightItem(() => this.props.items.findIndex(selector));
    }
  };

  this.rowRenderer = ({ index, key, style, parent }) => {
    if (!this.children || !this.children[index]) {
      console.log('no child', index, this);
      return null;
    }
    const child = this.children[index]({ style });
    return React.createElement(_reactVirtualized.CellMeasurer, {
      cache: this.cache,
      columnIndex: 0,
      key: key,
      parent: parent,
      rowIndex: index
    }, child);
  };

  this.getListItem = (cur, index) => rowProps => {
    const item = this.props.getItem(cur, index);
    if (!item) {
      return null;
    }
    if (React.isValidElement(item)) {
      return React.cloneElement(item, this.getItemProps(index, rowProps, item.type.isListItem));
    }
    // pass object to ListItem
    return React.createElement(_listItem2.default, _extends({}, this.getItemProps(index, rowProps, true), item, {
      key: item.key || item.id || index
    }));
  };

  this.getListChildren = children => React.Children.map(children, (item, index) => rowProps => item ? React.cloneElement(item, this.getItemProps(index, rowProps, item.type.isListItem)) : null);

  this.setVirtualRef = ref => {
    this.virtualListRef = ref;
  };
}, _temp2)) || _class) || _class));

exports.default = List;
//# sourceMappingURL=list.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/listItem.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2597');

var React = _interopRequireWildcard(_react2);

var _index = require('2598');

var _index2 = _interopRequireDefault(_index);

var _class, _class2, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2599');

var _propTypes = require('2600');

var _text = require('2601');

var _text2 = _interopRequireDefault(_text);

var _sizedSurface = require('2602');

var _sizedSurface2 = _interopRequireDefault(_sizedSurface);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  ListItem: {
    displayName: 'ListItem'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/listItem.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const ListItem = _wrapComponent('ListItem')((0, _black.view)(_class = (_temp2 = _class2 = class ListItem extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.getRef = ref => {
      this.props.getRef && this.props.getRef(ref);
      this.node = ref;
    }, _temp;
  }

  componentDidMount() {
    if (this.props.onItemMount) {
      this.props.onItemMount(this);
    }
    if (this.props.measure) {
      this.props.measure();
    }
  }

  render() {
    const _gloss2 = this.glossElement.bind(this);

    const _props = this.props,
          {
      after,
      before,
      borderRadius,
      children: _children,
      date,
      dateSize,
      autoselect,
      isFirstElement,
      isLastElement,
      meta,
      onItemMount,
      onToggle,
      onClick,
      primary,
      row,
      segmented,
      secondary,
      size,
      style,
      ellipse,
      primaryEllipse,
      glowProps,
      editable,
      onFinishEdit,
      iconProps,
      getRef,
      highlight,
      glow,
      childrenProps
    } = _props,
          props = _objectWithoutProperties(_props, ['after', 'before', 'borderRadius', 'children', 'date', 'dateSize', 'autoselect', 'isFirstElement', 'isLastElement', 'meta', 'onItemMount', 'onToggle', 'onClick', 'primary', 'row', 'segmented', 'secondary', 'size', 'style', 'ellipse', 'primaryEllipse', 'glowProps', 'editable', 'onFinishEdit', 'iconProps', 'getRef', 'highlight', 'glow', 'childrenProps']);
    const radiusProps = segmented ? {
      borderRadius: isLastElement || isFirstElement ? borderRadius : 0,
      borderBottomRadius: isLastElement,
      borderTopRadius: isFirstElement
    } : {
      borderRadius
    };

    const highlightValue = typeof highlight === 'function' ? highlight() : highlight;

    let children = _children;
    // allows for reactive children
    if (typeof children === 'function') {
      children = _children();
    }

    return _gloss2(_sizedSurface2.default, _extends({
      tagName: 'listitem',
      size: size,
      sizePadding: 1.2,
      $item: true
    }, radiusProps, {
      border: false,
      background: 'transparent',
      row: true,
      onClick: onClick,
      glow: glow,
      glowProps: glowProps,
      iconProps: _extends({
        alignSelf: 'center',
        opacity: 0.7
      }, iconProps),
      style: style,
      getRef: this.getRef,
      highlight: highlightValue
    }, props), before ? _gloss2('before', null, before) : null, _gloss2('content', null, primary || secondary || date ? _gloss2('above', null, primary || secondary ? _gloss2('prop', { $col: true }, _gloss2(_text2.default, {
      $text: true,
      fontSize: 'inherit',
      css: {
        wordWrap: 'break-word',
        maxHeight: '2.8rem'
      },
      size: size,
      color: 'inherit',
      editable: editable,
      autoselect: autoselect,
      onFinishEdit: onFinishEdit,
      ellipse: primaryEllipse
    }, primary), secondary ? _gloss2(_text2.default, {
      $text: true,
      size: size * 0.85,
      opacity: 0.7,
      ellipse: true
    }, secondary) : null) : null) : null, children && React.isValidElement(children) ? _gloss2('children', null, children) : null, children && !React.isValidElement(children) ? _gloss2(_text2.default, _extends({
      $children: true,

      size: size * 0.9,
      opacity: 0.6
    }, childrenProps), children) : null), after ? _gloss2('after', null, after) : null);
  }

}, _class2.isListItem = true, _class2.contextTypes = {
  uiTheme: _propTypes.object,
  uiActiveTheme: _propTypes.string
}, _class2.defaultProps = {
  size: 1,
  borderWidth: 0,
  ellipse: true,
  glowProps: {
    color: [255, 255, 255],
    scale: 1.1,
    blur: 80,
    opacity: 0.175,
    show: false,
    resist: 60
  }
}, _class2.style = {
  item: {
    maxWidth: '100%'
  },
  content: {
    flex: 1,
    maxWidth: '100%',
    justifyContent: 'center'
  },
  above: {
    maxWidth: '100%',
    flexFlow: 'row',
    flex: 'none',
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  section: {
    width: '100%',
    maxWidth: '100%'
  },
  prop: {
    flex: 1,
    overflow: 'hidden',
    maxWidth: '100%',
    fontWeight: 200,
    padding: [0, 10, 0, 0]
  },
  text: {
    width: '100%'
  },
  date: {
    // alignSelf: 'flex-end',
    justifyContent: 'flex-end',
    // flex: 'inherit',
    margin: ['-1.2rem', 0, 0],
    userSelect: 'none',
    fontSize: 12,
    fontWeight: 200,
    opacity: 0.9
  },
  col: {
    flexDirection: 'column',
    alignItems: 'flex-start'
  },
  flex: {
    flexGrow: 1
  },
  after: {
    margin: ['auto', -5, 'auto', 5]
  },
  before: {
    margin: ['auto', 5, 'auto', 0]
  },
  children: {
    flexFlow: 'row',
    margin: [0, -8],
    flex: 1,
    lineHeight: '1.38rem',
    padding: [0, 8],
    overflow: 'hidden'
  }
}, _temp2)) || _class);

exports.default = ListItem;
//# sourceMappingURL=listItem.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/helpers/parentSize.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _react = require('2774');

var React = _interopRequireWildcard(_react);

var _hoistNonReactStatics = require('2775');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _elementResizeDetector = require('2776');

var _elementResizeDetector2 = _interopRequireDefault(_elementResizeDetector);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const Resize = (0, _elementResizeDetector2.default)({ strategy: 'scroll' });

exports.default = prop => Child => {
  let ParentSize = class ParentSize extends React.PureComponent {
    constructor(...args) {
      var _temp;

      return _temp = super(...args), this.state = {
        dimensions: null
      }, _temp;
    }

    componentWillUnmount() {
      if (this.node) {
        Resize.removeAllListeners(this.node);
      }
      this.unmounted = true;
    }

    measure(parent) {
      if (this.unmounted) {
        return null;
      }
      const node = parent || this.node;
      if (!node) {
        return null;
      }
      const { offsetWidth, offsetHeight } = node;
      const dimensions = {
        width: offsetWidth,
        height: offsetHeight
      };
      this.setState({ dimensions });
      return dimensions;
    }

    get isActive() {
      return !prop || !!this.props[prop];
    }

    setParent(ref) {
      if (!this.node && ref && this.isActive) {
        Resize.listenTo(ref, () => this.measure(ref));
        this.measure(ref);
        this.node = ref;
      }
    }

    render() {
      if (!this.isActive) {
        return React.createElement(Child, _extends({}, this.props, { parentSize: null }));
      }
      const { dimensions } = this.state;
      let parentSize;

      if (dimensions) {
        parentSize = {
          measure: (...args) => this.measure(...args),
          height: this.state.dimensions.height,
          width: this.state.dimensions.width
        };
      }

      const _props = this.props,
            { className, style } = _props,
            props = _objectWithoutProperties(_props, ['className', 'style']);

      return React.createElement('div', {
        className: className,
        style: _extends({}, style, { flex: 1 }),
        ref: x => this.setParent(x)
      }, React.createElement(Child, _extends({}, props, { parentSize: parentSize })));
    }
  };

  (0, _hoistNonReactStatics2.default)(ParentSize, Child);

  return ParentSize;
};
//# sourceMappingURL=parentSize.js.map
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/element-resize-detector.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var forEach = require('974').forEach;
var elementUtilsMaker = require('975');
var listenerHandlerMaker = require('976');
var idGeneratorMaker = require('977');
var idHandlerMaker = require('978');
var reporterMaker = require('979');
var browserDetector = require('980');
var batchProcessorMaker = require('981');
var stateHandler = require('982');

//Detection strategies.
var objectStrategyMaker = require('983');
var scrollStrategyMaker = require('984');

function isCollection(obj) {
  return Array.isArray(obj) || obj.length !== undefined;
}

function toArray(collection) {
  if (!Array.isArray(collection)) {
    var array = [];
    forEach(collection, function (obj) {
      array.push(obj);
    });
    return array;
  } else {
    return collection;
  }
}

function isElement(obj) {
  return obj && obj.nodeType === 1;
}

/**
 * @typedef idHandler
 * @type {object}
 * @property {function} get Gets the resize detector id of the element.
 * @property {function} set Generate and sets the resize detector id of the element.
 */

/**
 * @typedef Options
 * @type {object}
 * @property {boolean} callOnAdd    Determines if listeners should be called when they are getting added.
                                    Default is true. If true, the listener is guaranteed to be called when it has been added.
                                    If false, the listener will not be guarenteed to be called when it has been added (does not prevent it from being called).
 * @property {idHandler} idHandler  A custom id handler that is responsible for generating, setting and retrieving id's for elements.
                                    If not provided, a default id handler will be used.
 * @property {reporter} reporter    A custom reporter that handles reporting logs, warnings and errors.
                                    If not provided, a default id handler will be used.
                                    If set to false, then nothing will be reported.
 * @property {boolean} debug        If set to true, the the system will report debug messages as default for the listenTo method.
 */

/**
 * Creates an element resize detector instance.
 * @public
 * @param {Options?} options Optional global options object that will decide how this instance will work.
 */
module.exports = function (options) {
  options = options || {};

  //idHandler is currently not an option to the listenTo function, so it should not be added to globalOptions.
  var idHandler;

  if (options.idHandler) {
    // To maintain compatability with idHandler.get(element, readonly), make sure to wrap the given idHandler
    // so that readonly flag always is true when it's used here. This may be removed next major version bump.
    idHandler = {
      get: function (element) {
        return options.idHandler.get(element, true);
      },
      set: options.idHandler.set
    };
  } else {
    var idGenerator = idGeneratorMaker();
    var defaultIdHandler = idHandlerMaker({
      idGenerator: idGenerator,
      stateHandler: stateHandler
    });
    idHandler = defaultIdHandler;
  }

  //reporter is currently not an option to the listenTo function, so it should not be added to globalOptions.
  var reporter = options.reporter;

  if (!reporter) {
    //If options.reporter is false, then the reporter should be quiet.
    var quiet = reporter === false;
    reporter = reporterMaker(quiet);
  }

  //batchProcessor is currently not an option to the listenTo function, so it should not be added to globalOptions.
  var batchProcessor = getOption(options, "batchProcessor", batchProcessorMaker({ reporter: reporter }));

  //Options to be used as default for the listenTo function.
  var globalOptions = {};
  globalOptions.callOnAdd = !!getOption(options, "callOnAdd", true);
  globalOptions.debug = !!getOption(options, "debug", false);

  var eventListenerHandler = listenerHandlerMaker(idHandler);
  var elementUtils = elementUtilsMaker({
    stateHandler: stateHandler
  });

  //The detection strategy to be used.
  var detectionStrategy;
  var desiredStrategy = getOption(options, "strategy", "object");
  var strategyOptions = {
    reporter: reporter,
    batchProcessor: batchProcessor,
    stateHandler: stateHandler,
    idHandler: idHandler
  };

  if (desiredStrategy === "scroll") {
    if (browserDetector.isLegacyOpera()) {
      reporter.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy.");
      desiredStrategy = "object";
    } else if (browserDetector.isIE(9)) {
      reporter.warn("Scroll strategy is not supported on IE9. Changing to object strategy.");
      desiredStrategy = "object";
    }
  }

  if (desiredStrategy === "scroll") {
    detectionStrategy = scrollStrategyMaker(strategyOptions);
  } else if (desiredStrategy === "object") {
    detectionStrategy = objectStrategyMaker(strategyOptions);
  } else {
    throw new Error("Invalid strategy name: " + desiredStrategy);
  }

  //Calls can be made to listenTo with elements that are still being installed.
  //Also, same elements can occur in the elements list in the listenTo function.
  //With this map, the ready callbacks can be synchronized between the calls
  //so that the ready callback can always be called when an element is ready - even if
  //it wasn't installed from the function itself.
  var onReadyCallbacks = {};

  /**
   * Makes the given elements resize-detectable and starts listening to resize events on the elements. Calls the event callback for each event for each element.
   * @public
   * @param {Options?} options Optional options object. These options will override the global options. Some options may not be overriden, such as idHandler.
   * @param {element[]|element} elements The given array of elements to detect resize events of. Single element is also valid.
   * @param {function} listener The callback to be executed for each resize event for each element.
   */
  function listenTo(options, elements, listener) {
    function onResizeCallback(element) {
      var listeners = eventListenerHandler.get(element);
      forEach(listeners, function callListenerProxy(listener) {
        listener(element);
      });
    }

    function addListener(callOnAdd, element, listener) {
      eventListenerHandler.add(element, listener);

      if (callOnAdd) {
        listener(element);
      }
    }

    //Options object may be omitted.
    if (!listener) {
      listener = elements;
      elements = options;
      options = {};
    }

    if (!elements) {
      throw new Error("At least one element required.");
    }

    if (!listener) {
      throw new Error("Listener required.");
    }

    if (isElement(elements)) {
      // A single element has been passed in.
      elements = [elements];
    } else if (isCollection(elements)) {
      // Convert collection to array for plugins.
      // TODO: May want to check so that all the elements in the collection are valid elements.
      elements = toArray(elements);
    } else {
      return reporter.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
    }

    var elementsReady = 0;

    var callOnAdd = getOption(options, "callOnAdd", globalOptions.callOnAdd);
    var onReadyCallback = getOption(options, "onReady", function noop() {});
    var debug = getOption(options, "debug", globalOptions.debug);

    forEach(elements, function attachListenerToElement(element) {
      if (!stateHandler.getState(element)) {
        stateHandler.initState(element);
        idHandler.set(element);
      }

      var id = idHandler.get(element);

      debug && reporter.log("Attaching listener to element", id, element);

      if (!elementUtils.isDetectable(element)) {
        debug && reporter.log(id, "Not detectable.");
        if (elementUtils.isBusy(element)) {
          debug && reporter.log(id, "System busy making it detectable");

          //The element is being prepared to be detectable. Do not make it detectable.
          //Just add the listener, because the element will soon be detectable.
          addListener(callOnAdd, element, listener);
          onReadyCallbacks[id] = onReadyCallbacks[id] || [];
          onReadyCallbacks[id].push(function onReady() {
            elementsReady++;

            if (elementsReady === elements.length) {
              onReadyCallback();
            }
          });
          return;
        }

        debug && reporter.log(id, "Making detectable...");
        //The element is not prepared to be detectable, so do prepare it and add a listener to it.
        elementUtils.markBusy(element, true);
        return detectionStrategy.makeDetectable({ debug: debug }, element, function onElementDetectable(element) {
          debug && reporter.log(id, "onElementDetectable");

          if (stateHandler.getState(element)) {
            elementUtils.markAsDetectable(element);
            elementUtils.markBusy(element, false);
            detectionStrategy.addListener(element, onResizeCallback);
            addListener(callOnAdd, element, listener);

            // Since the element size might have changed since the call to "listenTo", we need to check for this change,
            // so that a resize event may be emitted.
            // Having the startSize object is optional (since it does not make sense in some cases such as unrendered elements), so check for its existance before.
            // Also, check the state existance before since the element may have been uninstalled in the installation process.
            var state = stateHandler.getState(element);
            if (state && state.startSize) {
              var width = element.offsetWidth;
              var height = element.offsetHeight;
              if (state.startSize.width !== width || state.startSize.height !== height) {
                onResizeCallback(element);
              }
            }

            if (onReadyCallbacks[id]) {
              forEach(onReadyCallbacks[id], function (callback) {
                callback();
              });
            }
          } else {
            // The element has been unisntalled before being detectable.
            debug && reporter.log(id, "Element uninstalled before being detectable.");
          }

          delete onReadyCallbacks[id];

          elementsReady++;
          if (elementsReady === elements.length) {
            onReadyCallback();
          }
        });
      }

      debug && reporter.log(id, "Already detecable, adding listener.");

      //The element has been prepared to be detectable and is ready to be listened to.
      addListener(callOnAdd, element, listener);
      elementsReady++;
    });

    if (elementsReady === elements.length) {
      onReadyCallback();
    }
  }

  function uninstall(elements) {
    if (!elements) {
      return reporter.error("At least one element is required.");
    }

    if (isElement(elements)) {
      // A single element has been passed in.
      elements = [elements];
    } else if (isCollection(elements)) {
      // Convert collection to array for plugins.
      // TODO: May want to check so that all the elements in the collection are valid elements.
      elements = toArray(elements);
    } else {
      return reporter.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
    }

    forEach(elements, function (element) {
      eventListenerHandler.removeAllListeners(element);
      detectionStrategy.uninstall(element);
      stateHandler.cleanState(element);
    });
  }

  return {
    listenTo: listenTo,
    removeListener: eventListenerHandler.removeListener,
    removeAllListeners: eventListenerHandler.removeAllListeners,
    uninstall: uninstall
  };
};

function getOption(options, name, defaultValue) {
  var value = options[name];

  if ((value === undefined || value === null) && defaultValue !== undefined) {
    return defaultValue;
  }

  return value;
}
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/collection-utils.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var utils = module.exports = {};

/**
 * Loops through the collection and calls the callback for each element. if the callback returns truthy, the loop is broken and returns the same value.
 * @public
 * @param {*} collection The collection to loop through. Needs to have a length property set and have indices set from 0 to length - 1.
 * @param {function} callback The callback to be called for each element. The element will be given as a parameter to the callback. If this callback returns truthy, the loop is broken and the same value is returned.
 * @returns {*} The value that a callback has returned (if truthy). Otherwise nothing.
 */
utils.forEach = function (collection, callback) {
  for (var i = 0; i < collection.length; i++) {
    var result = callback(collection[i]);
    if (result) {
      return result;
    }
  }
};
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/element-utils.js", function(__filename, __dirname, require, module, exports) {
"use strict";

module.exports = function (options) {
  var getState = options.stateHandler.getState;

  /**
   * Tells if the element has been made detectable and ready to be listened for resize events.
   * @public
   * @param {element} The element to check.
   * @returns {boolean} True or false depending on if the element is detectable or not.
   */
  function isDetectable(element) {
    var state = getState(element);
    return state && !!state.isDetectable;
  }

  /**
   * Marks the element that it has been made detectable and ready to be listened for resize events.
   * @public
   * @param {element} The element to mark.
   */
  function markAsDetectable(element) {
    getState(element).isDetectable = true;
  }

  /**
   * Tells if the element is busy or not.
   * @public
   * @param {element} The element to check.
   * @returns {boolean} True or false depending on if the element is busy or not.
   */
  function isBusy(element) {
    return !!getState(element).busy;
  }

  /**
   * Marks the object is busy and should not be made detectable.
   * @public
   * @param {element} element The element to mark.
   * @param {boolean} busy If the element is busy or not.
   */
  function markBusy(element, busy) {
    getState(element).busy = !!busy;
  }

  return {
    isDetectable: isDetectable,
    markAsDetectable: markAsDetectable,
    isBusy: isBusy,
    markBusy: markBusy
  };
};
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/listener-handler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

module.exports = function (idHandler) {
  var eventListeners = {};

  /**
   * Gets all listeners for the given element.
   * @public
   * @param {element} element The element to get all listeners for.
   * @returns All listeners for the given element.
   */
  function getListeners(element) {
    var id = idHandler.get(element);

    if (id === undefined) {
      return [];
    }

    return eventListeners[id] || [];
  }

  /**
   * Stores the given listener for the given element. Will not actually add the listener to the element.
   * @public
   * @param {element} element The element that should have the listener added.
   * @param {function} listener The callback that the element has added.
   */
  function addListener(element, listener) {
    var id = idHandler.get(element);

    if (!eventListeners[id]) {
      eventListeners[id] = [];
    }

    eventListeners[id].push(listener);
  }

  function removeListener(element, listener) {
    var listeners = getListeners(element);
    for (var i = 0, len = listeners.length; i < len; ++i) {
      if (listeners[i] === listener) {
        listeners.splice(i, 1);
        break;
      }
    }
  }

  function removeAllListeners(element) {
    var listeners = getListeners(element);
    if (!listeners) {
      return;
    }
    listeners.length = 0;
  }

  return {
    get: getListeners,
    add: addListener,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners
  };
};
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/id-generator.js", function(__filename, __dirname, require, module, exports) {
"use strict";

module.exports = function () {
  var idCount = 1;

  /**
   * Generates a new unique id in the context.
   * @public
   * @returns {number} A unique id in the context.
   */
  function generate() {
    return idCount++;
  }

  return {
    generate: generate
  };
};
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/id-handler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

module.exports = function (options) {
  var idGenerator = options.idGenerator;
  var getState = options.stateHandler.getState;

  /**
   * Gets the resize detector id of the element.
   * @public
   * @param {element} element The target element to get the id of.
   * @returns {string|number|null} The id of the element. Null if it has no id.
   */
  function getId(element) {
    var state = getState(element);

    if (state && state.id !== undefined) {
      return state.id;
    }

    return null;
  }

  /**
   * Sets the resize detector id of the element. Requires the element to have a resize detector state initialized.
   * @public
   * @param {element} element The target element to set the id of.
   * @returns {string|number|null} The id of the element.
   */
  function setId(element) {
    var state = getState(element);

    if (!state) {
      throw new Error("setId required the element to have a resize detection state.");
    }

    var id = idGenerator.generate();

    state.id = id;

    return id;
  }

  return {
    get: getId,
    set: setId
  };
};
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/reporter.js", function(__filename, __dirname, require, module, exports) {
"use strict";

/* global console: false */

/**
 * Reporter that handles the reporting of logs, warnings and errors.
 * @public
 * @param {boolean} quiet Tells if the reporter should be quiet or not.
 */

module.exports = function (quiet) {
  function noop() {
    //Does nothing.
  }

  var reporter = {
    log: noop,
    warn: noop,
    error: noop
  };

  if (!quiet && window.console) {
    var attachFunction = function (reporter, name) {
      //The proxy is needed to be able to call the method with the console context,
      //since we cannot use bind.
      reporter[name] = function reporterProxy() {
        var f = console[name];
        if (f.apply) {
          //IE9 does not support console.log.apply :)
          f.apply(console, arguments);
        } else {
          for (var i = 0; i < arguments.length; i++) {
            f(arguments[i]);
          }
        }
      };
    };

    attachFunction(reporter, "log");
    attachFunction(reporter, "warn");
    attachFunction(reporter, "error");
  }

  return reporter;
};
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/browser-detector.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var detector = module.exports = {};

detector.isIE = function (version) {
  function isAnyIeVersion() {
    var agent = navigator.userAgent.toLowerCase();
    return agent.indexOf("msie") !== -1 || agent.indexOf("trident") !== -1 || agent.indexOf(" edge/") !== -1;
  }

  if (!isAnyIeVersion()) {
    return false;
  }

  if (!version) {
    return true;
  }

  //Shamelessly stolen from https://gist.github.com/padolsey/527683
  var ieVersion = function () {
    var undef,
        v = 3,
        div = document.createElement("div"),
        all = div.getElementsByTagName("i");

    do {
      div.innerHTML = "<!--[if gt IE " + ++v + "]><i></i><![endif]-->";
    } while (all[0]);

    return v > 4 ? v : undef;
  }();

  return version === ieVersion;
};

detector.isLegacyOpera = function () {
  return !!window.opera;
};
});
__sbPundle.registerModule("../node_modules/batch-processor/src/batch-processor.js", function(__filename, __dirname, require, module, exports) {
(function(process){
"use strict";

var utils = require('1106');

module.exports = function batchProcessorMaker(options) {
  options = options || {};
  var reporter = options.reporter;
  var asyncProcess = utils.getOption(options, "async", true);
  var autoProcess = utils.getOption(options, "auto", true);

  if (autoProcess && !asyncProcess) {
    reporter && reporter.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true.");
    asyncProcess = true;
  }

  var batch = Batch();
  var asyncFrameHandler;
  var isProcessing = false;

  function addFunction(level, fn) {
    if (!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {
      // Since this is async, it is guaranteed to be executed after that the fn is added to the batch.
      // This needs to be done before, since we're checking the size of the batch to be 0.
      processBatchAsync();
    }

    batch.add(level, fn);
  }

  function processBatch() {
    // Save the current batch, and create a new batch so that incoming functions are not added into the currently processing batch.
    // Continue processing until the top-level batch is empty (functions may be added to the new batch while processing, and so on).
    isProcessing = true;
    while (batch.size()) {
      var processingBatch = batch;
      batch = Batch();
      processingBatch.process();
    }
    isProcessing = false;
  }

  function forceProcessBatch(localAsyncProcess) {
    if (isProcessing) {
      return;
    }

    if (localAsyncProcess === undefined) {
      localAsyncProcess = asyncProcess;
    }

    if (asyncFrameHandler) {
      cancelFrame(asyncFrameHandler);
      asyncFrameHandler = null;
    }

    if (localAsyncProcess) {
      processBatchAsync();
    } else {
      processBatch();
    }
  }

  function processBatchAsync() {
    asyncFrameHandler = requestFrame(processBatch);
  }

  function clearBatch() {
    batch = {};
    batchSize = 0;
    topLevel = 0;
    bottomLevel = 0;
  }

  function cancelFrame(listener) {
    // var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;
    var cancel = clearTimeout;
    return cancel(listener);
  }

  function requestFrame(callback) {
    // var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) { return window.setTimeout(fn, 20); };
    var raf = function (fn) {
      return setTimeout(fn, 0);
    };
    return raf(callback);
  }

  return {
    add: addFunction,
    force: forceProcessBatch
  };
};

function Batch() {
  var batch = {};
  var size = 0;
  var topLevel = 0;
  var bottomLevel = 0;

  function add(level, fn) {
    if (!fn) {
      fn = level;
      level = 0;
    }

    if (level > topLevel) {
      topLevel = level;
    } else if (level < bottomLevel) {
      bottomLevel = level;
    }

    if (!batch[level]) {
      batch[level] = [];
    }

    batch[level].push(fn);
    size++;
  }

  function process() {
    for (var level = bottomLevel; level <= topLevel; level++) {
      var fns = batch[level];

      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i];
        fn();
      }
    }
  }

  function getSize() {
    return size;
  }

  return {
    add: add,
    process: process,
    size: getSize
  };
}
})(require(1107))
});
__sbPundle.registerModule("../node_modules/batch-processor/src/utils.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var utils = module.exports = {};

utils.getOption = getOption;

function getOption(options, name, defaultValue) {
  var value = options[name];

  if ((value === undefined || value === null) && defaultValue !== undefined) {
    return defaultValue;
  }

  return value;
}
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/state-handler.js", function(__filename, __dirname, require, module, exports) {
"use strict";

var prop = "_erd";

function initState(element) {
  element[prop] = {};
  return getState(element);
}

function getState(element) {
  return element[prop];
}

function cleanState(element) {
  delete element[prop];
}

module.exports = {
  initState: initState,
  getState: getState,
  cleanState: cleanState
};
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/detection-strategy/object.js", function(__filename, __dirname, require, module, exports) {
/**
 * Resize detection strategy that injects objects to elements in order to detect resize events.
 * Heavily inspired by: http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/
 */

"use strict";

var browserDetector = require('1069');

module.exports = function (options) {
  options = options || {};
  var reporter = options.reporter;
  var batchProcessor = options.batchProcessor;
  var getState = options.stateHandler.getState;

  if (!reporter) {
    throw new Error("Missing required dependency: reporter.");
  }

  /**
   * Adds a resize event listener to the element.
   * @public
   * @param {element} element The element that should have the listener added.
   * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.
   */
  function addListener(element, listener) {
    if (!getObject(element)) {
      throw new Error("Element is not detectable by this strategy.");
    }

    function listenerProxy() {
      listener(element);
    }

    if (browserDetector.isIE(8)) {
      //IE 8 does not support object, but supports the resize event directly on elements.
      getState(element).object = {
        proxy: listenerProxy
      };
      element.attachEvent("onresize", listenerProxy);
    } else {
      var object = getObject(element);
      object.contentDocument.defaultView.addEventListener("resize", listenerProxy);
    }
  }

  /**
   * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.
   * @private
   * @param {object} options Optional options object.
   * @param {element} element The element to make detectable
   * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.
   */
  function makeDetectable(options, element, callback) {
    if (!callback) {
      callback = element;
      element = options;
      options = null;
    }

    options = options || {};
    var debug = options.debug;

    function injectObject(element, callback) {
      var OBJECT_STYLE = "display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; padding: 0; margin: 0; opacity: 0; z-index: -1000; pointer-events: none;";

      //The target element needs to be positioned (everything except static) so the absolute positioned object will be positioned relative to the target element.

      // Position altering may be performed directly or on object load, depending on if style resolution is possible directly or not.
      var positionCheckPerformed = false;

      // The element may not yet be attached to the DOM, and therefore the style object may be empty in some browsers.
      // Since the style object is a reference, it will be updated as soon as the element is attached to the DOM.
      var style = window.getComputedStyle(element);
      var width = element.offsetWidth;
      var height = element.offsetHeight;

      getState(element).startSize = {
        width: width,
        height: height
      };

      function mutateDom() {
        function alterPositionStyles() {
          if (style.position === "static") {
            element.style.position = "relative";

            var removeRelativeStyles = function (reporter, element, style, property) {
              function getNumericalValue(value) {
                return value.replace(/[^-\d\.]/g, "");
              }

              var value = style[property];

              if (value !== "auto" && getNumericalValue(value) !== "0") {
                reporter.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element);
                element.style[property] = 0;
              }
            };

            //Check so that there are no accidental styles that will make the element styled differently now that is is relative.
            //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).
            removeRelativeStyles(reporter, element, style, "top");
            removeRelativeStyles(reporter, element, style, "right");
            removeRelativeStyles(reporter, element, style, "bottom");
            removeRelativeStyles(reporter, element, style, "left");
          }
        }

        function onObjectLoad() {
          // The object has been loaded, which means that the element now is guaranteed to be attached to the DOM.
          if (!positionCheckPerformed) {
            alterPositionStyles();
          }

          /*jshint validthis: true */

          function getDocument(element, callback) {
            //Opera 12 seem to call the object.onload before the actual document has been created.
            //So if it is not present, poll it with an timeout until it is present.
            //TODO: Could maybe be handled better with object.onreadystatechange or similar.
            if (!element.contentDocument) {
              setTimeout(function checkForObjectDocument() {
                getDocument(element, callback);
              }, 100);

              return;
            }

            callback(element.contentDocument);
          }

          //Mutating the object element here seems to fire another load event.
          //Mutating the inner document of the object element is fine though.
          var objectElement = this;

          //Create the style element to be added to the object.
          getDocument(objectElement, function onObjectDocumentReady(objectDocument) {
            //Notify that the element is ready to be listened to.
            callback(element);
          });
        }

        // The element may be detached from the DOM, and some browsers does not support style resolving of detached elements.
        // The alterPositionStyles needs to be delayed until we know the element has been attached to the DOM (which we are sure of when the onObjectLoad has been fired), if style resolution is not possible.
        if (style.position !== "") {
          alterPositionStyles(style);
          positionCheckPerformed = true;
        }

        //Add an object element as a child to the target element that will be listened to for resize events.
        var object = document.createElement("object");
        object.style.cssText = OBJECT_STYLE;
        object.tabIndex = -1;
        object.type = "text/html";
        object.onload = onObjectLoad;

        //Safari: This must occur before adding the object to the DOM.
        //IE: Does not like that this happens before, even if it is also added after.
        if (!browserDetector.isIE()) {
          object.data = "about:blank";
        }

        element.appendChild(object);
        getState(element).object = object;

        //IE: This must occur after adding the object to the DOM.
        if (browserDetector.isIE()) {
          object.data = "about:blank";
        }
      }

      if (batchProcessor) {
        batchProcessor.add(mutateDom);
      } else {
        mutateDom();
      }
    }

    if (browserDetector.isIE(8)) {
      //IE 8 does not support objects properly. Luckily they do support the resize event.
      //So do not inject the object and notify that the element is already ready to be listened to.
      //The event handler for the resize event is attached in the utils.addListener instead.
      callback(element);
    } else {
      injectObject(element, callback);
    }
  }

  /**
   * Returns the child object of the target element.
   * @private
   * @param {element} element The target element.
   * @returns The object element of the target.
   */
  function getObject(element) {
    return getState(element).object;
  }

  function uninstall(element) {
    if (browserDetector.isIE(8)) {
      element.detachEvent("onresize", getState(element).object.proxy);
    } else {
      element.removeChild(getObject(element));
    }
    delete getState(element).object;
  }

  return {
    makeDetectable: makeDetectable,
    addListener: addListener,
    uninstall: uninstall
  };
};
});
__sbPundle.registerModule("../node_modules/element-resize-detector/src/detection-strategy/scroll.js", function(__filename, __dirname, require, module, exports) {
/**
 * Resize detection strategy that injects divs to elements in order to detect resize events on scroll events.
 * Heavily inspired by: https://github.com/marcj/css-element-queries/blob/master/src/ResizeSensor.js
 */

"use strict";

var forEach = require('1070').forEach;

module.exports = function (options) {
  options = options || {};
  var reporter = options.reporter;
  var batchProcessor = options.batchProcessor;
  var getState = options.stateHandler.getState;
  var hasState = options.stateHandler.hasState;
  var idHandler = options.idHandler;

  if (!batchProcessor) {
    throw new Error("Missing required dependency: batchProcessor");
  }

  if (!reporter) {
    throw new Error("Missing required dependency: reporter.");
  }

  //TODO: Could this perhaps be done at installation time?
  var scrollbarSizes = getScrollbarSizes();

  // Inject the scrollbar styling that prevents them from appearing sometimes in Chrome.
  // The injected container needs to have a class, so that it may be styled with CSS (pseudo elements).
  var styleId = "erd_scroll_detection_scrollbar_style";
  var detectionContainerClass = "erd_scroll_detection_container";
  injectScrollStyle(styleId, detectionContainerClass);

  function getScrollbarSizes() {
    var width = 500;
    var height = 500;

    var child = document.createElement("div");
    child.style.cssText = "position: absolute; width: " + width * 2 + "px; height: " + height * 2 + "px; visibility: hidden; margin: 0; padding: 0;";

    var container = document.createElement("div");
    container.style.cssText = "position: absolute; width: " + width + "px; height: " + height + "px; overflow: scroll; visibility: none; top: " + -width * 3 + "px; left: " + -height * 3 + "px; visibility: hidden; margin: 0; padding: 0;";

    container.appendChild(child);

    document.body.insertBefore(container, document.body.firstChild);

    var widthSize = width - container.clientWidth;
    var heightSize = height - container.clientHeight;

    document.body.removeChild(container);

    return {
      width: widthSize,
      height: heightSize
    };
  }

  function injectScrollStyle(styleId, containerClass) {
    function injectStyle(style, method) {
      method = method || function (element) {
        document.head.appendChild(element);
      };

      var styleElement = document.createElement("style");
      styleElement.innerHTML = style;
      styleElement.id = styleId;
      method(styleElement);
      return styleElement;
    }

    if (!document.getElementById(styleId)) {
      var containerAnimationClass = containerClass + "_animation";
      var containerAnimationActiveClass = containerClass + "_animation_active";
      var style = "/* Created by the element-resize-detector library. */\n";
      style += "." + containerClass + " > div::-webkit-scrollbar { display: none; }\n\n";
      style += "." + containerAnimationActiveClass + " { -webkit-animation-duration: 0.1s; animation-duration: 0.1s; -webkit-animation-name: " + containerAnimationClass + "; animation-name: " + containerAnimationClass + "; }\n";
      style += "@-webkit-keyframes " + containerAnimationClass + " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n";
      style += "@keyframes " + containerAnimationClass + " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }";
      injectStyle(style);
    }
  }

  function addAnimationClass(element) {
    element.className += " " + detectionContainerClass + "_animation_active";
  }

  function addEvent(el, name, cb) {
    if (el.addEventListener) {
      el.addEventListener(name, cb);
    } else if (el.attachEvent) {
      el.attachEvent("on" + name, cb);
    } else {
      return reporter.error("[scroll] Don't know how to add event listeners.");
    }
  }

  function removeEvent(el, name, cb) {
    if (el.removeEventListener) {
      el.removeEventListener(name, cb);
    } else if (el.detachEvent) {
      el.detachEvent("on" + name, cb);
    } else {
      return reporter.error("[scroll] Don't know how to remove event listeners.");
    }
  }

  function getExpandElement(element) {
    return getState(element).container.childNodes[0].childNodes[0].childNodes[0];
  }

  function getShrinkElement(element) {
    return getState(element).container.childNodes[0].childNodes[0].childNodes[1];
  }

  /**
   * Adds a resize event listener to the element.
   * @public
   * @param {element} element The element that should have the listener added.
   * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.
   */
  function addListener(element, listener) {
    var listeners = getState(element).listeners;

    if (!listeners.push) {
      throw new Error("Cannot add listener to an element that is not detectable.");
    }

    getState(element).listeners.push(listener);
  }

  /**
   * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.
   * @private
   * @param {object} options Optional options object.
   * @param {element} element The element to make detectable
   * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.
   */
  function makeDetectable(options, element, callback) {
    if (!callback) {
      callback = element;
      element = options;
      options = null;
    }

    options = options || {};

    function debug() {
      if (options.debug) {
        var args = Array.prototype.slice.call(arguments);
        args.unshift(idHandler.get(element), "Scroll: ");
        if (reporter.log.apply) {
          reporter.log.apply(null, args);
        } else {
          for (var i = 0; i < args.length; i++) {
            reporter.log(args[i]);
          }
        }
      }
    }

    function isDetached(element) {
      function isInDocument(element) {
        return element === element.ownerDocument.body || element.ownerDocument.body.contains(element);
      }

      if (!isInDocument(element)) {
        return true;
      }

      // FireFox returns null style in hidden iframes. See https://github.com/wnr/element-resize-detector/issues/68 and https://bugzilla.mozilla.org/show_bug.cgi?id=795520
      if (getComputedStyle(element) === null) {
        return true;
      }

      return false;
    }

    function isUnrendered(element) {
      // Check the absolute positioned container since the top level container is display: inline.
      var container = getState(element).container.childNodes[0];
      var style = getComputedStyle(container);
      return !style.width || style.width.indexOf("px") === -1; //Can only compute pixel value when rendered.
    }

    function getStyle() {
      // Some browsers only force layouts when actually reading the style properties of the style object, so make sure that they are all read here,
      // so that the user of the function can be sure that it will perform the layout here, instead of later (important for batching).
      var elementStyle = getComputedStyle(element);
      var style = {};
      style.position = elementStyle.position;
      style.width = element.offsetWidth;
      style.height = element.offsetHeight;
      style.top = elementStyle.top;
      style.right = elementStyle.right;
      style.bottom = elementStyle.bottom;
      style.left = elementStyle.left;
      style.widthCSS = elementStyle.width;
      style.heightCSS = elementStyle.height;
      return style;
    }

    function storeStartSize() {
      var style = getStyle();
      getState(element).startSize = {
        width: style.width,
        height: style.height
      };
      debug("Element start size", getState(element).startSize);
    }

    function initListeners() {
      getState(element).listeners = [];
    }

    function storeStyle() {
      debug("storeStyle invoked.");
      if (!getState(element)) {
        debug("Aborting because element has been uninstalled");
        return;
      }

      var style = getStyle();
      getState(element).style = style;
    }

    function storeCurrentSize(element, width, height) {
      getState(element).lastWidth = width;
      getState(element).lastHeight = height;
    }

    function getExpandChildElement(element) {
      return getExpandElement(element).childNodes[0];
    }

    function getWidthOffset() {
      return 2 * scrollbarSizes.width + 1;
    }

    function getHeightOffset() {
      return 2 * scrollbarSizes.height + 1;
    }

    function getExpandWidth(width) {
      return width + 10 + getWidthOffset();
    }

    function getExpandHeight(height) {
      return height + 10 + getHeightOffset();
    }

    function getShrinkWidth(width) {
      return width * 2 + getWidthOffset();
    }

    function getShrinkHeight(height) {
      return height * 2 + getHeightOffset();
    }

    function positionScrollbars(element, width, height) {
      var expand = getExpandElement(element);
      var shrink = getShrinkElement(element);
      var expandWidth = getExpandWidth(width);
      var expandHeight = getExpandHeight(height);
      var shrinkWidth = getShrinkWidth(width);
      var shrinkHeight = getShrinkHeight(height);
      expand.scrollLeft = expandWidth;
      expand.scrollTop = expandHeight;
      shrink.scrollLeft = shrinkWidth;
      shrink.scrollTop = shrinkHeight;
    }

    function injectContainerElement() {
      var container = getState(element).container;

      if (!container) {
        container = document.createElement("div");
        container.className = detectionContainerClass;
        container.style.cssText = "visibility: hidden; display: inline; width: 0px; height: 0px; z-index: -1; overflow: hidden; margin: 0; padding: 0;";
        getState(element).container = container;
        addAnimationClass(container);
        element.appendChild(container);

        var onAnimationStart = function () {
          getState(element).onRendered && getState(element).onRendered();
        };

        addEvent(container, "animationstart", onAnimationStart);

        // Store the event handler here so that they may be removed when uninstall is called.
        // See uninstall function for an explanation why it is needed.
        getState(element).onAnimationStart = onAnimationStart;
      }

      return container;
    }

    function injectScrollElements() {
      function alterPositionStyles() {
        var style = getState(element).style;

        if (style.position === "static") {
          element.style.position = "relative";

          var removeRelativeStyles = function (reporter, element, style, property) {
            function getNumericalValue(value) {
              return value.replace(/[^-\d\.]/g, "");
            }

            var value = style[property];

            if (value !== "auto" && getNumericalValue(value) !== "0") {
              reporter.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element);
              element.style[property] = 0;
            }
          };

          //Check so that there are no accidental styles that will make the element styled differently now that is is relative.
          //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).
          removeRelativeStyles(reporter, element, style, "top");
          removeRelativeStyles(reporter, element, style, "right");
          removeRelativeStyles(reporter, element, style, "bottom");
          removeRelativeStyles(reporter, element, style, "left");
        }
      }

      function getLeftTopBottomRightCssText(left, top, bottom, right) {
        left = !left ? "0" : left + "px";
        top = !top ? "0" : top + "px";
        bottom = !bottom ? "0" : bottom + "px";
        right = !right ? "0" : right + "px";

        return "left: " + left + "; top: " + top + "; right: " + right + "; bottom: " + bottom + ";";
      }

      debug("Injecting elements");

      if (!getState(element)) {
        debug("Aborting because element has been uninstalled");
        return;
      }

      alterPositionStyles();

      var rootContainer = getState(element).container;

      if (!rootContainer) {
        rootContainer = injectContainerElement();
      }

      // Due to this WebKit bug https://bugs.webkit.org/show_bug.cgi?id=80808 (currently fixed in Blink, but still present in WebKit browsers such as Safari),
      // we need to inject two containers, one that is width/height 100% and another that is left/top -1px so that the final container always is 1x1 pixels bigger than
      // the targeted element.
      // When the bug is resolved, "containerContainer" may be removed.

      // The outer container can occasionally be less wide than the targeted when inside inline elements element in WebKit (see https://bugs.webkit.org/show_bug.cgi?id=152980).
      // This should be no problem since the inner container either way makes sure the injected scroll elements are at least 1x1 px.

      var scrollbarWidth = scrollbarSizes.width;
      var scrollbarHeight = scrollbarSizes.height;
      var containerContainerStyle = "position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; width: 100%; height: 100%; left: 0px; top: 0px;";
      var containerStyle = "position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; " + getLeftTopBottomRightCssText(-(1 + scrollbarWidth), -(1 + scrollbarHeight), -scrollbarHeight, -scrollbarWidth);
      var expandStyle = "position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;";
      var shrinkStyle = "position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;";
      var expandChildStyle = "position: absolute; left: 0; top: 0;";
      var shrinkChildStyle = "position: absolute; width: 200%; height: 200%;";

      var containerContainer = document.createElement("div");
      var container = document.createElement("div");
      var expand = document.createElement("div");
      var expandChild = document.createElement("div");
      var shrink = document.createElement("div");
      var shrinkChild = document.createElement("div");

      // Some browsers choke on the resize system being rtl, so force it to ltr. https://github.com/wnr/element-resize-detector/issues/56
      // However, dir should not be set on the top level container as it alters the dimensions of the target element in some browsers.
      containerContainer.dir = "ltr";

      containerContainer.style.cssText = containerContainerStyle;
      containerContainer.className = detectionContainerClass;
      container.className = detectionContainerClass;
      container.style.cssText = containerStyle;
      expand.style.cssText = expandStyle;
      expandChild.style.cssText = expandChildStyle;
      shrink.style.cssText = shrinkStyle;
      shrinkChild.style.cssText = shrinkChildStyle;

      expand.appendChild(expandChild);
      shrink.appendChild(shrinkChild);
      container.appendChild(expand);
      container.appendChild(shrink);
      containerContainer.appendChild(container);
      rootContainer.appendChild(containerContainer);

      function onExpandScroll() {
        getState(element).onExpand && getState(element).onExpand();
      }

      function onShrinkScroll() {
        getState(element).onShrink && getState(element).onShrink();
      }

      addEvent(expand, "scroll", onExpandScroll);
      addEvent(shrink, "scroll", onShrinkScroll);

      // Store the event handlers here so that they may be removed when uninstall is called.
      // See uninstall function for an explanation why it is needed.
      getState(element).onExpandScroll = onExpandScroll;
      getState(element).onShrinkScroll = onShrinkScroll;
    }

    function registerListenersAndPositionElements() {
      function updateChildSizes(element, width, height) {
        var expandChild = getExpandChildElement(element);
        var expandWidth = getExpandWidth(width);
        var expandHeight = getExpandHeight(height);
        expandChild.style.width = expandWidth + "px";
        expandChild.style.height = expandHeight + "px";
      }

      function updateDetectorElements(done) {
        var width = element.offsetWidth;
        var height = element.offsetHeight;

        debug("Storing current size", width, height);

        // Store the size of the element sync here, so that multiple scroll events may be ignored in the event listeners.
        // Otherwise the if-check in handleScroll is useless.
        storeCurrentSize(element, width, height);

        // Since we delay the processing of the batch, there is a risk that uninstall has been called before the batch gets to execute.
        // Since there is no way to cancel the fn executions, we need to add an uninstall guard to all fns of the batch.

        batchProcessor.add(0, function performUpdateChildSizes() {
          if (!getState(element)) {
            debug("Aborting because element has been uninstalled");
            return;
          }

          if (!areElementsInjected()) {
            debug("Aborting because element container has not been initialized");
            return;
          }

          if (options.debug) {
            var w = element.offsetWidth;
            var h = element.offsetHeight;

            if (w !== width || h !== height) {
              reporter.warn(idHandler.get(element), "Scroll: Size changed before updating detector elements.");
            }
          }

          updateChildSizes(element, width, height);
        });

        batchProcessor.add(1, function updateScrollbars() {
          if (!getState(element)) {
            debug("Aborting because element has been uninstalled");
            return;
          }

          if (!areElementsInjected()) {
            debug("Aborting because element container has not been initialized");
            return;
          }

          positionScrollbars(element, width, height);
        });

        if (done) {
          batchProcessor.add(2, function () {
            if (!getState(element)) {
              debug("Aborting because element has been uninstalled");
              return;
            }

            if (!areElementsInjected()) {
              debug("Aborting because element container has not been initialized");
              return;
            }

            done();
          });
        }
      }

      function areElementsInjected() {
        return !!getState(element).container;
      }

      function notifyListenersIfNeeded() {
        function isFirstNotify() {
          return getState(element).lastNotifiedWidth === undefined;
        }

        debug("notifyListenersIfNeeded invoked");

        var state = getState(element);

        // Don't notify the if the current size is the start size, and this is the first notification.
        if (isFirstNotify() && state.lastWidth === state.startSize.width && state.lastHeight === state.startSize.height) {
          return debug("Not notifying: Size is the same as the start size, and there has been no notification yet.");
        }

        // Don't notify if the size already has been notified.
        if (state.lastWidth === state.lastNotifiedWidth && state.lastHeight === state.lastNotifiedHeight) {
          return debug("Not notifying: Size already notified");
        }

        debug("Current size not notified, notifying...");
        state.lastNotifiedWidth = state.lastWidth;
        state.lastNotifiedHeight = state.lastHeight;
        forEach(getState(element).listeners, function (listener) {
          listener(element);
        });
      }

      function handleRender() {
        debug("startanimation triggered.");

        if (isUnrendered(element)) {
          debug("Ignoring since element is still unrendered...");
          return;
        }

        debug("Element rendered.");
        var expand = getExpandElement(element);
        var shrink = getShrinkElement(element);
        if (expand.scrollLeft === 0 || expand.scrollTop === 0 || shrink.scrollLeft === 0 || shrink.scrollTop === 0) {
          debug("Scrollbars out of sync. Updating detector elements...");
          updateDetectorElements(notifyListenersIfNeeded);
        }
      }

      function handleScroll() {
        debug("Scroll detected.");

        if (isUnrendered(element)) {
          // Element is still unrendered. Skip this scroll event.
          debug("Scroll event fired while unrendered. Ignoring...");
          return;
        }

        var width = element.offsetWidth;
        var height = element.offsetHeight;

        if (width !== element.lastWidth || height !== element.lastHeight) {
          debug("Element size changed.");
          updateDetectorElements(notifyListenersIfNeeded);
        } else {
          debug("Element size has not changed (" + width + "x" + height + ").");
        }
      }

      debug("registerListenersAndPositionElements invoked.");

      if (!getState(element)) {
        debug("Aborting because element has been uninstalled");
        return;
      }

      getState(element).onRendered = handleRender;
      getState(element).onExpand = handleScroll;
      getState(element).onShrink = handleScroll;

      var style = getState(element).style;
      updateChildSizes(element, style.width, style.height);
    }

    function finalizeDomMutation() {
      debug("finalizeDomMutation invoked.");

      if (!getState(element)) {
        debug("Aborting because element has been uninstalled");
        return;
      }

      var style = getState(element).style;
      storeCurrentSize(element, style.width, style.height);
      positionScrollbars(element, style.width, style.height);
    }

    function ready() {
      callback(element);
    }

    function install() {
      debug("Installing...");
      initListeners();
      storeStartSize();

      batchProcessor.add(0, storeStyle);
      batchProcessor.add(1, injectScrollElements);
      batchProcessor.add(2, registerListenersAndPositionElements);
      batchProcessor.add(3, finalizeDomMutation);
      batchProcessor.add(4, ready);
    }

    debug("Making detectable...");

    if (isDetached(element)) {
      debug("Element is detached");

      injectContainerElement();

      debug("Waiting until element is attached...");

      getState(element).onRendered = function () {
        debug("Element is now attached");
        install();
      };
    } else {
      install();
    }
  }

  function uninstall(element) {
    var state = getState(element);

    if (!state) {
      // Uninstall has been called on a non-erd element.
      return;
    }

    // Uninstall may have been called in the following scenarios:
    // (1) Right between the sync code and async batch (here state.busy = true, but nothing have been registered or injected).
    // (2) In the ready callback of the last level of the batch by another element (here, state.busy = true, but all the stuff has been injected).
    // (3) After the installation process (here, state.busy = false and all the stuff has been injected).
    // So to be on the safe side, let's check for each thing before removing.

    // We need to remove the event listeners, because otherwise the event might fire on an uninstall element which results in an error when trying to get the state of the element.
    state.onExpandScroll && removeEvent(getExpandElement(element), "scroll", state.onExpandScroll);
    state.onShrinkScroll && removeEvent(getShrinkElement(element), "scroll", state.onShrinkScroll);
    state.onAnimationStart && removeEvent(state.container, "animationstart", state.onAnimationStart);

    state.container && element.removeChild(state.container);
  }

  return {
    makeDetectable: makeDetectable,
    addListener: addListener,
    uninstall: uninstall
  };
};
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/ellipse.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2570');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2571');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _black = require('2572');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const _components = {
  Ellipse: {
    displayName: 'Ellipse'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/ellipse.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Ellipse = _wrapComponent('Ellipse')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Ellipse extends _react3.default.Component {
  render() {
    const _gloss = this.glossElement.bind(this);

    return _gloss('ellipse', this.props);
  }

}, _class2.style = {
  ellipse: {
    display: 'block',
    width: '100%',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  }
}, _temp)) || _class));

exports.default = Ellipse;
//# sourceMappingURL=ellipse.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/contextMenu.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2573');

var React = _interopRequireWildcard(_react2);

var _index = require('2574');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp, _dec2, _class4, _class5, _temp3;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2575');

var _reactDom = require('2576');

var _propTypes = require('2577');

var _list = require('2578');

var _list2 = _interopRequireDefault(_list);

var _popover = require('2579');

var _popover2 = _interopRequireDefault(_popover);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  ContextMenuTarget: {
    displayName: 'ContextMenuTarget'
  },
  ContextMenu: {
    displayName: 'ContextMenu'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/contextMenu.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const ContextMenuTarget = _wrapComponent('ContextMenuTarget')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class ContextMenuTarget extends React.Component {

  componentDidMount() {
    const node = (0, _reactDom.findDOMNode)(this);
    this.on(node, 'contextmenu', () => {
      this.context.contextMenu.setData(this.props.data);
    });
  }

  render(_ref) {
    let { children } = _ref,
        props = _objectWithoutProperties(_ref, ['children']);

    return React.cloneElement(children, props);
  }
}, _class2.contextTypes = {
  contextMenu: _propTypes.object
}, _temp)) || _class));

let ContextMenuStore = class ContextMenuStore {
  constructor() {
    this.event = null;
    this.data = null;

    this.clearMenu = () => {
      this.event = null;
    };

    this.handleContext = event => {
      this.event = event;
    };
  }

};

const ContextMenu = _wrapComponent('ContextMenu')((_dec2 = (0, _black.view)({
  store: ContextMenuStore
}), _dec2(_class4 = (_temp3 = _class5 = class ContextMenu extends React.Component {
  constructor(...args) {
    var _temp2;

    return _temp2 = super(...args), this.node = null, _temp2;
  }

  getChildContext() {
    return {
      contextMenu: {
        setData: data => this.props.store.data = data,
        getData: () => this.props.store.data,
        clearData: data => this.props.store.data = null
      }
    };
  }

  componentDidMount() {
    this.on(window, 'click', event => {
      if (this.props.inactive) return;
      if (this.props.store.event) {
        event.preventDefault();
        this.props.store.clearMenu();
      }
    });

    this.on(this.node, 'contextmenu', event => {
      if (this.props.inactive) return;
      event.preventDefault();
      event.stopPropagation();
      this.props.store.handleContext(event);
    });
  }

  render(_ref2) {
    let { inactive, width, children, options, store } = _ref2,
        props = _objectWithoutProperties(_ref2, ['inactive', 'width', 'children', 'options', 'store']);

    const _gloss5 = this.glossElement.bind(this);

    return _gloss5('contextmenu', _extends({ ref: this.ref('node').set }, props), children, store.event ? _gloss5(_popover2.default, {
      open: true,
      overlay: 'transparent',
      theme: 'none',
      overflow: 'visible',
      borderWidth: 0,
      borderRadius: 7,
      closeOnEsc: true,
      animation: 'slide 100ms',
      onClose: store.clearMenu,
      noArrow: true,
      top: store.event.clientY - 8,
      left: store.event.clientX + width / 2 - 8
    }, _gloss5(_list2.default, {
      controlled: true,
      background: '#F0F0F0',
      boxShadow: ['1px 5px 16px rgba(0,0,0,0.2)', 'inset 0 0 0 0.5px #b5b5b5'],
      borderRadius: 7,
      width: width,
      items: options,
      itemProps: {
        glint: true,
        borderRadius: 0,
        css: {
          padding: [3, 7, 3, 28],
          margin: [3, 0],
          fontWeight: 900,
          fontSize: 15,
          color: '#444'
        }
      },
      onSelect: item => item.onSelect(store.data, store.event),
      getItem: item => ({
        primary: item.title,
        glow: false,
        hover: { background: 'blue', color: '#fff !important' }
      })
    })) : null);
  }
}, _class5.defaultProps = {
  width: 135
}, _class5.childContextTypes = {
  contextMenu: _propTypes.object
}, _temp3)) || _class4));

ContextMenu.Target = ContextMenuTarget;

exports.default = ContextMenu;
//# sourceMappingURL=contextMenu.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/card.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2580');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2581');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2582');

var _icon = require('2583');

var _icon2 = _interopRequireDefault(_icon);

var _theme = require('2584');

var _theme2 = _interopRequireDefault(_theme);

var _title = require('2585');

var _title2 = _interopRequireDefault(_title);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Card: {
    displayName: 'Card'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/card.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Card = _wrapComponent('Card')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Card {

  render(_ref) {
    let { id, title, icon, children, chromeless, theme } = _ref,
        props = _objectWithoutProperties(_ref, ['id', 'title', 'icon', 'children', 'chromeless', 'theme']);

    const _gloss = this.glossElement.bind(this);

    return _gloss('card', _extends({ $chromeless: chromeless }, props), _gloss(_theme2.default, { name: theme }, _gloss('task', null, title ? _gloss('heading', null, _gloss('headingcontent', null, _gloss(_title2.default, { $title: true, display: 'block', size: 1.2 }, title), _gloss('service', null, false ? _gloss(_icon2.default, { $icon: true, color: '#555', size: 24, name: icon }) : null, id ? _gloss('id', null, '#', id.slice(0, 4)) : null))) : null, children)));
  }

}, _class2.defaultProps = {
  theme: 'light'
}, _class2.style = {
  card: {
    flex: 1,
    padding: 8,
    background: [250, 250, 250, 1],
    boxShadow: [[0, 0, 0, 2, [0, 0, 0, 0.1]]],
    overflow: 'hidden',
    overflowY: 'scroll'
  },
  task: {
    flex: 1
  },
  title: {
    alignSelf: 'center'
  },
  chromeless: {
    background: 'transparent',
    boxShadow: 'none'
  },
  heading: {
    borderBottom: [1, [0, 0, 0, 0.05]],
    paddingBottom: 5,
    padding: [0, 10],
    width: '100%',
    overflow: 'hidden'
  },
  headingcontent: {
    flex: 1,
    flexFlow: 'row',
    alignItems: 'flex-start',
    justifyContent: 'space-between',
    width: '100%'
  },
  service: {
    alignSelf: 'center',
    alignItems: 'center'
  },
  icon: {
    marginLeft: 6
  },
  id: {
    alignText: 'center',
    alignSelf: 'center',
    marginTop: 3,
    fontWeight: 600,
    opacity: 0.9,
    fontSize: 13
  }
}, _temp)) || _class));

exports.default = Card;
//# sourceMappingURL=card.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/title.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('10');

var React = _interopRequireWildcard(_react2);

var _index = require('11');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('12');

var _button = require('13');

var _button2 = _interopRequireDefault(_button);

var _color = require('14');

var _color2 = _interopRequireDefault(_color);

var _text = require('15');

var _text2 = _interopRequireDefault(_text);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Title: {
    displayName: 'Title'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/title.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Title = _wrapComponent('Title')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Title extends React.PureComponent {

  render(_ref) {
    let { stat, size, children, tagName } = _ref,
        props = _objectWithoutProperties(_ref, ['stat', 'size', 'children', 'tagName']);

    const _gloss = this.glossElement.bind(this);

    return _gloss(_text2.default, _extends({
      $title: true,
      display: 'inline-block'
    }, { [`\$size${Math.floor(size * 1.8)}`]: true }, {
      tagName: tagName
    }, props), children, stat ? _gloss('stat', null, stat) : null);
  }

}, _class2.defaultProps = {
  size: 1,
  tagName: 'title'
}, _class2.style = {
  title: {
    width: '100%'
  },
  size1: {
    textTransform: 'uppercase'
  },
  stat: {
    fontSize: '50%',
    marginLeft: 8,
    opacity: 0.7
  }
}, _temp)) || _class));

exports.default = Title;
//# sourceMappingURL=title.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/link.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2586');

var React = _interopRequireWildcard(_react2);

var _index = require('2587');

var _index2 = _interopRequireDefault(_index);

var _class, _class2, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2588');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Link: {
    displayName: 'Link'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/link.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Link = _wrapComponent('Link')((0, _black.view)(_class = (_temp2 = _class2 = class Link extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.isActive = false, this.onClick = e => {
      e.preventDefault();
      this.props.router.go(this.props.to);
      if (this.props.onClick) {
        this.props.onClick(e);
      }
    }, _temp;
  }

  componentDidMount() {
    this.watch(() => {
      const isActive = this.props.router.path === this.props.to || this.props.router.path === this.props.match;
      this.isActive = isActive;
    });
  }

  render(_ref) {
    let { to, match, highlight, active } = _ref,
        props = _objectWithoutProperties(_ref, ['to', 'match', 'highlight', 'active']);

    const _gloss2 = this.glossElement.bind(this);

    return _gloss2('a', _extends({
      href: to,
      onDragStart: e => e.preventDefault(),
      onClick: this.onClick
    }, props, {
      $active: this.isActive
    }));
  }

}, _class2.style = {
  a: {
    cursor: _black.IS_ELECTRON ? 'default' : 'pointer'
  }
}, _class2.theme = {
  active: ({ active }) => ({ active })
}, _temp2)) || _class);

exports.default = Link;
//# sourceMappingURL=link.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/loading.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2603');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2604');

var _index2 = _interopRequireDefault(_index);

var _class, _class2, _temp;

var _black = require('2605');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const _components = {
  Loading: {
    displayName: 'Loading'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/loading.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Loading = _wrapComponent('Loading')((0, _black.view)(_class = (_temp = _class2 = class Loading {
  render() {
    const _gloss = this.glossElement.bind(this);

    return _gloss('loading', null, 'loading...');
  }

}, _class2.style = {
  loading: {
    alignSelf: 'center',
    textAlign: 'center',
    fontSize: 24,
    opacity: 0.8
  }
}, _class2.theme = {}, _temp)) || _class);

exports.default = Loading;
//# sourceMappingURL=loading.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/grid.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2606');

var React = _interopRequireWildcard(_react2);

var _index = require('2607');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2608');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Grid: {
    displayName: 'Grid'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/grid.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Grid = _wrapComponent('Grid')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Grid extends React.Component {

  render(_ref) {
    let { children, columns } = _ref,
        props = _objectWithoutProperties(_ref, ['children', 'columns']);

    const _gloss = this.glossElement.bind(this);

    if (!children) {
      return null;
    }

    return _gloss('grid', _extends({ css: { flexWrap: 'wrap' } }, props), React.Children.map(children, (child, index) => {
      return _gloss('child', { key: index }, child);
    }));
  }

}, _class2.defaultProps = {
  columns: 1
}, _class2.style = {
  grid: {
    justifyContent: 'space-between'
  },
  child: {
    flex: 1
  }
}, _class2.theme = props => ({
  grid: _extends({
    flex: props.flex === true ? 1 : props.flex,
    flexFlow: props.column ? 'column' : 'row'
  }, props.reverse && {
    flexFlow: props.column ? 'column-reverse' : 'row-reverse'
  }),
  child: {
    width: `${100 / props.columns}%`,
    minWidth: `${100 / props.columns}%`,
    maxWidth: `${100 / props.columns}%`
  }
}), _temp)) || _class));

exports.default = Grid;
//# sourceMappingURL=grid.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/modal.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2616');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2617');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _black = require('2618');

var _portal = require('2619');

var _portal2 = _interopRequireDefault(_portal);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Modal: {
    displayName: 'Modal'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/modal.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Modal = _wrapComponent('Modal')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Modal {
  render() {
    const _gloss = this.glossElement.bind(this);

    const _props = this.props,
          { portalProps, bgProps, children } = _props,
          props = _objectWithoutProperties(_props, ['portalProps', 'bgProps', 'children']);

    return _gloss(_portal2.default, portalProps, _gloss('bg', bgProps, _gloss('modal', props, children)));
  }

}, _class2.style = {
  bg: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    background: 'rgba(0, 0, 0, 0.3)',
    zIndex: 1000000,
    justifyContent: 'center',
    alignItems: 'center',
    backdropFilter: 'blur(5px)'
  },
  modal: {
    background: '#f7f9fa',
    boxShadow: '0 0 0 1px rgba(0,0,0,0.1), 0 2px 20px rgba(0,0,0,0.2)',
    borderRadius: 5,
    margin: 100
  }
}, _temp)) || _class));

exports.default = Modal;
//# sourceMappingURL=modal.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/pane.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2620');

var React = _interopRequireWildcard(_react2);

var _index = require('2621');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2622');

var _title = require('2623');

var _title2 = _interopRequireDefault(_title);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Pane: {
    displayName: 'Pane'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/pane.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Pane = _wrapComponent('Pane')((_dec = _black.view.ui, _dec(_class = (_temp2 = _class2 = class Pane extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      collapsed: false
    }, this.setCollapsed = ({ collapsed }) => {
      this.setState({ collapsed });
    }, this.handleCollapse = event => {
      if (this.props.collapsable) {
        const collapsed = !this.state.collapsed;
        this.props.onSetCollapse(collapsed);
        this.setState({ collapsed });
      }
      if (this.props.onClick) {
        this.props.onClick(event);
      }
    }, _temp;
  }

  componentWillMount() {
    this.setCollapsed(this.props);
  }

  componentWillReceiveProps(nextProps) {
    this.setCollapsed(nextProps);
  }

  render(_ref) {
    let {
      collapsable,
      title,
      titleProps,
      height,
      children,
      sub,
      maxHeight,
      minHeight,
      onSetCollapse,
      scrollable,
      collapsed: _collapsed,
      padding,
      margin,
      shadow,
      background,
      transparent
    } = _ref,
        props = _objectWithoutProperties(_ref, ['collapsable', 'title', 'titleProps', 'height', 'children', 'sub', 'maxHeight', 'minHeight', 'onSetCollapse', 'scrollable', 'collapsed', 'padding', 'margin', 'shadow', 'background', 'transparent']);

    const _gloss3 = this.glossElement.bind(this);

    const { collapsed } = this.state;
    const collapseHeight = 27;

    return _gloss3('section', {
      $height: height,
      $maxHeight: collapsed ? collapseHeight : maxHeight || 'auto',
      $minHeight: collapsed ? collapseHeight : minHeight
    }, title ? _gloss3(_title2.default, _extends({
      $noCollapsable: !collapsable,
      collapsable: collapsable,
      collapsed: collapsed,
      onCollapse: this.handleCollapse,
      sub: sub,
      transparent: transparent
    }, titleProps), title) : null, _gloss3('content', _extends({ $hide: collapsed }, props), children));
  }

}, _class2.defaultProps = {
  collapsable: false,
  onSetCollapse: () => {}
}, _class2.style = {
  height: height => ({
    flex: 'auto',
    height
  }),
  maxHeight: maxHeight => ({
    maxHeight
  }),
  minHeight: minHeight => ({
    minHeight
  }),
  hide: {
    display: 'none'
  },
  noCollapsable: {
    paddingLeft: 10
  },
  content: {
    flex: 1,
    position: 'relative'
  }
}, _class2.theme = props => {
  const contentMaxHeightStyles = props.maxHeight && {
    maxHeight: props.maxHeight,
    overflowY: 'auto',
    flex: 1
  };

  return {
    section: {
      background: props.background,
      boxShadow: props.shadow && '0 0 70px rgba(0,0,0,0.2)',
      flex: props.scrollable ? 1 : null
    },
    content: _extends({
      overflowY: props.scrollable ? 'auto' : false,
      padding: props.padding === true ? 8 : props.padding,
      margin: props.margin === true ? 8 : props.margin
    }, contentMaxHeightStyles)
  };
}, _temp2)) || _class));

exports.default = Pane;
//# sourceMappingURL=pane.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/row.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2624');

var React = _interopRequireWildcard(_react2);

var _index = require('2625');

var _index2 = _interopRequireDefault(_index);

var _dec, _dec2, _class, _class2, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2626');

var _button = require('2627');

var _button2 = _interopRequireDefault(_button);

var _reactTunnel = require('2628');

var _inject = require('2629');

var _inject2 = _interopRequireDefault(_inject);

var _surface = require('2630');

var _surface2 = _interopRequireDefault(_surface);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Row: {
    displayName: 'Row'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/row.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Row = _wrapComponent('Row')((_dec = (0, _inject2.default)(context => ({ uiContext: context.uiContext })), _dec2 = _black.view.ui, _dec(_class = _dec2(_class = (_temp2 = _class2 = class Row extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      active: null
    }, this.select = active => {
      this.setState({ active });
      if (this.props.sync) {
        this.props.sync.set(active);
      }
    }, _temp;
  }

  get active() {
    const hasState = this.state.active !== null;
    if (this.props.sync) {
      return this.props.sync.get();
    }
    return hasState ? this.state.active : this.props.defaultActive;
  }

  render(_ref) {
    let {
      items,
      controlled,
      onChange,
      defaultActive,
      onlyIcons,
      children: children_,
      active,
      label,
      stretch,
      sync,
      uiContext,
      color,
      itemProps: itemProps_,
      spaced
    } = _ref,
        props = _objectWithoutProperties(_ref, ['items', 'controlled', 'onChange', 'defaultActive', 'onlyIcons', 'children', 'active', 'label', 'stretch', 'sync', 'uiContext', 'color', 'itemProps', 'spaced']);

    const _gloss2 = this.glossElement.bind(this);

    let itemProps = itemProps_;
    let children = children_;
    const ACTIVE = typeof active === 'undefined' ? this.active : active;
    const getContext = (index, length) => spaced ? {} : {
      uiContext: _extends({}, uiContext, {
        inSegment: {
          first: index === 0,
          last: index === length - 1,
          index
        }
      })
    };

    if (spaced) {
      itemProps = itemProps || {};
      itemProps.margin = [0, 0, 0, typeof props.spaced === 'number' ? spaced : 5];
    }

    if (stretch) {
      itemProps = itemProps || {};
      itemProps.flex = 1;
    }

    if (children) {
      const realChildren = React.Children.map(children, _ => _).filter(child => !!child);

      children = realChildren.map((child, index) => _gloss2(_reactTunnel.Provider, { key: index, provide: getContext(index, realChildren.length) }, itemProps ? React.cloneElement(child, _extends({}, itemProps, child.props)) /* merge child props so they can override */
      : child));
    } else if (Array.isArray(items)) {
      children = items.map((seg, index) => {
        const _ref2 = typeof seg === 'object' ? seg : { text: seg, id: seg },
              { text, id, icon } = _ref2,
              segmentProps = _objectWithoutProperties(_ref2, ['text', 'id', 'icon']);

        return _gloss2(_reactTunnel.Provider, { key: index, provide: getContext(index, children.length) }, _gloss2(_button2.default, _extends({
          active: (id || icon) === ACTIVE,
          icon: onlyIcons ? text : icon,
          iconColor: color,
          onChange: () => {
            this.select(id);
            if (controlled && onChange) {
              onChange(seg);
            }
          }
        }, segmentProps, itemProps), !onlyIcons && text));
      });
    }

    return _gloss2(_surface2.default, _extends({
      tagName: 'row',
      noElement: true,
      noWrap: true,
      background: 'transparent',
      $row: true
    }, props), label ? _gloss2('label', null, label) : null, children);
  }

}, _class2.style = {
  row: {
    flexFlow: 'row',
    maxWidth: '100%',
    alignItems: 'center',
    userSelect: 'none'
  },
  label: {
    margin: ['auto', 5],
    opacity: 0.8,
    fontSize: 11
  }
}, _class2.theme = props => ({
  row: _extends({
    flex: props.flex || props.stretch === true ? 1 : props.flex
  }, props.reverse && {
    flexFlow: 'row-reverse'
  }, props.column && {
    flexFlow: 'column'
  })
}), _temp2)) || _class) || _class));

exports.default = Row;
//# sourceMappingURL=row.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/tabPane.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2633');

var React = _interopRequireWildcard(_react2);

var _index = require('2634');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp2;

var _black = require('2635');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

const _components = {
  TabPane: {
    displayName: 'TabPane'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/tabPane.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const TabPane = _wrapComponent('TabPane')((_dec = _black.view.ui, _dec(_class = (_temp2 = _class2 = class TabPane extends React.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      selected: 0
    }, _temp;
  }

  handleSelect(selected) {
    return () => {
      this.setState({ selected });
    };
  }

  render({ tabs, children }) {
    const _gloss2 = this.glossElement.bind(this);

    const total = tabs.length;
    const totalChildren = React.Children.count(children);

    if (total !== totalChildren) {
      console.error('Children doesn\'t match length of tabs!');
      return null;
    }

    return _gloss2('tabpane', null, _gloss2('tabs', null, tabs.map((tab, index) => _gloss2('tab', {
      key: index,
      onClick: this.handleSelect(index),
      $activeTab: index === this.state.selected
    }, tab))), _gloss2('content', null, React.Children.map(children, (child, index) => {
      if (!child) {
        return child;
      }
      if (index !== this.state.selected) {
        return null;
      }
      return React.cloneElement(child, { chromeless: true });
    })));
  }

}, _class2.style = {
  tabpane: {
    boxShadow: [[0, 0, 0, 4, [0, 0, 0, 0.05]]],
    margin: [0, -4],
    background: '#f2f2f2'
  },
  tabs: {
    flexFlow: 'row',
    borderBottom: [1, [0, 0, 0, 0.05]]
  },
  tab: {
    background: '#f2f2f2',
    padding: [10, 12],
    marginBottom: -1,
    borderRight: [1, [0, 0, 0, 0.05]],
    borderBottom: [1, [0, 0, 0, 0.05]],
    minWidth: 90,
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
    maxWidth: '100%',
    overflow: 'hidden'
  },
  activeTab: {
    fontWeight: 600,
    background: '#fff',
    borderRight: [1, [0, 0, 0, 0.1]],
    borderBottom: [1, 'transparent']
  },
  content: {
    flex: 1,
    background: '#fff',
    padding: 10
  }
}, _temp2)) || _class));

exports.default = TabPane;
//# sourceMappingURL=tabPane.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/placeholder.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _react = require('2631');

var React = _interopRequireWildcard(_react);

var _text = require('2632');

var _text2 = _interopRequireDefault(_text);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

exports.default = props => React.createElement(_text2.default, _extends({
  tagName: 'placeholder',
  size: 1.5,
  fontWeight: 600,
  color: [0, 0, 0, 0.3],
  style: {
    margin: 'auto'
  }
}, props));
//# sourceMappingURL=placeholder.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/tag.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _react = require('2645');

var _react2 = _interopRequireDefault(_react);

var _surface = require('2646');

var _surface2 = _interopRequireDefault(_surface);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = props => _react2.default.createElement(_surface2.default, _extends({
  tagName: 'tag',
  background: '#e5ebf1',
  color: '#7d8fa0',
  fontWeight: 700,
  borderWidth: 1,
  padding: 3,
  glint: true,
  glow: true
}, props, {
  noElement: true
}));
//# sourceMappingURL=tag.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/progress/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2765');

var React = _interopRequireWildcard(_react2);

var _index = require('2766');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _black = require('2767');

var _bar = require('2768');

var _bar2 = _interopRequireDefault(_bar);

var _circle = require('2769');

var _circle2 = _interopRequireDefault(_circle);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Progress: {
    displayName: 'Progress'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/progress/index.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Progress = _wrapComponent('Progress')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Progress extends React.Component {

  render() {
    const _gloss = this.glossElement.bind(this);

    const _props = this.props,
          { type } = _props,
          props = _objectWithoutProperties(_props, ['type']);

    if (type === 'circle') {
      return _gloss(_circle2.default, props);
    } else if (type === 'bar') {
      return _gloss(_bar2.default, props);
    }

    throw new Error('Invalid progress type given');
  }
}, _class2.Bar = _bar2.default, _class2.Circle = _circle2.default, _temp)) || _class));

exports.default = Progress;
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/progress/bar.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2823');

var React = _interopRequireWildcard(_react2);

var _index = require('2824');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2825');

var _color = require('2826');

var _color2 = _interopRequireDefault(_color);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  ProgressBar: {
    displayName: 'ProgressBar'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/progress/bar.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const ProgressBar = _wrapComponent('ProgressBar')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class ProgressBar extends React.Component {

  render(_ref) {
    let { percent, color, background, width } = _ref,
        props = _objectWithoutProperties(_ref, ['percent', 'color', 'background', 'width']);

    const _gloss = this.glossElement.bind(this);

    return _gloss('outer', _extends({ $width: width }, props), _gloss('inner', { $percent: +percent, $color: color }));
  }

}, _class2.defaultProps = {
  width: 90,
  percent: 0
}, _class2.style = {
  outer: {
    height: 6,
    margin: ['auto', 5],
    borderRadius: 100,
    justifyContent: 'center'
  },
  inner: {
    height: '100%',
    borderRadius: 100
  },
  width: width => ({
    minWidth: width,
    width
  }),
  percent: percent => ({
    width: `${percent}%`
  })
}, _class2.theme = ({ color, background }, theme) => ({
  outer: {
    background: background || theme.base.background ? (0, _color2.default)(theme.base.background).darken(0.5) : '#eee'
  },
  inner: {
    background: color || theme.base.highlightColor
  }
}), _temp)) || _class));

exports.default = ProgressBar;
//# sourceMappingURL=bar.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/progress/circle.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2827');

var React = _interopRequireWildcard(_react2);

var _index = require('2828');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2829');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  ProgressCircle: {
    displayName: 'ProgressCircle'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/progress/circle.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const ProgressCircle = _wrapComponent('ProgressCircle')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class ProgressCircle extends React.Component {

  render() {
    const _gloss = this.glossElement.bind(this);

    const _props = this.props,
          {
      lineType,
      backgroundColor,
      lineColor,
      lineWidth,
      size,
      percent
    } = _props,
          props = _objectWithoutProperties(_props, ['lineType', 'backgroundColor', 'lineColor', 'lineWidth', 'size', 'percent']);
    const radius = size - lineWidth / 2;
    const length = Math.PI * 2 * radius;
    const pathString = `
      M ${size},${size} m 0,-${radius}
      a ${radius},${radius} 0 1 1 0,${2 * radius}
      a ${radius},${radius} 0 1 1 0,-${2 * radius}
    `;
    const pathStyle = {
      strokeDasharray: `${length}px ${length}px`,
      strokeDashoffset: `${(100 - percent) / 100 * length}px`,
      transition: 'stroke-dashoffset 0.3s ease 0s, stroke 0.3s ease'
    };

    return _gloss('svg', _extends({
      width: size,
      height: size,
      viewBox: `0 0 ${size * 2} ${size * 2}`
    }, props), _gloss('path', {
      d: pathString,
      stroke: this.gloss.helpers.toColor(backgroundColor),
      strokeWidth: lineWidth,
      fillOpacity: '0'
    }), _gloss('path', {
      d: pathString,
      strokeLinecap: lineType,
      stroke: this.gloss.helpers.toColor(lineColor),
      strokeWidth: lineWidth,
      fillOpacity: '0',
      ref: 'path',
      style: pathStyle
    }));
  }
}, _class2.defaultProps = {
  backgroundColor: [0, 0, 0, 1],
  lineColor: 'green',
  lineWidth: 4,
  size: 25,
  lineType: 'butt'
}, _temp)) || _class));

exports.default = ProgressCircle;
//# sourceMappingURL=circle.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/view.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2693');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2694');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _black = require('2695');

var _color = require('2696');

var _color2 = _interopRequireDefault(_color);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const _components = {
  View: {
    displayName: 'View'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/view.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const View = _wrapComponent('View')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class View {
  render(props) {
    const _gloss = this.glossElement.bind(this);

    return _gloss('view', props);
  }

}, _class2.theme = (props, theme, self) => {
  const background = props.background || theme.base.background || 'transparent';
  const borderColor = props.borderColor || theme.base.borderColor;
  const color = props.color || theme.base.color;

  return {
    view: {
      padding: props.padding,
      borderRadius: props.borderRadius,
      borderColor,
      background,
      '&:hover': {
        color: props.hoverColor
      }
    }
  };
}, _temp)) || _class));

exports.default = View;
//# sourceMappingURL=view.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/circle.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2653');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2654');

var _index2 = _interopRequireDefault(_index);

var _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2655');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Circle: {
    displayName: 'Circle'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/circle.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Circle = _wrapComponent('Circle')((0, _black.view)(_class = (_temp = _class2 = class Circle extends _react3.default.Component {

  render(_ref) {
    let {
      size,
      background,
      children,
      style,
      className,
      onClick,
      onFocus,
      onMouseEnter,
      onMouseLeave,
      getRef
    } = _ref,
        props = _objectWithoutProperties(_ref, ['size', 'background', 'children', 'style', 'className', 'onClick', 'onFocus', 'onMouseEnter', 'onMouseLeave', 'getRef']);

    const _gloss = this.glossElement.bind(this);

    const elProps = {
      style,
      className,
      onClick,
      onFocus,
      onMouseEnter,
      onMouseLeave,
      children
    };

    return _gloss('circle', _extends({ ref: getRef }, elProps, { css: props }));
  }

}, _class2.defaultProps = {
  size: 30
}, _class2.style = {
  circle: {
    position: 'relative',
    borderRadius: 1000,
    lineHeight: '1rem',
    alignItems: 'center',
    justifyContent: 'center',
    background: '#fff',
    color: '#111',
    fontWeight: 400,
    cursor: 'pointer',
    userSelect: 'none'
  }
}, _class2.theme = ({ size, background }) => ({
  circle: {
    width: size,
    height: size,
    background,
    borderRadius: size
  }
}), _temp)) || _class);

exports.default = Circle;
//# sourceMappingURL=circle.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/date.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2658');

var React = _interopRequireWildcard(_react2);

var _index = require('2659');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _black = require('2660');

var _timeAgo = require('2661');

var _timeAgo2 = _interopRequireDefault(_timeAgo);

var _text = require('2662');

var _text2 = _interopRequireDefault(_text);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  DateView: {
    displayName: 'DateView'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/date.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const { ago } = (0, _timeAgo2.default)();

const DateView = _wrapComponent('DateView')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class DateView extends React.PureComponent {

  render(_ref) {
    let { children } = _ref,
        props = _objectWithoutProperties(_ref, ['children']);

    const _gloss = this.glossElement.bind(this);

    if (children) {
      return _gloss(_text2.default, props, this.constructor.format(children));
    }
    return null;
  }
}, _class2.format = text => {
  const date = new Date(text);
  const dateWords = ago(date);
  if (dateWords.indexOf('NaN') === 0) {
    return null;
  }
  return dateWords;
}, _temp)) || _class));

exports.default = DateView;
//# sourceMappingURL=date.js.map
});
__sbPundle.registerModule("../node_modules/time-ago/timeago.js", function(__filename, __dirname, require, module, exports) {
var timeago = function () {

  var o = {
    second: 1000,
    minute: 60 * 1000,
    hour: 60 * 1000 * 60,
    day: 24 * 60 * 1000 * 60,
    week: 7 * 24 * 60 * 1000 * 60,
    month: 30 * 24 * 60 * 1000 * 60,
    year: 365 * 24 * 60 * 1000 * 60
  };
  var obj = {};

  obj.ago = function (nd) {
    var r = Math.round,
        pl = function (v, n) {
      return n + ' ' + v + (n > 1 ? 's' : '') + ' ago';
    },
        ts = new Date().getTime() - new Date(nd).getTime(),
        ii;
    for (i in o) {
      if (r(ts) < o[i]) return pl(ii || 'm', r(ts / (o[ii] || 1)));
      ii = i;
    }
    return pl(i, r(ts / o[i]));
  };

  obj.today = function () {
    var now = new Date();
    var Weekday = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
    var Month = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
    return Weekday[now.getDay()] + ", " + Month[now.getMonth()] + " " + now.getDate() + ", " + now.getFullYear();
  };

  obj.timefriendly = function (s) {
    var t = s.match(/(\d).([a-z]*?)s?$/);
    return t[1] * eval(o[t[2]]);
  };

  obj.mintoread = function (text, altcmt, wpm) {
    var m = Math.round(text.split(' ').length / (wpm || 200));
    return (m || '< 1') + (altcmt || ' min to read');
  };

  return obj;
};

if (typeof module !== 'undefined' && module.exports) module.exports = timeago;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/fake/fakeText.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2706');

var React = _interopRequireWildcard(_react2);

var _index = require('2707');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp2;

var _black = require('2708');

var _lodash = require('2709');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  FakeText: {
    displayName: 'FakeText'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/fake/fakeText.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const FakeText = _wrapComponent('FakeText')((_dec = _black.view.ui, _dec(_class = (_temp2 = _class2 = class FakeText extends React.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.lines = [], this.getLineWidth = key => {
      if (this.lines[key]) {
        return this.lines[key];
      }
      const { minWidth, maxWidth } = this.props;
      this.lines[key] = (Math.random() * (maxWidth - minWidth) + minWidth ^ 0).toString();
      return this.lines[key];
    }, _temp;
  }

  render() {
    const _gloss = this.glossElement.bind(this);

    const _props = this.props,
          {
      lines,
      fontSize,
      lineHeight,
      minWidth,
      maxWidth
    } = _props,
          props = _objectWithoutProperties(_props, ['lines', 'fontSize', 'lineHeight', 'minWidth', 'maxWidth']);

    return _gloss('root', props, (0, _lodash.range)(lines).map(i => _gloss('fakeline', {
      key: i,
      style: {
        marginBottom: 5,
        height: lineHeight - 5,
        width: `${this.getLineWidth(i)}%`
      }
    })));
  }
}, _class2.defaultProps = {
  minWidth: 40,
  maxWidth: 100,
  lineHeight: 30,
  lines: 1
}, _class2.style = {
  root: {
    flex: 1
  },
  fakeline: {
    backgroundColor: 'rgba(200, 200, 200, 0.15)'
  }
}, _temp2)) || _class));

exports.default = FakeText;
//# sourceMappingURL=fakeText.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/effects/grain.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2703');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2704');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _black = require('2705');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const _components = {
  Grain: {
    displayName: 'Grain'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/effects/grain.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Grain = _wrapComponent('Grain')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Grain extends _react3.default.Component {
  render() {
    const _gloss = this.glossElement.bind(this);

    return _gloss('grain', { $$fullscreen: true });
  }

}, _class2.style = {
  grain: {
    background: 'url(/images/grain.png)',
    zIndex: 0,
    opacity: 0.5,
    pointerEvents: 'none'
  }
}, _temp)) || _class));

exports.default = Grain;
//# sourceMappingURL=grain.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/effects/poof.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2710');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2711');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _class3, _temp2;

var _black = require('2712');

var _mobx = require('2713');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

const _components = {
  Poof: {
    displayName: 'Poof'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/effects/poof.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const TOTAL_TIME = 200;
const FRAMES = 5;
const HEIGHT = 240 / FRAMES;

const Poof = _wrapComponent('Poof')((_dec = _black.view.ui, _dec(_class = (_class2 = (_temp2 = _class3 = class Poof extends _react3.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), _initDefineProp(this, 'show', _descriptor, this), _initDefineProp(this, 'iter', _descriptor2, this), this.start = () => {
      this.show = true;
      this.iter = 0;
      this.setTimeout(() => {
        this.show = false;
      }, TOTAL_TIME);

      this.setInterval(() => {
        if (this.show) {
          this.iter = (this.iter + 1) % FRAMES;
        }
      }, TOTAL_TIME / FRAMES);
    }, _temp;
  }

  componentDidMount() {
    this.start();
  }

  puff() {
    return new Promise(res => {
      this.start();
      setTimeout(res, TOTAL_TIME);
    });
  }

  render({ top, left }) {
    const _gloss3 = this.glossElement.bind(this);

    return this.show ? _gloss3('poof', { $$top: top, $$left: left, $iter: this.iter }) : null;
  }

}, _class3.defaultProps = {
  top: 0,
  left: 0
}, _class3.style = {
  poof: {
    width: 48,
    height: HEIGHT,
    marginTop: -HEIGHT / 2,
    marginLeft: -48 / 2,
    position: 'absolute',
    backgroundImage: 'url(poof.png)',
    backgroundRepeat: 'no-repeat'
  },

  iter: y => ({
    backgroundPosition: `0 -${y * HEIGHT}px`
  })
}, _temp2), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'show', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return null;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'iter', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return null;
  }
})), _class2)) || _class));

exports.default = Poof;
//# sourceMappingURL=poof.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/effects/tiltHoverGlow.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2714');

var React = _interopRequireWildcard(_react2);

var _index = require('2715');

var _index2 = _interopRequireDefault(_index);

var _dec, _class;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2716');

var _reactTilt = require('2717');

var _reactTilt2 = _interopRequireDefault(_reactTilt);

var _hoverGlow = require('2718');

var _hoverGlow2 = _interopRequireDefault(_hoverGlow);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  TiltHoverGlow: {
    displayName: 'TiltHoverGlow'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/effects/tiltHoverGlow.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const TiltHoverGlow = _wrapComponent('TiltHoverGlow')((_dec = _black.view.ui, _dec(_class = class TiltHoverGlow extends React.PureComponent {

  version() {
    return 1;
  }

  render(_ref) {
    let { width, height, tiltOptions, children, css } = _ref,
        props = _objectWithoutProperties(_ref, ['width', 'height', 'tiltOptions', 'children', 'css']);

    const _gloss2 = this.glossElement.bind(this);

    return _gloss2(_reactTilt2.default, {
      options: _extends({
        max: 15,
        perspective: 1000,
        scale: 1.025,
        speed: 400
      }, tiltOptions)
    }, _gloss2('tiltglow', _extends({
      css: _extends({
        cursor: 'default',
        width,
        height,
        borderRadius: 0,
        overflow: 'hidden',
        transition: 'transform 50ms ease-in'
      }, css)
    }, props), children, _gloss2(_hoverGlow2.default, {
      full: true,
      show: true,
      scale: 2,
      resist: 20,
      color: [255, 255, 255],
      overflow: 'hidden',
      borderRadius: 8,
      zIndex: 100000,
      opacity: 1,
      transition: 30
    }), _gloss2(_hoverGlow2.default, {
      show: true,
      behind: true,
      resist: 93,
      scale: 1.1,
      width: width,
      offsetTop: 2,
      offsetLeft: -12,
      blur: 3,
      inverse: true,
      color: [0, 0, 0],
      opacity: 0.08,
      borderRadius: 5
    })));
  }
}) || _class));

exports.default = TiltHoverGlow;
//# sourceMappingURL=tiltHoverGlow.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/node_modules/react-tilt/dist/tilt.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = require('454');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('455');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Tilt = function (_Component) {
  _inherits(Tilt, _Component);

  function Tilt(props) {
    _classCallCheck(this, Tilt);

    var _this = _possibleConstructorReturn(this, (Tilt.__proto__ || Object.getPrototypeOf(Tilt)).call(this, props));

    _this.state = {
      style: {}
    };

    var defaultSettings = {
      reverse: false,
      max: 35,
      perspective: 1000,
      easing: "cubic-bezier(.03,.98,.52,.99)",
      scale: "1.1",
      speed: "1000",
      transition: true,
      axis: null,
      reset: true
    };

    _this.width = null;
    _this.height = null;
    _this.left = null;
    _this.top = null;
    _this.transitionTimeout = null;
    _this.updateCall = null;
    _this.element = null;
    _this.settings = Object.assign({}, defaultSettings, _this.props.options);
    _this.reverse = _this.settings.reverse ? -1 : 1;

    // Events
    _this.onMouseEnter = _this.onMouseEnter.bind(_this, _this.props.onMouseEnter);
    _this.onMouseMove = _this.onMouseMove.bind(_this, _this.props.onMouseMove);
    _this.onMouseLeave = _this.onMouseLeave.bind(_this, _this.props.onMouseLeave);
    return _this;
  }

  _createClass(Tilt, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.element = (0, _reactDom.findDOMNode)(this);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearTimeout(this.transitionTimeout);
      cancelAnimationFrame(this.updateCall);
    }
  }, {
    key: 'onMouseEnter',
    value: function onMouseEnter() {
      var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
      var e = arguments[1];

      this.updateElementPosition();

      this.setState(Object.assign({}, this.state, {
        style: _extends({}, this.state.style, {
          willChange: "transform"
        })
      }));

      this.setTransition();

      return cb(e);
    }
  }, {
    key: 'reset',
    value: function reset() {
      var _this2 = this;

      window.requestAnimationFrame(function () {
        _this2.setState(Object.assign({}, _this2.state, {
          style: _extends({}, _this2.state.style, {
            transform: "perspective(" + _this2.settings.perspective + "px) " + "rotateX(0deg) " + "rotateY(0deg) " + "scale3d(1, 1, 1)" })
        }));
      });
    }
  }, {
    key: 'onMouseMove',
    value: function onMouseMove() {
      var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
      var e = arguments[1];

      e.persist();

      if (this.updateCall !== null) {
        window.cancelAnimationFrame(this.updateCall);
      }

      this.event = e;
      this.updateCall = requestAnimationFrame(this.update.bind(this, e));

      return cb(e);
    }
  }, {
    key: 'setTransition',
    value: function setTransition() {
      var _this3 = this;

      clearTimeout(this.transitionTimeout);

      this.setState(Object.assign({}, this.state, {
        style: _extends({}, this.state.style, {
          transition: this.settings.speed + "ms " + this.settings.easing
        })
      }));

      this.transitionTimeout = setTimeout(function () {
        _this3.setState(Object.assign({}, _this3.state, {
          style: _extends({}, _this3.state.style, {
            transition: ''
          })
        }));
      }, this.settings.speed);
    }
  }, {
    key: 'onMouseLeave',
    value: function onMouseLeave() {
      var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
      var e = arguments[1];

      this.setTransition();

      if (this.settings.reset) {
        this.reset();
      }
      return cb(e);
    }
  }, {
    key: 'getValues',
    value: function getValues(e) {
      var x = (e.nativeEvent.clientX - this.left) / this.width;
      var y = (e.nativeEvent.clientY - this.top) / this.height;
      var _x = Math.min(Math.max(x, 0), 1);
      var _y = Math.min(Math.max(y, 0), 1);

      var tiltX = (this.reverse * (this.settings.max / 2 - _x * this.settings.max)).toFixed(2);
      var tiltY = (this.reverse * (_y * this.settings.max - this.settings.max / 2)).toFixed(2);

      var percentageX = _x * 100;
      var percentageY = _y * 100;

      return {
        tiltX: tiltX,
        tiltY: tiltY,
        percentageX: percentageX,
        percentageY: percentageY
      };
    }
  }, {
    key: 'updateElementPosition',
    value: function updateElementPosition() {
      var rect = this.element.getBoundingClientRect();
      this.width = this.element.offsetWidth;
      this.height = this.element.offsetHeight;
      this.left = rect.left;
      this.top = rect.top;
    }
  }, {
    key: 'update',
    value: function update(e) {
      var values = this.getValues(e);

      this.setState(Object.assign({}, this.state, {
        style: _extends({}, this.state.style, {
          transform: "perspective(" + this.settings.perspective + "px) " + "rotateX(" + (this.settings.axis === "x" ? 0 : values.tiltY) + "deg) " + "rotateY(" + (this.settings.axis === "y" ? 0 : values.tiltX) + "deg) " + "scale3d(" + this.settings.scale + ", " + this.settings.scale + ", " + this.settings.scale + ")"
        })
      }));

      this.updateCall = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var style = Object.assign({}, this.props.style, this.state.style);
      return _react2.default.createElement('div', { style: style,
        className: this.props.className,
        onMouseEnter: this.onMouseEnter,
        onMouseMove: this.onMouseMove,
        onMouseLeave: this.onMouseLeave
      }, this.props.children);
    }
  }]);

  return Tilt;
}(_react.Component);

exports.default = Tilt;
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/form/form.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _react2 = require('2722');

var React = _interopRequireWildcard(_react2);

var _index = require('2723');

var _index2 = _interopRequireDefault(_index);

var _class, _temp, _dec, _class2, _class3, _temp3;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2724');

var _propTypes = require('2725');

var _surface = require('2726');

var _surface2 = _interopRequireDefault(_surface);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

const _components = {
  FormInner: {
    displayName: 'FormInner'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/form/form.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const resolveFormValues = obj => Object.keys(obj).reduce((acc, key) => _extends({}, acc, { [key]: obj[key] && obj[key]() }), {});

let Form = (_temp = _class = class Form extends React.Component {

  getChildContext() {
    return {
      provided: _extends({}, this.context.provided, {
        uiContext: {
          inForm: true,
          formValues: {}
        }
      })
    };
  }

  render() {
    return React.createElement(FormInner, this.props);
  }
}, _class.contextTypes = {
  provided: _propTypes.object
}, _class.childContextTypes = {
  provided: _propTypes.object
}, _temp);
exports.default = Form;

const FormInner = _wrapComponent('FormInner')((_dec = _black.view.ui, _dec(_class2 = (_temp3 = _class3 = class FormInner extends React.Component {
  constructor(...args) {
    var _temp2;

    return _temp2 = super(...args), this.onSubmit = e => {
      e.preventDefault();
      e.stopPropagation();
      this.props.onSubmit(this.formValues, e);
    }, this.onKeyDown = e => {
      if (e.which === 13 && !this.props.preventEnterSubmit) {
        this.onSubmit(e);
      }
    }, _temp2;
  }

  getChildContext() {
    const { onSubmit } = this.props;
    return {
      provided: _extends({}, this.context.provided, {
        uiContext: _extends({}, this.context.provided.uiContext, {
          // adds a helper to submit forms from below, useful for buttons
          form: {
            submit: () => onSubmit(this.formValues)
          }
        })
      })
    };
  }

  get formValues() {
    return resolveFormValues(this.context.provided.uiContext.formValues);
  }

  render(props) {
    const _gloss3 = this.glossElement.bind(this);

    return _gloss3(_surface2.default, _extends({
      background: 'transparent',
      tagName: 'form',
      $form: true
    }, props, {
      onSubmit: this.onSubmit,
      onKeyDown: this.onKeyDown
    }));
  }

}, _class3.defaultProps = {
  onSubmit: _ => _
}, _class3.contextTypes = {
  provided: _propTypes.object
}, _class3.childContextTypes = {
  provided: _propTypes.object
}, _class3.style = {
  form: {
    width: '100%'
  }
}, _temp3)) || _class2));
//# sourceMappingURL=form.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/form/input.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('21');

var React = _interopRequireWildcard(_react2);

var _index = require('22');

var _index2 = _interopRequireDefault(_index);

var _dec, _dec2, _class, _class2, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('23');

var _inject = require('24');

var _inject2 = _interopRequireDefault(_inject);

var _sizedSurface = require('25');

var _sizedSurface2 = _interopRequireDefault(_sizedSurface);

var _button = require('26');

var _button2 = _interopRequireDefault(_button);

var _checkbox = require('27');

var _checkbox2 = _interopRequireDefault(_checkbox);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Input: {
    displayName: 'Input'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/form/input.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const TAG_MAP = {
  password: 'input'
};

const Input = _wrapComponent('Input')((_dec = (0, _inject2.default)(context => ({ uiContext: context.uiContext })), _dec2 = _black.view.ui, _dec(_class = _dec2(_class = (_temp2 = _class2 = class Input extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.node = null, this.setValues = () => {
      if (this.shouldSyncToForm && this.node) {
        this.props.uiContext.formValues[this.props.name] = () => this.node && this.node.value;
      }
    }, this.onNode = node => {
      this.node = node;
      this.props.getRef && this.props.getRef(node);

      if (node) {
        this.on(node, 'keydown', e => {
          const isEnter = e.keyCode === 13;
          if (isEnter) {
            if (this.props.onEnter) {
              if (isEnter) {
                this.props.onEnter(e);
              }
            }
          }
        });
      }
    }, this.onClick = e => {
      e.preventDefault();
      if (this.shouldSyncToForm) {
        this.props.uiContext.form.submit();
      }
      if (this.props.onClick) {
        this.props.onClick(e);
      }
    }, _temp;
  }

  componentDidMount() {
    this.setValues();
  }

  componentDidUpdate() {
    this.setValues();
  }

  get shouldSyncToForm() {
    const { uiContext, sync } = this.props;
    return uiContext && uiContext.inForm && !sync;
  }

  render() {
    const _gloss4 = this.glossElement.bind(this);

    const _props = this.props,
          {
      sync,
      type,
      name,
      uiContext,
      form,
      elementProps,
      style
    } = _props,
          props = _objectWithoutProperties(_props, ['sync', 'type', 'name', 'uiContext', 'form', 'elementProps', 'style']);

    if (sync && elementProps) {
      elementProps.value = sync.get();
      elementProps.onChange = e => sync.set(e.target.value);
    }

    if (type === 'checkbox') {
      return _gloss4(_checkbox2.default, props);
    }

    if (type === 'submit') {
      return _gloss4(_button2.default, _extends({ type: 'submit', noElement: true }, props, { onClick: this.onClick }));
    }

    return _gloss4(_sizedSurface2.default, _extends({
      sizeFont: true,
      borderRadius: true,
      sizeHeight: true,
      sizePadding: true,
      flex: true,
      borderWidth: 1,
      wrapElement: true,
      tagName: TAG_MAP[type] || type,
      name: name,
      type: type,
      elementProps: _extends({
        style: _extends({
          width: '100%',
          padding: '0 10px'
        }, style),
        ref: this.onNode
      }, elementProps)
    }, props));
  }
}, _class2.defaultProps = {
  type: 'input'
}, _temp2)) || _class) || _class));

exports.default = Input;
//# sourceMappingURL=input.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/form/checkbox.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2734');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2735');

var _index2 = _interopRequireDefault(_index);

var _class, _desc, _value, _class2, _descriptor, _class3, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2736');

var _mobx = require('2737');

var _sizedSurface = require('2738');

var _sizedSurface2 = _interopRequireDefault(_sizedSurface);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

const _components = {
  Checkbox: {
    displayName: 'Checkbox'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/form/checkbox.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Checkbox = _wrapComponent('Checkbox')((0, _black.view)(_class = (_class2 = (_temp = _class3 = class Checkbox {
  constructor() {
    _initDefineProp(this, 'isChecked', _descriptor, this);

    this.onChange = e => {
      this.isChecked = e.target.checked;
      return this.isChecked;
    };
  }

  render(_ref) {
    let { onChange, sync } = _ref,
        props = _objectWithoutProperties(_ref, ['onChange', 'sync']);

    const _gloss = this.glossElement.bind(this);

    const { isChecked } = this;
    return _gloss(_sizedSurface2.default, _extends({
      margin: [0, 3],
      background: isChecked ? 'rgb(92, 107, 123)' : '#f2f2f2',
      color: isChecked ? '#fff' : '#ddd',
      hoverColor: isChecked ? '#fff' : '#ddd',
      borderRadius: 6,
      borderWidth: 1,
      borderColor: isChecked ? 'rgb(92, 107, 123)' : '#ccc',
      icon: isChecked ? 'check-simple' : 'check-simple',
      iconSize: 12,
      glow: false,
      padding: 2,
      height: 18,
      align: 'center',
      justify: 'center',
      flex: false,
      iconProps: {
        css: {
          opacity: isChecked ? 1 : 0,
          transform: {
            y: 1,
            scale: isChecked ? 1 : 1
          }
        }
      }
    }, props), _gloss('input', { type: 'checkbox', onChange: this.onChange }));
  }

}, _class3.style = {
  input: {
    position: 'absolute',
    opacity: 0.0001,
    transform: {
      scale: 2,
      x: '-33%',
      y: '-60%'
    }
  }
}, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, 'isChecked', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return this.props.defaultValue || false;
  }
}), _class2)) || _class);

exports.default = Checkbox;
//# sourceMappingURL=checkbox.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/form/toggle.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2739');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2740');

var _index2 = _interopRequireDefault(_index);

var _dec, _dec2, _class, _class2, _temp2;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('2741');

var _inject = require('2742');

var _inject2 = _interopRequireDefault(_inject);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Toggle: {
    displayName: 'Toggle'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/form/toggle.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const BAR_HEIGHT = 8;
const BAR_WIDTH = 30;
const BAR_INVISIBLE_PAD = 5;

const Toggle = _wrapComponent('Toggle')((_dec = (0, _inject2.default)(context => ({ uiContext: context.uiContext })), _dec2 = _black.view.ui, _dec(_class = _dec2(_class = (_temp2 = _class2 = class Toggle extends _react3.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      on: false
    }, this.setOn = (on, triggerOnChange) => {
      if (typeof on !== 'undefined') {
        this.setState({ on });
        if (triggerOnChange) {
          this.props.onChange(on);
          if (this.props.sync) {
            this.props.sync.set(on);
          }
        }
      }
    }, this.toggleClick = () => {
      this.setOn(!this.value, true);
    }, this.syncToForm = () => {
      if (this.shouldSyncToForm) {
        this.props.uiContext.formValues[this.props.name] = () => this.state.on;
      }
    }, _temp;
  }

  componentWillMount() {
    if (this.props.defaultValue) {
      this.setState({ on: this.props.defaultValue });
    }
  }

  componentDidMount() {
    this.syncToForm();
  }

  get value() {
    return this.props.sync && this.props.sync.get() || this.state.on;
  }

  get shouldSyncToForm() {
    const { uiContext, sync } = this.props;
    return uiContext && uiContext.inForm && !sync;
  }

  render() {
    const _gloss5 = this.glossElement.bind(this);

    const _props = this.props,
          {
      on: dontUse,
      dotSize,
      defaultValue,
      color,
      dark,
      barColor,
      sync,
      uiContext,
      form,
      theme,
      placeholderColor,
      borderRadius,
      chromeless
    } = _props,
          props = _objectWithoutProperties(_props, ['on', 'dotSize', 'defaultValue', 'color', 'dark', 'barColor', 'sync', 'uiContext', 'form', 'theme', 'placeholderColor', 'borderRadius', 'chromeless']);

    let on;
    if (sync) {
      on = sync.get();
    } else {
      on = this.state.on;
    }

    return _gloss5('bar', _extends({ onClick: this.toggleClick }, props), _gloss5('dot', { $dotOn: on }));
  }

}, _class2.defaultProps = {
  dotSize: 14,
  onChange: _ => _,
  color: [0, 0, 0, 0.9],
  defaultValue: false,
  barColor: [0, 0, 0, 0.1]
}, _class2.style = {
  bar: {
    width: BAR_WIDTH,
    height: BAR_HEIGHT,
    borderRadius: 10,
    border: [BAR_INVISIBLE_PAD, 'transparent'],
    margin: [-BAR_INVISIBLE_PAD, 0],
    position: 'relative'
  },
  dot: {
    borderRadius: 100,
    background: '#000',
    boxShadow: [0, 0, 10, [0, 0, 0, 0.2]],
    border: [1, [255, 255, 255, 0.1]],
    position: 'absolute',
    top: 0,
    left: 0,
    transform: { x: -BAR_INVISIBLE_PAD },
    transition: 'all ease-in 80ms'
  },
  dotOn: {
    background: '#000',
    transform: {
      x: BAR_WIDTH - 10 - 5
    }
  }
}, _class2.theme = ({ dotSize, color, barColor }) => ({
  bar: {
    background: barColor
  },
  dot: {
    background: color,
    width: dotSize,
    height: dotSize,
    marginTop: -((dotSize - BAR_HEIGHT) / 2) - BAR_INVISIBLE_PAD + 1
  }
}), _temp2)) || _class) || _class));

exports.default = Toggle;
//# sourceMappingURL=toggle.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/form/field.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('28');

var React = _interopRequireWildcard(_react2);

var _index = require('29');

var _index2 = _interopRequireDefault(_index);

var _dec, _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

// fields


var _black = require('30');

var _text = require('31');

var _text2 = _interopRequireDefault(_text);

var _input = require('32');

var _input2 = _interopRequireDefault(_input);

var _select = require('33');

var _select2 = _interopRequireDefault(_select);

var _toggle = require('34');

var _toggle2 = _interopRequireDefault(_toggle);

var _checkbox = require('35');

var _checkbox2 = _interopRequireDefault(_checkbox);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Field: {
    displayName: 'Field'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/form/field.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const fields = {
  input: _input2.default,
  select: _select2.default,
  toggle: _toggle2.default,
  checkbox: _checkbox2.default,
  textarea: props => React.createElement(_input2.default, _extends({ sizeHeight: false }, props))
};

const TYPE_TO_ELEMENT_MAP = {
  password: 'input'
};

const Field = _wrapComponent('Field')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Field extends React.Component {

  render(_ref) {
    let {
      type,
      inactive,
      label,
      spacing,
      icon,
      width,
      iconProps,
      elementProps,
      name,
      labelProps,
      labelStyle,
      fieldStyle,
      elementStyle,
      onChange,
      defaultValue,
      sync,
      children,
      theme,
      row,
      chromeless,
      placeholder,
      placeholderColor,
      size
    } = _ref,
        props = _objectWithoutProperties(_ref, ['type', 'inactive', 'label', 'spacing', 'icon', 'width', 'iconProps', 'elementProps', 'name', 'labelProps', 'labelStyle', 'fieldStyle', 'elementStyle', 'onChange', 'defaultValue', 'sync', 'children', 'theme', 'row', 'chromeless', 'placeholder', 'placeholderColor', 'size']);

    const _gloss = this.glossElement.bind(this);

    const Element = fields[TYPE_TO_ELEMENT_MAP[type] || type];
    const id = name || label && typeof label === 'string' && label.toLowerCase() || `element-${Math.round(Math.random() * 10000000)}`;

    if (!Element && !children) {
      throw new Error('Invalid field type or no children given to Field');
    }

    return _gloss('field', { $width: width, css: props }, label ? _gloss(_text2.default, _extends({
      tagName: 'label',
      $label: true,
      ellipse: true,
      htmlFor: id,
      size: size
    }, labelProps), label === true ? ' ' : label) : null, !children && Element ? _gloss(Element, _extends({
      $element: true,
      type: type,
      onChange: onChange,
      name: id,
      defaultValue: defaultValue,
      sync: sync,
      theme: theme,
      chromeless: chromeless,
      placeholder: placeholder,
      placeholderColor: placeholderColor,
      borderRadius: 0,
      size: size
    }, elementProps)) : null, children);
  }

}, _class2.defaultProps = {
  type: 'input',
  width: 'auto',
  spacing: 1
}, _class2.style = {
  field: {
    textAlign: 'left'
  },
  label: {
    overflow: 'hidden',
    padding: [10, 0, 10, 0]
  }
}, _class2.theme = (props, theme) => {
  const inactiveStyle = {
    field: {
      opacity: 0.5,
      pointerEvents: 'none'
    }
  };

  const rowStyle = {
    field: {
      padding: [6, 0],
      flexFlow: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    label: {
      margin: 0,
      padding: [0, 10, 0, 0],
      flex: 'none',
      width: 'auto'
    },
    element: {
      fontSize: 24,
      height: 40,
      border: 'none'
    }
  };

  return {
    field: _extends({}, props.row && rowStyle.field, props.inactive && inactiveStyle.field, props.fieldStyle),
    element: _extends({
      color: theme.base.color
    }, props.row && rowStyle.element, props.elementStyle),
    label: _extends({
      color: theme.base.color
    }, props.row && rowStyle.label, props.labelStyle)
  };
}, _temp)) || _class));

exports.default = Field;
//# sourceMappingURL=field.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/ui/lib/form/select.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('2751');

var _react3 = _interopRequireDefault(_react2);

var _index = require('2752');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _dec, _class, _class2, _temp;

var _black = require('2753');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

const _components = {
  Select: {
    displayName: 'Select'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: 'src/form/select.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Select = _wrapComponent('Select')((_dec = _black.view.ui, _dec(_class = (_temp = _class2 = class Select {

  render() {
    const _gloss = this.glossElement.bind(this);

    const _props = this.props,
          {
      dark,
      width,
      height,
      light,
      className,
      background,
      sync
    } = _props,
          props = _objectWithoutProperties(_props, ['dark', 'width', 'height', 'light', 'className', 'background', 'sync']);

    if (sync) {
      props.value = sync.get();
      props.onChange = e => sync.set(e.target.value);
    }

    return _gloss('root', { className: className }, _gloss('select', props));
  }

}, _class2.defaultProps = {
  height: 20,
  width: 100
}, _class2.style = {
  root: {
    borderRadius: 4
  },
  select: {
    background: 'transparent',
    border: 'none',
    width: '100%',
    padding: 5,
    marginTop: 1
  }
}, _class2.theme = ({ height, width, background }, theme) => ({
  root: {
    height,
    width,
    background
  },
  select: _extends({}, theme.base, {
    background,
    height,
    width
  })
}), _temp)) || _class));

exports.default = Select;
//# sourceMappingURL=select.js.map
});
__sbPundle.registerModule("$app/src/views/root.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('3');

var React = _interopRequireWildcard(_react2);

var _index = require('4');

var _index2 = _interopRequireDefault(_index);

var _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('5');

var _router = require('6');

var _router2 = _interopRequireDefault(_router);

var _ = require('7');

var _2 = _interopRequireDefault(_);

var _header = require('8');

var _header2 = _interopRequireDefault(_header);

var _ui = require('9');

var UI = _interopRequireWildcard(_ui);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

const _components = {
  Root: {
    displayName: 'Root'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/nw/projects/motion/orbit/apps/site/src/views/root.js',
  components: _components,
  locals: [module],
  imports: [React.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Root = _wrapComponent('Root')((0, _black.view)(_class = (_temp = _class2 = class Root {
  render() {
    const _gloss = this.glossElement.bind(this);

    const CurrentPage = _router2.default.activeView || _2.default;
    return _gloss(UI.Theme, { name: 'light' }, _gloss('layout', null, _gloss(_header2.default, null), _gloss('content', null, _gloss(CurrentPage, _extends({ key: _router2.default.key }, _router2.default.params)))));
  }

}, _class2.style = {
  layout: {
    width: '100%',
    maxWidth: '100%',
    overflow: 'hidden'
  }
}, _temp)) || _class);

exports.default = Root;
});
__sbPundle.registerModule("$app/src/router.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _router = require('437');

var _router2 = _interopRequireDefault(_router);

var _home = require('438');

var _home2 = _interopRequireDefault(_home);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function runRouter() {
  return new _router2.default({
    routes: {
      '/': _home2.default
    }
  });
}

let AppRouter = runRouter();

// because doing in installDevTools would break import order
window.Router = AppRouter;

// for hmr
if (module.hot) {
  module.hot.accept(() => {
    AppRouter = runRouter();
    window.App.render();
  });
}

exports.default = AppRouter;
});
__sbPundle.registerModule("$app/node_modules/@mcro/router/lib/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObservableRouter = exports.Router = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _dec, _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

var _mobx = require('2754');

var _router = require('2755');

var _router2 = _interopRequireDefault(_router);

var _createBrowserHistory = require('2756');

var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

exports.Router = _router2.default;

const properRoute = path => path.indexOf('/') === 0 ? path : `/${path}`;

const LENGTH_KEY = 'router.historyLength';

const historyLength = 0; //Number(localStorage.getItem(LENGTH_KEY)) || 0
const historyDirection = val => localStorage.setItem(LENGTH_KEY, Number(localStorage.getItem(LENGTH_KEY)) + val);

let ObservableRouter = exports.ObservableRouter = (_dec = _mobx.observable.ref, (_class = class ObservableRouter {

  constructor({ routes, history }) {
    this.max = historyLength;

    _initDefineProp(this, 'position', _descriptor, this);

    _initDefineProp(this, 'path', _descriptor2, this);

    _initDefineProp(this, 'route', _descriptor3, this);

    _initDefineProp(this, 'params', _descriptor4, this);

    _initDefineProp(this, 'forceUpdate', _descriptor5, this);

    _initDefineProp(this, 'version', _descriptor6, this);

    this._id = Math.random();

    _initDefineProp(this, 'setRoute', _descriptor7, this);

    _initDefineProp(this, 'back', _descriptor8, this);

    _initDefineProp(this, 'forward', _descriptor9, this);

    _initDefineProp(this, 'go', _descriptor10, this);

    _initDefineProp(this, 'set', _descriptor11, this);

    this.normalizeParams = params => {
      // remove false/null
      Object.keys(params).forEach(key => {
        const val = params[key];
        if (val === false || val === null) {
          delete params[key];
        }
      });
      return params;
    };

    this.setObject = params => this.normalizeParams(_extends({}, this.params, params));

    this.setParam = (key, val) => this.normalizeParams(_extends({}, this.params, { [key]: val }));

    _initDefineProp(this, 'unset', _descriptor12, this);

    _initDefineProp(this, 'redirect', _descriptor13, this);

    this.isActive = path => {
      return !!this.router.getMatch(path);
    };

    this.routes = routes;
    this.history = history || (0, _createBrowserHistory2.default)();

    const routeHandlers = Object.keys(routes).reduce((acc, path) => _extends({}, acc, {
      [properRoute(path)]: params => this.setRoute(path, params)
    }), {});

    this.router = new _router2.default({
      routes: routeHandlers,
      history: this.history
    });

    (0, _mobx.autorun)(() => {
      if (this.path !== window.location.pathname || this.forceUpdate) {
        historyDirection(1);
        log && log('Router.go', this.path);
        this.history.push(this.path);
        this.forceUpdate = false;
      }
    });
  }

  get key() {
    return `${this.version}${this.forceUpdate}${JSON.stringify(this.path)}`;
  }

  get activeView() {
    return this.routes[this.route];
  }

  get routeName() {
    return this.path.split('/')[0];
  }

  get atFront() {
    return this.position === this.max;
  }

  get atBack() {
    return this.position === 0;
  }

  // sets a part of the url
}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'position', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return historyLength;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'path', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return window.location.pathname;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'route', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return null;
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'params', [_dec], {
  enumerable: true,
  initializer: function () {
    return {};
  }
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'forceUpdate', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return false;
  }
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, 'version', [_mobx.observable], {
  enumerable: true,
  initializer: function () {
    return 0;
  }
}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, 'setRoute', [_mobx.action], {
  enumerable: true,
  initializer: function () {
    return (path, params) => {
      this.path = window.location.pathname;
      this.route = path;
      this.params = params || {};
    };
  }
}), _applyDecoratedDescriptor(_class.prototype, 'key', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'key'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'activeView', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'activeView'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'routeName', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'routeName'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'atFront', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'atFront'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'atBack', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'atBack'), _class.prototype), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, 'back', [_mobx.action], {
  enumerable: true,
  initializer: function () {
    return () => {
      historyDirection(-1);
      this.position -= 1;
      this.history.goBack();
    };
  }
}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, 'forward', [_mobx.action], {
  enumerable: true,
  initializer: function () {
    return () => {
      this.position += 1;
      this.history.goForward();
    };
  }
}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, 'go', [_mobx.action], {
  enumerable: true,
  initializer: function () {
    return (...segments) => {
      let path = segments.join('/');

      if (path.indexOf(window.location.origin) === 0) {
        path = path.replace(window.location.origin, '');
      } else {
        path = path[0] === '/' ? path : `/${path}`;
      }
      if (path === this.path) {
        // avoid going to same url
        return;
      }
      this.position += 1;
      this.max = this.position;
      this.path = path;
    };
  }
}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, 'set', [_mobx.action], {
  enumerable: true,
  initializer: function () {
    return (key, val) => {
      const Route = this.router.routeTable[`/${this.route}`];

      const params = typeof key === 'object' ? this.setObject(key) : this.setParam(key, val);

      const newPath = Route.stringify(params);

      if (newPath !== this.path) {
        this.path = newPath;
      }
    };
  }
}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, 'unset', [_mobx.action], {
  enumerable: true,
  initializer: function () {
    return key => {
      this.set(key, false);
    };
  }
}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, 'redirect', [_mobx.action], {
  enumerable: true,
  initializer: function () {
    return path => {
      window.location.href = path;
    };
  }
})), _class));
exports.default = ObservableRouter;
//# sourceMappingURL=index.js.map
});
__sbPundle.registerModule("$app/node_modules/@mcro/router/lib/router.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _class, _temp, _initialiseProps;

var _urlPattern = require('2786');

var _urlPattern2 = _interopRequireDefault(_urlPattern);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

let Router = (_temp = _class = class Router {
  constructor({ routes, history, path = window.location }) {
    _initialiseProps.call(this);

    this.routes = routes;
    this.history = history;

    // for quick lookups
    this.routeTable = Object.keys(this.routes).reduce((acc, path) => _extends({}, acc, {
      [path]: new _urlPattern2.default(path)
    }), {});

    // for easy looping
    this.routeList = Object.keys(this.routeTable).map(path => ({
      path,
      route: this.routeTable[path]
    }));

    this.history.listen(this.onRoute);
    this.onRoute(path);
  }

}, _initialiseProps = function () {
  this.onRoute = ({ pathname }) => {
    for (const _ref of this.routeList) {
      const { route, path } = _ref;

      const match = route.match(pathname);
      if (match) {
        this.routes[path](match);
        break;
      }
    }
  };

  this.getMatch = path => {
    for (const _ref2 of this.routeList) {
      const { route } = _ref2;

      const match = route.match(path);
      if (match) {
        return match;
      }
    }
  };
}, _temp);
exports.default = Router;
//# sourceMappingURL=router.js.map
});
__sbPundle.registerModule("../node_modules/url-pattern/lib/url-pattern.js", function(__filename, __dirname, require, module, exports) {
// Generated by CoffeeScript 1.10.0
var slice = [].slice;

(function (root, factory) {
  if ('function' === typeof define && define.amd != null) {
    return define([], factory);
  } else if (typeof exports !== "undefined" && exports !== null) {
    return module.exports = factory();
  } else {
    return root.UrlPattern = factory();
  }
})(this, function () {
  var P, UrlPattern, astNodeContainsSegmentsForProvidedParams, astNodeToNames, astNodeToRegexString, baseAstNodeToRegexString, concatMap, defaultOptions, escapeForRegex, getParam, keysAndValuesToObject, newParser, regexGroupCount, stringConcatMap, stringify;
  escapeForRegex = function (string) {
    return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  };
  concatMap = function (array, f) {
    var i, length, results;
    results = [];
    i = -1;
    length = array.length;
    while (++i < length) {
      results = results.concat(f(array[i]));
    }
    return results;
  };
  stringConcatMap = function (array, f) {
    var i, length, result;
    result = '';
    i = -1;
    length = array.length;
    while (++i < length) {
      result += f(array[i]);
    }
    return result;
  };
  regexGroupCount = function (regex) {
    return new RegExp(regex.toString() + '|').exec('').length - 1;
  };
  keysAndValuesToObject = function (keys, values) {
    var i, key, length, object, value;
    object = {};
    i = -1;
    length = keys.length;
    while (++i < length) {
      key = keys[i];
      value = values[i];
      if (value == null) {
        continue;
      }
      if (object[key] != null) {
        if (!Array.isArray(object[key])) {
          object[key] = [object[key]];
        }
        object[key].push(value);
      } else {
        object[key] = value;
      }
    }
    return object;
  };
  P = {};
  P.Result = function (value, rest) {
    this.value = value;
    this.rest = rest;
  };
  P.Tagged = function (tag, value) {
    this.tag = tag;
    this.value = value;
  };
  P.tag = function (tag, parser) {
    return function (input) {
      var result, tagged;
      result = parser(input);
      if (result == null) {
        return;
      }
      tagged = new P.Tagged(tag, result.value);
      return new P.Result(tagged, result.rest);
    };
  };
  P.regex = function (regex) {
    return function (input) {
      var matches, result;
      matches = regex.exec(input);
      if (matches == null) {
        return;
      }
      result = matches[0];
      return new P.Result(result, input.slice(result.length));
    };
  };
  P.sequence = function () {
    var parsers;
    parsers = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return function (input) {
      var i, length, parser, rest, result, values;
      i = -1;
      length = parsers.length;
      values = [];
      rest = input;
      while (++i < length) {
        parser = parsers[i];
        result = parser(rest);
        if (result == null) {
          return;
        }
        values.push(result.value);
        rest = result.rest;
      }
      return new P.Result(values, rest);
    };
  };
  P.pick = function () {
    var indexes, parsers;
    indexes = arguments[0], parsers = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return function (input) {
      var array, result;
      result = P.sequence.apply(P, parsers)(input);
      if (result == null) {
        return;
      }
      array = result.value;
      result.value = array[indexes];
      return result;
    };
  };
  P.string = function (string) {
    var length;
    length = string.length;
    return function (input) {
      if (input.slice(0, length) === string) {
        return new P.Result(string, input.slice(length));
      }
    };
  };
  P.lazy = function (fn) {
    var cached;
    cached = null;
    return function (input) {
      if (cached == null) {
        cached = fn();
      }
      return cached(input);
    };
  };
  P.baseMany = function (parser, end, stringResult, atLeastOneResultRequired, input) {
    var endResult, parserResult, rest, results;
    rest = input;
    results = stringResult ? '' : [];
    while (true) {
      if (end != null) {
        endResult = end(rest);
        if (endResult != null) {
          break;
        }
      }
      parserResult = parser(rest);
      if (parserResult == null) {
        break;
      }
      if (stringResult) {
        results += parserResult.value;
      } else {
        results.push(parserResult.value);
      }
      rest = parserResult.rest;
    }
    if (atLeastOneResultRequired && results.length === 0) {
      return;
    }
    return new P.Result(results, rest);
  };
  P.many1 = function (parser) {
    return function (input) {
      return P.baseMany(parser, null, false, true, input);
    };
  };
  P.concatMany1Till = function (parser, end) {
    return function (input) {
      return P.baseMany(parser, end, true, true, input);
    };
  };
  P.firstChoice = function () {
    var parsers;
    parsers = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return function (input) {
      var i, length, parser, result;
      i = -1;
      length = parsers.length;
      while (++i < length) {
        parser = parsers[i];
        result = parser(input);
        if (result != null) {
          return result;
        }
      }
    };
  };
  newParser = function (options) {
    var U;
    U = {};
    U.wildcard = P.tag('wildcard', P.string(options.wildcardChar));
    U.optional = P.tag('optional', P.pick(1, P.string(options.optionalSegmentStartChar), P.lazy(function () {
      return U.pattern;
    }), P.string(options.optionalSegmentEndChar)));
    U.name = P.regex(new RegExp("^[" + options.segmentNameCharset + "]+"));
    U.named = P.tag('named', P.pick(1, P.string(options.segmentNameStartChar), P.lazy(function () {
      return U.name;
    })));
    U.escapedChar = P.pick(1, P.string(options.escapeChar), P.regex(/^./));
    U["static"] = P.tag('static', P.concatMany1Till(P.firstChoice(P.lazy(function () {
      return U.escapedChar;
    }), P.regex(/^./)), P.firstChoice(P.string(options.segmentNameStartChar), P.string(options.optionalSegmentStartChar), P.string(options.optionalSegmentEndChar), U.wildcard)));
    U.token = P.lazy(function () {
      return P.firstChoice(U.wildcard, U.optional, U.named, U["static"]);
    });
    U.pattern = P.many1(P.lazy(function () {
      return U.token;
    }));
    return U;
  };
  defaultOptions = {
    escapeChar: '\\',
    segmentNameStartChar: ':',
    segmentValueCharset: 'a-zA-Z0-9-_~ %',
    segmentNameCharset: 'a-zA-Z0-9',
    optionalSegmentStartChar: '(',
    optionalSegmentEndChar: ')',
    wildcardChar: '*'
  };
  baseAstNodeToRegexString = function (astNode, segmentValueCharset) {
    if (Array.isArray(astNode)) {
      return stringConcatMap(astNode, function (node) {
        return baseAstNodeToRegexString(node, segmentValueCharset);
      });
    }
    switch (astNode.tag) {
      case 'wildcard':
        return '(.*?)';
      case 'named':
        return "([" + segmentValueCharset + "]+)";
      case 'static':
        return escapeForRegex(astNode.value);
      case 'optional':
        return '(?:' + baseAstNodeToRegexString(astNode.value, segmentValueCharset) + ')?';
    }
  };
  astNodeToRegexString = function (astNode, segmentValueCharset) {
    if (segmentValueCharset == null) {
      segmentValueCharset = defaultOptions.segmentValueCharset;
    }
    return '^' + baseAstNodeToRegexString(astNode, segmentValueCharset) + '$';
  };
  astNodeToNames = function (astNode) {
    if (Array.isArray(astNode)) {
      return concatMap(astNode, astNodeToNames);
    }
    switch (astNode.tag) {
      case 'wildcard':
        return ['_'];
      case 'named':
        return [astNode.value];
      case 'static':
        return [];
      case 'optional':
        return astNodeToNames(astNode.value);
    }
  };
  getParam = function (params, key, nextIndexes, sideEffects) {
    var index, maxIndex, result, value;
    if (sideEffects == null) {
      sideEffects = false;
    }
    value = params[key];
    if (value == null) {
      if (sideEffects) {
        throw new Error("no values provided for key `" + key + "`");
      } else {
        return;
      }
    }
    index = nextIndexes[key] || 0;
    maxIndex = Array.isArray(value) ? value.length - 1 : 0;
    if (index > maxIndex) {
      if (sideEffects) {
        throw new Error("too few values provided for key `" + key + "`");
      } else {
        return;
      }
    }
    result = Array.isArray(value) ? value[index] : value;
    if (sideEffects) {
      nextIndexes[key] = index + 1;
    }
    return result;
  };
  astNodeContainsSegmentsForProvidedParams = function (astNode, params, nextIndexes) {
    var i, length;
    if (Array.isArray(astNode)) {
      i = -1;
      length = astNode.length;
      while (++i < length) {
        if (astNodeContainsSegmentsForProvidedParams(astNode[i], params, nextIndexes)) {
          return true;
        }
      }
      return false;
    }
    switch (astNode.tag) {
      case 'wildcard':
        return getParam(params, '_', nextIndexes, false) != null;
      case 'named':
        return getParam(params, astNode.value, nextIndexes, false) != null;
      case 'static':
        return false;
      case 'optional':
        return astNodeContainsSegmentsForProvidedParams(astNode.value, params, nextIndexes);
    }
  };
  stringify = function (astNode, params, nextIndexes) {
    if (Array.isArray(astNode)) {
      return stringConcatMap(astNode, function (node) {
        return stringify(node, params, nextIndexes);
      });
    }
    switch (astNode.tag) {
      case 'wildcard':
        return getParam(params, '_', nextIndexes, true);
      case 'named':
        return getParam(params, astNode.value, nextIndexes, true);
      case 'static':
        return astNode.value;
      case 'optional':
        if (astNodeContainsSegmentsForProvidedParams(astNode.value, params, nextIndexes)) {
          return stringify(astNode.value, params, nextIndexes);
        } else {
          return '';
        }
    }
  };
  UrlPattern = function (arg1, arg2) {
    var groupCount, options, parsed, parser, withoutWhitespace;
    if (arg1 instanceof UrlPattern) {
      this.isRegex = arg1.isRegex;
      this.regex = arg1.regex;
      this.ast = arg1.ast;
      this.names = arg1.names;
      return;
    }
    this.isRegex = arg1 instanceof RegExp;
    if (!('string' === typeof arg1 || this.isRegex)) {
      throw new TypeError('argument must be a regex or a string');
    }
    if (this.isRegex) {
      this.regex = arg1;
      if (arg2 != null) {
        if (!Array.isArray(arg2)) {
          throw new Error('if first argument is a regex the second argument may be an array of group names but you provided something else');
        }
        groupCount = regexGroupCount(this.regex);
        if (arg2.length !== groupCount) {
          throw new Error("regex contains " + groupCount + " groups but array of group names contains " + arg2.length);
        }
        this.names = arg2;
      }
      return;
    }
    if (arg1 === '') {
      throw new Error('argument must not be the empty string');
    }
    withoutWhitespace = arg1.replace(/\s+/g, '');
    if (withoutWhitespace !== arg1) {
      throw new Error('argument must not contain whitespace');
    }
    options = {
      escapeChar: (arg2 != null ? arg2.escapeChar : void 0) || defaultOptions.escapeChar,
      segmentNameStartChar: (arg2 != null ? arg2.segmentNameStartChar : void 0) || defaultOptions.segmentNameStartChar,
      segmentNameCharset: (arg2 != null ? arg2.segmentNameCharset : void 0) || defaultOptions.segmentNameCharset,
      segmentValueCharset: (arg2 != null ? arg2.segmentValueCharset : void 0) || defaultOptions.segmentValueCharset,
      optionalSegmentStartChar: (arg2 != null ? arg2.optionalSegmentStartChar : void 0) || defaultOptions.optionalSegmentStartChar,
      optionalSegmentEndChar: (arg2 != null ? arg2.optionalSegmentEndChar : void 0) || defaultOptions.optionalSegmentEndChar,
      wildcardChar: (arg2 != null ? arg2.wildcardChar : void 0) || defaultOptions.wildcardChar
    };
    parser = newParser(options);
    parsed = parser.pattern(arg1);
    if (parsed == null) {
      throw new Error("couldn't parse pattern");
    }
    if (parsed.rest !== '') {
      throw new Error("could only partially parse pattern");
    }
    this.ast = parsed.value;
    this.regex = new RegExp(astNodeToRegexString(this.ast, options.segmentValueCharset));
    this.names = astNodeToNames(this.ast);
  };
  UrlPattern.prototype.match = function (url) {
    var groups, match;
    match = this.regex.exec(url);
    if (match == null) {
      return null;
    }
    groups = match.slice(1);
    if (this.names) {
      return keysAndValuesToObject(this.names, groups);
    } else {
      return groups;
    }
  };
  UrlPattern.prototype.stringify = function (params) {
    if (params == null) {
      params = {};
    }
    if (this.isRegex) {
      throw new Error("can't stringify patterns generated from a regex");
    }
    if (params !== Object(params)) {
      throw new Error("argument must be an object or undefined");
    }
    return stringify(this.ast, params, {});
  };
  UrlPattern.escapeForRegex = escapeForRegex;
  UrlPattern.concatMap = concatMap;
  UrlPattern.stringConcatMap = stringConcatMap;
  UrlPattern.regexGroupCount = regexGroupCount;
  UrlPattern.keysAndValuesToObject = keysAndValuesToObject;
  UrlPattern.P = P;
  UrlPattern.newParser = newParser;
  UrlPattern.defaultOptions = defaultOptions;
  UrlPattern.astNodeToRegexString = astNodeToRegexString;
  UrlPattern.astNodeToNames = astNodeToNames;
  UrlPattern.getParam = getParam;
  UrlPattern.astNodeContainsSegmentsForProvidedParams = astNodeContainsSegmentsForProvidedParams;
  UrlPattern.stringify = stringify;
  return UrlPattern;
});
});
__sbPundle.registerModule("../node_modules/history/createBrowserHistory.js", function(__filename, __dirname, require, module, exports) {
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _warning = require('1465');

var _warning2 = _interopRequireDefault(_warning);

var _invariant = require('1466');

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = require('1467');

var _PathUtils = require('1468');

var _createTransitionManager = require('1469');

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _DOMUtils = require('1470');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

var getHistoryState = function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
};

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */
var createBrowserHistory = function createBrowserHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');

  var globalHistory = window.history;
  var canUseHistory = (0, _DOMUtils.supportsHistory)();
  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();

  var _props$forceRefresh = props.forceRefresh,
      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
      _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

  var getDOMLocation = function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;

    var path = pathname + search + hash;

    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

    return (0, _LocationUtils.createLocation)(path, state, key);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var handlePopState = function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

    handlePop(getDOMLocation(event.state));
  };

  var handleHashChange = function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  };

  var forceNextPop = false;

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({ action: action, location: location });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allKeys.indexOf(fromLocation.key);

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key];

  // Public interface

  var createHref = function createHref(location) {
    return basename + (0, _PathUtils.createPath)(location);
  };

  var push = function push(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

          nextKeys.push(location.key);
          allKeys = nextKeys;

          setState({ action: action, location: location });
        }
      } else {
        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

        window.location.href = href;
      }
    });
  };

  var replace = function replace(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);

          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

          setState({ action: action, location: location });
        }
      } else {
        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

        window.location.replace(href);
      }
    });
  };

  var go = function go(n) {
    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createBrowserHistory;
});
__sbPundle.registerModule("../node_modules/history/LocationUtils.js", function(__filename, __dirname, require, module, exports) {
'use strict';

exports.__esModule = true;
exports.locationsAreEqual = exports.createLocation = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _resolvePathname = require('1723');

var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

var _valueEqual = require('1724');

var _valueEqual2 = _interopRequireDefault(_valueEqual);

var _PathUtils = require('1725');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
  var location = void 0;
  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = (0, _PathUtils.parsePath)(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);

    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
};

var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
};
});
__sbPundle.registerModule("../node_modules/resolve-pathname/cjs/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

exports.__esModule = true;
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
}

// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

// This implementation is based heavily on node's url.parse
function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash = void 0;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
}

exports.default = resolvePathname;
module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/value-equal/cjs/index.js", function(__filename, __dirname, require, module, exports) {
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function valueEqual(a, b) {
  if (a === b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);

    if (aKeys.length !== bKeys.length) return false;

    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

exports.default = valueEqual;
module.exports = exports['default'];
});
__sbPundle.registerModule("../node_modules/history/PathUtils.js", function(__filename, __dirname, require, module, exports) {
'use strict';

exports.__esModule = true;
var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
};

var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
};

var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
};

var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
};

var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
};

var parsePath = exports.parsePath = function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';

  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');
  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
};

var createPath = exports.createPath = function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;

  var path = pathname || '/';

  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

  return path;
};
});
__sbPundle.registerModule("../node_modules/history/createTransitionManager.js", function(__filename, __dirname, require, module, exports) {
'use strict';

exports.__esModule = true;

var _warning = require('1726');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var createTransitionManager = function createTransitionManager() {
  var prompt = null;

  var setPrompt = function setPrompt(nextPrompt) {
    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');

    prompt = nextPrompt;

    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  };

  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  };

  var listeners = [];

  var appendListener = function appendListener(fn) {
    var isActive = true;

    var listener = function listener() {
      if (isActive) fn.apply(undefined, arguments);
    };

    listeners.push(listener);

    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  var notifyListeners = function notifyListeners() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(undefined, args);
    });
  };

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
};

exports.default = createTransitionManager;
});
__sbPundle.registerModule("../node_modules/history/DOMUtils.js", function(__filename, __dirname, require, module, exports) {
'use strict';

exports.__esModule = true;
var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};

var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};

var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
  return callback(window.confirm(message));
}; // eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */
var supportsHistory = exports.supportsHistory = function supportsHistory() {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

  return window.history && 'pushState' in window.history;
};

/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */
var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
};

/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */
var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
};

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */
var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};
});
__sbPundle.registerModule("$app/src/views/pages/home.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('48');

var _react3 = _interopRequireDefault(_react2);

var _index = require('49');

var _index2 = _interopRequireDefault(_index);

var _class, _class2, _temp;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _black = require('50');

var _ui = require('51');

var UI = _interopRequireWildcard(_ui);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const _components = {
  HomePage: {
    displayName: 'HomePage'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/nw/projects/motion/orbit/apps/site/src/views/pages/home.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Text = props => _react3.default.createElement(UI.Text, _extends({
  size: 1.45,
  lineHeight: '1.9rem',
  marginBottom: 20,
  color: [0, 0, 0, 0.5]
}, props));

const SubText = props => _react3.default.createElement(Text, _extends({ size: 1.2, lineHeight: '1.65rem' }, props));
const Hl = props => _react3.default.createElement(UI.Text, _extends({ display: 'inline' }, props));

const Title = props => _react3.default.createElement(Text, _extends({ fontWeight: 800, color: '#000' }, props));
const SubTitle = props => _react3.default.createElement(UI.Title, _extends({ fontWeight: 800, marginBottom: 30 }, props));

const HomePage = _wrapComponent('HomePage')((0, _black.view)(_class = (_temp = _class2 = class HomePage {
  render() {
    const _gloss = this.glossElement.bind(this);

    return _gloss('page', null, _gloss('section', null, _gloss(Text, null, 'Hi,'), _gloss(Text, null, 'We\'re a Founders Fund startup working on ', ' ', _gloss(Hl, null, 'internal company visibility'), ' tools.'), _gloss(SubText, null, 'We were inspired by tooling that high tech companies use to unify their cloud tools and knowledge. Companies like Stripe & Facebook build tools that improve their internal visibility with easy search and feeds for any team.'), _gloss(Text, null, 'Our goal: to make running a company a snap.'), _gloss('img', { $screen: true, src: '/screenshot.png' })), _gloss('section', { $bordered: true }, _gloss(SubTitle, null, 'How?'), _gloss('ul', { $mainList: true }, _gloss('li', null, _gloss(Title, null, 'See \xA0\xA0\uD83D\uDC40')), _gloss(Text, null, 'Which are our company\'s big projects?', _gloss('br', null), 'How are they doing?', _gloss('br', null), 'What\'s happening on team X?', _gloss('br', null), 'What was that document Lisa was working on?', _gloss('br', null), 'What was the slack discussion about issue #244?'), _gloss(SubText, null, 'Whether or not you expose it, these questions are being asked every day within your company. Orbit makes them clear to everyone and lets you choose which to display.'), _gloss('break', null), _gloss('li', null, _gloss(Title, null, 'Control \xA0\xA0\uD83D\uDE80')), _gloss(Text, null, 'Orbit is a tool made for ', _gloss('em', null, 'your company'), ', not ours. So it should work like you do. That\'s why we give you all the control you need:'), _gloss('ul', { $subList: true }, _gloss('li', null, _gloss(SubText, null, 'Pin important docs to any search.')), _gloss('li', null, _gloss(SubText, null, 'Customize a feed of everything you care about.')), _gloss('li', null, _gloss(SubText, null, 'Display your KPIs to the rest of the org.'))), _gloss('break', null), _gloss('li', null, _gloss(Title, null, 'Secure \xA0\xA0\uD83D\uDD12')), _gloss(Text, null, 'You don\'t want to trust a company with all your internal data. Neither would we.'), _gloss(SubText, null, 'That\'s why we designed Orbit to be completely offline. It follows the ', _gloss(Hl, null, 'Secure Offline IEE2014 Spec'), '. Your data never leaves your computer, we never touch any of your data or any of your keys, and Orbit respects all your internal permissions.'))), _gloss('section', { $bordered: true }, _gloss(SubTitle, null, 'When?'), _gloss(Title, null, 'Orbit launches in beta in 2 months'), _gloss(Text, null, 'Until then, let us know you\'re interested and give us some information on the tools you use today, so we can gather some data on how Orbit could make your workday better.'), _gloss(UI.Form, null, _gloss(UI.Field, { size: 1.2, label: 'Name' }), _gloss(UI.Field, { size: 1.2, label: 'Email' }), _gloss(UI.Field, {
      size: 1.2,
      label: 'What you use',
      type: 'textarea',
      elementProps: {
        rows: 10,
        css: { borderColor: 'red', width: '100%' }
      }
    }), _gloss('br', null), _gloss(UI.Button, { size: 1.5 }, 'Send \uD83D\uDC4B'))), _gloss('footer', null));
  }

}, _class2.style = {
  section: {
    width: '80%',
    minWidth: 300,
    maxWidth: 500,
    margin: [0, 'auto'],
    padding: [45, 0]
  },
  bordered: {
    borderBottom: [1, [0, 0, 0, 0.05]]
  },
  screen: {
    marginTop: 45,
    marginBottom: '-275%',
    width: 2140,
    height: 1828,
    transform: {
      scale: 0.25,
      x: '-150%',
      y: '-150%'
    }
  },
  mainList: {
    '& > li': {
      listStylePosition: 'inside',
      listStyleType: 'decimal-leading-zero',
      margin: [0, 0, 0, -25]
    }
  },
  subList: {
    '& > li': {
      listStylePosition: 'auto',
      listStyleType: 'decimal',
      margin: [0, 0, -15, 30]
    }
  },
  break: {
    height: 30
  },
  footer: {
    height: 150
  }
}, _temp)) || _class);

exports.default = HomePage;
});
__sbPundle.registerModule("$app/src/views/pages/404.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('456');

var _react3 = _interopRequireDefault(_react2);

var _index = require('457');

var _index2 = _interopRequireDefault(_index);

var _class;

var _black = require('458');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const _components = {
  NotFoundPage: {
    displayName: 'NotFoundPage'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/nw/projects/motion/orbit/apps/site/src/views/pages/404.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const NotFoundPage = _wrapComponent('NotFoundPage')((0, _black.view)(_class = class NotFoundPage {
  render() {
    const _gloss = this.glossElement.bind(this);

    return _gloss('div', null, '404');
  }
}) || _class);

exports.default = NotFoundPage;
});
__sbPundle.registerModule("$app/src/views/header.js", function(__filename, __dirname, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('44');

var _react3 = _interopRequireDefault(_react2);

var _index = require('45');

var _index2 = _interopRequireDefault(_index);

var _class, _class2, _temp;

var _black = require('46');

var _ui = require('47');

var UI = _interopRequireWildcard(_ui);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const _components = {
  Header: {
    displayName: 'Header'
  }
};

const _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/nw/projects/motion/orbit/apps/site/src/views/header.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _UsersNwProjectsMotionOrbitNode_modulesMcroHmrViewLibIndexJs2(Component, id);
  };
}

const Header = _wrapComponent('Header')((0, _black.view)(_class = (_temp = _class2 = class Header {
  render() {
    const _gloss = this.glossElement.bind(this);

    return _gloss('header', null, _gloss('img', { $icon: true, src: '/orbit.svg' }), _gloss('img', { $logo: true, src: '/orbit-logo.svg' }), _gloss('orbital', null));
  }

}, _class2.style = {
  header: {
    position: 'relative',
    background: 'transparent',
    padding: [80, 10, 30],
    alignItems: 'center',
    justifyContent: 'center'
    // maxWidth: 800,
    // width: '100%',
    // margin: [0, 'auto'],
  },
  icon: {
    width: 60,
    marginBottom: 40
  },
  logo: {
    width: 90
  },
  orbital: {
    width: 2000,
    height: 2000,
    position: 'absolute',
    top: -1000,
    right: -400,
    border: [1, [0, 0, 0, 0.1]],
    borderRadius: 100000000,
    zIndex: 0,
    pointerEvents: 'none'
  }
}, _temp)) || _class);

exports.default = Header;
});
__sbPundle.registerMappings({"chunks":{},"files":{"$app/src/index.js":[51],"$app/node_modules/react/index.js":[52,348,359,2834,2841,2843,2680,2683,756,628,834,547,532,557,819,566,567,585,901,703,715,702,739,732,720,754,727,528,748,2897,2687,2784,2801,2868,1109,2880,2873,1112,2830,2541,2544,2663,2609,2636,2771,2770,2697,2719,16,2550,2656,2560,2556,2563,2589,2597,2774,2570,2573,2580,10,2586,2603,2606,2616,2620,2624,2633,2631,2645,2765,2823,2827,2693,2653,2658,2706,2703,2710,2714,454,2722,21,2734,2739,28,2751,3,48,456,44],"$app/node_modules/react-dom/index.js":[53,533,740,749,2899,1110,1113,2691,2576,455],"$app/node_modules/@mcro/black/lib/createElement.js":[54],"$app/src/themes.js":[55],"$app/src/views/root.js":[56],"$app/node_modules/@mcro/ui/lib/index.js":[57,2,19,9,51,47],"$app/node_modules/react/cjs/react.production.min.js":[58],"$app/node_modules/react/cjs/react.development.js":[59],"$app/node_modules/react-dom/node_modules/object-assign/index.js":[131,125,351,362,2798,1006,1116],"$app/node_modules/react-dom/node_modules/fbjs/lib/emptyObject.js":[132,127,354,370],"$app/node_modules/react-dom/node_modules/fbjs/lib/invariant.js":[133,128,2777,349,360,2796,2793],"$app/node_modules/react-dom/node_modules/fbjs/lib/emptyFunction.js":[134,129,38,353,36,366,2795,2792],"$app/node_modules/react-dom/node_modules/fbjs/lib/warning.js":[126,2778,364,2797],"$app/node_modules/react-dom/node_modules/prop-types/checkPropTypes.js":[130,371,2800],"$app/node_modules/react-dom/node_modules/prop-types/lib/ReactPropTypesSecret.js":[2779,2799,2794],"$app/node_modules/react-dom/cjs/react-dom.production.min.js":[116],"$app/node_modules/react-dom/cjs/react-dom.development.js":[117],"$app/node_modules/react-dom/node_modules/fbjs/lib/ExecutionEnvironment.js":[350,361,42],"$app/node_modules/react-dom/node_modules/fbjs/lib/EventListener.js":[352,363],"$app/node_modules/react-dom/node_modules/fbjs/lib/shallowEqual.js":[355,372],"$app/node_modules/react-dom/node_modules/fbjs/lib/containsNode.js":[356,373],"$app/node_modules/react-dom/node_modules/fbjs/lib/focusNode.js":[357,374],"$app/node_modules/react-dom/node_modules/fbjs/lib/getActiveElement.js":[358,375],"$app/node_modules/react-dom/node_modules/fbjs/lib/isTextNode.js":[41],"$app/node_modules/react-dom/node_modules/fbjs/lib/isNode.js":[43],"$app/node_modules/react-dom/node_modules/fbjs/lib/hyphenateStyleName.js":[365],"$app/node_modules/react-dom/node_modules/fbjs/lib/camelizeStyleName.js":[367],"$app/node_modules/react-dom/node_modules/fbjs/lib/performanceNow.js":[368],"$app/node_modules/react-dom/node_modules/prop-types/index.js":[369,2842,2844,2681,758,760,761,762,763,764,765,766,767,768,769,770,639,641,643,645,647,649,651,653,655,657,659,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,928,930,932,957,959,961,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,577,579,925,575,917,571,573,920,921,550,551,552,553,554,555,816,817,535,536,537,538,539,540,541,542,543,544,545,546,556,562,564,818,953,955,971,973,823,824,825,826,827,828,829,830,831,832,833,565,568,588,590,592,594,596,598,600,602,604,606,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,902,903,904,905,906,907,908,909,910,911,912,913,914,915,708,709,710,711,712,713,581,583,714,701,738,746,731,723,724,753,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,719,726,729,730,530,531,747,2898,2803,2881,2876,1111,2860,2864,2673,2772,2600,2577,2725],"$app/node_modules/react-dom/node_modules/fbjs/lib/hyphenate.js":[37],"$app/node_modules/react-dom/node_modules/fbjs/lib/camelize.js":[39],"$app/node_modules/react-dom/node_modules/fbjs/lib/performance.js":[40],"$app/node_modules/react-dom/node_modules/prop-types/factoryWithTypeCheckers.js":[2763],"$app/node_modules/react-dom/node_modules/prop-types/factoryWithThrowingShims.js":[2764],"$app/node_modules/@mcro/black/lib/gloss.js":[2540,2815],"$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/index.js":[2761,2487,2665],"$app/node_modules/@mcro/black/lib/baseStyles.js":[2762],"$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/fancyElement.js":[2787],"$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/node_modules/@mcro/css/dist/index.js":[2788],"$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/stylesheet.js":[2789],"$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/components/themeProvide.js":[2790],"$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/lib/components/theme.js":[2791],"../node_modules/deep-extend/lib/deep-extend.js":[2835],"../node_modules/html-tags/index.js":[2836],"../../pundle/packages/browser/node_modules/buffer/index.js":[1103,1089],"../../pundle/packages/browser/node_modules/base64-js/index.js":[1091],"../../pundle/packages/browser/node_modules/ieee754/index.js":[1092],"../../pundle/packages/browser/node_modules/isarray/index.js":[1093],"../node_modules/html-tags/html-tags.json":[1105],"$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/node_modules/@mcro/css/dist/helpers.js":[2853],"$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/node_modules/@mcro/css/dist/cssNameMap.js":[2854,2867],"$app/node_modules/@mcro/ui/node_modules/@mcro/gloss/node_modules/@mcro/css/dist/colorNames.js":[2866],"../node_modules/jss-nested/lib/index.js":[2837],"../node_modules/jss-default-unit/lib/index.js":[2838],"../node_modules/jss-props-sort/lib/index.js":[2839],"../node_modules/jss/lib/index.js":[2840],"../node_modules/warning/browser.js":[1096,1257,1380,1372,1471,1465,1726],"../node_modules/jss-default-unit/lib/defaultUnits.js":[1104],"../node_modules/jss/lib/utils/getDynamicStyles.js":[1097],"../node_modules/jss/lib/SheetsRegistry.js":[1098,1258],"../node_modules/jss/lib/SheetsManager.js":[1099],"../node_modules/jss/lib/RuleList.js":[1100,1374,1473,1476],"../node_modules/jss/lib/sheets.js":[1101,1266,1472],"../node_modules/jss/lib/Jss.js":[1102],"../node_modules/jss/lib/utils/createRule.js":[1259,1268],"../node_modules/jss/lib/utils/updateRule.js":[1260],"../node_modules/jss/lib/utils/linkRule.js":[1261,1373],"../node_modules/jss/lib/rules/StyleRule.js":[1262,1381],"../node_modules/jss/lib/utils/cloneStyle.js":[1382],"../node_modules/jss/lib/utils/toCss.js":[1386,1479,1478],"../node_modules/jss/lib/utils/toCssValue.js":[1387,1475],"../node_modules/jss/lib/StyleSheet.js":[1263],"../node_modules/jss/lib/PluginsRegistry.js":[1264],"../node_modules/jss/lib/plugins/rules.js":[1265],"../node_modules/jss/lib/utils/createGenerateClassName.js":[1267],"../node_modules/jss/lib/utils/findRenderer.js":[1269],"../../pundle/packages/browser/node_modules/process/browser.js":[1375,1474,1477,944,1366,2356,2362,2822,2865,1645,1107],"../node_modules/jss/lib/rules/SimpleRule.js":[1388],"../node_modules/jss/lib/rules/KeyframesRule.js":[1389],"../node_modules/jss/lib/rules/ConditionalRule.js":[1390],"../node_modules/jss/lib/rules/FontFaceRule.js":[1391],"../node_modules/jss/lib/rules/ViewportRule.js":[1392],"../node_modules/jss/node_modules/is-in-browser/dist/index.js":[1383],"../node_modules/jss/lib/renderers/DomRenderer.js":[1384],"../node_modules/jss/lib/renderers/VirtualRenderer.js":[1385],"../node_modules/color/index.js":[2486,2679,2668,2611,2700,14,2826,2696],"$app/node_modules/@mcro/ui/lib/helpers/themeMaker.js":[2488,2785],"$app/node_modules/@mcro/ui/lib/helpers/theme.js":[2489,2584],"$app/node_modules/@mcro/ui/lib/helpers/passProps.js":[2490],"$app/node_modules/@mcro/ui/lib/helpers/offset.js":[2491,2701],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/index.js":[2492,2593],"$app/node_modules/@mcro/ui/lib/helpers/portal.js":[2493,2640,2619],"$app/node_modules/@mcro/ui/lib/helpers/stableContainer.js":[2494],"$app/node_modules/@mcro/ui/lib/helpers/inject.js":[2495,2667,2629,24,2742],"$app/node_modules/@mcro/ui/lib/helpers/getTarget.js":[2496,2639],"$app/node_modules/@mcro/ui/lib/helpers/keycode.js":[2497],"$app/node_modules/@mcro/ui/lib/arrow.js":[2498,2642,2569],"$app/node_modules/@mcro/ui/lib/badge.js":[2499],"$app/node_modules/@mcro/ui/lib/button.js":[2500,2567,13,2627,26],"$app/node_modules/@mcro/ui/lib/definitionList.js":[2501],"$app/node_modules/@mcro/ui/lib/drawer.js":[2502],"$app/node_modules/@mcro/ui/lib/dropdown.js":[2503],"$app/node_modules/@mcro/ui/lib/ellipse.js":[2504],"$app/node_modules/@mcro/ui/lib/contextMenu.js":[2505],"$app/node_modules/@mcro/ui/lib/card.js":[2506],"$app/node_modules/@mcro/ui/lib/link.js":[2507],"$app/node_modules/@mcro/ui/lib/list.js":[2508,2566,2578],"$app/node_modules/@mcro/ui/lib/listItem.js":[2509,2592],"$app/node_modules/@mcro/ui/lib/loading.js":[2510],"$app/node_modules/@mcro/ui/lib/grid.js":[2511],"$app/node_modules/@mcro/ui/lib/icon.js":[2512,2549,2669,2583],"$app/node_modules/@mcro/ui/lib/modal.js":[2513],"$app/node_modules/@mcro/ui/lib/pane.js":[2514],"$app/node_modules/@mcro/ui/lib/row.js":[2515],"$app/node_modules/@mcro/ui/lib/tabPane.js":[2516],"$app/node_modules/@mcro/ui/lib/title.js":[2517,2585,2623],"$app/node_modules/@mcro/ui/lib/placeholder.js":[2518],"$app/node_modules/@mcro/ui/lib/tag.js":[2519],"$app/node_modules/@mcro/ui/lib/text.js":[2520,2548,2601,15,2632,2662,31],"$app/node_modules/@mcro/ui/lib/popover.js":[2521,2672,2612,2568,2579],"$app/node_modules/@mcro/ui/lib/progress/index.js":[2522],"$app/node_modules/@mcro/ui/lib/view.js":[2523],"$app/node_modules/@mcro/ui/lib/circle.js":[2524],"$app/node_modules/@mcro/ui/lib/surface.js":[2525,2547,2643,2657,2559,2595,2630,2646,2726],"$app/node_modules/@mcro/ui/lib/sizedSurface.js":[2526,2552,2602,25,2738],"$app/node_modules/@mcro/ui/lib/date.js":[2527],"$app/node_modules/@mcro/ui/lib/fake/fakeText.js":[2528],"$app/node_modules/@mcro/ui/lib/effects/hoverGlow.js":[2529,2670,2718],"$app/node_modules/@mcro/ui/lib/effects/grain.js":[2530],"$app/node_modules/@mcro/ui/lib/effects/poof.js":[2531],"$app/node_modules/@mcro/ui/lib/effects/tiltHoverGlow.js":[2532],"$app/node_modules/@mcro/ui/lib/effects/glint.js":[2533,2671],"$app/node_modules/@mcro/ui/lib/form/form.js":[2534],"$app/node_modules/@mcro/ui/lib/form/input.js":[2535,32],"$app/node_modules/@mcro/ui/lib/form/checkbox.js":[2536,27,35],"$app/node_modules/@mcro/ui/lib/form/toggle.js":[2537,34],"$app/node_modules/@mcro/ui/lib/form/field.js":[2538],"$app/node_modules/@mcro/ui/lib/form/select.js":[2539,33],"../node_modules/color-string/index.js":[785],"../node_modules/color-convert/index.js":[786],"../node_modules/color-name/index.js":[1009,1075],"../node_modules/simple-swizzle/index.js":[1010],"../node_modules/simple-swizzle/node_modules/is-arrayish/index.js":[1095],"../node_modules/color-convert/conversions.js":[1007,1074],"../node_modules/color-convert/route.js":[1008],"$app/node_modules/@mcro/ui/lib/helpers/getThemeFromContext.js":[2682,2773],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ArrowKeyStepper/index.js":[392],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/AutoSizer/index.js":[393],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/CellMeasurer/index.js":[394,919],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/index.js":[395],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ColumnSizer/index.js":[396],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/index.js":[397,757,584,587,589,591,593,595,597,599,601,717,741,745],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/InfiniteLoader/index.js":[398],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/List/index.js":[399],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Masonry/index.js":[400],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/MultiGrid/index.js":[401],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ScrollSync/index.js":[402],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/index.js":[403],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/WindowScroller/index.js":[404],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ArrowKeyStepper/ArrowKeyStepper.js":[483],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ArrowKeyStepper/types.js":[759],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/Grid.js":[465],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/accessibilityOverscanIndicesGetter.js":[466],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/defaultCellRangeRenderer.js":[467,635],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/defaultOverscanIndicesGetter.js":[468,633],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/node_modules/classnames/index.js":[629,820,586,704,736,752],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/utils/calculateSizeAndPositionDataAndUpdateScrollOffset.js":[630],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/utils/ScalingCellSizeAndPositionManager.js":[631,835,923],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/utils/createCallbackMemoizer.js":[632,821,569],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/utils/updateScrollIndexHelper.js":[634],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/node_modules/dom-helpers/util/scrollbarSize.js":[636,822],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/utils/requestAnimationTimeout.js":[637,660,706,707,771],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/types.js":[638,640,642,644,646,648,650,652,654,656,658,927,929,931,956,958,960,576,578,924,574,570,572],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Grid/utils/CellSizeAndPositionManager.js":[926],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/node_modules/dom-helpers/util/inDOM.js":[1094],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/utils/animationFrame.js":[916],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/AutoSizer/AutoSizer.js":[461],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/vendor/detectElementResize.js":[548],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/AutoSizer/types.js":[549],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/CellMeasurer/CellMeasurer.js":[459],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/CellMeasurer/CellMeasurerCache.js":[460,534],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/Collection.js":[462],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/CollectionView.js":[558],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/utils/calculateSizeAndPositionData.js":[559],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/utils/getUpdatedOffsetForIndex.js":[560],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/types.js":[561,563,952,954,970,972],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/SectionManager.js":[922],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Collection/Section.js":[951],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ColumnSizer/ColumnSizer.js":[463],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/InfiniteLoader/InfiniteLoader.js":[464],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/List/List.js":[469],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/List/types.js":[603,605,607],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Masonry/Masonry.js":[470,580,582],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Masonry/createCellPositioner.js":[471],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Masonry/PositionCache.js":[705],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/vendor/intervalTree.js":[918],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/vendor/binarySearchBounds.js":[949],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/MultiGrid/MultiGrid.js":[472],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/MultiGrid/CellMeasurerCacheDecorator.js":[716],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/ScrollSync/ScrollSync.js":[473],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/Table.js":[474],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultCellDataGetter.js":[475,735],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultCellRenderer.js":[476,734],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultHeaderRowRenderer.js":[477,743],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultHeaderRenderer.js":[478,733],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/defaultRowRenderer.js":[479,742],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/Column.js":[480,737],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/SortDirection.js":[481,744,755],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/SortIndicator.js":[482,721],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/Table/types.js":[722,718,725,728,529],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/WindowScroller/utils/onScroll.js":[484,750],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/WindowScroller/WindowScroller.js":[485],"$app/node_modules/@mcro/ui/node_modules/react-virtualized/dist/commonjs/WindowScroller/utils/dimensions.js":[751],"../node_modules/@mcro/hmr-view/lib/index.js":[2688,2542,2545,2664,2637,2698,2720,17,2551,2561,2557,2564,2590,2598,2571,2574,2581,11,2587,2604,2607,2617,2621,2625,2634,2766,2824,2828,2694,2654,2659,2707,2704,2711,2715,2723,22,2735,2740,29,2752,4,49,457,45],"$app/node_modules/@mcro/black/lib/index.js":[2689,2875,2543,2546,2666,2610,2638,2699,2721,18,2555,2562,2558,2565,2591,2599,2572,2575,2582,12,2588,2605,2608,2618,2622,2626,2635,2767,2825,2829,2695,2655,2660,2708,2705,2712,2716,2724,23,2736,2741,30,2753,5,50,458,46],"../node_modules/@mcro/hmr-view/lib/proxyClass.js":[376],"../node_modules/react-deep-force-update/lib/index.js":[377],"../node_modules/lodash/lodash.js":[411,426,2882,2877,2641,2709],"../node_modules/@mcro/hmr-view/lib/proxyProto.js":[412],"../node_modules/@mcro/hmr-view/lib/bindAutoBindMethods.js":[413],"../node_modules/@mcro/hmr-view/lib/deleteUnknownAutoBindMethods.js":[414],"../node_modules/@mcro/hmr-view/lib/supportsProtoAssignment.js":[415],"$app/node_modules/@mcro/black/lib/view.js":[2780],"$app/node_modules/@mcro/black/lib/store.js":[2781,2814],"$app/node_modules/@mcro/black/lib/helpers/index.js":[2782,2816],"$app/node_modules/@mcro/black/lib/constants.js":[2783],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/index.js":[2802,2817],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/extendsReact.js":[2804],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/mobx/observer.js":[2805],"$app/node_modules/@mcro/black/node_modules/@mcro/automagical/lib/index.js":[2806,2819],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/mobx/helpers.js":[2807,2821],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/subscribable.js":[2808,2820],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/emitsMount.js":[2809],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/reactRenderArgs.js":[2810],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/addContext.js":[2811],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/attach.js":[2812],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/react/storeProvidable.js":[2813],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/main.js":[2847,2885,2890,2872,2884],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/react-mixin/index.js":[2848],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/emitter.js":[1002],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/disposable.js":[1003,1078],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/composite-disposable.js":[1004],"../../pundle/packages/browser/node_modules/assert/assert.js":[1076,2354],"../../pundle/packages/browser/node_modules/util/util.js":[1090,2355],"../../pundle/packages/browser/node_modules/util/support/isBufferBrowser.js":[1367],"../../pundle/packages/browser/node_modules/inherits/inherits_browser.js":[1368],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/sb-event-kit/lib/helpers.js":[1077],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/react-mixin/node_modules/smart-mixin/index.js":[1005],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/mobx-react/index.js":[2871],"../node_modules/mobx/lib/mobx.js":[1108,2851,1480,2870,2874,20,2596,2713,2737,2754],"$app/node_modules/@mcro/black/node_modules/global/window.js":[2849],"../node_modules/mobx-utils/mobx-utils.umd.js":[2850],"../node_modules/rxjs/Rx.js":[2852],"../node_modules/rxjs/Subject.js":[1481,1739,2444,1741,2164,1760,2210,1751,2227,2236,2250,2292,2302,2296,2308,2303,2086],"../node_modules/rxjs/Observable.js":[1482,1754,1787,2400,1793,2409,1789,2373,2392,2391,2369,1791,2118,1795,2397,1797,1803,2404,1799,2388,2438,2458,2454,1753,1801,2418,1805,2416,1831,1833,2439,1855,2441,1807,2435,1811,2183,1815,1809,2413,1813,1819,1817,2432,1821,2426,1823,2423,1825,2433,1827,2428,1829,2049,2044,2047,2446,1835,1837,1841,1839,1843,1845,1847,1849,1851,1853,1857,1859,1861,1863,1865,1867,1869,1871,1875,2139,1873,1877,1879,1883,1881,1887,1885,1891,1889,1893,1895,1903,1899,1897,2163,1901,1907,1905,1909,1911,1913,1915,1917,1919,1921,1925,1923,1929,1927,1931,1935,1933,1941,1761,1939,1937,1943,1945,1949,1947,1951,1957,1953,1955,1959,1961,1965,1963,1969,1967,1971,1973,1975,1977,1979,1981,1983,1987,1985,1993,1989,1991,2393,1995,1997,1999,2001,2005,2007,2003,2009,2013,2015,2011,2017,2019,2021,2023,2025,2029,2027,2033,2031,2035,2037,2039,1770,2082],"../node_modules/rxjs/add/observable/bindCallback.js":[1483],"../node_modules/rxjs/add/observable/bindNodeCallback.js":[1484],"../node_modules/rxjs/add/observable/combineLatest.js":[1485],"../node_modules/rxjs/add/observable/concat.js":[1486],"../node_modules/rxjs/add/observable/defer.js":[1487],"../node_modules/rxjs/add/observable/empty.js":[1488],"../node_modules/rxjs/add/observable/forkJoin.js":[1489],"../node_modules/rxjs/add/observable/from.js":[1490],"../node_modules/rxjs/add/observable/fromEvent.js":[1491],"../node_modules/rxjs/add/observable/fromEventPattern.js":[1492],"../node_modules/rxjs/add/observable/fromPromise.js":[1493],"../node_modules/rxjs/add/observable/generate.js":[1494],"../node_modules/rxjs/add/observable/if.js":[1495],"../node_modules/rxjs/add/observable/interval.js":[1496],"../node_modules/rxjs/add/observable/merge.js":[1497],"../node_modules/rxjs/add/observable/race.js":[1498],"../node_modules/rxjs/add/observable/never.js":[1499],"../node_modules/rxjs/add/observable/of.js":[1500],"../node_modules/rxjs/add/observable/onErrorResumeNext.js":[1501],"../node_modules/rxjs/add/observable/pairs.js":[1502],"../node_modules/rxjs/add/observable/range.js":[1503],"../node_modules/rxjs/add/observable/using.js":[1504],"../node_modules/rxjs/add/observable/throw.js":[1505],"../node_modules/rxjs/add/observable/timer.js":[1506],"../node_modules/rxjs/add/observable/zip.js":[1507],"../node_modules/rxjs/add/observable/dom/ajax.js":[1508],"../node_modules/rxjs/add/observable/dom/webSocket.js":[1509],"../node_modules/rxjs/add/operator/buffer.js":[1510],"../node_modules/rxjs/add/operator/bufferCount.js":[1511],"../node_modules/rxjs/add/operator/bufferTime.js":[1512],"../node_modules/rxjs/add/operator/bufferToggle.js":[1513],"../node_modules/rxjs/add/operator/bufferWhen.js":[1514],"../node_modules/rxjs/add/operator/catch.js":[1515],"../node_modules/rxjs/add/operator/combineAll.js":[1516],"../node_modules/rxjs/add/operator/combineLatest.js":[1517],"../node_modules/rxjs/add/operator/concat.js":[1518],"../node_modules/rxjs/add/operator/concatAll.js":[1519],"../node_modules/rxjs/add/operator/concatMap.js":[1520],"../node_modules/rxjs/add/operator/concatMapTo.js":[1521],"../node_modules/rxjs/add/operator/count.js":[1522],"../node_modules/rxjs/add/operator/dematerialize.js":[1523],"../node_modules/rxjs/add/operator/debounce.js":[1524],"../node_modules/rxjs/add/operator/debounceTime.js":[1525],"../node_modules/rxjs/add/operator/defaultIfEmpty.js":[1526],"../node_modules/rxjs/add/operator/delay.js":[1527],"../node_modules/rxjs/add/operator/delayWhen.js":[1528],"../node_modules/rxjs/add/operator/distinct.js":[1529],"../node_modules/rxjs/add/operator/distinctUntilChanged.js":[1530],"../node_modules/rxjs/add/operator/distinctUntilKeyChanged.js":[1531],"../node_modules/rxjs/add/operator/do.js":[1532],"../node_modules/rxjs/add/operator/exhaust.js":[1533],"../node_modules/rxjs/add/operator/exhaustMap.js":[1534],"../node_modules/rxjs/add/operator/expand.js":[1535],"../node_modules/rxjs/add/operator/elementAt.js":[1536],"../node_modules/rxjs/add/operator/filter.js":[1537],"../node_modules/rxjs/add/operator/finally.js":[1538],"../node_modules/rxjs/add/operator/find.js":[1539],"../node_modules/rxjs/add/operator/findIndex.js":[1540],"../node_modules/rxjs/add/operator/first.js":[1541],"../node_modules/rxjs/add/operator/groupBy.js":[1542],"../node_modules/rxjs/add/operator/ignoreElements.js":[1543],"../node_modules/rxjs/add/operator/isEmpty.js":[1544],"../node_modules/rxjs/add/operator/audit.js":[1545],"../node_modules/rxjs/add/operator/auditTime.js":[1546],"../node_modules/rxjs/add/operator/last.js":[1547],"../node_modules/rxjs/add/operator/let.js":[1548],"../node_modules/rxjs/add/operator/every.js":[1549],"../node_modules/rxjs/add/operator/map.js":[1550],"../node_modules/rxjs/add/operator/mapTo.js":[1551],"../node_modules/rxjs/add/operator/materialize.js":[1552],"../node_modules/rxjs/add/operator/max.js":[1553],"../node_modules/rxjs/add/operator/merge.js":[1554],"../node_modules/rxjs/add/operator/mergeAll.js":[1555],"../node_modules/rxjs/add/operator/mergeMap.js":[1556],"../node_modules/rxjs/add/operator/mergeMapTo.js":[1557],"../node_modules/rxjs/add/operator/mergeScan.js":[1558],"../node_modules/rxjs/add/operator/min.js":[1559],"../node_modules/rxjs/add/operator/multicast.js":[1560],"../node_modules/rxjs/add/operator/observeOn.js":[1561],"../node_modules/rxjs/add/operator/onErrorResumeNext.js":[1562],"../node_modules/rxjs/add/operator/pairwise.js":[1563],"../node_modules/rxjs/add/operator/partition.js":[1564],"../node_modules/rxjs/add/operator/pluck.js":[1565],"../node_modules/rxjs/add/operator/publish.js":[1566],"../node_modules/rxjs/add/operator/publishBehavior.js":[1567],"../node_modules/rxjs/add/operator/publishReplay.js":[1568],"../node_modules/rxjs/add/operator/publishLast.js":[1569],"../node_modules/rxjs/add/operator/race.js":[1570],"../node_modules/rxjs/add/operator/reduce.js":[1571],"../node_modules/rxjs/add/operator/repeat.js":[1572],"../node_modules/rxjs/add/operator/repeatWhen.js":[1573],"../node_modules/rxjs/add/operator/retry.js":[1574],"../node_modules/rxjs/add/operator/retryWhen.js":[1575],"../node_modules/rxjs/add/operator/sample.js":[1576],"../node_modules/rxjs/add/operator/sampleTime.js":[1577],"../node_modules/rxjs/add/operator/scan.js":[1578],"../node_modules/rxjs/add/operator/sequenceEqual.js":[1579],"../node_modules/rxjs/add/operator/share.js":[1580],"../node_modules/rxjs/add/operator/shareReplay.js":[1581],"../node_modules/rxjs/add/operator/single.js":[1582],"../node_modules/rxjs/add/operator/skip.js":[1583],"../node_modules/rxjs/add/operator/skipLast.js":[1584],"../node_modules/rxjs/add/operator/skipUntil.js":[1585],"../node_modules/rxjs/add/operator/skipWhile.js":[1586],"../node_modules/rxjs/add/operator/startWith.js":[1587],"../node_modules/rxjs/add/operator/subscribeOn.js":[1588],"../node_modules/rxjs/add/operator/switch.js":[1589],"../node_modules/rxjs/add/operator/switchMap.js":[1590],"../node_modules/rxjs/add/operator/switchMapTo.js":[1591],"../node_modules/rxjs/add/operator/take.js":[1592],"../node_modules/rxjs/add/operator/takeLast.js":[1593],"../node_modules/rxjs/add/operator/takeUntil.js":[1594],"../node_modules/rxjs/add/operator/takeWhile.js":[1595],"../node_modules/rxjs/add/operator/throttle.js":[1596],"../node_modules/rxjs/add/operator/throttleTime.js":[1597],"../node_modules/rxjs/add/operator/timeInterval.js":[1598],"../node_modules/rxjs/add/operator/timeout.js":[1599],"../node_modules/rxjs/add/operator/timeoutWith.js":[1600],"../node_modules/rxjs/add/operator/timestamp.js":[1601],"../node_modules/rxjs/add/operator/toArray.js":[1602],"../node_modules/rxjs/add/operator/toPromise.js":[1603],"../node_modules/rxjs/add/operator/window.js":[1604],"../node_modules/rxjs/add/operator/windowCount.js":[1605],"../node_modules/rxjs/add/operator/windowTime.js":[1606],"../node_modules/rxjs/add/operator/windowToggle.js":[1607],"../node_modules/rxjs/add/operator/windowWhen.js":[1608],"../node_modules/rxjs/add/operator/withLatestFrom.js":[1609],"../node_modules/rxjs/add/operator/zip.js":[1610],"../node_modules/rxjs/add/operator/zipAll.js":[1611],"../node_modules/rxjs/Subscription.js":[1612,1756,1748,2063,1740,2422,2417,2358,2447,1743,2104,2099,2158,2162,1763,2309,2083,2087],"../node_modules/rxjs/Subscriber.js":[1613,1755,2064,2364,2453,2068,2320,2045,2182,2445,2098,2108,2124,2125,2128,2134,2132,2138,2143,2148,2159,2155,2157,2156,2174,2161,2168,2178,2180,2176,2181,2189,2187,2221,1762,2209,2219,2226,2232,2241,2242,2251,2253,2254,2261,2272,2267,2275,2280,1766,2285,1764,2295,2301,2298],"../node_modules/rxjs/AsyncSubject.js":[1614,2403,2412,2215],"../node_modules/rxjs/ReplaySubject.js":[1615,2449,2217,2246],"../node_modules/rxjs/BehaviorSubject.js":[1616,2213],"../node_modules/rxjs/observable/ConnectableObservable.js":[1617,2206],"../node_modules/rxjs/Notification.js":[1618,2069,2133,2188,1771],"../node_modules/rxjs/util/EmptyError.js":[1619,2175,2177,2252],"../node_modules/rxjs/util/ArgumentOutOfRangeError.js":[1620,2160,2255,2273,2268],"../node_modules/rxjs/util/ObjectUnsubscribedError.js":[1621,1757,1745,1752],"../node_modules/rxjs/util/TimeoutError.js":[1622,2286],"../node_modules/rxjs/util/UnsubscriptionError.js":[1623,1738],"../node_modules/rxjs/operator/timeInterval.js":[1624,2016],"../node_modules/rxjs/operator/timestamp.js":[1625,2020],"../node_modules/rxjs/testing/TestScheduler.js":[1626],"../node_modules/rxjs/scheduler/VirtualTimeScheduler.js":[1627,1775],"../node_modules/rxjs/observable/dom/AjaxObservable.js":[1628,2352],"../node_modules/rxjs/scheduler/asap.js":[1629,2394],"../node_modules/rxjs/scheduler/async.js":[1630,2436,2429,2107,2129,2130,2179,2233,2281,1767,2283,2287,1765,2297],"../node_modules/rxjs/scheduler/queue.js":[1631,1742],"../node_modules/rxjs/scheduler/animationFrame.js":[1632],"../node_modules/rxjs/symbol/rxSubscriber.js":[1633,1759,2065,1750],"../node_modules/rxjs/symbol/iterator.js":[1634,2370,2387,2459,2323],"../node_modules/rxjs/symbol/observable.js":[1635,1732,2372,2390],"../node_modules/rxjs/SubjectSubscription.js":[1758,1746],"../node_modules/rxjs/util/root.js":[1730,1785,1786,2365,1784,2437,2457,2071,2041,2448,2460,2377,2378,2360,2291,2359],"../node_modules/rxjs/util/toSubscriber.js":[1731],"../node_modules/rxjs/Observer.js":[2066,1749],"../node_modules/rxjs/util/isFunction.js":[1747,1735,2420,2415],"../node_modules/rxjs/util/isArray.js":[1733,2325,2113,2406,2380,2396,2222,2203,2319],"../node_modules/rxjs/util/isObject.js":[1734,2368],"../node_modules/rxjs/util/tryCatch.js":[1736,2401,2410,2419,2042,2450,2100,2144,2149,2170,2198,2228,2237,2243,2310,2304],"../node_modules/rxjs/util/errorObject.js":[1737,2067,2402,2411,2421,2043,2451,2101,2145,2150,2171,2199,2229,2238,2244,2311,2305],"../node_modules/rxjs/observable/bindCallback.js":[1788],"../node_modules/rxjs/observable/BoundCallbackObservable.js":[2317],"../node_modules/rxjs/observable/bindNodeCallback.js":[1794],"../node_modules/rxjs/observable/BoundNodeCallbackObservable.js":[2329],"../node_modules/rxjs/observable/combineLatest.js":[1790],"../node_modules/rxjs/util/isScheduler.js":[2324,2376,2119,2440,2186,2430,2109,2260,2300],"../node_modules/rxjs/observable/ArrayObservable.js":[2326,2112,2120,2385,2184,2223,2337,2318,2256],"../node_modules/rxjs/operator/combineLatest.js":[2327,2117,1850],"../node_modules/rxjs/observable/ScalarObservable.js":[2374,2455,2257],"../node_modules/rxjs/observable/EmptyObservable.js":[2375,2331,2405,2456,2220,2258,2274,2269],"../node_modules/rxjs/OuterSubscriber.js":[2114,2191,2399,2408,2443,2224,2204,2425,2321,2096,2106,2102,2110,2196,2193,2126,2140,2135,2146,2153,2151,2172,2201,2230,2239,2234,2247,2263,2265,2270,2276,2278,2289,2293,2312,2306,2314],"../node_modules/rxjs/util/subscribeToResult.js":[2115,2192,2398,2407,2442,2225,2205,2424,2322,2097,2105,2103,2111,2195,2194,2127,2141,2136,2147,2154,2152,2173,2200,2231,2240,2235,2248,2264,2266,2271,2277,2279,2290,2294,2313,2307,2315],"../node_modules/rxjs/util/isArrayLike.js":[2366,2381],"../node_modules/rxjs/util/isPromise.js":[2367,2382],"../node_modules/rxjs/InnerSubscriber.js":[2371],"../node_modules/rxjs/observable/concat.js":[1792],"../node_modules/rxjs/operator/concat.js":[2328,1852,2259],"../node_modules/rxjs/operator/mergeAll.js":[2121,2185,2116,1930],"../node_modules/rxjs/observable/defer.js":[1796],"../node_modules/rxjs/observable/DeferObservable.js":[2330],"../node_modules/rxjs/observable/empty.js":[1798],"../node_modules/rxjs/observable/forkJoin.js":[1804],"../node_modules/rxjs/observable/ForkJoinObservable.js":[2332],"../node_modules/rxjs/observable/from.js":[1800],"../node_modules/rxjs/observable/FromObservable.js":[2333,2202],"../node_modules/rxjs/observable/PromiseObservable.js":[2383,2348],"../node_modules/rxjs/observable/IteratorObservable.js":[2384],"../node_modules/rxjs/observable/ArrayLikeObservable.js":[2386],"../node_modules/rxjs/operator/observeOn.js":[2389,1744,1940],"../node_modules/rxjs/observable/fromEvent.js":[1802],"../node_modules/rxjs/observable/FromEventObservable.js":[2334],"../node_modules/rxjs/observable/fromEventPattern.js":[1806],"../node_modules/rxjs/observable/FromEventPatternObservable.js":[2335],"../node_modules/rxjs/observable/fromPromise.js":[1832],"../node_modules/rxjs/observable/generate.js":[1834],"../node_modules/rxjs/observable/GenerateObservable.js":[2349],"../node_modules/rxjs/observable/if.js":[1856],"../node_modules/rxjs/observable/IfObservable.js":[2350],"../node_modules/rxjs/observable/interval.js":[1808],"../node_modules/rxjs/observable/IntervalObservable.js":[2336],"../node_modules/rxjs/util/isNumeric.js":[2434,2427,2395,2299],"../node_modules/rxjs/scheduler/AsyncAction.js":[1776,2081,2074,1768,2077],"../node_modules/rxjs/scheduler/AsyncScheduler.js":[1777,2080,2076,1769,2079],"../node_modules/rxjs/scheduler/Action.js":[2072],"../node_modules/rxjs/Scheduler.js":[2070],"../node_modules/rxjs/observable/merge.js":[1812],"../node_modules/rxjs/operator/merge.js":[2339,1924],"../node_modules/rxjs/observable/race.js":[1816],"../node_modules/rxjs/operator/race.js":[2340,1956],"../node_modules/rxjs/observable/never.js":[1810],"../node_modules/rxjs/observable/NeverObservable.js":[2338],"../node_modules/rxjs/util/noop.js":[2414,2169],"../node_modules/rxjs/observable/of.js":[1814],"../node_modules/rxjs/observable/onErrorResumeNext.js":[1820],"../node_modules/rxjs/operator/onErrorResumeNext.js":[2341,1938],"../node_modules/rxjs/observable/pairs.js":[1818],"../node_modules/rxjs/observable/PairsObservable.js":[2342],"../node_modules/rxjs/observable/range.js":[1822],"../node_modules/rxjs/observable/RangeObservable.js":[2344],"../node_modules/rxjs/observable/using.js":[1824],"../node_modules/rxjs/observable/UsingObservable.js":[2343],"../node_modules/rxjs/observable/throw.js":[1826],"../node_modules/rxjs/observable/ErrorObservable.js":[2345],"../node_modules/rxjs/observable/timer.js":[1828],"../node_modules/rxjs/observable/TimerObservable.js":[2347],"../node_modules/rxjs/util/isDate.js":[2431,2131,2284,2288],"../node_modules/rxjs/observable/zip.js":[1830],"../node_modules/rxjs/operator/zip.js":[2346,2038,2316],"../node_modules/rxjs/observable/dom/ajax.js":[2050],"../node_modules/rxjs/operator/map.js":[2046,1918,2212],"../node_modules/rxjs/observable/dom/webSocket.js":[2048],"../node_modules/rxjs/observable/dom/WebSocketSubject.js":[2351],"../node_modules/rxjs/util/assign.js":[2452],"../node_modules/rxjs/scheduler/QueueAction.js":[1782],"../node_modules/rxjs/scheduler/QueueScheduler.js":[1783],"../node_modules/rxjs/operator/buffer.js":[1836],"../node_modules/rxjs/operator/bufferCount.js":[1838],"../node_modules/rxjs/operator/bufferTime.js":[1842],"../node_modules/rxjs/operator/bufferToggle.js":[1840],"../node_modules/rxjs/operator/bufferWhen.js":[1844],"../node_modules/rxjs/operator/catch.js":[1846],"../node_modules/rxjs/operator/combineAll.js":[1848],"../node_modules/rxjs/operator/concatAll.js":[1854],"../node_modules/rxjs/operator/concatMap.js":[1858],"../node_modules/rxjs/operator/mergeMap.js":[2122,1928],"../node_modules/rxjs/operator/concatMapTo.js":[1860],"../node_modules/rxjs/operator/mergeMapTo.js":[2123,1932],"../node_modules/rxjs/operator/count.js":[1862],"../node_modules/rxjs/operator/dematerialize.js":[1864],"../node_modules/rxjs/operator/debounce.js":[1866],"../node_modules/rxjs/operator/debounceTime.js":[1868],"../node_modules/rxjs/operator/defaultIfEmpty.js":[1870],"../node_modules/rxjs/operator/delay.js":[1872],"../node_modules/rxjs/operator/delayWhen.js":[1876],"../node_modules/rxjs/operator/distinct.js":[1874],"../node_modules/rxjs/util/Set.js":[2137],"../node_modules/rxjs/operator/distinctUntilChanged.js":[1878,2142],"../node_modules/rxjs/operator/distinctUntilKeyChanged.js":[1880],"../node_modules/rxjs/operator/do.js":[1884],"../node_modules/rxjs/operator/exhaust.js":[1882],"../node_modules/rxjs/operator/exhaustMap.js":[1888],"../node_modules/rxjs/operator/expand.js":[1886],"../node_modules/rxjs/operator/elementAt.js":[1892],"../node_modules/rxjs/operator/filter.js":[1890,2208],"../node_modules/rxjs/operator/finally.js":[1894],"../node_modules/rxjs/operator/find.js":[1896,2167],"../node_modules/rxjs/operator/findIndex.js":[1904],"../node_modules/rxjs/operator/first.js":[1900],"../node_modules/rxjs/operator/groupBy.js":[1898],"../node_modules/rxjs/util/Map.js":[2165],"../node_modules/rxjs/util/FastMap.js":[2166],"../node_modules/rxjs/util/MapPolyfill.js":[2379],"../node_modules/rxjs/operator/ignoreElements.js":[1902],"../node_modules/rxjs/operator/isEmpty.js":[1908],"../node_modules/rxjs/operator/audit.js":[1906],"../node_modules/rxjs/operator/auditTime.js":[1910],"../node_modules/rxjs/operator/last.js":[1912],"../node_modules/rxjs/operator/let.js":[1914],"../node_modules/rxjs/operator/every.js":[1916],"../node_modules/rxjs/operator/mapTo.js":[1920],"../node_modules/rxjs/operator/materialize.js":[1922],"../node_modules/rxjs/operator/max.js":[1926],"../node_modules/rxjs/operator/reduce.js":[2190,2197,1960],"../node_modules/rxjs/operator/mergeScan.js":[1936],"../node_modules/rxjs/operator/min.js":[1934],"../node_modules/rxjs/operator/multicast.js":[1942,2211,2214,2218,2216,2249,2245],"../node_modules/rxjs/operator/pairwise.js":[1944],"../node_modules/rxjs/operator/partition.js":[1946],"../node_modules/rxjs/util/not.js":[2207],"../node_modules/rxjs/operator/pluck.js":[1950],"../node_modules/rxjs/operator/publish.js":[1948],"../node_modules/rxjs/operator/publishBehavior.js":[1952],"../node_modules/rxjs/operator/publishReplay.js":[1958],"../node_modules/rxjs/operator/publishLast.js":[1954],"../node_modules/rxjs/operator/repeat.js":[1962],"../node_modules/rxjs/operator/repeatWhen.js":[1966],"../node_modules/rxjs/operator/retry.js":[1964],"../node_modules/rxjs/operator/retryWhen.js":[1970],"../node_modules/rxjs/operator/sample.js":[1968],"../node_modules/rxjs/operator/sampleTime.js":[1972],"../node_modules/rxjs/operator/scan.js":[1974],"../node_modules/rxjs/operator/sequenceEqual.js":[1976],"../node_modules/rxjs/operator/share.js":[1978],"../node_modules/rxjs/operator/shareReplay.js":[1980],"../node_modules/rxjs/operator/single.js":[1982],"../node_modules/rxjs/operator/skip.js":[1984],"../node_modules/rxjs/operator/skipLast.js":[1988],"../node_modules/rxjs/operator/skipUntil.js":[1986],"../node_modules/rxjs/operator/skipWhile.js":[1994],"../node_modules/rxjs/operator/startWith.js":[1990],"../node_modules/rxjs/operator/subscribeOn.js":[1992],"../node_modules/rxjs/observable/SubscribeOnObservable.js":[2262],"../node_modules/rxjs/scheduler/AsapAction.js":[1778],"../node_modules/rxjs/scheduler/AsapScheduler.js":[1779],"../../pundle/packages/browser/node_modules/timers-browserify-full/timers.js":[2075,2357,2361],"../node_modules/rxjs/util/Immediate.js":[2073],"../../pundle/packages/browser/node_modules/timers-browserify-full/_linklist.js":[2353],"../node_modules/rxjs/operator/switch.js":[1996],"../node_modules/rxjs/operator/switchMap.js":[1998],"../node_modules/rxjs/operator/switchMapTo.js":[2000],"../node_modules/rxjs/operator/take.js":[2002],"../node_modules/rxjs/operator/takeLast.js":[2006],"../node_modules/rxjs/operator/takeUntil.js":[2008],"../node_modules/rxjs/operator/takeWhile.js":[2004],"../node_modules/rxjs/operator/throttle.js":[2010,2282],"../node_modules/rxjs/operator/throttleTime.js":[2014],"../node_modules/rxjs/operator/timeout.js":[2012],"../node_modules/rxjs/operator/timeoutWith.js":[2018],"../node_modules/rxjs/operator/toArray.js":[2022],"../node_modules/rxjs/operator/toPromise.js":[2024],"../node_modules/rxjs/operator/window.js":[2026],"../node_modules/rxjs/operator/windowCount.js":[2030],"../node_modules/rxjs/operator/windowTime.js":[2028],"../node_modules/rxjs/operator/windowToggle.js":[2034],"../node_modules/rxjs/operator/windowWhen.js":[2032],"../node_modules/rxjs/operator/withLatestFrom.js":[2036],"../node_modules/rxjs/operator/zipAll.js":[2040],"../node_modules/rxjs/testing/ColdObservable.js":[1772],"../node_modules/rxjs/testing/HotObservable.js":[1773],"../node_modules/rxjs/testing/SubscriptionLog.js":[1774,2363],"../node_modules/rxjs/testing/SubscriptionLoggable.js":[2084,2088],"../node_modules/rxjs/util/applyMixins.js":[2085,2089],"../node_modules/rxjs/scheduler/AnimationFrameAction.js":[1780],"../node_modules/rxjs/scheduler/AnimationFrameScheduler.js":[1781],"../node_modules/rxjs/util/AnimationFrame.js":[2078],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/@mcro/helpers/lib/index.js":[2869],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/@mcro/helpers/lib/events.js":[2886],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/@mcro/helpers/lib/ref.js":[2887],"../node_modules/disposable-event/lib/index.js":[2889],"../node_modules/sb-event-kit/lib/main.js":[2461],"../node_modules/sb-event-kit/lib/disposable.js":[2462,2465],"../node_modules/sb-event-kit/lib/composite-disposable.js":[2463],"../node_modules/sb-event-kit/lib/emitter.js":[2464],"../node_modules/object-path/index.js":[2888],"../node_modules/hoist-non-react-statics/index.js":[2883,2878,2775],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/lib/index.js":[2879],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/lib/style.js":[1114],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/node_modules/error-stack-parser/error-stack-parser.js":[1115],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/lib/lib.js":[1117],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/node_modules/sourcemapped-stacktrace/dist/sourcemapped-stacktrace.js":[1118],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/node_modules/redbox-react/node_modules/stackframe/stackframe.js":[1393],"$app/node_modules/@mcro/black/node_modules/@mcro/decor/lib/plugins/core/emittable.js":[2818],"$app/node_modules/@mcro/black/lib/helpers/log.js":[2832],"$app/node_modules/@mcro/black/lib/helpers/watch.js":[2833],"$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/index.js":[2690,2554,2628],"$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/components/createAll.js":[2831],"$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/components/createProvider.js":[2845],"$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/components/createInject.js":[2846],"../node_modules/invariant/browser.js":[2855,2861,1466],"$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/utils/shallowEqual.js":[2856,2862],"$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/utils/isPlainObject.js":[2857,2863],"$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/utils/hasEmptyIntersection.js":[2858],"$app/node_modules/@mcro/ui/node_modules/@mcro/react-tunnel/dist/utils/sharedKeys.js":[2859],"../node_modules/keycode/index.js":[2692],"$app/node_modules/@mcro/ui/lib/iconNames.js":[2613],"$app/node_modules/@mcro/ui/lib/iconsDetailed.js":[2614],"../node_modules/fuzzy/lib/fuzzy.js":[2615],"$app/node_modules/@mcro/ui/lib/helpers/injectTheme.js":[2644,2553],"../node_modules/lodash-decorators/index.js":[2702],"../node_modules/lodash-decorators/functions.js":[962],"../node_modules/lodash-decorators/bind/bind.js":[963],"../node_modules/lodash-decorators/tap.js":[964],"../node_modules/lodash-decorators/bind/bindAll.js":[965,1062],"../node_modules/lodash-decorators/mixin.js":[966],"../node_modules/lodash-decorators/attempt.js":[967],"../node_modules/lodash-decorators/decoratorFactory.js":[968,1011,1016],"../node_modules/lodash-decorators/Applicator.js":[969,1063,1012,1030,1017],"../node_modules/lodash/once.js":[1032],"../node_modules/lodash/debounce.js":[1033,1147],"../node_modules/lodash/throttle.js":[1034],"../node_modules/lodash/memoize.js":[1035,2090],"../node_modules/lodash/after.js":[1036],"../node_modules/lodash/before.js":[1037,1145],"../node_modules/lodash/spread.js":[1038],"../node_modules/lodash/rearg.js":[1039],"../node_modules/lodash/negate.js":[1040],"../node_modules/lodash/overArgs.js":[1041],"../node_modules/lodash/ary.js":[1042,1188],"../node_modules/lodash/curry.js":[1043],"../node_modules/lodash/curryRight.js":[1044],"../node_modules/lodash/rest.js":[1045],"../node_modules/lodash/partial.js":[1046,1184,1057,1022,1014],"../node_modules/lodash/partialRight.js":[1047],"../node_modules/lodash/wrap.js":[1048],"../node_modules/lodash/flow.js":[1049],"../node_modules/lodash/flowRight.js":[1050],"../node_modules/lodash/delay.js":[1051],"../node_modules/lodash/defer.js":[1052],"../node_modules/lodash/unary.js":[1053],"../node_modules/lodash/flip.js":[1054],"../node_modules/lodash/toInteger.js":[1150,1149,1171,1199,1178],"../node_modules/lodash/toFinite.js":[1226],"../node_modules/lodash/toNumber.js":[1326,1156,1182],"../node_modules/lodash/isObject.js":[1240,1154,1148,1696,1134,1395,1450,1439,1086,1325,1128],"../node_modules/lodash/isSymbol.js":[1241,1441,1438,1442],"../node_modules/lodash/_baseGetTag.js":[1339,1133,1639,1641,1714,1457,1208,1312],"../node_modules/lodash/isObjectLike.js":[1340,1455,1405,1640,1431,1643,1458,1682,1209,1314],"../node_modules/lodash/_Symbol.js":[1211,1318,1360,1702,1435],"../node_modules/lodash/_getRawTag.js":[1212],"../node_modules/lodash/_objectToString.js":[1213],"../node_modules/lodash/_root.js":[1319,1239,2091,1427,1637,1283,1290,1278,1281,2053,1406,2058,2062,2060],"../node_modules/lodash/_freeGlobal.js":[1338,1644],"../node_modules/lodash/now.js":[1155],"../node_modules/lodash/_MapCache.js":[1151,1722,1727],"../node_modules/lodash/_mapCacheClear.js":[1230],"../node_modules/lodash/_mapCacheDelete.js":[1231],"../node_modules/lodash/_mapCacheGet.js":[1232],"../node_modules/lodash/_mapCacheHas.js":[1233],"../node_modules/lodash/_mapCacheSet.js":[1234],"../node_modules/lodash/_Hash.js":[1328],"../node_modules/lodash/_ListCache.js":[1329,1672,1716,1720],"../node_modules/lodash/_Map.js":[1330,1721,1710],"../node_modules/lodash/_hashClear.js":[1416],"../node_modules/lodash/_hashDelete.js":[1417],"../node_modules/lodash/_hashGet.js":[1418],"../node_modules/lodash/_hashHas.js":[1419],"../node_modules/lodash/_hashSet.js":[1420],"../node_modules/lodash/_nativeCreate.js":[1646,1647,1648,1649],"../node_modules/lodash/_getNative.js":[1692,1426,1428,1636,2057,2061,2059],"../node_modules/lodash/_baseIsNative.js":[1654],"../node_modules/lodash/_getValue.js":[1655],"../node_modules/lodash/isFunction.js":[1694,1218,1059,1079,1056,1021,1127,1201],"../node_modules/lodash/_isMasked.js":[1695],"../node_modules/lodash/_toSource.js":[1697,1715],"../node_modules/lodash/_coreJsData.js":[2051],"../node_modules/lodash/_listCacheClear.js":[1421],"../node_modules/lodash/_listCacheDelete.js":[1422],"../node_modules/lodash/_listCacheGet.js":[1423],"../node_modules/lodash/_listCacheHas.js":[1424],"../node_modules/lodash/_listCacheSet.js":[1425],"../node_modules/lodash/_assocIndexOf.js":[1650,1651,1652,1653],"../node_modules/lodash/eq.js":[1693,1704,1221,1322],"../node_modules/lodash/_getMapData.js":[1331,1332,1333,1334],"../node_modules/lodash/_isKeyable.js":[1429],"../node_modules/lodash/_apply.js":[1167,1315,1284,1279,1157,1130],"../node_modules/lodash/_arrayPush.js":[1168,1242,2092,1124],"../node_modules/lodash/_baseRest.js":[1169,1161,1256,1177,1119,1172,1181,1186,1376,1460,1131,1222],"../node_modules/lodash/_castSlice.js":[1170,1235],"../node_modules/lodash/identity.js":[1202,1415,1296,1246,1216,1023],"../node_modules/lodash/_overRest.js":[1203,1228],"../node_modules/lodash/_setToString.js":[1204,1300,1229],"../node_modules/lodash/_baseSetToString.js":[1310],"../node_modules/lodash/_shortOut.js":[1311,1303],"../node_modules/lodash/constant.js":[1413],"../node_modules/lodash/_defineProperty.js":[1414,1321],"../node_modules/lodash/_baseSlice.js":[1255],"../node_modules/lodash/_createWrap.js":[1152,1166,1165,1189,1120,1173,1187,1377],"../node_modules/lodash/_flatRest.js":[1153,1250],"../node_modules/lodash/_baseSetData.js":[1190,1302],"../node_modules/lodash/_createBind.js":[1191],"../node_modules/lodash/_createCurry.js":[1192],"../node_modules/lodash/_createHybrid.js":[1193,1286],"../node_modules/lodash/_createPartial.js":[1194],"../node_modules/lodash/_getData.js":[1195,1357,1251],"../node_modules/lodash/_mergeData.js":[1196],"../node_modules/lodash/_setData.js":[1197,1400],"../node_modules/lodash/_setWrapToString.js":[1198,1401],"../node_modules/lodash/_metaMap.js":[1297,1291],"../node_modules/lodash/_WeakMap.js":[1398,1713],"../node_modules/lodash/_createCtor.js":[1282,1285,1273,1280],"../node_modules/lodash/_baseCreate.js":[1394,1448,1363],"../node_modules/lodash/_createRecurry.js":[1287,1274],"../node_modules/lodash/_getHolder.js":[1288,1275,1121,1174,1378],"../node_modules/lodash/_replaceHolders.js":[1289,1277,1295,1122,1175,1379],"../node_modules/lodash/_composeArgs.js":[1270,1293],"../node_modules/lodash/_composeArgsRight.js":[1271,1294],"../node_modules/lodash/_countHolders.js":[1272],"../node_modules/lodash/_reorder.js":[1276],"../node_modules/lodash/_isLaziable.js":[1399,1254],"../node_modules/lodash/_LazyWrapper.js":[1356,1451,1678],"../node_modules/lodash/_getFuncName.js":[1358,1252],"../node_modules/lodash/wrapperLodash.js":[1359],"../node_modules/lodash/_baseLodash.js":[1449,1453,1364],"../node_modules/lodash/noop.js":[1292,1081],"../node_modules/lodash/_realNames.js":[1365],"../node_modules/lodash/_LodashWrapper.js":[1452,1679,1249],"../node_modules/lodash/isArray.js":[1454,1362,1164,1247,1667,2093,1306,1698,1440,1437,1658,1253],"../node_modules/lodash/_wrapperClone.js":[1456],"../node_modules/lodash/_copyArray.js":[1680,1396,1126],"../node_modules/lodash/_getWrapDetails.js":[1298],"../node_modules/lodash/_insertWrapDetails.js":[1299],"../node_modules/lodash/_updateWrapDetails.js":[1301],"../node_modules/lodash/_arrayEach.js":[1402,1123],"../node_modules/lodash/_arrayIncludes.js":[1403,1684],"../node_modules/lodash/_baseIndexOf.js":[1638],"../node_modules/lodash/_baseFindIndex.js":[1689],"../node_modules/lodash/_baseIsNaN.js":[1690],"../node_modules/lodash/_strictIndexOf.js":[1691],"../node_modules/lodash/_isIndex.js":[1397,1308,1659,1324],"../node_modules/lodash/flatten.js":[1227,1065],"../node_modules/lodash/_baseFlatten.js":[1327,1159],"../node_modules/lodash/_isFlattenable.js":[1243],"../node_modules/lodash/isArguments.js":[1361,1305,1657],"../node_modules/lodash/_baseIsArguments.js":[1404],"../node_modules/lodash/_arrayMap.js":[1158,1436,1686,1217],"../node_modules/lodash/_baseIteratee.js":[1160],"../node_modules/lodash/_baseUnary.js":[1162,1409,1687],"../node_modules/lodash/_castRest.js":[1163],"../node_modules/lodash/_baseMatches.js":[1244],"../node_modules/lodash/_baseMatchesProperty.js":[1245],"../node_modules/lodash/property.js":[1248],"../node_modules/lodash/_baseIsMatch.js":[1349],"../node_modules/lodash/_getMatchData.js":[1350],"../node_modules/lodash/_matchesStrictComparable.js":[1351,1347],"../node_modules/lodash/_Stack.js":[1443,1662],"../node_modules/lodash/_baseIsEqual.js":[1444,1342],"../node_modules/lodash/_stackClear.js":[1673],"../node_modules/lodash/_stackDelete.js":[1674],"../node_modules/lodash/_stackGet.js":[1675],"../node_modules/lodash/_stackHas.js":[1676],"../node_modules/lodash/_stackSet.js":[1677],"../node_modules/lodash/_baseIsEqualDeep.js":[1430],"../node_modules/lodash/_equalArrays.js":[1663,1705],"../node_modules/lodash/_equalByTag.js":[1664],"../node_modules/lodash/_equalObjects.js":[1665],"../node_modules/lodash/_getTag.js":[1666],"../node_modules/lodash/isBuffer.js":[1668,1307],"../node_modules/lodash/isTypedArray.js":[1669,1309],"../node_modules/lodash/_SetCache.js":[1717,1683],"../node_modules/lodash/_arraySome.js":[1718],"../node_modules/lodash/_cacheHas.js":[1719,1688],"../node_modules/lodash/_setCacheAdd.js":[1728],"../node_modules/lodash/_setCacheHas.js":[1729],"../node_modules/lodash/_Uint8Array.js":[1703],"../node_modules/lodash/_mapToArray.js":[1706],"../node_modules/lodash/_setToArray.js":[1707],"../node_modules/lodash/_getAllKeys.js":[1708],"../node_modules/lodash/_baseGetAllKeys.js":[2054],"../node_modules/lodash/_getSymbols.js":[2055],"../node_modules/lodash/keys.js":[2056,1446,1215,1144,1138,1129],"../node_modules/lodash/_arrayFilter.js":[2094,1200],"../node_modules/lodash/stubArray.js":[2095],"../node_modules/lodash/_arrayLikeKeys.js":[1205],"../node_modules/lodash/_baseKeys.js":[1206],"../node_modules/lodash/isArrayLike.js":[1207,1681,1142,1323],"../node_modules/lodash/_baseTimes.js":[1304],"../node_modules/lodash/stubFalse.js":[1407],"../node_modules/lodash/_baseIsTypedArray.js":[1408],"../node_modules/lodash/_nodeUtil.js":[1410],"../node_modules/lodash/isLength.js":[1642,1219,1660],"../node_modules/lodash/_isPrototype.js":[1316,1143],"../node_modules/lodash/_nativeKeys.js":[1317],"../node_modules/lodash/_overArg.js":[1412,1411],"../node_modules/lodash/_DataView.js":[1709],"../node_modules/lodash/_Promise.js":[1711],"../node_modules/lodash/_Set.js":[1712],"../node_modules/lodash/_isStrictComparable.js":[1445,1346],"../node_modules/lodash/get.js":[1343],"../node_modules/lodash/hasIn.js":[1344],"../node_modules/lodash/_isKey.js":[1345,1699,1354],"../node_modules/lodash/_toKey.js":[1348,1671,1661,1355],"../node_modules/lodash/_baseGet.js":[1434,1447],"../node_modules/lodash/_castPath.js":[1670,1656],"../node_modules/lodash/_stringToPath.js":[1700],"../node_modules/lodash/toString.js":[1701,1238],"../node_modules/lodash/_memoizeCapped.js":[2052],"../node_modules/lodash/_baseToString.js":[1341],"../node_modules/lodash/_baseHasIn.js":[1432],"../node_modules/lodash/_hasPath.js":[1433],"../node_modules/lodash/_baseProperty.js":[1352],"../node_modules/lodash/_basePropertyDeep.js":[1353],"../node_modules/lodash/_castFunction.js":[1183,1136],"../node_modules/lodash/_createFlow.js":[1176,1179],"../node_modules/lodash/_baseDelay.js":[1180,1185],"../node_modules/lodash/bind.js":[1060],"../node_modules/lodash-decorators/utils/copyMetaData.js":[1061,1083,1029],"../node_modules/lodash/forOwn.js":[1072,1020],"../node_modules/lodash/_baseForOwn.js":[1135],"../node_modules/lodash/_baseFor.js":[1214],"../node_modules/lodash/_createBaseFor.js":[1320],"../node_modules/lodash-decorators/bind/bindAllClassMethods.js":[1064],"../node_modules/lodash-decorators/utils/assignAll.js":[1066,1088],"../node_modules/lodash-decorators/utils/wrapConstructor.js":[1067],"../node_modules/lodash-decorators/utils/log.js":[1068,1058,1031,1019],"../node_modules/lodash/isNull.js":[1080],"../node_modules/lodash/isBoolean.js":[1082],"../node_modules/lodash-decorators/bind/bindMap.js":[1084,1027],"../node_modules/lodash-decorators/utils/CompositeKeyWeakMap.js":[1073,1028],"../node_modules/lodash/isUndefined.js":[1071],"../node_modules/lodash/without.js":[1085],"../node_modules/lodash/attempt.js":[1087,1015],"../node_modules/lodash/_baseDifference.js":[1459],"../node_modules/lodash/isArrayLikeObject.js":[1461],"../node_modules/lodash/_arrayIncludesWith.js":[1685],"../node_modules/lodash/isError.js":[1132],"../node_modules/lodash/isPlainObject.js":[1210],"../node_modules/lodash/_getPrototype.js":[1313],"../node_modules/lodash/assign.js":[1055,1025],"../node_modules/lodash/_assignValue.js":[1139,1224],"../node_modules/lodash/_copyObject.js":[1140],"../node_modules/lodash/_createAssigner.js":[1141],"../node_modules/lodash/_baseAssignValue.js":[1220,1225],"../node_modules/lodash/_isIterateeCall.js":[1223],"../node_modules/lodash-decorators/utils/returnAtIndex.js":[1013],"../node_modules/lodash/values.js":[1024],"../node_modules/lodash/upperFirst.js":[1026],"../node_modules/lodash/_baseValues.js":[1137],"../node_modules/lodash/_createCaseFirst.js":[1146],"../node_modules/lodash/_hasUnicode.js":[1236,1336],"../node_modules/lodash/_stringToArray.js":[1237],"../node_modules/lodash/_asciiToArray.js":[1335],"../node_modules/lodash/_unicodeToArray.js":[1337],"../node_modules/lodash/mixin.js":[1018],"../node_modules/lodash/_baseFunctions.js":[1125],"$app/node_modules/@mcro/ui/lib/helpers/parentSize.js":[2594],"../node_modules/element-resize-detector/src/element-resize-detector.js":[2776],"../node_modules/element-resize-detector/src/collection-utils.js":[974,1070],"../node_modules/element-resize-detector/src/element-utils.js":[975],"../node_modules/element-resize-detector/src/listener-handler.js":[976],"../node_modules/element-resize-detector/src/id-generator.js":[977],"../node_modules/element-resize-detector/src/id-handler.js":[978],"../node_modules/element-resize-detector/src/reporter.js":[979],"../node_modules/element-resize-detector/src/browser-detector.js":[980,1069],"../node_modules/batch-processor/src/batch-processor.js":[981],"../node_modules/element-resize-detector/src/state-handler.js":[982],"../node_modules/element-resize-detector/src/detection-strategy/object.js":[983],"../node_modules/element-resize-detector/src/detection-strategy/scroll.js":[984],"../node_modules/batch-processor/src/utils.js":[1106],"$app/node_modules/@mcro/ui/lib/progress/bar.js":[2768],"$app/node_modules/@mcro/ui/lib/progress/circle.js":[2769],"../node_modules/time-ago/timeago.js":[2661],"$app/node_modules/@mcro/ui/node_modules/react-tilt/dist/tilt.js":[2717],"$app/src/router.js":[6],"$app/src/views/pages/404.js":[7],"$app/src/views/header.js":[8],"$app/node_modules/@mcro/router/lib/index.js":[437],"$app/src/views/pages/home.js":[438],"$app/node_modules/@mcro/router/lib/router.js":[2755],"../node_modules/history/createBrowserHistory.js":[2756],"../node_modules/url-pattern/lib/url-pattern.js":[2786],"../node_modules/history/LocationUtils.js":[1467],"../node_modules/history/PathUtils.js":[1468,1725],"../node_modules/history/createTransitionManager.js":[1469],"../node_modules/history/DOMUtils.js":[1470],"../node_modules/resolve-pathname/cjs/index.js":[1723],"../node_modules/value-equal/cjs/index.js":[1724]}})
__sbPundle.registerLoaded(null)
__sbPundle.require('$app/index.js')
})();
