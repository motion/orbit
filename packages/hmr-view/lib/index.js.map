{"version":3,"sources":["../src/index.js"],"names":["proxyReactComponents","viewProxies","reloaded","reloadedInstances","module","hot","accept","data","dispose","filename","components","imports","locals","React","Error","forceUpdater","hotReload","instance","push","wrapWithProxy","ReactClass","uid","isInFunction","displayName","path","instances","update","setTimeout","forEach","Black","view","emit","get","setInterval","length","console","log","join"],"mappings":";;;;;;;;kBAewBA,oB;;AAfxB;;;;AACA;;;;AACA;;;;;;AAEA,IAAIC,cAAc,EAAlB;AACA,IAAIC,WAAW,EAAf;AACA,IAAIC,oBAAoB,EAAxB;;AAEAC,OAAOC,GAAP,CAAWC,MAAX,CAAkB,YAAM;AACtBL,gBAAcG,OAAOC,GAAP,CAAWE,IAAX,CAAgBN,WAAhB,IAA+B,EAA7C;AACD,CAFD;AAGAG,OAAOC,GAAP,CAAWG,OAAX,CAAmB,gBAAQ;AACzBD,OAAKN,WAAL,GAAmBA,WAAnB;AACD,CAFD;;AAIe,SAASD,oBAAT,OAKZ;AAAA,MAJDS,QAIC,QAJDA,QAIC;AAAA,MAHDC,UAGC,QAHDA,UAGC;AAAA,MAFDC,OAEC,QAFDA,OAEC;AAAA,MADDC,MACC,QADDA,MACC;;AAAA,gCACeD,OADf;AAAA,MACME,KADN;;AAAA,+BAEgBD,MAFhB;AAAA,MAEMR,MAFN;;AAAA,gCAGiBQ,MAHjB;AAAA,MAGQP,GAHR,eAGQA,GAHR;;AAKD,MAAI,CAACA,GAAD,IAAQ,OAAOA,IAAIC,MAAX,KAAsB,UAAlC,EAA8C;AAC5C,UAAM,IAAIQ,KAAJ,CACJ,8HADI,CAAN;AAGD;;AAED,MAAMC,eAAe,oCAAeF,SAAS,iBAAOA,KAA/B,CAArB;;AAEA,MAAMG,YAAY,SAAZA,SAAY,WAAY;AAC5B,QAAIC,SAASD,SAAb,EAAwB;AACtBC,eAASD,SAAT,CAAmBZ,MAAnB;AACD;AACDW,iBAAaE,QAAb;AACAd,sBAAkBe,IAAlB,CAAuB,CAAvB;AACD,GAND;;AAQA,SAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,GAAnC,EAAwC;AAAA,0BACDX,WAAWW,GAAX,CADC;AAAA,QACrCC,YADqC,mBACrCA,YADqC;AAAA,gDACvBC,WADuB;AAAA,QACvBA,WADuB,yCACTF,GADS;;AAE7C,QAAMG,OAAOf,WAAW,GAAX,GAAiBY,GAA9B;;AAEA,QAAIC,YAAJ,EAAkB;AAChB,aAAOF,UAAP;AACD;;AAEDhB,WAAOC,GAAP,CAAWC,MAAX,CAAkB,YAAM,CAAE,CAA1B,EAR6C,CAQjB;;AAE5B;AACA,QAAIL,YAAYuB,IAAZ,CAAJ,EAAuB;AACrBtB,eAASgB,IAAT,CAAcK,WAAd;AACA,UAAME,YAAYxB,YAAYuB,IAAZ,EAAkBE,MAAlB,CAAyBN,UAAzB,CAAlB;AACAO,iBAAW,YAAM;AACfF,kBAAUG,OAAV,CAAkBZ,SAAlB;AACAa,cAAMC,IAAN,CAAWC,IAAX,CAAgB,KAAhB;AACD,OAHD;AAID,KAPD,MAOO;AACL9B,kBAAYuB,IAAZ,IAAoB,0BAAYJ,UAAZ,CAApB;AACD;;AAED,WAAOnB,YAAYuB,IAAZ,EAAkBQ,GAAlB,EAAP;AACD,GAvBD;AAwBD;;AAEDC,YAAY,YAAM;AAChB,MAAI/B,SAASgC,MAAb,EAAqB;AACnBC,YAAQC,GAAR,CACG,gBAAelC,SAASmC,IAAT,CACd,IADc,CAEd,KAAIlC,kBAAkB+B,MAAO,YAHjC;AAKAhC,eAAW,EAAX;AACAC,wBAAoB,EAApB;AACD;AACF,CAVD,EAUG,IAVH","file":"index.js","sourcesContent":["import window from 'global/window'\nimport createProxy from './proxyClass'\nimport getForceUpdate from 'react-deep-force-update'\n\nlet viewProxies = {}\nlet reloaded = []\nlet reloadedInstances = []\n\nmodule.hot.accept(() => {\n  viewProxies = module.hot.data.viewProxies || {}\n})\nmodule.hot.dispose(data => {\n  data.viewProxies = viewProxies\n})\n\nexport default function proxyReactComponents({\n  filename,\n  components,\n  imports,\n  locals,\n}) {\n  const [React] = imports\n  const [module] = locals\n  const [{ hot }] = locals\n\n  if (!hot || typeof hot.accept !== 'function') {\n    throw new Error(\n      'locals[0] does not appear to be a `module` object with Hot Module replacement API enabled. You should disable @mcro/view-hmr'\n    )\n  }\n\n  const forceUpdater = getForceUpdate(React || window.React)\n\n  const hotReload = instance => {\n    if (instance.hotReload) {\n      instance.hotReload(module)\n    }\n    forceUpdater(instance)\n    reloadedInstances.push(1)\n  }\n\n  return function wrapWithProxy(ReactClass, uid) {\n    const { isInFunction, displayName = uid } = components[uid]\n    const path = filename + '$' + uid\n\n    if (isInFunction) {\n      return ReactClass\n    }\n\n    module.hot.accept(() => {}) // to make it a fast hmr\n\n    // if existing proxy\n    if (viewProxies[path]) {\n      reloaded.push(displayName)\n      const instances = viewProxies[path].update(ReactClass)\n      setTimeout(() => {\n        instances.forEach(hotReload)\n        Black.view.emit('hmr')\n      })\n    } else {\n      viewProxies[path] = createProxy(ReactClass)\n    }\n\n    return viewProxies[path].get()\n  }\n}\n\nsetInterval(() => {\n  if (reloaded.length) {\n    console.log(\n      `[HMR] views: ${reloaded.join(\n        ', '\n      )}, ${reloadedInstances.length} instances`\n    )\n    reloaded = []\n    reloadedInstances = []\n  }\n}, 1000)\n"]}