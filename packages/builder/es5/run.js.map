{"version":3,"sources":["../src/run.js"],"names":["process","env","NODE_ENV","webpack","require","WebpackDevServer","historyApiFallback","httpProxyMiddleware","checkRequiredFiles","log","config","paths","HOST","PORT","appHtml","appIndexJs","exit","DEFAULT_PORT","parseInt","compiler","setupCompiler","host","port","plugin","stats","onProxyError","proxy","err","req","res","headers","console","writeHead","headersSent","end","code","addMiddleware","devServer","appPackageJson","use","disableDotRule","htmlAcceptHeaders","mayProxy","hpm","test","pathname","target","logLevel","onProxyReq","proxyReq","getHeader","setHeader","onError","secure","changeOrigin","ws","xfwd","listeningApp","on","upgrade","middleware","runDevServer","compress","clientLogLevel","contentBase","appPublic","hot","publicPath","output","quiet","watchOptions","ignored","disableHostCheck","listen","run","protocol","HTTPS"],"mappings":"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","file":"run.js","sourcesContent":["process.env.NODE_ENV = 'development'\n\nconst webpack = require('webpack')\nconst WebpackDevServer = require('webpack-dev-server')\nconst historyApiFallback = require('connect-history-api-fallback')\nconst httpProxyMiddleware = require('http-proxy-middleware')\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles')\nconst log = require('./config/build.log')\nconst config = require('./config/build.config')\nconst paths = require('./config/paths')\n\nconst HOST = '0.0.0.0'\nconst PORT = 3002\n\n// Warn and crash if required files are missing\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1)\n}\n\n// Tools like Cloud9 rely on this.\nconst DEFAULT_PORT = parseInt(process.env.PORT, 10) || PORT\nlet compiler\n\nfunction setupCompiler(host, port) {\n  // \"Compiler\" is a low-level interface to Webpack.\n  compiler = webpack(config)\n\n  // \"done\" event fires when Webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n  compiler.plugin('done', function(stats) {\n    log(null, stats)\n  })\n}\n\n// We need to provide a custom onError function for httpProxyMiddleware.\n// It allows us to log custom error messages on the console.\nfunction onProxyError(proxy) {\n  return function(err, req, res) {\n    var host = req.headers && req.headers.host\n    console.log('Proxy error:')\n\n    // And immediately send the proper error response to the client.\n    // Otherwise, the request will eventually timeout with ERR_EMPTY_RESPONSE on the client side.\n    if (res.writeHead && !res.headersSent) {\n      res.writeHead(500)\n    }\n    res.end(`Proxy error: Could not proxy request ${err.code}`)\n  }\n}\n\nfunction addMiddleware(devServer) {\n  var proxy = require(paths.appPackageJson).proxy\n  devServer.use(\n    historyApiFallback({\n      disableDotRule: true,\n      htmlAcceptHeaders: proxy ? ['text/html'] : ['text/html', '*/*'],\n    })\n  )\n\n  if (proxy) {\n    if (typeof proxy !== 'string') {\n      console.log('When specified, \"proxy\" in package.json must be a string.')\n      process.exit(1)\n    }\n\n    var mayProxy = /^(?!\\/(index\\.html$|.*\\.hot-update\\.json$|sockjs-node\\/)).*$/\n    var hpm = httpProxyMiddleware(pathname => mayProxy.test(pathname), {\n      target: proxy,\n      logLevel: 'silent',\n      onProxyReq: function(proxyReq) {\n        if (proxyReq.getHeader('origin')) {\n          proxyReq.setHeader('origin', proxy)\n        }\n      },\n      onError: onProxyError(proxy),\n      secure: false,\n      changeOrigin: true,\n      ws: true,\n      xfwd: true,\n    })\n\n    devServer.use(mayProxy, hpm)\n    devServer.listeningApp.on('upgrade', hpm.upgrade)\n  }\n\n  devServer.use(devServer.middleware)\n}\n\nfunction runDevServer(host, port) {\n  var devServer = new WebpackDevServer(compiler, {\n    compress: true,\n    clientLogLevel: 'none',\n    contentBase: paths.appPublic,\n    hot: true,\n    publicPath: config.output.publicPath,\n    quiet: false,\n    watchOptions: {\n      ignored: /node_modules/,\n    },\n    disableHostCheck: true,\n    host: host,\n  })\n\n  // Our custom middleware proxies requests to /index.html or a remote API.\n  addMiddleware(devServer)\n\n  // Launch WebpackDevServer.\n  devServer.listen(port, err => {\n    if (err) {\n      return console.log(err)\n    }\n    console.log('Starting the development server...', port)\n  })\n}\n\nfunction run(port) {\n  console.log('running on', port)\n  var protocol = process.env.HTTPS === 'true' ? 'https' : 'http'\n  var host = process.env.HOST || HOST\n  setupCompiler(host, port, protocol)\n  runDevServer(host, port, protocol)\n}\n\nrun(DEFAULT_PORT)\n"]}