#!/bin/bash

. $(dirname $0)/__/common

cd $ROOT

APP=$1
ARGS=${@:1}

trap killgroup SIGINT
killgroup() {
  kill 0
}

function build-dev() {
  npx lerna exec --parallel \
    --ignore @mcro/web \
    --ignore @mcro/site \
      -- \
      babel src --out-dir lib -s true $1
}

function build-es5() {
  npx lerna exec \
    --scope @mcro/builder \
    --scope @mcro/gloss \
    --scope @mcro/hmr \
    --scope @mcro/hmr-view \
      -- \
        BABEL_ENV=es5 babel src --out-dir es5 -s true $1
}

function build-prod() {
  npx lerna exec --parallel \
    --ignore @mcro/builder \
    --ignore @mcro/hmr \
    --ignore @mcro/hmr-view \
    --ignore @mcro/preset-motion \
    -- \
      BABEL_ENV=dist babel src --out-dir dist -s true $1
}

function build-other() {
  npx lerna exec --parallel --scope @mcro/electron \
    -- \
    BABEL_ENV=es5 babel src --out-dir es5 -s true $1
}

if [ "$APP" = "build-dev" ]; then
  build-dev
elif [ "$APP" = "build-es5" ]; then
  build-es5
elif [ "$APP" = "build-prod" ]; then
  build-prod
elif [ "$APP" = "build-other" ]; then
  build-other
elif [ "$APP" = "electron" ] || [ "$APP" = "app" ]; then
  cd $ROOT/apps/electron
  npm run dist
elif [ "$APP" = "site" ]; then
  cd $ROOT/apps/site
  npm run build
elif [ "$APP" = "api" ]; then
  build-other
elif [ "$APP" = "web" ]; then
  cd $ROOT/apps/web
  rm -rf build
  if [ "$ARGS" = "--watch" ]; then
    npm run build -- --watch
  else
    npm run build
    echo "finished build web"
  fi
else
  # only build modern during dev-watch
  if [ "$ARGS" = "--watch" ]; then
    build-es5 --watch &
    build-dev --watch &
    build-prod --watch &
    build-other --watch &
  else
    build-es5 &
    build-dev &
    build-prod &
    build-other &
  fi

  wait
  echo "done building"
fi
