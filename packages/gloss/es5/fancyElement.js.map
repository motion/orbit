{"version":3,"sources":["../src/fancyElement.js"],"names":["fancyElementFactory","React","$","ogCreateElement","createElement","bind","VALID_TAGS","reduce","acc","cur","arrayOfObjectsToObject","arr","res","i","length","TAG_NAME_MAP","title","body","meta","head","item","Gloss","styles","baseStyles","options","css","objToCamel","style","newStyle","Object","keys","name","indexOf","helpers","snakeToCamel","fancyElement","type_","props","type","children","Error","toString","propNames","isTag","finalProps","finalStyles","theme","glossUID","constructor","addStyle","obj","key","val","checkTheme","getRule","push","themeKey","replace","themeStyle","prop","undefined","glossProp","extraStyle","snakeCase","tagName","isParentStyle","inlineStyle","slice","className","map","x","selectorText","join"],"mappings":";;;;;;;;kBAiCwBA,mB;;AAhCxB;;IAAYC,K;;AACZ;;;;AACA;;;;;;;;;;;;AAEA,IAAMC,IAAI,GAAV;AACA,IAAMC,kBAA4BF,MAAMG,aAAN,CAAoBC,IAApB,CAAyBJ,KAAzB,CAAlC;AACA,IAAMK,aAAoC,mBAAKC,MAAL,CACxC,UAACC,GAAD,EAAMC,GAAN;AAAA,sBAAoBD,GAApB,sBAA0BC,GAA1B,EAAgC,IAAhC;AAAA,CADwC,EAExC,EAFwC,CAA1C;;AAKA,IAAMC,yBAAyB,SAAzBA,sBAAyB,CAACC,GAAD,EAAyB;AACtD,MAAIC,MAAM,EAAV;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,IAAIG,MAAxB,EAAgCD,GAAhC,EAAqC;AACnC,QAAI,CAACF,IAAIE,CAAJ,CAAL,EAAa;AACX;AACD;AACD,8BAAWD,GAAX,EAAgBD,IAAIE,CAAJ,CAAhB;AACD;AACD,SAAOD,GAAP;AACD,CATD;;AAWA;AACA,IAAMG,eAAe;AACnBC,SAAO,KADY;AAEnBC,QAAM,KAFa;AAGnBC,QAAM,KAHa;AAInBC,QAAM,KAJa;AAKnBC,QAAM;;AAGR;AARqB,CAArB,CASe,SAASpB,mBAAT,CAA6BqB,KAA7B,EAA2CC,MAA3C,EAA4D;AAAA,MACjEC,UADiE,GACpCF,KADoC,CACjEE,UADiE;AAAA,MACrDC,OADqD,GACpCH,KADoC,CACrDG,OADqD;AAAA,MAC5CC,GAD4C,GACpCJ,KADoC,CAC5CI,GAD4C;;AAGzE;;AACA,WAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAIC,WAAW,EAAf;AADyB;AAAA;AAAA;;AAAA;AAEzB,2BAAmBC,OAAOC,IAAP,CAAYH,KAAZ,CAAnB,8HAAuC;AAAA,YAA5BI,IAA4B;;AACrC,YAAIA,KAAKC,OAAL,CAAa,GAAb,CAAJ,EAAuB;AACrBJ,mBAASP,MAAMY,OAAN,CAAcC,YAAd,CAA2BH,IAA3B,CAAT,IAA6CJ,MAAMI,IAAN,CAA7C;AACD,SAFD,MAEO;AACLH,mBAASG,IAAT,IAAiBJ,MAAMI,IAAN,CAAjB;AACD;AACF;AARwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASzB,WAAOH,QAAP;AACD;;AAED,SAAO,SAASO,YAAT,CACLC,KADK,EAELC,KAFK,EAIL;AAAA;;AACA,QAAIC,OAAOF,KAAX;;AADA,sCADGG,QACH;AADGA,cACH;AAAA;;AAEA,QAAI,CAACD,IAAL,EAAW;AACT,YAAM,IAAIE,KAAJ,gCACwBF,IADxB,qBAC2CC,WAC3CA,SAASE,QAAT,EAD2C,GAE3CF,QAHA,EAAN;AAKD;;AAED,QAAMG,YAAYL,QAAQR,OAAOC,IAAP,CAAYO,KAAZ,CAAR,GAA6B,IAA/C;AACA,QAAMM,QAAQ,OAAOL,IAAP,KAAgB,QAA9B;AACA,QAAMP,OAAe,CAACY,KAAD,QAAYL,KAAKP,IAAjB,GAA0BO,IAA/C;AACA,QAAMM,aAAa,EAAnB;AACA,QAAMC,cAAc,EAApB;AAdA,QAeQC,KAfR,GAekB,IAflB,CAeQA,KAfR;AAAA,QAgBQC,QAhBR,GAgBqB,KAAKC,WAhB1B,CAgBQD,QAhBR;;;AAkBA,QAAME,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,UAAhB,EAAwC;AACvD,UAAI1B,QAAQuB,IAAIC,GAAJ,CAAZ;AACA,UAAI,CAACxB,KAAL,EAAY;AACVA,gBAAQuB,IAAII,OAAJ,GAAcJ,IAAII,OAAJ,CAAYH,GAAZ,CAAd,GAAiCD,IAAIC,GAAJ,CAAzC;AACD;AACD,UAAI,CAACxB,KAAL,EAAY;AACV,eAAO,IAAP;AACD;AACD;AACA,UAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,eAAOF,IAAIE,MAAMyB,GAAN,CAAJ,CAAP;AACD,OAFD,MAEO;AACLP,oBAAYU,IAAZ,CAAiB5B,KAAjB;AACD;AACD,UAAI0B,cAAcP,KAAlB,EAAyB;AACvB,YAAMU,WAAcL,IAAIM,OAAJ,QACbV,QADa,SAEb,MAAKS,QAFQ,CAAd,YAAN;AAIA,YAAME,aAAaZ,MAAMQ,OAAN,CAAcE,QAAd,CAAnB;AACA,YAAIE,UAAJ,EAAgB;AACdb,sBAAYU,IAAZ,CAAiBG,UAAjB;AACD;AACF;AACF,KAxBD;;AA0BA,QAAIpC,UAAUS,IAAd,EAAoB;AAClBkB,eAAS3B,MAAT,EAAoBS,IAApB,UAA6BgB,QAA7B,EAAyC,IAAzC,EAA+C,IAA/C;AACD;;AAED,QAAIpB,cAAJ;;AAEA,QAAIe,SAAJ,EAAe;AAAA;AAAA;AAAA;;AAAA;AACb,8BAAmBA,SAAnB,mIAA8B;AAAA,cAAnBiB,IAAmB;;AAC5B,cAAMP,MAAMf,SAASA,MAAMsB,IAAN,CAArB;AACA;AACA,cAAIP,QAAQ,KAAR,IAAiBA,QAAQ,IAAzB,IAAiCA,QAAQQ,SAA7C,EAAwD;AACtD;AACD;AACD;AACA,cAAID,SAAS,OAAb,EAAsB;AACpBhC,iCAAaA,KAAb,EAAuByB,GAAvB;AACA;AACD;AACD;AACA,cAAI5B,QAAQqC,SAAR,IAAqBF,SAASnC,QAAQqC,SAA1C,EAAqD;AACnD,gBAAIT,OAAOvB,OAAOC,IAAP,CAAYsB,GAAZ,EAAiBtC,MAA5B,EAAoC;AAClC;AACA,kBAAMgD,aAAarC,IAAI2B,GAAJ,EAAS,EAAEW,WAAW,KAAb,EAAT,CAAnB;AACApC,mCAAaA,KAAb,EAAuBmC,UAAvB;AACD;AACD;AACD;AACD;AACA,cACEtC,QAAQwC,OAAR,IACAL,SAASnC,QAAQwC,OADjB,IAEArB,KAFA,IAGA,OAAOS,GAAP,KAAe,QAJjB,EAKE;AACAd,mBAAOc,GAAP;AACA;AACD;AACD;AACA,cAAIO,KAAK,CAAL,MAAYzD,CAAhB,EAAmB;AACjB;AACA0C,uBAAWe,IAAX,IAAmBP,GAAnB;AACA;AACD;AACD;AACA,cAAI7B,UAAJ,EAAgB;AACd,gBAAM0C,gBAAgBN,KAAK,CAAL,MAAYzD,CAAlC;AACA,gBAAI+D,aAAJ,EAAmB;AACjB,kBAAMC,cAAcjB,SAAS3B,MAAT,EAAiBqC,KAAKQ,KAAL,CAAW,CAAX,CAAjB,EAAgCf,GAAhC,EAAqC,KAArC,CAApB;AACA,kBAAIc,WAAJ,EAAiB;AACfvC,qCAAaA,KAAb,EAAuBuC,WAAvB;AACD;AACD;AACD;AACF;AACD;AACA,cAAI5C,MAAJ,EAAY;AACV,gBAAM4C,eAAcjB,SAClB3B,MADkB,EAEfqC,KAAKQ,KAAL,CAAW,CAAX,CAFe,UAEGpB,QAFH,EAGlBK,GAHkB,EAIlB,IAJkB,CAApB;AAMA,gBAAIc,YAAJ,EAAiB;AACfvC,mCAAaA,KAAb,EAAuBD,WAAWwC,YAAX,CAAvB;AACD;AACF;AACF;AA5DY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6Dd;;AAED,QAAIvC,KAAJ,EAAW;AACTiB,iBAAWjB,KAAX,GAAmBA,KAAnB;AACD;;AAED;AACA,QAAIkB,YAAY/B,MAAhB,EAAwB;AACtB,UAAI6B,KAAJ,EAAW;AACT;AACAC,mBAAWwB,SAAX,GAAuBvB,YACpBwB,GADoB,CAChB;AAAA,iBAAKC,EAAEF,SAAF,IAAeE,EAAEC,YAAF,CAAeJ,KAAf,CAAqB,CAArB,CAApB;AAAA,SADgB,EAEpBK,IAFoB,CAEf,GAFe,CAAvB;;AAIA;AACA,YAAInC,SAASA,MAAM+B,SAAnB,EAA8B;AAC5B,cAAI,OAAO/B,MAAM+B,SAAb,KAA2B,QAA/B,EAAyC;AACvCxB,uBAAWwB,SAAX,UAA4B/B,MAAM+B,SAAlC;AACD;AACF;AACF,OAZD,MAYO;AACL;AACA,YAAI/B,KAAJ,EAAW;AACTO,qBAAWjB,KAAX,GAAmBD,WACjBhB,oDACKmC,YAAYwB,GAAZ,CAAgB;AAAA,mBAAS1C,SAASA,MAAMA,KAAxB;AAAA,WAAhB,CADL,IAEEiB,WAAWjB,KAFb,GADiB,CAAnB;AAMD;AACF;AACF;;AAED,QAAIgB,KAAJ,EAAW;AACT,UAAI,CAACC,WAAWwB,SAAhB,EAA2B;AACzBxB,mBAAWwB,SAAX,GAAuBhC,KAAvB;AACD,OAFD,MAEO;AACLQ,mBAAWwB,SAAX,UAA4BhC,KAA5B;AACD;;AAED,UAAI,CAAC9B,WAAWgC,IAAX,CAAL,EAAuB;AACrBA,eAAO,KAAP;AACD;AACDA,aAAOvB,aAAauB,IAAb,KAAsBA,IAA7B;AACD;;AAED,WAAOnC,kCAAgBmC,IAAhB,EAAsBM,UAAtB,SAAqCL,QAArC,EAAP;AACD,GAlKD;AAmKD","file":"fancyElement.js","sourcesContent":["// @flow\nimport * as React from 'react'\nimport deepExtend from 'deep-extend'\nimport tags from 'html-tags'\n\nconst $ = '$'\nconst ogCreateElement: Function = React.createElement.bind(React)\nconst VALID_TAGS: { [string]: boolean } = tags.reduce(\n  (acc, cur) => ({ ...acc, [cur]: true }),\n  {}\n)\n\nconst arrayOfObjectsToObject = (arr: Array<?Object>) => {\n  let res = {}\n  for (let i = 0; i < arr.length; i++) {\n    if (!arr[i]) {\n      continue\n    }\n    deepExtend(res, arr[i])\n  }\n  return res\n}\n\n// tags that are dangerous to use\nconst TAG_NAME_MAP = {\n  title: 'div',\n  body: 'div',\n  meta: 'div',\n  head: 'div',\n  item: 'div',\n}\n\n// factory that returns fancyElement helper\nexport default function fancyElementFactory(Gloss: Gloss, styles?: Object) {\n  const { baseStyles, options, css } = Gloss\n\n  // Fast object reduce\n  function objToCamel(style) {\n    let newStyle = {}\n    for (const name of Object.keys(style)) {\n      if (name.indexOf('-')) {\n        newStyle[Gloss.helpers.snakeToCamel(name)] = style[name]\n      } else {\n        newStyle[name] = style[name]\n      }\n    }\n    return newStyle\n  }\n\n  return function fancyElement(\n    type_: string | Function,\n    props?: Object,\n    ...children: Array<any>\n  ) {\n    let type = type_\n    if (!type) {\n      throw new Error(\n        `Didn't get a valid type: ${type}, children: ${children\n          ? children.toString()\n          : children}`\n      )\n    }\n\n    const propNames = props ? Object.keys(props) : null\n    const isTag = typeof type === 'string'\n    const name: string = !isTag ? `${type.name}` : type\n    const finalProps = {}\n    const finalStyles = []\n    const { theme } = this\n    const { glossUID } = this.constructor\n\n    const addStyle = (obj, key, val, checkTheme): ?Object => {\n      let style = obj[key]\n      if (!style) {\n        style = obj.getRule ? obj.getRule(key) : obj[key]\n      }\n      if (!style) {\n        return null\n      }\n      // dynamic\n      if (typeof style === 'function') {\n        return css(style(val))\n      } else {\n        finalStyles.push(style)\n      }\n      if (checkTheme && theme) {\n        const themeKey = `${key.replace(\n          `--${glossUID}`,\n          `--${this.themeKey}`\n        )}--theme`\n        const themeStyle = theme.getRule(themeKey)\n        if (themeStyle) {\n          finalStyles.push(themeStyle)\n        }\n      }\n    }\n\n    if (styles && name) {\n      addStyle(styles, `${name}--${glossUID}`, null, true)\n    }\n\n    let style\n\n    if (propNames) {\n      for (const prop of propNames) {\n        const val = props && props[prop]\n        // ignore most falsy values (except 0)\n        if (val === false || val === null || val === undefined) {\n          continue\n        }\n        // style={}\n        if (prop === 'style') {\n          style = { ...style, ...val }\n          continue\n        }\n        // css={}\n        if (options.glossProp && prop === options.glossProp) {\n          if (val && Object.keys(val).length) {\n            // css={}\n            const extraStyle = css(val, { snakeCase: false })\n            style = { ...style, ...extraStyle }\n          }\n          continue\n        }\n        // tagName={}\n        if (\n          options.tagName &&\n          prop === options.tagName &&\n          isTag &&\n          typeof val === 'string'\n        ) {\n          type = val\n          continue\n        }\n        // ensure before tagName={} so it passes tagName down\n        if (prop[0] !== $) {\n          // pass props down if not glossProp style prop\n          finalProps[prop] = val\n          continue\n        }\n        // $$style={}\n        if (baseStyles) {\n          const isParentStyle = prop[1] === $\n          if (isParentStyle) {\n            const inlineStyle = addStyle(styles, prop.slice(2), val, false)\n            if (inlineStyle) {\n              style = { ...style, ...inlineStyle }\n            }\n            continue\n          }\n        }\n        // $style={}\n        if (styles) {\n          const inlineStyle = addStyle(\n            styles,\n            `${prop.slice(1)}--${glossUID}`,\n            val,\n            true\n          )\n          if (inlineStyle) {\n            style = { ...style, ...objToCamel(inlineStyle) }\n          }\n        }\n      }\n    }\n\n    if (style) {\n      finalProps.style = style\n    }\n\n    // styles => props\n    if (finalStyles.length) {\n      if (isTag) {\n        // tags get className\n        finalProps.className = finalStyles\n          .map(x => x.className || x.selectorText.slice(1))\n          .join(' ')\n\n        // keep original finalStyles\n        if (props && props.className) {\n          if (typeof props.className === 'string') {\n            finalProps.className += ` ${props.className}`\n          }\n        }\n      } else {\n        // children get a style prop\n        if (props) {\n          finalProps.style = objToCamel(\n            arrayOfObjectsToObject([\n              ...finalStyles.map(style => style && style.style),\n              finalProps.style,\n            ])\n          )\n        }\n      }\n    }\n\n    if (isTag) {\n      if (!finalProps.className) {\n        finalProps.className = type_\n      } else {\n        finalProps.className += ` ${type_}`\n      }\n\n      if (!VALID_TAGS[type]) {\n        type = 'div'\n      }\n      type = TAG_NAME_MAP[type] || type\n    }\n\n    return ogCreateElement(type, finalProps, ...children)\n  }\n}\n"]}