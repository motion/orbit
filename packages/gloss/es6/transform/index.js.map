{"version":3,"sources":["../../src/transform/index.js"],"names":["types","t","classBodyVisitor","ClassMethod","path","node","body","unshift","variableDeclaration","variableDeclarator","identifier","programVisitor","Class","state","decorators","length","decoratorName","opts","foundDecorator","some","item","expression","type","name","callee","isMemberExpression","object","traverse","visitor","Program"],"mappings":";;;;;;kBAAe,UAAS,EAAEA,OAAOC,CAAT,EAAT,EAAuB;AACpC;;AAEA,QAAMC,mBAAmB;AACvBC,gBAAYC,IAAZ,EAAkB;AAChB;AACA,UAAIA,KAAKC,IAAL,CAAUC,IAAV,CAAeA,IAAnB,EAAyB;AACvBF,aAAKC,IAAL,CAAUC,IAAV,CAAeA,IAAf,CAAoBC,OAApB,CACEN,EAAEO,mBAAF,CAAsB,OAAtB,EAA+B,CAC7BP,EAAEQ,kBAAF,CACER,EAAES,UAAF,CAAa,OAAb,CADF,EAEET,EAAES,UAAF,CACE,mEADF,CAFF,CAD6B,CAA/B,CADF;AAUD;AACF;AAfsB,GAAzB;;AAkBA,QAAMC,iBAAiB;AACrBC,UAAMR,IAAN,EAAYS,KAAZ,EAAmB;AACjB,YAAMR,OAAOD,KAAKC,IAAlB;;AAEA,UAAI,CAACA,KAAKS,UAAN,IAAoB,CAACT,KAAKS,UAAL,CAAgBC,MAAzC,EAAiD;AAC/C;AACD;;AAED;AACA;AACA;;AAEA,YAAMC,gBAAiBH,MAAMI,IAAN,IAAcJ,MAAMI,IAAN,CAAWD,aAA1B,IAA4C,OAAlE;;AAEA,YAAME,iBAAiBb,KAAKS,UAAL,CAAgBK,IAAhB,CAAqBC,QAAQ;AAClD,YAAI,CAACA,KAAKC,UAAV,EAAsB;AACpB,iBAAO,KAAP;AACD;AACD;AACA,YACED,KAAKC,UAAL,CAAgBC,IAAhB,KAAyB,YAAzB,IACAF,KAAKC,UAAL,CAAgBE,IAAhB,KAAyBP,aAF3B,EAGE;AACA,iBAAO,IAAP;AACD;AACD;AACA,YACEI,KAAKC,UAAL,CAAgBG,MAAhB,IACAJ,KAAKC,UAAL,CAAgBG,MAAhB,CAAuBD,IAAvB,KAAgCP,aAFlC,EAGE;AACA,iBAAO,IAAP;AACD;AACD;AACA,YACEI,KAAKC,UAAL,CAAgBG,MAAhB,IACAvB,EAAEwB,kBAAF,CAAqBL,KAAKC,UAAL,CAAgBG,MAArC,CADA,IAEAJ,KAAKC,UAAL,CAAgBG,MAAhB,CAAuBE,MAAvB,CAA8BH,IAA9B,KAAuCP,aAHzC,EAIE;AACA,iBAAO,IAAP;AACD;AACD;AACA,YACEI,KAAKC,UAAL,CAAgBK,MAAhB,IACAN,KAAKC,UAAL,CAAgBK,MAAhB,CAAuBH,IAAvB,KAAgCP,aAFlC,EAGE;AACA,iBAAO,IAAP;AACD;;AAED,eAAO,KAAP;AACD,OAnCsB,CAAvB;;AAqCA;AACA,UAAIE,cAAJ,EAAoB;AAClBd,aAAKuB,QAAL,CAAczB,gBAAd,EAAgCW,KAAhC;AACD;AACF;AAvDoB,GAAvB;;AA0DA,SAAO;AACLe,aAAS;AACPC,cAAQzB,IAAR,EAAcS,KAAd,EAAqB;AACnBT,aAAKuB,QAAL,CAAchB,cAAd,EAA8BE,KAA9B;AACD;AAHM;AADJ,GAAP;AAOD,C","file":"index.js","sourcesContent":["export default function({ types: t }) {\n  // convert React.createElement() => this.glossElement()\n\n  const classBodyVisitor = {\n    ClassMethod(path) {\n      // add a fancyelement hook to start of render\n      if (path.node.body.body) {\n        path.node.body.body.unshift(\n          t.variableDeclaration('const', [\n            t.variableDeclarator(\n              t.identifier('__dom'),\n              t.identifier(\n                'this.glossElement && this.glossElement.bind(this) || window.__dom',\n              ),\n            ),\n          ]),\n        )\n      }\n    },\n  }\n\n  const programVisitor = {\n    Class(path, state) {\n      const node = path.node\n\n      if (!node.decorators || !node.decorators.length) {\n        return\n      }\n\n      // -- Validate if class is what we're looking for\n      //    has some flexibility, looks for any of:\n      //       @x  @x()  @x.y  @x.y()\n\n      const decoratorName = (state.opts && state.opts.decoratorName) || 'style'\n\n      const foundDecorator = node.decorators.some(item => {\n        if (!item.expression) {\n          return false\n        }\n        // @style\n        if (\n          item.expression.type === 'Identifier' &&\n          item.expression.name === decoratorName\n        ) {\n          return true\n        }\n        // @style()\n        if (\n          item.expression.callee &&\n          item.expression.callee.name === decoratorName\n        ) {\n          return true\n        }\n        // @style.something()\n        if (\n          item.expression.callee &&\n          t.isMemberExpression(item.expression.callee) &&\n          item.expression.callee.object.name === decoratorName\n        ) {\n          return true\n        }\n        // @style.something\n        if (\n          item.expression.object &&\n          item.expression.object.name === decoratorName\n        ) {\n          return true\n        }\n\n        return false\n      })\n\n      // -- Add a unique var to scope and all of JSX elements\n      if (foundDecorator) {\n        path.traverse(classBodyVisitor, state)\n      }\n    },\n  }\n\n  return {\n    visitor: {\n      Program(path, state) {\n        path.traverse(programVisitor, state)\n      },\n    },\n  }\n}\n"]}