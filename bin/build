#!/bin/bash

. $(dirname $0)/__/common

cd $ROOT

APP=$1
ARG1=$2

echo $ARG1

trap killgroup SIGINT
killgroup() {
  kill 0
}

function build-dev() {
  npx lerna exec --parallel --concurrency 1 \
    --ignore @mcro/web \
    --ignore @mcro/site \
    --ignore @mcro/api \
    --ignore @mcro/builder \
    --ignore @mcro/hmr \
    --ignore @mcro/hmr-view \
    --ignore @mcro/preset-motion \
      -- \
      babel src --out-dir lib -s true $1
}

function build-es6() {
  npx lerna exec --parallel \
    --ignore @mcro/web \
    --ignore @mcro/site \
      -- \
        BABEL_ENV=es6 babel src --out-dir es6 -s true $1
}

function build-prod() {
  npx lerna exec --parallel --concurrency 1 \
    --ignore @mcro/api \
    --ignore @mcro/builder \
    --ignore @mcro/hmr \
    --ignore @mcro/hmr-view \
    --ignore @mcro/preset-motion \
    -- \
      BABEL_ENV=production babel src --out-dir dist -s true $1
}

if [ "$APP" = "build-dev" ]; then
  build-dev
elif [ "$APP" = "build-es6" ]; then
  build-es6
elif [ "$APP" = "build-prod" ]; then
  build-prod
elif [ "$APP" = "electron" ] || [ "$APP" = "app" ]; then
  cd $ROOT/apps/electron
  npm run dist
elif [ "$APP" = "site" ]; then
  cd $ROOT/apps/site
  npm run build
elif [ "$APP" = "web" ]; then
  cd $ROOT/apps/web
  rm -rf build
  if [ "$ARG1" = "--watch" ]; then
    npm run build -- --watch
  else
    npm run build
    echo "finished build web"
  fi
else
  if [ "$APP" = "--watch" ]; then
    # only build modern during dev-watch
    build-es6 --watch &
    build-dev --watch &
    build-prod --watch &
  else
    build-es6 &
    build-dev &
    build-prod &
  fi

  wait
  echo "done building"
fi
