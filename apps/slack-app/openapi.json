{
  "swagger": "2.0",
  "info": {
    "version": "1.0.6",
    "title": "Slack Web API",
    "description": "One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.",
    "contact": {}
  },
  "host": "slack.com",
  "basePath": "/api",
  "securityDefinitions": {
    "auth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://slack.com/oauth/authorize",
      "tokenUrl": "https://slack.com/api/oauth.access",
      "scopes": {
        "admin": "admin",
        "bot": "Bot user scope",
        "channels:history": "channels:history",
        "channels:read": "channels:read",
        "channels:write": "channels:write",
        "chat:write": "chat:write",
        "chat:write:bot": "Author messages as a bot",
        "chat:write:user": "chat:write:user",
        "conversations:history": "conversations:history",
        "conversations:read": "conversations:read",
        "conversations:write": "conversations:write",
        "dnd:read": "dnd:read",
        "dnd:write": "dnd:write",
        "emoji:read": "emoji:read",
        "files:read": "files:read",
        "files:write:user": "files:write:user",
        "groups:history": "groups:history",
        "groups:read": "groups:read",
        "groups:write": "groups:write",
        "identity.basic": "identity.basic",
        "im:history": "im:history",
        "im:read": "im:read",
        "im:write": "im:write",
        "links:write": "links:write",
        "mpim:history": "mpim:history",
        "mpim:read": "mpim:read",
        "mpim:write": "mpim:write",
        "none": "No scope required",
        "pins:read": "pins:read",
        "pins:write": "pins:write",
        "reactions:read": "reactions:read",
        "reactions:write": "reactions:write",
        "reminders:read": "reminders:read",
        "reminders:write": "reminders:write",
        "rtm:stream": "rtm:stream",
        "search:read": "search:read",
        "stars:read": "stars:read",
        "stars:write": "stars:write",
        "team:read": "team:read",
        "tokens.basic": "tokens.basic",
        "usergroups:read": "usergroups:read",
        "usergroups:write": "usergroups:write",
        "users.profile:read": "users.profile:read",
        "users.profile:write": "users.profile:write",
        "users:read": "users:read",
        "users:read.email": "users:read.email",
        "users:write": "users:write"
      }
    }
  },
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/api.test": {
      "get": {
        "description": "Checks API calling code.",
        "summary": "api_test",
        "tags": ["api"],
        "operationId": "ApiTestGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "foo",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "example property to return"
          },
          {
            "name": "error",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Error response to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response",
            "schema": {
              "$ref": "#/definitions/api.testsuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Artificial error response",
            "schema": {
              "$ref": "#/definitions/api.testerrorschema"
            },
            "examples": {
              "application/json": {
                "args": {
                  "error": "my_error"
                },
                "error": "my_error",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/api.test",
          "description": "API method documentation"
        }
      }
    },
    "/apps.permissions.info": {
      "get": {
        "description": "Returns list of permissions this app has on a team.",
        "summary": "apps_permissions_info",
        "tags": ["apps.permissions"],
        "operationId": "AppsPermissionsInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `none`"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "info": {
                  "app_home": {
                    "resources": {
                      "ids": ["D0C0NU1Q8", "D0BH95DLH"]
                    },
                    "scopes": ["chat:write", "im:history", "im:read"]
                  },
                  "channel": {
                    "resources": {
                      "excluded_ids": [],
                      "ids": ["C061FA5PB"],
                      "wildcard": false
                    },
                    "scopes": ["channels:read"]
                  },
                  "group": {
                    "resources": {
                      "ids": []
                    },
                    "scopes": []
                  },
                  "im": {
                    "resources": {
                      "ids": []
                    },
                    "scopes": []
                  },
                  "mpim": {
                    "resources": {
                      "ids": []
                    },
                    "scopes": []
                  },
                  "team": {
                    "resources": {
                      "ids": []
                    },
                    "scopes": []
                  }
                },
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/apps.permissions.info",
          "description": "API method documentation"
        }
      }
    },
    "/apps.permissions.request": {
      "get": {
        "description": "Allows an app to request additional scopes",
        "summary": "apps_permissions_request",
        "tags": ["apps.permissions"],
        "operationId": "AppsPermissionsRequestGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "scopes",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of scopes to request for"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `none`"
          },
          {
            "name": "trigger_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Token used to trigger the permissions API"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "$ref": "#/definitions/apps.permissions.requestschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Standard failure response when trigger_id is invalid",
            "schema": {
              "$ref": "#/definitions/apps.permissions.requesterrorschema"
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/apps.permissions.request",
          "description": "API method documentation"
        }
      }
    },
    "/apps.permissions.resources.list": {
      "get": {
        "description": "Returns list of resource grants this app has on a team.",
        "summary": "apps_permissions_resources_list",
        "tags": ["apps.permissions.resources"],
        "operationId": "AppsPermissionsResourcesListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `none`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of items to return."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical successful paginated response",
            "schema": {
              "$ref": "#/definitions/apps.permissions.resources.listsuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "resources": [
                  {
                    "id": "T0DES3UAN",
                    "type": "team"
                  },
                  {
                    "id": "D024BFF1M",
                    "type": "app_home"
                  },
                  {
                    "id": "C024BE91L",
                    "type": "channel"
                  }
                ],
                "response_metadata": {
                  "next_cursor": "dGVhbTpDMUg5UkVTR0w="
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/apps.permissions.resources.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_cursor",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/apps.permissions.resources.list",
          "description": "API method documentation"
        }
      }
    },
    "/apps.permissions.scopes.list": {
      "get": {
        "description": "Returns list of scopes this app has on a team.",
        "summary": "apps_permissions_scopes_list",
        "tags": ["apps.permissions.scopes"],
        "operationId": "AppsPermissionsScopesListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `none`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical successful paginated response",
            "schema": {
              "$ref": "#/definitions/api.permissions.scopes.listsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/apps.permissions.scopes.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/apps.permissions.scopes.list",
          "description": "API method documentation"
        }
      }
    },
    "/auth.revoke": {
      "get": {
        "description": "Revokes a token.",
        "summary": "auth_revoke",
        "tags": ["auth"],
        "operationId": "AuthRevokeGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "test",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `none`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/auth.revokeschema"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "revoked": true
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/auth.revokeerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/auth.revoke",
          "description": "API method documentation"
        }
      }
    },
    "/auth.test": {
      "get": {
        "description": "Checks authentication & identity.",
        "summary": "auth_test",
        "tags": ["auth"],
        "operationId": "AuthTestGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `none`"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "$ref": "#/definitions/auth.testsuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "team": "Subarachnoid Workspace",
                "team_id": "T12345678",
                "url": "https://subarachnoid.slack.com/",
                "user": "grace",
                "user_id": "W12345678"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "schema": {
              "$ref": "#/definitions/auth.testerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/auth.test",
          "description": "API method documentation"
        }
      }
    },
    "/bots.info": {
      "get": {
        "description": "Gets information about a bot user.",
        "summary": "bots_info",
        "tags": ["bots"],
        "operationId": "BotsInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users:read`"
          },
          {
            "name": "bot",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Bot user to get info on"
          }
        ],
        "responses": {
          "200": {
            "description": "When successful, returns bot info by bot ID.",
            "schema": {
              "$ref": "#/definitions/bots.infoschema"
            },
            "examples": {
              "application/json": {
                "bot": {
                  "WINDOW_ID": "A061BLERW",
                  "deleted": false,
                  "icons": {
                    "image_36": "https://...",
                    "image_48": "https://...",
                    "image_72": "https://..."
                  },
                  "id": "B061F7JQ1",
                  "name": "commandeer",
                  "updated": 1449272004
                },
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "When no bot can be found, it returns an error.",
            "schema": {
              "$ref": "#/definitions/bots.infoerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "bot_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/bots.info",
          "description": "API method documentation"
        }
      }
    },
    "/channels.archive": {
      "post": {
        "description": "Archives a channel.",
        "summary": "channels_archive",
        "tags": ["channels"],
        "operationId": "ChannelsArchivePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to archive"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/channels.archivesuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/channels.archiveerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.archive",
          "description": "API method documentation"
        }
      }
    },
    "/channels.create": {
      "post": {
        "description": "Creates a channel.",
        "summary": "channels_create",
        "tags": ["channels"],
        "operationId": "ChannelsCreatePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "validate",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Name of channel to create"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response resulting in a new channel",
            "schema": {
              "$ref": "#/definitions/channels.createerrorschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Example error response when an invalid name is provided",
            "schema": {
              "$ref": "#/definitions/channels.createerrorschema1"
            },
            "examples": {
              "application/json": {
                "detail": "Value passed for `name` contained unallowed special characters.",
                "error": "invalid_name_specials",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.create",
          "description": "API method documentation"
        }
      }
    },
    "/channels.history": {
      "get": {
        "description": "Fetches history of messages and events from a channel.",
        "summary": "channels_history",
        "tags": ["channels"],
        "operationId": "ChannelsHistoryGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of messages to return, between 1 and 1000."
          },
          {
            "name": "unreads",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include `unread_count_display` in the output?"
          },
          {
            "name": "inclusive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include messages with latest or oldest timestamp in results."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:history`"
          },
          {
            "name": "oldest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Start of time range of messages to include in results."
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Channel to fetch history for."
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "End of time range of messages to include in results."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response containing the channel's history",
            "schema": {
              "$ref": "#/definitions/channels.historysuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response when the specified channel cannot be found",
            "schema": {
              "$ref": "#/definitions/channels.historyerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.history",
          "description": "API method documentation"
        }
      }
    },
    "/channels.info": {
      "get": {
        "description": "Gets information about a channel.",
        "summary": "channels_info",
        "tags": ["channels"],
        "operationId": "ChannelsInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:read`"
          },
          {
            "name": "include_locale",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set this to `true` to receive the locale for this channel. Defaults to `false`"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Channel to get info on"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/channels.infosuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response when the specified channel cannot be found",
            "schema": {
              "$ref": "#/definitions/channels.infoerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.info",
          "description": "API method documentation"
        }
      }
    },
    "/channels.invite": {
      "post": {
        "description": "Invites a user to a channel.",
        "summary": "channels_invite",
        "tags": ["channels"],
        "operationId": "ChannelsInvitePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "user",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User to invite to channel."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to invite user to."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/channels.inviteerrorschema"
            },
            "headers": {}
          },
          "default": {
            "description": "A somewhat typical error response",
            "schema": {
              "$ref": "#/definitions/channels.inviteerrorschema1"
            },
            "examples": {
              "application/json": {
                "error": "cant_invite",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.invite",
          "description": "API method documentation"
        }
      }
    },
    "/channels.join": {
      "post": {
        "description": "Joins a channel, creating it if needed.",
        "summary": "channels_join",
        "tags": ["channels"],
        "operationId": "ChannelsJoinPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "validate",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Name of channel to join"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/channels.joinschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/channels.joinerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.join",
          "description": "API method documentation"
        }
      }
    },
    "/channels.kick": {
      "post": {
        "description": "Removes a user from a channel.",
        "summary": "channels_kick",
        "tags": ["channels"],
        "operationId": "ChannelsKickPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "user",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User to remove from channel."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to remove user from."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/channels.kickschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/channels.kickerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "not_in_channel",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.kick",
          "description": "API method documentation"
        }
      }
    },
    "/channels.leave": {
      "post": {
        "description": "Leaves a channel.",
        "summary": "channels_leave",
        "tags": ["channels"],
        "operationId": "ChannelsLeavePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to leave"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.leave",
          "description": "API method documentation"
        }
      }
    },
    "/channels.list": {
      "get": {
        "description": "Lists all channels in a Slack team.",
        "summary": "channels_list",
        "tags": ["channels"],
        "operationId": "ChannelsListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "exclude_members",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Exclude the `members` collection from each `channel`"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:read`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
          },
          {
            "name": "exclude_archived",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Exclude archived channels from the list"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical cursored success response",
            "schema": {
              "$ref": "#/definitions/channels.listsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/channels.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.list",
          "description": "API method documentation"
        }
      }
    },
    "/channels.mark": {
      "post": {
        "description": "Sets the read cursor in a channel.",
        "summary": "channels_mark",
        "tags": ["channels"],
        "operationId": "ChannelsMarkPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "ts",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the most recently seen message."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to set reading cursor in."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/channels.marksuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/channels.markerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.mark",
          "description": "API method documentation"
        }
      }
    },
    "/channels.rename": {
      "post": {
        "description": "Renames a channel.",
        "summary": "channels_rename",
        "tags": ["channels"],
        "operationId": "ChannelsRenamePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "validate",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "New name for channel."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to rename"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/channels.renameschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/channels.renameerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.rename",
          "description": "API method documentation"
        }
      }
    },
    "/channels.replies": {
      "get": {
        "description": "Retrieve a thread of messages posted to a channel",
        "summary": "channels_replies",
        "tags": ["channels"],
        "operationId": "ChannelsRepliesGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "thread_ts",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Unique identifier of a thread's parent message"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:history`"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Channel to fetch thread from"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "has_more": false,
                "messages": [
                  {
                    "last_read": "1509484885.000082",
                    "replies": [
                      {
                        "ts": "1509484424.000601",
                        "user": "U2U85N1RZ"
                      },
                      {
                        "ts": "1509484885.000082",
                        "user": "U2U85N1RZ"
                      }
                    ],
                    "reply_count": 2,
                    "subscribed": true,
                    "text": "This is a channel message",
                    "thread_ts": "1485913694.000025",
                    "ts": "1485913694.000025",
                    "type": "message",
                    "unread_count": 0,
                    "user": "U2X9P5FEL"
                  },
                  {
                    "parent_user_id": "U2X9P5FEL",
                    "text": "This is a thread reply",
                    "thread_ts": "1485913694.000025",
                    "ts": "1509484424.000601",
                    "type": "message",
                    "user": "U2U85N1RZ"
                  },
                  {
                    "parent_user_id": "U2X9P5FEL",
                    "text": "This is another thread reply",
                    "thread_ts": "1485913694.000025",
                    "ts": "1509484885.000082",
                    "type": "message",
                    "user": "U2U85N1RZ"
                  }
                ],
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "thread_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.replies",
          "description": "API method documentation"
        }
      }
    },
    "/channels.setPurpose": {
      "post": {
        "description": "Sets the purpose for a channel.",
        "summary": "channels_setPurpose",
        "tags": ["channels"],
        "operationId": "ChannelsSetPurposePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "purpose",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new purpose"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to set the purpose of"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/channels.setPurposeschema"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "purpose": "My special purpose"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/channels.setPurposeerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.setPurpose",
          "description": "API method documentation"
        }
      }
    },
    "/channels.setTopic": {
      "post": {
        "description": "Sets the topic for a channel.",
        "summary": "channels_setTopic",
        "tags": ["channels"],
        "operationId": "ChannelsSetTopicPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "topic",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new topic"
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to set the topic of"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "topic": "To picture topicality"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.setTopic",
          "description": "API method documentation"
        }
      }
    },
    "/channels.unarchive": {
      "post": {
        "description": "Unarchives a channel.",
        "summary": "channels_unarchive",
        "tags": ["channels"],
        "operationId": "ChannelsUnarchivePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to unarchive"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/channels.unarchive",
          "description": "API method documentation"
        }
      }
    },
    "/chat.delete": {
      "post": {
        "description": "Deletes a message.",
        "summary": "chat_delete",
        "tags": ["chat"],
        "operationId": "ChatDeletePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "as_user",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `chat:write`"
          },
          {
            "name": "ts",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the message to be deleted."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel containing the message to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/chat.deletesuccessschema"
            },
            "examples": {
              "application/json": {
                "channel": "C024BE91L",
                "ok": "true",
                "ts": "1401383885.000061"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/chat.deleteerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "message_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["chat:write:user", "chat:write:bot"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/chat.delete",
          "description": "API method documentation"
        }
      }
    },
    "/chat.getPermalink": {
      "get": {
        "description": "Retrieve a permalink URL for a specific extant message",
        "summary": "chat_getPermalink",
        "tags": ["chat"],
        "operationId": "ChatGetPermalinkGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `none`"
          },
          {
            "name": "message_ts",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "A message's `ts` value, uniquely identifying it within a channel"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of the conversation or channel containing the message"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response",
            "schema": {
              "$ref": "#/definitions/chat.getPermalinksuccessschema"
            },
            "examples": {
              "application/json": {
                "channel": "C1H9RESGA",
                "ok": "true",
                "permalink": "https://ghostbusters.slack.com/archives/C1H9RESGA/p135854651500008"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Error response when channel cannot be found",
            "schema": {
              "$ref": "#/definitions/chat.getPermalinkerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/chat.getPermalink",
          "description": "API method documentation"
        }
      }
    },
    "/chat.meMessage": {
      "post": {
        "description": "Share a me message into a channel.",
        "summary": "chat_meMessage",
        "tags": ["chat"],
        "operationId": "ChatMeMessagePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "text",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Text of the message to send."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `chat:write:user`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "channel": "C024BE7LR",
                "ok": "true",
                "ts": "1417671948.000006"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["chat:write:user"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/chat.meMessage",
          "description": "API method documentation"
        }
      }
    },
    "/chat.postEphemeral": {
      "post": {
        "description": "Sends an ephemeral message to a user in a channel.",
        "summary": "chat_postEphemeral",
        "tags": ["chat"],
        "operationId": "ChatPostEphemeralPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "attachments",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
          },
          {
            "name": "text",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Text of the message to send. See below for an explanation of [formatting](#formatting). This field is usually required, unless you're providing only `attachments` instead."
          },
          {
            "name": "link_names",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Find and link channel names and usernames."
          },
          {
            "name": "parse",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `chat:write`"
          },
          {
            "name": "user",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument."
          },
          {
            "name": "as_user",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Pass true to post the message as the authed bot. Defaults to false."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/chat.postEphemeralsuccessschema"
            },
            "examples": {
              "application/json": {
                "message_ts": "1502210682.580145",
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/chat.postEphemeralerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "user_not_in_channel",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["chat:write:user", "chat:write:bot"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/chat.postEphemeral",
          "description": "API method documentation"
        }
      }
    },
    "/chat.postMessage": {
      "post": {
        "description": "Sends a message to a channel.",
        "summary": "chat_postMessage",
        "tags": ["chat"],
        "operationId": "ChatPostMessagePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "username",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
          },
          {
            "name": "thread_ts",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
          },
          {
            "name": "attachments",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
          },
          {
            "name": "unfurl_links",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Pass true to enable unfurling of primarily text-based content."
          },
          {
            "name": "text",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Text of the message to send. See below for an explanation of [formatting](#formatting). This field is usually required, unless you're providing only `attachments` instead. Provide no more than 40,000 characters or [risk truncation](/changelog/2018-04-truncating-really-long-messages)."
          },
          {
            "name": "unfurl_media",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Pass false to disable unfurling of media content."
          },
          {
            "name": "parse",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
          },
          {
            "name": "as_user",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `chat:write`"
          },
          {
            "name": "mrkdwn",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Disable Slack markup parsing by setting to `false`. Enabled by default."
          },
          {
            "name": "icon_emoji",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
          },
          {
            "name": "link_names",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Find and link channel names and usernames."
          },
          {
            "name": "icon_url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
          },
          {
            "name": "reply_broadcast",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/chat.postMessagesuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response if too many attachments are included",
            "schema": {
              "$ref": "#/definitions/chat.postMessageerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "too_many_attachments",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["chat:write:user", "chat:write:bot"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/chat.postMessage",
          "description": "API method documentation"
        }
      }
    },
    "/chat.unfurl": {
      "post": {
        "description": "Provide custom unfurl behavior for user-posted URLs",
        "summary": "chat_unfurl",
        "tags": ["chat"],
        "operationId": "ChatUnfurlPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "user_auth_message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior"
          },
          {
            "name": "user_auth_required",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain"
          },
          {
            "name": "unfurls",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl message attachments."
          },
          {
            "name": "ts",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Timestamp of the message to add unfurl behavior to."
          },
          {
            "name": "user_auth_url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `links:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel ID of the message"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical, minimal success response",
            "schema": {
              "$ref": "#/definitions/chat.unfurlsuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/chat.unfurlerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "cannot_unfurl_url",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["links:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/chat.unfurl",
          "description": "API method documentation"
        }
      }
    },
    "/chat.update": {
      "post": {
        "description": "Updates a message.",
        "summary": "chat_update",
        "tags": ["chat"],
        "operationId": "ChatUpdatePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "attachments",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`."
          },
          {
            "name": "text",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "New text for the message, using the [default formatting rules](/docs/formatting). It's not required when presenting `attachments`."
          },
          {
            "name": "ts",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the message to be updated."
          },
          {
            "name": "parse",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. See [below](#formatting)."
          },
          {
            "name": "as_user",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `chat:write`"
          },
          {
            "name": "link_names",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Find and link channel names and usernames. Defaults to `none`. See [below](#formatting)."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel containing the message to be updated."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/chat.updatesuccessschema"
            },
            "examples": {
              "application/json": {
                "channel": "C024BE91L",
                "ok": "true",
                "text": "Updated text you carefully authored",
                "ts": "1401383885.000061"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/chat.updateerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "cant_update_message",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["chat:write:user", "chat:write:bot"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/chat.update",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.archive": {
      "post": {
        "description": "Archives a conversation.",
        "summary": "conversations_archive",
        "tags": ["conversations"],
        "operationId": "ConversationsArchivePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "ID of conversation to archive"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.archivesuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/conversations.archiveerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.archive",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.close": {
      "post": {
        "description": "Closes a direct message or multi-person direct message.",
        "summary": "conversations_close",
        "tags": ["conversations"],
        "operationId": "ConversationsClosePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Conversation to close."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.closesuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/conversations.closeerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.close",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.create": {
      "post": {
        "description": "Initiates a public or private channel-based conversation",
        "summary": "conversations_create",
        "tags": ["conversations"],
        "operationId": "ConversationsCreatePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Name of the public or private channel to create"
          },
          {
            "name": "is_private",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Create a private channel instead of a public one"
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, the command returns a rather stark [conversation object](/types/conversation)",
            "schema": {
              "$ref": "#/definitions/conversations.createsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response when name already in use",
            "schema": {
              "$ref": "#/definitions/conversations.createerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "name_taken",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.create",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.history": {
      "get": {
        "description": "Fetches a conversation's history of messages and events.",
        "summary": "conversations_history",
        "tags": ["conversations"],
        "operationId": "ConversationsHistoryGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "inclusive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:history`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
          },
          {
            "name": "oldest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Start of time range of messages to include in results."
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Conversation ID to fetch history for."
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "End of time range of messages to include in results."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response containing a channel's messages",
            "schema": {
              "$ref": "#/definitions/conversations.historysuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/conversations.historyerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:history", "groups:history", "im:history", "mpim:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.history",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.info": {
      "get": {
        "description": "Retrieve information about a conversation.",
        "summary": "conversations_info",
        "tags": ["conversations"],
        "operationId": "ConversationsInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:read`"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Conversation ID to learn more about"
          },
          {
            "name": "include_locale",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set this to `true` to receive the locale for this conversation. Defaults to `false`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)",
            "schema": {
              "$ref": "#/definitions/conversations.infosuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response when a channel cannot be found",
            "schema": {
              "$ref": "#/definitions/conversations.infoerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:read", "groups:read", "im:read", "mpim:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.info",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.invite": {
      "post": {
        "description": "Invites users to a channel.",
        "summary": "conversations_invite",
        "tags": ["conversations"],
        "operationId": "ConversationsInvitePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "users",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A comma separated list of user IDs. Up to 30 users may be listed."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The ID of the public or private channel to invite user(s) to."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response when an invitation is extended",
            "schema": {
              "$ref": "#/definitions/conversations.inviteerrorschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response when an invite is attempted on a conversation type that does not support it",
            "schema": {
              "$ref": "#/definitions/conversations.inviteerrorschema1"
            },
            "examples": {
              "application/json": {
                "error": "method_not_supported_for_channel_type",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.invite",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.join": {
      "post": {
        "description": "Joins an existing conversation.",
        "summary": "conversations_join",
        "tags": ["conversations"],
        "operationId": "ConversationsJoinPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `channels:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "ID of conversation to join"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.joinsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response if the conversation is archived and cannot be joined",
            "schema": {
              "$ref": "#/definitions/conversations.joinerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "is_archived",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.join",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.kick": {
      "post": {
        "description": "Removes a user from a conversation.",
        "summary": "conversations_kick",
        "tags": ["conversations"],
        "operationId": "ConversationsKickPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "user",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User ID to be removed."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "ID of conversation to remove user from."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.kicksuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response when you attempt to kick yourself from a channel",
            "schema": {
              "$ref": "#/definitions/conversations.kickerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "cant_kick_self",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.kick",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.leave": {
      "post": {
        "description": "Leaves a conversation.",
        "summary": "conversations_leave",
        "tags": ["conversations"],
        "operationId": "ConversationsLeavePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Conversation to leave"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.leavesuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response when attempting to leave a workspace's \"general\" channel",
            "schema": {
              "$ref": "#/definitions/conversations.leaveerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "cant_leave_general",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.leave",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.list": {
      "get": {
        "description": "Lists all channels in a Slack team.",
        "summary": "conversations_list",
        "tags": ["conversations"],
        "operationId": "ConversationsListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:read`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000."
          },
          {
            "name": "exclude_archived",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to `true` to exclude archived channels from the list"
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response with only public channels",
            "schema": {
              "$ref": "#/definitions/conversations.listsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/conversations.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:read", "groups:read", "im:read", "mpim:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.list",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.members": {
      "get": {
        "description": "Retrieve members of a conversation.",
        "summary": "conversations_members",
        "tags": ["conversations"],
        "operationId": "ConversationsMembersGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:read`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the conversation to retrieve members for"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical paginated success response",
            "schema": {
              "$ref": "#/definitions/conversations.memberssuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response when an invalid cursor is provided",
            "schema": {
              "$ref": "#/definitions/conversations.memberserrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_cursor",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:read", "groups:read", "im:read", "mpim:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.members",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.open": {
      "post": {
        "description": "Opens or resumes a direct message or multi-person direct message.",
        "summary": "conversations_open",
        "tags": ["conversations"],
        "operationId": "ConversationsOpenPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "return_im",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Boolean, indicates you want the full IM channel definition in the response."
          },
          {
            "name": "users",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.opensuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/conversations.openerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.open",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.rename": {
      "post": {
        "description": "Renames a conversation.",
        "summary": "conversations_rename",
        "tags": ["conversations"],
        "operationId": "ConversationsRenamePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "New name for conversation."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "ID of conversation to rename"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.renamesuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response when the calling user is not a member of the conversation",
            "schema": {
              "$ref": "#/definitions/conversations.renameerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "not_in_channel",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.rename",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.replies": {
      "get": {
        "description": "Retrieve a thread of messages posted to a conversation",
        "summary": "conversations_replies",
        "tags": ["conversations"],
        "operationId": "ConversationsRepliesGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "inclusive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified."
          },
          {
            "name": "ts",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Unique identifier of a thread's parent message."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:history`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
          },
          {
            "name": "oldest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Start of time range of messages to include in results."
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Conversation ID to fetch thread from."
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "End of time range of messages to include in results."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.repliessuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/conversations.replieserrorschema"
            },
            "examples": {
              "application/json": {
                "error": "thread_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:history", "groups:history", "im:history", "mpim:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.replies",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.setPurpose": {
      "post": {
        "description": "Sets the purpose for a conversation.",
        "summary": "conversations_setPurpose",
        "tags": ["conversations"],
        "operationId": "ConversationsSetPurposePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "purpose",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A new, specialer purpose"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Conversation to set the purpose of"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.setPurposesuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/conversations.setPurposeerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.setPurpose",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.setTopic": {
      "post": {
        "description": "Sets the topic for a conversation.",
        "summary": "conversations_setTopic",
        "tags": ["conversations"],
        "operationId": "ConversationsSetTopicPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "topic",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new topic string. Does not support formatting or linkification."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Conversation to set the topic of"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.setTopicsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/conversations.setTopicerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.setTopic",
          "description": "API method documentation"
        }
      }
    },
    "/conversations.unarchive": {
      "post": {
        "description": "Reverses conversation archival.",
        "summary": "conversations_unarchive",
        "tags": ["conversations"],
        "operationId": "ConversationsUnarchivePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "ID of conversation to unarchive"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/conversations.unarchivesuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/conversations.unarchiveerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/conversations.unarchive",
          "description": "API method documentation"
        }
      }
    },
    "/dialog.open": {
      "get": {
        "description": "Open a dialog with a user",
        "summary": "dialog_open",
        "tags": ["dialog"],
        "operationId": "DialogOpenGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `none`"
          },
          {
            "name": "dialog",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The dialog definition. This must be a JSON-encoded string."
          },
          {
            "name": "trigger_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Exchange a trigger to post to the user."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response is quite minimal.",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response, before getting to any possible validation errors.",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "missing_trigger",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/dialog.open",
          "description": "API method documentation"
        }
      }
    },
    "/dnd.endDnd": {
      "post": {
        "description": "Ends the current user's Do Not Disturb session immediately.",
        "summary": "dnd_endDnd",
        "tags": ["dnd"],
        "operationId": "DndEndDndPost",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `dnd:write`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["dnd:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/dnd.endDnd",
          "description": "API method documentation"
        }
      }
    },
    "/dnd.endSnooze": {
      "post": {
        "description": "Ends the current user's snooze mode immediately.",
        "summary": "dnd_endSnooze",
        "tags": ["dnd"],
        "operationId": "DndEndSnoozePost",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `dnd:write`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["dnd:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/dnd.endSnooze",
          "description": "API method documentation"
        }
      }
    },
    "/dnd.info": {
      "get": {
        "description": "Retrieves a user's current Do Not Disturb status.",
        "summary": "dnd_info",
        "tags": ["dnd"],
        "operationId": "DndInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `dnd:read`"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "User to fetch status for (defaults to current user)"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["dnd:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/dnd.info",
          "description": "API method documentation"
        }
      }
    },
    "/dnd.setSnooze": {
      "post": {
        "description": "Turns on Do Not Disturb mode for the current user, or changes its duration.",
        "summary": "dnd_setSnooze",
        "tags": ["dnd"],
        "operationId": "DndSetSnoozePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "num_minutes",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of minutes, from now, to snooze until."
          },
          {
            "name": "token",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `dnd:write`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["dnd:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/dnd.setSnooze",
          "description": "API method documentation"
        }
      }
    },
    "/dnd.teamInfo": {
      "get": {
        "description": "Retrieves the Do Not Disturb status for users on a team.",
        "summary": "dnd_teamInfo",
        "tags": ["dnd"],
        "operationId": "DndTeamInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `dnd:read`"
          },
          {
            "name": "users",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma-separated list of users to fetch Do Not Disturb status for"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/dnd.teamInfosuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "users": {
                  "U023BECGF": {
                    "dnd_enabled": true,
                    "next_dnd_end_ts": 1450423800,
                    "next_dnd_start_ts": 1450387800
                  },
                  "W058CJVAA": {
                    "dnd_enabled": false,
                    "next_dnd_end_ts": 1,
                    "next_dnd_start_ts": 1
                  }
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/dnd.teamInfoerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["dnd:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/dnd.teamInfo",
          "description": "API method documentation"
        }
      }
    },
    "/emoji.list": {
      "get": {
        "description": "Lists custom emoji for a team.",
        "summary": "emoji_list",
        "tags": ["emoji"],
        "operationId": "EmojiListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `emoji:read`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["emoji:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/emoji.list",
          "description": "API method documentation"
        }
      }
    },
    "/files.comments.add": {
      "post": {
        "description": "Add a comment to an existing file.",
        "summary": "files_comments_add",
        "tags": ["files.comments"],
        "operationId": "FilesCommentsAddPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Text of the comment to add."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `files:write:user`"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to add a comment to."
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response",
            "schema": {
              "$ref": "#/definitions/files.comments.addschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Artificial error response",
            "schema": {
              "$ref": "#/definitions/files.comments.adderrorschema"
            },
            "examples": {
              "application/json": {
                "error": "file_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["files:write:user"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/files.comments.add",
          "description": "API method documentation"
        }
      }
    },
    "/files.comments.delete": {
      "post": {
        "description": "Deletes an existing comment on a file.",
        "summary": "files_comments_delete",
        "tags": ["files.comments"],
        "operationId": "FilesCommentsDeletePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `files:write:user`"
          },
          {
            "name": "id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The comment to delete."
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to delete a comment from."
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response is very simple",
            "schema": {
              "$ref": "#/definitions/files.comments.deleteschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "schema": {
              "$ref": "#/definitions/files.comments.deleteerrorschema"
            }
          }
        },
        "security": [
          {
            "auth": ["files:write:user"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/files.comments.delete",
          "description": "API method documentation"
        }
      }
    },
    "/files.comments.edit": {
      "post": {
        "description": "Edit an existing file comment.",
        "summary": "files_comments_edit",
        "tags": ["files.comments"],
        "operationId": "FilesCommentsEditPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Text of the comment to edit."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `files:write:user`"
          },
          {
            "name": "id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The comment to edit."
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File containing the comment to edit."
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "$ref": "#/definitions/files.comments.editschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "schema": {
              "$ref": "#/definitions/files.comments.editerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["files:write:user"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/files.comments.edit",
          "description": "API method documentation"
        }
      }
    },
    "/files.delete": {
      "post": {
        "description": "Deletes a file.",
        "summary": "files_delete",
        "tags": ["files"],
        "operationId": "FilesDeletePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `files:write:user`"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "ID of file to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/files.deleteschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/files.deleteerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["files:write:user"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/files.delete",
          "description": "API method documentation"
        }
      }
    },
    "/files.info": {
      "get": {
        "description": "Gets information about a team file.",
        "summary": "files_info",
        "tags": ["files"],
        "operationId": "FilesInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `files:read`"
          },
          {
            "name": "file",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify a file by providing its ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/files.infoschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/files.infoerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["files:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/files.info",
          "description": "API method documentation"
        }
      }
    },
    "/files.list": {
      "get": {
        "description": "Lists & filters team files.",
        "summary": "files_list",
        "tags": ["files"],
        "operationId": "FilesListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter files appearing in a specific channel, indicated by its ID."
          },
          {
            "name": "ts_to",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Filter files created before this timestamp (inclusive)."
          },
          {
            "name": "ts_from",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Filter files created after this timestamp (inclusive)."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `files:read`"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter files created by a single user."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter files by type:\n\n* `all` - All files\n* `spaces` - Posts\n* `snippets` - Snippets\n* `images` - Image files\n* `gdocs` - Google docs\n* `zips` - Zip files\n* `pdfs` - PDF files\n\nYou can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/files.listschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/files.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["files:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/files.list",
          "description": "API method documentation"
        }
      }
    },
    "/files.revokePublicURL": {
      "post": {
        "description": "Revokes public/external sharing access for a file",
        "summary": "files_revokePublicURL",
        "tags": ["files"],
        "operationId": "FilesRevokePublicURLPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `files:write:user`"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to revoke"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["files:write:user"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/files.revokePublicURL",
          "description": "API method documentation"
        }
      }
    },
    "/files.sharedPublicURL": {
      "post": {
        "description": "Enables a file for public/external sharing.",
        "summary": "files_sharedPublicURL",
        "tags": ["files"],
        "operationId": "FilesSharedPublicURLPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `files:write:user`"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to share"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["files:write:user"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/files.sharedPublicURL",
          "description": "API method documentation"
        }
      }
    },
    "/files.upload": {
      "post": {
        "description": "Uploads or creates a file.",
        "summary": "files_upload",
        "tags": ["files"],
        "operationId": "FilesUploadPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "channels",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Comma-separated list of channel names or IDs where the file will be shared."
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Title of file."
          },
          {
            "name": "initial_comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Initial comment to add to file."
          },
          {
            "name": "filetype",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A [file type](/types/file#file_types) identifier."
          },
          {
            "name": "filename",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Filename of file."
          },
          {
            "name": "content",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File contents via a POST variable. If omitting this parameter, you must provide a `file`."
          },
          {
            "name": "token",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `files:write:user`"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/files.uploadschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/files.uploaderrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["files:write:user"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/files.upload",
          "description": "API method documentation"
        }
      }
    },
    "/groups.archive": {
      "post": {
        "description": "Archives a private channel.",
        "summary": "groups_archive",
        "tags": ["groups"],
        "operationId": "GroupsArchivePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to archive"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.archiveschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.archiveerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.archive",
          "description": "API method documentation"
        }
      }
    },
    "/groups.create": {
      "post": {
        "description": "Creates a private channel.",
        "summary": "groups_create",
        "tags": ["groups"],
        "operationId": "GroupsCreatePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "validate",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Name of private channel to create"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.createsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.createerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.create",
          "description": "API method documentation"
        }
      }
    },
    "/groups.createChild": {
      "post": {
        "description": "Clones and archives a private channel.",
        "summary": "groups_createChild",
        "tags": ["groups"],
        "operationId": "GroupsCreateChildPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to clone and archive."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.createChild",
          "description": "API method documentation"
        }
      }
    },
    "/groups.history": {
      "get": {
        "description": "Fetches history of messages and events from a private channel.",
        "summary": "groups_history",
        "tags": ["groups"],
        "operationId": "GroupsHistoryGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of messages to return, between 1 and 1000."
          },
          {
            "name": "unreads",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include `unread_count_display` in the output?"
          },
          {
            "name": "inclusive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include messages with latest or oldest timestamp in results."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:history`"
          },
          {
            "name": "oldest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Start of time range of messages to include in results."
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Private channel to fetch history for."
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "End of time range of messages to include in results."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.historysuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.historyerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.history",
          "description": "API method documentation"
        }
      }
    },
    "/groups.info": {
      "get": {
        "description": "Gets information about a private channel.",
        "summary": "groups_info",
        "tags": ["groups"],
        "operationId": "GroupsInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:read`"
          },
          {
            "name": "include_locale",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set this to `true` to receive the locale for this group. Defaults to `false`"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Private channel to get info on"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.infosuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.infoerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.info",
          "description": "API method documentation"
        }
      }
    },
    "/groups.invite": {
      "post": {
        "description": "Invites a user to a private channel.",
        "summary": "groups_invite",
        "tags": ["groups"],
        "operationId": "GroupsInvitePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "user",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User to invite."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to invite user to."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.invitesuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.inviteerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.invite",
          "description": "API method documentation"
        }
      }
    },
    "/groups.kick": {
      "post": {
        "description": "Removes a user from a private channel.",
        "summary": "groups_kick",
        "tags": ["groups"],
        "operationId": "GroupsKickPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "user",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User to remove from private channel."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to remove user from."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.kickschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.kickerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.kick",
          "description": "API method documentation"
        }
      }
    },
    "/groups.leave": {
      "post": {
        "description": "Leaves a private channel.",
        "summary": "groups_leave",
        "tags": ["groups"],
        "operationId": "GroupsLeavePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to leave"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.leave",
          "description": "API method documentation"
        }
      }
    },
    "/groups.list": {
      "get": {
        "description": "Lists private channels that the calling user has access to.",
        "summary": "groups_list",
        "tags": ["groups"],
        "operationId": "GroupsListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "exclude_members",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Exclude the `members` from each `group`"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:read`"
          },
          {
            "name": "exclude_archived",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Don't return archived private channels."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.listsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.list",
          "description": "API method documentation"
        }
      }
    },
    "/groups.mark": {
      "post": {
        "description": "Sets the read cursor in a private channel.",
        "summary": "groups_mark",
        "tags": ["groups"],
        "operationId": "GroupsMarkPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "ts",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the most recently seen message."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to set reading cursor in."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.marksuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.markerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.mark",
          "description": "API method documentation"
        }
      }
    },
    "/groups.open": {
      "post": {
        "description": "Opens a private channel.",
        "summary": "groups_open",
        "tags": ["groups"],
        "operationId": "GroupsOpenPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to open."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.open",
          "description": "API method documentation"
        }
      }
    },
    "/groups.rename": {
      "post": {
        "description": "Renames a private channel.",
        "summary": "groups_rename",
        "tags": ["groups"],
        "operationId": "GroupsRenamePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "validate",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "New name for private channel."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to rename"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.rename",
          "description": "API method documentation"
        }
      }
    },
    "/groups.replies": {
      "get": {
        "description": "Retrieve a thread of messages posted to a private channel",
        "summary": "groups_replies",
        "tags": ["groups"],
        "operationId": "GroupsRepliesGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "thread_ts",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Unique identifier of a thread's parent message"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:history`"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Private channel to fetch thread from"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "messages": [
                  {
                    "text": "Hello",
                    "ts": "1358546515.000008",
                    "type": "message",
                    "user": "U2147483896"
                  },
                  {
                    "is_starred": true,
                    "text": "World",
                    "ts": "1358546515.000007",
                    "type": "message",
                    "user": "U2147483896"
                  },
                  {
                    "ts": "1358546515.000007",
                    "type": "something_else"
                  }
                ],
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.replies",
          "description": "API method documentation"
        }
      }
    },
    "/groups.setPurpose": {
      "post": {
        "description": "Sets the purpose for a private channel.",
        "summary": "groups_setPurpose",
        "tags": ["groups"],
        "operationId": "GroupsSetPurposePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "purpose",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new purpose"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to set the purpose of"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.setPurposeschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.setPurposeerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.setPurpose",
          "description": "API method documentation"
        }
      }
    },
    "/groups.setTopic": {
      "post": {
        "description": "Sets the topic for a private channel.",
        "summary": "groups_setTopic",
        "tags": ["groups"],
        "operationId": "GroupsSetTopicPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "topic",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new topic"
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to set the topic of"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/groups.setTopicschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/groups.setTopicerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.setTopic",
          "description": "API method documentation"
        }
      }
    },
    "/groups.unarchive": {
      "post": {
        "description": "Unarchives a private channel.",
        "summary": "groups_unarchive",
        "tags": ["groups"],
        "operationId": "GroupsUnarchivePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `groups:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Private channel to unarchive"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["groups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/groups.unarchive",
          "description": "API method documentation"
        }
      }
    },
    "/im.close": {
      "post": {
        "description": "Close a direct message channel.",
        "summary": "im_close",
        "tags": ["im"],
        "operationId": "ImClosePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `im:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Direct message channel to close."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["im:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/im.close",
          "description": "API method documentation"
        }
      }
    },
    "/im.history": {
      "get": {
        "description": "Fetches history of messages and events from direct message channel.",
        "summary": "im_history",
        "tags": ["im"],
        "operationId": "ImHistoryGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of messages to return, between 1 and 1000."
          },
          {
            "name": "unreads",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include `unread_count_display` in the output?"
          },
          {
            "name": "inclusive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include messages with latest or oldest timestamp in results."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `im:history`"
          },
          {
            "name": "oldest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Start of time range of messages to include in results."
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Direct message channel to fetch history for."
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "End of time range of messages to include in results."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/im.historysuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/im.historyerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["im:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/im.history",
          "description": "API method documentation"
        }
      }
    },
    "/im.list": {
      "get": {
        "description": "Lists direct message channels for the calling user.",
        "summary": "im_list",
        "tags": ["im"],
        "operationId": "ImListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `im:read`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/im.listsuccessschema"
            },
            "examples": {
              "application/json": {
                "ims": [
                  {
                    "created": 1449709280,
                    "id": "D0G9QPY56",
                    "is_im": true,
                    "is_org_shared": false,
                    "is_user_deleted": false,
                    "user": "USLACKBOT"
                  },
                  {
                    "created": 1466692204,
                    "id": "D1KL59A72",
                    "is_im": true,
                    "is_org_shared": false,
                    "is_user_deleted": false,
                    "user": "U0G9QF9C6"
                  },
                  {
                    "created": 1449722883,
                    "id": "D0G9XPFH9",
                    "is_im": true,
                    "is_org_shared": false,
                    "is_user_deleted": false,
                    "user": "U0G9WFXNZ"
                  },
                  {
                    "created": 1452098023,
                    "id": "D0HRHJSF7",
                    "is_im": true,
                    "is_org_shared": false,
                    "is_user_deleted": false,
                    "user": "W0HRJL7CK"
                  },
                  {
                    "created": 1465834222,
                    "id": "D1GD7CHC0",
                    "is_im": true,
                    "is_org_shared": false,
                    "is_user_deleted": true,
                    "user": "U1GDBDGR3"
                  },
                  {
                    "created": 1468274703,
                    "id": "D1QMF76M9",
                    "is_im": true,
                    "is_org_shared": false,
                    "is_user_deleted": false,
                    "user": "U1QNSQB9U"
                  },
                  {
                    "created": 1502210225,
                    "id": "D6K48KKRN",
                    "is_im": true,
                    "is_org_shared": false,
                    "is_user_deleted": false,
                    "user": "U6KR7BVFW"
                  }
                ],
                "ok": "true",
                "response_metadata": {
                  "next_cursor": "aW1faWQ6RDBCSDk1RExI="
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/im.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["im:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/im.list",
          "description": "API method documentation"
        }
      }
    },
    "/im.mark": {
      "post": {
        "description": "Sets the read cursor in a direct message channel.",
        "summary": "im_mark",
        "tags": ["im"],
        "operationId": "ImMarkPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `im:write`"
          },
          {
            "name": "ts",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the most recently seen message."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Direct message channel to set reading cursor in."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/im.marksuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/im.markerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["im:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/im.mark",
          "description": "API method documentation"
        }
      }
    },
    "/im.open": {
      "post": {
        "description": "Opens a direct message channel.",
        "summary": "im_open",
        "tags": ["im"],
        "operationId": "ImOpenPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `im:write`"
          },
          {
            "name": "return_im",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Boolean, indicates you want the full IM channel definition in the response."
          },
          {
            "name": "user",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User to open a direct message channel with."
          },
          {
            "name": "include_locale",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to `true` to receive the locale for this im. Defaults to `false`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/im.opensuccessschema"
            },
            "examples": {
              "application/json": {
                "channel": {
                  "id": "D947RLWRX"
                },
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/im.openerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["im:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/im.open",
          "description": "API method documentation"
        }
      }
    },
    "/im.replies": {
      "get": {
        "description": "Retrieve a thread of messages posted to a direct message conversation",
        "summary": "im_replies",
        "tags": ["im"],
        "operationId": "ImRepliesGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "thread_ts",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Unique identifier of a thread's parent message"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `im:history`"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Direct message channel to fetch thread from"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "messages": [
                  {
                    "text": "Hello",
                    "ts": "1358546515.000008",
                    "type": "message",
                    "user": "U2147483896"
                  },
                  {
                    "is_starred": true,
                    "text": "World",
                    "ts": "1358546515.000007",
                    "type": "message",
                    "user": "U2147483896"
                  },
                  {
                    "ts": "1358546515.000007",
                    "type": "something_else"
                  }
                ],
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["im:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/im.replies",
          "description": "API method documentation"
        }
      }
    },
    "/migration.exchange": {
      "get": {
        "description": "For Enterprise Grid workspaces, map local user IDs to global user IDs",
        "summary": "migration_exchange",
        "tags": ["migration"],
        "operationId": "MigrationExchangeGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `tokens.basic`"
          },
          {
            "name": "to_old",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`."
          },
          {
            "name": "users",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma-separated list of user ids, up to 400 per request"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response when mappings exist for the specified user IDs",
            "schema": {
              "$ref": "#/definitions/migration.exchangesuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response when there are no mappings to provide",
            "schema": {
              "$ref": "#/definitions/migration.exchangeerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "not_enterprise_team",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["tokens.basic"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/migration.exchange",
          "description": "API method documentation"
        }
      }
    },
    "/mpim.close": {
      "post": {
        "description": "Closes a multiparty direct message channel.",
        "summary": "mpim_close",
        "tags": ["mpim"],
        "operationId": "MpimClosePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `mpim:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "MPIM to close."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/mpim.close",
          "description": "API method documentation"
        }
      }
    },
    "/mpim.history": {
      "get": {
        "description": "Fetches history of messages and events from a multiparty direct message.",
        "summary": "mpim_history",
        "tags": ["mpim"],
        "operationId": "MpimHistoryGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of messages to return, between 1 and 1000."
          },
          {
            "name": "unreads",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include `unread_count_display` in the output?"
          },
          {
            "name": "inclusive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include messages with latest or oldest timestamp in results."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `mpim:history`"
          },
          {
            "name": "oldest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Start of time range of messages to include in results."
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Multiparty direct message to fetch history for."
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "End of time range of messages to include in results."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "has_more": false,
                "latest": "1358547726.000003",
                "messages": [
                  {
                    "text": "Hello",
                    "ts": "1358546515.000008",
                    "type": "message",
                    "user": "U2147483896"
                  },
                  {
                    "is_starred": true,
                    "text": "World",
                    "ts": "1358546515.000007",
                    "type": "message",
                    "user": "U2147483896"
                  },
                  {
                    "ts": "1358546515.000007",
                    "type": "something_else"
                  }
                ],
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["mpim:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/mpim.history",
          "description": "API method documentation"
        }
      }
    },
    "/mpim.list": {
      "get": {
        "description": "Lists multiparty direct message channels for the calling user.",
        "summary": "mpim_list",
        "tags": ["mpim"],
        "operationId": "MpimListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `mpim:read`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["mpim:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/mpim.list",
          "description": "API method documentation"
        }
      }
    },
    "/mpim.mark": {
      "post": {
        "description": "Sets the read cursor in a multiparty direct message channel.",
        "summary": "mpim_mark",
        "tags": ["mpim"],
        "operationId": "MpimMarkPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `mpim:write`"
          },
          {
            "name": "ts",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the most recently seen message."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "multiparty direct message channel to set reading cursor in."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/mpim.markschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/mpim.markerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/mpim.mark",
          "description": "API method documentation"
        }
      }
    },
    "/mpim.open": {
      "post": {
        "description": "This method opens a multiparty direct message.",
        "summary": "mpim_open",
        "tags": ["mpim"],
        "operationId": "MpimOpenPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `mpim:write`"
          },
          {
            "name": "users",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Comma separated lists of users.  The ordering of the users is preserved whenever a MPIM group is returned."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/mpim.opensuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/mpim.openerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["mpim:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/mpim.open",
          "description": "API method documentation"
        }
      }
    },
    "/mpim.replies": {
      "get": {
        "description": "Retrieve a thread of messages posted to a direct message conversation from a multiparty direct message.",
        "summary": "mpim_replies",
        "tags": ["mpim"],
        "operationId": "MpimRepliesGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "thread_ts",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Unique identifier of a thread's parent message."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `mpim:history`"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Multiparty direct message channel to fetch thread from."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "messages": [
                  {
                    "text": "Hello",
                    "ts": "1358546515.000008",
                    "type": "message",
                    "user": "U2147483896"
                  },
                  {
                    "is_starred": true,
                    "text": "World",
                    "ts": "1358546515.000007",
                    "type": "message",
                    "user": "U2147483896"
                  },
                  {
                    "ts": "1358546515.000007",
                    "type": "something_else"
                  }
                ],
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["mpim:history"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/mpim.replies",
          "description": "API method documentation"
        }
      }
    },
    "/oauth.access": {
      "get": {
        "description": "Exchanges a temporary OAuth verifier code for an access token.",
        "summary": "oauth_access",
        "tags": ["oauth"],
        "operationId": "OauthAccessGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "client_secret",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Issued when you created your application."
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `code` param returned via the OAuth callback."
          },
          {
            "name": "single_channel",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Request the user to add your app only to a single channel."
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Issued when you created your application."
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This must match the originally submitted URI (if one was sent)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful user token negotiation for a single scope",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_client_id",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/oauth.access",
          "description": "API method documentation"
        }
      }
    },
    "/oauth.token": {
      "get": {
        "description": "Exchanges a temporary OAuth verifier code for a workspace token.",
        "summary": "oauth_token",
        "tags": ["oauth"],
        "operationId": "OauthTokenGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "client_secret",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Issued when you created your application."
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `code` param returned via the OAuth callback."
          },
          {
            "name": "single_channel",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Request the user to add your app only to a single channel."
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Issued when you created your application."
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This must match the originally submitted URI (if one was sent)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success example using a workspace app produces a very different kind of response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "access_token": "xoxa-access-token-string",
                "WINDOW_ID": "A012345678",
                "app_user_id": "U0AB12ABC",
                "authorizing_user_id": "U0HTT3Q0G",
                "installer_user_id": "U061F7AUR",
                "ok": "true",
                "permissions": [
                  {
                    "resource_id": 0,
                    "resource_type": "channel",
                    "scopes": ["channels:read", "chat:write:user"]
                  }
                ],
                "single_channel_id": "C061EG9T2",
                "team_id": "T061EG9Z9",
                "team_name": "Subarachnoid Workspace",
                "token_type": "app"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_client_id",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["none"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/oauth.token",
          "description": "API method documentation"
        }
      }
    },
    "/pins.add": {
      "post": {
        "description": "Pins an item to a channel.",
        "summary": "pins_add",
        "tags": ["pins"],
        "operationId": "PinsAddPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "file_comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File comment to pin."
          },
          {
            "name": "timestamp",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the message to pin."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `pins:write`"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to pin."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to pin the item in."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/pins.addschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/pins.adderrorschema"
            },
            "examples": {
              "application/json": {
                "error": "channel_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["pins:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/pins.add",
          "description": "API method documentation"
        }
      }
    },
    "/pins.list": {
      "get": {
        "description": "Lists items pinned to a channel.",
        "summary": "pins_list",
        "tags": ["pins"],
        "operationId": "PinsListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `pins:read`"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Channel to get pinned items for."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pins.listsuccessschema"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/pins.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["pins:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/pins.list",
          "description": "API method documentation"
        }
      }
    },
    "/pins.remove": {
      "post": {
        "description": "Un-pins an item from a channel.",
        "summary": "pins_remove",
        "tags": ["pins"],
        "operationId": "PinsRemovePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "file_comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File comment to un-pin."
          },
          {
            "name": "timestamp",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the message to un-pin."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `pins:write`"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to un-pin."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel where the item is pinned to."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/pins.removeschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/pins.removeerrorschema"
            }
          }
        },
        "security": [
          {
            "auth": ["pins:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/pins.remove",
          "description": "API method documentation"
        }
      }
    },
    "/reactions.add": {
      "post": {
        "description": "Adds a reaction to an item.",
        "summary": "reactions_add",
        "tags": ["reactions"],
        "operationId": "ReactionsAddPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Reaction (emoji) name."
          },
          {
            "name": "file_comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File comment to add reaction to."
          },
          {
            "name": "timestamp",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the message to add reaction to."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `reactions:write`"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to add reaction to."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel where the message to add reaction to was posted."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/reactions.addschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/reactions.adderrorschema"
            },
            "examples": {
              "application/json": {
                "error": "already_reacted",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["reactions:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/reactions.add",
          "description": "API method documentation"
        }
      }
    },
    "/reactions.get": {
      "get": {
        "description": "Gets reactions for an item.",
        "summary": "reactions_get",
        "tags": ["reactions"],
        "operationId": "ReactionsGetGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "full",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true always return the complete reaction list."
          },
          {
            "name": "file_comment",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "File comment to get reactions for."
          },
          {
            "name": "timestamp",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the message to get reactions for."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `reactions:read`"
          },
          {
            "name": "file",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "File to get reactions for."
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Channel where the message to get reactions for was posted."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/reactions.getsuccessschema"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/reactions.geterrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["reactions:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/reactions.get",
          "description": "API method documentation"
        }
      }
    },
    "/reactions.list": {
      "get": {
        "description": "Lists reactions made by a user.",
        "summary": "reactions_list",
        "tags": ["reactions"],
        "operationId": "ReactionsListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `reactions:read`"
          },
          {
            "name": "full",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true always return the complete reaction list."
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Show reactions made by this user. Defaults to the authed user."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/reactions.listschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/reactions.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["reactions:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/reactions.list",
          "description": "API method documentation"
        }
      }
    },
    "/reactions.remove": {
      "post": {
        "description": "Removes a reaction from an item.",
        "summary": "reactions_remove",
        "tags": ["reactions"],
        "operationId": "ReactionsRemovePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Reaction (emoji) name."
          },
          {
            "name": "file_comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File comment to remove reaction from."
          },
          {
            "name": "timestamp",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the message to remove reaction from."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `reactions:write`"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to remove reaction from."
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel where the message to remove reaction from was posted."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/reactions.removeschema"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/reactions.removeerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "no_reaction",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["reactions:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/reactions.remove",
          "description": "API method documentation"
        }
      }
    },
    "/reminders.add": {
      "post": {
        "description": "Creates a reminder.",
        "summary": "reminders_add",
        "tags": ["reminders"],
        "operationId": "RemindersAddPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "text",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The content of the reminder"
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `reminders:write`"
          },
          {
            "name": "user",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it."
          },
          {
            "name": "time",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["reminders:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/reminders.add",
          "description": "API method documentation"
        }
      }
    },
    "/reminders.complete": {
      "post": {
        "description": "Marks a reminder as complete.",
        "summary": "reminders_complete",
        "tags": ["reminders"],
        "operationId": "RemindersCompletePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `reminders:write`"
          },
          {
            "name": "reminder",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The ID of the reminder to be marked as complete"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["reminders:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/reminders.complete",
          "description": "API method documentation"
        }
      }
    },
    "/reminders.delete": {
      "post": {
        "description": "Deletes a reminder.",
        "summary": "reminders_delete",
        "tags": ["reminders"],
        "operationId": "RemindersDeletePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `reminders:write`"
          },
          {
            "name": "reminder",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The ID of the reminder"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["reminders:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/reminders.delete",
          "description": "API method documentation"
        }
      }
    },
    "/reminders.info": {
      "get": {
        "description": "Gets information about a reminder.",
        "summary": "reminders_info",
        "tags": ["reminders"],
        "operationId": "RemindersInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `reminders:read`"
          },
          {
            "name": "reminder",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of the reminder"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["reminders:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/reminders.info",
          "description": "API method documentation"
        }
      }
    },
    "/reminders.list": {
      "get": {
        "description": "Lists all reminders created by or for a given user.",
        "summary": "reminders_list",
        "tags": ["reminders"],
        "operationId": "RemindersListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `reminders:read`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["reminders:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/reminders.list",
          "description": "API method documentation"
        }
      }
    },
    "/rtm.connect": {
      "get": {
        "description": "Starts a Real Time Messaging session.",
        "summary": "rtm_connect",
        "tags": ["rtm"],
        "operationId": "RtmConnectGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "presence_sub",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions)."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `rtm:stream`"
          },
          {
            "name": "batch_presence_aware",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching)."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/rtm.connectschema"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "self": {
                  "id": "U4X318ZMZ",
                  "name": "robotoverlord"
                },
                "team": {
                  "domain": "slackdemo",
                  "id": "T2U81E2FP",
                  "name": "SlackDemo"
                },
                "url": "wss://..."
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/rtm.connecterrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["rtm:stream"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/rtm.connect",
          "description": "API method documentation"
        }
      }
    },
    "/rtm.start": {
      "get": {
        "description": "Starts a Real Time Messaging session.",
        "summary": "rtm_start",
        "tags": ["rtm"],
        "operationId": "RtmStartGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "no_latest",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Exclude latest timestamps for channels, groups, mpims, and ims. Automatically sets `no_unreads` to `1`"
          },
          {
            "name": "simple_latest",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Return timestamp only for latest message object of each channel (improves performance)."
          },
          {
            "name": "include_locale",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set this to `true` to receive the locale for users and channels. Defaults to `false`"
          },
          {
            "name": "presence_sub",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions)."
          },
          {
            "name": "no_unreads",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Skip unread counts for each channel (improves performance)."
          },
          {
            "name": "batch_presence_aware",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching)."
          },
          {
            "name": "mpim_aware",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Returns MPIMs to the client in the API response."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `rtm:stream`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/rtm.startsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/rtm.starterrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["rtm:stream"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/rtm.start",
          "description": "API method documentation"
        }
      }
    },
    "/search.all": {
      "get": {
        "description": "Searches for messages and files matching a query.",
        "summary": "search_all",
        "tags": ["search"],
        "operationId": "SearchAllGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sort_dir",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Change sort direction to ascending (`asc`) or descending (`desc`)."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Search query. May contains booleans, etc."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Return matches sorted by either `score` or `timestamp`."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `search:read`"
          },
          {
            "name": "highlight",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Pass a value of `true` to enable query highlight markers (see below)."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "files": {
                  "matches": [
                    {
                      "channels": [],
                      "comments_count": 1,
                      "created": 1508804330,
                      "display_as_bot": false,
                      "editable": false,
                      "external_type": "",
                      "filetype": "png",
                      "groups": [],
                      "id": "F7PKF1NR7",
                      "image_exif_rotation": 1,
                      "ims": [],
                      "initial_comment": {
                        "comment": "Sure! Here's the workflow diagram!",
                        "created": 1508804330,
                        "id": "Fc7NLL52E7",
                        "is_intro": true,
                        "timestamp": 1508804330,
                        "user": "U2U85N1RZ"
                      },
                      "is_external": false,
                      "is_public": true,
                      "mimetype": "image/png",
                      "mode": "hosted",
                      "name": "slack workflow diagram.png",
                      "original_h": 117,
                      "original_w": 128,
                      "permalink": "https://example.slack.com/files/U2U85N1RZ/F7PKF1NR7/slack_workflow_diagram.png",
                      "permalink_public": "https://slack-files.com/T2U81E2FZ-F7PKF1NR7-bea9143f18",
                      "pretty_type": "PNG",
                      "preview": null,
                      "public_url_shared": false,
                      "score": "0.99982661240974",
                      "size": 35705,
                      "thumb_160": "https://files.slack.com/files-tmb/T2U81E2FZ-F7PKF1NR7-19f33fc256/slack_workflow_diagram_160.png",
                      "thumb_360": "https://files.slack.com/files-tmb/T2U81E2FZ-F7PKF1NR7-19f33fc256/slack_workflow_diagram_360.png",
                      "thumb_360_h": 117,
                      "thumb_360_w": 128,
                      "thumb_64": "https://files.slack.com/files-tmb/T2U81E2FZ-F7PKF1NR7-19f33fc256/slack_workflow_diagram_64.png",
                      "thumb_80": "https://files.slack.com/files-tmb/T2U81E2FZ-F7PKF1NR7-19f33fc256/slack_workflow_diagram_80.png",
                      "timestamp": 1508804330,
                      "title": "slack workflow diagram",
                      "top_file": false,
                      "url_private": "https://files.slack.com/files-pri/T2U81E2FZ-F7PKF1NR7/slack_workflow_diagram.png",
                      "url_private_download": "https://files.slack.com/files-pri/T2U81E2FZ-F7PKF1NR7/download/slack_workflow_diagram.png",
                      "user": "U2U85N1RZ",
                      "username": "amy"
                    }
                  ],
                  "pagination": {
                    "first": 1,
                    "last": 1,
                    "page": 1,
                    "page_count": 1,
                    "per_page": 20,
                    "total_count": 1
                  },
                  "paging": {
                    "count": 20,
                    "page": 1,
                    "pages": 1,
                    "total": 1
                  },
                  "total": 1
                },
                "messages": {
                  "matches": [
                    {
                      "channel": {
                        "id": "C2U86NC6M",
                        "is_ext_shared": false,
                        "is_mpim": false,
                        "is_org_shared": false,
                        "is_pending_ext_shared": false,
                        "is_private": false,
                        "is_shared": false,
                        "name": "general",
                        "pending_shared": []
                      },
                      "iid": "35692677-e60e-43d9-ac45-1987cea88975",
                      "next": {
                        "iid": "6f510ea1-e1d3-4f3f-bdb9-f9c6f6e9d609",
                        "text": "Thanks!",
                        "ts": "1508804378.000219",
                        "type": "message",
                        "user": "U2U85HJ7R",
                        "username": "john"
                      },
                      "permalink": "https://example.slack.com/archives/C2U86NC6M/p1508804330000296",
                      "previous": {
                        "iid": "aba8603c-0543-4fb2-9118-a5ac85f3d138",
                        "text": "Can you send me the Slack workflow diagram?",
                        "ts": "1508804301.000026",
                        "type": "message",
                        "user": "U2U85HJ7R",
                        "username": "john"
                      },
                      "team": "T2U81E2FZ",
                      "text": "uploaded a file: <https://example.slack.com/files/U2U85N1RZ/F7PKF1NR7/slack_workflow_diagram.png|slack workflow diagram> and commented: Sure! Here's the workflow diagram!",
                      "ts": "1508804330.000296",
                      "type": "message",
                      "user": "U2U85N1RZ",
                      "username": "amy"
                    }
                  ],
                  "pagination": {
                    "first": 1,
                    "last": 1,
                    "page": 1,
                    "page_count": 1,
                    "per_page": 20,
                    "total_count": 1
                  },
                  "paging": {
                    "count": 20,
                    "page": 1,
                    "pages": 1,
                    "total": 1
                  },
                  "total": 1
                },
                "ok": "true",
                "posts": {
                  "matches": [],
                  "total": 0
                },
                "query": "diagram"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "missing_scope",
                "needed": "search:read",
                "ok": "false",
                "provided": "identify,bot:basic"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["search:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/search.all",
          "description": "API method documentation"
        }
      }
    },
    "/search.files": {
      "get": {
        "description": "Searches for files matching a query.",
        "summary": "search_files",
        "tags": ["search"],
        "operationId": "SearchFilesGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sort_dir",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Change sort direction to ascending (`asc`) or descending (`desc`)."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Search query."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Return matches sorted by either `score` or `timestamp`."
          },
          {
            "name": "highlight",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Pass a value of `true` to enable query highlight markers (see below)."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `search:read`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "files": {
                  "matches": [
                    {
                      "channels": [],
                      "comments_count": 1,
                      "created": 1507850315,
                      "deanimate_gif": "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_deanimate_gif.png",
                      "display_as_bot": false,
                      "editable": false,
                      "external_type": "",
                      "filetype": "gif",
                      "groups": [],
                      "id": "F7H0D7ZBB",
                      "image_exif_rotation": 1,
                      "ims": [],
                      "is_external": false,
                      "is_public": true,
                      "mimetype": "image/gif",
                      "mode": "hosted",
                      "name": "computer.gif",
                      "original_h": 313,
                      "original_w": 500,
                      "permalink": "https://eventsdemo.slack.com/files/U2U85N1RZ/F7H0D7ZBB/computer.gif",
                      "permalink_public": "https://slack-files.com/T2U81E2BB-F7H0D7ZBB-85b7f5557e",
                      "pretty_type": "GIF",
                      "preview": null,
                      "public_url_shared": false,
                      "reactions": [
                        {
                          "count": 1,
                          "name": "stuck_out_tongue_winking_eye",
                          "users": ["U2U85N1RZ"]
                        }
                      ],
                      "score": "0.38899223746309",
                      "size": 1639034,
                      "thumb_160": "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_160.png",
                      "thumb_360": "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_360.png",
                      "thumb_360_gif": "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_360.gif",
                      "thumb_360_h": 225,
                      "thumb_360_w": 360,
                      "thumb_480": "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_480.png",
                      "thumb_480_gif": "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_480.gif",
                      "thumb_480_h": 300,
                      "thumb_480_w": 480,
                      "thumb_64": "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_64.png",
                      "thumb_80": "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_80.png",
                      "timestamp": 1507850315,
                      "title": "computer.gif",
                      "top_file": false,
                      "url_private": "https://files.slack.com/files-pri/T2U81E2BB-F7H0D7ZBB/computer.gif",
                      "url_private_download": "https://files.slack.com/files-pri/T2U81E2BB-F7H0D7ZBB/download/computer.gif",
                      "user": "U2U85N1RZ",
                      "username": ""
                    }
                  ],
                  "pagination": {
                    "first": 1,
                    "last": 3,
                    "page": 1,
                    "page_count": 1,
                    "per_page": 20,
                    "total_count": 3
                  },
                  "paging": {
                    "count": 20,
                    "page": 1,
                    "pages": 1,
                    "total": 3
                  },
                  "total": 3
                },
                "ok": "true",
                "query": "computer.gif"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "No query passed",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["search:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/search.files",
          "description": "API method documentation"
        }
      }
    },
    "/search.messages": {
      "get": {
        "description": "Searches for messages matching a query.",
        "summary": "search_messages",
        "tags": ["search"],
        "operationId": "SearchMessagesGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sort_dir",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Change sort direction to ascending (`asc`) or descending (`desc`)."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Search query."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Return matches sorted by either `score` or `timestamp`."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Pass the number of results you want per \"page\". Maximum of `100`."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `search:read`"
          },
          {
            "name": "highlight",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Pass a value of `true` to enable query highlight markers (see below)."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "messages": {
                  "matches": [
                    {
                      "channel": {
                        "id": "C12345678",
                        "is_ext_shared": false,
                        "is_mpim": false,
                        "is_org_shared": false,
                        "is_pending_ext_shared": false,
                        "is_private": false,
                        "is_shared": false,
                        "name": "general",
                        "pending_shared": []
                      },
                      "iid": "cb64bdaa-c1e8-4631-8a91-0f78080113e9",
                      "permalink": "https://hitchhikers.slack.com/archives/C12345678/p1508284197000015",
                      "team": "T12345678",
                      "text": "The meaning of life the universe and everything is 42.",
                      "ts": "1508284197.000015",
                      "type": "message",
                      "user": "U2U85N1RV",
                      "username": "roach"
                    },
                    {
                      "channel": {
                        "id": "C12345678",
                        "is_ext_shared": false,
                        "is_mpim": false,
                        "is_org_shared": false,
                        "is_pending_ext_shared": false,
                        "is_private": false,
                        "is_shared": false,
                        "name": "random",
                        "pending_shared": []
                      },
                      "iid": "9a00d3c9-bd2d-45b0-988b-6cff99ae2a90",
                      "permalink": "https://hitchhikers.slack.com/archives/C12345678/p1508795665000236",
                      "team": "T12345678",
                      "text": "The meaning of life the universe and everything is 101010",
                      "ts": "1508795665.000236",
                      "type": "message",
                      "user": "",
                      "username": "robot overlord"
                    }
                  ],
                  "pagination": {
                    "first": 1,
                    "last": 2,
                    "page": 1,
                    "page_count": 1,
                    "per_page": 20,
                    "total_count": 2
                  },
                  "paging": {
                    "count": 20,
                    "page": 1,
                    "pages": 1,
                    "total": 2
                  },
                  "total": 2
                },
                "ok": "true",
                "query": "The meaning of life the universe and everything"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "No query passed",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["search:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/search.messages",
          "description": "API method documentation"
        }
      }
    },
    "/stars.add": {
      "post": {
        "description": "Adds a star to an item.",
        "summary": "stars_add",
        "tags": ["stars"],
        "operationId": "StarsAddPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "file_comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File comment to add star to."
          },
          {
            "name": "timestamp",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the message to add star to."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `stars:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)."
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to add star to."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["stars:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/stars.add",
          "description": "API method documentation"
        }
      }
    },
    "/stars.list": {
      "get": {
        "description": "Lists stars for a user.",
        "summary": "stars_list",
        "tags": ["stars"],
        "operationId": "StarsListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `stars:read`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["stars:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/stars.list",
          "description": "API method documentation"
        }
      }
    },
    "/stars.remove": {
      "post": {
        "description": "Removes a star from an item.",
        "summary": "stars_remove",
        "tags": ["stars"],
        "operationId": "StarsRemovePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "file_comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File comment to remove star from."
          },
          {
            "name": "timestamp",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "description": "Timestamp of the message to remove star from."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `stars:write`"
          },
          {
            "name": "channel",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)."
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File to remove star from."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["stars:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/stars.remove",
          "description": "API method documentation"
        }
      }
    },
    "/team.accessLogs": {
      "get": {
        "description": "Gets the access logs for the current team.",
        "summary": "team_accessLogs",
        "tags": ["team"],
        "operationId": "TeamAccessLogsGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `admin`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "End of time range of logs to include in results (inclusive)."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["admin"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/team.accessLogs",
          "description": "API method documentation"
        }
      }
    },
    "/team.billableInfo": {
      "get": {
        "description": "Gets billable users information for the current team.",
        "summary": "team_billableInfo",
        "tags": ["team"],
        "operationId": "TeamBillableInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `admin`"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A user to retrieve the billable information for. Defaults to all users."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["admin"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/team.billableInfo",
          "description": "API method documentation"
        }
      }
    },
    "/team.info": {
      "get": {
        "description": "Gets information about the current team.",
        "summary": "team_info",
        "tags": ["team"],
        "operationId": "TeamInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `team:read`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/team.infoschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/team.infoerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["team:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/team.info",
          "description": "API method documentation"
        }
      }
    },
    "/team.integrationLogs": {
      "get": {
        "description": "Gets the integration logs for the current team.",
        "summary": "team_integrationLogs",
        "tags": ["team"],
        "operationId": "TeamIntegrationLogsGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "change_type",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter logs with this change type. Defaults to all logs."
          },
          {
            "name": "WINDOW_ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Filter logs to this Slack app. Defaults to all logs."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `admin`"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter logs generated by this user’s actions. Defaults to all logs."
          },
          {
            "name": "service_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Filter logs to this service. Defaults to all logs."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["admin"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/team.integrationLogs",
          "description": "API method documentation"
        }
      }
    },
    "/team.profile.get": {
      "get": {
        "description": "Retrieve a team's profile.",
        "summary": "team_profile_get",
        "tags": ["team.profile"],
        "operationId": "TeamProfileGetGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users.profile:read`"
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by visibility."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/team.profile.getsuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/team.profile.geterrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users.profile:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/team.profile.get",
          "description": "API method documentation"
        }
      }
    },
    "/usergroups.create": {
      "post": {
        "description": "Create a User Group",
        "summary": "usergroups_create",
        "tags": ["usergroups"],
        "operationId": "UsergroupsCreatePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "handle",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A mention handle. Must be unique among channels, users and User Groups."
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A name for the User Group. Must be unique among User Groups."
          },
          {
            "name": "channels",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `usergroups:write`"
          },
          {
            "name": "include_count",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Include the number of users in each User Group."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A short description of the User Group."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["usergroups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/usergroups.create",
          "description": "API method documentation"
        }
      }
    },
    "/usergroups.disable": {
      "post": {
        "description": "Disable an existing User Group",
        "summary": "usergroups_disable",
        "tags": ["usergroups"],
        "operationId": "UsergroupsDisablePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `usergroups:write`"
          },
          {
            "name": "include_count",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Include the number of users in the User Group."
          },
          {
            "name": "usergroup",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The encoded ID of the User Group to disable."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["usergroups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/usergroups.disable",
          "description": "API method documentation"
        }
      }
    },
    "/usergroups.enable": {
      "post": {
        "description": "Enable a User Group",
        "summary": "usergroups_enable",
        "tags": ["usergroups"],
        "operationId": "UsergroupsEnablePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `usergroups:write`"
          },
          {
            "name": "include_count",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Include the number of users in the User Group."
          },
          {
            "name": "usergroup",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The encoded ID of the User Group to enable."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["usergroups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/usergroups.enable",
          "description": "API method documentation"
        }
      }
    },
    "/usergroups.list": {
      "get": {
        "description": "List all User Groups for a team",
        "summary": "usergroups_list",
        "tags": ["usergroups"],
        "operationId": "UsergroupsListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "include_users",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include the list of users for each User Group."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `usergroups:read`"
          },
          {
            "name": "include_count",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include the number of users in each User Group."
          },
          {
            "name": "include_disabled",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include disabled User Groups."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "usergroups": [
                  {
                    "auto_type": "admin",
                    "created_by": "USLACKBOT",
                    "date_create": 1446598059,
                    "date_delete": 0,
                    "date_update": 1446670362,
                    "deleted_by": null,
                    "description": "A group of all Administrators on your team.",
                    "handle": "admins",
                    "id": "S0614TZR7",
                    "is_external": false,
                    "is_usergroup": true,
                    "name": "Team Admins",
                    "prefs": {
                      "channels": [],
                      "groups": []
                    },
                    "team_id": "T060RNRCH",
                    "updated_by": "U060RNRCZ",
                    "user_count": "2"
                  },
                  {
                    "auto_type": "owner",
                    "created_by": "USLACKBOT",
                    "date_create": 1446678371,
                    "date_delete": 0,
                    "date_update": 1446678371,
                    "deleted_by": null,
                    "description": "A group of all Owners on your team.",
                    "handle": "owners",
                    "id": "S06158AV7",
                    "is_external": false,
                    "is_usergroup": true,
                    "name": "Team Owners",
                    "prefs": {
                      "channels": [],
                      "groups": []
                    },
                    "team_id": "T060RNRCH",
                    "updated_by": "USLACKBOT",
                    "user_count": "1"
                  },
                  {
                    "auto_type": null,
                    "created_by": "U060RNRCZ",
                    "date_create": 1446746793,
                    "date_delete": 1446748865,
                    "date_update": 1446747767,
                    "deleted_by": null,
                    "description": "Marketing gurus, PR experts and product advocates.",
                    "handle": "marketing-team",
                    "id": "S0615G0KT",
                    "is_external": false,
                    "is_usergroup": true,
                    "name": "Marketing Team",
                    "prefs": {
                      "channels": [],
                      "groups": []
                    },
                    "team_id": "T060RNRCH",
                    "updated_by": "U060RNRCZ",
                    "user_count": "0"
                  }
                ]
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["usergroups:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/usergroups.list",
          "description": "API method documentation"
        }
      }
    },
    "/usergroups.update": {
      "post": {
        "description": "Update an existing User Group",
        "summary": "usergroups_update",
        "tags": ["usergroups"],
        "operationId": "UsergroupsUpdatePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "handle",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A mention handle. Must be unique among channels, users and User Groups."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A short description of the User Group."
          },
          {
            "name": "channels",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `usergroups:write`"
          },
          {
            "name": "include_count",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Include the number of users in the User Group."
          },
          {
            "name": "usergroup",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The encoded ID of the User Group to update."
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A name for the User Group. Must be unique among User Groups."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "usergroup": {
                  "auto_type": null,
                  "created_by": "U060R4BJ4",
                  "date_create": 1447096577,
                  "date_delete": 0,
                  "date_update": 1447102109,
                  "deleted_by": null,
                  "description": "Marketing gurus, PR experts and product advocates.",
                  "handle": "marketing-team",
                  "id": "S0616NG6M",
                  "is_external": false,
                  "is_usergroup": true,
                  "name": "Marketing Team",
                  "prefs": {
                    "channels": [],
                    "groups": []
                  },
                  "team_id": "T060R4BHN",
                  "updated_by": "U060R4BJ4",
                  "user_count": 1,
                  "users": ["U060R4BJ4", "U060RNRCZ"]
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["usergroups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/usergroups.update",
          "description": "API method documentation"
        }
      }
    },
    "/usergroups.users.list": {
      "get": {
        "description": "List all users in a User Group",
        "summary": "usergroups_users_list",
        "tags": ["usergroups.users"],
        "operationId": "UsergroupsUsersListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `usergroups:read`"
          },
          {
            "name": "include_disabled",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Allow results that involve disabled User Groups."
          },
          {
            "name": "usergroup",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The encoded ID of the User Group to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "users": ["U060R4BJ4", "W123A4BC5"]
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["usergroups:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/usergroups.users.list",
          "description": "API method documentation"
        }
      }
    },
    "/usergroups.users.update": {
      "post": {
        "description": "Update the list of users for a User Group",
        "summary": "usergroups_users_update",
        "tags": ["usergroups.users"],
        "operationId": "UsergroupsUsersUpdatePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "include_count",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Include the number of users in the User Group."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `usergroups:write`"
          },
          {
            "name": "users",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group."
          },
          {
            "name": "usergroup",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The encoded ID of the User Group to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "usergroup": {
                  "auto_type": null,
                  "created_by": "U060R4BJ4",
                  "date_create": 1447096577,
                  "date_delete": 0,
                  "date_update": 1447102109,
                  "deleted_by": null,
                  "description": "Marketing gurus, PR experts and product advocates.",
                  "handle": "marketing-team",
                  "id": "S0616NG6M",
                  "is_external": false,
                  "is_usergroup": true,
                  "name": "Marketing Team",
                  "prefs": {
                    "channels": [],
                    "groups": []
                  },
                  "team_id": "T060R4BHN",
                  "updated_by": "U060R4BJ4",
                  "user_count": 1,
                  "users": ["U060R4BJ4", "U060RNRCZ"]
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["usergroups:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/usergroups.users.update",
          "description": "API method documentation"
        }
      }
    },
    "/users.conversations": {
      "get": {
        "description": "List conversations the calling user may access.",
        "summary": "users_conversations",
        "tags": ["users"],
        "operationId": "UsersConversationsGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `conversations:read`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000."
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership."
          },
          {
            "name": "exclude_archived",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to `true` to exclude archived channels from the list"
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response with only public channels. Note how `num_members` and `is_member` are not returned like typical `conversations` objects.",
            "schema": {
              "$ref": "#/definitions/users.conversationssuccessschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/users.conversationserrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["channels:read", "groups:read", "im:read", "mpim:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.conversations",
          "description": "API method documentation"
        }
      }
    },
    "/users.deletePhoto": {
      "post": {
        "description": "Delete the user profile photo",
        "summary": "users_deletePhoto",
        "tags": ["users"],
        "operationId": "UsersDeletePhotoPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users.profile:write`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users.profile:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.deletePhoto",
          "description": "API method documentation"
        }
      }
    },
    "/users.getPresence": {
      "get": {
        "description": "Gets user presence information.",
        "summary": "users_getPresence",
        "tags": ["users"],
        "operationId": "UsersGetPresenceGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users:read`"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "User to get presence info on. Defaults to the authed user."
          }
        ],
        "responses": {
          "200": {
            "description": "When requesting information for a different user, this method just returns the current presence (either `active` or `away`).",
            "schema": {
              "$ref": "#/definitions/APImethod:users.getPresence"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "presence": "active"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/users.countserrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.getPresence",
          "description": "API method documentation"
        }
      }
    },
    "/users.identity": {
      "get": {
        "description": "Get a user's identity.",
        "summary": "users_identity",
        "tags": ["users"],
        "operationId": "UsersIdentityGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `identity.basic`"
          }
        ],
        "responses": {
          "200": {
            "description": "You will receive at a minimum the following information:",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/users.identityschema"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/users.identityerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "account_inactive",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["identity.basic"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.identity",
          "description": "API method documentation"
        }
      }
    },
    "/users.info": {
      "get": {
        "description": "Gets information about a user.",
        "summary": "users_info",
        "tags": ["users"],
        "operationId": "UsersInfoGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "include_locale",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set this to `true` to receive the locale for this user. Defaults to `false`"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users:read`"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "User to get info on"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/users.infosuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "user": {
                  "color": "9f69e7",
                  "deleted": false,
                  "has_2fa": false,
                  "id": "W012A3CDE",
                  "is_admin": true,
                  "is_app_user": false,
                  "is_bot": false,
                  "is_owner": false,
                  "is_primary_owner": false,
                  "is_restricted": false,
                  "is_ultra_restricted": false,
                  "name": "spengler",
                  "profile": {
                    "avatar_hash": "ge3b51ca72de",
                    "display_name": "spengler",
                    "display_name_normalized": "spengler",
                    "email": "spengler@ghostbusters.example.com",
                    "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "real_name": "Egon Spengler",
                    "real_name_normalized": "Egon Spengler",
                    "status_emoji": ":books:",
                    "status_text": "Print is dead",
                    "team": "T012AB3C4"
                  },
                  "real_name": "Egon Spengler",
                  "team_id": "T012AB3C4",
                  "tz": "America/Los_Angeles",
                  "tz_label": "Pacific Daylight Time",
                  "tz_offset": -25200,
                  "updated": 1502138686
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/users.infoerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "user_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.info",
          "description": "API method documentation"
        }
      }
    },
    "/users.list": {
      "get": {
        "description": "Lists all users in a Slack team.",
        "summary": "users_list",
        "tags": ["users"],
        "operationId": "UsersListGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "presence",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Deprecated. Whether to include presence data in the output. Defaults to `false`. Setting this to `true` reduces performance, especially with large teams."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users:read`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
          },
          {
            "name": "include_locale",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set this to `true` to receive the locale for users. Defaults to `false`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/users.listschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/users.listerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_cursor",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.list",
          "description": "API method documentation"
        }
      }
    },
    "/users.lookupByEmail": {
      "get": {
        "description": "Find a user with an email address.",
        "summary": "users_lookupByEmail",
        "tags": ["users"],
        "operationId": "UsersLookupByEmailGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users:read.email`"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "An email address belonging to a user in the workspace"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/users.lookupByEmailsuccessschema"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "user": {
                  "color": "9f69e7",
                  "deleted": false,
                  "has_2fa": false,
                  "id": "W012A3CDE",
                  "is_admin": true,
                  "is_app_user": false,
                  "is_bot": false,
                  "is_owner": false,
                  "is_primary_owner": false,
                  "is_restricted": false,
                  "is_ultra_restricted": false,
                  "name": "spengler",
                  "profile": {
                    "avatar_hash": "ge3b51ca72de",
                    "display_name": "spengler",
                    "display_name_normalized": "spengler",
                    "email": "spengler@ghostbusters.example.com",
                    "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "real_name": "Egon Spengler",
                    "real_name_normalized": "Egon Spengler",
                    "status_emoji": ":books:",
                    "status_text": "Print is dead",
                    "team": "T012AB3C4"
                  },
                  "real_name": "Egon Spengler",
                  "team_id": "T012AB3C4",
                  "tz": "America/Los_Angeles",
                  "tz_label": "Pacific Daylight Time",
                  "tz_offset": -25200,
                  "updated": 1502138686
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/users.lookupByEmailerrorschema"
            },
            "examples": {
              "application/json": {
                "error": "users_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users:read.email"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.lookupByEmail",
          "description": "API method documentation"
        }
      }
    },
    "/users.setActive": {
      "post": {
        "description": "Marked a user as active. Deprecated and non-functional.",
        "summary": "users_setActive",
        "tags": ["users"],
        "operationId": "UsersSetActivePost",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users:write`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.setActive",
          "description": "API method documentation"
        }
      }
    },
    "/users.setPhoto": {
      "post": {
        "description": "Set the user profile photo",
        "summary": "users_setPhoto",
        "tags": ["users"],
        "operationId": "UsersSetPhotoPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "image",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "File contents via `multipart/form-data`."
          },
          {
            "name": "crop_w",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Width/height of crop box (always square)"
          },
          {
            "name": "token",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users.profile:write`"
          },
          {
            "name": "crop_y",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Y coordinate of top-left corner of crop box"
          },
          {
            "name": "crop_x",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "X coordinate of top-left corner of crop box"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users.profile:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.setPhoto",
          "description": "API method documentation"
        }
      }
    },
    "/users.setPresence": {
      "post": {
        "description": "Manually sets user presence.",
        "summary": "users_setPresence",
        "tags": ["users"],
        "operationId": "UsersSetPresencePost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users:write`"
          },
          {
            "name": "presence",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Either `auto` or `away`"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "ok": "true"
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/Defaultsuccesstemplate"
            },
            "examples": {
              "application/json": {
                "error": "invalid_auth",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.setPresence",
          "description": "API method documentation"
        }
      }
    },
    "/users.profile.get": {
      "get": {
        "description": "Retrieves a user's profile information.",
        "summary": "users_profile_get",
        "tags": ["users.profile"],
        "operationId": "UsersProfileGetGet",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users.profile:read`"
          },
          {
            "name": "include_labels",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include labels for each ID in custom profile fields"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "User to retrieve profile info for"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/users.profile.getschema"
            },
            "examples": {
              "application/json": {
                "ok": "true",
                "profile": {
                  "avatar_hash": "ge3b51ca72de",
                  "display_name": "spengler",
                  "display_name_normalized": "spengler",
                  "email": "spengler@ghostbusters.example.com",
                  "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                  "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                  "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                  "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                  "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                  "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                  "real_name": "Egon Spengler",
                  "real_name_normalized": "Egon Spengler",
                  "status_emoji": ":books:",
                  "status_text": "Print is dead",
                  "team": "T012AB3C4"
                }
              }
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/users.profile.geterrorschema"
            },
            "examples": {
              "application/json": {
                "error": "user_not_found",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users.profile:read"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.profile.get",
          "description": "API method documentation"
        }
      }
    },
    "/users.profile.set": {
      "post": {
        "description": "Set the profile information for a user.",
        "summary": "users_profile_set",
        "tags": ["users.profile"],
        "operationId": "UsersProfileSetPost",
        "deprecated": false,
        "produces": ["application/json"],
        "consumes": ["application/x-www-form-urlencoded"],
        "parameters": [
          {
            "name": "profile",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Collection of key:value pairs presented as a URL-encoded JSON hash."
          },
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Authentication token. Requires scope: `users.profile:write`"
          },
          {
            "name": "user",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "ID of user to change. This argument may only be specified by team admins on paid teams."
          },
          {
            "name": "value",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Value to set a single key to. Usable only if `profile` is not passed."
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Name of a single key to set. Usable only if `profile` is not passed."
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "$ref": "#/definitions/users.profile.setschema"
            },
            "headers": {}
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "$ref": "#/definitions/users.profile.seterrorschema"
            },
            "examples": {
              "application/json": {
                "error": "invalid_profile",
                "ok": "false"
              }
            }
          }
        },
        "security": [
          {
            "auth": ["users.profile:write"]
          }
        ],
        "externalDocs": {
          "url": "https://api.slack.com/methods/users.profile.set",
          "description": "API method documentation"
        }
      }
    }
  },
  "definitions": {
    "defaultfailureresponse": {
      "title": "defaultfailureresponse",
      "example": "False",
      "type": "string",
      "enum": ["False"]
    },
    "defaultsuccessresponse": {
      "title": "defaultsuccessresponse",
      "example": "True",
      "type": "string",
      "enum": ["True"]
    },
    "ChannelObject": {
      "title": "ChannelObject",
      "type": "object",
      "properties": {
        "accepted_user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "created": {
          "type": "integer",
          "format": "int32"
        },
        "creator": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "id": {
          "type": "string",
          "pattern": "^[C][A-Z0-9]{8}$"
        },
        "is_archived": {
          "type": "boolean"
        },
        "is_channel": {
          "type": "boolean"
        },
        "is_general": {
          "type": "boolean"
        },
        "is_member": {
          "type": "boolean"
        },
        "is_moved": {
          "type": "integer",
          "format": "int32"
        },
        "is_mpim": {
          "type": "boolean"
        },
        "is_org_shared": {
          "type": "boolean"
        },
        "is_pending_ext_shared": {
          "type": "boolean"
        },
        "is_private": {
          "type": "boolean"
        },
        "is_read_only": {
          "type": "boolean"
        },
        "is_shared": {
          "type": "boolean"
        },
        "last_read": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "latest": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Messageobject"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[UW][A-Z0-9]{8}$"
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "name": {
          "type": "string"
        },
        "name_normalized": {
          "type": "string"
        },
        "num_members": {
          "type": "integer",
          "format": "int32"
        },
        "pending_shared": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[T][A-Z0-9]{8}$"
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "previous_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "purpose": {
          "$ref": "#/definitions/Purpose"
        },
        "topic": {
          "$ref": "#/definitions/Topic"
        },
        "unlinked": {
          "type": "integer",
          "format": "int32"
        },
        "unread_count": {
          "type": "integer",
          "format": "int32"
        },
        "unread_count_display": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "created",
        "creator",
        "id",
        "is_channel",
        "is_mpim",
        "is_org_shared",
        "is_private",
        "is_shared",
        "members",
        "name",
        "name_normalized",
        "purpose",
        "topic"
      ]
    },
    "FileCommentObject": {
      "title": "FileCommentObject",
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "created": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "pattern": "^Fc[A-Z0-9]{8}$"
        },
        "is_intro": {
          "type": "boolean"
        },
        "pinned_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Infoforapinneditem"
          }
        },
        "pinned_to": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[CGD][A-Z0-9]{8}$"
          }
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reactionobject"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "objs_dnd": {
      "title": "objs_dnd",
      "type": "object",
      "properties": {
        "dnd_enabled": {
          "type": "boolean"
        },
        "next_dnd_end_ts": {
          "type": "integer",
          "format": "int32"
        },
        "next_dnd_start_ts": {
          "type": "integer",
          "format": "int32"
        },
        "snooze_enabled": {
          "type": "boolean"
        }
      },
      "required": ["dnd_enabled", "next_dnd_end_ts", "next_dnd_start_ts", "snooze_enabled"]
    },
    "fileobject": {
      "title": "fileobject",
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[C][A-Z0-9]{8}$"
          },
          "uniqueItems": true
        },
        "comments_count": {
          "type": "integer",
          "format": "int32"
        },
        "created": {
          "type": "integer",
          "format": "int32"
        },
        "display_as_bot": {
          "type": "boolean"
        },
        "editable": {
          "type": "boolean"
        },
        "external_type": {
          "type": "string"
        },
        "filetype": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[G][A-Z0-9]{8}$"
          },
          "uniqueItems": true
        },
        "id": {
          "type": "string",
          "pattern": "^[F][A-Z0-9]{8}$"
        },
        "image_exif_rotation": {
          "type": "integer",
          "format": "int32"
        },
        "ims": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[D][A-Z0-9]{8}$"
          },
          "uniqueItems": true
        },
        "is_external": {
          "type": "boolean"
        },
        "is_public": {
          "type": "boolean"
        },
        "mimetype": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "original_h": {
          "type": "integer",
          "format": "int32"
        },
        "original_w": {
          "type": "integer",
          "format": "int32"
        },
        "permalink": {
          "type": "string"
        },
        "permalink_public": {
          "type": "string"
        },
        "pinned_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Infoforapinneditem"
          }
        },
        "pinned_to": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[CGD][A-Z0-9]{8}$"
          }
        },
        "pretty_type": {
          "type": "string"
        },
        "public_url_shared": {
          "type": "boolean"
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reactionobject"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_1024": {
          "type": "string"
        },
        "thumb_1024_h": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_1024_w": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_160": {
          "type": "string"
        },
        "thumb_360": {
          "type": "string"
        },
        "thumb_360_h": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_360_w": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_480": {
          "type": "string"
        },
        "thumb_480_h": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_480_w": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_64": {
          "type": "string"
        },
        "thumb_720": {
          "type": "string"
        },
        "thumb_720_h": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_720_w": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_80": {
          "type": "string"
        },
        "thumb_800": {
          "type": "string"
        },
        "thumb_800_h": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_800_w": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_960": {
          "type": "string"
        },
        "thumb_960_h": {
          "type": "integer",
          "format": "int32"
        },
        "thumb_960_w": {
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "url_private": {
          "type": "string"
        },
        "url_private_download": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Groupobject": {
      "title": "Groupobject",
      "type": "object",
      "properties": {
        "created": {
          "type": "integer",
          "format": "int32"
        },
        "creator": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "id": {
          "type": "string",
          "pattern": "^[G][A-Z0-9]{8}$"
        },
        "is_archived": {
          "type": "boolean"
        },
        "is_group": {
          "type": "boolean"
        },
        "is_moved": {
          "type": "integer",
          "format": "int32"
        },
        "is_mpim": {
          "type": "boolean"
        },
        "is_open": {
          "type": "boolean"
        },
        "is_pending_ext_shared": {
          "type": "boolean"
        },
        "last_read": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "latest": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Messageobject"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[UW][A-Z0-9]{8}$"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "name": {
          "type": "string"
        },
        "name_normalized": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "purpose": {
          "$ref": "#/definitions/Purpose"
        },
        "topic": {
          "$ref": "#/definitions/Topic"
        },
        "unread_count": {
          "type": "integer",
          "format": "int32"
        },
        "unread_count_display": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "created",
        "creator",
        "id",
        "is_group",
        "members",
        "name",
        "name_normalized",
        "purpose",
        "topic"
      ]
    },
    "IMObject": {
      "title": "IMObject",
      "type": "object",
      "properties": {
        "created": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "pattern": "^[D][A-Z0-9]{8}$"
        },
        "is_im": {
          "type": "boolean"
        },
        "is_org_shared": {
          "type": "boolean"
        },
        "is_user_deleted": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        }
      },
      "required": ["created", "id", "is_im", "is_org_shared", "is_user_deleted", "user"]
    },
    "objs_inviting_user": {
      "title": "objs_inviting_user",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "is_app_user": {
          "type": "boolean"
        },
        "is_restricted": {
          "type": "boolean"
        },
        "is_ultra_restricted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/objs_user_profile_shortest"
        },
        "real_name": {
          "type": "string"
        },
        "team_id": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "updated": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "id",
        "is_app_user",
        "is_restricted",
        "is_ultra_restricted",
        "name",
        "profile",
        "team_id",
        "updated"
      ]
    },
    "Messageobject": {
      "title": "Messageobject",
      "type": "object",
      "properties": {
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "bot_id": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^B[A-Z0-9]{8}$"
          }
        },
        "comment": {
          "$ref": "#/definitions/FileCommentObject"
        },
        "display_as_bot": {
          "type": "boolean"
        },
        "file": {
          "$ref": "#/definitions/fileobject"
        },
        "icons": {
          "$ref": "#/definitions/Icons"
        },
        "inviter": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "is_intro": {
          "type": "boolean"
        },
        "last_read": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "name": {
          "type": "string"
        },
        "old_name": {
          "type": "string"
        },
        "permalink": {
          "type": "string"
        },
        "pinned_to": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[CGD][A-Z0-9]{8}$"
          }
        },
        "purpose": {
          "type": "string"
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reactionobject"
          }
        },
        "replies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reply"
          }
        },
        "reply_count": {
          "type": "integer",
          "format": "int32"
        },
        "source_team": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "subscribed": {
          "type": "boolean"
        },
        "subtype": {
          "type": "string"
        },
        "team": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "text": {
          "type": "string"
        },
        "thread_ts": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "topic": {
          "type": "string"
        },
        "ts": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "type": {
          "type": "string"
        },
        "unread_count": {
          "type": "integer",
          "format": "int32"
        },
        "upload": {
          "type": "boolean"
        },
        "user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "user_profile": {
          "$ref": "#/definitions/objs_user_profile_short"
        },
        "user_team": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "username": {
          "type": "string"
        }
      },
      "required": ["text", "ts", "type"]
    },
    "pagingobjectforfiles": {
      "title": "pagingobjectforfiles",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pages": {
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": ["count", "page", "total"]
    },
    "Reactionobject": {
      "title": "Reactionobject",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[UW][A-Z0-9]{8}$"
          }
        }
      },
      "required": ["count", "name", "users"]
    },
    "TeamObject": {
      "title": "TeamObject",
      "type": "object",
      "properties": {
        "avatar_base_url": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "email_domain": {
          "type": "string"
        },
        "enterprise_id": {
          "type": "string"
        },
        "enterprise_name": {
          "type": "string"
        },
        "has_compliance_export": {
          "type": "boolean"
        },
        "icon": {
          "$ref": "#/definitions/Icon"
        },
        "id": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "messages_count": {
          "type": "integer",
          "format": "int32"
        },
        "msg_edit_window_mins": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "over_integrations_limit": {
          "type": "boolean"
        },
        "over_storage_limit": {
          "type": "boolean"
        },
        "plan": {
          "type": "string"
        },
        "prefs": {
          "$ref": "#/definitions/TeamPrefsObject"
        }
      },
      "required": ["domain", "email_domain", "icon", "id", "name"]
    },
    "objs_team_profile_field": {
      "title": "objs_team_profile_field",
      "type": "object",
      "properties": {
        "field_name": {
          "type": "string"
        },
        "hint": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "pattern": "^X[a-zA-Z0-9]{9}$"
        },
        "is_hidden": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ordering": {
          "type": "number",
          "format": "double"
        },
        "possible_values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "$ref": "#/definitions/Type"
        }
      },
      "required": ["hint", "id", "label", "options", "ordering", "type"]
    },
    "objs_user": {
      "title": "objs_user",
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{6}$"
        },
        "deleted": {
          "type": "boolean"
        },
        "has_2fa": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "is_admin": {
          "type": "boolean"
        },
        "is_app_user": {
          "type": "boolean"
        },
        "is_bot": {
          "type": "boolean"
        },
        "is_owner": {
          "type": "boolean"
        },
        "is_primary_owner": {
          "type": "boolean"
        },
        "is_restricted": {
          "type": "boolean"
        },
        "is_ultra_restricted": {
          "type": "boolean"
        },
        "locale": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "presence": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/Userprofileobject"
        },
        "real_name": {
          "type": "string"
        },
        "team_id": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "tz": {
          "type": "string"
        },
        "tz_label": {
          "type": "string"
        },
        "tz_offset": {
          "type": "number",
          "format": "double"
        },
        "updated": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "color",
        "deleted",
        "id",
        "is_admin",
        "is_app_user",
        "is_bot",
        "is_owner",
        "is_primary_owner",
        "is_restricted",
        "is_ultra_restricted",
        "name",
        "profile",
        "real_name",
        "team_id",
        "tz",
        "tz_label",
        "tz_offset",
        "updated"
      ]
    },
    "Userprofileobject": {
      "title": "Userprofileobject",
      "type": "object",
      "properties": {
        "always_active": {
          "type": "boolean"
        },
        "avatar_hash": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "display_name_normalized": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "fields": {
          "type": "object"
        },
        "first_name": {
          "type": "string"
        },
        "guest_channels": {
          "type": "string"
        },
        "image_192": {
          "type": "string"
        },
        "image_24": {
          "type": "string"
        },
        "image_32": {
          "type": "string"
        },
        "image_48": {
          "type": "string"
        },
        "image_512": {
          "type": "string"
        },
        "image_72": {
          "type": "string"
        },
        "image_original": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "real_name": {
          "type": "string"
        },
        "real_name_normalized": {
          "type": "string"
        },
        "skype": {
          "type": "string"
        },
        "status_emoji": {
          "type": "string"
        },
        "status_expiration": {
          "type": "integer",
          "format": "int32"
        },
        "status_text": {
          "type": "string"
        },
        "status_text_canonical": {
          "type": "string"
        },
        "team": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "avatar_hash",
        "display_name",
        "display_name_normalized",
        "image_192",
        "image_24",
        "image_32",
        "image_48",
        "image_72",
        "real_name",
        "real_name_normalized"
      ]
    },
    "objs_user_profile_short": {
      "title": "objs_user_profile_short",
      "type": "object",
      "properties": {
        "avatar_hash": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "image_72": {
          "type": "string"
        },
        "is_restricted": {
          "type": "boolean"
        },
        "is_ultra_restricted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "real_name": {
          "type": "string"
        },
        "team": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        }
      },
      "required": [
        "avatar_hash",
        "display_name",
        "first_name",
        "image_72",
        "is_restricted",
        "is_ultra_restricted",
        "name",
        "real_name",
        "team"
      ]
    },
    "objs_user_profile_shortest": {
      "title": "objs_user_profile_shortest",
      "type": "object",
      "properties": {
        "avatar_hash": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "image_72": {
          "type": "string"
        },
        "real_name": {
          "type": "string"
        },
        "team": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        }
      },
      "required": ["avatar_hash", "display_name", "first_name", "image_72", "real_name", "team"]
    },
    "UserPrefsobject": {
      "title": "UserPrefsobject",
      "type": "object",
      "properties": {
        "a11y_animations": {
          "type": "boolean"
        },
        "all_channels_loud": {
          "type": "boolean"
        },
        "all_notifications_prefs": {
          "type": "string"
        },
        "all_unreads_sort_order": {
          "type": "string"
        },
        "allow_calls_to_set_current_status": {
          "type": "boolean"
        },
        "allow_cmd_tab_iss": {
          "type": "boolean"
        },
        "analytics_upsell_coachmark_seen": {
          "type": "boolean"
        },
        "arrow_history": {
          "type": "boolean"
        },
        "at_channel_suppressed_channels": {
          "type": "string"
        },
        "box_enabled": {
          "type": "boolean"
        },
        "channel_sort": {
          "type": "string"
        },
        "client_logs_pri": {
          "type": "string"
        },
        "color_names_in_list": {
          "type": "boolean"
        },
        "confirm_clear_all_unreads": {
          "type": "boolean"
        },
        "confirm_sh_call_start": {
          "type": "boolean"
        },
        "confirm_user_marked_away": {
          "type": "boolean"
        },
        "convert_emoticons": {
          "type": "boolean"
        },
        "display_display_names": {
          "type": "boolean"
        },
        "display_real_names_override": {
          "type": "integer",
          "format": "int32"
        },
        "dnd_enabled": {
          "type": "boolean"
        },
        "dnd_end_hour": {
          "type": "string"
        },
        "dnd_start_hour": {
          "type": "string"
        },
        "dropbox_enabled": {
          "type": "boolean"
        },
        "email_alerts": {
          "type": "string"
        },
        "email_alerts_sleep_until": {
          "type": "integer",
          "format": "int32"
        },
        "email_developer": {
          "type": "boolean"
        },
        "email_changelog": {
          "type": "boolean"
        },
        "email_misc": {
          "type": "boolean"
        },
        "email_offers": {
          "type": "boolean"
        },
        "email_research": {
          "type": "boolean"
        },
        "email_tips": {
          "type": "boolean"
        },
        "email_weekly": {
          "type": "boolean"
        },
        "emoji_autocomplete_big": {
          "type": "boolean"
        },
        "emoji_mode": {
          "type": "string"
        },
        "emoji_use": {
          "type": "string"
        },
        "enable_react_emoji_picker": {
          "type": "boolean"
        },
        "enable_unread_view": {
          "type": "boolean"
        },
        "enhanced_debugging": {
          "type": "boolean"
        },
        "ent_org_wide_channels_sidebar": {
          "type": "boolean"
        },
        "enter_is_special_in_tbt": {
          "type": "boolean"
        },
        "enterprise_excluded_app_teams": {
          "type": "string"
        },
        "enterprise_mdm_custom_msg": {
          "type": "string"
        },
        "enterprise_migration_seen": {
          "type": "boolean"
        },
        "expand_inline_imgs": {
          "type": "boolean"
        },
        "expand_internal_inline_imgs": {
          "type": "boolean"
        },
        "expand_non_media_attachments": {
          "type": "boolean"
        },
        "expand_snippets": {
          "type": "boolean"
        },
        "f_key_search": {
          "type": "boolean"
        },
        "flannel_server_pool": {
          "type": "string"
        },
        "folder_data": {
          "type": "string"
        },
        "folders_enabled": {
          "type": "boolean"
        },
        "frecency_ent_jumper": {
          "type": "string"
        },
        "frecency_ent_jumper_backup": {
          "type": "string"
        },
        "frecency_jumper": {
          "type": "string"
        },
        "fuller_timestamps": {
          "type": "boolean"
        },
        "gdrive_authed": {
          "type": "boolean"
        },
        "gdrive_enabled": {
          "type": "boolean"
        },
        "graphic_emoticons": {
          "type": "boolean"
        },
        "growls_enabled": {
          "type": "boolean"
        },
        "growth_all_banners_prefs": {
          "type": "string"
        },
        "growth_msg_limit_approaching_cta_count": {
          "type": "integer",
          "format": "int32"
        },
        "growth_msg_limit_approaching_cta_ts": {
          "type": "integer",
          "format": "int32"
        },
        "growth_msg_limit_long_reached_cta_count": {
          "type": "integer",
          "format": "int32"
        },
        "growth_msg_limit_long_reached_cta_last_ts": {
          "type": "integer",
          "format": "int32"
        },
        "growth_msg_limit_reached_cta_count": {
          "type": "integer",
          "format": "int32"
        },
        "growth_msg_limit_reached_cta_last_ts": {
          "type": "integer",
          "format": "int32"
        },
        "growth_msg_limit_sixty_day_banner_cta_count": {
          "type": "integer",
          "format": "int32"
        },
        "growth_msg_limit_sixty_day_banner_cta_last_ts": {
          "type": "integer",
          "format": "int32"
        },
        "has_created_channel": {
          "type": "boolean"
        },
        "has_invited": {
          "type": "boolean"
        },
        "has_recently_shared_a_channel": {
          "type": "boolean"
        },
        "has_searched": {
          "type": "boolean"
        },
        "has_uploaded": {
          "type": "boolean"
        },
        "hide_hex_swatch": {
          "type": "boolean"
        },
        "hide_user_group_info_pane": {
          "type": "boolean"
        },
        "highlight_words": {
          "type": "string"
        },
        "in_interactive_mas_migration_flow": {
          "type": "boolean"
        },
        "intro_to_apps_message_seen": {
          "type": "boolean"
        },
        "jumbomoji": {
          "type": "boolean"
        },
        "k_key_omnibox": {
          "type": "boolean"
        },
        "k_key_omnibox_auto_hide_count": {
          "type": "integer",
          "format": "int32"
        },
        "keyboard": {
          "type": "string"
        },
        "last_seen_at_channel_warning": {
          "type": "integer",
          "format": "int32"
        },
        "last_snippet_type": {
          "type": "string"
        },
        "last_tos_acknowledged": {
          "type": "string"
        },
        "lessons_enabled": {
          "type": "boolean"
        },
        "load_lato_2": {
          "type": "boolean"
        },
        "locale": {
          "type": "string"
        },
        "locales_enabled": {
          "$ref": "#/definitions/LocalesEnabled"
        },
        "loud_channels": {
          "type": "string"
        },
        "loud_channels_set": {
          "type": "string"
        },
        "ls_disabled": {
          "type": "boolean"
        },
        "mac_ssb_bounce": {
          "type": "string"
        },
        "mac_ssb_bullet": {
          "type": "boolean"
        },
        "mark_msgs_read_immediately": {
          "type": "boolean"
        },
        "measure_css_usage": {
          "type": "boolean"
        },
        "mentions_exclude_at_channels": {
          "type": "boolean"
        },
        "mentions_exclude_at_user_groups": {
          "type": "boolean"
        },
        "messages_theme": {
          "type": "string"
        },
        "msg_input_send_btn": {
          "type": "boolean"
        },
        "msg_input_send_btn_auto_set": {
          "type": "boolean"
        },
        "mute_sounds": {
          "type": "boolean"
        },
        "muted_channels": {
          "type": "string"
        },
        "never_channels": {
          "type": "string"
        },
        "new_msg_snd": {
          "type": "string"
        },
        "newxp_seen_last_message": {
          "type": "integer",
          "format": "int32"
        },
        "no_created_overlays": {
          "type": "boolean"
        },
        "no_invites_widget_in_sidebar": {
          "type": "boolean"
        },
        "no_joined_overlays": {
          "type": "boolean"
        },
        "no_macelectron_banner": {
          "type": "boolean"
        },
        "no_macssb1_banner": {
          "type": "boolean"
        },
        "no_macssb2_banner": {
          "type": "boolean"
        },
        "no_omnibox_in_channels": {
          "type": "boolean"
        },
        "no_text_in_notifications": {
          "type": "boolean"
        },
        "no_winssb1_banner": {
          "type": "boolean"
        },
        "obey_inline_img_limit": {
          "type": "boolean"
        },
        "onboarding_cancelled": {
          "type": "boolean"
        },
        "onboarding_slackbot_conversation_step": {
          "type": "integer",
          "format": "int32"
        },
        "overloaded_message_enabled": {
          "type": "boolean"
        },
        "pagekeys_handled": {
          "type": "boolean"
        },
        "posts_formatting_guide": {
          "type": "boolean"
        },
        "preferred_skin_tone": {
          "type": "string"
        },
        "privacy_policy_seen": {
          "type": "boolean"
        },
        "prompted_for_email_disabling": {
          "type": "boolean"
        },
        "purchaser": {
          "type": "boolean"
        },
        "push_at_channel_suppressed_channels": {
          "type": "string"
        },
        "push_dm_alert": {
          "type": "boolean"
        },
        "push_everything": {
          "type": "boolean"
        },
        "push_idle_wait": {
          "type": "integer",
          "format": "int32"
        },
        "push_loud_channels": {
          "type": "string"
        },
        "push_loud_channels_set": {
          "type": "string"
        },
        "push_mention_alert": {
          "type": "boolean"
        },
        "push_mention_channels": {
          "type": "string"
        },
        "push_show_preview": {
          "type": "boolean"
        },
        "push_sound": {
          "type": "string"
        },
        "require_at": {
          "type": "boolean"
        },
        "search_exclude_bots": {
          "type": "boolean"
        },
        "search_exclude_channels": {
          "type": "string"
        },
        "search_only_current_team": {
          "type": "boolean"
        },
        "search_only_my_channels": {
          "type": "boolean"
        },
        "search_sort": {
          "type": "string"
        },
        "seen_administration_menu": {
          "type": "boolean"
        },
        "seen_app_space_coachmark": {
          "type": "boolean"
        },
        "seen_app_space_tutorial": {
          "type": "boolean"
        },
        "seen_calls_interactive_coachmark": {
          "type": "boolean"
        },
        "seen_channel_browser_admin_coachmark": {
          "type": "boolean"
        },
        "seen_custom_status_badge": {
          "type": "boolean"
        },
        "seen_custom_status_callout": {
          "type": "boolean"
        },
        "seen_domain_invite_reminder": {
          "type": "boolean"
        },
        "seen_emoji_update_overlay_coachmark": {
          "type": "boolean"
        },
        "seen_gdrive_coachmark": {
          "type": "boolean"
        },
        "seen_guest_admin_slackbot_announcement": {
          "type": "boolean"
        },
        "seen_highlights_arrows_coachmark": {
          "type": "boolean"
        },
        "seen_highlights_coachmark": {
          "type": "boolean"
        },
        "seen_highlights_warm_welcome": {
          "type": "boolean"
        },
        "seen_intl_channel_names_coachmark": {
          "type": "boolean"
        },
        "seen_japanese_locale_change_message": {
          "type": "boolean"
        },
        "seen_keyboard_shortcuts_coachmark": {
          "type": "boolean"
        },
        "seen_locale_change_message": {
          "type": "integer",
          "format": "int32"
        },
        "seen_member_invite_reminder": {
          "type": "boolean"
        },
        "seen_name_tagging_coachmark": {
          "type": "boolean"
        },
        "seen_onboarding_banner": {
          "type": "boolean"
        },
        "seen_onboarding_channels": {
          "type": "boolean"
        },
        "seen_onboarding_direct_messages": {
          "type": "boolean"
        },
        "seen_onboarding_invites": {
          "type": "boolean"
        },
        "seen_onboarding_private_groups": {
          "type": "boolean"
        },
        "seen_onboarding_recent_mentions": {
          "type": "boolean"
        },
        "seen_onboarding_search": {
          "type": "boolean"
        },
        "seen_onboarding_slackbot_conversation": {
          "type": "boolean"
        },
        "seen_onboarding_starred_items": {
          "type": "boolean"
        },
        "seen_onboarding_start": {
          "type": "boolean"
        },
        "seen_shared_channels_coachmark": {
          "type": "boolean"
        },
        "seen_shared_channels_opt_in_change_message": {
          "type": "boolean"
        },
        "seen_shdep_slackbot_message": {
          "type": "boolean"
        },
        "seen_single_emoji_msg": {
          "type": "boolean"
        },
        "seen_ssb_prompt": {
          "type": "boolean"
        },
        "seen_threads_notification_banner": {
          "type": "boolean"
        },
        "seen_unread_view_coachmark": {
          "type": "boolean"
        },
        "seen_welcome_2": {
          "type": "boolean"
        },
        "separate_private_channels": {
          "type": "boolean"
        },
        "separate_shared_channels": {
          "type": "boolean"
        },
        "shdep_promo_code_submitted": {
          "type": "boolean"
        },
        "show_all_skin_tones": {
          "type": "boolean"
        },
        "show_ent_onboarding": {
          "type": "boolean"
        },
        "show_jumper_scores": {
          "type": "boolean"
        },
        "show_memory_instrument": {
          "type": "boolean"
        },
        "show_sidebar_quickswitcher_button": {
          "type": "boolean"
        },
        "show_typing": {
          "type": "boolean"
        },
        "sidebar_behavior": {
          "type": "string"
        },
        "sidebar_theme": {
          "type": "string"
        },
        "sidebar_theme_custom_values": {
          "type": "string"
        },
        "snippet_editor_wrap_long_lines": {
          "type": "boolean"
        },
        "spaces_new_xp_banner_dismissed": {
          "type": "boolean"
        },
        "ss_emojis": {
          "type": "boolean"
        },
        "ssb_space_window": {
          "type": "string"
        },
        "start_scroll_at_oldest": {
          "type": "boolean"
        },
        "tab_ui_return_selects": {
          "type": "boolean"
        },
        "threads_everything": {
          "type": "boolean"
        },
        "time24": {
          "type": "boolean"
        },
        "two_factor_auth_enabled": {
          "type": "boolean"
        },
        "two_factor_backup_type": {
          "type": "string"
        },
        "two_factor_type": {
          "type": "string"
        },
        "tz": {
          "type": "string"
        },
        "user_colors": {
          "type": "string"
        },
        "webapp_spellcheck": {
          "type": "boolean"
        },
        "welcome_message_hidden": {
          "type": "boolean"
        },
        "whats_new_read": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TeamPrefsObject": {
      "title": "TeamPrefsObject",
      "type": "object",
      "properties": {
        "all_users_can_purchase": {
          "type": "boolean"
        },
        "allow_calls": {
          "type": "boolean"
        },
        "allow_calls_interactive_screen_sharing": {
          "type": "boolean"
        },
        "allow_message_deletion": {
          "type": "boolean"
        },
        "allow_retention_override": {
          "type": "boolean"
        },
        "allow_shared_channel_perms_override": {
          "type": "boolean"
        },
        "app_whitelist_enabled": {
          "type": "boolean"
        },
        "auth_mode": {
          "type": "string"
        },
        "calling_app_name": {
          "type": "string"
        },
        "can_receive_shared_channels_invites": {
          "type": "boolean"
        },
        "compliance_export_start": {
          "type": "integer",
          "format": "int32"
        },
        "custom_status_default_emoji": {
          "type": "string"
        },
        "custom_status_presets": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "custom_tos": {
          "type": "boolean"
        },
        "default_channels": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[CGD][A-Z0-9]{8}$"
          }
        },
        "default_rxns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disable_email_ingestion": {
          "type": "boolean"
        },
        "disable_file_deleting": {
          "type": "boolean"
        },
        "disable_file_editing": {
          "type": "boolean"
        },
        "disable_file_uploads": {
          "type": "string"
        },
        "disallow_public_file_urls": {
          "type": "boolean"
        },
        "discoverable": {
          "type": "string"
        },
        "display_email_addresses": {
          "type": "boolean"
        },
        "display_real_names": {
          "type": "boolean"
        },
        "dm_retention_duration": {
          "type": "integer",
          "format": "int32"
        },
        "dm_retention_type": {
          "type": "integer",
          "format": "int32"
        },
        "dnd_enabled": {
          "type": "boolean"
        },
        "dnd_end_hour": {
          "type": "string"
        },
        "dnd_start_hour": {
          "type": "string"
        },
        "enable_shared_channels": {
          "type": "integer",
          "format": "int32"
        },
        "enterprise_default_channels": {
          "type": "object"
        },
        "enterprise_mandatory_channels": {
          "type": "object"
        },
        "enterprise_mdm_date_enabled": {
          "type": "integer",
          "format": "int32"
        },
        "enterprise_mdm_level": {
          "type": "integer",
          "format": "int32"
        },
        "enterprise_team_creation_request": {
          "$ref": "#/definitions/EnterpriseTeamCreationRequest"
        },
        "file_limit_whitelisted": {
          "type": "boolean"
        },
        "file_retention_duration": {
          "type": "integer",
          "format": "int32"
        },
        "file_retention_type": {
          "type": "integer",
          "format": "int32"
        },
        "gdrive_enabled_team": {
          "type": "boolean"
        },
        "group_retention_duration": {
          "type": "integer",
          "format": "int32"
        },
        "group_retention_type": {
          "type": "integer",
          "format": "int32"
        },
        "hide_referers": {
          "type": "boolean"
        },
        "invites_limit": {
          "type": "boolean"
        },
        "invites_only_admins": {
          "type": "boolean"
        },
        "locale": {
          "type": "string"
        },
        "loud_channel_mentions_limit": {
          "type": "integer",
          "format": "int32"
        },
        "msg_edit_window_mins": {
          "type": "integer",
          "format": "int32"
        },
        "retention_duration": {
          "type": "integer",
          "format": "int32"
        },
        "retention_type": {
          "type": "integer",
          "format": "int32"
        },
        "show_join_leave": {
          "type": "boolean"
        },
        "uses_customized_custom_status_presets": {
          "type": "boolean"
        },
        "warn_before_at_channel": {
          "type": "string"
        },
        "who_can_archive_channels": {
          "type": "string"
        },
        "who_can_at_channel": {
          "type": "string"
        },
        "who_can_at_everyone": {
          "type": "string"
        },
        "who_can_change_team_profile": {
          "type": "string"
        },
        "who_can_create_channels": {
          "type": "string"
        },
        "who_can_create_delete_user_groups": {
          "type": "string"
        },
        "who_can_create_groups": {
          "type": "string"
        },
        "who_can_create_shared_channels": {
          "type": "string"
        },
        "who_can_edit_user_groups": {
          "type": "string"
        },
        "who_can_kick_channels": {
          "type": "string"
        },
        "who_can_kick_groups": {
          "type": "string"
        },
        "who_can_manage_guests": {
          "$ref": "#/definitions/WhoCanManageGuests"
        },
        "who_can_manage_integrations": {
          "$ref": "#/definitions/WhoCanManageIntegrations"
        },
        "who_can_manage_shared_channels": {
          "$ref": "#/definitions/WhoCanManageSharedChannels"
        },
        "who_can_post_general": {
          "type": "string"
        },
        "who_can_post_in_shared_channels": {
          "$ref": "#/definitions/WhoCanPostInSharedChannels"
        },
        "who_has_team_visibility": {
          "type": "string"
        }
      },
      "required": ["default_channels"]
    },
    "APImethod:users.getPresence": {
      "title": "APImethod:users.getPresence",
      "description": "Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65",
      "example": {
        "ok": "true",
        "presence": "active"
      },
      "type": "object",
      "properties": {
        "auto_away": {
          "type": "boolean"
        },
        "connection_count": {
          "type": "integer",
          "format": "int32"
        },
        "last_activity": {
          "type": "integer",
          "format": "int32"
        },
        "manual_away": {
          "type": "boolean"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "online": {
          "type": "boolean"
        },
        "presence": {
          "type": "string"
        }
      },
      "required": ["ok", "presence"]
    },
    "api.permissions.scopes.listsuccessschema": {
      "title": "api.permissions.scopes.listsuccessschema",
      "description": "Schema for successful response api.permissions.scopes.list method",
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "scopes": {
          "$ref": "#/definitions/Scopes"
        }
      },
      "required": ["ok", "scopes"]
    },
    "api.testerrorschema": {
      "title": "api.testerrorschema",
      "description": "Schema for error response api.test method",
      "example": {
        "args": {
          "error": "my_error"
        },
        "error": "my_error",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "api.testsuccessschema": {
      "title": "api.testsuccessschema",
      "description": "Schema for successful response api.test method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "apps.permissions.requesterrorschema": {
      "title": "apps.permissions.requesterrorschema",
      "description": "Schema for error response from apps.permissions.request method",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "apps.permissions.requestschema": {
      "title": "apps.permissions.requestschema",
      "description": "Schema for successful response from apps.permissions.request method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "apps.permissions.resources.listerrorschema": {
      "title": "apps.permissions.resources.listerrorschema",
      "description": "Schema for error response from apps.permissions.resources.list method",
      "example": {
        "error": "invalid_cursor",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error1"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "apps.permissions.resources.listsuccessschema": {
      "title": "apps.permissions.resources.listsuccessschema",
      "description": "Schema for successful response apps.permissions.resources.list method",
      "example": {
        "ok": "true",
        "resources": [
          {
            "id": "T0DES3UAN",
            "type": "team"
          },
          {
            "id": "D024BFF1M",
            "type": "app_home"
          },
          {
            "id": "C024BE91L",
            "type": "channel"
          }
        ],
        "response_metadata": {
          "next_cursor": "dGVhbTpDMUg5UkVTR0w="
        }
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Resource"
          }
        },
        "response_metadata": {
          "$ref": "#/definitions/ResponseMetadata"
        }
      },
      "required": ["ok", "resources"]
    },
    "apps.permissions.scopes.listerrorschema": {
      "title": "apps.permissions.scopes.listerrorschema",
      "description": "Schema for error response from apps.permissions.scopes.list method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error2"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "Attachment": {
      "title": "Attachment",
      "type": "object",
      "properties": {
        "fallback": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "image_bytes": {
          "type": "integer",
          "format": "int32"
        },
        "image_height": {
          "type": "integer",
          "format": "int32"
        },
        "image_url": {
          "type": "string"
        },
        "image_width": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": ["id"]
    },
    "auth.revokeerrorschema": {
      "title": "auth.revokeerrorschema",
      "description": "Schema for error response from auth.revoke method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error3"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "auth.revokeschema": {
      "title": "auth.revokeschema",
      "description": "Schema for successful response from auth.revoke method",
      "example": {
        "ok": "true",
        "revoked": true
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "revoked": {
          "type": "boolean"
        }
      },
      "required": ["ok", "revoked"]
    },
    "auth.testerrorschema": {
      "title": "auth.testerrorschema",
      "description": "Schema for error response auth.test method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error4"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "auth.testsuccessschema": {
      "title": "auth.testsuccessschema",
      "description": "Schema for successful response auth.test method",
      "example": {
        "ok": "true",
        "team": "Subarachnoid Workspace",
        "team_id": "T12345678",
        "url": "https://subarachnoid.slack.com/",
        "user": "grace",
        "user_id": "W12345678"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "team": {
          "type": "string"
        },
        "team_id": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "url": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "user_id": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        }
      },
      "required": ["ok", "team", "team_id", "url", "user", "user_id"]
    },
    "Bot": {
      "title": "Bot",
      "type": "object",
      "properties": {
        "WINDOW_ID": {
          "type": "string",
          "pattern": "^A[A-Z0-9]{8}$"
        },
        "deleted": {
          "type": "boolean"
        },
        "icons": {
          "$ref": "#/definitions/Icons1"
        },
        "id": {
          "type": "string",
          "pattern": "^B[A-Z0-9]{8}$"
        },
        "name": {
          "type": "string"
        },
        "updated": {
          "type": "integer",
          "format": "int32"
        },
        "user_id": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        }
      },
      "required": ["WINDOW_ID", "deleted", "icons", "id", "name", "updated"]
    },
    "bots.infoerrorschema": {
      "title": "bots.infoerrorschema",
      "description": "Schema for error response from bots.info method",
      "example": {
        "error": "bot_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error5"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "bots.infoschema": {
      "title": "bots.infoschema",
      "description": "Schema for successful response from bots.info method",
      "example": {
        "bot": {
          "WINDOW_ID": "A061BLERW",
          "deleted": false,
          "icons": {
            "image_36": "https://...",
            "image_48": "https://...",
            "image_72": "https://..."
          },
          "id": "B061F7JQ1",
          "name": "commandeer",
          "updated": 1449272004
        },
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "bot": {
          "$ref": "#/definitions/Bot"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["bot", "ok"]
    },
    "Channel": {
      "title": "Channel",
      "type": "object",
      "properties": {
        "created": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "pattern": "^[D][A-Z0-9]{8}$"
        },
        "is_im": {
          "type": "boolean"
        },
        "is_open": {
          "type": "boolean"
        },
        "last_read": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "latest": {
          "$ref": "#/definitions/Messageobject"
        },
        "unread_count": {
          "type": "number",
          "format": "double"
        },
        "unread_count_display": {
          "type": "number",
          "format": "double"
        },
        "user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        }
      },
      "required": ["id"]
    },
    "channels.archiveerrorschema": {
      "title": "channels.archiveerrorschema",
      "description": "Schema for error response channels.archive method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error6"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.archivesuccessschema": {
      "title": "channels.archivesuccessschema",
      "description": "Schema for successful response from channels.archive method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "channels.createerrorschema": {
      "title": "channels.createerrorschema",
      "description": "Schema for successful response channels.create method",
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/ChannelObject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "channels.createerrorschema1": {
      "title": "channels.createerrorschema1",
      "description": "Schema for error response channels.create method",
      "example": {
        "detail": "Value passed for `name` contained unallowed special characters.",
        "error": "invalid_name_specials",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error7"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.historyerrorschema": {
      "title": "channels.historyerrorschema",
      "description": "Schema for error response channels.history method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error8"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.historysuccessschema": {
      "title": "channels.historysuccessschema",
      "description": "Schema for successful response channels.history method",
      "type": "object",
      "properties": {
        "has_more": {
          "type": "boolean"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Messageobject"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["has_more", "messages", "ok"]
    },
    "channels.infoerrorschema": {
      "title": "channels.infoerrorschema",
      "description": "Schema for error response channels.info method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error9"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.infosuccessschema": {
      "title": "channels.infosuccessschema",
      "description": "Schema for successful response channels.info method",
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/ChannelObject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "channels.inviteerrorschema": {
      "title": "channels.inviteerrorschema",
      "description": "Schema for successful response channels.invite method",
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/ChannelObject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "channels.inviteerrorschema1": {
      "title": "channels.inviteerrorschema1",
      "description": "Schema for error response channels.invite method",
      "example": {
        "error": "cant_invite",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error10"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.joinerrorschema": {
      "title": "channels.joinerrorschema",
      "description": "Schema for error response from channels.join method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error11"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.joinschema": {
      "title": "channels.joinschema",
      "description": "Schema for successful response from channels.join method",
      "type": "object",
      "properties": {
        "already_in_channel": {
          "type": "boolean"
        },
        "channel": {
          "$ref": "#/definitions/ChannelObject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "channels.kickerrorschema": {
      "title": "channels.kickerrorschema",
      "description": "Schema for error response from channels.kick method",
      "example": {
        "error": "not_in_channel",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error12"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.kickschema": {
      "title": "channels.kickschema",
      "description": "Schema for successful response from channels.kick method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "channels.listerrorschema": {
      "title": "channels.listerrorschema",
      "description": "Schema for error response channels.list method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error13"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.listsuccessschema": {
      "title": "channels.listsuccessschema",
      "description": "Schema for successful response channels.list method",
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelObject"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channels", "ok"]
    },
    "channels.markerrorschema": {
      "title": "channels.markerrorschema",
      "description": "Schema for error response channels.mark method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error14"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.marksuccessschema": {
      "title": "channels.marksuccessschema",
      "description": "Schema for successful response channels.mark method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "channels.renameerrorschema": {
      "title": "channels.renameerrorschema",
      "description": "Schema for error response from channels.rename method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error15"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.renameschema": {
      "title": "channels.renameschema",
      "description": "Schema for successful response from channels.rename method",
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/ChannelObject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "channels.setPurposeerrorschema": {
      "title": "channels.setPurposeerrorschema",
      "description": "Schema for error response from channels.setPurpose method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error16"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "channels.setPurposeschema": {
      "title": "channels.setPurposeschema",
      "description": "Schema for successful response from channels.setPurpose method",
      "example": {
        "ok": "true",
        "purpose": "My special purpose"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "purpose": {
          "type": "string"
        }
      },
      "required": ["ok", "purpose"]
    },
    "chat.deleteerrorschema": {
      "title": "chat.deleteerrorschema",
      "description": "Schema for error response from chat.delete method",
      "example": {
        "error": "message_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error17"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "chat.deletesuccessschema": {
      "title": "chat.deletesuccessschema",
      "description": "Schema for successful response of chat.delete method",
      "example": {
        "channel": "C024BE91L",
        "ok": "true",
        "ts": "1401383885.000061"
      },
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "pattern": "^[CGD][A-Z0-9]{8}$"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "ts": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        }
      },
      "required": ["channel", "ok", "ts"]
    },
    "chat.getPermalinkerrorschema": {
      "title": "chat.getPermalinkerrorschema",
      "description": "Schema for error response from chat.getPermalink method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error18"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "chat.getPermalinksuccessschema": {
      "title": "chat.getPermalinksuccessschema",
      "description": "Schema for successful response chat.getPermalink",
      "example": {
        "channel": "C1H9RESGA",
        "ok": "true",
        "permalink": "https://ghostbusters.slack.com/archives/C1H9RESGA/p135854651500008"
      },
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "pattern": "^[CGD][A-Z0-9]{8}$"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "permalink": {
          "type": "string"
        }
      },
      "required": ["channel", "ok", "permalink"]
    },
    "chat.postEphemeralerrorschema": {
      "title": "chat.postEphemeralerrorschema",
      "description": "Schema for error response from chat.postEphemeral method",
      "example": {
        "error": "user_not_in_channel",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error19"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "chat.postEphemeralsuccessschema": {
      "title": "chat.postEphemeralsuccessschema",
      "description": "Schema for successful response from chat.postEphemeral method",
      "example": {
        "message_ts": "1502210682.580145",
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "message_ts": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["message_ts", "ok"]
    },
    "chat.postMessageerrorschema": {
      "title": "chat.postMessageerrorschema",
      "description": "Schema for error response chat.postMessage method",
      "example": {
        "error": "too_many_attachments",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error20"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "chat.postMessagesuccessschema": {
      "title": "chat.postMessagesuccessschema",
      "description": "Schema for successful response of chat.postMessage method",
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "pattern": "^[CGD][A-Z0-9]{8}$"
        },
        "message": {
          "$ref": "#/definitions/Messageobject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "ts": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        }
      },
      "required": ["channel", "message", "ok", "ts"]
    },
    "chat.unfurlerrorschema": {
      "title": "chat.unfurlerrorschema",
      "description": "Schema for error response from chat.unfurl method",
      "example": {
        "error": "cannot_unfurl_url",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error21"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "chat.unfurlsuccessschema": {
      "title": "chat.unfurlsuccessschema",
      "description": "Schema for successful response from chat.unfurl method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "chat.updateerrorschema": {
      "title": "chat.updateerrorschema",
      "description": "Schema for error response chat.update method",
      "example": {
        "error": "cant_update_message",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error22"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "chat.updatesuccessschema": {
      "title": "chat.updatesuccessschema",
      "description": "Schema for successful response of chat.update method",
      "example": {
        "channel": "C024BE91L",
        "ok": "true",
        "text": "Updated text you carefully authored",
        "ts": "1401383885.000061"
      },
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "pattern": "^[CGD][A-Z0-9]{8}$"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "text": {
          "type": "string"
        },
        "ts": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        }
      },
      "required": ["channel", "ok", "text", "ts"]
    },
    "Conversationobject": {
      "title": "Conversationobject",
      "type": "object",
      "properties": {
        "accepted_user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "created": {
          "type": "integer",
          "format": "int32"
        },
        "creator": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "display_counts": {
          "$ref": "#/definitions/DisplayCounts"
        },
        "has_pins": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "pattern": "^[CGD][A-Z0-9]{8}$"
        },
        "is_archived": {
          "type": "boolean"
        },
        "is_channel": {
          "type": "boolean"
        },
        "is_ext_shared": {
          "type": "boolean"
        },
        "is_general": {
          "type": "boolean"
        },
        "is_group": {
          "type": "boolean"
        },
        "is_im": {
          "type": "boolean"
        },
        "is_member": {
          "type": "boolean"
        },
        "is_moved": {
          "type": "integer",
          "format": "int32"
        },
        "is_mpim": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "is_open": {
          "type": "boolean"
        },
        "is_org_shared": {
          "type": "boolean"
        },
        "is_pending_ext_shared": {
          "type": "boolean"
        },
        "is_private": {
          "type": "boolean"
        },
        "is_read_only": {
          "type": "boolean"
        },
        "is_shared": {
          "type": "boolean"
        },
        "last_read": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "latest": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Messageobject"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[UW][A-Z0-9]{8}$"
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "name": {
          "type": "string"
        },
        "name_normalized": {
          "type": "string"
        },
        "num_members": {
          "type": "integer",
          "format": "int32"
        },
        "pending_shared": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[T][A-Z0-9]{8}$"
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "pin_count": {
          "type": "integer",
          "format": "int32"
        },
        "previous_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "purpose": {
          "$ref": "#/definitions/Purpose"
        },
        "shared_team_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[T][A-Z0-9]{8}$"
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "shares": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Share"
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "timezone_count": {
          "type": "integer",
          "format": "int32"
        },
        "topic": {
          "$ref": "#/definitions/Topic"
        },
        "unlinked": {
          "type": "integer",
          "format": "int32"
        },
        "unread_count": {
          "type": "integer",
          "format": "int32"
        },
        "unread_count_display": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        }
      },
      "required": [
        "created",
        "creator",
        "id",
        "is_archived",
        "is_channel",
        "is_general",
        "is_group",
        "is_im",
        "is_mpim",
        "is_org_shared",
        "is_private",
        "is_shared",
        "name",
        "name_normalized",
        "purpose",
        "topic"
      ]
    },
    "conversations.archiveerrorschema": {
      "title": "conversations.archiveerrorschema",
      "description": "Schema for error response from conversations.archive method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error23"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.archivesuccessschema": {
      "title": "conversations.archivesuccessschema",
      "description": "Schema for successful response conversations.archive method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "conversations.closeerrorschema": {
      "title": "conversations.closeerrorschema",
      "description": "Schema for error response from conversations.close method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error24"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.closesuccessschema": {
      "title": "conversations.closesuccessschema",
      "description": "Schema for successful response conversations.close method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "already_closed": {
          "type": "boolean"
        },
        "no_op": {
          "type": "boolean"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "conversations.createerrorschema": {
      "title": "conversations.createerrorschema",
      "description": "Schema for error response from conversations.create method",
      "example": {
        "error": "name_taken",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "detail": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/Error25"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.createsuccessschema": {
      "title": "conversations.createsuccessschema",
      "description": "Schema for successful response conversations.create method",
      "type": "object",
      "properties": {
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conversationobject"
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "conversations.historyerrorschema": {
      "title": "conversations.historyerrorschema",
      "description": "Schema for error response from conversations.history method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error26"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.historysuccessschema": {
      "title": "conversations.historysuccessschema",
      "description": "Schema for successful response from conversations.history method",
      "type": "object",
      "properties": {
        "has_more": {
          "type": "boolean"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Messageobject"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "pin_count": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": ["has_more", "messages", "ok", "pin_count"]
    },
    "conversations.infoerrorschema": {
      "title": "conversations.infoerrorschema",
      "description": "Schema for error response from conversations.info method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error27"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.infosuccessschema": {
      "title": "conversations.infosuccessschema",
      "description": "Schema for successful response conversations.info",
      "type": "object",
      "properties": {
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conversationobject"
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "conversations.inviteerrorschema": {
      "title": "conversations.inviteerrorschema",
      "description": "Schema for successful response from conversations.invite method",
      "type": "object",
      "properties": {
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conversationobject"
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "conversations.inviteerrorschema1": {
      "title": "conversations.inviteerrorschema1",
      "description": "Schema for error response from conversations.invite method",
      "example": {
        "error": "method_not_supported_for_channel_type",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error28"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorsisreturnedwhenanerrorassociatesanuser"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["ok"]
    },
    "conversations.joinerrorschema": {
      "title": "conversations.joinerrorschema",
      "description": "Schema for error response from conversations.join method",
      "example": {
        "error": "is_archived",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error30"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.joinsuccessschema": {
      "title": "conversations.joinsuccessschema",
      "description": "Schema for successful response from conversations.join method",
      "type": "object",
      "properties": {
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conversationobject"
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "response_metadata": {
          "$ref": "#/definitions/Responsemetadata1"
        },
        "warning": {
          "type": "string"
        }
      },
      "required": ["channel", "ok"]
    },
    "conversations.kickerrorschema": {
      "title": "conversations.kickerrorschema",
      "description": "Schema for error response conversations.kick method",
      "example": {
        "error": "cant_kick_self",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error31"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.kicksuccessschema": {
      "title": "conversations.kicksuccessschema",
      "description": "Schema for successful response conversations.kick method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "conversations.leaveerrorschema": {
      "title": "conversations.leaveerrorschema",
      "description": "Schema for error response from conversations.leave method",
      "example": {
        "error": "cant_leave_general",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error32"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.leavesuccessschema": {
      "title": "conversations.leavesuccessschema",
      "description": "Schema for successful response from conversations.leave method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "not_in_channel": {
          "$ref": "#/definitions/defaultsuccessresponse"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "conversations.listerrorschema": {
      "title": "conversations.listerrorschema",
      "description": "Schema for error response from conversations.list method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error33"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.listsuccessschema": {
      "title": "conversations.listsuccessschema",
      "description": "Schema for successful response from conversations.list method",
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Conversationobject"
            }
          },
          "uniqueItems": true
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "response_metadata": {
          "$ref": "#/definitions/ResponseMetadata"
        }
      },
      "required": ["channels", "ok"]
    },
    "conversations.memberserrorschema": {
      "title": "conversations.memberserrorschema",
      "description": "Schema for error response conversations.members method",
      "example": {
        "error": "invalid_cursor",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error34"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.memberssuccessschema": {
      "title": "conversations.memberssuccessschema",
      "description": "Schema for successful response conversations.members method",
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[UW][A-Z0-9]{8}$"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "response_metadata": {
          "$ref": "#/definitions/ResponseMetadata"
        }
      },
      "required": ["members", "ok", "response_metadata"]
    },
    "conversations.openerrorschema": {
      "title": "conversations.openerrorschema",
      "description": "Schema for error response from conversations.open method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error35"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.opensuccessschema": {
      "title": "conversations.opensuccessschema",
      "description": "Schema for successful response from conversations.open method when opening channels, ims, mpims",
      "type": "object",
      "properties": {
        "already_open": {
          "type": "boolean"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conversationobject"
          }
        },
        "no_op": {
          "type": "boolean"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "conversations.renameerrorschema": {
      "title": "conversations.renameerrorschema",
      "description": "Schema for error response from conversations.rename method",
      "example": {
        "error": "not_in_channel",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error36"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.renamesuccessschema": {
      "title": "conversations.renamesuccessschema",
      "description": "Schema for successful response from conversations.rename method",
      "type": "object",
      "properties": {
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conversationobject"
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "conversations.replieserrorschema": {
      "title": "conversations.replieserrorschema",
      "description": "Schema for error response from conversations.replies method",
      "example": {
        "error": "thread_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error37"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.repliessuccessschema": {
      "title": "conversations.repliessuccessschema",
      "description": "Schema for successful response from conversations.replies method",
      "type": "object",
      "properties": {
        "has_more": {
          "type": "boolean"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["messages", "ok"]
    },
    "conversations.setPurposeerrorschema": {
      "title": "conversations.setPurposeerrorschema",
      "description": "Schema for error response from conversations.setPurpose method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error38"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.setPurposesuccessschema": {
      "title": "conversations.setPurposesuccessschema",
      "description": "Schema for successful response from conversations.setPurpose method",
      "type": "object",
      "properties": {
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conversationobject"
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "conversations.setTopicerrorschema": {
      "title": "conversations.setTopicerrorschema",
      "description": "Schema for error response from conversations.setTopic method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error38"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.setTopicsuccessschema": {
      "title": "conversations.setTopicsuccessschema",
      "description": "Schema for successful response from conversations.setTopic method",
      "type": "object",
      "properties": {
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conversationobject"
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "conversations.unarchiveerrorschema": {
      "title": "conversations.unarchiveerrorschema",
      "description": "Schema for error response from conversations.unarchive method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error40"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "conversations.unarchivesuccessschema": {
      "title": "conversations.unarchivesuccessschema",
      "description": "Schema for successful response from conversations.unarchive method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "Defaultsuccesstemplate": {
      "title": "Defaultsuccesstemplate",
      "description": "Verbose schema not yet ready for this method.",
      "example": {
        "info": {
          "app_home": {
            "resources": {
              "ids": ["D0C0NU1Q8", "D0BH95DLH"]
            },
            "scopes": ["chat:write", "im:history", "im:read"]
          },
          "channel": {
            "resources": {
              "excluded_ids": [],
              "ids": ["C061FA5PB"],
              "wildcard": false
            },
            "scopes": ["channels:read"]
          },
          "group": {
            "resources": {
              "ids": []
            },
            "scopes": []
          },
          "im": {
            "resources": {
              "ids": []
            },
            "scopes": []
          },
          "mpim": {
            "resources": {
              "ids": []
            },
            "scopes": []
          },
          "team": {
            "resources": {
              "ids": []
            },
            "scopes": []
          }
        },
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "DisplayCounts": {
      "title": "DisplayCounts",
      "type": "object",
      "properties": {
        "display_counts": {
          "type": "integer",
          "format": "int32"
        },
        "guest_counts": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": ["display_counts", "guest_counts"]
    },
    "dnd.teamInfoerrorschema": {
      "title": "dnd.teamInfoerrorschema",
      "description": "Schema for error response from dnd.teamInfo method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error41"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "dnd.teamInfosuccessschema": {
      "title": "dnd.teamInfosuccessschema",
      "description": "Schema for successful response from dnd.teamInfo method",
      "example": {
        "ok": "true",
        "users": {
          "U023BECGF": {
            "dnd_enabled": true,
            "next_dnd_end_ts": 1450423800,
            "next_dnd_start_ts": 1450387800
          },
          "W058CJVAA": {
            "dnd_enabled": false,
            "next_dnd_end_ts": 1,
            "next_dnd_start_ts": 1
          }
        }
      },
      "type": "object",
      "properties": {
        "cached": {
          "type": "boolean"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "users": {
          "type": "object"
        }
      },
      "required": ["ok", "users"]
    },
    "EnterpriseTeamCreationRequest": {
      "title": "EnterpriseTeamCreationRequest",
      "type": "object",
      "properties": {
        "is_enabled": {
          "type": "boolean"
        }
      },
      "required": ["is_enabled"]
    },
    "Error": {
      "title": "Error",
      "example": "invalid_trigger",
      "type": "string",
      "enum": [
        "invalid_trigger",
        "trigger_exchanged",
        "invalid_scope",
        "invalid_user",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error1": {
      "title": "Error1",
      "example": "invalid_cursor",
      "type": "string",
      "enum": [
        "invalid_cursor",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error2": {
      "title": "Error2",
      "example": "not_authed",
      "type": "string",
      "enum": [
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error3": {
      "title": "Error3",
      "example": "not_authed",
      "type": "string",
      "enum": [
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error4": {
      "title": "Error4",
      "example": "not_authed",
      "type": "string",
      "enum": [
        "not_authed",
        "invalid_auth",
        "token_revoked",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error5": {
      "title": "Error5",
      "example": "bot_not_found",
      "type": "string",
      "enum": [
        "bot_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error6": {
      "title": "Error6",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "already_archived",
        "cant_archive_general",
        "restricted_action",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "team_added_to_org",
        "missing_charset",
        "superfluous_charset"
      ]
    },
    "Error7": {
      "title": "Error7",
      "example": "name_taken",
      "type": "string",
      "enum": [
        "name_taken",
        "restricted_action",
        "no_channel",
        "invalid_name_required",
        "invalid_name_punctuation",
        "invalid_name_maxlength",
        "invalid_name_specials",
        "invalid_name",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "team_added_to_org",
        "missing_charset",
        "superfluous_charset"
      ]
    },
    "Error8": {
      "title": "Error8",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "invalid_ts_latest",
        "invalid_ts_oldest",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error9": {
      "title": "Error9",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "team_added_to_org",
        "missing_charset",
        "superfluous_charset"
      ]
    },
    "Error10": {
      "title": "Error10",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "user_not_found",
        "cant_invite_self",
        "not_in_channel",
        "already_in_channel",
        "is_archived",
        "cant_invite",
        "too_many_users",
        "ura_max_channels",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "team_added_to_org",
        "missing_charset",
        "superfluous_charset"
      ]
    },
    "Error11": {
      "title": "Error11",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "name_taken",
        "restricted_action",
        "no_channel",
        "is_archived",
        "invalid_name_required",
        "invalid_name_punctuation",
        "invalid_name_maxlength",
        "invalid_name_specials",
        "invalid_name",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "user_is_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error12": {
      "title": "Error12",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "user_not_found",
        "cant_kick_self",
        "not_in_channel",
        "cant_kick_from_general",
        "restricted_action",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "user_is_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error13": {
      "title": "Error13",
      "example": "not_authed",
      "type": "string",
      "enum": [
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error14": {
      "title": "Error14",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "invalid_timestamp",
        "not_in_channel",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error15": {
      "title": "Error15",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "not_in_channel",
        "not_authorized",
        "invalid_name",
        "name_taken",
        "invalid_name_required",
        "invalid_name_punctuation",
        "invalid_name_maxlength",
        "invalid_name_specials",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "user_is_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error16": {
      "title": "Error16",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "not_in_channel",
        "is_archived",
        "too_long",
        "user_is_restricted",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error17": {
      "title": "Error17",
      "example": "message_not_found",
      "type": "string",
      "enum": [
        "message_not_found",
        "channel_not_found",
        "cant_delete_message",
        "compliance_exports_prevent_deletion",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error18": {
      "title": "Error18",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "message_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error19": {
      "title": "Error19",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "is_archived",
        "msg_too_long",
        "no_text",
        "restricted_action",
        "too_many_attachments",
        "user_not_in_channel",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error20": {
      "title": "Error20",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "not_in_channel",
        "is_archived",
        "msg_too_long",
        "no_text",
        "too_many_attachments",
        "rate_limited",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type"
      ]
    },
    "Error21": {
      "title": "Error21",
      "example": "cannot_unfurl_url",
      "type": "string",
      "enum": [
        "cannot_unfurl_url",
        "cannot_find_service",
        "missing_unfurls",
        "cannot_prompt",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error22": {
      "title": "Error22",
      "example": "message_not_found",
      "type": "string",
      "enum": [
        "message_not_found",
        "cant_update_message",
        "channel_not_found",
        "edit_window_closed",
        "msg_too_long",
        "too_many_attachments",
        "rate_limited",
        "no_text",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "request_timeout",
        "invalid_json",
        "json_not_object",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error23": {
      "title": "Error23",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "missing_scope",
        "not_supported",
        "channel_not_found",
        "already_archived",
        "cant_archive_general",
        "restricted_action",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "team_added_to_org",
        "missing_charset",
        "superfluous_charset"
      ]
    },
    "Error24": {
      "title": "Error24",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "channel_not_found",
        "user_does_not_own_channel",
        "missing_scope",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error25": {
      "title": "Error25",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "missing_scope",
        "name_taken",
        "restricted_action",
        "no_channel",
        "invalid_name_required",
        "invalid_name_punctuation",
        "invalid_name_maxlength",
        "invalid_name_specials",
        "invalid_name",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error26": {
      "title": "Error26",
      "example": "missing_scope",
      "type": "string",
      "enum": [
        "missing_scope",
        "channel_not_found",
        "invalid_ts_latest",
        "invalid_ts_oldest",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error27": {
      "title": "Error27",
      "example": "missing_scope",
      "type": "string",
      "enum": [
        "missing_scope",
        "channel_not_found",
        "team_added_to_org",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error28": {
      "title": "Error28",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "missing_scope",
        "channel_not_found",
        "user_not_found",
        "cant_invite_self",
        "not_in_channel",
        "already_in_channel",
        "is_archived",
        "cant_invite",
        "too_many_users",
        "ura_max_channels",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "team_added_to_org",
        "missing_charset",
        "superfluous_charset"
      ]
    },
    "Error30": {
      "title": "Error30",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "missing_scope",
        "channel_not_found",
        "is_archived",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "team_added_to_org",
        "missing_charset",
        "superfluous_charset"
      ]
    },
    "Error31": {
      "title": "Error31",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "missing_scope",
        "channel_not_found",
        "user_not_found",
        "cant_kick_self",
        "not_in_channel",
        "cant_kick_from_general",
        "restricted_action",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error32": {
      "title": "Error32",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "last_member",
        "missing_scope",
        "channel_not_found",
        "is_archived",
        "cant_leave_general",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "team_added_to_org",
        "missing_charset",
        "superfluous_charset"
      ]
    },
    "Error33": {
      "title": "Error33",
      "example": "missing_scope",
      "type": "string",
      "enum": [
        "missing_scope",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error34": {
      "title": "Error34",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "invalid_limit",
        "invalid_cursor",
        "fetch_members_failed",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error35": {
      "title": "Error35",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "user_not_found",
        "user_not_visible",
        "user_disabled",
        "users_list_not_supplied",
        "not_enough_users",
        "too_many_users",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "channel_not_found"
      ]
    },
    "Error36": {
      "title": "Error36",
      "example": "user_is_restricted",
      "type": "string",
      "enum": [
        "user_is_restricted",
        "method_not_supported_for_channel_type",
        "missing_scope",
        "channel_not_found",
        "not_in_channel",
        "not_authorized",
        "invalid_name",
        "name_taken",
        "invalid_name_required",
        "invalid_name_punctuation",
        "invalid_name_maxlength",
        "invalid_name_specials",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error37": {
      "title": "Error37",
      "example": "missing_scope",
      "type": "string",
      "enum": [
        "missing_scope",
        "channel_not_found",
        "thread_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error38": {
      "title": "Error38",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "missing_scope",
        "channel_not_found",
        "not_in_channel",
        "is_archived",
        "too_long",
        "user_is_restricted",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error40": {
      "title": "Error40",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "missing_scope",
        "channel_not_found",
        "not_archived",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_restricted",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "team_added_to_org",
        "missing_charset",
        "superfluous_charset"
      ]
    },
    "Error41": {
      "title": "Error41",
      "example": "not_authed",
      "type": "string",
      "enum": [
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error42": {
      "title": "Error42",
      "example": "file_not_found",
      "type": "string",
      "enum": [
        "file_not_found",
        "file_deleted",
        "no_comment",
        "cant_add",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error43": {
      "title": "Error43",
      "example": "cant_delete",
      "type": "string",
      "enum": [
        "cant_delete",
        "comment_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error44": {
      "title": "Error44",
      "example": "cant_edit",
      "type": "string",
      "enum": [
        "cant_edit",
        "comment_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error45": {
      "title": "Error45",
      "example": "file_not_found",
      "type": "string",
      "enum": [
        "file_not_found",
        "file_deleted",
        "cant_delete_file",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error46": {
      "title": "Error46",
      "example": "file_not_found",
      "type": "string",
      "enum": [
        "file_not_found",
        "file_deleted",
        "timezone_count_failed",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error47": {
      "title": "Error47",
      "example": "user_not_found",
      "type": "string",
      "enum": [
        "user_not_found",
        "unknown_type",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "user_is_bot",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error48": {
      "title": "Error48",
      "example": "posting_to_general_channel_denied",
      "type": "string",
      "enum": [
        "posting_to_general_channel_denied",
        "invalid_channel",
        "file_uploads_disabled",
        "file_uploads_except_images_disabled",
        "storage_limit_reached",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error49": {
      "title": "Error49",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "already_archived",
        "group_contains_others",
        "restricted_action",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error50": {
      "title": "Error50",
      "example": "no_channel",
      "type": "string",
      "enum": [
        "no_channel",
        "restricted_action",
        "name_taken",
        "invalid_name_required",
        "invalid_name_punctuation",
        "invalid_name_maxlength",
        "invalid_name_specials",
        "invalid_name",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error51": {
      "title": "Error51",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "invalid_ts_latest",
        "invalid_ts_oldest",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error52": {
      "title": "Error52",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error53": {
      "title": "Error53",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "user_not_found",
        "cant_invite_self",
        "is_archived",
        "cant_invite",
        "ura_max_channels",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "user_is_bot",
        "user_is_ultra_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error54": {
      "title": "Error54",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "user_not_found",
        "cant_kick_self",
        "not_in_group",
        "restricted_action",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "user_is_restricted",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error56": {
      "title": "Error56",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "invalid_timestamp",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error57": {
      "title": "Error57",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "is_archived",
        "too_long",
        "user_is_restricted",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error60": {
      "title": "Error60",
      "example": "invalid_cursor",
      "type": "string",
      "enum": [
        "invalid_cursor",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error62": {
      "title": "Error62",
      "example": "user_not_found",
      "type": "string",
      "enum": [
        "user_not_found",
        "user_not_visible",
        "user_disabled",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error63": {
      "title": "Error63",
      "example": "not_enterprise_team",
      "type": "string",
      "enum": [
        "not_enterprise_team",
        "too_many_users",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error64": {
      "title": "Error64",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "invalid_timestamp",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error65": {
      "title": "Error65",
      "example": "users_list_not_supplied",
      "type": "string",
      "enum": [
        "users_list_not_supplied",
        "not_enough_users",
        "too_many_users",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error66": {
      "title": "Error66",
      "example": "bad_timestamp",
      "type": "string",
      "enum": [
        "bad_timestamp",
        "file_not_found",
        "file_comment_not_found",
        "message_not_found",
        "channel_not_found",
        "no_item_specified",
        "already_pinned",
        "permission_denied",
        "file_not_shared",
        "not_pinnable",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error67": {
      "title": "Error67",
      "example": "channel_not_found",
      "type": "string",
      "enum": [
        "channel_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error68": {
      "title": "Error68",
      "example": "bad_timestamp",
      "type": "string",
      "enum": [
        "bad_timestamp",
        "file_not_found",
        "file_comment_not_found",
        "message_not_found",
        "no_item_specified",
        "not_pinned",
        "permission_denied",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_typ",
        "missing_post_typ",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeou",
        "upgrade_required"
      ]
    },
    "Error69": {
      "title": "Error69",
      "example": "bad_timestamp",
      "type": "string",
      "enum": [
        "bad_timestamp",
        "file_not_found",
        "file_comment_not_found",
        "message_not_found",
        "no_item_specified",
        "invalid_name",
        "already_reacted",
        "too_many_emoji",
        "too_many_reactions",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error70": {
      "title": "Error70",
      "example": "bad_timestamp",
      "type": "string",
      "enum": [
        "bad_timestamp",
        "file_not_found",
        "file_comment_not_found",
        "message_not_found",
        "no_item_specified",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error71": {
      "title": "Error71",
      "example": "user_not_found",
      "type": "string",
      "enum": [
        "user_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactiv",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error72": {
      "title": "Error72",
      "example": "bad_timestamp",
      "type": "string",
      "enum": [
        "bad_timestamp",
        "file_not_found",
        "file_comment_not_found",
        "message_not_found",
        "no_item_specified",
        "invalid_name",
        "no_reaction",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error73": {
      "title": "Error73",
      "example": "not_authed",
      "type": "string",
      "enum": [
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error74": {
      "title": "Error74",
      "example": "migration_in_progress",
      "type": "string",
      "enum": [
        "migration_in_progress",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error75": {
      "title": "Error75",
      "example": "not_authed",
      "type": "string",
      "enum": [
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revokedno_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error76": {
      "title": "Error76",
      "example": "not_authed",
      "type": "string",
      "enum": [
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "user_is_bot",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_typ",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeou",
        "upgrade_required"
      ]
    },
    "Error77": {
      "title": "Error77",
      "example": "method_not_supported_for_channel_type",
      "type": "string",
      "enum": [
        "method_not_supported_for_channel_type",
        "missing_scope",
        "invalid_types",
        "invalid_cursor",
        "invalid_limit",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error79": {
      "title": "Error79",
      "example": "user_not_found",
      "type": "string",
      "enum": [
        "user_not_found",
        "user_not_visible",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required"
      ]
    },
    "Error80": {
      "title": "Error80",
      "example": "invalid_cursor",
      "type": "string",
      "enum": [
        "invalid_cursor",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error81": {
      "title": "Error81",
      "example": "users_not_found",
      "type": "string",
      "enum": [
        "users_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "no_permission",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error82": {
      "title": "Error82",
      "example": "user_not_found",
      "type": "string",
      "enum": [
        "user_not_found",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "Error83": {
      "title": "Error83",
      "example": "reserved_name",
      "type": "string",
      "enum": [
        "reserved_name",
        "invalid_profile",
        "profile_set_failed",
        "not_admin",
        "not_app_admin",
        "cannot_update_admin_user",
        "not_authed",
        "invalid_auth",
        "account_inactive",
        "token_revoked",
        "no_permission",
        "org_login_required",
        "user_is_bot",
        "invalid_arg_name",
        "invalid_array_arg",
        "invalid_charset",
        "invalid_form_data",
        "invalid_post_type",
        "missing_post_type",
        "team_added_to_org",
        "invalid_json",
        "json_not_object",
        "request_timeout",
        "upgrade_required",
        "fatal_error"
      ]
    },
    "errorsisreturnedwhenanerrorassociatesanuser": {
      "title": "errorsisreturnedwhenanerrorassociatesanuser",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error28"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        }
      },
      "required": ["error", "ok"]
    },
    "FileCommentPin": {
      "title": "FileCommentPin",
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/FileCommentObject"
        },
        "created": {
          "type": "integer",
          "format": "int32"
        },
        "created_by": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "file": {
          "$ref": "#/definitions/fileobject"
        },
        "type": {
          "$ref": "#/definitions/Type1"
        }
      }
    },
    "files.comments.adderrorschema": {
      "title": "files.comments.adderrorschema",
      "description": "Schema for error response from files.comments.add method",
      "example": {
        "error": "file_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error42"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "files.comments.addschema": {
      "title": "files.comments.addschema",
      "description": "Schema for successful response files.comments.add method",
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/FileCommentObject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["comment", "ok"]
    },
    "files.comments.deleteerrorschema": {
      "title": "files.comments.deleteerrorschema",
      "description": "Schema for error response files.comments.delete method",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error43"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "files.comments.deleteschema": {
      "title": "files.comments.deleteschema",
      "description": "Schema for successful response files.comments.delete method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "files.comments.editerrorschema": {
      "title": "files.comments.editerrorschema",
      "description": "Schema for error response files.comments.edit method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error44"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "files.comments.editschema": {
      "title": "files.comments.editschema",
      "description": "Schema for successful response files.comments.edit method",
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/FileCommentObject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["comment", "ok"]
    },
    "files.deleteerrorschema": {
      "title": "files.deleteerrorschema",
      "description": "Schema for error response files.delete method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error45"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "files.deleteschema": {
      "title": "files.deleteschema",
      "description": "Schema for successful response files.delete method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "files.infoerrorschema": {
      "title": "files.infoerrorschema",
      "description": "Schema for error response from files.info method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error46"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "files.infoschema": {
      "title": "files.infoschema",
      "description": "Schema for successful response from files.info method",
      "type": "object",
      "properties": {
        "comments": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "file": {
          "$ref": "#/definitions/fileobject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "paging": {
          "$ref": "#/definitions/pagingobjectforfiles"
        }
      },
      "required": ["comments", "file", "ok", "paging"]
    },
    "files.listerrorschema": {
      "title": "files.listerrorschema",
      "description": "Schema for error response from files.list method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error47"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "files.listschema": {
      "title": "files.listschema",
      "description": "Schema for successful response from files.list method",
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fileobject"
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "paging": {
          "$ref": "#/definitions/pagingobjectforfiles"
        }
      },
      "required": ["files", "ok", "paging"]
    },
    "files.uploaderrorschema": {
      "title": "files.uploaderrorschema",
      "description": "Schema for error response files.upload method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error48"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "files.uploadschema": {
      "title": "files.uploadschema",
      "description": "Schema for successful response files.upload method",
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/fileobject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["file", "ok"]
    },
    "groups.archiveerrorschema": {
      "title": "groups.archiveerrorschema",
      "description": "Schema for error response from groups.archive method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error49"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.archiveschema": {
      "title": "groups.archiveschema",
      "description": "Schema for successful response from groups.archive method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "groups.createerrorschema": {
      "title": "groups.createerrorschema",
      "description": "Schema for error response groups.create method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error50"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.createsuccessschema": {
      "title": "groups.createsuccessschema",
      "description": "Schema for successful response groups.create method",
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/Groupobject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["group", "ok"]
    },
    "groups.historyerrorschema": {
      "title": "groups.historyerrorschema",
      "description": "Schema for error response groups.history method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error51"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.historysuccessschema": {
      "title": "groups.historysuccessschema",
      "description": "Schema for successful response groups.history method",
      "type": "object",
      "properties": {
        "has_more": {
          "type": "boolean"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Messageobject"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["has_more", "messages", "ok"]
    },
    "groups.infoerrorschema": {
      "title": "groups.infoerrorschema",
      "description": "Schema for error response groups.info method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error52"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.infosuccessschema": {
      "title": "groups.infosuccessschema",
      "description": "Schema for successful response groups.info method",
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/Groupobject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["group", "ok"]
    },
    "groups.inviteerrorschema": {
      "title": "groups.inviteerrorschema",
      "description": "Schema for error response groups.invite method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error53"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.invitesuccessschema": {
      "title": "groups.invitesuccessschema",
      "description": "Schema for successful response groups.invite method",
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/Groupobject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["group", "ok"]
    },
    "groups.kickerrorschema": {
      "title": "groups.kickerrorschema",
      "description": "Schema for error response from groups.kick method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error54"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.kickschema": {
      "title": "groups.kickschema",
      "description": "Schema for successful response from groups.kick method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "groups.listerrorschema": {
      "title": "groups.listerrorschema",
      "description": "Schema for error response groups.list method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error13"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.listsuccessschema": {
      "title": "groups.listsuccessschema",
      "description": "Schema for successful response groups.list method",
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Groupobject"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["groups", "ok"]
    },
    "groups.markerrorschema": {
      "title": "groups.markerrorschema",
      "description": "Schema for error response from groups.mark method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error56"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.marksuccessschema": {
      "title": "groups.marksuccessschema",
      "description": "Schema for successful response from groups.mark method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "groups.setPurposeerrorschema": {
      "title": "groups.setPurposeerrorschema",
      "description": "Schema for error response from groups.setPurpose method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error57"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.setPurposeschema": {
      "title": "groups.setPurposeschema",
      "description": "Schema for successful response from groups.setPurpose method",
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "purpose": {
          "type": "string"
        }
      },
      "required": ["ok", "purpose"]
    },
    "groups.setTopicerrorschema": {
      "title": "groups.setTopicerrorschema",
      "description": "Schema for error response from groups.setTopic method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error57"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "groups.setTopicschema": {
      "title": "groups.setTopicschema",
      "description": "Schema for successful response from groups.setTopic method",
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "topic": {
          "type": "string"
        }
      },
      "required": ["ok", "topic"]
    },
    "Icon": {
      "title": "Icon",
      "type": "object",
      "properties": {
        "image_102": {
          "type": "string"
        },
        "image_132": {
          "type": "string"
        },
        "image_230": {
          "type": "string"
        },
        "image_34": {
          "type": "string"
        },
        "image_44": {
          "type": "string"
        },
        "image_68": {
          "type": "string"
        },
        "image_88": {
          "type": "string"
        },
        "image_default": {
          "type": "boolean"
        }
      }
    },
    "Icons": {
      "title": "Icons",
      "type": "object",
      "properties": {
        "emoji": {
          "type": "string"
        }
      }
    },
    "Icons1": {
      "title": "Icons1",
      "type": "object",
      "properties": {
        "image_36": {
          "type": "string"
        },
        "image_48": {
          "type": "string"
        },
        "image_72": {
          "type": "string"
        }
      },
      "required": ["image_36", "image_48", "image_72"]
    },
    "im.historyerrorschema": {
      "title": "im.historyerrorschema",
      "description": "Schema for error response from im.history method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error8"
        },
        "needed": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        },
        "provided": {
          "type": "string"
        }
      },
      "required": ["error", "ok"]
    },
    "im.historysuccessschema": {
      "title": "im.historysuccessschema",
      "description": "Schema for successful response from im.history method",
      "type": "object",
      "properties": {
        "has_more": {
          "type": "boolean"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Messageobject"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["has_more", "messages", "ok"]
    },
    "im.listerrorschema": {
      "title": "im.listerrorschema",
      "description": "Schema for error response from im.list method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error60"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "im.listsuccessschema": {
      "title": "im.listsuccessschema",
      "description": "Schema for successful response im.list method",
      "example": {
        "ims": [
          {
            "created": 1449709280,
            "id": "D0G9QPY56",
            "is_im": true,
            "is_org_shared": false,
            "is_user_deleted": false,
            "user": "USLACKBOT"
          },
          {
            "created": 1466692204,
            "id": "D1KL59A72",
            "is_im": true,
            "is_org_shared": false,
            "is_user_deleted": false,
            "user": "U0G9QF9C6"
          },
          {
            "created": 1449722883,
            "id": "D0G9XPFH9",
            "is_im": true,
            "is_org_shared": false,
            "is_user_deleted": false,
            "user": "U0G9WFXNZ"
          },
          {
            "created": 1452098023,
            "id": "D0HRHJSF7",
            "is_im": true,
            "is_org_shared": false,
            "is_user_deleted": false,
            "user": "W0HRJL7CK"
          },
          {
            "created": 1465834222,
            "id": "D1GD7CHC0",
            "is_im": true,
            "is_org_shared": false,
            "is_user_deleted": true,
            "user": "U1GDBDGR3"
          },
          {
            "created": 1468274703,
            "id": "D1QMF76M9",
            "is_im": true,
            "is_org_shared": false,
            "is_user_deleted": false,
            "user": "U1QNSQB9U"
          },
          {
            "created": 1502210225,
            "id": "D6K48KKRN",
            "is_im": true,
            "is_org_shared": false,
            "is_user_deleted": false,
            "user": "U6KR7BVFW"
          }
        ],
        "ok": "true",
        "response_metadata": {
          "next_cursor": "aW1faWQ6RDBCSDk1RExI="
        }
      },
      "type": "object",
      "properties": {
        "ims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IMObject"
          },
          "uniqueItems": true
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ims", "ok"]
    },
    "im.markerrorschema": {
      "title": "im.markerrorschema",
      "description": "Schema for error response im.mark method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error14"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "im.marksuccessschema": {
      "title": "im.marksuccessschema",
      "description": "Schema for successful response im.mark method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "im.openerrorschema": {
      "title": "im.openerrorschema",
      "description": "Schema for error response from im.open method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error62"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "im.opensuccessschema": {
      "title": "im.opensuccessschema",
      "description": "Schema for successful response from im.open method",
      "example": {
        "channel": {
          "id": "D947RLWRX"
        },
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "already_open": {
          "type": "boolean"
        },
        "channel": {
          "$ref": "#/definitions/Channel"
        },
        "no_op": {
          "type": "boolean"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["channel", "ok"]
    },
    "Infoforapinneditem": {
      "title": "Infoforapinneditem",
      "type": "object",
      "properties": {
        "pinned_by": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "pinned_ts": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": ["pinned_by", "pinned_ts"]
    },
    "Item": {
      "title": "Item",
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "pattern": "^[CGD][A-Z0-9]{8}$"
        },
        "message": {
          "$ref": "#/definitions/Messageobject"
        },
        "type": {
          "example": "message",
          "type": "string",
          "default": "message"
        }
      },
      "required": ["channel", "message", "type"]
    },
    "LocalesEnabled": {
      "title": "LocalesEnabled",
      "type": "object",
      "properties": {
        "deDE": {
          "type": "string"
        },
        "enUS": {
          "type": "string"
        },
        "esES": {
          "type": "string"
        },
        "frFR": {
          "type": "string"
        },
        "jaJP": {
          "type": "string"
        },
        "pseudo": {
          "type": "string"
        }
      }
    },
    "Message": {
      "title": "Message",
      "type": "object",
      "properties": {
        "last_read": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "replies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reply"
          }
        },
        "reply_count": {
          "type": "integer",
          "format": "int32"
        },
        "source_team": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "subscribed": {
          "type": "boolean"
        },
        "team": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "text": {
          "type": "string"
        },
        "thread_ts": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "ts": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "type": {
          "type": "string"
        },
        "unread_count": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "user_profile": {
          "$ref": "#/definitions/objs_user_profile_short"
        },
        "user_team": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        }
      },
      "required": [
        "replies",
        "reply_count",
        "subscribed",
        "text",
        "thread_ts",
        "ts",
        "type",
        "user"
      ]
    },
    "migration.exchangeerrorschema": {
      "title": "migration.exchangeerrorschema",
      "description": "Schema for error response from migration.exchange method",
      "example": {
        "error": "not_enterprise_team",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error63"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "migration.exchangesuccessschema": {
      "title": "migration.exchangesuccessschema",
      "description": "Schema for successful response from migration.exchange method",
      "type": "object",
      "properties": {
        "enterprise_id": {
          "type": "string"
        },
        "invalid_user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "team_id": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "user_id_map": {
          "type": "object"
        }
      },
      "required": ["enterprise_id", "ok", "team_id"]
    },
    "mpim.markerrorschema": {
      "title": "mpim.markerrorschema",
      "description": "Schema for error response from mpim.mark method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error64"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "mpim.markschema": {
      "title": "mpim.markschema",
      "description": "Schema for successful response from mpim.mark method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "mpim.openerrorschema": {
      "title": "mpim.openerrorschema",
      "description": "Schema for error response from mpim.open method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error65"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "mpim.opensuccessschema": {
      "title": "mpim.opensuccessschema",
      "description": "Schema for successful response from mpim.open method",
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/Groupobject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["group", "ok"]
    },
    "pins.adderrorschema": {
      "title": "pins.adderrorschema",
      "description": "Schema for error response from pins.add method",
      "example": {
        "error": "channel_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error66"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "pins.addschema": {
      "title": "pins.addschema",
      "description": "Schema for successful response from pins.add method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "pins.listerrorschema": {
      "title": "pins.listerrorschema",
      "description": "Schema for error response from pins.list method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error67"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "pins.listsuccessschema": {
      "title": "pins.listsuccessschema",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileCommentPin"
          },
          "uniqueItems": true
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["items", "ok"]
    },
    "pins.removeerrorschema": {
      "title": "pins.removeerrorschema",
      "description": "Schema for error response from pins.remove method",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error68"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "pins.removeschema": {
      "title": "pins.removeschema",
      "description": "Schema for successful response from pins.remove method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "Profile": {
      "title": "Profile",
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/objs_team_profile_field"
          },
          "uniqueItems": true,
          "minItems": 1
        }
      },
      "required": ["fields"]
    },
    "Purpose": {
      "title": "Purpose",
      "type": "object",
      "properties": {
        "creator": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$|^$"
        },
        "last_set": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "required": ["creator", "last_set", "value"]
    },
    "reactions.adderrorschema": {
      "title": "reactions.adderrorschema",
      "description": "Schema for error response from reactions.add method",
      "example": {
        "error": "already_reacted",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error69"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "reactions.addschema": {
      "title": "reactions.addschema",
      "description": "Schema for successful response from reactions.add method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "reactions.geterrorschema": {
      "title": "reactions.geterrorschema",
      "description": "Schema for error response from reactions.get method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error70"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "reactions.getsuccessschema": {
      "title": "reactions.getsuccessschema",
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "pattern": "^[CGD][A-Z0-9]{8}$"
        },
        "message": {
          "$ref": "#/definitions/Messageobject"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "type": {
          "example": "message",
          "type": "string",
          "default": "message"
        }
      },
      "required": ["channel", "message", "ok", "type"]
    },
    "reactions.listerrorschema": {
      "title": "reactions.listerrorschema",
      "description": "Schema for error response from reactions.list method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error71"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "reactions.listschema": {
      "title": "reactions.listschema",
      "description": "Schema for successful response from reactions.list method",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Item"
            }
          }
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "paging": {
          "$ref": "#/definitions/pagingobjectforfiles"
        }
      },
      "required": ["items", "ok"]
    },
    "reactions.removeerrorschema": {
      "title": "reactions.removeerrorschema",
      "description": "Schema for error response from reactions.remove method",
      "example": {
        "error": "no_reaction",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error72"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "reactions.removeschema": {
      "title": "reactions.removeschema",
      "description": "Schema for successful response from reactions.remove method",
      "example": {
        "ok": "true"
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["ok"]
    },
    "Reply": {
      "title": "Reply",
      "type": "object",
      "properties": {
        "ts": {
          "type": "string",
          "pattern": "^\\d{10}\\.\\d{6}$"
        },
        "user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        }
      },
      "required": ["ts", "user"]
    },
    "Resource": {
      "title": "Resource",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Responsemetadata1": {
      "title": "Responsemetadata1",
      "type": "object",
      "properties": {
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 1
        }
      }
    },
    "ResponseMetadata": {
      "title": "ResponseMetadata",
      "type": "object",
      "properties": {
        "next_cursor": {
          "type": "string"
        }
      },
      "required": ["next_cursor"]
    },
    "rtm.connecterrorschema": {
      "title": "rtm.connecterrorschema",
      "description": "Schema for error response from rtm.connect method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error73"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "rtm.connectschema": {
      "title": "rtm.connectschema",
      "description": "Schema for successful response from rtm.connect method",
      "example": {
        "ok": "true",
        "self": {
          "id": "U4X318ZMZ",
          "name": "robotoverlord"
        },
        "team": {
          "domain": "slackdemo",
          "id": "T2U81E2FP",
          "name": "SlackDemo"
        },
        "url": "wss://..."
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "self": {
          "$ref": "#/definitions/Self"
        },
        "team": {
          "$ref": "#/definitions/Team"
        },
        "url": {
          "type": "string"
        }
      },
      "required": ["ok", "self", "team", "url"]
    },
    "rtm.starterrorschema": {
      "title": "rtm.starterrorschema",
      "description": "Schema for error response from rtm.start method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error74"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "rtm.startsuccessschema": {
      "title": "rtm.startsuccessschema",
      "description": "Schema for successful response from rtm.start method",
      "type": "object",
      "properties": {
        "bots": {
          "type": "object"
        },
        "cache_ts": {
          "type": "integer",
          "format": "int32"
        },
        "cache_ts_version": {
          "type": "string"
        },
        "cache_version": {
          "type": "string"
        },
        "can_manage_shared_channels": {
          "type": "boolean"
        },
        "channels": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Conversationobject"
            }
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "dead_pig": {
          "type": "boolean"
        },
        "dnd": {
          "$ref": "#/definitions/objs_dnd"
        },
        "groups": {
          "description": "Group objects present for rtm.start. Can be null when there are no groups",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uniqueItems": true
        },
        "ims": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Conversationobject"
            }
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "latest_event_ts": {
          "type": "string"
        },
        "mpims": {
          "description": "Mpim objects present for rtm.start. Can be null when there are no mpims",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uniqueItems": true
        },
        "non_threadable_channels": {
          "type": "object"
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "read_only_channels": {
          "type": "object"
        },
        "self": {
          "$ref": "#/definitions/Self1"
        },
        "subteams": {
          "$ref": "#/definitions/Subteams"
        },
        "team": {
          "$ref": "#/definitions/TeamObject"
        },
        "thread_only_channels": {
          "type": "object"
        },
        "url": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/objs_user"
          },
          "uniqueItems": true,
          "minItems": 1
        }
      },
      "required": [
        "bots",
        "cache_ts",
        "cache_ts_version",
        "can_manage_shared_channels",
        "channels",
        "dnd",
        "ims",
        "latest_event_ts",
        "non_threadable_channels",
        "ok",
        "read_only_channels",
        "self",
        "subteams",
        "team",
        "thread_only_channels",
        "url",
        "users"
      ]
    },
    "Scopes": {
      "title": "Scopes",
      "type": "object",
      "properties": {
        "app_home": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "channel": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "im": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mpim": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "team": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Self": {
      "title": "Self",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "name": {
          "type": "string"
        }
      },
      "required": ["id", "name"]
    },
    "Self1": {
      "title": "Self1",
      "type": "object",
      "properties": {
        "created": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "manual_presence": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "prefs": {
          "$ref": "#/definitions/UserPrefsobject"
        }
      },
      "required": ["created", "id", "manual_presence", "prefs"]
    },
    "Share": {
      "title": "Share",
      "type": "object",
      "properties": {
        "accepted_user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "is_active": {
          "type": "boolean"
        },
        "team": {
          "$ref": "#/definitions/TeamObject"
        },
        "user": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        }
      },
      "required": ["accepted_user", "is_active", "team", "user"]
    },
    "Subteams": {
      "title": "Subteams",
      "type": "object",
      "properties": {
        "all": {
          "type": "object"
        },
        "self": {
          "type": "object"
        }
      },
      "required": ["all", "self"]
    },
    "Team": {
      "title": "Team",
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        },
        "name": {
          "type": "string"
        }
      },
      "required": ["domain", "id", "name"]
    },
    "team.infoerrorschema": {
      "title": "team.infoerrorschema",
      "description": "Schema for error response from team.info method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error75"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "team.infoschema": {
      "title": "team.infoschema",
      "description": "Schema for successful response from team.info method",
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "team": {
          "$ref": "#/definitions/TeamObject"
        }
      },
      "required": ["ok", "team"]
    },
    "team.profile.geterrorschema": {
      "title": "team.profile.geterrorschema",
      "description": "Schema for error response from team.profile.get method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error76"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "team.profile.getsuccessschema": {
      "title": "team.profile.getsuccessschema",
      "description": "Schema for successful response from team.profile.get method",
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "profile": {
          "$ref": "#/definitions/Profile"
        }
      },
      "required": ["ok", "profile"]
    },
    "Team1": {
      "title": "Team1",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[T][A-Z0-9]{8}$"
        }
      },
      "required": ["id"]
    },
    "Topic": {
      "title": "Topic",
      "type": "object",
      "properties": {
        "creator": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$|^$"
        },
        "last_set": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "required": ["creator", "last_set", "value"]
    },
    "Type": {
      "title": "Type",
      "example": "text",
      "type": "string",
      "enum": ["text", "date", "link", "mailto", "options_list", "user"]
    },
    "Type1": {
      "title": "Type1",
      "example": "file_comment",
      "type": "string",
      "enum": ["file_comment"]
    },
    "User": {
      "title": "User",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[UW][A-Z0-9]{8}$"
        },
        "name": {
          "type": "string"
        }
      },
      "required": ["id", "name"]
    },
    "users.conversationserrorschema": {
      "title": "users.conversationserrorschema",
      "description": "Schema for error response from users.conversations method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error77"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "users.conversationssuccessschema": {
      "title": "users.conversationssuccessschema",
      "description": "Schema for successful response from users.conversations method. Returned conversation objects do not include `num_members` or `is_member`",
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Conversationobject"
            }
          },
          "uniqueItems": true
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "response_metadata": {
          "$ref": "#/definitions/ResponseMetadata"
        }
      },
      "required": ["channels", "ok"]
    },
    "users.countserrorschema": {
      "title": "users.countserrorschema",
      "description": "Schema for error response users.getPresence method",
      "example": {
        "error": "invalid_auth",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "users.identityerrorschema": {
      "title": "users.identityerrorschema",
      "description": "Schema for error response from users.identity method",
      "example": {
        "error": "account_inactive",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error2"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "users.identityschema": {
      "title": "users.identityschema",
      "description": "Schema for 'identity.basic' scope",
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "team": {
          "$ref": "#/definitions/Team1"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "required": ["ok", "team", "user"]
    },
    "users.infoerrorschema": {
      "title": "users.infoerrorschema",
      "description": "Schema for error response from users.info method",
      "example": {
        "error": "user_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error79"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "users.infosuccessschema": {
      "title": "users.infosuccessschema",
      "description": "Schema for successful response from users.info method",
      "example": {
        "ok": "true",
        "user": {
          "color": "9f69e7",
          "deleted": false,
          "has_2fa": false,
          "id": "W012A3CDE",
          "is_admin": true,
          "is_app_user": false,
          "is_bot": false,
          "is_owner": false,
          "is_primary_owner": false,
          "is_restricted": false,
          "is_ultra_restricted": false,
          "name": "spengler",
          "profile": {
            "avatar_hash": "ge3b51ca72de",
            "display_name": "spengler",
            "display_name_normalized": "spengler",
            "email": "spengler@ghostbusters.example.com",
            "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "real_name": "Egon Spengler",
            "real_name_normalized": "Egon Spengler",
            "status_emoji": ":books:",
            "status_text": "Print is dead",
            "team": "T012AB3C4"
          },
          "real_name": "Egon Spengler",
          "team_id": "T012AB3C4",
          "tz": "America/Los_Angeles",
          "tz_label": "Pacific Daylight Time",
          "tz_offset": -25200,
          "updated": 1502138686
        }
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "user": {
          "$ref": "#/definitions/objs_user"
        }
      },
      "required": ["ok", "user"]
    },
    "users.listerrorschema": {
      "title": "users.listerrorschema",
      "description": "Schema for error response from users.list method",
      "example": {
        "error": "invalid_cursor",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error80"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "users.listschema": {
      "title": "users.listschema",
      "description": "Schema for successful response from users.list method",
      "type": "object",
      "properties": {
        "cache_ts": {
          "type": "integer",
          "format": "int32"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/objs_user"
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        }
      },
      "required": ["cache_ts", "members", "ok"]
    },
    "users.lookupByEmailerrorschema": {
      "title": "users.lookupByEmailerrorschema",
      "description": "Schema for error response from users.lookupByEmail method",
      "example": {
        "error": "users_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error81"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "users.lookupByEmailsuccessschema": {
      "title": "users.lookupByEmailsuccessschema",
      "description": "Schema for successful response from users.lookupByEmail method",
      "example": {
        "ok": "true",
        "user": {
          "color": "9f69e7",
          "deleted": false,
          "has_2fa": false,
          "id": "W012A3CDE",
          "is_admin": true,
          "is_app_user": false,
          "is_bot": false,
          "is_owner": false,
          "is_primary_owner": false,
          "is_restricted": false,
          "is_ultra_restricted": false,
          "name": "spengler",
          "profile": {
            "avatar_hash": "ge3b51ca72de",
            "display_name": "spengler",
            "display_name_normalized": "spengler",
            "email": "spengler@ghostbusters.example.com",
            "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
            "real_name": "Egon Spengler",
            "real_name_normalized": "Egon Spengler",
            "status_emoji": ":books:",
            "status_text": "Print is dead",
            "team": "T012AB3C4"
          },
          "real_name": "Egon Spengler",
          "team_id": "T012AB3C4",
          "tz": "America/Los_Angeles",
          "tz_label": "Pacific Daylight Time",
          "tz_offset": -25200,
          "updated": 1502138686
        }
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "user": {
          "$ref": "#/definitions/objs_user"
        }
      },
      "required": ["ok", "user"]
    },
    "users.profile.geterrorschema": {
      "title": "users.profile.geterrorschema",
      "description": "Schema for error response from users.profile.get method",
      "example": {
        "error": "user_not_found",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error82"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "users.profile.getschema": {
      "title": "users.profile.getschema",
      "description": "Schema for successful response from users.profile.get method",
      "example": {
        "ok": "true",
        "profile": {
          "avatar_hash": "ge3b51ca72de",
          "display_name": "spengler",
          "display_name_normalized": "spengler",
          "email": "spengler@ghostbusters.example.com",
          "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
          "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
          "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
          "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
          "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
          "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
          "real_name": "Egon Spengler",
          "real_name_normalized": "Egon Spengler",
          "status_emoji": ":books:",
          "status_text": "Print is dead",
          "team": "T012AB3C4"
        }
      },
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "profile": {
          "$ref": "#/definitions/Userprofileobject"
        }
      },
      "required": ["ok", "profile"]
    },
    "users.profile.seterrorschema": {
      "title": "users.profile.seterrorschema",
      "description": "Schema for error response from users.profile.set method",
      "example": {
        "error": "invalid_profile",
        "ok": "false"
      },
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error83"
        },
        "ok": {
          "example": "False",
          "type": "string",
          "default": "False"
        }
      },
      "required": ["error", "ok"]
    },
    "users.profile.setschema": {
      "title": "users.profile.setschema",
      "description": "Schema for successful response from users.profile.set method",
      "type": "object",
      "properties": {
        "ok": {
          "example": "True",
          "type": "string",
          "default": "True"
        },
        "profile": {
          "$ref": "#/definitions/Userprofileobject"
        },
        "username": {
          "type": "string"
        }
      },
      "required": ["ok", "profile", "username"]
    },
    "WhoCanManageGuests": {
      "title": "WhoCanManageGuests",
      "type": "object",
      "properties": {
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["type"]
    },
    "WhoCanManageIntegrations": {
      "title": "WhoCanManageIntegrations",
      "type": "object",
      "properties": {
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["type"]
    },
    "WhoCanManageSharedChannels": {
      "title": "WhoCanManageSharedChannels",
      "type": "object",
      "properties": {
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["type"]
    },
    "WhoCanPostInSharedChannels": {
      "title": "WhoCanPostInSharedChannels",
      "type": "object",
      "properties": {
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["type"]
    }
  },
  "tags": [
    {
      "name": "api",
      "description": ""
    },
    {
      "name": "apps.permissions",
      "description": ""
    },
    {
      "name": "apps.permissions.resources",
      "description": ""
    },
    {
      "name": "apps.permissions.scopes",
      "description": ""
    },
    {
      "name": "auth",
      "description": ""
    },
    {
      "name": "bots",
      "description": ""
    },
    {
      "name": "channels",
      "description": ""
    },
    {
      "name": "chat",
      "description": ""
    },
    {
      "name": "conversations",
      "description": ""
    },
    {
      "name": "dialog",
      "description": ""
    },
    {
      "name": "dnd",
      "description": ""
    },
    {
      "name": "emoji",
      "description": ""
    },
    {
      "name": "files.comments",
      "description": ""
    },
    {
      "name": "files",
      "description": ""
    },
    {
      "name": "groups",
      "description": ""
    },
    {
      "name": "im",
      "description": ""
    },
    {
      "name": "migration",
      "description": ""
    },
    {
      "name": "mpim",
      "description": ""
    },
    {
      "name": "oauth",
      "description": ""
    },
    {
      "name": "pins",
      "description": ""
    },
    {
      "name": "reactions",
      "description": ""
    },
    {
      "name": "reminders",
      "description": ""
    },
    {
      "name": "rtm",
      "description": ""
    },
    {
      "name": "search",
      "description": ""
    },
    {
      "name": "stars",
      "description": ""
    },
    {
      "name": "team",
      "description": ""
    },
    {
      "name": "team.profile",
      "description": ""
    },
    {
      "name": "usergroups",
      "description": ""
    },
    {
      "name": "usergroups.users",
      "description": ""
    },
    {
      "name": "users",
      "description": ""
    },
    {
      "name": "users.profile",
      "description": ""
    }
  ],
  "externalDocs": {
    "url": "https://api.slack.com/web",
    "description": "Learn more about the Slack Web API"
  }
}
