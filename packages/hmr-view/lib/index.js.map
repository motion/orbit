{"version":3,"sources":["../src/index.js"],"names":["proxyReactComponents","viewProxies","reloaded","createProxy","Klass","mountedInstances","Set","BaseProto","Object","assign","prototype","Current","wrap","Thing","ogMount","componentDidMount","ogWillUnmount","componentWillUnmount","Proxy","get","target","method","receiver","add","args","call","delete","Reflect","update","all","forEach","push","instance","instances","filename","components","imports","locals","React","module","hot","accept","Error","forceUpdater","hotReload","wrapWithProxy","ReactClass","uniqueId","isInFunction","displayName","uid","console","log","setTimeout","setInterval","length","join"],"mappings":"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","file":"index.js","sourcesContent":["import window from 'global/window'\nimport { getForceUpdate } from 'react-proxy'\n\nconst viewProxies = {}\nwindow.viewProxies = viewProxies\n\nlet reloaded = []\n\nfunction createProxy(Klass) {\n  const mountedInstances = new Set()\n  let BaseProto = Object.assign({}, Klass.prototype)\n  let Current = wrap(Klass)\n\n  function wrap(Thing) {\n    const ogMount = BaseProto.componentDidMount\n    const ogWillUnmount = BaseProto.componentWillUnmount\n    Thing.prototype = new Proxy(Thing.prototype, {\n      get(target, method, receiver) {\n        if (method === 'constructor') {\n          return target[method]\n        }\n        if (method === 'componentDidMount') {\n          return function(...args) {\n            mountedInstances.add(this)\n            return ogMount && ogMount.call(this, ...args)\n          }\n        }\n        if (method === 'componentWillUnmount') {\n          return function(...args) {\n            mountedInstances.delete(this)\n            return ogWillUnmount && ogWillUnmount.call(this, ...args)\n          }\n        }\n        return BaseProto[method] || Reflect.get(target, method, receiver)\n      },\n    })\n    return Thing\n  }\n\n  function update(Thing) {\n    BaseProto = Object.assign({}, Thing.prototype)\n    const all = []\n    mountedInstances.forEach(instance => {\n      all.push(instance)\n    })\n    return all\n  }\n\n  return {\n    update,\n    get: () => Current,\n    instances: () => mountedInstances,\n  }\n}\n\nexport default function proxyReactComponents({\n  filename,\n  components,\n  imports,\n  locals,\n}) {\n  const [React] = imports\n  const [module] = locals\n  const [{ hot }] = locals\n\n  if (!hot || typeof hot.accept !== 'function') {\n    throw new Error(\n      'locals[0] does not appear to be a `module` object with Hot Module ' +\n        'replacement API enabled. You should disable react-transform-hmr in ' +\n        'production by using `env` section in Babel configuration. See the ' +\n        'example in README: https://github.com/gaearon/react-transform-hmr'\n    )\n  }\n\n  const forceUpdater = getForceUpdate(React || window.React)\n\n  const hotReload = instance => {\n    forceUpdater(instance)\n  }\n\n  return function wrapWithProxy(ReactClass, uniqueId) {\n    const { isInFunction = false, displayName = uniqueId } = components[\n      uniqueId\n    ]\n    const uid = filename + '$' + uniqueId\n\n    if (isInFunction) {\n      return ReactClass\n    }\n\n    module.hot.accept(() => {\n      console.log('just accepting', uid)\n    })\n\n    // if existing proxy\n    if (viewProxies[uid]) {\n      reloaded.push(displayName)\n      const instances = viewProxies[uid].update(ReactClass)\n      log('got instances', instances)\n      setTimeout(() => instances.forEach(hotReload))\n    } else {\n      viewProxies[uid] = createProxy(ReactClass)\n    }\n\n    return viewProxies[uid].get()\n  }\n}\n\nsetInterval(() => {\n  if (reloaded.length) {\n    console.log(`[HMR] views: ${reloaded.join(', ')}`)\n    reloaded = []\n  }\n}, 1000)\n"]}