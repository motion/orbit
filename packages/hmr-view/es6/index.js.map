{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["// import createProxy from './proxyClass'\n// import deepForceUpdate from 'react-deep-force-update'\n\n// let viewProxies = {}\n// let reloaded = []\n// let reloadedInstances = 0\n// let lastHotReload = Date.now()\n\n// // so you can hmr your hmr bro\n// // if (module && module.hot && module.hot.accept) {\n// //   module.hot.accept('.', () => {\n// //     viewProxies = module.hot.data.viewProxies || {}\n// //   })\n// //   module.hot.dispose(data => {\n// //     data.viewProxies = viewProxies\n// //   })\n// // }\n\n// // wraps each file\n// export default function proxyReactComponents({\n//   filename,\n//   components,\n//   imports,\n//   locals,\n// }) {\n//   const [React] = imports\n//   const [module] = locals\n//   const [{ hot }] = locals\n\n//   if (!hot || typeof hot.accept !== 'function') {\n//     throw new Error(\n//       'locals[0] does not appear to be a `module` object with Hot Module replacement API enabled. You should disable @mcro/view-hmr',\n//     )\n//   }\n\n//   return function wrapWithProxy(ReactClass, uid) {\n//     // this code is wrapped around and run at runtime\n//     // for every file that looks like it has a react class\n//     const { isInFunction, displayName = uid } = components[uid]\n//     const path = filename + '$' + uid\n\n//     if (isInFunction) {\n//       return ReactClass\n//     }\n\n//     if (module && module.hot && module.hot.accept) {\n//       module.hot.accept('.', () => {}) // to make it a fast hmr\n//     }\n\n//     // if existing proxy\n//     if (viewProxies[path]) {\n//       reloaded.push(displayName)\n//       const instances = viewProxies[path].update(ReactClass)\n//       setTimeout(() => {\n//         instances.forEach(function hotReload(instance) {\n//           if (instance.onWillReload) {\n//             instance.onWillReload(module)\n//           }\n//           deepForceUpdate(instance)\n//           if (instance.forceUpdate) {\n//             instance.forceUpdate()\n//           }\n//           if (instance.onReload) {\n//             instance.onReload(module)\n//           }\n//           reloadedInstances++\n//         })\n//         lastHotReload = Date.now()\n//         window.lastHotReload = lastHotReload\n//       })\n//     } else {\n//       viewProxies[path] = createProxy(ReactClass)\n//     }\n\n//     const view = viewProxies[path].get()\n\n//     view.__react_path = path\n\n//     return viewProxies[path].get()\n//   }\n// }\n\n// setInterval(() => {\n//   if (reloaded.length) {\n//     console.log(`[HMR] ${reloaded.join(', ')}, ${reloadedInstances} instances`)\n//     if (window.Black) {\n//       window.Black.view.emit('hmr')\n//     }\n//     reloaded = []\n//     reloadedInstances = 0\n//   }\n// }, 1000)\n"]}