#!/bin/bash

. $(dirname $0)/__common
cd $ROOT

echo "namespace $NAMESPACE"

COMMAND=$1

if [ "$COMMAND" = "generate" ]; then
  kompose -f docker-compose.prod.yml convert -o infra/generated
elif [ "$COMMAND" = "bootstrap" ]; then
  kubectl create secret docker-registry $DOCKER_SECRET \
    --docker-server=$DOCKER_REGISTRY_SERVER \
    --docker-username=$DOCKER_USER \
    --docker-password=$DOCKER_PASSWORD \
    --docker-email=$DOCKER_EMAIL
elif [ "$COMMAND" = "start" ]; then
  kubectl create -f infra/kubes
elif [ "$COMMAND" = "stop" ]; then
  kubectl delete -f infra/kubes
elif [ "$COMMAND" = "restart" ]; then
  kubectl delete -f infra/kubes
  kubectl create -f infra/kubes
elif [ "$COMMAND" = "logs" ]; then
  # logs
  POD=$(kubectl get pods | grep $2 | awk '{print $1}')
  kubectl logs $POD
elif [ "$COMMAND" = "exec" ]; then
  # exec
  POD=$(kubectl get pods | grep $2 | awk '{print $1}')
  kubectl exec $POD $3 $4 $5 $6
elif [ "$COMMAND" = "build" ]; then
  # build

  APP=$2

  buildapi() {
    docker build -t motion/starter-api -f infra/images/api.dockerfile .
    docker push motion/starter-api
  }

  buildweb() {
    docker build -t motion/starter-web -f infra/images/web.dockerfile .
    docker push motion/starter-web
  }

  if [ "$COMMAND" = "all" ]; then
    buildapi &
    buildweb
    fg
  elif [ "$COMMAND" = "web" ]; then
    buildweb
  elif [ "$COMMAND" = "api" ]; then
    buildapi
  fi

  # REPO=starter
  # eval $(minikube docker-env)
  # docker image build -t starter_api:latest -f infra/images/api.dockerfile .
  # kubectl set image $REPO starter-api=starter_api:latest
fi
