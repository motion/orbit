export declare type alignContent = 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'stretch';
export declare type alignItems = 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
export declare type alignSelf = 'auto' | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
export declare type all = 'initial' | 'inherit' | 'unset';
export declare type animation = singleAnimation;
export declare type animationDelay = number;
export declare type animationDirection = singleAnimationDirection;
export declare type animationDuration = string | number;
export declare type animationFillMode = singleAnimationFillMode;
export declare type animationIterationCount = singleAnimationIterationCount;
export declare type animationName = singleAnimationName;
export declare type animationPlayState = singleAnimationPlayState;
export declare type animationTimingFunction = singleTimingFunction;
export declare type appearance = 'auto' | 'none';
export declare type azimuth = number | string | 'leftwards' | 'rightwards';
export declare type backdropFilter = 'none' | string;
export declare type backfaceVisibility = 'visible' | 'hidden';
declare type backgroundSyntax = {
    attachment?: attachment;
    color?: color;
    image?: bgImage;
    position?: string;
    repeat?: repeatStyle;
};
export declare type background = string | finalBgLayer | backgroundSyntax;
export declare type backgroundAttachment = attachment;
export declare type backgroundBlendMode = blendMode;
export declare type backgroundClip = box;
export declare type backgroundColor = color;
export declare type backgroundImage = bgImage;
export declare type backgroundOrigin = box;
export declare type backgroundPosition = string;
export declare type backgroundPositionX = string;
export declare type backgroundPositionY = string;
export declare type backgroundRepeat = repeatStyle;
export declare type backgroundSize = bgSize;
export declare type blockSize = width;
declare type borderSyntax = {
    width?: borderWidth;
    style?: brStyle;
    color?: color;
};
export declare type border = borderWidth | brStyle | color | borderSyntax;
export declare type borderBlockEnd = borderWidth | borderStyle | color;
export declare type borderBlockEndColor = color;
export declare type borderBlockEndStyle = borderStyle;
export declare type borderBlockEndWidth = borderWidth;
export declare type borderBlockStart = borderWidth | borderStyle | color;
export declare type borderBlockStartColor = color;
export declare type borderBlockStartStyle = borderStyle;
export declare type borderBlockStartWidth = borderWidth;
export declare type borderBottomLeftRadius = lengthPercentage;
export declare type borderBottomRightRadius = lengthPercentage;
export declare type borderBottomStyle = brStyle;
export declare type borderBottomWidth = borderWidth;
export declare type borderCollapse = 'collapse' | 'separate';
export declare type borderColor = color;
export declare type borderImage = borderImageSource | borderImageSlice | string | borderImageRepeat;
export declare type borderImageOutset = string;
export declare type borderImageRepeat = string;
export declare type borderImageSlice = string | number | 'fill';
export declare type borderImageSource = 'none' | string;
export declare type borderImageWidth = string;
export declare type borderInlineEnd = borderWidth | borderStyle | color;
export declare type borderInlineEndColor = color;
export declare type borderInlineEndStyle = borderStyle;
export declare type borderInlineEndWidth = borderWidth;
export declare type borderInlineStart = borderWidth | borderStyle | color;
export declare type borderInlineStartColor = color;
export declare type borderInlineStartStyle = borderStyle;
export declare type borderInlineStartWidth = borderWidth;
export declare type borderLeftColor = color;
export declare type borderLeftStyle = brStyle;
export declare type borderLeftWidth = borderWidth;
export declare type borderRightColor = color;
export declare type borderRightStyle = brStyle;
export declare type borderRightWidth = borderWidth;
export declare type borderRadius = lengthPercentage;
export declare type borderSpacing = number;
export declare type borderStyle = brStyle;
export declare type borderTopLeftRadius = lengthPercentage;
export declare type borderTopRightRadius = lengthPercentage;
export declare type borderTopStyle = brStyle;
export declare type borderTopWidth = borderWidth;
export declare type boxAlign = 'start' | 'center' | 'end' | 'baseline' | 'stretch';
export declare type boxDecorationBreak = 'slice' | 'clone';
export declare type boxDirection = 'normal' | 'reverse' | 'inherit';
export declare type boxFlex = number;
export declare type boxFlexGroup = number;
export declare type boxLines = 'single' | 'multiple';
export declare type boxOrdinalGroup = number;
export declare type boxOrient = 'horizontal' | 'vertical' | 'inline-axis' | 'block-axis' | 'inherit';
export declare type boxPack = 'start' | 'center' | 'end' | 'justify';
declare type boxShadowSyntax = {
    x?: number;
    y?: number;
    blur?: number;
    spread?: number;
    color?: string;
    inset?: boolean;
};
export declare type boxShadow = 'none' | string | boxShadowSyntax | Array<string | boxShadowSyntax>;
export declare type boxSizing = 'content-box' | 'border-box';
export declare type boxSuppress = 'show' | 'discard' | 'hide';
export declare type breakAfter = 'auto' | 'avoid' | 'avoid-page' | 'page' | 'left' | 'right' | 'recto' | 'verso' | 'avoid-column' | 'column' | 'avoid-region' | 'region';
export declare type breakBefore = 'auto' | 'avoid' | 'avoid-page' | 'page' | 'left' | 'right' | 'recto' | 'verso' | 'avoid-column' | 'column' | 'avoid-region' | 'region';
export declare type breakInside = 'auto' | 'avoid' | 'avoid-page' | 'avoid-column' | 'avoid-region';
export declare type captionSide = 'top' | 'bottom' | 'block-start' | 'block-end' | 'inline-start' | 'inline-end';
export declare type clear = 'none' | 'left' | 'right' | 'both' | 'inline-start' | 'inline-end';
export declare type clip = string | 'auto';
export declare type clipPath = string | 'none';
export declare type columnCount = number | 'auto';
export declare type columnFill = 'auto' | 'balance';
export declare type columnGap = number | 'normal';
export declare type columnRule = columnRuleWidth | columnRuleStyle | columnRuleColor;
export declare type columnRuleColor = color;
export declare type columnRuleStyle = brStyle;
export declare type columnRuleWidth = borderWidth;
export declare type columnSpan = 'none' | 'all';
export declare type columnWidth = number | 'auto';
export declare type columns = columnWidth | columnCount;
export declare type contain = 'none' | 'strict' | 'content' | string;
export declare type content = string;
export declare type counterIncrement = string | 'none';
export declare type counterReset = string | 'none';
export declare type cursor = 'auto' | 'default' | 'none' | 'context-menu' | 'help' | 'pointer' | 'progress' | 'wait' | 'cell' | 'crosshair' | 'text' | 'vertical-text' | 'alias' | 'copy' | 'move' | 'no-drop' | 'not-allowed' | 'e-resize' | 'n-resize' | 'ne-resize' | 'nw-resize' | 's-resize' | 'se-resize' | 'sw-resize' | 'w-resize' | 'ew-resize' | 'ns-resize' | 'nesw-resize' | 'nwse-resize' | 'col-resize' | 'row-resize' | 'all-scroll' | 'zoom-in' | 'zoom-out' | 'grab' | 'grabbing' | '-webkit-grab' | '-webkit-grabbing';
export declare type direction = 'ltr' | 'rtl';
export declare type display = 'none' | 'inline' | 'block' | 'list-item' | 'inline-list-item' | 'inline-block' | 'inline-table' | 'table' | 'table-cell' | 'table-column' | 'table-column-group' | 'table-footer-group' | 'table-header-group' | 'table-row' | 'table-row-group' | 'flex' | 'inline-flex' | 'grid' | 'inline-grid' | 'run-in' | 'ruby' | 'ruby-base' | 'ruby-text' | 'ruby-base-container' | 'ruby-text-container' | 'contents';
export declare type displayInside = 'auto' | 'block' | 'table' | 'flex' | 'grid' | 'ruby';
export declare type displayList = 'none' | 'list-item';
export declare type displayOutside = 'block-level' | 'inline-level' | 'run-in' | 'contents' | 'none' | 'table-row-group' | 'table-header-group' | 'table-footer-group' | 'table-row' | 'table-cell' | 'table-column-group' | 'table-column' | 'table-caption' | 'ruby-base' | 'ruby-text' | 'ruby-base-container' | 'ruby-text-container';
export declare type emptyCells = 'show' | 'hide';
export declare type filter = 'none' | string;
export declare type flex = 'none' | string | number;
export declare type flexBasis = 'content' | number | string;
export declare type flexDirection = 'row' | 'row-reverse' | 'column' | 'column-reverse';
export declare type flexFlow = flexDirection | flexWrap;
export declare type flexGrow = number;
export declare type flexShrink = number;
export declare type flexWrap = 'nowrap' | 'wrap' | 'wrap-reverse';
export declare type float = 'left' | 'right' | 'none' | 'inline-start' | 'inline-end';
export declare type font = string | 'caption' | 'icon' | 'menu' | 'message-box' | 'small-caption' | 'status-bar';
export declare type fontFamily = string;
export declare type fontFeatureSettings = 'normal' | string;
export declare type fontKerning = 'auto' | 'normal' | 'none';
export declare type fontLanguageOverride = 'normal' | string;
export declare type fontSize = absoluteSize | relativeSize | lengthPercentage;
export declare type fontSizeAdjust = 'none' | number;
export declare type fontStretch = 'normal' | 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded';
export declare type fontStyle = 'normal' | 'italic' | 'oblique';
export declare type fontSynthesis = 'none' | string;
export declare type fontVariant = 'normal' | 'none' | string;
export declare type fontVariantAlternates = 'normal' | string;
export declare type fontVariantCaps = 'normal' | 'small-caps' | 'all-small-caps' | 'petite-caps' | 'all-petite-caps' | 'unicase' | 'titling-caps';
export declare type fontVariantEastAsian = 'normal' | string;
export declare type fontVariantLigatures = 'normal' | 'none' | string;
export declare type fontVariantNumeric = 'normal' | string;
export declare type fontVariantPosition = 'normal' | 'sub' | 'super';
export declare type fontWeight = 'inherit' | 'normal' | 'bold' | 'bolder' | 'lighter' | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
export declare type grid = gridTemplate | string;
export declare type gridArea = gridLine | string;
export declare type gridAutoColumns = trackSize;
export declare type gridAutoFlow = string | 'dense';
export declare type gridAutoRows = trackSize;
export declare type gridColumn = gridLine | string;
export declare type gridColumnEnd = gridLine;
export declare type gridColumnGap = lengthPercentage;
export declare type gridColumnStart = gridLine;
export declare type gridGap = gridRowGap | gridColumnGap;
export declare type gridRow = gridLine | string;
export declare type gridRowEnd = gridLine;
export declare type gridRowGap = lengthPercentage;
export declare type gridRowStart = gridLine;
export declare type gridTemplate = 'none' | 'subgrid' | string;
export declare type gridTemplateAreas = 'none' | string;
export declare type gridTemplateColumns = 'none' | 'subgrid' | string;
export declare type gridTemplateRows = 'none' | 'subgrid' | string;
export declare type hyphens = 'none' | 'manual' | 'auto';
export declare type imageOrientation = 'from-image' | number | string;
export declare type imageRendering = 'auto' | 'crisp-edges' | 'pixelated' | 'optimizeSpeed' | 'optimizeQuality' | string;
export declare type imageResolution = string | 'snap';
export declare type imeMode = 'auto' | 'normal' | 'active' | 'inactive' | 'disabled';
export declare type initialLetter = 'normal' | string;
export declare type initialLetterAlign = string;
export declare type inlineSize = width;
export declare type isolation = 'auto' | 'isolate';
export declare type justifyContent = 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around';
export declare type letterSpacing = 'normal' | lengthPercentage;
export declare type lineBreak = 'auto' | 'loose' | 'normal' | 'strict';
export declare type lineHeight = 'normal' | number | string;
export declare type listStyle = listStyleType | listStylePosition | listStyleImage;
export declare type listStyleImage = string | 'none';
export declare type listStylePosition = 'inside' | 'outside';
export declare type listStyleType = string | 'none';
declare type marginSyntax = Array<number | string>;
export declare type margin = number | string | marginSyntax;
export declare type marginBlockEnd = marginLeft;
export declare type marginBlockStart = marginLeft;
export declare type marginBottom = number | string | 'auto';
export declare type marginInlineEnd = marginLeft;
export declare type marginInlineStart = marginLeft;
export declare type marginLeft = number | string | 'auto';
export declare type marginRight = number | string | 'auto';
export declare type marginTop = number | string | 'auto';
export declare type markerOffset = number | 'auto';
export declare type mask = maskLayer;
export declare type maskClip = string;
export declare type maskComposite = compositeOperator;
export declare type maskMode = maskingMode;
export declare type maskOrigin = geometryBox;
export declare type maskPosition = string;
export declare type maskRepeat = repeatStyle;
export declare type maskSize = bgSize;
export declare type maskType = 'luminance' | 'alpha';
export declare type maxBlockSize = maxWidth;
export declare type maxHeight = number | string | 'none' | 'max-content' | 'min-content' | 'fit-content' | 'fill-available';
export declare type maxInlineSize = maxWidth;
export declare type maxWidth = number | string | 'none' | 'max-content' | 'min-content' | 'fit-content' | 'fill-available';
export declare type minBlockSize = minWidth;
export declare type minHeight = number | string | 'auto' | 'max-content' | 'min-content' | 'fit-content' | 'fill-available';
export declare type minInlineSize = minWidth;
export declare type minWidth = number | string | 'auto' | 'max-content' | 'min-content' | 'fit-content' | 'fill-available';
export declare type mixBlendMode = blendMode;
export declare type motion = motionPath | motionOffset | motionRotation;
export declare type motionOffset = lengthPercentage;
export declare type motionPath = string | geometryBox | 'none';
export declare type motionRotation = string | number;
export declare type objectFit = 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
export declare type objectPosition = string;
export declare type offsetBlockEnd = string;
export declare type offsetBlockStart = string;
export declare type offsetInlineEnd = string;
export declare type offsetInlineStart = string;
export declare type opacity = number;
export declare type order = number;
export declare type orphans = number;
declare type outlineSyntax = {
    width?: borderWidth;
    style?: brStyle;
    color?: color;
};
export declare type outline = string | outlineSyntax;
export declare type outlineColor = color | 'invert';
export declare type outlineOffset = number;
export declare type outlineStyle = 'auto' | brStyle;
export declare type outlineWidth = borderWidth;
export declare type overflow = 'visible' | 'hidden' | 'scroll' | 'auto';
export declare type overflowClipBox = 'padding-box' | 'content-box';
export declare type overflowWrap = 'normal' | 'break-word';
export declare type overflowX = 'visible' | 'hidden' | 'scroll' | 'auto';
export declare type overflowY = 'visible' | 'hidden' | 'scroll' | 'auto';
declare type paddingSyntax = {
    vertical?: number | string;
    horizontal?: number | string;
    top?: number | string;
    left?: number | string;
    right?: number | string;
    bottom?: number | string;
};
export declare type padding = number | string | paddingSyntax;
export declare type paddingBlockEnd = paddingLeft;
export declare type paddingBlockStart = paddingLeft;
export declare type paddingBottom = number | string;
export declare type paddingInlineEnd = paddingLeft;
export declare type paddingInlineStart = paddingLeft;
export declare type paddingLeft = number | string;
export declare type paddingRight = number | string;
export declare type paddingTop = number | string;
export declare type pageBreakAfter = 'auto' | 'always' | 'avoid' | 'left' | 'right';
export declare type pageBreakBefore = 'auto' | 'always' | 'avoid' | 'left' | 'right';
export declare type pageBreakInside = 'auto' | 'avoid';
export declare type perspective = 'none' | number;
export declare type perspectiveOrigin = string;
export declare type pointerEvents = 'auto' | 'none' | 'visiblePainted' | 'visibleFill' | 'visibleStroke' | 'visible' | 'painted' | 'fill' | 'stroke' | 'all' | 'inherit';
export declare type position = 'static' | 'relative' | 'absolute' | 'sticky' | 'fixed';
export declare type quotes = string | 'none';
export declare type resize = 'none' | 'both' | 'horizontal' | 'vertical';
export declare type rubyAlign = 'start' | 'center' | 'space-between' | 'space-around';
export declare type rubyMerge = 'separate' | 'collapse' | 'auto';
export declare type rubyPosition = 'over' | 'under' | 'inter-character';
export declare type scrollBehavior = 'auto' | 'smooth';
export declare type scrollSnapCoordinate = 'none' | string;
export declare type scrollSnapDestination = string;
export declare type scrollSnapPointsX = 'none' | string;
export declare type scrollSnapPointsY = 'none' | string;
export declare type scrollSnapType = 'none' | 'mandatory' | 'proximity';
export declare type scrollSnapTypeX = 'none' | 'mandatory' | 'proximity';
export declare type scrollSnapTypeY = 'none' | 'mandatory' | 'proximity';
export declare type shapeImageThreshold = number;
export declare type shapeMargin = lengthPercentage;
export declare type shapeOutside = 'none' | shapeBox | string;
export declare type tabSize = number;
export declare type tableLayout = 'auto' | 'fixed';
export declare type textAlign = 'start' | 'end' | 'left' | 'right' | 'center' | 'justify' | 'match-parent';
export declare type textAlignLast = 'auto' | 'start' | 'end' | 'left' | 'right' | 'center' | 'justify';
export declare type textCombineUpright = 'none' | 'all' | string;
export declare type textDecoration = textDecorationLine | textDecorationStyle | textDecorationColor;
export declare type textDecorationColor = color;
export declare type textDecorationLine = 'none' | string;
export declare type textDecorationSkip = 'none' | string;
export declare type textDecorationStyle = 'solid' | 'double' | 'dotted' | 'dashed' | 'wavy';
export declare type textEmphasis = textEmphasisStyle | textEmphasisColor;
export declare type textEmphasisColor = color;
export declare type textEmphasisPosition = string;
export declare type textEmphasisStyle = 'none' | string;
export declare type textIndent = string | 'hanging' | 'each-line';
export declare type textOrientation = 'mixed' | 'upright' | 'sideways';
export declare type textOverflow = string;
export declare type textRendering = 'auto' | 'optimizeSpeed' | 'optimizeLegibility' | 'geometricPrecision';
declare type textShadowSyntax = {
    x?: number;
    y?: number;
    blur?: number;
    color?: string;
};
export declare type textShadow = 'none' | string | textShadowSyntax;
export declare type textSizeAdjust = 'none' | 'auto' | string;
export declare type textTransform = 'none' | 'capitalize' | 'uppercase' | 'lowercase' | 'full-width';
export declare type textUnderlinePosition = 'auto' | string;
export declare type touchAction = 'auto' | 'none' | string | 'manipulation';
declare type transformSyntax = {
    x?: number | string;
    y?: number | string;
    z?: number | string;
    rotate?: string;
    scaleX?: number | string;
    scaleY?: number | string;
    scaleZ?: number | string;
};
export declare type transform = 'none' | string | transformSyntax;
export declare type transformBox = 'border-box' | 'fill-box' | 'view-box';
export declare type transformOrigin = string | number;
export declare type transformStyle = 'flat' | 'preserve-3d';
declare type transitionSyntax = {
    property?: 'none' | singleTransitionProperty;
    duration?: number;
    timingFunction?: singleTransitionTimingFunction;
    delay?: number;
};
export declare type transition = singleTransition | transitionSyntax | Array<singleTransition | transitionSyntax>;
export declare type transitionDelay = number;
export declare type transitionDuration = number;
export declare type transitionProperty = 'none' | singleTransitionProperty;
export declare type transitionTimingFunction = singleTransitionTimingFunction;
export declare type unicodeBidi = 'normal' | 'embed' | 'isolate' | 'bidi-override' | 'isolate-override' | 'plaintext';
export declare type userSelect = 'auto' | 'text' | 'none' | 'contain' | 'all';
export declare type verticalAlign = 'baseline' | 'sub' | 'super' | 'text-top' | 'text-bottom' | 'middle' | 'top' | 'bottom' | string | number;
export declare type visibility = 'visible' | 'hidden' | 'collapse';
export declare type whiteSpace = 'normal' | 'pre' | 'nowrap' | 'pre-wrap' | 'pre-line';
export declare type widows = number;
export declare type width = string | 'available' | 'min-content' | 'max-content' | 'fit-content' | 'auto';
export declare type willChange = 'auto' | animatableFeature;
export declare type wordBreak = 'normal' | 'break-all' | 'keep-all' | nonStandardWordBreak;
export declare type wordSpacing = 'normal' | lengthPercentage;
export declare type wordWrap = 'normal' | 'break-word';
export declare type writingMode = 'horizontal-tb' | 'vertical-rl' | 'vertical-lr' | 'sideways-rl' | 'sideways-lr' | svgWritingMode;
export declare type zIndex = 'auto' | number;
export declare type alignmentBaseline = 'auto' | 'baseline' | 'before-edge' | 'text-before-edge' | 'middle' | 'central' | 'after-edge' | 'text-after-edge' | 'ideographic' | 'alphabetic' | 'hanging' | 'mathematical';
export declare type baselineShift = 'baseline' | 'sub' | 'super' | svgLength;
export declare type behavior = string;
export declare type clipRule = 'nonzero' | 'evenodd';
export declare type cue = cueBefore | cueAfter;
export declare type cueAfter = string | number | 'none';
export declare type cueBefore = string | number | 'none';
export declare type dominantBaseline = 'auto' | 'use-script' | 'no-change' | 'reset-size' | 'ideographic' | 'alphabetic' | 'hanging' | 'mathematical' | 'central' | 'middle' | 'text-after-edge' | 'text-before-edge';
export declare type fill = paint;
export declare type fillOpacity = number;
export declare type fillRule = 'nonzero' | 'evenodd';
export declare type glyphOrientationHorizontal = number;
export declare type glyphOrientationVertical = number;
export declare type kerning = 'auto' | svgLength;
export declare type marker = 'none' | string;
export declare type markerEnd = 'none' | string;
export declare type markerMid = 'none' | string;
export declare type markerStart = 'none' | string;
export declare type pause = pauseBefore | pauseAfter;
export declare type pauseAfter = number | 'none' | 'x-weak' | 'weak' | 'medium' | 'strong' | 'x-strong';
export declare type pauseBefore = number | 'none' | 'x-weak' | 'weak' | 'medium' | 'strong' | 'x-strong';
export declare type rest = restBefore | restAfter;
export declare type restAfter = number | 'none' | 'x-weak' | 'weak' | 'medium' | 'strong' | 'x-strong';
export declare type restBefore = number | 'none' | 'x-weak' | 'weak' | 'medium' | 'strong' | 'x-strong';
export declare type shapeRendering = 'auto' | 'optimizeSpeed' | 'crispEdges' | 'geometricPrecision';
export declare type src = string;
export declare type speak = 'auto' | 'none' | 'normal';
export declare type speakAs = 'normal' | 'spell-out' | 'digits' | string;
export declare type stroke = paint;
export declare type strokeDasharray = 'none' | string;
export declare type strokeDashoffset = svgLength;
export declare type strokeLinecap = 'butt' | 'round' | 'square';
export declare type strokeLinejoin = 'miter' | 'round' | 'bevel';
export declare type strokeMiterlimit = number;
export declare type strokeOpacity = number;
export declare type strokeWidth = svgLength;
export declare type textAnchor = 'start' | 'middle' | 'end';
export declare type unicodeRange = string;
export declare type voiceBalance = number | 'left' | 'center' | 'right' | 'leftwards' | 'rightwards';
export declare type voiceDuration = 'auto' | number;
export declare type voiceFamily = string | 'preserve';
export declare type voicePitch = number | 'absolute' | string;
export declare type voiceRange = number | 'absolute' | string;
export declare type voiceRate = string;
export declare type voiceStress = 'normal' | 'strong' | 'moderate' | 'none' | 'reduced';
export declare type voiceVolume = 'silent' | string;
export declare type zoom = 'normal' | 'reset' | number | string;
export declare type absoluteSize = 'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
export declare type animatableFeature = 'scroll-position' | 'contents' | string;
export declare type attachment = 'scroll' | 'fixed' | 'local';
export declare type bgImage = 'none' | string;
export declare type bgSize = string | 'cover' | 'contain';
export declare type box = 'border-box' | 'padding-box' | 'content-box';
export declare type brStyle = 'none' | 'hidden' | 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset';
export declare type borderWidth = number | 'thin' | 'medium' | 'thick' | string;
export declare type color = string;
export declare type compositeStyle = 'clear' | 'copy' | 'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'xor';
export declare type compositeOperator = 'add' | 'subtract' | 'intersect' | 'exclude';
export declare type finalBgLayer = bgImage | string | repeatStyle | attachment | box | backgroundColor;
export declare type geometryBox = shapeBox | 'fill-box' | 'stroke-box' | 'view-box';
export declare type gridLine = 'auto' | string;
export declare type lengthPercentage = number | string;
export declare type maskLayer = maskReference | maskingMode | string | repeatStyle | geometryBox | compositeOperator;
export declare type maskReference = 'none' | string;
export declare type maskingMode = 'alpha' | 'luminance' | 'match-source';
export declare type relativeSize = 'larger' | 'smaller';
export declare type repeatStyle = 'repeat-x' | 'repeat-y' | string;
export declare type shapeBox = box | 'margin-box';
export declare type singleAnimation = number | singleTimingFunction | singleAnimationIterationCount | singleAnimationDirection | singleAnimationFillMode | singleAnimationPlayState | singleAnimationName;
export declare type singleAnimationDirection = 'normal' | 'reverse' | 'alternate' | 'alternate-reverse';
export declare type singleAnimationFillMode = 'none' | 'forwards' | 'backwards' | 'both';
export declare type singleAnimationIterationCount = number;
export declare type singleAnimationName = 'none' | string;
export declare type singleAnimationPlayState = 'running' | 'paused';
export declare type singleTimingFunction = singleTransitionTimingFunction;
export declare type singleTransition = singleTransitionTimingFunction | string | number;
export declare type singleTransitionTimingFunction = 'ease' | 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'step-start' | 'step-end' | string;
export declare type singleTransitionProperty = 'all' | string;
export declare type trackBreadth = lengthPercentage | string | 'min-content' | 'max-content' | 'auto';
export declare type trackSize = trackBreadth | string;
export declare type nonStandardWordBreak = 'break-word';
export declare type blendMode = 'normal' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity';
export declare type maskImage = maskReference;
export declare type outlineRadius = borderRadius;
export declare type paint = 'none' | 'currentColor' | color | string;
export declare type svgLength = string | number;
export declare type svgWritingMode = 'lr-tb' | 'rl-tb' | 'tb-rl' | 'lr' | 'rl' | 'tb';
export declare type CSSPropertyValue<Value> = Value;
export declare type CSSPropertySet = {
    alignContent?: CSSPropertyValue<alignContent>;
    alignItems?: CSSPropertyValue<alignItems>;
    alignSelf?: CSSPropertyValue<alignSelf>;
    all?: CSSPropertyValue<all>;
    animation?: CSSPropertyValue<animation>;
    animationDelay?: CSSPropertyValue<animationDelay>;
    animationDirection?: CSSPropertyValue<animationDirection>;
    animationDuration?: CSSPropertyValue<animationDuration>;
    animationFillMode?: CSSPropertyValue<animationFillMode>;
    animationIterationCount?: CSSPropertyValue<animationIterationCount>;
    animationName?: CSSPropertyValue<animationName>;
    animationPlayState?: CSSPropertyValue<animationPlayState>;
    animationTimingFunction?: CSSPropertyValue<animationTimingFunction>;
    appearance?: CSSPropertyValue<appearance>;
    azimuth?: CSSPropertyValue<azimuth>;
    backdropFilter?: CSSPropertyValue<backdropFilter>;
    backfaceVisibility?: CSSPropertyValue<backfaceVisibility>;
    background?: CSSPropertyValue<background>;
    backgroundAttachment?: CSSPropertyValue<backgroundAttachment>;
    backgroundBlendMode?: CSSPropertyValue<backgroundBlendMode>;
    backgroundClip?: CSSPropertyValue<backgroundClip>;
    backgroundColor?: CSSPropertyValue<backgroundColor>;
    backgroundImage?: CSSPropertyValue<backgroundImage>;
    backgroundOrigin?: CSSPropertyValue<backgroundOrigin>;
    backgroundPosition?: CSSPropertyValue<backgroundPosition>;
    backgroundPositionX?: CSSPropertyValue<backgroundPositionX>;
    backgroundPositionY?: CSSPropertyValue<backgroundPositionY>;
    backgroundRepeat?: CSSPropertyValue<backgroundRepeat>;
    backgroundSize?: CSSPropertyValue<backgroundSize>;
    blockSize?: CSSPropertyValue<blockSize>;
    border?: CSSPropertyValue<border>;
    borderBlockEnd?: CSSPropertyValue<borderBlockEnd>;
    borderBlockEndColor?: CSSPropertyValue<borderBlockEndColor>;
    borderBlockEndStyle?: CSSPropertyValue<borderBlockEndStyle>;
    borderBlockEndWidth?: CSSPropertyValue<borderBlockEndWidth>;
    borderBlockStart?: CSSPropertyValue<borderBlockStart>;
    borderBlockStartColor?: CSSPropertyValue<borderBlockStartColor>;
    borderBlockStartStyle?: CSSPropertyValue<borderBlockStartStyle>;
    borderBlockStartWidth?: CSSPropertyValue<borderBlockStartWidth>;
    borderBottom?: CSSPropertyValue<border>;
    borderBottomColor?: CSSPropertyValue<color>;
    borderBottomLeftRadius?: CSSPropertyValue<borderBottomLeftRadius>;
    borderBottomRightRadius?: CSSPropertyValue<borderBottomRightRadius>;
    borderBottomStyle?: CSSPropertyValue<borderBottomStyle>;
    borderBottomWidth?: CSSPropertyValue<borderBottomWidth>;
    borderCollapse?: CSSPropertyValue<borderCollapse>;
    borderColor?: CSSPropertyValue<borderColor>;
    borderImage?: CSSPropertyValue<borderImage>;
    borderImageOutset?: CSSPropertyValue<borderImageOutset>;
    borderImageRepeat?: CSSPropertyValue<borderImageRepeat>;
    borderImageSlice?: CSSPropertyValue<borderImageSlice>;
    borderImageSource?: CSSPropertyValue<borderImageSource>;
    borderImageWidth?: CSSPropertyValue<borderImageWidth>;
    borderInlineEnd?: CSSPropertyValue<borderInlineEnd>;
    borderInlineEndColor?: CSSPropertyValue<borderInlineEndColor>;
    borderInlineEndStyle?: CSSPropertyValue<borderInlineEndStyle>;
    borderInlineEndWidth?: CSSPropertyValue<borderInlineEndWidth>;
    borderInlineStart?: CSSPropertyValue<borderInlineStart>;
    borderInlineStartColor?: CSSPropertyValue<borderInlineStartColor>;
    borderInlineStartStyle?: CSSPropertyValue<borderInlineStartStyle>;
    borderInlineStartWidth?: CSSPropertyValue<borderInlineStartWidth>;
    borderLeft?: CSSPropertyValue<border>;
    borderLeftColor?: CSSPropertyValue<borderLeftColor>;
    borderLeftStyle?: CSSPropertyValue<borderLeftStyle>;
    borderLeftWidth?: CSSPropertyValue<borderLeftWidth>;
    borderRadius?: CSSPropertyValue<borderRadius>;
    borderRight?: CSSPropertyValue<border>;
    borderRightColor?: CSSPropertyValue<borderRightColor>;
    borderRightStyle?: CSSPropertyValue<borderRightStyle>;
    borderRightWidth?: CSSPropertyValue<borderRightWidth>;
    borderSpacing?: CSSPropertyValue<borderSpacing>;
    borderStyle?: CSSPropertyValue<borderStyle>;
    borderTop?: CSSPropertyValue<border>;
    borderTopColor?: CSSPropertyValue<color>;
    borderTopLeftRadius?: CSSPropertyValue<borderTopLeftRadius>;
    borderTopRightRadius?: CSSPropertyValue<borderTopRightRadius>;
    borderTopStyle?: CSSPropertyValue<borderTopStyle>;
    borderTopWidth?: CSSPropertyValue<borderTopWidth>;
    borderWidth?: CSSPropertyValue<borderWidth>;
    bottom?: CSSPropertyValue<number | string>;
    boxAlign?: CSSPropertyValue<boxAlign>;
    boxDecorationBreak?: CSSPropertyValue<boxDecorationBreak>;
    boxDirection?: CSSPropertyValue<boxDirection>;
    boxFlex?: CSSPropertyValue<boxFlex>;
    boxFlexGroup?: CSSPropertyValue<boxFlexGroup>;
    boxLines?: CSSPropertyValue<boxLines>;
    boxOrdinalGroup?: CSSPropertyValue<boxOrdinalGroup>;
    boxOrient?: CSSPropertyValue<boxOrient>;
    boxPack?: CSSPropertyValue<boxPack>;
    boxShadow?: CSSPropertyValue<boxShadow>;
    boxSizing?: CSSPropertyValue<boxSizing>;
    boxSuppress?: CSSPropertyValue<boxSuppress>;
    breakAfter?: CSSPropertyValue<breakAfter>;
    breakBefore?: CSSPropertyValue<breakBefore>;
    breakInside?: CSSPropertyValue<breakInside>;
    captionSide?: CSSPropertyValue<captionSide>;
    clear?: CSSPropertyValue<clear>;
    clip?: CSSPropertyValue<clip>;
    clipPath?: CSSPropertyValue<clipPath>;
    color?: CSSPropertyValue<color>;
    columnCount?: CSSPropertyValue<columnCount>;
    columnFill?: CSSPropertyValue<columnFill>;
    columnGap?: CSSPropertyValue<columnGap>;
    columnRule?: CSSPropertyValue<columnRule>;
    columnRuleColor?: CSSPropertyValue<columnRuleColor>;
    columnRuleStyle?: CSSPropertyValue<columnRuleStyle>;
    columnRuleWidth?: CSSPropertyValue<columnRuleWidth>;
    columnSpan?: CSSPropertyValue<columnSpan>;
    columnWidth?: CSSPropertyValue<columnWidth>;
    columns?: CSSPropertyValue<columns>;
    contain?: CSSPropertyValue<contain>;
    content?: CSSPropertyValue<content>;
    counterIncrement?: CSSPropertyValue<counterIncrement>;
    counterReset?: CSSPropertyValue<counterReset>;
    cursor?: CSSPropertyValue<cursor>;
    direction?: CSSPropertyValue<direction>;
    display?: CSSPropertyValue<display>;
    displayInside?: CSSPropertyValue<displayInside>;
    displayList?: CSSPropertyValue<displayList>;
    displayOutside?: CSSPropertyValue<displayOutside>;
    emptyCells?: CSSPropertyValue<emptyCells>;
    filter?: CSSPropertyValue<filter>;
    flex?: CSSPropertyValue<flex>;
    flexBasis?: CSSPropertyValue<flexBasis>;
    flexDirection?: CSSPropertyValue<flexDirection>;
    flexFlow?: CSSPropertyValue<flexFlow>;
    flexGrow?: CSSPropertyValue<flexGrow>;
    flexShrink?: CSSPropertyValue<flexShrink>;
    flexWrap?: CSSPropertyValue<flexWrap>;
    float?: CSSPropertyValue<float>;
    font?: CSSPropertyValue<font>;
    fontFamily?: CSSPropertyValue<fontFamily>;
    fontFeatureSettings?: CSSPropertyValue<fontFeatureSettings>;
    fontKerning?: CSSPropertyValue<fontKerning>;
    fontLanguageOverride?: CSSPropertyValue<fontLanguageOverride>;
    fontSize?: CSSPropertyValue<fontSize>;
    fontSizeAdjust?: CSSPropertyValue<fontSizeAdjust>;
    fontStretch?: CSSPropertyValue<fontStretch>;
    fontStyle?: CSSPropertyValue<fontStyle>;
    fontSynthesis?: CSSPropertyValue<fontSynthesis>;
    fontVariant?: CSSPropertyValue<fontVariant>;
    fontVariantAlternates?: CSSPropertyValue<fontVariantAlternates>;
    fontVariantCaps?: CSSPropertyValue<fontVariantCaps>;
    fontVariantEastAsian?: CSSPropertyValue<fontVariantEastAsian>;
    fontVariantLigatures?: CSSPropertyValue<fontVariantLigatures>;
    fontVariantNumeric?: CSSPropertyValue<fontVariantNumeric>;
    fontVariantPosition?: CSSPropertyValue<fontVariantPosition>;
    fontWeight?: CSSPropertyValue<fontWeight>;
    grid?: CSSPropertyValue<grid>;
    gridArea?: CSSPropertyValue<gridArea>;
    gridAutoColumns?: CSSPropertyValue<gridAutoColumns>;
    gridAutoFlow?: CSSPropertyValue<gridAutoFlow>;
    gridAutoRows?: CSSPropertyValue<gridAutoRows>;
    gridColumn?: CSSPropertyValue<gridColumn>;
    gridColumnEnd?: CSSPropertyValue<gridColumnEnd>;
    gridColumnGap?: CSSPropertyValue<gridColumnGap>;
    gridColumnStart?: CSSPropertyValue<gridColumnStart>;
    gridGap?: CSSPropertyValue<gridGap>;
    gridRow?: CSSPropertyValue<gridRow>;
    gridRowEnd?: CSSPropertyValue<gridRowEnd>;
    gridRowGap?: CSSPropertyValue<gridRowGap>;
    gridRowStart?: CSSPropertyValue<gridRowStart>;
    gridTemplate?: CSSPropertyValue<gridTemplate>;
    gridTemplateAreas?: CSSPropertyValue<gridTemplateAreas>;
    gridTemplateColumns?: CSSPropertyValue<gridTemplateColumns>;
    gridTemplateRows?: CSSPropertyValue<gridTemplateRows>;
    height?: CSSPropertyValue<number | string>;
    hyphens?: CSSPropertyValue<hyphens>;
    imageOrientation?: CSSPropertyValue<imageOrientation>;
    imageRendering?: CSSPropertyValue<imageRendering>;
    imageResolution?: CSSPropertyValue<imageResolution>;
    imeMode?: CSSPropertyValue<imeMode>;
    initialLetter?: CSSPropertyValue<initialLetter>;
    initialLetterAlign?: CSSPropertyValue<initialLetterAlign>;
    inlineSize?: CSSPropertyValue<inlineSize>;
    isolation?: CSSPropertyValue<isolation>;
    justifyContent?: CSSPropertyValue<justifyContent>;
    left?: CSSPropertyValue<number | string>;
    letterSpacing?: CSSPropertyValue<letterSpacing>;
    lineBreak?: CSSPropertyValue<lineBreak>;
    lineHeight?: CSSPropertyValue<lineHeight>;
    listStyle?: CSSPropertyValue<listStyle>;
    listStyleImage?: CSSPropertyValue<listStyleImage>;
    listStylePosition?: CSSPropertyValue<listStylePosition>;
    listStyleType?: CSSPropertyValue<listStyleType>;
    margin?: CSSPropertyValue<margin>;
    marginBlockEnd?: CSSPropertyValue<marginBlockEnd>;
    marginBlockStart?: CSSPropertyValue<marginBlockStart>;
    marginBottom?: CSSPropertyValue<marginBottom>;
    marginInlineEnd?: CSSPropertyValue<marginInlineEnd>;
    marginInlineStart?: CSSPropertyValue<marginInlineStart>;
    marginLeft?: CSSPropertyValue<marginLeft>;
    marginRight?: CSSPropertyValue<marginRight>;
    marginTop?: CSSPropertyValue<marginTop>;
    markerOffset?: CSSPropertyValue<markerOffset>;
    mask?: CSSPropertyValue<mask>;
    maskClip?: CSSPropertyValue<maskClip>;
    maskComposite?: CSSPropertyValue<maskComposite>;
    maskImage?: CSSPropertyValue<maskImage>;
    maskMode?: CSSPropertyValue<maskMode>;
    maskOrigin?: CSSPropertyValue<maskOrigin>;
    maskPosition?: CSSPropertyValue<maskPosition>;
    maskRepeat?: CSSPropertyValue<maskRepeat>;
    maskSize?: CSSPropertyValue<maskSize>;
    maskType?: CSSPropertyValue<maskType>;
    maxBlockSize?: CSSPropertyValue<maxBlockSize>;
    maxHeight?: CSSPropertyValue<maxHeight>;
    maxInlineSize?: CSSPropertyValue<maxInlineSize>;
    maxWidth?: CSSPropertyValue<maxWidth>;
    minBlockSize?: CSSPropertyValue<minBlockSize>;
    minHeight?: CSSPropertyValue<minHeight>;
    minInlineSize?: CSSPropertyValue<minInlineSize>;
    minWidth?: CSSPropertyValue<minWidth>;
    mixBlendMode?: CSSPropertyValue<mixBlendMode>;
    motion?: CSSPropertyValue<motion>;
    motionOffset?: CSSPropertyValue<motionOffset>;
    motionPath?: CSSPropertyValue<motionPath>;
    motionRotation?: CSSPropertyValue<motionRotation>;
    objectFit?: CSSPropertyValue<objectFit>;
    objectPosition?: CSSPropertyValue<objectPosition>;
    offsetBlockEnd?: CSSPropertyValue<offsetBlockEnd>;
    offsetBlockStart?: CSSPropertyValue<offsetBlockStart>;
    offsetInlineEnd?: CSSPropertyValue<offsetInlineEnd>;
    offsetInlineStart?: CSSPropertyValue<offsetInlineStart>;
    opacity?: CSSPropertyValue<opacity>;
    order?: CSSPropertyValue<order>;
    orphans?: CSSPropertyValue<orphans>;
    outline?: CSSPropertyValue<outline>;
    outlineColor?: CSSPropertyValue<outlineColor>;
    outlineOffset?: CSSPropertyValue<outlineOffset>;
    outlineStyle?: CSSPropertyValue<outlineStyle>;
    outlineWidth?: CSSPropertyValue<outlineWidth>;
    overflow?: CSSPropertyValue<overflow>;
    overflowClipBox?: CSSPropertyValue<overflowClipBox>;
    overflowWrap?: CSSPropertyValue<overflowWrap>;
    overflowX?: CSSPropertyValue<overflowX>;
    overflowY?: CSSPropertyValue<overflowY>;
    padding?: CSSPropertyValue<padding>;
    paddingBlockEnd?: CSSPropertyValue<paddingBlockEnd>;
    paddingBlockStart?: CSSPropertyValue<paddingBlockStart>;
    paddingBottom?: CSSPropertyValue<paddingBottom>;
    paddingInlineEnd?: CSSPropertyValue<paddingInlineEnd>;
    paddingInlineStart?: CSSPropertyValue<paddingInlineStart>;
    paddingLeft?: CSSPropertyValue<paddingLeft>;
    paddingRight?: CSSPropertyValue<paddingRight>;
    paddingTop?: CSSPropertyValue<paddingTop>;
    paddingH?: CSSPropertyValue<number | string>;
    paddingV?: CSSPropertyValue<number | string>;
    marginH?: CSSPropertyValue<number | string>;
    marginV?: CSSPropertyValue<number | string>;
    pageBreakAfter?: CSSPropertyValue<pageBreakAfter>;
    pageBreakBefore?: CSSPropertyValue<pageBreakBefore>;
    pageBreakInside?: CSSPropertyValue<pageBreakInside>;
    perspective?: CSSPropertyValue<perspective>;
    perspectiveOrigin?: CSSPropertyValue<perspectiveOrigin>;
    pointerEvents?: CSSPropertyValue<pointerEvents>;
    position?: CSSPropertyValue<position>;
    quotes?: CSSPropertyValue<quotes>;
    resize?: CSSPropertyValue<resize>;
    right?: CSSPropertyValue<number | string>;
    rubyAlign?: CSSPropertyValue<rubyAlign>;
    rubyMerge?: CSSPropertyValue<rubyMerge>;
    rubyPosition?: CSSPropertyValue<rubyPosition>;
    scrollBehavior?: CSSPropertyValue<scrollBehavior>;
    scrollSnapCoordinate?: CSSPropertyValue<scrollSnapCoordinate>;
    scrollSnapDestination?: CSSPropertyValue<scrollSnapDestination>;
    scrollSnapPointsX?: CSSPropertyValue<scrollSnapPointsX>;
    scrollSnapPointsY?: CSSPropertyValue<scrollSnapPointsY>;
    scrollSnapType?: CSSPropertyValue<scrollSnapType>;
    scrollSnapTypeX?: CSSPropertyValue<scrollSnapTypeX>;
    scrollSnapTypeY?: CSSPropertyValue<scrollSnapTypeY>;
    shapeImageThreshold?: CSSPropertyValue<shapeImageThreshold>;
    shapeMargin?: CSSPropertyValue<shapeMargin>;
    shapeOutside?: CSSPropertyValue<shapeOutside>;
    tabSize?: CSSPropertyValue<tabSize>;
    tableLayout?: CSSPropertyValue<tableLayout>;
    textAlign?: CSSPropertyValue<textAlign>;
    textAlignLast?: CSSPropertyValue<textAlignLast>;
    textCombineUpright?: CSSPropertyValue<textCombineUpright>;
    textDecoration?: CSSPropertyValue<textDecoration>;
    textDecorationColor?: CSSPropertyValue<textDecorationColor>;
    textDecorationLine?: CSSPropertyValue<textDecorationLine>;
    textDecorationSkip?: CSSPropertyValue<textDecorationSkip>;
    textDecorationStyle?: CSSPropertyValue<textDecorationStyle>;
    textEmphasis?: CSSPropertyValue<textEmphasis>;
    textEmphasisColor?: CSSPropertyValue<textEmphasisColor>;
    textEmphasisPosition?: CSSPropertyValue<textEmphasisPosition>;
    textEmphasisStyle?: CSSPropertyValue<textEmphasisStyle>;
    textIndent?: CSSPropertyValue<textIndent>;
    textOrientation?: CSSPropertyValue<textOrientation>;
    textOverflow?: CSSPropertyValue<textOverflow>;
    textRendering?: CSSPropertyValue<textRendering>;
    textShadow?: CSSPropertyValue<textShadow>;
    textSizeAdjust?: CSSPropertyValue<textSizeAdjust>;
    textTransform?: CSSPropertyValue<textTransform>;
    textUnderlinePosition?: CSSPropertyValue<textUnderlinePosition>;
    top?: CSSPropertyValue<number | string>;
    touchAction?: CSSPropertyValue<touchAction>;
    transform?: CSSPropertyValue<transform>;
    transformBox?: CSSPropertyValue<transformBox>;
    transformOrigin?: CSSPropertyValue<transformOrigin>;
    transformStyle?: CSSPropertyValue<transformStyle>;
    transition?: CSSPropertyValue<transition>;
    transitionDelay?: CSSPropertyValue<transitionDelay>;
    transitionDuration?: CSSPropertyValue<transitionDuration>;
    transitionProperty?: CSSPropertyValue<transitionProperty>;
    transitionTimingFunction?: CSSPropertyValue<transitionTimingFunction>;
    unicodeBidi?: CSSPropertyValue<unicodeBidi>;
    userSelect?: CSSPropertyValue<userSelect>;
    verticalAlign?: CSSPropertyValue<verticalAlign>;
    visibility?: CSSPropertyValue<visibility>;
    whiteSpace?: CSSPropertyValue<whiteSpace>;
    widows?: CSSPropertyValue<widows>;
    width?: CSSPropertyValue<number | string>;
    willChange?: CSSPropertyValue<willChange>;
    wordBreak?: CSSPropertyValue<wordBreak>;
    wordSpacing?: CSSPropertyValue<wordSpacing>;
    wordWrap?: CSSPropertyValue<wordWrap>;
    writingMode?: CSSPropertyValue<writingMode>;
    zIndex?: CSSPropertyValue<zIndex>;
    alignmentBaseline?: CSSPropertyValue<alignmentBaseline>;
    baselineShift?: CSSPropertyValue<baselineShift>;
    behavior?: CSSPropertyValue<behavior>;
    clipRule?: CSSPropertyValue<clipRule>;
    cue?: CSSPropertyValue<cue>;
    cueAfter?: CSSPropertyValue<cueAfter>;
    cueBefore?: CSSPropertyValue<cueBefore>;
    dominantBaseline?: CSSPropertyValue<dominantBaseline>;
    fill?: CSSPropertyValue<fill>;
    fillOpacity?: CSSPropertyValue<fillOpacity>;
    fillRule?: CSSPropertyValue<fillRule>;
    glyphOrientationHorizontal?: CSSPropertyValue<glyphOrientationHorizontal>;
    glyphOrientationVertical?: CSSPropertyValue<glyphOrientationVertical>;
    kerning?: CSSPropertyValue<kerning>;
    marker?: CSSPropertyValue<marker>;
    markerEnd?: CSSPropertyValue<markerEnd>;
    markerMid?: CSSPropertyValue<markerMid>;
    markerStart?: CSSPropertyValue<markerStart>;
    pause?: CSSPropertyValue<pause>;
    pauseAfter?: CSSPropertyValue<pauseAfter>;
    pauseBefore?: CSSPropertyValue<pauseBefore>;
    rest?: CSSPropertyValue<rest>;
    restAfter?: CSSPropertyValue<restAfter>;
    restBefore?: CSSPropertyValue<restBefore>;
    shapeRendering?: CSSPropertyValue<shapeRendering>;
    src?: CSSPropertyValue<src>;
    speak?: CSSPropertyValue<speak>;
    speakAs?: CSSPropertyValue<speakAs>;
    stroke?: CSSPropertyValue<stroke>;
    strokeDasharray?: CSSPropertyValue<strokeDasharray>;
    strokeDashoffset?: CSSPropertyValue<strokeDashoffset>;
    strokeLinecap?: CSSPropertyValue<strokeLinecap>;
    strokeLinejoin?: CSSPropertyValue<strokeLinejoin>;
    strokeMiterlimit?: CSSPropertyValue<strokeMiterlimit>;
    strokeOpacity?: CSSPropertyValue<strokeOpacity>;
    strokeWidth?: CSSPropertyValue<strokeWidth>;
    textAnchor?: CSSPropertyValue<textAnchor>;
    unicodeRange?: CSSPropertyValue<unicodeRange>;
    voiceBalance?: CSSPropertyValue<voiceBalance>;
    voiceDuration?: CSSPropertyValue<voiceDuration>;
    voiceFamily?: CSSPropertyValue<voiceFamily>;
    voicePitch?: CSSPropertyValue<voicePitch>;
    voiceRange?: CSSPropertyValue<voiceRange>;
    voiceRate?: CSSPropertyValue<voiceRate>;
    voiceStress?: CSSPropertyValue<voiceStress>;
    voiceVolume?: CSSPropertyValue<voiceVolume>;
    zoom?: CSSPropertyValue<zoom>;
};
export {};
