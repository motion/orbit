{"version":3,"sources":["../../src/transform/index.js"],"names":["types","t","classBodyVisitor","ClassMethod","path","state","GLOSS_ID","scope","generateUidIdentifier","hasJSX","JSXNamespacedName","JSXElement","post","stupidIsTag","tagName","toLowerCase","call","callExpression","stringLiteral","tagExpr","args","traverse","enter","exit","node","body","unshift","variableDeclaration","variableDeclarator","identifier","programVisitor","Class","decorators","length","decoratorName","opts","foundDecorator","some","item","expression","type","name","callee","isMemberExpression","object","visitor","Program"],"mappings":"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","file":"index.js","sourcesContent":["import helper from 'babel-helper-builder-react-jsx'\n\nexport default function({ types: t }) {\n  // convert React.createElement() => this.glossElement()\n\n  const classBodyVisitor = {\n    ClassMethod(path, state) {\n      const GLOSS_ID = path.scope.generateUidIdentifier('gloss')\n      let hasJSX = false\n\n      const { JSXNamespacedName, JSXElement } = helper({\n        post(state) {\n          // need path to determine if variable or tag\n          const stupidIsTag =\n            state.tagName && state.tagName[0].toLowerCase() === state.tagName[0]\n          state.call = t.callExpression(GLOSS_ID, [\n            stupidIsTag ? t.stringLiteral(state.tagName) : state.tagExpr,\n            ...state.args,\n          ])\n        },\n      })\n\n      path.traverse(\n        {\n          JSXNamespacedName,\n          JSXElement: {\n            enter() {\n              hasJSX = true\n            },\n            exit: JSXElement.exit,\n          },\n        },\n        state,\n      )\n\n      if (hasJSX) {\n        // add a fancyelement hook to start of render\n        path.node.body.body.unshift(\n          t.variableDeclaration('const', [\n            t.variableDeclarator(\n              GLOSS_ID,\n              t.identifier('this.glossElement.bind(this)'),\n            ),\n          ]),\n        )\n      }\n    },\n  }\n\n  const programVisitor = {\n    Class(path, state) {\n      const node = path.node\n\n      if (!node.decorators || !node.decorators.length) {\n        return\n      }\n\n      // -- Validate if class is what we're looking for\n      //    has some flexibility, looks for any of:\n      //       @x  @x()  @x.y  @x.y()\n\n      const decoratorName = (state.opts && state.opts.decoratorName) || 'style'\n\n      const foundDecorator = node.decorators.some(item => {\n        if (!item.expression) {\n          return false\n        }\n        // @style\n        if (\n          item.expression.type === 'Identifier' &&\n          item.expression.name === decoratorName\n        ) {\n          return true\n        }\n        // @style()\n        if (\n          item.expression.callee &&\n          item.expression.callee.name === decoratorName\n        ) {\n          return true\n        }\n        // @style.something()\n        if (\n          item.expression.callee &&\n          t.isMemberExpression(item.expression.callee) &&\n          item.expression.callee.object.name === decoratorName\n        ) {\n          return true\n        }\n        // @style.something\n        if (\n          item.expression.object &&\n          item.expression.object.name === decoratorName\n        ) {\n          return true\n        }\n\n        return false\n      })\n\n      // -- Add a unique var to scope and all of JSX elements\n      if (foundDecorator) {\n        path.traverse(classBodyVisitor, state)\n      }\n    },\n  }\n\n  return {\n    visitor: {\n      Program(path, state) {\n        path.traverse(programVisitor, state)\n      },\n    },\n  }\n}\n"]}