#!/bin/bash

. $(dirname $0)/__/common
cd $ROOT

# allow errors
set +e

file-exists ".env"
file-exists ".env.dev"

function ensure-dep {
  cmd=${@:3}
  if [ "$(bin-exists $1)" = "" ]; then
    echo "$1 is not installed, installing..."
    if [ "$cmd" = "" ]; then
      echo "please install first!"
      exit 1
    else
      $($cmd)
    fi
  fi
  echo "installed: $1"
}

function ensure-dir {
  cmd=${@:3}
  if [ ! -d "$1" ]; then
    echo "$1 doesnt exist, running... $cmd"
    $($cmd)
  fi
  echo "directory exists: $1"
}

function ensure-file {
  cmd=${@:3}
  if [ ! -f "$1" ]; then
    echo "$1 doesnt exist, running... $cmd"
    $($cmd)
  fi
  echo "exists: $1"
}

function ensure-symlink {
  cmd=${@:3}
  if [ ! -L "$1" ]; then
    echo "$1 doesnt exist, running... $cmd"
    $($cmd)
  fi
  echo "symlink exists: $1"
}

function install-puma-dev {
  brew install puma/puma/puma-dev
  sudo puma-dev -setup
  puma-dev -install
}

xcode-select --install 2> /dev/null
ensure-dep "brew" -- /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
ensure-dep "npm" -- brew install node &
ensure-dep "yarn" -- npm i -g yarn &
ensure-dep "puma-dev" -- install-puma-dev &
ensure-dep "parcel" -- yarn global add parcel-bundler &

wait

echo "3001 > ~/.puma-dev/orbit"
echo 3001 > ~/.puma-dev/orbit

yarn install

echo "lerna bootstrap"
rm lerna_debug.json &> /dev/null
npx oao bootstrap

function compile-root-modules() {
  npx lerna exec --parallel \
    --scope @mcro/gloss \
    --scope @mcro/css \
    --scope @mcro/hmr \
    --scope @mcro/hmr-view \
    --scope @mcro/babel-preset-motion \
    --scope @mcro/builder \
      -- \
        BABEL_ENV=es6 babel src --out-dir es6 -s true
}

function link-root-modules() {
  npx lerna exec --parallel -- yarn link
  yarn link @mcro/gloss &
  yarn link @mcro/css &
  yarn link @mcro/hmr &
  yarn link @mcro/hmr-view &
  yarn link @mcro/babel-preset-motion &
  wait
}

function link-ts-configs() {
  echo "link tsconfig"
  # TODO once we can get this fuckin wroking
  # npx lerna exec --parallel -- ln -s ../../tsconfig.package.json ./tsconfig.json
}

function copy-bootstrap-hook() {
  cp ./bin/post-merge ./.git/hooks
}

# function link-buildconfig() {
#   npx lerna exec --parallel -- ln -s ../../buildconfig .
# }

# internal tools
ensure-dir ./packages/gloss/es6 -- compile-root-modules
ensure-symlink ./node_modules/@mcro/gloss -- link-root-modules
ensure-dir ./packages/gloss/lib -- build
# ensure-symlink ./packages/gloss/tsconfig.json -- link-ts-configs
# ensure-symlink ./packages/gloss/buildconfig -- link-buildconfigs
ensure-file ./.git/hooks/post-merge -- copy-bootstrap-hook

echo ""
echo "done! be sure to run build --watch before running stuff"
