{"version":3,"sources":["../src/index.js"],"names":["createProxy","deepForceUpdate","viewProxies","reloaded","reloadedInstances","lastHotReload","Date","now","module","hot","accept","data","dispose","proxyReactComponents","filename","components","imports","locals","React","Error","doHotReload","instance","hotReload","wrapWithProxy","ReactClass","uid","isInFunction","displayName","path","push","instances","update","setTimeout","forEach","window","get","setInterval","length","console","log","join","Black","view","emit"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,eAAP,MAA4B,yBAA5B;;AAEA,IAAIC,cAAc,EAAlB;AACA,IAAIC,WAAW,EAAf;AACA,IAAIC,oBAAoB,CAAxB;AACA,IAAIC,gBAAgBC,KAAKC,GAAL,EAApB;;AAEA,IAAIC,UAAUA,OAAOC,GAAjB,IAAwBD,OAAOC,GAAP,CAAWC,MAAvC,EAA+C;AAC7CF,SAAOC,GAAP,CAAWC,MAAX,CAAkB,MAAM;AACtBR,kBAAcM,OAAOC,GAAP,CAAWE,IAAX,CAAgBT,WAAhB,IAA+B,EAA7C;AACD,GAFD;AAGAM,SAAOC,GAAP,CAAWG,OAAX,CAAmBD,QAAQ;AACzBA,SAAKT,WAAL,GAAmBA,WAAnB;AACD,GAFD;AAGD;;AAED,eAAe,SAASW,oBAAT,CAA8B;AAC3CC,UAD2C;AAE3CC,YAF2C;AAG3CC,SAH2C;AAI3CC;AAJ2C,CAA9B,EAKZ;AACD,QAAM,CAACC,KAAD,IAAUF,OAAhB;AACA,QAAM,CAACR,MAAD,IAAWS,MAAjB;AACA,QAAM,CAAC,EAAER,GAAF,EAAD,IAAYQ,MAAlB;;AAEA,MAAI,CAACR,GAAD,IAAQ,OAAOA,IAAIC,MAAX,KAAsB,UAAlC,EAA8C;AAC5C,UAAM,IAAIS,KAAJ,CACJ,8HADI,CAAN;AAGD;;AAED,QAAMC,cAAcC,YAAY;AAC9B,QAAIA,SAASC,SAAb,EAAwB;AACtBD,eAASC,SAAT,CAAmBd,MAAnB;AACD;AACDP,oBAAgBoB,QAAhB;AACA;AACA;AACA;AACAjB;AACD,GATD;;AAWA,SAAO,SAASmB,aAAT,CAAuBC,UAAvB,EAAmCC,GAAnC,EAAwC;AAC7C,UAAM,EAAEC,YAAF,EAAgBC,cAAcF,GAA9B,KAAsCV,WAAWU,GAAX,CAA5C;AACA,UAAMG,OAAOd,WAAW,GAAX,GAAiBW,GAA9B;;AAEA,QAAIC,YAAJ,EAAkB;AAChB,aAAOF,UAAP;AACD;;AAED,QAAIhB,UAAUA,OAAOC,GAAjB,IAAwBD,OAAOC,GAAP,CAAWC,MAAvC,EAA+C;AAC7CF,aAAOC,GAAP,CAAWC,MAAX,CAAkB,MAAM,CAAE,CAA1B,EAD6C,CACjB;AAC7B;;AAED;AACA,QAAIR,YAAY0B,IAAZ,CAAJ,EAAuB;AACrBzB,eAAS0B,IAAT,CAAcF,WAAd;AACA,YAAMG,YAAY5B,YAAY0B,IAAZ,EAAkBG,MAAlB,CAAyBP,UAAzB,CAAlB;AACAQ,iBAAW,MAAM;AACfF,kBAAUG,OAAV,CAAkBb,WAAlB;AACAf,wBAAgBC,KAAKC,GAAL,EAAhB;AACA2B,eAAO7B,aAAP,GAAuBA,aAAvB;AACD,OAJD;AAKD,KARD,MAQO;AACLH,kBAAY0B,IAAZ,IAAoB5B,YAAYwB,UAAZ,CAApB;AACD;;AAED,WAAOtB,YAAY0B,IAAZ,EAAkBO,GAAlB,EAAP;AACD,GA1BD;AA2BD;;AAEDC,YAAY,MAAM;AAChB,MAAIjC,SAASkC,MAAb,EAAqB;AACnBC,YAAQC,GAAR,CAAa,SAAQpC,SAASqC,IAAT,CAAc,IAAd,CAAoB,KAAIpC,iBAAkB,YAA/D;AACA,QAAI8B,OAAOO,KAAX,EAAkB;AAChBP,aAAOO,KAAP,CAAaC,IAAb,CAAkBC,IAAlB,CAAuB,KAAvB;AACD;AACDxC,eAAW,EAAX;AACAC,wBAAoB,CAApB;AACD;AACF,CATD,EASG,IATH","file":"index.js","sourcesContent":["import createProxy from './proxyClass'\nimport deepForceUpdate from 'react-deep-force-update'\n\nlet viewProxies = {}\nlet reloaded = []\nlet reloadedInstances = 0\nlet lastHotReload = Date.now()\n\nif (module && module.hot && module.hot.accept) {\n  module.hot.accept(() => {\n    viewProxies = module.hot.data.viewProxies || {}\n  })\n  module.hot.dispose(data => {\n    data.viewProxies = viewProxies\n  })\n}\n\nexport default function proxyReactComponents({\n  filename,\n  components,\n  imports,\n  locals,\n}) {\n  const [React] = imports\n  const [module] = locals\n  const [{ hot }] = locals\n\n  if (!hot || typeof hot.accept !== 'function') {\n    throw new Error(\n      'locals[0] does not appear to be a `module` object with Hot Module replacement API enabled. You should disable @mcro/view-hmr'\n    )\n  }\n\n  const doHotReload = instance => {\n    if (instance.hotReload) {\n      instance.hotReload(module)\n    }\n    deepForceUpdate(instance)\n    // if (instance.forceUpdate) {\n    //   instance.forceUpdate()\n    // }\n    reloadedInstances++\n  }\n\n  return function wrapWithProxy(ReactClass, uid) {\n    const { isInFunction, displayName = uid } = components[uid]\n    const path = filename + '$' + uid\n\n    if (isInFunction) {\n      return ReactClass\n    }\n\n    if (module && module.hot && module.hot.accept) {\n      module.hot.accept(() => {}) // to make it a fast hmr\n    }\n\n    // if existing proxy\n    if (viewProxies[path]) {\n      reloaded.push(displayName)\n      const instances = viewProxies[path].update(ReactClass)\n      setTimeout(() => {\n        instances.forEach(doHotReload)\n        lastHotReload = Date.now()\n        window.lastHotReload = lastHotReload\n      })\n    } else {\n      viewProxies[path] = createProxy(ReactClass)\n    }\n\n    return viewProxies[path].get()\n  }\n}\n\nsetInterval(() => {\n  if (reloaded.length) {\n    console.log(`[HMR] ${reloaded.join(', ')}, ${reloadedInstances} instances`)\n    if (window.Black) {\n      window.Black.view.emit('hmr')\n    }\n    reloaded = []\n    reloadedInstances = 0\n  }\n}, 1000)\n"]}