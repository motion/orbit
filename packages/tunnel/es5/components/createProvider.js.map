{"version":3,"sources":["../../src/components/createProvider.js"],"names":["createProvider","React","Component","Children","provided","state","props","context","providedFromPropsAndContext","nextProps","nextContext","nextProvided","setState","isNestedProvider","parentProvided","provide","provider","only","children","contextTypes","childContextTypes","isRequired","propTypes"],"mappings":";;;;;;;;;;kBAOwBA,c;;AAPxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEe,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAAA,MACpCC,SADoC,GACZD,KADY,CACpCC,SADoC;AAAA,MACzBC,QADyB,GACZF,KADY,CACzBE,QADyB;;;AAG5C;AAAA;;AAAA;AAAA;AAAA,wCAcoB;AAChB,eAAO,EAAEC,UAAU,KAAKC,KAAL,CAAWD,QAAvB,EAAP;AACD;AAhBH;;AAkBE,sBAAYE,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,sHACpBD,KADoB,EACbC,OADa;;AAE1B,UAAMH,WAAW,MAAKI,2BAAL,CAAiCF,KAAjC,EAAwCC,OAAxC,CAAjB;AACA,YAAKF,KAAL,GAAa,EAAED,UAAUA,QAAZ,EAAb;AAH0B;AAI3B;;AAtBH;AAAA;AAAA,gDAwB4BK,SAxB5B,EAwBuCC,WAxBvC,EAwBoD;AAAA,YACxCN,QADwC,GAC3B,KAAKC,KADsB,CACxCD,QADwC;;AAEhD,YAAMO,eAAe,KAAKH,2BAAL,CACnBC,SADmB,EAEnBC,WAFmB,CAArB;AAIA,YAAI,4BAAaN,QAAb,EAAuBO,YAAvB,CAAJ,EAA0C;AACxC;AACD;AACD,aAAKC,QAAL,CAAc,EAAER,UAAUO,YAAZ,EAAd;AACD;AAlCH;AAAA;AAAA,kDAoC8BL,KApC9B,EAoCqCC,OApCrC,EAoC8C;AAC1C,YAAMM,mBAAmB,6BAAcN,QAAQH,QAAtB,CAAzB;AACA,YAAMU,iBAAiBD,mBAAmBN,QAAQH,QAA3B,GAAsC,EAA7D;;AAEA,YAAIS,gBAAJ,EAAsB;AACpB,mCACE,6BAAcC,cAAd,CADF,EAEE,iGACE,wEAHJ,EAIEA,cAJF;AAMD;;AAXyC,YAalCC,OAbkC,GAatBT,KAbsB,CAalCS,OAbkC;;AAc1C,YAAIC,WAAWD,OAAf;;AAEA,YAAI,6BAAcA,OAAd,CAAJ,EAA4B;AAC1BC,qBAAW;AAAA,gCAAwBF,cAAxB,EAA2CC,OAA3C;AAAA,WAAX;AACD;;AAED,YAAIX,WAAWY,SAASF,cAAT,CAAf;;AAEA,iCACE,6BAAcV,QAAd,CADF,EAEE,iFACE,qFADF,GAEE,6CAJJ,EAKEA,QALF;;AAQA,eAAOA,QAAP;AACD;AAnEH;AAAA;AAAA,iCAqEa,CAAE;AArEf;AAAA;AAAA,+BAuEW;AACP,eAAOD,SAASc,IAAT,CAAc,KAAKX,KAAL,CAAWY,QAAzB,CAAP;AACD;AAzEH;;AAAA;AAAA,IAA8BhB,SAA9B,UACSiB,YADT,GACwB;AACpBf;AADoB,GADxB,SAKSgB,iBALT,GAK6B;AACzBhB,cAAU,kBAAOiB;AADQ,GAL7B,SASSC,SATT,GASqB;AACjBJ,cAAU,mBAAQG,UADD;AAEjBN,aAAS,0BAAU,oCAAV;AAFQ,GATrB;AA2ED","file":"createProvider.js","sourcesContent":["import invariant from 'invariant'\nimport shallowEqual from '../utils/shallowEqual'\nimport isPlainObject from '../utils/isPlainObject'\nimport hasEmptyIntersection from '../utils/hasEmptyIntersection'\nimport sharedKeys from '../utils/sharedKeys'\nimport { object, func, oneOfType, element } from 'prop-types'\n\nexport default function createProvider(React) {\n  const { Component, Children } = React\n\n  return class Provider extends Component {\n    static contextTypes = {\n      provided: object,\n    }\n\n    static childContextTypes = {\n      provided: object.isRequired,\n    }\n\n    static propTypes = {\n      children: element.isRequired,\n      provide: oneOfType([object, func]),\n    }\n\n    getChildContext() {\n      return { provided: this.state.provided }\n    }\n\n    constructor(props, context) {\n      super(props, context)\n      const provided = this.providedFromPropsAndContext(props, context)\n      this.state = { provided: provided }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      const { provided } = this.state\n      const nextProvided = this.providedFromPropsAndContext(\n        nextProps,\n        nextContext\n      )\n      if (shallowEqual(provided, nextProvided)) {\n        return\n      }\n      this.setState({ provided: nextProvided })\n    }\n\n    providedFromPropsAndContext(props, context) {\n      const isNestedProvider = isPlainObject(context.provided)\n      const parentProvided = isNestedProvider ? context.provided : {}\n\n      if (isNestedProvider) {\n        invariant(\n          isPlainObject(parentProvided),\n          'This Provider appears to be nested inside another provider but received a parent `provided` ' +\n            'is not a plain Object. `provided` must be always be a plain Object. %s',\n          parentProvided\n        )\n      }\n\n      const { provide } = props\n      let provider = provide\n\n      if (isPlainObject(provide)) {\n        provider = parentProvided => ({ ...parentProvided, ...provide })\n      }\n\n      let provided = provider(parentProvided)\n\n      invariant(\n        isPlainObject(provided),\n        'This Provider is attempting to provide something other than a plain Object. ' +\n          'the `provide` prop must either be a plain object itself or a function that returns ' +\n          'a plain Object. `provide` is or returned %s',\n        provided\n      )\n\n      return provided\n    }\n\n    isNested() {}\n\n    render() {\n      return Children.only(this.props.children)\n    }\n  }\n}\n"]}