import { Color } from './types';
export declare type alignContent = 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'stretch';
export declare type alignItems = 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
export declare type alignSelf = 'auto' | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
export declare type all = 'initial' | 'inherit' | 'unset';
export declare type animation = singleAnimation;
export declare type animationDelay = number;
export declare type animationDirection = singleAnimationDirection;
export declare type animationDuration = string | number;
export declare type animationFillMode = singleAnimationFillMode;
export declare type animationIterationCount = singleAnimationIterationCount;
export declare type animationName = singleAnimationName;
export declare type animationPlayState = singleAnimationPlayState;
export declare type animationTimingFunction = singleTimingFunction;
export declare type appearance = 'auto' | 'none';
export declare type azimuth = number | string | 'leftwards' | 'rightwards';
export declare type backdropFilter = 'none' | string;
export declare type backfaceVisibility = 'visible' | 'hidden';
declare type backgroundSyntax = {
    attachment?: attachment;
    color?: Color;
    image?: bgImage;
    position?: string;
    repeat?: repeatStyle;
};
export declare type background = string | number[] | finalBgLayer | backgroundSyntax | Color;
export declare type backgroundAttachment = attachment;
export declare type backgroundBlendMode = blendMode;
export declare type backgroundClip = box;
export declare type backgroundColor = Color;
export declare type backgroundImage = bgImage;
export declare type backgroundOrigin = box;
export declare type backgroundPosition = string;
export declare type backgroundPositionX = string;
export declare type backgroundPositionY = string;
export declare type backgroundRepeat = repeatStyle;
export declare type backgroundSize = bgSize;
export declare type blockSize = width;
declare type borderSyntax = (number | string | Color)[];
export declare type border = borderWidth | brStyle | Color | borderSyntax;
export declare type borderBlockEnd = borderWidth | borderStyle | Color;
export declare type borderBlockEndColor = Color;
export declare type borderBlockEndStyle = borderStyle;
export declare type borderBlockEndWidth = borderWidth;
export declare type borderBlockStart = borderWidth | borderStyle | Color;
export declare type borderBlockStartColor = Color;
export declare type borderBlockStartStyle = borderStyle;
export declare type borderBlockStartWidth = borderWidth;
export declare type borderBottomLeftRadius = lengthPercentage;
export declare type borderBottomRightRadius = lengthPercentage;
export declare type borderBottomStyle = brStyle;
export declare type borderBottomWidth = borderWidth;
export declare type borderCollapse = 'collapse' | 'separate';
export declare type borderColor = Color | Array<number | string | Color>;
export declare type borderImage = borderImageSource | borderImageSlice | string | borderImageRepeat;
export declare type borderImageOutset = string;
export declare type borderImageRepeat = string;
export declare type borderImageSlice = string | number | 'fill';
export declare type borderImageSource = 'none' | string;
export declare type borderImageWidth = string;
export declare type borderInlineEnd = borderWidth | borderStyle | Color;
export declare type borderInlineEndColor = Color;
export declare type borderInlineEndStyle = borderStyle;
export declare type borderInlineEndWidth = borderWidth;
export declare type borderInlineStart = borderWidth | borderStyle | Color;
export declare type borderInlineStartColor = Color;
export declare type borderInlineStartStyle = borderStyle;
export declare type borderInlineStartWidth = borderWidth;
export declare type borderLeftColor = Color;
export declare type borderLeftStyle = brStyle;
export declare type borderLeftWidth = borderWidth;
export declare type borderRightColor = Color;
export declare type borderRightStyle = brStyle;
export declare type borderRightWidth = borderWidth;
export declare type borderRadius = lengthPercentage;
export declare type borderSpacing = number;
export declare type borderStyle = brStyle;
export declare type borderTopLeftRadius = lengthPercentage;
export declare type borderTopRightRadius = lengthPercentage;
export declare type borderTopStyle = brStyle;
export declare type borderTopWidth = borderWidth;
export declare type boxAlign = 'start' | 'center' | 'end' | 'baseline' | 'stretch';
export declare type boxDecorationBreak = 'slice' | 'clone';
export declare type boxDirection = 'normal' | 'reverse' | 'inherit';
export declare type boxFlex = number;
export declare type boxFlexGroup = number;
export declare type boxLines = 'single' | 'multiple';
export declare type boxOrdinalGroup = number;
export declare type boxOrient = 'horizontal' | 'vertical' | 'inline-axis' | 'block-axis' | 'inherit';
export declare type boxPack = 'start' | 'center' | 'end' | 'justify';
declare type boxShadowSyntax = {
    x?: number;
    y?: number;
    blur?: number;
    spread?: number;
    color?: string;
    inset?: boolean;
};
export declare type boxShadow = 'none' | number | string | boxShadowSyntax | (number | Color)[][] | (number | Color | string)[][];
export declare type boxSizing = 'content-box' | 'border-box';
export declare type boxSuppress = 'show' | 'discard' | 'hide';
export declare type breakAfter = 'auto' | 'avoid' | 'avoid-page' | 'page' | 'left' | 'right' | 'recto' | 'verso' | 'avoid-column' | 'column' | 'avoid-region' | 'region';
export declare type breakBefore = 'auto' | 'avoid' | 'avoid-page' | 'page' | 'left' | 'right' | 'recto' | 'verso' | 'avoid-column' | 'column' | 'avoid-region' | 'region';
export declare type breakInside = 'auto' | 'avoid' | 'avoid-page' | 'avoid-column' | 'avoid-region';
export declare type captionSide = 'top' | 'bottom' | 'block-start' | 'block-end' | 'inline-start' | 'inline-end';
export declare type clear = 'none' | 'left' | 'right' | 'both' | 'inline-start' | 'inline-end';
export declare type clip = string | 'auto';
export declare type clipPath = string | 'none';
export declare type columnCount = number | 'auto';
export declare type columnFill = 'auto' | 'balance';
export declare type columnGap = number | 'normal';
export declare type columnRule = columnRuleWidth | columnRuleStyle | columnRuleColor;
export declare type columnRuleColor = Color;
export declare type columnRuleStyle = brStyle;
export declare type columnRuleWidth = borderWidth;
export declare type columnSpan = 'none' | 'all';
export declare type columnWidth = number | 'auto';
export declare type columns = columnWidth | columnCount;
export declare type contain = 'none' | 'strict' | 'content' | string;
export declare type content = string;
export declare type counterIncrement = string | 'none';
export declare type counterReset = string | 'none';
export declare type cursor = 'auto' | 'default' | 'none' | 'context-menu' | 'help' | 'pointer' | 'progress' | 'wait' | 'cell' | 'crosshair' | 'text' | 'vertical-text' | 'alias' | 'copy' | 'move' | 'no-drop' | 'not-allowed' | 'e-resize' | 'n-resize' | 'ne-resize' | 'nw-resize' | 's-resize' | 'se-resize' | 'sw-resize' | 'w-resize' | 'ew-resize' | 'ns-resize' | 'nesw-resize' | 'nwse-resize' | 'col-resize' | 'row-resize' | 'all-scroll' | 'zoom-in' | 'zoom-out' | 'grab' | 'grabbing' | '-webkit-grab' | '-webkit-grabbing';
export declare type direction = 'ltr' | 'rtl';
export declare type display = 'none' | 'inline' | 'block' | 'list-item' | 'inline-list-item' | 'inline-block' | 'inline-table' | 'table' | 'table-cell' | 'table-column' | 'table-column-group' | 'table-footer-group' | 'table-header-group' | 'table-row' | 'table-row-group' | 'flex' | 'inline-flex' | 'grid' | 'inline-grid' | 'run-in' | 'ruby' | 'ruby-base' | 'ruby-text' | 'ruby-base-container' | 'ruby-text-container' | 'contents';
export declare type displayInside = 'auto' | 'block' | 'table' | 'flex' | 'grid' | 'ruby';
export declare type displayList = 'none' | 'list-item';
export declare type displayOutside = 'block-level' | 'inline-level' | 'run-in' | 'contents' | 'none' | 'table-row-group' | 'table-header-group' | 'table-footer-group' | 'table-row' | 'table-cell' | 'table-column-group' | 'table-column' | 'table-caption' | 'ruby-base' | 'ruby-text' | 'ruby-base-container' | 'ruby-text-container';
export declare type emptyCells = 'show' | 'hide';
export declare type filter = 'none' | string;
export declare type flex = 'none' | string | number;
export declare type flexBasis = 'content' | number | string;
export declare type flexDirection = 'row' | 'row-reverse' | 'column' | 'column-reverse';
export declare type flexFlow = flexDirection | flexWrap;
export declare type flexGrow = number;
export declare type flexShrink = number;
export declare type flexWrap = 'nowrap' | 'wrap' | 'wrap-reverse';
export declare type float = 'left' | 'right' | 'none' | 'inline-start' | 'inline-end';
export declare type font = string | 'caption' | 'icon' | 'menu' | 'message-box' | 'small-caption' | 'status-bar';
export declare type fontFamily = string;
export declare type fontFeatureSettings = 'normal' | string;
export declare type fontKerning = 'auto' | 'normal' | 'none';
export declare type fontLanguageOverride = 'normal' | string;
export declare type fontSize = absoluteSize | relativeSize | lengthPercentage;
export declare type fontSizeAdjust = 'none' | number;
export declare type fontStretch = 'normal' | 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded';
export declare type fontStyle = 'normal' | 'italic' | 'oblique';
export declare type fontSynthesis = 'none' | string;
export declare type fontVariant = 'normal' | 'none' | string;
export declare type fontVariantAlternates = 'normal' | string;
export declare type fontVariantCaps = 'normal' | 'small-caps' | 'all-small-caps' | 'petite-caps' | 'all-petite-caps' | 'unicase' | 'titling-caps';
export declare type fontVariantEastAsian = 'normal' | string;
export declare type fontVariantLigatures = 'normal' | 'none' | string;
export declare type fontVariantNumeric = 'normal' | string;
export declare type fontVariantPosition = 'normal' | 'sub' | 'super';
export declare type fontWeight = 'inherit' | 'normal' | 'bold' | 'bolder' | 'lighter' | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
export declare type grid = gridTemplate | string;
export declare type gridArea = gridLine | string;
export declare type gridAutoColumns = trackSize;
export declare type gridAutoFlow = string | 'dense';
export declare type gridAutoRows = trackSize;
export declare type gridColumn = gridLine | string;
export declare type gridColumnEnd = gridLine;
export declare type gridColumnGap = lengthPercentage;
export declare type gridColumnStart = gridLine;
export declare type gridGap = gridRowGap | gridColumnGap;
export declare type gridRow = gridLine | string;
export declare type gridRowEnd = gridLine;
export declare type gridRowGap = lengthPercentage;
export declare type gridRowStart = gridLine;
export declare type gridTemplate = 'none' | 'subgrid' | string;
export declare type gridTemplateAreas = 'none' | string;
export declare type gridTemplateColumns = 'none' | 'subgrid' | string;
export declare type gridTemplateRows = 'none' | 'subgrid' | string;
export declare type hyphens = 'none' | 'manual' | 'auto';
export declare type imageOrientation = 'from-image' | number | string;
export declare type imageRendering = 'auto' | 'crisp-edges' | 'pixelated' | 'optimizeSpeed' | 'optimizeQuality' | string;
export declare type imageResolution = string | 'snap';
export declare type imeMode = 'auto' | 'normal' | 'active' | 'inactive' | 'disabled';
export declare type initialLetter = 'normal' | string;
export declare type initialLetterAlign = string;
export declare type inlineSize = width;
export declare type isolation = 'auto' | 'isolate';
export declare type justifyContent = 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'stretch';
export declare type letterSpacing = 'normal' | lengthPercentage;
export declare type lineBreak = 'auto' | 'loose' | 'normal' | 'strict';
export declare type lineHeight = 'normal' | number | string;
export declare type listStyle = listStyleType | listStylePosition | listStyleImage;
export declare type listStyleImage = string | 'none';
export declare type listStylePosition = 'inside' | 'outside';
export declare type listStyleType = string | 'none';
declare type marginSyntax = Array<number | string>;
export declare type margin = number | string | marginSyntax;
export declare type marginBlockEnd = marginLeft;
export declare type marginBlockStart = marginLeft;
export declare type marginBottom = number | string | 'auto';
export declare type marginInlineEnd = marginLeft;
export declare type marginInlineStart = marginLeft;
export declare type marginLeft = number | string | 'auto';
export declare type marginRight = number | string | 'auto';
export declare type marginTop = number | string | 'auto';
export declare type markerOffset = number | 'auto';
export declare type mask = maskLayer;
export declare type maskClip = string;
export declare type maskComposite = compositeOperator;
export declare type maskMode = maskingMode;
export declare type maskOrigin = geometryBox;
export declare type maskPosition = string;
export declare type maskRepeat = repeatStyle;
export declare type maskSize = bgSize;
export declare type maskType = 'luminance' | 'alpha';
export declare type maxBlockSize = maxWidth;
export declare type maxHeight = number | string | 'none' | 'max-content' | 'min-content' | 'fit-content' | 'fill-available';
export declare type maxInlineSize = maxWidth;
export declare type maxWidth = number | string | 'none' | 'max-content' | 'min-content' | 'fit-content' | 'fill-available';
export declare type minBlockSize = minWidth;
export declare type minHeight = number | string | 'auto' | 'max-content' | 'min-content' | 'fit-content' | 'fill-available';
export declare type minInlineSize = minWidth;
export declare type minWidth = number | string | 'auto' | 'max-content' | 'min-content' | 'fit-content' | 'fill-available';
export declare type mixBlendMode = blendMode;
export declare type motion = motionPath | motionOffset | motionRotation;
export declare type motionOffset = lengthPercentage;
export declare type motionPath = string | geometryBox | 'none';
export declare type motionRotation = string | number;
export declare type objectFit = 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
export declare type objectPosition = string;
export declare type offsetBlockEnd = string;
export declare type offsetBlockStart = string;
export declare type offsetInlineEnd = string;
export declare type offsetInlineStart = string;
export declare type opacity = number;
export declare type order = number | 'auto';
export declare type orphans = number;
declare type outlineSyntax = {
    width?: borderWidth;
    style?: brStyle;
    color?: Color;
};
export declare type outline = string | outlineSyntax;
export declare type outlineColor = Color | 'invert';
export declare type outlineOffset = number;
export declare type outlineStyle = 'auto' | brStyle;
export declare type outlineWidth = borderWidth;
export declare type overflow = 'visible' | 'hidden' | 'scroll' | 'auto';
export declare type overflowClipBox = 'padding-box' | 'content-box';
export declare type overflowWrap = 'normal' | 'break-word';
export declare type overflowX = 'visible' | 'hidden' | 'scroll' | 'auto';
export declare type overflowY = 'visible' | 'hidden' | 'scroll' | 'auto';
declare type paddingSyntax = Array<number | string>;
export declare type padding = number | string | paddingSyntax;
export declare type paddingBlockEnd = paddingLeft;
export declare type paddingBlockStart = paddingLeft;
export declare type paddingBottom = number | string;
export declare type paddingInlineEnd = paddingLeft;
export declare type paddingInlineStart = paddingLeft;
export declare type paddingLeft = number | string;
export declare type paddingRight = number | string;
export declare type paddingTop = number | string;
export declare type pageBreakAfter = 'auto' | 'always' | 'avoid' | 'left' | 'right';
export declare type pageBreakBefore = 'auto' | 'always' | 'avoid' | 'left' | 'right';
export declare type pageBreakInside = 'auto' | 'avoid';
export declare type perspective = 'none' | number;
export declare type perspectiveOrigin = string;
export declare type pointerEvents = 'auto' | 'none' | 'visiblePainted' | 'visibleFill' | 'visibleStroke' | 'visible' | 'painted' | 'fill' | 'stroke' | 'all' | 'inherit';
export declare type position = 'static' | 'relative' | 'absolute' | 'sticky' | 'fixed';
export declare type quotes = string | 'none';
export declare type resize = 'none' | 'both' | 'horizontal' | 'vertical';
export declare type rubyAlign = 'start' | 'center' | 'space-between' | 'space-around';
export declare type rubyMerge = 'separate' | 'collapse' | 'auto';
export declare type rubyPosition = 'over' | 'under' | 'inter-character';
export declare type scrollBehavior = 'auto' | 'smooth';
export declare type scrollSnapCoordinate = 'none' | string;
export declare type scrollSnapDestination = string;
export declare type scrollSnapPointsX = 'none' | string;
export declare type scrollSnapPointsY = 'none' | string;
export declare type scrollSnapType = 'none' | 'mandatory' | 'proximity';
export declare type scrollSnapTypeX = 'none' | 'mandatory' | 'proximity';
export declare type scrollSnapTypeY = 'none' | 'mandatory' | 'proximity';
export declare type shapeImageThreshold = number;
export declare type shapeMargin = lengthPercentage;
export declare type shapeOutside = 'none' | shapeBox | string;
export declare type tabSize = number;
export declare type tableLayout = 'auto' | 'fixed';
export declare type textAlign = 'start' | 'end' | 'left' | 'right' | 'center' | 'justify' | 'match-parent';
export declare type textAlignLast = 'auto' | 'start' | 'end' | 'left' | 'right' | 'center' | 'justify';
export declare type textCombineUpright = 'none' | 'all' | string;
export declare type textDecoration = textDecorationLine | textDecorationStyle | textDecorationColor;
export declare type textDecorationColor = Color;
export declare type textDecorationLine = 'none' | string;
export declare type textDecorationSkip = 'none' | string;
export declare type textDecorationStyle = 'solid' | 'double' | 'dotted' | 'dashed' | 'wavy';
export declare type textEmphasis = textEmphasisStyle | textEmphasisColor;
export declare type textEmphasisColor = Color;
export declare type textEmphasisPosition = string;
export declare type textEmphasisStyle = 'none' | string;
export declare type textIndent = string | 'hanging' | 'each-line';
export declare type textOrientation = 'mixed' | 'upright' | 'sideways';
export declare type textOverflow = 'clip' | 'ellipsis' | 'auto';
export declare type textRendering = 'auto' | 'optimizeSpeed' | 'optimizeLegibility' | 'geometricPrecision';
declare type textShadowSyntax = {
    x?: number;
    y?: number;
    blur?: number;
    color?: string;
};
export declare type textShadow = 'none' | string | textShadowSyntax;
export declare type textSizeAdjust = 'none' | 'auto' | string;
export declare type textTransform = 'none' | 'capitalize' | 'uppercase' | 'lowercase' | 'full-width';
export declare type textUnderlinePosition = 'auto' | string;
export declare type touchAction = 'auto' | 'none' | string | 'manipulation';
declare type transformSyntax = {
    x?: number | string;
    y?: number | string;
    z?: number | string;
    rotate?: string;
    scale?: number | string;
    scaleX?: number | string;
    scaleY?: number | string;
    scaleZ?: number | string;
};
export declare type transform = 'none' | string | transformSyntax;
export declare type transformBox = 'border-box' | 'fill-box' | 'view-box';
export declare type transformOrigin = string | number;
export declare type transformStyle = 'flat' | 'preserve-3d';
declare type transitionSyntax = {
    property?: 'none' | singleTransitionProperty;
    duration?: number;
    timingFunction?: singleTransitionTimingFunction;
    delay?: number;
};
export declare type transition = singleTransition | transitionSyntax | Array<singleTransition | transitionSyntax>;
export declare type transitionDelay = number;
export declare type transitionDuration = number;
export declare type transitionProperty = 'none' | singleTransitionProperty;
export declare type transitionTimingFunction = singleTransitionTimingFunction;
export declare type unicodeBidi = 'normal' | 'embed' | 'isolate' | 'bidi-override' | 'isolate-override' | 'plaintext';
export declare type userSelect = 'auto' | 'text' | 'none' | 'contain' | 'all';
export declare type verticalAlign = 'baseline' | 'sub' | 'super' | 'text-top' | 'text-bottom' | 'middle' | 'top' | 'bottom' | string | number;
export declare type visibility = 'visible' | 'hidden' | 'collapse';
export declare type whiteSpace = 'inherit' | 'normal' | 'pre' | 'nowrap' | 'pre-wrap' | 'pre-line';
export declare type widows = number;
export declare type width = string | 'available' | 'min-content' | 'max-content' | 'fit-content' | 'auto';
export declare type willChange = 'auto' | animatableFeature;
export declare type wordBreak = 'normal' | 'break-all' | 'keep-all' | nonStandardWordBreak;
export declare type wordSpacing = 'normal' | lengthPercentage;
export declare type wordWrap = 'normal' | 'break-word';
export declare type writingMode = 'horizontal-tb' | 'vertical-rl' | 'vertical-lr' | 'sideways-rl' | 'sideways-lr' | svgWritingMode;
export declare type zIndex = 'auto' | number;
export declare type alignmentBaseline = 'auto' | 'baseline' | 'before-edge' | 'text-before-edge' | 'middle' | 'central' | 'after-edge' | 'text-after-edge' | 'ideographic' | 'alphabetic' | 'hanging' | 'mathematical';
export declare type baselineShift = 'baseline' | 'sub' | 'super' | svgLength;
export declare type behavior = string;
export declare type clipRule = 'nonzero' | 'evenodd';
export declare type cue = cueBefore | cueAfter;
export declare type cueAfter = string | number | 'none';
export declare type cueBefore = string | number | 'none';
export declare type dominantBaseline = 'auto' | 'use-script' | 'no-change' | 'reset-size' | 'ideographic' | 'alphabetic' | 'hanging' | 'mathematical' | 'central' | 'middle' | 'text-after-edge' | 'text-before-edge';
export declare type fill = paint;
export declare type fillOpacity = number;
export declare type fillRule = 'nonzero' | 'evenodd';
export declare type glyphOrientationHorizontal = number;
export declare type glyphOrientationVertical = number;
export declare type kerning = 'auto' | svgLength;
export declare type marker = 'none' | string;
export declare type markerEnd = 'none' | string;
export declare type markerMid = 'none' | string;
export declare type markerStart = 'none' | string;
export declare type pause = pauseBefore | pauseAfter;
export declare type pauseAfter = number | 'none' | 'x-weak' | 'weak' | 'medium' | 'strong' | 'x-strong';
export declare type pauseBefore = number | 'none' | 'x-weak' | 'weak' | 'medium' | 'strong' | 'x-strong';
export declare type rest = restBefore | restAfter;
export declare type restAfter = number | 'none' | 'x-weak' | 'weak' | 'medium' | 'strong' | 'x-strong';
export declare type restBefore = number | 'none' | 'x-weak' | 'weak' | 'medium' | 'strong' | 'x-strong';
export declare type shapeRendering = 'auto' | 'optimizeSpeed' | 'crispEdges' | 'geometricPrecision';
export declare type src = string;
export declare type speak = 'auto' | 'none' | 'normal';
export declare type speakAs = 'normal' | 'spell-out' | 'digits' | string;
export declare type stroke = paint;
export declare type strokeDasharray = 'none' | string;
export declare type strokeDashoffset = svgLength;
export declare type strokeLinecap = 'butt' | 'round' | 'square';
export declare type strokeLinejoin = 'miter' | 'round' | 'bevel';
export declare type strokeMiterlimit = number;
export declare type strokeOpacity = number;
export declare type strokeWidth = svgLength;
export declare type textAnchor = 'start' | 'middle' | 'end';
export declare type unicodeRange = string;
export declare type voiceBalance = number | 'left' | 'center' | 'right' | 'leftwards' | 'rightwards';
export declare type voiceDuration = 'auto' | number;
export declare type voiceFamily = string | 'preserve';
export declare type voicePitch = number | 'absolute' | string;
export declare type voiceRange = number | 'absolute' | string;
export declare type voiceRate = string;
export declare type voiceStress = 'normal' | 'strong' | 'moderate' | 'none' | 'reduced';
export declare type voiceVolume = 'silent' | string;
export declare type zoom = 'normal' | 'reset' | number | string;
export declare type absoluteSize = 'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
export declare type animatableFeature = 'scroll-position' | 'contents' | string;
export declare type attachment = 'scroll' | 'fixed' | 'local';
export declare type bgImage = 'none' | string;
export declare type bgSize = string | 'cover' | 'contain';
export declare type box = 'border-box' | 'padding-box' | 'content-box';
export declare type brStyle = 'none' | 'hidden' | 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset';
export declare type borderWidth = number | 'thin' | 'medium' | 'thick' | string;
export declare type Color = string | Color | number[];
export declare type compositeStyle = 'clear' | 'copy' | 'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'xor';
export declare type compositeOperator = 'add' | 'subtract' | 'intersect' | 'exclude';
export declare type finalBgLayer = bgImage | string | repeatStyle | attachment | box | backgroundColor;
export declare type geometryBox = shapeBox | 'fill-box' | 'stroke-box' | 'view-box';
export declare type gridLine = 'auto' | string;
export declare type lengthPercentage = number | string;
export declare type maskLayer = maskReference | maskingMode | string | repeatStyle | geometryBox | compositeOperator;
export declare type maskReference = 'none' | string;
export declare type maskingMode = 'alpha' | 'luminance' | 'match-source';
export declare type relativeSize = 'larger' | 'smaller';
export declare type repeatStyle = 'repeat-x' | 'repeat-y' | string;
export declare type shapeBox = box | 'margin-box';
export declare type singleAnimation = number | singleTimingFunction | singleAnimationIterationCount | singleAnimationDirection | singleAnimationFillMode | singleAnimationPlayState | singleAnimationName;
export declare type singleAnimationDirection = 'normal' | 'reverse' | 'alternate' | 'alternate-reverse';
export declare type singleAnimationFillMode = 'none' | 'forwards' | 'backwards' | 'both';
export declare type singleAnimationIterationCount = number;
export declare type singleAnimationName = 'none' | string;
export declare type singleAnimationPlayState = 'running' | 'paused';
export declare type singleTimingFunction = singleTransitionTimingFunction;
export declare type singleTransition = singleTransitionTimingFunction | string | number;
export declare type singleTransitionTimingFunction = 'ease' | 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'step-start' | 'step-end' | string;
export declare type singleTransitionProperty = 'all' | string;
export declare type trackBreadth = lengthPercentage | string | 'min-content' | 'max-content' | 'auto';
export declare type trackSize = trackBreadth | string;
export declare type nonStandardWordBreak = 'break-word';
export declare type blendMode = 'normal' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity';
export declare type maskImage = maskReference;
export declare type outlineRadius = borderRadius;
export declare type paint = 'none' | 'currentColor' | Color | string;
export declare type svgLength = string | number;
export declare type svgWritingMode = 'lr-tb' | 'rl-tb' | 'tb-rl' | 'lr' | 'rl' | 'tb';
declare type CSSPropertyVal<A> = A | 'inherit' | 'initial';
export declare type OriginalCSSPropertySetStrict = {
    alignContent?: CSSPropertyVal<alignContent>;
    alignItems?: CSSPropertyVal<alignItems>;
    alignSelf?: CSSPropertyVal<alignSelf>;
    all?: CSSPropertyVal<all>;
    animation?: CSSPropertyVal<animation>;
    animationDelay?: CSSPropertyVal<animationDelay>;
    animationDirection?: CSSPropertyVal<animationDirection>;
    animationDuration?: CSSPropertyVal<animationDuration>;
    animationFillMode?: CSSPropertyVal<animationFillMode>;
    animationIterationCount?: CSSPropertyVal<animationIterationCount>;
    animationName?: CSSPropertyVal<animationName>;
    animationPlayState?: CSSPropertyVal<animationPlayState>;
    animationTimingFunction?: CSSPropertyVal<animationTimingFunction>;
    appearance?: CSSPropertyVal<appearance>;
    azimuth?: CSSPropertyVal<azimuth>;
    backdropFilter?: CSSPropertyVal<backdropFilter>;
    backfaceVisibility?: CSSPropertyVal<backfaceVisibility>;
    background?: CSSPropertyVal<background>;
    backgroundAttachment?: CSSPropertyVal<backgroundAttachment>;
    backgroundBlendMode?: CSSPropertyVal<backgroundBlendMode>;
    backgroundClip?: CSSPropertyVal<backgroundClip>;
    backgroundColor?: CSSPropertyVal<backgroundColor>;
    backgroundImage?: CSSPropertyVal<backgroundImage>;
    backgroundOrigin?: CSSPropertyVal<backgroundOrigin>;
    backgroundPosition?: CSSPropertyVal<backgroundPosition>;
    backgroundPositionX?: CSSPropertyVal<backgroundPositionX>;
    backgroundPositionY?: CSSPropertyVal<backgroundPositionY>;
    backgroundRepeat?: CSSPropertyVal<backgroundRepeat>;
    backgroundSize?: CSSPropertyVal<backgroundSize>;
    blockSize?: CSSPropertyVal<blockSize>;
    border?: CSSPropertyVal<border>;
    borderBlockEnd?: CSSPropertyVal<borderBlockEnd>;
    borderBlockEndColor?: CSSPropertyVal<borderBlockEndColor>;
    borderBlockEndStyle?: CSSPropertyVal<borderBlockEndStyle>;
    borderBlockEndWidth?: CSSPropertyVal<borderBlockEndWidth>;
    borderBlockStart?: CSSPropertyVal<borderBlockStart>;
    borderBlockStartColor?: CSSPropertyVal<borderBlockStartColor>;
    borderBlockStartStyle?: CSSPropertyVal<borderBlockStartStyle>;
    borderBlockStartWidth?: CSSPropertyVal<borderBlockStartWidth>;
    borderBottom?: CSSPropertyVal<border>;
    borderBottomColor?: CSSPropertyVal<Color>;
    borderBottomLeftRadius?: CSSPropertyVal<borderBottomLeftRadius>;
    borderBottomRightRadius?: CSSPropertyVal<borderBottomRightRadius>;
    borderBottomStyle?: CSSPropertyVal<borderBottomStyle>;
    borderBottomWidth?: CSSPropertyVal<borderBottomWidth>;
    borderCollapse?: CSSPropertyVal<borderCollapse>;
    borderColor?: CSSPropertyVal<borderColor>;
    borderImage?: CSSPropertyVal<borderImage>;
    borderImageOutset?: CSSPropertyVal<borderImageOutset>;
    borderImageRepeat?: CSSPropertyVal<borderImageRepeat>;
    borderImageSlice?: CSSPropertyVal<borderImageSlice>;
    borderImageSource?: CSSPropertyVal<borderImageSource>;
    borderImageWidth?: CSSPropertyVal<borderImageWidth>;
    borderInlineEnd?: CSSPropertyVal<borderInlineEnd>;
    borderInlineEndColor?: CSSPropertyVal<borderInlineEndColor>;
    borderInlineEndStyle?: CSSPropertyVal<borderInlineEndStyle>;
    borderInlineEndWidth?: CSSPropertyVal<borderInlineEndWidth>;
    borderInlineStart?: CSSPropertyVal<borderInlineStart>;
    borderInlineStartColor?: CSSPropertyVal<borderInlineStartColor>;
    borderInlineStartStyle?: CSSPropertyVal<borderInlineStartStyle>;
    borderInlineStartWidth?: CSSPropertyVal<borderInlineStartWidth>;
    borderLeft?: CSSPropertyVal<border>;
    borderLeftColor?: CSSPropertyVal<borderLeftColor>;
    borderLeftStyle?: CSSPropertyVal<borderLeftStyle>;
    borderLeftWidth?: CSSPropertyVal<borderLeftWidth>;
    borderRadius?: CSSPropertyVal<borderRadius>;
    borderRight?: CSSPropertyVal<border>;
    borderRightColor?: CSSPropertyVal<borderRightColor>;
    borderRightStyle?: CSSPropertyVal<borderRightStyle>;
    borderRightWidth?: CSSPropertyVal<borderRightWidth>;
    borderSpacing?: CSSPropertyVal<borderSpacing>;
    borderStyle?: CSSPropertyVal<borderStyle>;
    borderTop?: CSSPropertyVal<border>;
    borderTopColor?: CSSPropertyVal<Color>;
    borderTopLeftRadius?: CSSPropertyVal<borderTopLeftRadius>;
    borderTopRightRadius?: CSSPropertyVal<borderTopRightRadius>;
    borderTopStyle?: CSSPropertyVal<borderTopStyle>;
    borderTopWidth?: CSSPropertyVal<borderTopWidth>;
    borderWidth?: CSSPropertyVal<borderWidth>;
    bottom?: CSSPropertyVal<number | string>;
    boxAlign?: CSSPropertyVal<boxAlign>;
    boxDecorationBreak?: CSSPropertyVal<boxDecorationBreak>;
    boxDirection?: CSSPropertyVal<boxDirection>;
    boxFlex?: CSSPropertyVal<boxFlex>;
    boxFlexGroup?: CSSPropertyVal<boxFlexGroup>;
    boxLines?: CSSPropertyVal<boxLines>;
    boxOrdinalGroup?: CSSPropertyVal<boxOrdinalGroup>;
    boxOrient?: CSSPropertyVal<boxOrient>;
    boxPack?: CSSPropertyVal<boxPack>;
    boxShadow?: CSSPropertyVal<boxShadow>;
    boxSizing?: CSSPropertyVal<boxSizing>;
    boxSuppress?: CSSPropertyVal<boxSuppress>;
    breakAfter?: CSSPropertyVal<breakAfter>;
    breakBefore?: CSSPropertyVal<breakBefore>;
    breakInside?: CSSPropertyVal<breakInside>;
    captionSide?: CSSPropertyVal<captionSide>;
    clear?: CSSPropertyVal<clear>;
    clip?: CSSPropertyVal<clip>;
    clipPath?: CSSPropertyVal<clipPath>;
    color?: CSSPropertyVal<Color>;
    columnCount?: CSSPropertyVal<columnCount>;
    columnFill?: CSSPropertyVal<columnFill>;
    columnGap?: CSSPropertyVal<columnGap>;
    columnRule?: CSSPropertyVal<columnRule>;
    columnRuleColor?: CSSPropertyVal<columnRuleColor>;
    columnRuleStyle?: CSSPropertyVal<columnRuleStyle>;
    columnRuleWidth?: CSSPropertyVal<columnRuleWidth>;
    columnSpan?: CSSPropertyVal<columnSpan>;
    columnWidth?: CSSPropertyVal<columnWidth>;
    columns?: CSSPropertyVal<columns>;
    contain?: CSSPropertyVal<contain>;
    content?: CSSPropertyVal<content>;
    counterIncrement?: CSSPropertyVal<counterIncrement>;
    counterReset?: CSSPropertyVal<counterReset>;
    cursor?: CSSPropertyVal<cursor>;
    direction?: CSSPropertyVal<direction>;
    display?: CSSPropertyVal<display>;
    displayInside?: CSSPropertyVal<displayInside>;
    displayList?: CSSPropertyVal<displayList>;
    displayOutside?: CSSPropertyVal<displayOutside>;
    emptyCells?: CSSPropertyVal<emptyCells>;
    filter?: CSSPropertyVal<filter>;
    flex?: CSSPropertyVal<flex>;
    flexBasis?: CSSPropertyVal<flexBasis>;
    flexDirection?: CSSPropertyVal<flexDirection>;
    flexFlow?: CSSPropertyVal<flexFlow>;
    flexGrow?: CSSPropertyVal<flexGrow>;
    flexShrink?: CSSPropertyVal<flexShrink>;
    flexWrap?: CSSPropertyVal<flexWrap>;
    float?: CSSPropertyVal<float>;
    font?: CSSPropertyVal<font>;
    fontFamily?: CSSPropertyVal<fontFamily>;
    fontFeatureSettings?: CSSPropertyVal<fontFeatureSettings>;
    fontKerning?: CSSPropertyVal<fontKerning>;
    fontLanguageOverride?: CSSPropertyVal<fontLanguageOverride>;
    fontSize?: CSSPropertyVal<fontSize>;
    fontSizeAdjust?: CSSPropertyVal<fontSizeAdjust>;
    fontStretch?: CSSPropertyVal<fontStretch>;
    fontStyle?: CSSPropertyVal<fontStyle>;
    fontSynthesis?: CSSPropertyVal<fontSynthesis>;
    fontVariant?: CSSPropertyVal<fontVariant>;
    fontVariantAlternates?: CSSPropertyVal<fontVariantAlternates>;
    fontVariantCaps?: CSSPropertyVal<fontVariantCaps>;
    fontVariantEastAsian?: CSSPropertyVal<fontVariantEastAsian>;
    fontVariantLigatures?: CSSPropertyVal<fontVariantLigatures>;
    fontVariantNumeric?: CSSPropertyVal<fontVariantNumeric>;
    fontVariantPosition?: CSSPropertyVal<fontVariantPosition>;
    fontWeight?: CSSPropertyVal<fontWeight>;
    grid?: CSSPropertyVal<grid>;
    gridArea?: CSSPropertyVal<gridArea>;
    gridAutoColumns?: CSSPropertyVal<gridAutoColumns>;
    gridAutoFlow?: CSSPropertyVal<gridAutoFlow>;
    gridAutoRows?: CSSPropertyVal<gridAutoRows>;
    gridColumn?: CSSPropertyVal<gridColumn>;
    gridColumnEnd?: CSSPropertyVal<gridColumnEnd>;
    gridColumnGap?: CSSPropertyVal<gridColumnGap>;
    gridColumnStart?: CSSPropertyVal<gridColumnStart>;
    gridGap?: CSSPropertyVal<gridGap>;
    gridRow?: CSSPropertyVal<gridRow>;
    gridRowEnd?: CSSPropertyVal<gridRowEnd>;
    gridRowGap?: CSSPropertyVal<gridRowGap>;
    gridRowStart?: CSSPropertyVal<gridRowStart>;
    gridTemplate?: CSSPropertyVal<gridTemplate>;
    gridTemplateAreas?: CSSPropertyVal<gridTemplateAreas>;
    gridTemplateColumns?: CSSPropertyVal<gridTemplateColumns>;
    gridTemplateRows?: CSSPropertyVal<gridTemplateRows>;
    height?: CSSPropertyVal<number | string>;
    hyphens?: CSSPropertyVal<hyphens>;
    imageOrientation?: CSSPropertyVal<imageOrientation>;
    imageRendering?: CSSPropertyVal<imageRendering>;
    imageResolution?: CSSPropertyVal<imageResolution>;
    imeMode?: CSSPropertyVal<imeMode>;
    initialLetter?: CSSPropertyVal<initialLetter>;
    initialLetterAlign?: CSSPropertyVal<initialLetterAlign>;
    inlineSize?: CSSPropertyVal<inlineSize>;
    isolation?: CSSPropertyVal<isolation>;
    justifyContent?: CSSPropertyVal<justifyContent>;
    left?: CSSPropertyVal<number | string>;
    letterSpacing?: CSSPropertyVal<letterSpacing>;
    lineBreak?: CSSPropertyVal<lineBreak>;
    lineHeight?: CSSPropertyVal<lineHeight>;
    listStyle?: CSSPropertyVal<listStyle>;
    listStyleImage?: CSSPropertyVal<listStyleImage>;
    listStylePosition?: CSSPropertyVal<listStylePosition>;
    listStyleType?: CSSPropertyVal<listStyleType>;
    margin?: CSSPropertyVal<margin>;
    marginBlockEnd?: CSSPropertyVal<marginBlockEnd>;
    marginBlockStart?: CSSPropertyVal<marginBlockStart>;
    marginBottom?: CSSPropertyVal<marginBottom>;
    marginInlineEnd?: CSSPropertyVal<marginInlineEnd>;
    marginInlineStart?: CSSPropertyVal<marginInlineStart>;
    marginLeft?: CSSPropertyVal<marginLeft>;
    marginRight?: CSSPropertyVal<marginRight>;
    marginTop?: CSSPropertyVal<marginTop>;
    markerOffset?: CSSPropertyVal<markerOffset>;
    mask?: CSSPropertyVal<mask>;
    maskClip?: CSSPropertyVal<maskClip>;
    maskComposite?: CSSPropertyVal<maskComposite>;
    maskImage?: CSSPropertyVal<maskImage>;
    maskMode?: CSSPropertyVal<maskMode>;
    maskOrigin?: CSSPropertyVal<maskOrigin>;
    maskPosition?: CSSPropertyVal<maskPosition>;
    maskRepeat?: CSSPropertyVal<maskRepeat>;
    maskSize?: CSSPropertyVal<maskSize>;
    maskType?: CSSPropertyVal<maskType>;
    maxBlockSize?: CSSPropertyVal<maxBlockSize>;
    maxHeight?: CSSPropertyVal<maxHeight>;
    maxInlineSize?: CSSPropertyVal<maxInlineSize>;
    maxWidth?: CSSPropertyVal<maxWidth>;
    minBlockSize?: CSSPropertyVal<minBlockSize>;
    minHeight?: CSSPropertyVal<minHeight>;
    minInlineSize?: CSSPropertyVal<minInlineSize>;
    minWidth?: CSSPropertyVal<minWidth>;
    mixBlendMode?: CSSPropertyVal<mixBlendMode>;
    motion?: CSSPropertyVal<motion>;
    motionOffset?: CSSPropertyVal<motionOffset>;
    motionPath?: CSSPropertyVal<motionPath>;
    motionRotation?: CSSPropertyVal<motionRotation>;
    objectFit?: CSSPropertyVal<objectFit>;
    objectPosition?: CSSPropertyVal<objectPosition>;
    offsetBlockEnd?: CSSPropertyVal<offsetBlockEnd>;
    offsetBlockStart?: CSSPropertyVal<offsetBlockStart>;
    offsetInlineEnd?: CSSPropertyVal<offsetInlineEnd>;
    offsetInlineStart?: CSSPropertyVal<offsetInlineStart>;
    opacity?: CSSPropertyVal<opacity>;
    order?: CSSPropertyVal<order>;
    orphans?: CSSPropertyVal<orphans>;
    outline?: CSSPropertyVal<outline>;
    outlineColor?: CSSPropertyVal<outlineColor>;
    outlineOffset?: CSSPropertyVal<outlineOffset>;
    outlineStyle?: CSSPropertyVal<outlineStyle>;
    outlineWidth?: CSSPropertyVal<outlineWidth>;
    overflow?: CSSPropertyVal<overflow>;
    overflowClipBox?: CSSPropertyVal<overflowClipBox>;
    overflowWrap?: CSSPropertyVal<overflowWrap>;
    overflowX?: CSSPropertyVal<overflowX>;
    overflowY?: CSSPropertyVal<overflowY>;
    padding?: CSSPropertyVal<padding>;
    paddingBlockEnd?: CSSPropertyVal<paddingBlockEnd>;
    paddingBlockStart?: CSSPropertyVal<paddingBlockStart>;
    paddingBottom?: CSSPropertyVal<paddingBottom>;
    paddingInlineEnd?: CSSPropertyVal<paddingInlineEnd>;
    paddingInlineStart?: CSSPropertyVal<paddingInlineStart>;
    paddingLeft?: CSSPropertyVal<paddingLeft>;
    paddingRight?: CSSPropertyVal<paddingRight>;
    paddingTop?: CSSPropertyVal<paddingTop>;
    paddingH?: CSSPropertyVal<number | string>;
    paddingV?: CSSPropertyVal<number | string>;
    marginH?: CSSPropertyVal<number | string>;
    marginV?: CSSPropertyVal<number | string>;
    pageBreakAfter?: CSSPropertyVal<pageBreakAfter>;
    pageBreakBefore?: CSSPropertyVal<pageBreakBefore>;
    pageBreakInside?: CSSPropertyVal<pageBreakInside>;
    perspective?: CSSPropertyVal<perspective>;
    perspectiveOrigin?: CSSPropertyVal<perspectiveOrigin>;
    pointerEvents?: CSSPropertyVal<pointerEvents>;
    position?: CSSPropertyVal<position>;
    quotes?: CSSPropertyVal<quotes>;
    resize?: CSSPropertyVal<resize>;
    right?: CSSPropertyVal<number | string>;
    rubyAlign?: CSSPropertyVal<rubyAlign>;
    rubyMerge?: CSSPropertyVal<rubyMerge>;
    rubyPosition?: CSSPropertyVal<rubyPosition>;
    scrollBehavior?: CSSPropertyVal<scrollBehavior>;
    scrollSnapCoordinate?: CSSPropertyVal<scrollSnapCoordinate>;
    scrollSnapDestination?: CSSPropertyVal<scrollSnapDestination>;
    scrollSnapPointsX?: CSSPropertyVal<scrollSnapPointsX>;
    scrollSnapPointsY?: CSSPropertyVal<scrollSnapPointsY>;
    scrollSnapType?: CSSPropertyVal<scrollSnapType>;
    scrollSnapTypeX?: CSSPropertyVal<scrollSnapTypeX>;
    scrollSnapTypeY?: CSSPropertyVal<scrollSnapTypeY>;
    shapeImageThreshold?: CSSPropertyVal<shapeImageThreshold>;
    shapeMargin?: CSSPropertyVal<shapeMargin>;
    shapeOutside?: CSSPropertyVal<shapeOutside>;
    tabSize?: CSSPropertyVal<tabSize>;
    tableLayout?: CSSPropertyVal<tableLayout>;
    textAlign?: CSSPropertyVal<textAlign>;
    textAlignLast?: CSSPropertyVal<textAlignLast>;
    textCombineUpright?: CSSPropertyVal<textCombineUpright>;
    textDecoration?: CSSPropertyVal<textDecoration>;
    textDecorationColor?: CSSPropertyVal<textDecorationColor>;
    textDecorationLine?: CSSPropertyVal<textDecorationLine>;
    textDecorationSkip?: CSSPropertyVal<textDecorationSkip>;
    textDecorationStyle?: CSSPropertyVal<textDecorationStyle>;
    textEmphasis?: CSSPropertyVal<textEmphasis>;
    textEmphasisColor?: CSSPropertyVal<textEmphasisColor>;
    textEmphasisPosition?: CSSPropertyVal<textEmphasisPosition>;
    textEmphasisStyle?: CSSPropertyVal<textEmphasisStyle>;
    textIndent?: CSSPropertyVal<textIndent>;
    textOrientation?: CSSPropertyVal<textOrientation>;
    textOverflow?: CSSPropertyVal<textOverflow>;
    textRendering?: CSSPropertyVal<textRendering>;
    textShadow?: CSSPropertyVal<textShadow>;
    textSizeAdjust?: CSSPropertyVal<textSizeAdjust>;
    textTransform?: CSSPropertyVal<textTransform>;
    textUnderlinePosition?: CSSPropertyVal<textUnderlinePosition>;
    top?: CSSPropertyVal<number | string>;
    touchAction?: CSSPropertyVal<touchAction>;
    transform?: CSSPropertyVal<transform>;
    transformBox?: CSSPropertyVal<transformBox>;
    transformOrigin?: CSSPropertyVal<transformOrigin>;
    transformStyle?: CSSPropertyVal<transformStyle>;
    transition?: CSSPropertyVal<transition>;
    transitionDelay?: CSSPropertyVal<transitionDelay>;
    transitionDuration?: CSSPropertyVal<transitionDuration>;
    transitionProperty?: CSSPropertyVal<transitionProperty>;
    transitionTimingFunction?: CSSPropertyVal<transitionTimingFunction>;
    unicodeBidi?: CSSPropertyVal<unicodeBidi>;
    userSelect?: CSSPropertyVal<userSelect>;
    verticalAlign?: CSSPropertyVal<verticalAlign>;
    visibility?: CSSPropertyVal<visibility>;
    whiteSpace?: CSSPropertyVal<whiteSpace>;
    widows?: CSSPropertyVal<widows>;
    width?: CSSPropertyVal<number | string>;
    willChange?: CSSPropertyVal<willChange>;
    wordBreak?: CSSPropertyVal<wordBreak>;
    wordSpacing?: CSSPropertyVal<wordSpacing>;
    wordWrap?: CSSPropertyVal<wordWrap>;
    writingMode?: CSSPropertyVal<writingMode>;
    zIndex?: CSSPropertyVal<zIndex>;
    alignmentBaseline?: CSSPropertyVal<alignmentBaseline>;
    baselineShift?: CSSPropertyVal<baselineShift>;
    behavior?: CSSPropertyVal<behavior>;
    clipRule?: CSSPropertyVal<clipRule>;
    cue?: CSSPropertyVal<cue>;
    cueAfter?: CSSPropertyVal<cueAfter>;
    cueBefore?: CSSPropertyVal<cueBefore>;
    dominantBaseline?: CSSPropertyVal<dominantBaseline>;
    fill?: CSSPropertyVal<fill>;
    fillOpacity?: CSSPropertyVal<fillOpacity>;
    fillRule?: CSSPropertyVal<fillRule>;
    glyphOrientationHorizontal?: CSSPropertyVal<glyphOrientationHorizontal>;
    glyphOrientationVertical?: CSSPropertyVal<glyphOrientationVertical>;
    kerning?: CSSPropertyVal<kerning>;
    marker?: CSSPropertyVal<marker>;
    markerEnd?: CSSPropertyVal<markerEnd>;
    markerMid?: CSSPropertyVal<markerMid>;
    markerStart?: CSSPropertyVal<markerStart>;
    pause?: CSSPropertyVal<pause>;
    pauseAfter?: CSSPropertyVal<pauseAfter>;
    pauseBefore?: CSSPropertyVal<pauseBefore>;
    rest?: CSSPropertyVal<rest>;
    restAfter?: CSSPropertyVal<restAfter>;
    restBefore?: CSSPropertyVal<restBefore>;
    shapeRendering?: CSSPropertyVal<shapeRendering>;
    src?: CSSPropertyVal<src>;
    speak?: CSSPropertyVal<speak>;
    speakAs?: CSSPropertyVal<speakAs>;
    stroke?: CSSPropertyVal<stroke>;
    strokeDasharray?: CSSPropertyVal<strokeDasharray>;
    strokeDashoffset?: CSSPropertyVal<strokeDashoffset>;
    strokeLinecap?: CSSPropertyVal<strokeLinecap>;
    strokeLinejoin?: CSSPropertyVal<strokeLinejoin>;
    strokeMiterlimit?: CSSPropertyVal<strokeMiterlimit>;
    strokeOpacity?: CSSPropertyVal<strokeOpacity>;
    strokeWidth?: CSSPropertyVal<strokeWidth>;
    textAnchor?: CSSPropertyVal<textAnchor>;
    unicodeRange?: CSSPropertyVal<unicodeRange>;
    voiceBalance?: CSSPropertyVal<voiceBalance>;
    voiceDuration?: CSSPropertyVal<voiceDuration>;
    voiceFamily?: CSSPropertyVal<voiceFamily>;
    voicePitch?: CSSPropertyVal<voicePitch>;
    voiceRange?: CSSPropertyVal<voiceRange>;
    voiceRate?: CSSPropertyVal<voiceRate>;
    voiceStress?: CSSPropertyVal<voiceStress>;
    voiceVolume?: CSSPropertyVal<voiceVolume>;
    zoom?: CSSPropertyVal<zoom>;
    WebkitAppRegion?: string;
};
export declare type CSSPropertySetStrict = OriginalCSSPropertySetStrict & {
    borderLeftRadius?: number;
    borderRightRadius?: number;
    borderBottomRadius?: number;
    borderTopRadius?: number;
};
export declare type CSSPropertySet = CSSPropertySetStrict & {
    [key: string]: CSSPropertySetStrict | any;
};
export {};
//# sourceMappingURL=cssPropertySet.d.ts.map